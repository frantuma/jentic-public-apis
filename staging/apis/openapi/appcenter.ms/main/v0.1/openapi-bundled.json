{
  "openapi": "3.0.0",
  "info": {
    "description": "Microsoft Visual Studio App Center API",
    "title": "App Center Client",
    "version": "v0.1",
    "x-jentic-source-url": "https://api.appcenter.ms/preview/swagger.json"
  },
  "servers": [
    {
      "url": "https://api.appcenter.ms/"
    }
  ],
  "paths": {
    "/v0.1/account/test/export": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "resources": {
                      "items": {
                        "properties": {
                          "path": {
                            "format": "URL",
                            "type": "string"
                          },
                          "rel": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "test"
        ],
        "description": "Lists all the endpoints available for Test accounts data",
        "operationId": "test_gdprExportAccounts"
      }
    },
    "/v0.1/account/test/export/accounts": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "format": "uuid",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "test"
        ],
        "description": "Lists account data",
        "operationId": "test_gdprExportAccount"
      }
    },
    "/v0.1/account/test/export/featureFlags": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "target_id": {
                      "format": "uuid",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "test"
        ],
        "description": "Lists feature flag data",
        "operationId": "test_gdprExportFeatureFlag"
      }
    },
    "/v0.1/administeredOrgs": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "organizations": {
                      "properties": {
                        "avatar_url": {
                          "description": "The URL to a user-uploaded Avatar image",
                          "type": "string"
                        },
                        "created_at": {
                          "description": "The creation date of this organization",
                          "type": "string"
                        },
                        "display_name": {
                          "description": "The display name of the organization",
                          "type": "string"
                        },
                        "id": {
                          "description": "The internal unique id (UUID) of the organization.",
                          "format": "uuid",
                          "type": "string"
                        },
                        "name": {
                          "description": "The slug name of the organization",
                          "type": "string"
                        },
                        "origin": {
                          "description": "The creation origin of this organization",
                          "enum": [
                            "appcenter",
                            "hockeyapp"
                          ],
                          "type": "string"
                        },
                        "updated_at": {
                          "description": "The date the organization was last updated at",
                          "type": "string"
                        }
                      },
                      "required": [
                        "id",
                        "display_name",
                        "name",
                        "origin",
                        "created_at",
                        "updated_at"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "organizations"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Returns a list organizations in which the requesting user is an admin",
        "operationId": "organizations_listAdministered"
      }
    },
    "/v0.1/api_tokens": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "created_at": {
                        "description": "The creation time",
                        "type": "string"
                      },
                      "description": {
                        "description": "The description of the token",
                        "type": "string"
                      },
                      "id": {
                        "description": "The unique id (UUID) of the api token",
                        "type": "string"
                      },
                      "scope": {
                        "description": "The scope for this token.",
                        "items": {
                          "enum": [
                            "all",
                            "viewer"
                          ],
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "id",
                      "created_at"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Basic": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Returns api tokens for the authenticated user",
        "operationId": "userApiTokens_list"
      },
      "post": {
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "api_token": {
                      "description": "The api token generated will not be accessible again",
                      "type": "string"
                    },
                    "created_at": {
                      "description": "The creation time",
                      "type": "string"
                    },
                    "description": {
                      "description": "The description of the token",
                      "type": "string"
                    },
                    "id": {
                      "description": "The unique id (UUID) of the api token",
                      "type": "string"
                    },
                    "scope": {
                      "description": "The scope for this token.",
                      "items": {
                        "enum": [
                          "all",
                          "viewer"
                        ],
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "id",
                    "created_at",
                    "api_token"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Basic": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Creates a new User API token",
        "operationId": "userApiTokens_new",
        "requestBody": {
          "$ref": "#/components/requestBodies/appApiTokens_newDescription"
        }
      }
    },
    "/v0.1/api_tokens/{api_token_id}": {
      "delete": {
        "parameters": [
          {
            "description": "The unique ID (UUID) of the api token",
            "in": "path",
            "name": "api_token_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "NotFound"
          }
        },
        "security": [
          {
            "Basic": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Delete the user api_token object with the specific id",
        "operationId": "userApiTokens_delete"
      }
    },
    "/v0.1/apps": {
      "get": {
        "parameters": [
          {
            "description": "The name of the attribute by which to order the response by. By default, apps are in order of creation. All results are ordered in ascending order.",
            "in": "query",
            "name": "$orderBy",
            "schema": {
              "enum": [
                "display_name",
                "name"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "allOf": [
                      {
                        "properties": {
                          "description": {
                            "description": "The description of the app",
                            "type": "string"
                          },
                          "display_name": {
                            "description": "The display name of the app",
                            "type": "string"
                          },
                          "icon_source": {
                            "description": "The string representation of the source of the app's icon",
                            "type": "string"
                          },
                          "icon_url": {
                            "description": "The string representation of the URL pointing to the app's icon",
                            "type": "string"
                          },
                          "id": {
                            "description": "The unique ID (UUID) of the app",
                            "format": "uuid",
                            "type": "string"
                          },
                          "name": {
                            "description": "The name of the app used in URLs",
                            "type": "string"
                          },
                          "os": {
                            "description": "The OS the app will be running on",
                            "enum": [
                              "Android",
                              "iOS",
                              "macOS",
                              "Tizen",
                              "tvOS",
                              "Windows",
                              "Linux",
                              "Custom"
                            ],
                            "type": "string"
                          },
                          "owner": {
                            "description": "The information about the app's owner",
                            "properties": {
                              "avatar_url": {
                                "description": "The avatar URL of the owner",
                                "type": "string"
                              },
                              "display_name": {
                                "description": "The owner's display name",
                                "type": "string"
                              },
                              "email": {
                                "description": "The owner's email address",
                                "type": "string"
                              },
                              "id": {
                                "description": "The unique id (UUID) of the owner",
                                "format": "uuid",
                                "type": "string"
                              },
                              "name": {
                                "description": "The unique name that used to identify the owner",
                                "type": "string"
                              },
                              "type": {
                                "description": "The owner type. Can either be 'org' or 'user'",
                                "enum": [
                                  "org",
                                  "user"
                                ],
                                "type": "string"
                              }
                            },
                            "required": [
                              "id",
                              "display_name",
                              "name",
                              "type"
                            ],
                            "type": "object"
                          },
                          "release_type": {
                            "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
                            "type": "string"
                          }
                        },
                        "required": [
                          "id",
                          "display_name",
                          "name",
                          "os",
                          "owner"
                        ],
                        "type": "object"
                      },
                      {
                        "properties": {
                          "app_secret": {
                            "description": "A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics",
                            "type": "string"
                          },
                          "azure_subscription": {
                            "properties": {
                              "is_billable": {
                                "description": "If the subscription can be used for billing",
                                "type": "boolean"
                              },
                              "is_billing": {
                                "description": "If the subscription is used for billing",
                                "type": "boolean"
                              },
                              "is_microsoft_internal": {
                                "description": "If the subscription is internal Microsoft subscription",
                                "type": "boolean"
                              },
                              "subscription_id": {
                                "description": "The azure subscription id",
                                "format": "uuid",
                                "type": "string"
                              },
                              "subscription_name": {
                                "description": "The name of the azure subscription",
                                "type": "string"
                              },
                              "tenant_id": {
                                "description": "The tenant id of the azure subscription belongs to",
                                "format": "uuid",
                                "type": "string"
                              }
                            },
                            "required": [
                              "subscription_id",
                              "tenant_id",
                              "subscription_name"
                            ],
                            "type": "object"
                          },
                          "created_at": {
                            "description": "The created date of this app",
                            "type": "string"
                          },
                          "member_permissions": {
                            "description": "The permissions of the calling user",
                            "items": {
                              "enum": [
                                "manager",
                                "developer",
                                "viewer",
                                "tester"
                              ],
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "origin": {
                            "description": "The creation origin of this app",
                            "enum": [
                              "appcenter",
                              "hockeyapp",
                              "codepush"
                            ],
                            "type": "string"
                          },
                          "platform": {
                            "description": "The platform of the app",
                            "enum": [
                              "Java",
                              "Objective-C-Swift",
                              "UWP",
                              "Cordova",
                              "React-Native",
                              "Unity",
                              "Electron",
                              "Xamarin",
                              "WPF",
                              "WinForms",
                              "Unknown",
                              "Custom"
                            ],
                            "type": "string"
                          },
                          "updated_at": {
                            "description": "The last updated date of this app",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "required": [
                      "app_secret",
                      "platform",
                      "origin"
                    ]
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Returns a list of apps",
        "operationId": "apps_list"
      },
      "post": {
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "properties": {
                        "description": {
                          "description": "The description of the app",
                          "type": "string"
                        },
                        "display_name": {
                          "description": "The display name of the app",
                          "type": "string"
                        },
                        "icon_source": {
                          "description": "The string representation of the source of the app's icon",
                          "type": "string"
                        },
                        "icon_url": {
                          "description": "The string representation of the URL pointing to the app's icon",
                          "type": "string"
                        },
                        "id": {
                          "description": "The unique ID (UUID) of the app",
                          "format": "uuid",
                          "type": "string"
                        },
                        "name": {
                          "description": "The name of the app used in URLs",
                          "type": "string"
                        },
                        "os": {
                          "description": "The OS the app will be running on",
                          "enum": [
                            "Android",
                            "iOS",
                            "macOS",
                            "Tizen",
                            "tvOS",
                            "Windows",
                            "Linux",
                            "Custom"
                          ],
                          "type": "string"
                        },
                        "owner": {
                          "description": "The information about the app's owner",
                          "properties": {
                            "avatar_url": {
                              "description": "The avatar URL of the owner",
                              "type": "string"
                            },
                            "display_name": {
                              "description": "The owner's display name",
                              "type": "string"
                            },
                            "email": {
                              "description": "The owner's email address",
                              "type": "string"
                            },
                            "id": {
                              "description": "The unique id (UUID) of the owner",
                              "format": "uuid",
                              "type": "string"
                            },
                            "name": {
                              "description": "The unique name that used to identify the owner",
                              "type": "string"
                            },
                            "type": {
                              "description": "The owner type. Can either be 'org' or 'user'",
                              "enum": [
                                "org",
                                "user"
                              ],
                              "type": "string"
                            }
                          },
                          "required": [
                            "id",
                            "display_name",
                            "name",
                            "type"
                          ],
                          "type": "object"
                        },
                        "release_type": {
                          "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
                          "type": "string"
                        }
                      },
                      "required": [
                        "id",
                        "display_name",
                        "name",
                        "os",
                        "owner"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "app_secret": {
                          "description": "A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics",
                          "type": "string"
                        },
                        "azure_subscription": {
                          "properties": {
                            "is_billable": {
                              "description": "If the subscription can be used for billing",
                              "type": "boolean"
                            },
                            "is_billing": {
                              "description": "If the subscription is used for billing",
                              "type": "boolean"
                            },
                            "is_microsoft_internal": {
                              "description": "If the subscription is internal Microsoft subscription",
                              "type": "boolean"
                            },
                            "subscription_id": {
                              "description": "The azure subscription id",
                              "format": "uuid",
                              "type": "string"
                            },
                            "subscription_name": {
                              "description": "The name of the azure subscription",
                              "type": "string"
                            },
                            "tenant_id": {
                              "description": "The tenant id of the azure subscription belongs to",
                              "format": "uuid",
                              "type": "string"
                            }
                          },
                          "required": [
                            "subscription_id",
                            "tenant_id",
                            "subscription_name"
                          ],
                          "type": "object"
                        },
                        "created_at": {
                          "description": "The created date of this app",
                          "type": "string"
                        },
                        "member_permissions": {
                          "description": "The permissions of the calling user",
                          "items": {
                            "enum": [
                              "manager",
                              "developer",
                              "viewer",
                              "tester"
                            ],
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "origin": {
                          "description": "The creation origin of this app",
                          "enum": [
                            "appcenter",
                            "hockeyapp",
                            "codepush"
                          ],
                          "type": "string"
                        },
                        "platform": {
                          "description": "The platform of the app",
                          "enum": [
                            "Java",
                            "Objective-C-Swift",
                            "UWP",
                            "Cordova",
                            "React-Native",
                            "Unity",
                            "Electron",
                            "Xamarin",
                            "WPF",
                            "WinForms",
                            "Unknown",
                            "Custom"
                          ],
                          "type": "string"
                        },
                        "updated_at": {
                          "description": "The last updated date of this app",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "required": [
                    "app_secret",
                    "platform",
                    "origin"
                  ]
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Creates a new app and returns it to the caller",
        "operationId": "apps_create",
        "requestBody": {
          "$ref": "#/components/requestBodies/apps_createForOrgApp"
        }
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}": {
      "delete": {
        "parameters": [
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Delete an app",
        "operationId": "apps_delete",
        "x-api-principals": [
          "user"
        ]
      },
      "get": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "properties": {
                        "description": {
                          "description": "The description of the app",
                          "type": "string"
                        },
                        "display_name": {
                          "description": "The display name of the app",
                          "type": "string"
                        },
                        "icon_source": {
                          "description": "The string representation of the source of the app's icon",
                          "type": "string"
                        },
                        "icon_url": {
                          "description": "The string representation of the URL pointing to the app's icon",
                          "type": "string"
                        },
                        "id": {
                          "description": "The unique ID (UUID) of the app",
                          "format": "uuid",
                          "type": "string"
                        },
                        "name": {
                          "description": "The name of the app used in URLs",
                          "type": "string"
                        },
                        "os": {
                          "description": "The OS the app will be running on",
                          "enum": [
                            "Android",
                            "iOS",
                            "macOS",
                            "Tizen",
                            "tvOS",
                            "Windows",
                            "Linux",
                            "Custom"
                          ],
                          "type": "string"
                        },
                        "owner": {
                          "description": "The information about the app's owner",
                          "properties": {
                            "avatar_url": {
                              "description": "The avatar URL of the owner",
                              "type": "string"
                            },
                            "display_name": {
                              "description": "The owner's display name",
                              "type": "string"
                            },
                            "email": {
                              "description": "The owner's email address",
                              "type": "string"
                            },
                            "id": {
                              "description": "The unique id (UUID) of the owner",
                              "format": "uuid",
                              "type": "string"
                            },
                            "name": {
                              "description": "The unique name that used to identify the owner",
                              "type": "string"
                            },
                            "type": {
                              "description": "The owner type. Can either be 'org' or 'user'",
                              "enum": [
                                "org",
                                "user"
                              ],
                              "type": "string"
                            }
                          },
                          "required": [
                            "id",
                            "display_name",
                            "name",
                            "type"
                          ],
                          "type": "object"
                        },
                        "release_type": {
                          "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
                          "type": "string"
                        }
                      },
                      "required": [
                        "id",
                        "display_name",
                        "name",
                        "os",
                        "owner"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "app_secret": {
                          "description": "A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics",
                          "type": "string"
                        },
                        "azure_subscription": {
                          "properties": {
                            "is_billable": {
                              "description": "If the subscription can be used for billing",
                              "type": "boolean"
                            },
                            "is_billing": {
                              "description": "If the subscription is used for billing",
                              "type": "boolean"
                            },
                            "is_microsoft_internal": {
                              "description": "If the subscription is internal Microsoft subscription",
                              "type": "boolean"
                            },
                            "subscription_id": {
                              "description": "The azure subscription id",
                              "format": "uuid",
                              "type": "string"
                            },
                            "subscription_name": {
                              "description": "The name of the azure subscription",
                              "type": "string"
                            },
                            "tenant_id": {
                              "description": "The tenant id of the azure subscription belongs to",
                              "format": "uuid",
                              "type": "string"
                            }
                          },
                          "required": [
                            "subscription_id",
                            "tenant_id",
                            "subscription_name"
                          ],
                          "type": "object"
                        },
                        "created_at": {
                          "description": "The created date of this app",
                          "type": "string"
                        },
                        "member_permissions": {
                          "description": "The permissions of the calling user",
                          "items": {
                            "enum": [
                              "manager",
                              "developer",
                              "viewer",
                              "tester"
                            ],
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "origin": {
                          "description": "The creation origin of this app",
                          "enum": [
                            "appcenter",
                            "hockeyapp",
                            "codepush"
                          ],
                          "type": "string"
                        },
                        "platform": {
                          "description": "The platform of the app",
                          "enum": [
                            "Java",
                            "Objective-C-Swift",
                            "UWP",
                            "Cordova",
                            "React-Native",
                            "Unity",
                            "Electron",
                            "Xamarin",
                            "WPF",
                            "WinForms",
                            "Unknown",
                            "Custom"
                          ],
                          "type": "string"
                        },
                        "updated_at": {
                          "description": "The last updated date of this app",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "required": [
                    "app_secret",
                    "platform",
                    "origin"
                  ]
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Return a specific app with the given app name which belongs to the given owner.",
        "operationId": "apps_get"
      },
      "patch": {
        "parameters": [
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "properties": {
                        "description": {
                          "description": "The description of the app",
                          "type": "string"
                        },
                        "display_name": {
                          "description": "The display name of the app",
                          "type": "string"
                        },
                        "icon_source": {
                          "description": "The string representation of the source of the app's icon",
                          "type": "string"
                        },
                        "icon_url": {
                          "description": "The string representation of the URL pointing to the app's icon",
                          "type": "string"
                        },
                        "id": {
                          "description": "The unique ID (UUID) of the app",
                          "format": "uuid",
                          "type": "string"
                        },
                        "name": {
                          "description": "The name of the app used in URLs",
                          "type": "string"
                        },
                        "os": {
                          "description": "The OS the app will be running on",
                          "enum": [
                            "Android",
                            "iOS",
                            "macOS",
                            "Tizen",
                            "tvOS",
                            "Windows",
                            "Linux",
                            "Custom"
                          ],
                          "type": "string"
                        },
                        "owner": {
                          "description": "The information about the app's owner",
                          "properties": {
                            "avatar_url": {
                              "description": "The avatar URL of the owner",
                              "type": "string"
                            },
                            "display_name": {
                              "description": "The owner's display name",
                              "type": "string"
                            },
                            "email": {
                              "description": "The owner's email address",
                              "type": "string"
                            },
                            "id": {
                              "description": "The unique id (UUID) of the owner",
                              "format": "uuid",
                              "type": "string"
                            },
                            "name": {
                              "description": "The unique name that used to identify the owner",
                              "type": "string"
                            },
                            "type": {
                              "description": "The owner type. Can either be 'org' or 'user'",
                              "enum": [
                                "org",
                                "user"
                              ],
                              "type": "string"
                            }
                          },
                          "required": [
                            "id",
                            "display_name",
                            "name",
                            "type"
                          ],
                          "type": "object"
                        },
                        "release_type": {
                          "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
                          "type": "string"
                        }
                      },
                      "required": [
                        "id",
                        "display_name",
                        "name",
                        "os",
                        "owner"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "app_secret": {
                          "description": "A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics",
                          "type": "string"
                        },
                        "azure_subscription": {
                          "properties": {
                            "is_billable": {
                              "description": "If the subscription can be used for billing",
                              "type": "boolean"
                            },
                            "is_billing": {
                              "description": "If the subscription is used for billing",
                              "type": "boolean"
                            },
                            "is_microsoft_internal": {
                              "description": "If the subscription is internal Microsoft subscription",
                              "type": "boolean"
                            },
                            "subscription_id": {
                              "description": "The azure subscription id",
                              "format": "uuid",
                              "type": "string"
                            },
                            "subscription_name": {
                              "description": "The name of the azure subscription",
                              "type": "string"
                            },
                            "tenant_id": {
                              "description": "The tenant id of the azure subscription belongs to",
                              "format": "uuid",
                              "type": "string"
                            }
                          },
                          "required": [
                            "subscription_id",
                            "tenant_id",
                            "subscription_name"
                          ],
                          "type": "object"
                        },
                        "created_at": {
                          "description": "The created date of this app",
                          "type": "string"
                        },
                        "member_permissions": {
                          "description": "The permissions of the calling user",
                          "items": {
                            "enum": [
                              "manager",
                              "developer",
                              "viewer",
                              "tester"
                            ],
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "origin": {
                          "description": "The creation origin of this app",
                          "enum": [
                            "appcenter",
                            "hockeyapp",
                            "codepush"
                          ],
                          "type": "string"
                        },
                        "platform": {
                          "description": "The platform of the app",
                          "enum": [
                            "Java",
                            "Objective-C-Swift",
                            "UWP",
                            "Cordova",
                            "React-Native",
                            "Unity",
                            "Electron",
                            "Xamarin",
                            "WPF",
                            "WinForms",
                            "Unknown",
                            "Custom"
                          ],
                          "type": "string"
                        },
                        "updated_at": {
                          "description": "The last updated date of this app",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "required": [
                    "app_secret",
                    "platform",
                    "origin"
                  ]
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "BadRequest"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Partially updates a single app",
        "operationId": "apps_update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "description": {
                    "description": "A short text describing the app",
                    "type": "string"
                  },
                  "display_name": {
                    "description": "The display name of the app",
                    "type": "string"
                  },
                  "icon_asset_id": {
                    "description": "The uuid for the icon's asset id from ACFUS",
                    "format": "uuid",
                    "type": "string"
                  },
                  "icon_url": {
                    "description": "The string representation of the URL pointing to the app's icon",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the app used in URLs",
                    "type": "string"
                  },
                  "release_type": {
                    "description": "A one-word descriptive release type value that starts with a capital letter but is otherwise lowercase",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "The partial data for the app"
        }
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/active_device_counts": {
      "get": {
        "parameters": [
          {
            "description": "Start date time in data in ISO 8601 date time format.",
            "in": "query",
            "name": "start",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Last date time in data in ISO 8601 date time format.",
            "in": "query",
            "name": "end",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "To select specific application versions",
            "in": "query",
            "name": "versions",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "pipeDelimited",
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Application build number. If build number is specified than multiple versions are not allowed.",
            "in": "query",
            "name": "app_build",
            "required": false,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "daily": {
                      "description": "The active device count for each interval.",
                      "items": {
                        "properties": {
                          "count": {
                            "description": "Count of the object.",
                            "format": "int64",
                            "type": "integer"
                          },
                          "datetime": {
                            "description": "The ISO 8601 datetime.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "monthly": {
                      "description": "The active device count for each interval with a month's retention.",
                      "items": {
                        "properties": {
                          "count": {
                            "description": "Count of the object.",
                            "format": "int64",
                            "type": "integer"
                          },
                          "datetime": {
                            "description": "The ISO 8601 datetime.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "weekly": {
                      "description": "The active device count for each interval with a week's retention.",
                      "items": {
                        "properties": {
                          "count": {
                            "description": "Count of the object.",
                            "format": "int64",
                            "type": "integer"
                          },
                          "datetime": {
                            "description": "The ISO 8601 datetime.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Count of active devices by interval in the time range."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error",
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "description": "The status code return by the API. It can be 400 or 403 or 500.",
                          "enum": [
                            400,
                            403,
                            500
                          ],
                          "type": "integer"
                        },
                        "message": {
                          "description": "The reason for the request failed.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason."
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "analytics"
        ],
        "description": "Count of active devices by interval in the time range.",
        "operationId": "Analytics_DeviceCounts"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/audiences": {
      "get": {
        "parameters": [
          {
            "description": "Include disabled audience definitions",
            "in": "query",
            "name": "include_disabled",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "List of audiences.",
                  "properties": {
                    "nextLink": {
                      "type": "string"
                    },
                    "values": {
                      "description": "List of audiences.",
                      "items": {
                        "description": "Audience definition.",
                        "properties": {
                          "definition": {
                            "description": "Audience definition in OData format.",
                            "type": "string"
                          },
                          "description": {
                            "description": "Audience description.",
                            "type": "string"
                          },
                          "estimated_count": {
                            "description": "Estimated audience size.",
                            "format": "int64",
                            "type": "integer"
                          },
                          "name": {
                            "description": "Audience name.",
                            "type": "string"
                          },
                          "state": {
                            "description": "Audience state.",
                            "enum": [
                              "Calculating",
                              "Ready",
                              "Disabled"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "name": "AudienceProcessingState"
                            }
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "values"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "List of audiences."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "analytics"
        ],
        "description": "Get list of audiences.",
        "operationId": "Analytics_ListAudiences"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/definition/test": {
      "post": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Audience test result.",
                  "properties": {
                    "custom_properties": {
                      "additionalProperties": {
                        "enum": [
                          "string",
                          "number",
                          "boolean",
                          "date_time"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "device_property_type"
                        }
                      },
                      "description": "Custom properties used in the definition.",
                      "type": "object"
                    },
                    "definition": {
                      "description": "Audience definition in OData format.",
                      "type": "string"
                    },
                    "estimated_count": {
                      "description": "Estimated audience size.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "estimated_total_count": {
                      "description": "Estimated total audience size.",
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Tests audience definition."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "analytics"
        ],
        "description": "Tests audience definition.",
        "operationId": "Analytics_TestAudience",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Audience definition.",
                "properties": {
                  "custom_properties": {
                    "additionalProperties": {
                      "enum": [
                        "string",
                        "number",
                        "boolean",
                        "date_time"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "device_property_type"
                      }
                    },
                    "description": "Custom properties used in the definition.",
                    "type": "object"
                  },
                  "definition": {
                    "description": "Audience definition in OData format.",
                    "maxLength": 2000,
                    "type": "string"
                  },
                  "description": {
                    "description": "Audience description.",
                    "maxLength": 128,
                    "type": "string"
                  },
                  "enabled": {
                    "default": true,
                    "type": "boolean"
                  }
                },
                "required": [
                  "definition"
                ],
                "type": "object"
              }
            }
          },
          "description": "Audience definition",
          "required": true
        }
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/metadata/custom_properties": {
      "get": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "List of device properties.",
                  "properties": {
                    "values": {
                      "additionalProperties": {
                        "description": "Type of the property.",
                        "enum": [
                          "string",
                          "number",
                          "boolean",
                          "date_time"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "device_property_type"
                        }
                      },
                      "description": "List of device properties.",
                      "type": "object"
                    }
                  },
                  "required": [
                    "values"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "List of device properties."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "analytics"
        ],
        "description": "Get list of custom properties.",
        "operationId": "Analytics_ListCustomProperties"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/metadata/device_properties": {
      "get": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "List of device properties.",
                  "properties": {
                    "values": {
                      "additionalProperties": {
                        "description": "Type of the property.",
                        "enum": [
                          "string",
                          "number",
                          "boolean",
                          "date_time"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "device_property_type"
                        }
                      },
                      "description": "List of device properties.",
                      "type": "object"
                    }
                  },
                  "required": [
                    "values"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "List of device properties."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "analytics"
        ],
        "description": "Get list of device properties.",
        "operationId": "Analytics_ListDeviceProperties"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/metadata/device_properties/{property_name}/values": {
      "get": {
        "parameters": [
          {
            "description": "Device property",
            "in": "path",
            "name": "property_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Contains string",
            "in": "query",
            "name": "contains",
            "required": false,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "List of device property values.",
                  "properties": {
                    "values": {
                      "description": "List of device property values.",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "values"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "List of supported device property values."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "analytics"
        ],
        "description": "Get list of device property values.",
        "operationId": "Analytics_ListDevicePropertyValues"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}": {
      "delete": {
        "parameters": [
          {
            "description": "The name of the audience",
            "in": "path",
            "name": "audience_name",
            "required": true,
            "schema": {
              "format": "string",
              "maxLength": 64,
              "pattern": "[^/]+",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "204": {
            "description": "Audiences exists."
          },
          "404": {
            "description": "Audiences does not exist."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "analytics"
        ],
        "description": "Deletes audience definition.",
        "operationId": "Analytics_DeleteAudience"
      },
      "get": {
        "parameters": [
          {
            "description": "The name of the audience",
            "in": "path",
            "name": "audience_name",
            "required": true,
            "schema": {
              "format": "string",
              "maxLength": 64,
              "pattern": "[^/]+",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "description": "Audience definition.",
                      "properties": {
                        "definition": {
                          "description": "Audience definition in OData format.",
                          "type": "string"
                        },
                        "description": {
                          "description": "Audience description.",
                          "type": "string"
                        },
                        "estimated_count": {
                          "description": "Estimated audience size.",
                          "format": "int64",
                          "type": "integer"
                        },
                        "name": {
                          "description": "Audience name.",
                          "type": "string"
                        },
                        "state": {
                          "description": "Audience state.",
                          "enum": [
                            "Calculating",
                            "Ready",
                            "Disabled"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "name": "AudienceProcessingState"
                          }
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "description": "Audience with details.",
                  "properties": {
                    "custom_properties": {
                      "additionalProperties": {
                        "enum": [
                          "string",
                          "number",
                          "boolean",
                          "date_time"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "device_property_type"
                        }
                      },
                      "description": "Custom properties used in the definition.",
                      "type": "object"
                    },
                    "enabled": {
                      "default": true,
                      "type": "boolean"
                    },
                    "estimated_total_count": {
                      "description": "Estimated total audience size.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "timestamp": {
                      "description": "Date the audience was last refreshed.",
                      "format": "date-time",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Audiences definition."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "analytics"
        ],
        "description": "Gets audience definition.",
        "operationId": "Analytics_GetAudience"
      },
      "head": {
        "parameters": [
          {
            "description": "The name of the audience",
            "in": "path",
            "name": "audience_name",
            "required": true,
            "schema": {
              "format": "string",
              "maxLength": 64,
              "pattern": "[^/]+",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "204": {
            "description": "Audiences exists."
          },
          "404": {
            "description": "Audiences does not exist."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "analytics"
        ],
        "description": "Returns whether audience definition exists.",
        "operationId": "Analytics_AudienceNameExists"
      },
      "put": {
        "parameters": [
          {
            "description": "The name of the audience",
            "in": "path",
            "name": "audience_name",
            "required": true,
            "schema": {
              "format": "string",
              "maxLength": 64,
              "pattern": "[^/]+",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "description": "Audience definition.",
                      "properties": {
                        "definition": {
                          "description": "Audience definition in OData format.",
                          "type": "string"
                        },
                        "description": {
                          "description": "Audience description.",
                          "type": "string"
                        },
                        "estimated_count": {
                          "description": "Estimated audience size.",
                          "format": "int64",
                          "type": "integer"
                        },
                        "name": {
                          "description": "Audience name.",
                          "type": "string"
                        },
                        "state": {
                          "description": "Audience state.",
                          "enum": [
                            "Calculating",
                            "Ready",
                            "Disabled"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "name": "AudienceProcessingState"
                          }
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "description": "Audience with details.",
                  "properties": {
                    "custom_properties": {
                      "additionalProperties": {
                        "enum": [
                          "string",
                          "number",
                          "boolean",
                          "date_time"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "device_property_type"
                        }
                      },
                      "description": "Custom properties used in the definition.",
                      "type": "object"
                    },
                    "enabled": {
                      "default": true,
                      "type": "boolean"
                    },
                    "estimated_total_count": {
                      "description": "Estimated total audience size.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "timestamp": {
                      "description": "Date the audience was last refreshed.",
                      "format": "date-time",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Updated audiences definition."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "analytics"
        ],
        "description": "Creates or updates audience definition.",
        "operationId": "Analytics_CreateOrUpdateAudience",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Audience definition.",
                "properties": {
                  "custom_properties": {
                    "additionalProperties": {
                      "enum": [
                        "string",
                        "number",
                        "boolean",
                        "date_time"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "device_property_type"
                      }
                    },
                    "description": "Custom properties used in the definition.",
                    "type": "object"
                  },
                  "definition": {
                    "description": "Audience definition in OData format.",
                    "maxLength": 2000,
                    "type": "string"
                  },
                  "description": {
                    "description": "Audience description.",
                    "maxLength": 128,
                    "type": "string"
                  },
                  "enabled": {
                    "default": true,
                    "type": "boolean"
                  }
                },
                "required": [
                  "definition"
                ],
                "type": "object"
              }
            }
          },
          "description": "Audience definition",
          "required": true
        }
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/crash_counts": {
      "get": {
        "parameters": [
          {
            "description": "Start date time in data in ISO 8601 date time format.",
            "in": "query",
            "name": "start",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Last date time in data in ISO 8601 date time format.",
            "in": "query",
            "name": "end",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "To select specific application versions",
            "in": "query",
            "name": "versions",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "pipeDelimited",
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "count": {
                      "description": "Total crash count.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "crashes": {
                      "description": "The total crash count for day.",
                      "items": {
                        "properties": {
                          "count": {
                            "description": "Count of the object.",
                            "format": "int64",
                            "type": "integer"
                          },
                          "datetime": {
                            "description": "The ISO 8601 datetime.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Count of crashes by day in the time range and total crashes over the time range."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error",
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "description": "The status code return by the API. It can be 400 or 403 or 500.",
                          "enum": [
                            400,
                            403,
                            500
                          ],
                          "type": "integer"
                        },
                        "message": {
                          "description": "The reason for the request failed.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason."
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "analytics"
        ],
        "deprecated": true,
        "description": "Count of crashes by day in the time range based the selected versions. Available for UWP apps only.",
        "operationId": "Analytics_CrashCounts",
        "summary": "Available for UWP apps only."
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups": {
      "post": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "List of crash groups with overall crashes count and affected users.",
                  "items": {
                    "properties": {
                      "app_version": {
                        "format": "string",
                        "type": "string"
                      },
                      "crash_group_id": {
                        "format": "string",
                        "type": "string"
                      },
                      "overall": {
                        "properties": {
                          "crash_count": {
                            "format": "int64",
                            "type": "integer"
                          },
                          "device_count": {
                            "format": "int64",
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Overall crashes and affected users count for all selected crash groups."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error",
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "description": "The status code return by the API. It can be 400 or 403 or 500.",
                          "enum": [
                            400,
                            403,
                            500
                          ],
                          "type": "integer"
                        },
                        "message": {
                          "description": "The reason for the request failed.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason."
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "analytics"
        ],
        "description": "Overall crashes and affected users count of the selected crash groups with selected versions.",
        "operationId": "Analytics_CrashGroupsTotals",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "crash_groups": {
                    "items": {
                      "properties": {
                        "app_version": {
                          "format": "string",
                          "type": "string"
                        },
                        "crash_group_id": {
                          "format": "string",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "minItems": 1,
                    "type": "array"
                  }
                },
                "required": [
                  "crash_groups"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/crash_counts": {
      "get": {
        "parameters": [
          {
            "description": "The id of the crash group.",
            "in": "path",
            "name": "crash_group_id",
            "required": true,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "version",
            "required": true,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Start date time in data in ISO 8601 date time format.",
            "in": "query",
            "name": "start",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Last date time in data in ISO 8601 date time format.",
            "in": "query",
            "name": "end",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "count": {
                      "description": "Total crash count.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "crashes": {
                      "description": "The total crash count for day.",
                      "items": {
                        "properties": {
                          "count": {
                            "description": "Count of the object.",
                            "format": "int64",
                            "type": "integer"
                          },
                          "datetime": {
                            "description": "The ISO 8601 datetime.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Count of crashes by day in the time range and total crashes over the time range."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error",
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "description": "The status code return by the API. It can be 400 or 403 or 500.",
                          "enum": [
                            400,
                            403,
                            500
                          ],
                          "type": "integer"
                        },
                        "message": {
                          "description": "The reason for the request failed.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason."
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "analytics"
        ],
        "deprecated": true,
        "description": "Count of crashes by day in the time range of the selected crash group with selected version. Available for UWP apps only.",
        "operationId": "Analytics_CrashGroupCounts",
        "summary": "Available for UWP apps only."
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/models": {
      "get": {
        "parameters": [
          {
            "description": "The id of the crash group.",
            "in": "path",
            "name": "crash_group_id",
            "required": true,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "version",
            "required": true,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The maximum number of results to return. (0 will fetch all results)",
            "in": "query",
            "name": "$top",
            "required": false,
            "schema": {
              "default": 30,
              "format": "int64",
              "maximum": 2000,
              "minimum": 0,
              "type": "integer"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "crash_count": {
                      "format": "int64",
                      "type": "integer"
                    },
                    "models": {
                      "items": {
                        "properties": {
                          "crash_count": {
                            "description": "Count of model.",
                            "format": "int64",
                            "type": "integer"
                          },
                          "model_name": {
                            "description": "Model's name.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Top models with percentage in descending order."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error",
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "description": "The status code return by the API. It can be 400 or 403 or 500.",
                          "enum": [
                            400,
                            403,
                            500
                          ],
                          "type": "integer"
                        },
                        "message": {
                          "description": "The reason for the request failed.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason."
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "analytics"
        ],
        "deprecated": true,
        "description": "Top models of the selected crash group with selected version. Available for UWP apps only.",
        "operationId": "Analytics_CrashGroupModelCounts",
        "summary": "Available for UWP apps only."
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/operating_systems": {
      "get": {
        "parameters": [
          {
            "description": "The id of the crash group.",
            "in": "path",
            "name": "crash_group_id",
            "required": true,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "version",
            "required": true,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The maximum number of results to return. (0 will fetch all results)",
            "in": "query",
            "name": "$top",
            "required": false,
            "schema": {
              "default": 30,
              "format": "int64",
              "maximum": 2000,
              "minimum": 0,
              "type": "integer"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "crash_count": {
                      "format": "int64",
                      "type": "integer"
                    },
                    "operating_systems": {
                      "items": {
                        "properties": {
                          "crash_count": {
                            "description": "Count of OS.",
                            "format": "int64",
                            "type": "integer"
                          },
                          "operating_system_name": {
                            "description": "OS name.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Top OSes with percentage in descending order."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error",
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "description": "The status code return by the API. It can be 400 or 403 or 500.",
                          "enum": [
                            400,
                            403,
                            500
                          ],
                          "type": "integer"
                        },
                        "message": {
                          "description": "The reason for the request failed.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason."
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "analytics"
        ],
        "deprecated": true,
        "description": "Top OSes of the selected crash group with selected version. Available for UWP apps only.",
        "operationId": "Analytics_CrashGroupOperatingSystemCounts",
        "summary": "Available for UWP apps only."
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/overall": {
      "get": {
        "parameters": [
          {
            "description": "The id of the crash group.",
            "in": "path",
            "name": "crash_group_id",
            "required": true,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "version",
            "required": true,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "crash_count": {
                      "format": "int64",
                      "type": "integer"
                    },
                    "device_count": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Overall crashes and affected users count."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error",
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "description": "The status code return by the API. It can be 400 or 403 or 500.",
                          "enum": [
                            400,
                            403,
                            500
                          ],
                          "type": "integer"
                        },
                        "message": {
                          "description": "The reason for the request failed.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason."
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "analytics"
        ],
        "deprecated": true,
        "description": "Overall crashes and affected users count of the selected crash group with selected version. Available for UWP apps only.",
        "operationId": "Analytics_CrashGroupTotals",
        "summary": "Available for UWP apps only."
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/crashfree_device_percentages": {
      "get": {
        "parameters": [
          {
            "description": "Start date time in data in ISO 8601 date time format.",
            "in": "query",
            "name": "start",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Last date time in data in ISO 8601 date time format.",
            "in": "query",
            "name": "end",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "version",
            "required": true,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "average_percentage": {
                      "description": "Average percentage.",
                      "format": "double",
                      "type": "number"
                    },
                    "daily_percentages": {
                      "description": "The crash-free percentage per day.",
                      "items": {
                        "properties": {
                          "datetime": {
                            "description": "The ISO 8601 datetime.",
                            "type": "string"
                          },
                          "percentage": {
                            "description": "Percentage of the object.",
                            "format": "double",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Percentage of crash-free devices by day in the time range and overall percentage of the time range."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error",
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "description": "The status code return by the API. It can be 400 or 403 or 500.",
                          "enum": [
                            400,
                            403,
                            500
                          ],
                          "type": "integer"
                        },
                        "message": {
                          "description": "The reason for the request failed.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason."
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "analytics"
        ],
        "deprecated": true,
        "description": "Percentage of crash-free device by day in the time range based on the selected versions. Api will return -1 if crash devices is greater than active devices.",
        "operationId": "Analytics_CrashFreeDevicePercentages"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/distribution/release_counts": {
      "post": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "counts": {
                      "items": {
                        "properties": {
                          "distribution_group": {
                            "description": "Distribution group queried.\n",
                            "format": "string",
                            "type": "string"
                          },
                          "release_id": {
                            "format": "string",
                            "type": "string"
                          },
                          "total_count": {
                            "description": "Total count of downloads.\n",
                            "format": "int64",
                            "type": "integer"
                          },
                          "unique_count": {
                            "description": "Count of unique downloads against user id.\n",
                            "format": "int64",
                            "type": "integer"
                          }
                        },
                        "required": [
                          "release_id",
                          "unique_count",
                          "total_count"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "total": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "required": [
                    "counts"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Count of total downloads for the provided distribution release(s)."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason."
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "analytics"
        ],
        "description": "Count of total downloads for the provided distribution releases.",
        "operationId": "Analytics_DistributionReleaseCounts",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "releases": {
                    "items": {
                      "allOf": [
                        {
                          "properties": {
                            "release": {
                              "description": "Release Id.\n",
                              "format": "string",
                              "type": "string"
                            }
                          },
                          "required": [
                            "release"
                          ],
                          "type": "object"
                        }
                      ],
                      "properties": {
                        "distribution_group": {
                          "description": "Distribution group Id.\n",
                          "format": "string",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "minItems": 1,
                    "type": "array"
                  }
                },
                "required": [
                  "releases"
                ],
                "type": "object"
              }
            }
          },
          "description": "The releases to retrieve.",
          "required": true
        }
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/event_logs/{event_name}": {
      "delete": {
        "parameters": [
          {
            "description": "The id of the event.",
            "in": "path",
            "name": "event_name",
            "required": true,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Event successfully deleted."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error",
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "description": "The status code return by the API. It can be 400 or 403 or 500.",
                          "enum": [
                            400,
                            403,
                            500
                          ],
                          "type": "integer"
                        },
                        "message": {
                          "description": "The reason for the request failed.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason."
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "analytics"
        ],
        "description": "Delete the set of Events with the specified event names.",
        "operationId": "Analytics_EventsDeleteLogs"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/events": {
      "get": {
        "parameters": [
          {
            "description": "Start date time in data in ISO 8601 date time format.",
            "in": "query",
            "name": "start",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Last date time in data in ISO 8601 date time format.",
            "in": "query",
            "name": "end",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "To select specific application versions",
            "in": "query",
            "name": "versions",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "pipeDelimited",
            "x-ms-parameter-location": "method"
          },
          {
            "description": "To select the specific events.",
            "in": "query",
            "name": "event_name",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "pipeDelimited",
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The maximum number of results to return. (0 will fetch all results)",
            "in": "query",
            "name": "$top",
            "required": false,
            "schema": {
              "default": 30,
              "format": "int64",
              "maximum": 2000,
              "minimum": 0,
              "type": "integer"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination.",
            "in": "query",
            "name": "$skip",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int64",
              "minimum": 0,
              "type": "integer"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Controls whether or not to include a count of all the items across all pages.",
            "in": "query",
            "name": "$inlinecount",
            "required": false,
            "schema": {
              "default": "none",
              "enum": [
                "allpages",
                "none"
              ],
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "controls the sorting order and sorting based on which column",
            "in": "query",
            "name": "$orderby",
            "required": false,
            "schema": {
              "default": "count desc",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "events": {
                      "items": {
                        "properties": {
                          "count": {
                            "format": "int64",
                            "type": "integer"
                          },
                          "count_per_device": {
                            "format": "double",
                            "type": "number"
                          },
                          "count_per_session": {
                            "format": "double",
                            "type": "number"
                          },
                          "device_count": {
                            "format": "int64",
                            "type": "integer"
                          },
                          "id": {
                            "format": "string",
                            "type": "string"
                          },
                          "name": {
                            "format": "string",
                            "type": "string"
                          },
                          "previous_count": {
                            "description": "The event count of previous time range of the event.",
                            "format": "int64",
                            "type": "integer"
                          },
                          "previous_device_count": {
                            "description": "The device count of previous time range of the event.",
                            "format": "int64",
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "total": {
                      "description": "The total count of events.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "total_devices": {
                      "description": "The active device over this period.",
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Count of active events in the time range ordered by event."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error",
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "description": "The status code return by the API. It can be 400 or 403 or 500.",
                          "enum": [
                            400,
                            403,
                            500
                          ],
                          "type": "integer"
                        },
                        "message": {
                          "description": "The reason for the request failed.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason."
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "analytics"
        ],
        "description": "Count of active events in the time range ordered by event.",
        "operationId": "Analytics_Events"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}": {
      "delete": {
        "parameters": [
          {
            "description": "The id of the event.",
            "in": "path",
            "name": "event_name",
            "required": true,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Event successfully deleted."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error",
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "description": "The status code return by the API. It can be 400 or 403 or 500.",
                          "enum": [
                            400,
                            403,
                            500
                          ],
                          "type": "integer"
                        },
                        "message": {
                          "description": "The reason for the request failed.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason."
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "analytics"
        ],
        "description": "Delete the set of Events with the specified event names.",
        "operationId": "Analytics_EventsDelete"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/count_per_device": {
      "get": {
        "parameters": [
          {
            "description": "The id of the event.",
            "in": "path",
            "name": "event_name",
            "required": true,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Start date time in data in ISO 8601 date time format.",
            "in": "query",
            "name": "start",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Last date time in data in ISO 8601 date time format.",
            "in": "query",
            "name": "end",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "To select specific application versions",
            "in": "query",
            "name": "versions",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "pipeDelimited",
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "avg_count_per_device": {
                      "format": "double",
                      "type": "number"
                    },
                    "count_per_device": {
                      "items": {
                        "properties": {
                          "count": {
                            "description": "Decimal count of the object.",
                            "format": "double",
                            "type": "number"
                          },
                          "datetime": {
                            "description": "The ISO 8601 datetime.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "previous_avg_count_per_device": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Count of events per device by interval in the time range."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error",
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "description": "The status code return by the API. It can be 400 or 403 or 500.",
                          "enum": [
                            400,
                            403,
                            500
                          ],
                          "type": "integer"
                        },
                        "message": {
                          "description": "The reason for the request failed.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason."
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "analytics"
        ],
        "description": "Count of events per device by interval in the time range.",
        "operationId": "Analytics_EventPerDeviceCount"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/count_per_session": {
      "get": {
        "parameters": [
          {
            "description": "The id of the event.",
            "in": "path",
            "name": "event_name",
            "required": true,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Start date time in data in ISO 8601 date time format.",
            "in": "query",
            "name": "start",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Last date time in data in ISO 8601 date time format.",
            "in": "query",
            "name": "end",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "To select specific application versions",
            "in": "query",
            "name": "versions",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "pipeDelimited",
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "avg_count_per_session": {
                      "format": "double",
                      "type": "number"
                    },
                    "count_per_session": {
                      "items": {
                        "properties": {
                          "count": {
                            "description": "Decimal count of the object.",
                            "format": "double",
                            "type": "number"
                          },
                          "datetime": {
                            "description": "The ISO 8601 datetime.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "previous_avg_count_per_session": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Count of events per session by interval in the time range."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error",
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "description": "The status code return by the API. It can be 400 or 403 or 500.",
                          "enum": [
                            400,
                            403,
                            500
                          ],
                          "type": "integer"
                        },
                        "message": {
                          "description": "The reason for the request failed.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason."
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "analytics"
        ],
        "description": "Count of events per session by interval in the time range.",
        "operationId": "Analytics_EventPerSessionCount"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/device_count": {
      "get": {
        "parameters": [
          {
            "description": "The id of the event.",
            "in": "path",
            "name": "event_name",
            "required": true,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Start date time in data in ISO 8601 date time format.",
            "in": "query",
            "name": "start",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Last date time in data in ISO 8601 date time format.",
            "in": "query",
            "name": "end",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "To select specific application versions",
            "in": "query",
            "name": "versions",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "pipeDelimited",
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "devices_count": {
                      "items": {
                        "properties": {
                          "count": {
                            "description": "Count of the object.",
                            "format": "int64",
                            "type": "integer"
                          },
                          "datetime": {
                            "description": "The ISO 8601 datetime.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "previous_total_devices_with_event": {
                      "format": "int64",
                      "type": "integer"
                    },
                    "total_devices": {
                      "format": "int64",
                      "type": "integer"
                    },
                    "total_devices_with_event": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Count of devices for an event by interval in the time range."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error",
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "description": "The status code return by the API. It can be 400 or 403 or 500.",
                          "enum": [
                            400,
                            403,
                            500
                          ],
                          "type": "integer"
                        },
                        "message": {
                          "description": "The reason for the request failed.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason."
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "analytics"
        ],
        "description": "Count of devices for an event by interval in the time range.",
        "operationId": "Analytics_EventDeviceCount"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/event_count": {
      "get": {
        "parameters": [
          {
            "description": "The id of the event.",
            "in": "path",
            "name": "event_name",
            "required": true,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Start date time in data in ISO 8601 date time format.",
            "in": "query",
            "name": "start",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Last date time in data in ISO 8601 date time format.",
            "in": "query",
            "name": "end",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "To select specific application versions",
            "in": "query",
            "name": "versions",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "pipeDelimited",
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "count": {
                      "items": {
                        "properties": {
                          "count": {
                            "description": "Count of the object.",
                            "format": "int64",
                            "type": "integer"
                          },
                          "datetime": {
                            "description": "The ISO 8601 datetime.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "previous_total_count": {
                      "format": "int64",
                      "type": "integer"
                    },
                    "total_count": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Count of events by interval in the time range."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error",
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "description": "The status code return by the API. It can be 400 or 403 or 500.",
                          "enum": [
                            400,
                            403,
                            500
                          ],
                          "type": "integer"
                        },
                        "message": {
                          "description": "The reason for the request failed.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason."
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "analytics"
        ],
        "description": "Count of events by interval in the time range.",
        "operationId": "Analytics_EventCount"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/properties": {
      "get": {
        "parameters": [
          {
            "description": "The id of the event.",
            "in": "path",
            "name": "event_name",
            "required": true,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Event properties during the time range.",
                  "properties": {
                    "event_properties": {
                      "items": {
                        "description": "The event property.",
                        "format": "string",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Event properties."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error",
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "description": "The status code return by the API. It can be 400 or 403 or 500.",
                          "enum": [
                            400,
                            403,
                            500
                          ],
                          "type": "integer"
                        },
                        "message": {
                          "description": "The reason for the request failed.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason."
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "analytics"
        ],
        "description": "Event properties.",
        "operationId": "Analytics_EventProperties"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/properties/{event_property_name}/counts": {
      "get": {
        "parameters": [
          {
            "description": "The id of the event.",
            "in": "path",
            "name": "event_name",
            "required": true,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The id of the event property.",
            "in": "path",
            "name": "event_property_name",
            "required": true,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Start date time in data in ISO 8601 date time format.",
            "in": "query",
            "name": "start",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Last date time in data in ISO 8601 date time format.",
            "in": "query",
            "name": "end",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "To select specific application versions",
            "in": "query",
            "name": "versions",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "pipeDelimited",
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The number of property values to return. Set to 0 in order to fetch all results available.",
            "in": "query",
            "name": "$top",
            "required": false,
            "schema": {
              "default": 10,
              "format": "int64",
              "minimum": 0,
              "type": "integer"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Event property value counts during the time range in descending order.",
                  "properties": {
                    "total": {
                      "description": "The total property value counts.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "values": {
                      "description": "The event property values.",
                      "items": {
                        "description": "An event property value with counts.",
                        "properties": {
                          "count": {
                            "description": "The count of the the event property value.",
                            "format": "int64",
                            "type": "integer"
                          },
                          "name": {
                            "description": "The event property value name.",
                            "type": "string"
                          },
                          "previous_count": {
                            "description": "The count of previous time range of the event property value.",
                            "format": "int64",
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Event properties value counts during the time range in descending order."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error",
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "description": "The status code return by the API. It can be 400 or 403 or 500.",
                          "enum": [
                            400,
                            403,
                            500
                          ],
                          "type": "integer"
                        },
                        "message": {
                          "description": "The reason for the request failed.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason."
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "analytics"
        ],
        "description": "Event properties value counts during the time range in descending order.",
        "operationId": "Analytics_EventPropertyCounts"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/generic_log_flow": {
      "get": {
        "parameters": [
          {
            "description": "Start date time in data in ISO 8601 date time format. It must be within the current day in the UTC timezone. The default value is the start time of the current day in UTC timezone.",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "exceeded_max_limit": {
                      "description": "indicates if the number of available logs are more than the max allowed return limit(100).",
                      "type": "boolean"
                    },
                    "last_received_log_timestamp": {
                      "description": "the timestamp of the last log received. This value can be used as the start time parameter in the consecutive API call.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "logs": {
                      "description": "the list of logs",
                      "items": {
                        "description": "Generic log.",
                        "properties": {
                          "account_id": {
                            "description": "Account ID of the authenticated user.\n",
                            "type": "string"
                          },
                          "auth_provider": {
                            "description": "Auth service provider.\n",
                            "type": "string"
                          },
                          "device": {
                            "description": "Device characteristics.",
                            "properties": {
                              "app_build": {
                                "description": "The app's build number, e.g. 42.\n",
                                "type": "string"
                              },
                              "app_namespace": {
                                "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                                "type": "string"
                              },
                              "app_version": {
                                "description": "Application version name, e.g. 1.1.0\n",
                                "type": "string"
                              },
                              "carrier_code": {
                                "description": "Carrier country code (for mobile devices).\n",
                                "type": "string"
                              },
                              "carrier_country": {
                                "description": "Carrier country.\n",
                                "type": "string"
                              },
                              "carrier_name": {
                                "description": "Carrier name (for mobile devices).\n",
                                "type": "string"
                              },
                              "live_update_deployment_key": {
                                "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                                "type": "string"
                              },
                              "live_update_package_hash": {
                                "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                                "type": "string"
                              },
                              "live_update_release_label": {
                                "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                                "type": "string"
                              },
                              "locale": {
                                "description": "Language code (example: en_US).\n",
                                "type": "string"
                              },
                              "model": {
                                "description": "Device model (example: iPad2,3).\n",
                                "type": "string"
                              },
                              "oem_name": {
                                "description": "Device manufacturer (example: HTC).\n",
                                "type": "string"
                              },
                              "os_api_level": {
                                "description": "API level when applicable like in Android (example: 15).\n",
                                "type": "integer"
                              },
                              "os_build": {
                                "description": "OS build code (example: LMY47X).\n",
                                "type": "string"
                              },
                              "os_name": {
                                "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                                "type": "string"
                              },
                              "os_version": {
                                "description": "OS version (example: 9.3.0).\n",
                                "type": "string"
                              },
                              "screen_size": {
                                "description": "Screen size of the device in pixels (example: 640x480).\n",
                                "type": "string"
                              },
                              "sdk_name": {
                                "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                                "type": "string"
                              },
                              "sdk_version": {
                                "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                                "type": "string"
                              },
                              "time_zone_offset": {
                                "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                                "maximum": 840,
                                "minimum": -840,
                                "type": "integer"
                              },
                              "wrapper_runtime_version": {
                                "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                                "type": "string"
                              },
                              "wrapper_sdk_name": {
                                "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                                "type": "string"
                              },
                              "wrapper_sdk_version": {
                                "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                                "type": "string"
                              }
                            },
                            "required": [
                              "sdk_name",
                              "sdk_version",
                              "os_name",
                              "os_version",
                              "locale",
                              "time_zone_offset",
                              "app_version",
                              "app_build"
                            ],
                            "type": "object"
                          },
                          "event_id": {
                            "description": "Event ID.\n",
                            "type": "string"
                          },
                          "event_name": {
                            "description": "Event name.\n",
                            "type": "string"
                          },
                          "install_id": {
                            "description": "Install ID.\n",
                            "format": "uuid",
                            "type": "string"
                          },
                          "message_id": {
                            "description": "Message ID.\n",
                            "type": "string"
                          },
                          "properties": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "event specific properties.\n",
                            "type": "object"
                          },
                          "session_id": {
                            "description": "Session ID.\n",
                            "format": "uuid",
                            "type": "string"
                          },
                          "timestamp": {
                            "description": "Log creation timestamp.\n",
                            "format": "date-time",
                            "type": "string"
                          },
                          "type": {
                            "description": "Log type.\n",
                            "enum": [
                              "event",
                              "page",
                              "start_session",
                              "error",
                              "start_service",
                              "custom_properties"
                            ],
                            "type": "string"
                          }
                        },
                        "required": [
                          "type",
                          "timestamp",
                          "install_id",
                          "device"
                        ],
                        "type": "object"
                      },
                      "minItems": 0,
                      "type": "array"
                    }
                  },
                  "required": [
                    "logs"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "List of logs for the requested time range."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "analytics"
        ],
        "description": "Logs received between the specified start time and the current time. The API will return a maximum of 100 logs per call.",
        "operationId": "Analytics_GenericLogFlow"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/languages": {
      "get": {
        "parameters": [
          {
            "description": "Start date time in data in ISO 8601 date time format.",
            "in": "query",
            "name": "start",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Last date time in data in ISO 8601 date time format.",
            "in": "query",
            "name": "end",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The maximum number of results to return. (0 will fetch all results)",
            "in": "query",
            "name": "$top",
            "required": false,
            "schema": {
              "default": 30,
              "format": "int64",
              "maximum": 2000,
              "minimum": 0,
              "type": "integer"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "To select specific application versions",
            "in": "query",
            "name": "versions",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "pipeDelimited",
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "languages": {
                      "items": {
                        "properties": {
                          "count": {
                            "description": "Count current of language.",
                            "format": "int64",
                            "type": "integer"
                          },
                          "language_name": {
                            "description": "Language's name.",
                            "type": "string"
                          },
                          "previous_count": {
                            "description": "Count of previous lanugage.",
                            "format": "int64",
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "total": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Languages with count during the time range in descending order."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error",
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "description": "The status code return by the API. It can be 400 or 403 or 500.",
                          "enum": [
                            400,
                            403,
                            500
                          ],
                          "type": "integer"
                        },
                        "message": {
                          "description": "The reason for the request failed.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason."
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "analytics"
        ],
        "description": "Languages in the time range.",
        "operationId": "Analytics_LanguageCounts"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/log_flow": {
      "get": {
        "parameters": [
          {
            "description": "Start date time in data in ISO 8601 date time format. It must be within the current day in the UTC timezone. The default value is the start time of the current day in UTC timezone.",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "exceeded_max_limit": {
                      "description": "indicates if the number of available logs are more than the max allowed return limit(100).",
                      "type": "boolean"
                    },
                    "last_received_log_timestamp": {
                      "description": "the timestamp of the last log received. This value can be used as the start time parameter in the consecutive API call.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "logs": {
                      "description": "the list of logs",
                      "items": {
                        "discriminator": {
                          "propertyName": "type"
                        },
                        "properties": {
                          "device": {
                            "description": "Device characteristics.",
                            "properties": {
                              "app_build": {
                                "description": "The app's build number, e.g. 42.\n",
                                "type": "string"
                              },
                              "app_namespace": {
                                "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                                "type": "string"
                              },
                              "app_version": {
                                "description": "Application version name, e.g. 1.1.0\n",
                                "type": "string"
                              },
                              "carrier_code": {
                                "description": "Carrier country code (for mobile devices).\n",
                                "type": "string"
                              },
                              "carrier_country": {
                                "description": "Carrier country.\n",
                                "type": "string"
                              },
                              "carrier_name": {
                                "description": "Carrier name (for mobile devices).\n",
                                "type": "string"
                              },
                              "live_update_deployment_key": {
                                "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                                "type": "string"
                              },
                              "live_update_package_hash": {
                                "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                                "type": "string"
                              },
                              "live_update_release_label": {
                                "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                                "type": "string"
                              },
                              "locale": {
                                "description": "Language code (example: en_US).\n",
                                "type": "string"
                              },
                              "model": {
                                "description": "Device model (example: iPad2,3).\n",
                                "type": "string"
                              },
                              "oem_name": {
                                "description": "Device manufacturer (example: HTC).\n",
                                "type": "string"
                              },
                              "os_api_level": {
                                "description": "API level when applicable like in Android (example: 15).\n",
                                "type": "integer"
                              },
                              "os_build": {
                                "description": "OS build code (example: LMY47X).\n",
                                "type": "string"
                              },
                              "os_name": {
                                "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                                "type": "string"
                              },
                              "os_version": {
                                "description": "OS version (example: 9.3.0).\n",
                                "type": "string"
                              },
                              "screen_size": {
                                "description": "Screen size of the device in pixels (example: 640x480).\n",
                                "type": "string"
                              },
                              "sdk_name": {
                                "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                                "type": "string"
                              },
                              "sdk_version": {
                                "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                                "type": "string"
                              },
                              "time_zone_offset": {
                                "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                                "maximum": 840,
                                "minimum": -840,
                                "type": "integer"
                              },
                              "wrapper_runtime_version": {
                                "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                                "type": "string"
                              },
                              "wrapper_sdk_name": {
                                "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                                "type": "string"
                              },
                              "wrapper_sdk_version": {
                                "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                                "type": "string"
                              }
                            },
                            "required": [
                              "sdk_name",
                              "sdk_version",
                              "os_name",
                              "os_version",
                              "locale",
                              "time_zone_offset",
                              "app_version",
                              "app_build"
                            ],
                            "type": "object"
                          },
                          "install_id": {
                            "description": "Install ID.\n",
                            "format": "uuid",
                            "type": "string"
                          },
                          "timestamp": {
                            "description": "Log creation timestamp.\n",
                            "format": "date-time",
                            "type": "string"
                          },
                          "type": {
                            "description": "Log type.\n",
                            "enum": [
                              "event",
                              "page",
                              "start_session",
                              "error",
                              "start_service",
                              "custom_properties"
                            ],
                            "type": "string"
                          }
                        },
                        "required": [
                          "type",
                          "timestamp",
                          "install_id",
                          "device"
                        ],
                        "type": "object"
                      },
                      "minItems": 0,
                      "type": "array"
                    }
                  },
                  "required": [
                    "logs"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "List of logs for the requested time range."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "analytics"
        ],
        "description": "Logs received between the specified start time and the current time. The API will return a maximum of 100 logs per call.",
        "operationId": "Analytics_LogFlow"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/models": {
      "get": {
        "parameters": [
          {
            "description": "Start date time in data in ISO 8601 date time format.",
            "in": "query",
            "name": "start",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Last date time in data in ISO 8601 date time format.",
            "in": "query",
            "name": "end",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The maximum number of results to return. (0 will fetch all results)",
            "in": "query",
            "name": "$top",
            "required": false,
            "schema": {
              "default": 30,
              "format": "int64",
              "maximum": 2000,
              "minimum": 0,
              "type": "integer"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "To select specific application versions",
            "in": "query",
            "name": "versions",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "pipeDelimited",
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "models": {
                      "items": {
                        "properties": {
                          "count": {
                            "description": "Count current of model.",
                            "format": "int64",
                            "type": "integer"
                          },
                          "model_name": {
                            "description": "Model's name.",
                            "type": "string"
                          },
                          "previous_count": {
                            "description": "Count of previous model.",
                            "format": "int64",
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "total": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Models with count during the time range in descending order."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error",
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "description": "The status code return by the API. It can be 400 or 403 or 500.",
                          "enum": [
                            400,
                            403,
                            500
                          ],
                          "type": "integer"
                        },
                        "message": {
                          "description": "The reason for the request failed.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason."
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "analytics"
        ],
        "description": "Models in the time range.",
        "operationId": "Analytics_ModelCounts"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/oses": {
      "get": {
        "parameters": [
          {
            "description": "Start date time in data in ISO 8601 date time format.",
            "in": "query",
            "name": "start",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Last date time in data in ISO 8601 date time format.",
            "in": "query",
            "name": "end",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The maximum number of results to return. (0 will fetch all results)",
            "in": "query",
            "name": "$top",
            "required": false,
            "schema": {
              "default": 30,
              "format": "int64",
              "maximum": 2000,
              "minimum": 0,
              "type": "integer"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "To select specific application versions",
            "in": "query",
            "name": "versions",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "pipeDelimited",
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "oses": {
                      "items": {
                        "properties": {
                          "count": {
                            "description": "Count current of OS.",
                            "format": "int64",
                            "type": "integer"
                          },
                          "os_name": {
                            "description": "OS name.",
                            "type": "string"
                          },
                          "previous_count": {
                            "description": "Count of previous OS.",
                            "format": "int64",
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "total": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OSes with count during the time range in descending order."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error",
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "description": "The status code return by the API. It can be 400 or 403 or 500.",
                          "enum": [
                            400,
                            403,
                            500
                          ],
                          "type": "integer"
                        },
                        "message": {
                          "description": "The reason for the request failed.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason."
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "analytics"
        ],
        "description": "OSes in the time range.",
        "operationId": "Analytics_OperatingSystemCounts"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/places": {
      "get": {
        "parameters": [
          {
            "description": "Start date time in data in ISO 8601 date time format.",
            "in": "query",
            "name": "start",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Last date time in data in ISO 8601 date time format.",
            "in": "query",
            "name": "end",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The maximum number of results to return. (0 will fetch all results)",
            "in": "query",
            "name": "$top",
            "required": false,
            "schema": {
              "default": 30,
              "format": "int64",
              "maximum": 2000,
              "minimum": 0,
              "type": "integer"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "To select specific application versions",
            "in": "query",
            "name": "versions",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "pipeDelimited",
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Places and count during the time range in descending order.",
                  "properties": {
                    "places": {
                      "items": {
                        "description": "The place code and the count.",
                        "properties": {
                          "code": {
                            "description": "The place code.",
                            "type": "string"
                          },
                          "count": {
                            "description": "The count of the this place.",
                            "format": "int64",
                            "type": "integer"
                          },
                          "previous_count": {
                            "description": "The count of previous time range of the place.",
                            "format": "int64",
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "total": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Places with count during the time range in descending order."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error",
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "description": "The status code return by the API. It can be 400 or 403 or 500.",
                          "enum": [
                            400,
                            403,
                            500
                          ],
                          "type": "integer"
                        },
                        "message": {
                          "description": "The reason for the request failed.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason."
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "analytics"
        ],
        "description": "Places in the time range.",
        "operationId": "Analytics_PlaceCounts"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/session_counts": {
      "get": {
        "parameters": [
          {
            "description": "Start date time in data in ISO 8601 date time format.",
            "in": "query",
            "name": "start",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Last date time in data in ISO 8601 date time format.",
            "in": "query",
            "name": "end",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "To select specific application versions",
            "in": "query",
            "name": "versions",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "pipeDelimited",
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "count": {
                        "description": "Count of the object.",
                        "format": "int64",
                        "type": "integer"
                      },
                      "datetime": {
                        "description": "The ISO 8601 datetime.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Count of sessions in the time range."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason."
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "analytics"
        ],
        "description": "Count of sessions in the time range.",
        "operationId": "Analytics_SessionCounts"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/session_durations_distribution": {
      "get": {
        "parameters": [
          {
            "description": "Start date time in data in ISO 8601 date time format.",
            "in": "query",
            "name": "start",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Last date time in data in ISO 8601 date time format.",
            "in": "query",
            "name": "end",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "To select specific application versions",
            "in": "query",
            "name": "versions",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "pipeDelimited",
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "average_duration": {
                      "description": "The average session duration for current time range.",
                      "type": "string"
                    },
                    "distribution": {
                      "description": "The count of sessions in these buckets.",
                      "items": {
                        "properties": {
                          "bucket": {
                            "description": "The bucket name.",
                            "type": "string"
                          },
                          "count": {
                            "description": "The count of sessions in current bucket.",
                            "format": "int64",
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "previous_average_duration": {
                      "description": "The previous average session duration for previous time range.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "List of  session durations for requested time range."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error",
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "description": "The status code return by the API. It can be 400 or 403 or 500.",
                          "enum": [
                            400,
                            403,
                            500
                          ],
                          "type": "integer"
                        },
                        "message": {
                          "description": "The reason for the request failed.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason."
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "analytics"
        ],
        "description": "Gets session duration.",
        "operationId": "Analytics_SessionDurationsDistribution"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/sessions_per_device": {
      "get": {
        "parameters": [
          {
            "description": "Start date time in data in ISO 8601 date time format.",
            "in": "query",
            "name": "start",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Last date time in data in ISO 8601 date time format.",
            "in": "query",
            "name": "end",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "To select specific application versions",
            "in": "query",
            "name": "versions",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "pipeDelimited",
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "average_sessions_per_user": {
                      "description": "Average seesion per user.",
                      "format": "double",
                      "type": "number"
                    },
                    "previous_average_sessions_per_user": {
                      "description": "Previous average session per user.",
                      "format": "double",
                      "type": "number"
                    },
                    "previous_total_count": {
                      "description": "Previous total count.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "sessions_per_user": {
                      "description": "The session count for each interval per device.",
                      "items": {
                        "properties": {
                          "count": {
                            "description": "Count.",
                            "format": "double",
                            "type": "number"
                          },
                          "datetime": {
                            "description": "The ISO 8601 datetime.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "total_count": {
                      "description": "Total session per device count.",
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Count of sessions per device in the time range."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error",
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "description": "The status code return by the API. It can be 400 or 403 or 500.",
                          "enum": [
                            400,
                            403,
                            500
                          ],
                          "type": "integer"
                        },
                        "message": {
                          "description": "The reason for the request failed.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason."
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "analytics"
        ],
        "description": "Count of sessions per device in the time range.",
        "operationId": "Analytics_PerDeviceCounts"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/analytics/versions": {
      "get": {
        "parameters": [
          {
            "description": "Start date time in data in ISO 8601 date time format.",
            "in": "query",
            "name": "start",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Last date time in data in ISO 8601 date time format.",
            "in": "query",
            "name": "end",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The maximum number of results to return. (0 will fetch all results)",
            "in": "query",
            "name": "$top",
            "required": false,
            "schema": {
              "default": 30,
              "format": "int64",
              "maximum": 2000,
              "minimum": 0,
              "type": "integer"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "To select specific application versions",
            "in": "query",
            "name": "versions",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "pipeDelimited",
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "total": {
                      "description": "The total count of versions.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "versions": {
                      "description": "List of version count.",
                      "items": {
                        "properties": {
                          "count": {
                            "description": "Version count.",
                            "format": "int64",
                            "type": "integer"
                          },
                          "previous_count": {
                            "description": "The count of previous time range of the version.",
                            "format": "int64",
                            "type": "integer"
                          },
                          "version": {
                            "description": "Version.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Count of active versions in the time range ordered by version."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error",
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "description": "The status code return by the API. It can be 400 or 403 or 500.",
                          "enum": [
                            400,
                            403,
                            500
                          ],
                          "type": "integer"
                        },
                        "message": {
                          "description": "The reason for the request failed.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason."
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "analytics"
        ],
        "description": "Count of active versions in the time range ordered by version.",
        "operationId": "Analytics_Versions"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/api_tokens": {
      "get": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "created_at": {
                        "description": "The creation time",
                        "type": "string"
                      },
                      "description": {
                        "description": "The description of the token",
                        "type": "string"
                      },
                      "id": {
                        "description": "The unique id (UUID) of the api token",
                        "type": "string"
                      },
                      "scope": {
                        "description": "The scope for this token.",
                        "items": {
                          "enum": [
                            "all",
                            "viewer"
                          ],
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "id",
                      "created_at"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Basic": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Returns App API tokens for the app",
        "operationId": "appApiTokens_list"
      },
      "post": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "api_token": {
                      "description": "The api token generated will not be accessible again",
                      "type": "string"
                    },
                    "created_at": {
                      "description": "The creation time",
                      "type": "string"
                    },
                    "description": {
                      "description": "The description of the token",
                      "type": "string"
                    },
                    "id": {
                      "description": "The unique id (UUID) of the api token",
                      "type": "string"
                    },
                    "scope": {
                      "description": "The scope for this token.",
                      "items": {
                        "enum": [
                          "all",
                          "viewer"
                        ],
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "id",
                    "created_at",
                    "api_token"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Basic": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Creates a new App API token",
        "operationId": "appApiTokens_new",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "description": {
                    "description": "The description of the token",
                    "type": "string"
                  },
                  "scope": {
                    "description": "The scope for this token.",
                    "items": {
                      "enum": [
                        "all",
                        "viewer"
                      ],
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Description of the token"
        }
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/api_tokens/{api_token_id}": {
      "delete": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The unique ID (UUID) of the api token",
            "in": "path",
            "name": "api_token_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "NotFound"
          }
        },
        "security": [
          {
            "Basic": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Delete the App Api Token object with the specific ID",
        "operationId": "appApiTokens_delete"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/apple_mapping": {
      "delete": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "distribute"
        ],
        "description": "Delete mapping of apple app to an existing app in apple store.",
        "operationId": "appleMapping_delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        }
      },
      "get": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Apple Mapping Request Type",
                  "properties": {
                    "app_id": {
                      "description": "ID of the apple application in Mobile Center",
                      "type": "string"
                    },
                    "apple_id": {
                      "description": "ID of the apple application in apple store",
                      "type": "string"
                    },
                    "service_connection_id": {
                      "description": "Id for the shared service connection. In case of Apple AppStore, this connection will be used to create and connect to the Apple AppStore in Mobile Center.",
                      "type": "string"
                    },
                    "team_identifier": {
                      "description": "ID of the Team associated with the app in apple store",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "distribute"
        ],
        "description": "Get mapping of apple app to an existing app in apple store.",
        "operationId": "appleMapping_get"
      },
      "post": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Apple Mapping Request Type",
                  "properties": {
                    "app_id": {
                      "description": "ID of the apple application in Mobile Center",
                      "type": "string"
                    },
                    "apple_id": {
                      "description": "ID of the apple application in apple store",
                      "type": "string"
                    },
                    "service_connection_id": {
                      "description": "Id for the shared service connection. In case of Apple AppStore, this connection will be used to create and connect to the Apple AppStore in Mobile Center.",
                      "type": "string"
                    },
                    "team_identifier": {
                      "description": "ID of the Team associated with the app in apple store",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "distribute"
        ],
        "description": "Create a mapping for an existing app in apple store for the specified application.",
        "operationId": "appleMapping_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Apple Mapping Request Type",
                "properties": {
                  "apple_id": {
                    "description": "ID of the apple application in apple store, takes precedence over bundle_identifier when both are provided",
                    "type": "string"
                  },
                  "bundle_identifier": {
                    "description": "Bundle Identifier of the apple package",
                    "type": "string"
                  },
                  "service_connection_id": {
                    "description": "Id for the shared service connection. In case of Apple AppStore, this connection will be used to create and connect to the Apple AppStore in Mobile Center.",
                    "type": "string"
                  },
                  "team_identifier": {
                    "description": "ID of the Team associated with the app in apple store",
                    "type": "string"
                  }
                },
                "required": [
                  "service_connection_id",
                  "team_identifier"
                ],
                "type": "object"
              }
            }
          },
          "description": "The apple app mapping object",
          "required": true
        }
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/apple_test_flight_groups": {
      "get": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "description": "Apple Test Flight Groups Response Type",
                    "properties": {
                      "appleId": {
                        "description": "apple id of the group.",
                        "type": "number"
                      },
                      "id": {
                        "description": "id of the group.",
                        "type": "string"
                      },
                      "name": {
                        "description": "name of the group.",
                        "type": "string"
                      },
                      "providerId": {
                        "description": "provider id of the group.",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "distribute"
        ],
        "deprecated": true,
        "description": "Fetch all apple test flight groups",
        "operationId": "appleMapping_TestFlightGroups"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/avatar": {
      "delete": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "properties": {
                        "description": {
                          "description": "The description of the app",
                          "type": "string"
                        },
                        "display_name": {
                          "description": "The display name of the app",
                          "type": "string"
                        },
                        "icon_source": {
                          "description": "The string representation of the source of the app's icon",
                          "type": "string"
                        },
                        "icon_url": {
                          "description": "The string representation of the URL pointing to the app's icon",
                          "type": "string"
                        },
                        "id": {
                          "description": "The unique ID (UUID) of the app",
                          "format": "uuid",
                          "type": "string"
                        },
                        "name": {
                          "description": "The name of the app used in URLs",
                          "type": "string"
                        },
                        "os": {
                          "description": "The OS the app will be running on",
                          "enum": [
                            "Android",
                            "iOS",
                            "macOS",
                            "Tizen",
                            "tvOS",
                            "Windows",
                            "Linux",
                            "Custom"
                          ],
                          "type": "string"
                        },
                        "owner": {
                          "description": "The information about the app's owner",
                          "properties": {
                            "avatar_url": {
                              "description": "The avatar URL of the owner",
                              "type": "string"
                            },
                            "display_name": {
                              "description": "The owner's display name",
                              "type": "string"
                            },
                            "email": {
                              "description": "The owner's email address",
                              "type": "string"
                            },
                            "id": {
                              "description": "The unique id (UUID) of the owner",
                              "format": "uuid",
                              "type": "string"
                            },
                            "name": {
                              "description": "The unique name that used to identify the owner",
                              "type": "string"
                            },
                            "type": {
                              "description": "The owner type. Can either be 'org' or 'user'",
                              "enum": [
                                "org",
                                "user"
                              ],
                              "type": "string"
                            }
                          },
                          "required": [
                            "id",
                            "display_name",
                            "name",
                            "type"
                          ],
                          "type": "object"
                        },
                        "release_type": {
                          "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
                          "type": "string"
                        }
                      },
                      "required": [
                        "id",
                        "display_name",
                        "name",
                        "os",
                        "owner"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "app_secret": {
                          "description": "A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics",
                          "type": "string"
                        },
                        "azure_subscription": {
                          "properties": {
                            "is_billable": {
                              "description": "If the subscription can be used for billing",
                              "type": "boolean"
                            },
                            "is_billing": {
                              "description": "If the subscription is used for billing",
                              "type": "boolean"
                            },
                            "is_microsoft_internal": {
                              "description": "If the subscription is internal Microsoft subscription",
                              "type": "boolean"
                            },
                            "subscription_id": {
                              "description": "The azure subscription id",
                              "format": "uuid",
                              "type": "string"
                            },
                            "subscription_name": {
                              "description": "The name of the azure subscription",
                              "type": "string"
                            },
                            "tenant_id": {
                              "description": "The tenant id of the azure subscription belongs to",
                              "format": "uuid",
                              "type": "string"
                            }
                          },
                          "required": [
                            "subscription_id",
                            "tenant_id",
                            "subscription_name"
                          ],
                          "type": "object"
                        },
                        "created_at": {
                          "description": "The created date of this app",
                          "type": "string"
                        },
                        "member_permissions": {
                          "description": "The permissions of the calling user",
                          "items": {
                            "enum": [
                              "manager",
                              "developer",
                              "viewer",
                              "tester"
                            ],
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "origin": {
                          "description": "The creation origin of this app",
                          "enum": [
                            "appcenter",
                            "hockeyapp",
                            "codepush"
                          ],
                          "type": "string"
                        },
                        "platform": {
                          "description": "The platform of the app",
                          "enum": [
                            "Java",
                            "Objective-C-Swift",
                            "UWP",
                            "Cordova",
                            "React-Native",
                            "Unity",
                            "Electron",
                            "Xamarin",
                            "WPF",
                            "WinForms",
                            "Unknown",
                            "Custom"
                          ],
                          "type": "string"
                        },
                        "updated_at": {
                          "description": "The last updated date of this app",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "required": [
                    "app_secret",
                    "platform",
                    "origin"
                  ]
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Deletes the uploaded app avatar",
        "operationId": "apps_deleteAvatar"
      },
      "post": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "properties": {
                        "description": {
                          "description": "The description of the app",
                          "type": "string"
                        },
                        "display_name": {
                          "description": "The display name of the app",
                          "type": "string"
                        },
                        "icon_source": {
                          "description": "The string representation of the source of the app's icon",
                          "type": "string"
                        },
                        "icon_url": {
                          "description": "The string representation of the URL pointing to the app's icon",
                          "type": "string"
                        },
                        "id": {
                          "description": "The unique ID (UUID) of the app",
                          "format": "uuid",
                          "type": "string"
                        },
                        "name": {
                          "description": "The name of the app used in URLs",
                          "type": "string"
                        },
                        "os": {
                          "description": "The OS the app will be running on",
                          "enum": [
                            "Android",
                            "iOS",
                            "macOS",
                            "Tizen",
                            "tvOS",
                            "Windows",
                            "Linux",
                            "Custom"
                          ],
                          "type": "string"
                        },
                        "owner": {
                          "description": "The information about the app's owner",
                          "properties": {
                            "avatar_url": {
                              "description": "The avatar URL of the owner",
                              "type": "string"
                            },
                            "display_name": {
                              "description": "The owner's display name",
                              "type": "string"
                            },
                            "email": {
                              "description": "The owner's email address",
                              "type": "string"
                            },
                            "id": {
                              "description": "The unique id (UUID) of the owner",
                              "format": "uuid",
                              "type": "string"
                            },
                            "name": {
                              "description": "The unique name that used to identify the owner",
                              "type": "string"
                            },
                            "type": {
                              "description": "The owner type. Can either be 'org' or 'user'",
                              "enum": [
                                "org",
                                "user"
                              ],
                              "type": "string"
                            }
                          },
                          "required": [
                            "id",
                            "display_name",
                            "name",
                            "type"
                          ],
                          "type": "object"
                        },
                        "release_type": {
                          "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
                          "type": "string"
                        }
                      },
                      "required": [
                        "id",
                        "display_name",
                        "name",
                        "os",
                        "owner"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "app_secret": {
                          "description": "A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics",
                          "type": "string"
                        },
                        "azure_subscription": {
                          "properties": {
                            "is_billable": {
                              "description": "If the subscription can be used for billing",
                              "type": "boolean"
                            },
                            "is_billing": {
                              "description": "If the subscription is used for billing",
                              "type": "boolean"
                            },
                            "is_microsoft_internal": {
                              "description": "If the subscription is internal Microsoft subscription",
                              "type": "boolean"
                            },
                            "subscription_id": {
                              "description": "The azure subscription id",
                              "format": "uuid",
                              "type": "string"
                            },
                            "subscription_name": {
                              "description": "The name of the azure subscription",
                              "type": "string"
                            },
                            "tenant_id": {
                              "description": "The tenant id of the azure subscription belongs to",
                              "format": "uuid",
                              "type": "string"
                            }
                          },
                          "required": [
                            "subscription_id",
                            "tenant_id",
                            "subscription_name"
                          ],
                          "type": "object"
                        },
                        "created_at": {
                          "description": "The created date of this app",
                          "type": "string"
                        },
                        "member_permissions": {
                          "description": "The permissions of the calling user",
                          "items": {
                            "enum": [
                              "manager",
                              "developer",
                              "viewer",
                              "tester"
                            ],
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "origin": {
                          "description": "The creation origin of this app",
                          "enum": [
                            "appcenter",
                            "hockeyapp",
                            "codepush"
                          ],
                          "type": "string"
                        },
                        "platform": {
                          "description": "The platform of the app",
                          "enum": [
                            "Java",
                            "Objective-C-Swift",
                            "UWP",
                            "Cordova",
                            "React-Native",
                            "Unity",
                            "Electron",
                            "Xamarin",
                            "WPF",
                            "WinForms",
                            "Unknown",
                            "Custom"
                          ],
                          "type": "string"
                        },
                        "updated_at": {
                          "description": "The last updated date of this app",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "required": [
                    "app_secret",
                    "platform",
                    "origin"
                  ]
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Sets the app avatar",
        "operationId": "apps_updateAvatar",
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/azure_subscriptions": {
      "get": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "is_billable": {
                        "description": "If the subscription can be used for billing",
                        "type": "boolean"
                      },
                      "is_billing": {
                        "description": "If the subscription is used for billing",
                        "type": "boolean"
                      },
                      "is_microsoft_internal": {
                        "description": "If the subscription is internal Microsoft subscription",
                        "type": "boolean"
                      },
                      "subscription_id": {
                        "description": "The azure subscription id",
                        "format": "uuid",
                        "type": "string"
                      },
                      "subscription_name": {
                        "description": "The name of the azure subscription",
                        "type": "string"
                      },
                      "tenant_id": {
                        "description": "The tenant id of the azure subscription belongs to",
                        "format": "uuid",
                        "type": "string"
                      }
                    },
                    "required": [
                      "subscription_id",
                      "tenant_id",
                      "subscription_name"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Returns a list of azure subscriptions for the app",
        "operationId": "azureSubscription_listForApp"
      },
      "post": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Link azure subscription to an app",
        "operationId": "azureSubscription_linkForApp",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "subscription_id": {
                    "description": "The azure subscription id",
                    "format": "uuid",
                    "type": "string"
                  }
                },
                "required": [
                  "subscription_id"
                ],
                "type": "object"
              }
            }
          },
          "description": "The azure subscription data needed to be link to the app.",
          "required": true
        },
        "x-api-principals": [
          "user"
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/azure_subscriptions/{azure_subscription_id}": {
      "delete": {
        "parameters": [
          {
            "description": "The unique ID (UUID) of the azure subscription",
            "in": "path",
            "name": "azure_subscription_id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Delete the azure subscriptions for the app",
        "operationId": "azureSubscription_deleteForApp",
        "x-api-principals": [
          "user"
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/billing/aggregated": {
      "get": {
        "parameters": [
          {
            "description": "Type of service that should be included in the Billing Information",
            "in": "query",
            "name": "service",
            "required": false,
            "schema": {
              "enum": [
                "Test",
                "Build"
              ],
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Type of period that should be included in the Billing Information",
            "in": "query",
            "name": "period",
            "required": false,
            "schema": {
              "enum": [
                "Previous",
                "Current",
                "Next"
              ],
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Controls whether the API should show the original plan when Azure Subscription is not enabled",
            "in": "query",
            "name": "showOriginalPlans",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Aggregated Billing Information for a user or an organization",
                  "properties": {
                    "azureSubscriptionId": {
                      "description": "Unique identifier for the Azure subscription used for billing",
                      "type": "string"
                    },
                    "azureSubscriptionState": {
                      "description": "State of the Azure subscription used for billing",
                      "enum": [
                        "Enabled",
                        "Disabled",
                        "NotSet"
                      ],
                      "type": "string"
                    },
                    "billingPlans": {
                      "description": "Billing Plans section in the Billing Information",
                      "properties": {
                        "buildService": {
                          "description": "Billing Plans for a single service",
                          "properties": {
                            "canSelectTrialPlan": {
                              "description": "Can customer select trial plan for that service (if it exists)?",
                              "type": "boolean"
                            },
                            "currentBillingPeriod": {
                              "description": "Billing plans for a given period",
                              "properties": {
                                "byAccount": {
                                  "description": "Selection of a billing plan",
                                  "properties": {
                                    "count": {
                                      "description": "Number of instances of the billing plan.",
                                      "type": "integer"
                                    },
                                    "plan": {
                                      "description": "Billing Plan",
                                      "properties": {
                                        "attributes": {
                                          "additionalProperties": {
                                            "type": "object"
                                          },
                                          "description": "Collection of attribute values.",
                                          "type": "object"
                                        },
                                        "id": {
                                          "description": "The Billing Plan ID",
                                          "type": "string"
                                        },
                                        "limits": {
                                          "additionalProperties": {
                                            "type": "number"
                                          },
                                          "description": "A collection of named numeric values",
                                          "type": "object"
                                        },
                                        "parentId": {
                                          "type": "string"
                                        },
                                        "paymentSource": {
                                          "description": "Service that receives payments for this billing plan.",
                                          "enum": [
                                            "None",
                                            "AppCenter",
                                            "GitHub",
                                            "Xtc"
                                          ],
                                          "type": "string"
                                        },
                                        "price": {
                                          "description": "Price of the Billing Plan",
                                          "type": "number"
                                        },
                                        "service": {
                                          "description": "Name of the service that the plan applies to.",
                                          "enum": [
                                            "Build",
                                            "Test"
                                          ],
                                          "type": "string"
                                        },
                                        "version": {
                                          "description": "Version of the Billing Plan schema",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "endTime": {
                                  "description": "Exclusive end of the period.",
                                  "format": "dateTime",
                                  "type": "string"
                                },
                                "startTime": {
                                  "description": "Inclusive start of the period",
                                  "format": "dateTime",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "lastTrialPlanExpirationTime": {
                              "description": "Expiration time of the last selected trial plan. Will be null if trial plan was not used.",
                              "format": "dateTime",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "testService": {
                          "description": "Billing Plans for a single service",
                          "properties": {
                            "canSelectTrialPlan": {
                              "description": "Can customer select trial plan for that service (if it exists)?",
                              "type": "boolean"
                            },
                            "currentBillingPeriod": {
                              "description": "Billing plans for a given period",
                              "properties": {
                                "byAccount": {
                                  "description": "Selection of a billing plan",
                                  "properties": {
                                    "count": {
                                      "description": "Number of instances of the billing plan.",
                                      "type": "integer"
                                    },
                                    "plan": {
                                      "description": "Billing Plan",
                                      "properties": {
                                        "attributes": {
                                          "additionalProperties": {
                                            "type": "object"
                                          },
                                          "description": "Collection of attribute values.",
                                          "type": "object"
                                        },
                                        "id": {
                                          "description": "The Billing Plan ID",
                                          "type": "string"
                                        },
                                        "limits": {
                                          "additionalProperties": {
                                            "type": "number"
                                          },
                                          "description": "A collection of named numeric values",
                                          "type": "object"
                                        },
                                        "parentId": {
                                          "type": "string"
                                        },
                                        "paymentSource": {
                                          "description": "Service that receives payments for this billing plan.",
                                          "enum": [
                                            "None",
                                            "AppCenter",
                                            "GitHub",
                                            "Xtc"
                                          ],
                                          "type": "string"
                                        },
                                        "price": {
                                          "description": "Price of the Billing Plan",
                                          "type": "number"
                                        },
                                        "service": {
                                          "description": "Name of the service that the plan applies to.",
                                          "enum": [
                                            "Build",
                                            "Test"
                                          ],
                                          "type": "string"
                                        },
                                        "version": {
                                          "description": "Version of the Billing Plan schema",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "endTime": {
                                  "description": "Exclusive end of the period.",
                                  "format": "dateTime",
                                  "type": "string"
                                },
                                "startTime": {
                                  "description": "Inclusive start of the period",
                                  "format": "dateTime",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "lastTrialPlanExpirationTime": {
                              "description": "Expiration time of the last selected trial plan. Will be null if trial plan was not used.",
                              "format": "dateTime",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "id": {
                      "description": "ID of the user or organization",
                      "type": "string"
                    },
                    "timestamp": {
                      "description": "The ISO 8601 datetime of last modification",
                      "format": "dateTime",
                      "type": "string"
                    },
                    "usage": {
                      "description": "Usage section in the Billing Information",
                      "properties": {
                        "buildService": {
                          "description": "Resource usage for a single Mobile Center service",
                          "properties": {
                            "currentUsagePeriod": {
                              "description": "Usage for a single period",
                              "properties": {
                                "byAccount": {
                                  "additionalProperties": {
                                    "type": "number"
                                  },
                                  "description": "A collection of named numeric values",
                                  "type": "object"
                                },
                                "byApp": {
                                  "additionalProperties": {
                                    "additionalProperties": {
                                      "type": "number"
                                    },
                                    "description": "A collection of named numeric values",
                                    "type": "object"
                                  },
                                  "description": "A collection of  named numeric values grouped by app",
                                  "type": "object"
                                },
                                "endTime": {
                                  "description": "Exclusive end time of the usage period.",
                                  "format": "dateTime",
                                  "type": "string"
                                },
                                "startTime": {
                                  "description": "Inclusive start time of the usage period",
                                  "format": "dateTime",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "testService": {
                          "description": "Resource usage for a single Mobile Center service",
                          "properties": {
                            "currentUsagePeriod": {
                              "description": "Usage for a single period",
                              "properties": {
                                "byAccount": {
                                  "additionalProperties": {
                                    "type": "number"
                                  },
                                  "description": "A collection of named numeric values",
                                  "type": "object"
                                },
                                "byApp": {
                                  "additionalProperties": {
                                    "additionalProperties": {
                                      "type": "number"
                                    },
                                    "description": "A collection of named numeric values",
                                    "type": "object"
                                  },
                                  "description": "A collection of  named numeric values grouped by app",
                                  "type": "object"
                                },
                                "endTime": {
                                  "description": "Exclusive end time of the usage period.",
                                  "format": "dateTime",
                                  "type": "string"
                                },
                                "startTime": {
                                  "description": "Inclusive start time of the usage period",
                                  "format": "dateTime",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "version": {
                      "description": "Version of the Billing Information schema",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Aggregated Billing Information for owner of a given app"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error",
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "description": "The status code return by the API. It can be 400 or 403 or 500.",
                          "enum": [
                            400,
                            403,
                            500
                          ],
                          "type": "integer"
                        },
                        "message": {
                          "description": "The reason for the request failed",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "billing"
        ],
        "description": "Aggregated Billing Information for owner of a given app.",
        "operationId": "billingAggregatedInformation_getByApp"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/branches": {
      "get": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A collection of branch status",
                  "items": {
                    "additionalProperties": {
                      "description": "The branch build core properties",
                      "properties": {
                        "branch": {
                          "properties": {
                            "commit": {
                              "properties": {
                                "sha": {
                                  "description": "The commit SHA",
                                  "type": "string"
                                },
                                "url": {
                                  "description": "The URL to the commit",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "name": {
                              "description": "The branch name",
                              "type": "string"
                            }
                          },
                          "required": [
                            "name",
                            "commit"
                          ],
                          "type": "object"
                        },
                        "enabled": {
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "description": "The branch build status",
                    "properties": {
                      "configured": {
                        "type": "boolean"
                      },
                      "lastBuild": {
                        "properties": {
                          "buildNumber": {
                            "description": "The build number",
                            "type": "string"
                          },
                          "finishTime": {
                            "description": "The time the build was finished",
                            "format": "dateTime",
                            "type": "string"
                          },
                          "id": {
                            "description": "The build ID",
                            "exclusiveMinimum": true,
                            "minimum": 0,
                            "type": "integer"
                          },
                          "lastChangedDate": {
                            "description": "The time the build status was last changed",
                            "format": "dateTime",
                            "type": "string"
                          },
                          "queueTime": {
                            "description": "The time the build was queued",
                            "format": "dateTime",
                            "type": "string"
                          },
                          "result": {
                            "description": "The build result",
                            "type": "string"
                          },
                          "sourceBranch": {
                            "description": "The source branch name",
                            "type": "string"
                          },
                          "sourceVersion": {
                            "description": "The source SHA",
                            "type": "string"
                          },
                          "startTime": {
                            "description": "The time the build was started",
                            "format": "dateTime",
                            "type": "string"
                          },
                          "status": {
                            "description": "The build status",
                            "type": "string"
                          }
                        },
                        "required": [
                          "id",
                          "buildNumber",
                          "queueTime",
                          "status",
                          "result",
                          "sourceBranch",
                          "sourceVersion"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "configured"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "build"
        ],
        "description": "Returns the list of Git branches for this application",
        "operationId": "builds_listBranches"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/builds": {
      "get": {
        "parameters": [
          {
            "description": "The branch name",
            "in": "path",
            "name": "branch",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A list of builds",
                  "items": {
                    "properties": {
                      "buildNumber": {
                        "description": "The build number",
                        "type": "string"
                      },
                      "finishTime": {
                        "description": "The time the build was finished",
                        "format": "dateTime",
                        "type": "string"
                      },
                      "id": {
                        "description": "The build ID",
                        "exclusiveMinimum": true,
                        "minimum": 0,
                        "type": "integer"
                      },
                      "lastChangedDate": {
                        "description": "The time the build status was last changed",
                        "format": "dateTime",
                        "type": "string"
                      },
                      "queueTime": {
                        "description": "The time the build was queued",
                        "format": "dateTime",
                        "type": "string"
                      },
                      "result": {
                        "description": "The build result",
                        "type": "string"
                      },
                      "sourceBranch": {
                        "description": "The source branch name",
                        "type": "string"
                      },
                      "sourceVersion": {
                        "description": "The source SHA",
                        "type": "string"
                      },
                      "startTime": {
                        "description": "The time the build was started",
                        "format": "dateTime",
                        "type": "string"
                      },
                      "status": {
                        "description": "The build status",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "buildNumber",
                      "queueTime",
                      "status",
                      "result",
                      "sourceBranch",
                      "sourceVersion"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "build"
        ],
        "description": "Returns the list of builds for the branch",
        "operationId": "builds_listByBranch"
      },
      "post": {
        "parameters": [
          {
            "description": "The branch name",
            "in": "path",
            "name": "branch",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "buildNumber": {
                      "description": "The build number",
                      "type": "string"
                    },
                    "finishTime": {
                      "description": "The time the build was finished",
                      "format": "dateTime",
                      "type": "string"
                    },
                    "id": {
                      "description": "The build ID",
                      "exclusiveMinimum": true,
                      "minimum": 0,
                      "type": "integer"
                    },
                    "lastChangedDate": {
                      "description": "The time the build status was last changed",
                      "format": "dateTime",
                      "type": "string"
                    },
                    "queueTime": {
                      "description": "The time the build was queued",
                      "format": "dateTime",
                      "type": "string"
                    },
                    "result": {
                      "description": "The build result",
                      "type": "string"
                    },
                    "sourceBranch": {
                      "description": "The source branch name",
                      "type": "string"
                    },
                    "sourceVersion": {
                      "description": "The source SHA",
                      "type": "string"
                    },
                    "startTime": {
                      "description": "The time the build was started",
                      "format": "dateTime",
                      "type": "string"
                    },
                    "status": {
                      "description": "The build status",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "buildNumber",
                    "queueTime",
                    "status",
                    "result",
                    "sourceBranch",
                    "sourceVersion"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Created build(s)"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "build"
        ],
        "description": "Create a build",
        "operationId": "builds_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "debug": {
                    "description": "Run build in debug mode",
                    "type": "boolean"
                  },
                  "sourceVersion": {
                    "description": "Version to build which represents the full Git commit reference",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Parameters of the build"
        }
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/config": {
      "delete": {
        "parameters": [
          {
            "description": "The branch name",
            "in": "path",
            "name": "branch",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "build"
        ],
        "description": "Deletes the branch build configuration",
        "operationId": "branchConfigurations_delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        }
      },
      "get": {
        "parameters": [
          {
            "description": "The branch name",
            "in": "path",
            "name": "branch",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "additionalProperties": {
                        "description": "The branch build core properties",
                        "properties": {
                          "branch": {
                            "properties": {
                              "commit": {
                                "properties": {
                                  "sha": {
                                    "description": "The commit SHA",
                                    "type": "string"
                                  },
                                  "url": {
                                    "description": "The URL to the commit",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "name": {
                                "description": "The branch name",
                                "type": "string"
                              }
                            },
                            "required": [
                              "name",
                              "commit"
                            ],
                            "type": "object"
                          },
                          "enabled": {
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      "description": "The branch build configuration",
                      "properties": {
                        "artifactVersioning": {
                          "description": "The versioning configuration for artifacts built for this branch",
                          "properties": {
                            "buildNumberFormat": {
                              "enum": [
                                "buildId",
                                "timestamp"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "badgeIsEnabled": {
                          "type": "boolean"
                        },
                        "cloneFromBranch": {
                          "description": "A configured branch name to clone from. If provided, all other parameters will be ignored. Only supported in POST requests.",
                          "type": "string"
                        },
                        "signed": {
                          "type": "boolean"
                        },
                        "testsEnabled": {
                          "type": "boolean"
                        },
                        "toolsets": {
                          "description": "The branch build configuration for each toolset",
                          "properties": {
                            "android": {
                              "description": "Build configuration for Android projects",
                              "properties": {
                                "automaticSigning": {
                                  "description": "Whether to apply automatic signing or not",
                                  "type": "boolean"
                                },
                                "buildVariant": {
                                  "description": "The Android build variant to build",
                                  "example": "release",
                                  "type": "string"
                                },
                                "gradleWrapperPath": {
                                  "description": "Path to the Gradle wrapper script",
                                  "example": "android/gradlew",
                                  "type": "string"
                                },
                                "isRoot": {
                                  "description": "Whether it is the root module or not",
                                  "type": "boolean"
                                },
                                "keyAlias": {
                                  "description": "The key alias",
                                  "type": "string"
                                },
                                "keyPassword": {
                                  "description": "The key password",
                                  "type": "string"
                                },
                                "keystoreEncoded": {
                                  "description": "The keystore encoded value",
                                  "type": "string"
                                },
                                "keystoreFilename": {
                                  "description": "The name of the keystore file",
                                  "type": "string"
                                },
                                "keystorePassword": {
                                  "description": "The password of the keystore",
                                  "type": "string"
                                },
                                "module": {
                                  "description": "The Gradle module to build",
                                  "example": "app",
                                  "type": "string"
                                },
                                "runLint": {
                                  "description": "Whether to run lint checks during the build (default)",
                                  "type": "boolean"
                                },
                                "runTests": {
                                  "default": true,
                                  "description": "Whether to run unit tests during the build (default)",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            },
                            "javascript": {
                              "description": "Build configuration when React Native, or other JavaScript tech, is part of the build steps",
                              "properties": {
                                "packageJsonPath": {
                                  "description": "Path to package.json file for the main project, e.g. \"package.json\" or \"myapp/package.json\"",
                                  "type": "string"
                                },
                                "reactNativeVersion": {
                                  "description": "Version of React Native from package.json files",
                                  "type": "string"
                                },
                                "runTests": {
                                  "description": "Whether to run Jest unit tests, via npm test, during the build",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            },
                            "xamarin": {
                              "description": "Build configuration for Xamarin projects",
                              "properties": {
                                "args": {
                                  "type": "string"
                                },
                                "configuration": {
                                  "type": "string"
                                },
                                "isSimBuild": {
                                  "type": "boolean"
                                },
                                "monoVersion": {
                                  "type": "string"
                                },
                                "p12File": {
                                  "type": "string"
                                },
                                "p12Pwd": {
                                  "type": "string"
                                },
                                "provProfile": {
                                  "type": "string"
                                },
                                "sdkBundle": {
                                  "type": "string"
                                },
                                "slnPath": {
                                  "type": "string"
                                },
                                "symlink": {
                                  "description": "Symlink of the SDK Bundle and Mono installation.\nThe build will use the associated Mono bundled with related Xamarin SDK. If both symlink and monoVersion or sdkBundle are passed, the symlink is taking precedence. If non-existing symlink is passed, the current stable Mono version will be configured for building.\n",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "xcode": {
                              "description": "Build configuration when Xcode is part of the build steps",
                              "properties": {
                                "appExtensionProvisioningProfileFiles": {
                                  "items": {
                                    "description": "Provisioning profile fetch and store information",
                                    "properties": {
                                      "fileId": {
                                        "description": "File id from secure file storage",
                                        "type": "string"
                                      },
                                      "fileName": {
                                        "description": "Name of uploaded provisioning profile",
                                        "type": "string"
                                      },
                                      "targetBundleIdentifier": {
                                        "description": "Target the provisioning profile is used to sign",
                                        "type": "string"
                                      },
                                      "uploadId": {
                                        "description": "Upload id to App Center File Upload Store",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "archiveConfiguration": {
                                  "description": "The build configuration of the target to archive",
                                  "type": "string"
                                },
                                "automaticSigning": {
                                  "type": "boolean"
                                },
                                "cartfilePath": {
                                  "description": "Path to Carthage file, if present",
                                  "type": "string"
                                },
                                "certificateEncoded": {
                                  "type": "string"
                                },
                                "certificateFileId": {
                                  "type": "string"
                                },
                                "certificateFilename": {
                                  "type": "string"
                                },
                                "certificatePassword": {
                                  "type": "string"
                                },
                                "certificateUploadId": {
                                  "type": "string"
                                },
                                "forceLegacyBuildSystem": {
                                  "description": "Setting this to true forces the build to use Xcode legacy build system. Otherwise, the setting from workspace settings is used.\nBy default new build system is used if workspace setting is not committed to the repository. Only used for iOS React Native app, with Xcode 10.\n",
                                  "type": "boolean"
                                },
                                "podfilePath": {
                                  "description": "Path to CococaPods file, if present",
                                  "type": "string"
                                },
                                "projectOrWorkspacePath": {
                                  "description": "Xcode project/workspace path",
                                  "type": "string"
                                },
                                "provisioningProfileEncoded": {
                                  "type": "string"
                                },
                                "provisioningProfileFileId": {
                                  "type": "string"
                                },
                                "provisioningProfileFilename": {
                                  "type": "string"
                                },
                                "provisioningProfileUploadId": {
                                  "type": "string"
                                },
                                "scheme": {
                                  "type": "string"
                                },
                                "targetToArchive": {
                                  "description": "The target id of the selected scheme to archive",
                                  "type": "string"
                                },
                                "teamId": {
                                  "type": "string"
                                },
                                "xcodeProjectSha": {
                                  "description": "The selected pbxproject hash to the repositroy",
                                  "type": "string"
                                },
                                "xcodeVersion": {
                                  "description": "Xcode version used to build. Available versions can be found in \"/xcode_versions\" API. Default is latest stable version, at the time when the configuration is set.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "trigger": {
                          "enum": [
                            "continous",
                            "continuous",
                            "manual"
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "id": {
                          "type": "integer"
                        }
                      },
                      "required": [
                        "id"
                      ],
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "build"
        ],
        "description": "Gets the branch configuration",
        "operationId": "branchConfigurations_get"
      },
      "post": {
        "parameters": [
          {
            "description": "The branch name",
            "in": "path",
            "name": "branch",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "additionalProperties": {
                        "description": "The branch build core properties",
                        "properties": {
                          "branch": {
                            "properties": {
                              "commit": {
                                "properties": {
                                  "sha": {
                                    "description": "The commit SHA",
                                    "type": "string"
                                  },
                                  "url": {
                                    "description": "The URL to the commit",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "name": {
                                "description": "The branch name",
                                "type": "string"
                              }
                            },
                            "required": [
                              "name",
                              "commit"
                            ],
                            "type": "object"
                          },
                          "enabled": {
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      "description": "The branch build configuration",
                      "properties": {
                        "artifactVersioning": {
                          "description": "The versioning configuration for artifacts built for this branch",
                          "properties": {
                            "buildNumberFormat": {
                              "enum": [
                                "buildId",
                                "timestamp"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "badgeIsEnabled": {
                          "type": "boolean"
                        },
                        "cloneFromBranch": {
                          "description": "A configured branch name to clone from. If provided, all other parameters will be ignored. Only supported in POST requests.",
                          "type": "string"
                        },
                        "signed": {
                          "type": "boolean"
                        },
                        "testsEnabled": {
                          "type": "boolean"
                        },
                        "toolsets": {
                          "description": "The branch build configuration for each toolset",
                          "properties": {
                            "android": {
                              "description": "Build configuration for Android projects",
                              "properties": {
                                "automaticSigning": {
                                  "description": "Whether to apply automatic signing or not",
                                  "type": "boolean"
                                },
                                "buildVariant": {
                                  "description": "The Android build variant to build",
                                  "example": "release",
                                  "type": "string"
                                },
                                "gradleWrapperPath": {
                                  "description": "Path to the Gradle wrapper script",
                                  "example": "android/gradlew",
                                  "type": "string"
                                },
                                "isRoot": {
                                  "description": "Whether it is the root module or not",
                                  "type": "boolean"
                                },
                                "keyAlias": {
                                  "description": "The key alias",
                                  "type": "string"
                                },
                                "keyPassword": {
                                  "description": "The key password",
                                  "type": "string"
                                },
                                "keystoreEncoded": {
                                  "description": "The keystore encoded value",
                                  "type": "string"
                                },
                                "keystoreFilename": {
                                  "description": "The name of the keystore file",
                                  "type": "string"
                                },
                                "keystorePassword": {
                                  "description": "The password of the keystore",
                                  "type": "string"
                                },
                                "module": {
                                  "description": "The Gradle module to build",
                                  "example": "app",
                                  "type": "string"
                                },
                                "runLint": {
                                  "description": "Whether to run lint checks during the build (default)",
                                  "type": "boolean"
                                },
                                "runTests": {
                                  "default": true,
                                  "description": "Whether to run unit tests during the build (default)",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            },
                            "javascript": {
                              "description": "Build configuration when React Native, or other JavaScript tech, is part of the build steps",
                              "properties": {
                                "packageJsonPath": {
                                  "description": "Path to package.json file for the main project, e.g. \"package.json\" or \"myapp/package.json\"",
                                  "type": "string"
                                },
                                "reactNativeVersion": {
                                  "description": "Version of React Native from package.json files",
                                  "type": "string"
                                },
                                "runTests": {
                                  "description": "Whether to run Jest unit tests, via npm test, during the build",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            },
                            "xamarin": {
                              "description": "Build configuration for Xamarin projects",
                              "properties": {
                                "args": {
                                  "type": "string"
                                },
                                "configuration": {
                                  "type": "string"
                                },
                                "isSimBuild": {
                                  "type": "boolean"
                                },
                                "monoVersion": {
                                  "type": "string"
                                },
                                "p12File": {
                                  "type": "string"
                                },
                                "p12Pwd": {
                                  "type": "string"
                                },
                                "provProfile": {
                                  "type": "string"
                                },
                                "sdkBundle": {
                                  "type": "string"
                                },
                                "slnPath": {
                                  "type": "string"
                                },
                                "symlink": {
                                  "description": "Symlink of the SDK Bundle and Mono installation.\nThe build will use the associated Mono bundled with related Xamarin SDK. If both symlink and monoVersion or sdkBundle are passed, the symlink is taking precedence. If non-existing symlink is passed, the current stable Mono version will be configured for building.\n",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "xcode": {
                              "description": "Build configuration when Xcode is part of the build steps",
                              "properties": {
                                "appExtensionProvisioningProfileFiles": {
                                  "items": {
                                    "description": "Provisioning profile fetch and store information",
                                    "properties": {
                                      "fileId": {
                                        "description": "File id from secure file storage",
                                        "type": "string"
                                      },
                                      "fileName": {
                                        "description": "Name of uploaded provisioning profile",
                                        "type": "string"
                                      },
                                      "targetBundleIdentifier": {
                                        "description": "Target the provisioning profile is used to sign",
                                        "type": "string"
                                      },
                                      "uploadId": {
                                        "description": "Upload id to App Center File Upload Store",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "archiveConfiguration": {
                                  "description": "The build configuration of the target to archive",
                                  "type": "string"
                                },
                                "automaticSigning": {
                                  "type": "boolean"
                                },
                                "cartfilePath": {
                                  "description": "Path to Carthage file, if present",
                                  "type": "string"
                                },
                                "certificateEncoded": {
                                  "type": "string"
                                },
                                "certificateFileId": {
                                  "type": "string"
                                },
                                "certificateFilename": {
                                  "type": "string"
                                },
                                "certificatePassword": {
                                  "type": "string"
                                },
                                "certificateUploadId": {
                                  "type": "string"
                                },
                                "forceLegacyBuildSystem": {
                                  "description": "Setting this to true forces the build to use Xcode legacy build system. Otherwise, the setting from workspace settings is used.\nBy default new build system is used if workspace setting is not committed to the repository. Only used for iOS React Native app, with Xcode 10.\n",
                                  "type": "boolean"
                                },
                                "podfilePath": {
                                  "description": "Path to CococaPods file, if present",
                                  "type": "string"
                                },
                                "projectOrWorkspacePath": {
                                  "description": "Xcode project/workspace path",
                                  "type": "string"
                                },
                                "provisioningProfileEncoded": {
                                  "type": "string"
                                },
                                "provisioningProfileFileId": {
                                  "type": "string"
                                },
                                "provisioningProfileFilename": {
                                  "type": "string"
                                },
                                "provisioningProfileUploadId": {
                                  "type": "string"
                                },
                                "scheme": {
                                  "type": "string"
                                },
                                "targetToArchive": {
                                  "description": "The target id of the selected scheme to archive",
                                  "type": "string"
                                },
                                "teamId": {
                                  "type": "string"
                                },
                                "xcodeProjectSha": {
                                  "description": "The selected pbxproject hash to the repositroy",
                                  "type": "string"
                                },
                                "xcodeVersion": {
                                  "description": "Xcode version used to build. Available versions can be found in \"/xcode_versions\" API. Default is latest stable version, at the time when the configuration is set.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "trigger": {
                          "enum": [
                            "continous",
                            "continuous",
                            "manual"
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "id": {
                          "type": "integer"
                        }
                      },
                      "required": [
                        "id"
                      ],
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Success"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "build"
        ],
        "description": "Configures the branch for build",
        "operationId": "branchConfigurations_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": {
                  "description": "The branch build core properties",
                  "properties": {
                    "branch": {
                      "properties": {
                        "commit": {
                          "properties": {
                            "sha": {
                              "description": "The commit SHA",
                              "type": "string"
                            },
                            "url": {
                              "description": "The URL to the commit",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "name": {
                          "description": "The branch name",
                          "type": "string"
                        }
                      },
                      "required": [
                        "name",
                        "commit"
                      ],
                      "type": "object"
                    },
                    "enabled": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                },
                "description": "The branch build configuration",
                "properties": {
                  "artifactVersioning": {
                    "description": "The versioning configuration for artifacts built for this branch",
                    "properties": {
                      "buildNumberFormat": {
                        "enum": [
                          "buildId",
                          "timestamp"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "badgeIsEnabled": {
                    "type": "boolean"
                  },
                  "cloneFromBranch": {
                    "description": "A configured branch name to clone from. If provided, all other parameters will be ignored. Only supported in POST requests.",
                    "type": "string"
                  },
                  "signed": {
                    "type": "boolean"
                  },
                  "testsEnabled": {
                    "type": "boolean"
                  },
                  "toolsets": {
                    "description": "The branch build configuration for each toolset",
                    "properties": {
                      "android": {
                        "description": "Build configuration for Android projects",
                        "properties": {
                          "automaticSigning": {
                            "description": "Whether to apply automatic signing or not",
                            "type": "boolean"
                          },
                          "buildVariant": {
                            "description": "The Android build variant to build",
                            "example": "release",
                            "type": "string"
                          },
                          "gradleWrapperPath": {
                            "description": "Path to the Gradle wrapper script",
                            "example": "android/gradlew",
                            "type": "string"
                          },
                          "isRoot": {
                            "description": "Whether it is the root module or not",
                            "type": "boolean"
                          },
                          "keyAlias": {
                            "description": "The key alias",
                            "type": "string"
                          },
                          "keyPassword": {
                            "description": "The key password",
                            "type": "string"
                          },
                          "keystoreEncoded": {
                            "description": "The keystore encoded value",
                            "type": "string"
                          },
                          "keystoreFilename": {
                            "description": "The name of the keystore file",
                            "type": "string"
                          },
                          "keystorePassword": {
                            "description": "The password of the keystore",
                            "type": "string"
                          },
                          "module": {
                            "description": "The Gradle module to build",
                            "example": "app",
                            "type": "string"
                          },
                          "runLint": {
                            "description": "Whether to run lint checks during the build (default)",
                            "type": "boolean"
                          },
                          "runTests": {
                            "default": true,
                            "description": "Whether to run unit tests during the build (default)",
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      "javascript": {
                        "description": "Build configuration when React Native, or other JavaScript tech, is part of the build steps",
                        "properties": {
                          "packageJsonPath": {
                            "description": "Path to package.json file for the main project, e.g. \"package.json\" or \"myapp/package.json\"",
                            "type": "string"
                          },
                          "reactNativeVersion": {
                            "description": "Version of React Native from package.json files",
                            "type": "string"
                          },
                          "runTests": {
                            "description": "Whether to run Jest unit tests, via npm test, during the build",
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      "xamarin": {
                        "description": "Build configuration for Xamarin projects",
                        "properties": {
                          "args": {
                            "type": "string"
                          },
                          "configuration": {
                            "type": "string"
                          },
                          "isSimBuild": {
                            "type": "boolean"
                          },
                          "monoVersion": {
                            "type": "string"
                          },
                          "p12File": {
                            "type": "string"
                          },
                          "p12Pwd": {
                            "type": "string"
                          },
                          "provProfile": {
                            "type": "string"
                          },
                          "sdkBundle": {
                            "type": "string"
                          },
                          "slnPath": {
                            "type": "string"
                          },
                          "symlink": {
                            "description": "Symlink of the SDK Bundle and Mono installation.\nThe build will use the associated Mono bundled with related Xamarin SDK. If both symlink and monoVersion or sdkBundle are passed, the symlink is taking precedence. If non-existing symlink is passed, the current stable Mono version will be configured for building.\n",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "xcode": {
                        "description": "Build configuration when Xcode is part of the build steps",
                        "properties": {
                          "appExtensionProvisioningProfileFiles": {
                            "items": {
                              "description": "Provisioning profile fetch and store information",
                              "properties": {
                                "fileId": {
                                  "description": "File id from secure file storage",
                                  "type": "string"
                                },
                                "fileName": {
                                  "description": "Name of uploaded provisioning profile",
                                  "type": "string"
                                },
                                "targetBundleIdentifier": {
                                  "description": "Target the provisioning profile is used to sign",
                                  "type": "string"
                                },
                                "uploadId": {
                                  "description": "Upload id to App Center File Upload Store",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "archiveConfiguration": {
                            "description": "The build configuration of the target to archive",
                            "type": "string"
                          },
                          "automaticSigning": {
                            "type": "boolean"
                          },
                          "cartfilePath": {
                            "description": "Path to Carthage file, if present",
                            "type": "string"
                          },
                          "certificateEncoded": {
                            "type": "string"
                          },
                          "certificateFileId": {
                            "type": "string"
                          },
                          "certificateFilename": {
                            "type": "string"
                          },
                          "certificatePassword": {
                            "type": "string"
                          },
                          "certificateUploadId": {
                            "type": "string"
                          },
                          "forceLegacyBuildSystem": {
                            "description": "Setting this to true forces the build to use Xcode legacy build system. Otherwise, the setting from workspace settings is used.\nBy default new build system is used if workspace setting is not committed to the repository. Only used for iOS React Native app, with Xcode 10.\n",
                            "type": "boolean"
                          },
                          "podfilePath": {
                            "description": "Path to CococaPods file, if present",
                            "type": "string"
                          },
                          "projectOrWorkspacePath": {
                            "description": "Xcode project/workspace path",
                            "type": "string"
                          },
                          "provisioningProfileEncoded": {
                            "type": "string"
                          },
                          "provisioningProfileFileId": {
                            "type": "string"
                          },
                          "provisioningProfileFilename": {
                            "type": "string"
                          },
                          "provisioningProfileUploadId": {
                            "type": "string"
                          },
                          "scheme": {
                            "type": "string"
                          },
                          "targetToArchive": {
                            "description": "The target id of the selected scheme to archive",
                            "type": "string"
                          },
                          "teamId": {
                            "type": "string"
                          },
                          "xcodeProjectSha": {
                            "description": "The selected pbxproject hash to the repositroy",
                            "type": "string"
                          },
                          "xcodeVersion": {
                            "description": "Xcode version used to build. Available versions can be found in \"/xcode_versions\" API. Default is latest stable version, at the time when the configuration is set.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "trigger": {
                    "enum": [
                      "continous",
                      "continuous",
                      "manual"
                    ],
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Parameters of the configuration",
          "required": true
        }
      },
      "put": {
        "parameters": [
          {
            "description": "The branch name",
            "in": "path",
            "name": "branch",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "additionalProperties": {
                        "description": "The branch build core properties",
                        "properties": {
                          "branch": {
                            "properties": {
                              "commit": {
                                "properties": {
                                  "sha": {
                                    "description": "The commit SHA",
                                    "type": "string"
                                  },
                                  "url": {
                                    "description": "The URL to the commit",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "name": {
                                "description": "The branch name",
                                "type": "string"
                              }
                            },
                            "required": [
                              "name",
                              "commit"
                            ],
                            "type": "object"
                          },
                          "enabled": {
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      "description": "The branch build configuration",
                      "properties": {
                        "artifactVersioning": {
                          "description": "The versioning configuration for artifacts built for this branch",
                          "properties": {
                            "buildNumberFormat": {
                              "enum": [
                                "buildId",
                                "timestamp"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "badgeIsEnabled": {
                          "type": "boolean"
                        },
                        "cloneFromBranch": {
                          "description": "A configured branch name to clone from. If provided, all other parameters will be ignored. Only supported in POST requests.",
                          "type": "string"
                        },
                        "signed": {
                          "type": "boolean"
                        },
                        "testsEnabled": {
                          "type": "boolean"
                        },
                        "toolsets": {
                          "description": "The branch build configuration for each toolset",
                          "properties": {
                            "android": {
                              "description": "Build configuration for Android projects",
                              "properties": {
                                "automaticSigning": {
                                  "description": "Whether to apply automatic signing or not",
                                  "type": "boolean"
                                },
                                "buildVariant": {
                                  "description": "The Android build variant to build",
                                  "example": "release",
                                  "type": "string"
                                },
                                "gradleWrapperPath": {
                                  "description": "Path to the Gradle wrapper script",
                                  "example": "android/gradlew",
                                  "type": "string"
                                },
                                "isRoot": {
                                  "description": "Whether it is the root module or not",
                                  "type": "boolean"
                                },
                                "keyAlias": {
                                  "description": "The key alias",
                                  "type": "string"
                                },
                                "keyPassword": {
                                  "description": "The key password",
                                  "type": "string"
                                },
                                "keystoreEncoded": {
                                  "description": "The keystore encoded value",
                                  "type": "string"
                                },
                                "keystoreFilename": {
                                  "description": "The name of the keystore file",
                                  "type": "string"
                                },
                                "keystorePassword": {
                                  "description": "The password of the keystore",
                                  "type": "string"
                                },
                                "module": {
                                  "description": "The Gradle module to build",
                                  "example": "app",
                                  "type": "string"
                                },
                                "runLint": {
                                  "description": "Whether to run lint checks during the build (default)",
                                  "type": "boolean"
                                },
                                "runTests": {
                                  "default": true,
                                  "description": "Whether to run unit tests during the build (default)",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            },
                            "javascript": {
                              "description": "Build configuration when React Native, or other JavaScript tech, is part of the build steps",
                              "properties": {
                                "packageJsonPath": {
                                  "description": "Path to package.json file for the main project, e.g. \"package.json\" or \"myapp/package.json\"",
                                  "type": "string"
                                },
                                "reactNativeVersion": {
                                  "description": "Version of React Native from package.json files",
                                  "type": "string"
                                },
                                "runTests": {
                                  "description": "Whether to run Jest unit tests, via npm test, during the build",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            },
                            "xamarin": {
                              "description": "Build configuration for Xamarin projects",
                              "properties": {
                                "args": {
                                  "type": "string"
                                },
                                "configuration": {
                                  "type": "string"
                                },
                                "isSimBuild": {
                                  "type": "boolean"
                                },
                                "monoVersion": {
                                  "type": "string"
                                },
                                "p12File": {
                                  "type": "string"
                                },
                                "p12Pwd": {
                                  "type": "string"
                                },
                                "provProfile": {
                                  "type": "string"
                                },
                                "sdkBundle": {
                                  "type": "string"
                                },
                                "slnPath": {
                                  "type": "string"
                                },
                                "symlink": {
                                  "description": "Symlink of the SDK Bundle and Mono installation.\nThe build will use the associated Mono bundled with related Xamarin SDK. If both symlink and monoVersion or sdkBundle are passed, the symlink is taking precedence. If non-existing symlink is passed, the current stable Mono version will be configured for building.\n",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "xcode": {
                              "description": "Build configuration when Xcode is part of the build steps",
                              "properties": {
                                "appExtensionProvisioningProfileFiles": {
                                  "items": {
                                    "description": "Provisioning profile fetch and store information",
                                    "properties": {
                                      "fileId": {
                                        "description": "File id from secure file storage",
                                        "type": "string"
                                      },
                                      "fileName": {
                                        "description": "Name of uploaded provisioning profile",
                                        "type": "string"
                                      },
                                      "targetBundleIdentifier": {
                                        "description": "Target the provisioning profile is used to sign",
                                        "type": "string"
                                      },
                                      "uploadId": {
                                        "description": "Upload id to App Center File Upload Store",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "archiveConfiguration": {
                                  "description": "The build configuration of the target to archive",
                                  "type": "string"
                                },
                                "automaticSigning": {
                                  "type": "boolean"
                                },
                                "cartfilePath": {
                                  "description": "Path to Carthage file, if present",
                                  "type": "string"
                                },
                                "certificateEncoded": {
                                  "type": "string"
                                },
                                "certificateFileId": {
                                  "type": "string"
                                },
                                "certificateFilename": {
                                  "type": "string"
                                },
                                "certificatePassword": {
                                  "type": "string"
                                },
                                "certificateUploadId": {
                                  "type": "string"
                                },
                                "forceLegacyBuildSystem": {
                                  "description": "Setting this to true forces the build to use Xcode legacy build system. Otherwise, the setting from workspace settings is used.\nBy default new build system is used if workspace setting is not committed to the repository. Only used for iOS React Native app, with Xcode 10.\n",
                                  "type": "boolean"
                                },
                                "podfilePath": {
                                  "description": "Path to CococaPods file, if present",
                                  "type": "string"
                                },
                                "projectOrWorkspacePath": {
                                  "description": "Xcode project/workspace path",
                                  "type": "string"
                                },
                                "provisioningProfileEncoded": {
                                  "type": "string"
                                },
                                "provisioningProfileFileId": {
                                  "type": "string"
                                },
                                "provisioningProfileFilename": {
                                  "type": "string"
                                },
                                "provisioningProfileUploadId": {
                                  "type": "string"
                                },
                                "scheme": {
                                  "type": "string"
                                },
                                "targetToArchive": {
                                  "description": "The target id of the selected scheme to archive",
                                  "type": "string"
                                },
                                "teamId": {
                                  "type": "string"
                                },
                                "xcodeProjectSha": {
                                  "description": "The selected pbxproject hash to the repositroy",
                                  "type": "string"
                                },
                                "xcodeVersion": {
                                  "description": "Xcode version used to build. Available versions can be found in \"/xcode_versions\" API. Default is latest stable version, at the time when the configuration is set.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "trigger": {
                          "enum": [
                            "continous",
                            "continuous",
                            "manual"
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "id": {
                          "type": "integer"
                        }
                      },
                      "required": [
                        "id"
                      ],
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Success"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "build"
        ],
        "description": "Reconfigures the branch for build",
        "operationId": "branchConfigurations_update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": {
                  "description": "The branch build core properties",
                  "properties": {
                    "branch": {
                      "properties": {
                        "commit": {
                          "properties": {
                            "sha": {
                              "description": "The commit SHA",
                              "type": "string"
                            },
                            "url": {
                              "description": "The URL to the commit",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "name": {
                          "description": "The branch name",
                          "type": "string"
                        }
                      },
                      "required": [
                        "name",
                        "commit"
                      ],
                      "type": "object"
                    },
                    "enabled": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                },
                "description": "The branch build configuration",
                "properties": {
                  "artifactVersioning": {
                    "description": "The versioning configuration for artifacts built for this branch",
                    "properties": {
                      "buildNumberFormat": {
                        "enum": [
                          "buildId",
                          "timestamp"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "badgeIsEnabled": {
                    "type": "boolean"
                  },
                  "cloneFromBranch": {
                    "description": "A configured branch name to clone from. If provided, all other parameters will be ignored. Only supported in POST requests.",
                    "type": "string"
                  },
                  "signed": {
                    "type": "boolean"
                  },
                  "testsEnabled": {
                    "type": "boolean"
                  },
                  "toolsets": {
                    "description": "The branch build configuration for each toolset",
                    "properties": {
                      "android": {
                        "description": "Build configuration for Android projects",
                        "properties": {
                          "automaticSigning": {
                            "description": "Whether to apply automatic signing or not",
                            "type": "boolean"
                          },
                          "buildVariant": {
                            "description": "The Android build variant to build",
                            "example": "release",
                            "type": "string"
                          },
                          "gradleWrapperPath": {
                            "description": "Path to the Gradle wrapper script",
                            "example": "android/gradlew",
                            "type": "string"
                          },
                          "isRoot": {
                            "description": "Whether it is the root module or not",
                            "type": "boolean"
                          },
                          "keyAlias": {
                            "description": "The key alias",
                            "type": "string"
                          },
                          "keyPassword": {
                            "description": "The key password",
                            "type": "string"
                          },
                          "keystoreEncoded": {
                            "description": "The keystore encoded value",
                            "type": "string"
                          },
                          "keystoreFilename": {
                            "description": "The name of the keystore file",
                            "type": "string"
                          },
                          "keystorePassword": {
                            "description": "The password of the keystore",
                            "type": "string"
                          },
                          "module": {
                            "description": "The Gradle module to build",
                            "example": "app",
                            "type": "string"
                          },
                          "runLint": {
                            "description": "Whether to run lint checks during the build (default)",
                            "type": "boolean"
                          },
                          "runTests": {
                            "default": true,
                            "description": "Whether to run unit tests during the build (default)",
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      "javascript": {
                        "description": "Build configuration when React Native, or other JavaScript tech, is part of the build steps",
                        "properties": {
                          "packageJsonPath": {
                            "description": "Path to package.json file for the main project, e.g. \"package.json\" or \"myapp/package.json\"",
                            "type": "string"
                          },
                          "reactNativeVersion": {
                            "description": "Version of React Native from package.json files",
                            "type": "string"
                          },
                          "runTests": {
                            "description": "Whether to run Jest unit tests, via npm test, during the build",
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      "xamarin": {
                        "description": "Build configuration for Xamarin projects",
                        "properties": {
                          "args": {
                            "type": "string"
                          },
                          "configuration": {
                            "type": "string"
                          },
                          "isSimBuild": {
                            "type": "boolean"
                          },
                          "monoVersion": {
                            "type": "string"
                          },
                          "p12File": {
                            "type": "string"
                          },
                          "p12Pwd": {
                            "type": "string"
                          },
                          "provProfile": {
                            "type": "string"
                          },
                          "sdkBundle": {
                            "type": "string"
                          },
                          "slnPath": {
                            "type": "string"
                          },
                          "symlink": {
                            "description": "Symlink of the SDK Bundle and Mono installation.\nThe build will use the associated Mono bundled with related Xamarin SDK. If both symlink and monoVersion or sdkBundle are passed, the symlink is taking precedence. If non-existing symlink is passed, the current stable Mono version will be configured for building.\n",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "xcode": {
                        "description": "Build configuration when Xcode is part of the build steps",
                        "properties": {
                          "appExtensionProvisioningProfileFiles": {
                            "items": {
                              "description": "Provisioning profile fetch and store information",
                              "properties": {
                                "fileId": {
                                  "description": "File id from secure file storage",
                                  "type": "string"
                                },
                                "fileName": {
                                  "description": "Name of uploaded provisioning profile",
                                  "type": "string"
                                },
                                "targetBundleIdentifier": {
                                  "description": "Target the provisioning profile is used to sign",
                                  "type": "string"
                                },
                                "uploadId": {
                                  "description": "Upload id to App Center File Upload Store",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "archiveConfiguration": {
                            "description": "The build configuration of the target to archive",
                            "type": "string"
                          },
                          "automaticSigning": {
                            "type": "boolean"
                          },
                          "cartfilePath": {
                            "description": "Path to Carthage file, if present",
                            "type": "string"
                          },
                          "certificateEncoded": {
                            "type": "string"
                          },
                          "certificateFileId": {
                            "type": "string"
                          },
                          "certificateFilename": {
                            "type": "string"
                          },
                          "certificatePassword": {
                            "type": "string"
                          },
                          "certificateUploadId": {
                            "type": "string"
                          },
                          "forceLegacyBuildSystem": {
                            "description": "Setting this to true forces the build to use Xcode legacy build system. Otherwise, the setting from workspace settings is used.\nBy default new build system is used if workspace setting is not committed to the repository. Only used for iOS React Native app, with Xcode 10.\n",
                            "type": "boolean"
                          },
                          "podfilePath": {
                            "description": "Path to CococaPods file, if present",
                            "type": "string"
                          },
                          "projectOrWorkspacePath": {
                            "description": "Xcode project/workspace path",
                            "type": "string"
                          },
                          "provisioningProfileEncoded": {
                            "type": "string"
                          },
                          "provisioningProfileFileId": {
                            "type": "string"
                          },
                          "provisioningProfileFilename": {
                            "type": "string"
                          },
                          "provisioningProfileUploadId": {
                            "type": "string"
                          },
                          "scheme": {
                            "type": "string"
                          },
                          "targetToArchive": {
                            "description": "The target id of the selected scheme to archive",
                            "type": "string"
                          },
                          "teamId": {
                            "type": "string"
                          },
                          "xcodeProjectSha": {
                            "description": "The selected pbxproject hash to the repositroy",
                            "type": "string"
                          },
                          "xcodeVersion": {
                            "description": "Xcode version used to build. Available versions can be found in \"/xcode_versions\" API. Default is latest stable version, at the time when the configuration is set.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "trigger": {
                    "enum": [
                      "continous",
                      "continuous",
                      "manual"
                    ],
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Parameters of the configuration",
          "required": true
        }
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/export_config": {
      "get": {
        "parameters": [
          {
            "description": "The branch name",
            "in": "path",
            "name": "branch",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Configuration format",
            "in": "query",
            "name": "format",
            "required": false,
            "schema": {
              "default": "yaml",
              "enum": [
                "yaml",
                "json"
              ],
              "type": "string"
            }
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "The build configuration in Azure pipeline YAML format",
                  "properties": {
                    "yaml": {
                      "description": "Azure Pipelines YAML file",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "build"
        ],
        "description": "Gets the build configuration in Azure pipeline YAML format",
        "operationId": "buildConfigurations_get"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/toolset_projects": {
      "get": {
        "parameters": [
          {
            "description": "The branch name",
            "in": "path",
            "name": "branch",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The desired OS for the project scan; normally the same as the app OS",
            "in": "query",
            "name": "os",
            "required": true,
            "schema": {
              "enum": [
                "iOS",
                "Android",
                "Windows",
                "macOS"
              ],
              "type": "string"
            }
          },
          {
            "description": "The desired platform for the project scan",
            "in": "query",
            "name": "platform",
            "required": true,
            "schema": {
              "enum": [
                "Objective-C-Swift",
                "React-Native",
                "Xamarin",
                "Java",
                "UWP"
              ],
              "type": "string"
            }
          },
          {
            "description": "The depth of the repository to search for project files",
            "in": "query",
            "name": "maxSearchDepth",
            "required": false,
            "schema": {
              "maximum": 10,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A collection of projects for each type of toolset",
                  "properties": {
                    "android": {
                      "properties": {
                        "androidModules": {
                          "description": "Android Gradle modules",
                          "items": {
                            "properties": {
                              "buildConfigurations": {
                                "description": "The detected build configurations of the Android module",
                                "items": {
                                  "properties": {
                                    "name": {
                                      "description": "Name of build configuration (the same as a build type name)",
                                      "type": "string"
                                    },
                                    "signingConfig": {
                                      "description": "Android signing config. Null if not specified",
                                      "properties": {
                                        "hasStoreFile": {
                                          "description": "Indicates if storeFile is specified in the signing configuration",
                                          "type": "boolean"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "required": [
                                    "name"
                                  ],
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "buildTypes": {
                                "description": "The detected build types of the Android module",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "buildVariants": {
                                "description": "The detected build variants of the Android module (matrix of product flavor + build type (debug|release))",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "hasBundle": {
                                "description": "Module contains bundle settings",
                                "type": "boolean"
                              },
                              "isRoot": {
                                "description": "Whether the module is at the root level of the project",
                                "type": "boolean"
                              },
                              "name": {
                                "description": "Name of the Android module",
                                "type": "string"
                              },
                              "productFlavors": {
                                "description": "The product flavors of the Android module",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              }
                            },
                            "required": [
                              "name"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "gradleWrapperPath": {
                          "description": "The path of the Gradle wrapper",
                          "type": "string"
                        }
                      },
                      "required": [
                        "androidModules"
                      ],
                      "type": "object"
                    },
                    "buildscripts": {
                      "additionalProperties": {
                        "description": "Abstract platform project",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "path": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "description": "A collection of detected pre/post buildscripts for current platform toolset"
                    },
                    "commit": {
                      "description": "The commit hash of the analyzed commit",
                      "type": "string"
                    },
                    "javascript": {
                      "properties": {
                        "javascriptSolutions": {
                          "description": "The React Native solutions detected",
                          "items": {
                            "properties": {
                              "packageJsonPath": {
                                "description": "The path to the detected package.json",
                                "type": "string"
                              },
                              "reactNativeVersion": {
                                "description": "Version of React Native from package.json files",
                                "type": "string"
                              }
                            },
                            "required": [
                              "packageJsonPath"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "packageJsonPaths": {
                          "description": "Paths for detected package.json files",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "packageJsonPaths"
                      ],
                      "type": "object"
                    },
                    "testcloud": {
                      "properties": {
                        "projects": {
                          "description": "The TestCloud projects detected",
                          "items": {
                            "properties": {
                              "frameworkProperties": {
                                "properties": {
                                  "configurations": {
                                    "items": {
                                      "type": "string"
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              },
                              "frameworkType": {
                                "enum": [
                                  "Appium",
                                  "Calabash",
                                  "Espresso",
                                  "UITest",
                                  "Generated"
                                ],
                                "type": "string"
                              },
                              "path": {
                                "description": "The path to the TestCloud project",
                                "type": "string"
                              }
                            },
                            "required": [
                              "path",
                              "frameworkType"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "projects"
                      ],
                      "type": "object"
                    },
                    "uwp": {
                      "properties": {
                        "uwpSolutions": {
                          "description": "The UWP solutions detected",
                          "items": {
                            "properties": {
                              "configurations": {
                                "description": "The possible configurations detected for the UWP solution",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "path": {
                                "description": "The path to the UWP solution",
                                "type": "string"
                              }
                            },
                            "required": [
                              "path",
                              "configurations"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "uwpSolutions"
                      ],
                      "type": "object"
                    },
                    "xamarin": {
                      "properties": {
                        "xamarinSolutions": {
                          "description": "Xamarin solutions for the toolset",
                          "items": {
                            "properties": {
                              "configurations": {
                                "description": "Solution configurations",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "defaultConfiguration": {
                                "description": "Solution default configuration",
                                "type": "string"
                              },
                              "path": {
                                "description": "Path to solution",
                                "type": "string"
                              }
                            },
                            "required": [
                              "path",
                              "configurations"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "xamarinSolutions"
                      ],
                      "type": "object"
                    },
                    "xcode": {
                      "properties": {
                        "xcodeSchemeContainers": {
                          "description": "The Xcode scheme containers",
                          "items": {
                            "properties": {
                              "appExtensionTargets": {
                                "description": "Information regarding project app extensions, if present",
                                "items": {
                                  "description": "App extension information",
                                  "properties": {
                                    "name": {
                                      "description": "App extension name",
                                      "type": "string"
                                    },
                                    "targetBundleIdentifier": {
                                      "description": "App extension bundle identifier",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "name",
                                    "targetBundleIdentifier"
                                  ],
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "cartfilePath": {
                                "description": "Path to Carthage file, if present",
                                "type": "string"
                              },
                              "path": {
                                "description": "Path to project",
                                "type": "string"
                              },
                              "podfilePath": {
                                "description": "Path to CocoaPods file, if present",
                                "type": "string"
                              },
                              "sharedSchemes": {
                                "description": "Project schemes",
                                "items": {
                                  "properties": {
                                    "archiveConfiguration": {
                                      "description": "Build configuration set in Archive action",
                                      "type": "string"
                                    },
                                    "archiveProject": {
                                      "properties": {
                                        "archiveTargetId": {
                                          "description": "The Id of the target to archive",
                                          "type": "string"
                                        },
                                        "projectName": {
                                          "description": "The project to archive container name",
                                          "type": "string"
                                        },
                                        "projectPath": {
                                          "description": "Full path of the target project",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "archiveTargetId",
                                        "projectName"
                                      ],
                                      "type": "object"
                                    },
                                    "hasTestAction": {
                                      "description": "Does scheme have a test action?",
                                      "type": "boolean"
                                    },
                                    "name": {
                                      "description": "Scheme name",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "name",
                                    "hasTestAction"
                                  ],
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "workspaceProjectPaths": {
                                "description": "Related projects paths for xcworkspace",
                                "type": "string"
                              },
                              "xcodeProjectSha": {
                                "description": "repo object Id of the pbxproject",
                                "type": "string"
                              }
                            },
                            "required": [
                              "path",
                              "sharedSchemes"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "xcodeSchemeContainers"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Success"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "build"
        ],
        "description": "Returns the projects in the repository for the branch, for all toolsets",
        "operationId": "builds_listToolsetProjects"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/bugtracker": {
      "get": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Alerting bugtracker resource",
                  "properties": {
                    "event_types": {
                      "description": "Event types enabled for bugtracker",
                      "items": {
                        "description": "Alerting EventTypes enum",
                        "enum": [
                          "newCrashGroupCreated",
                          "newAppReleased"
                        ],
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "settings": {
                      "description": "Bugtracker specific settings",
                      "discriminator": {
                        "propertyName": "type"
                      },
                      "properties": {
                        "callback_url": {
                          "type": "string"
                        },
                        "owner_name": {
                          "type": "string"
                        },
                        "type": {
                          "description": "type of bugtracker",
                          "enum": [
                            "github",
                            "vsts",
                            "jira"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "type",
                        "owner_name"
                      ],
                      "type": "object"
                    },
                    "state": {
                      "description": "bugtracker state",
                      "enum": [
                        "enabled",
                        "disabled",
                        "unauthorized"
                      ],
                      "type": "string"
                    },
                    "token_id": {
                      "description": "ID of OAuth token",
                      "type": "string"
                    },
                    "type": {
                      "description": "type of bugtracker",
                      "enum": [
                        "github",
                        "vsts",
                        "jira"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "description": "Generic result for any alerting API operation",
                      "properties": {
                        "request_id": {
                          "description": "Unique request identifier for tracking",
                          "type": "string"
                        }
                      },
                      "required": [
                        "request_id"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "code": {
                          "description": "The status code return by the API. It can be 400 or 404 or 409 or 500.",
                          "enum": [
                            400,
                            404,
                            409,
                            500
                          ],
                          "type": "integer"
                        },
                        "message": {
                          "description": "The reason for the request failed",
                          "type": "string"
                        }
                      },
                      "required": [
                        "code"
                      ],
                      "type": "object"
                    }
                  ],
                  "description": "Alerting service error"
                }
              }
            },
            "description": "Error code with reason"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "alerting"
        ],
        "description": "Get bug tracker settings for a particular app",
        "operationId": "bugtracker_getSettings"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/bugtracker/crashGroup/{crash_group_id}": {
      "get": {
        "parameters": [
          {
            "description": "CrashGroup Id",
            "in": "path",
            "name": "crash_group_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Object returned in response to getting a bug tracker issue related to a crash group id",
                  "properties": {
                    "bug_tracker_type": {
                      "enum": [
                        "github",
                        "vsts",
                        "jira"
                      ],
                      "type": "string"
                    },
                    "event_type": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    },
                    "mobile_center_id": {
                      "type": "string"
                    },
                    "repo_name": {
                      "type": "string"
                    },
                    "title": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "description": "Generic result for any alerting API operation",
                      "properties": {
                        "request_id": {
                          "description": "Unique request identifier for tracking",
                          "type": "string"
                        }
                      },
                      "required": [
                        "request_id"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "code": {
                          "description": "The status code return by the API. It can be 400 or 404 or 409 or 500.",
                          "enum": [
                            400,
                            404,
                            409,
                            500
                          ],
                          "type": "integer"
                        },
                        "message": {
                          "description": "The reason for the request failed",
                          "type": "string"
                        }
                      },
                      "required": [
                        "code"
                      ],
                      "type": "object"
                    }
                  ],
                  "description": "Alerting service error"
                }
              }
            },
            "description": "Error code with reason"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "alerting"
        ],
        "description": "Get project issue related to a crash group",
        "operationId": "bugTracker_getRepoIssueFromCrash"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/build_service_status": {
      "get": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "os": {
                      "type": "string"
                    },
                    "service": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    },
                    "valid_until": {
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Success. Availability for build service status is stored in response schema."
          },
          "default": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "build"
        ],
        "description": "Application specific build service status",
        "operationId": "builds_getStatusByAppId"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}": {
      "get": {
        "parameters": [
          {
            "description": "The build ID",
            "in": "path",
            "name": "build_id",
            "required": true,
            "schema": {
              "exclusiveMinimum": true,
              "minimum": 0,
              "type": "integer"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "buildNumber": {
                      "description": "The build number",
                      "type": "string"
                    },
                    "finishTime": {
                      "description": "The time the build was finished",
                      "format": "dateTime",
                      "type": "string"
                    },
                    "id": {
                      "description": "The build ID",
                      "exclusiveMinimum": true,
                      "minimum": 0,
                      "type": "integer"
                    },
                    "lastChangedDate": {
                      "description": "The time the build status was last changed",
                      "format": "dateTime",
                      "type": "string"
                    },
                    "queueTime": {
                      "description": "The time the build was queued",
                      "format": "dateTime",
                      "type": "string"
                    },
                    "result": {
                      "description": "The build result",
                      "type": "string"
                    },
                    "sourceBranch": {
                      "description": "The source branch name",
                      "type": "string"
                    },
                    "sourceVersion": {
                      "description": "The source SHA",
                      "type": "string"
                    },
                    "startTime": {
                      "description": "The time the build was started",
                      "format": "dateTime",
                      "type": "string"
                    },
                    "status": {
                      "description": "The build status",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "buildNumber",
                    "queueTime",
                    "status",
                    "result",
                    "sourceBranch",
                    "sourceVersion"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "build"
        ],
        "description": "Returns the build detail for the given build ID",
        "operationId": "builds_get"
      },
      "patch": {
        "parameters": [
          {
            "description": "The build ID",
            "in": "path",
            "name": "build_id",
            "required": true,
            "schema": {
              "exclusiveMinimum": true,
              "minimum": 0,
              "type": "integer"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "buildNumber": {
                      "description": "The build number",
                      "type": "string"
                    },
                    "finishTime": {
                      "description": "The time the build was finished",
                      "format": "dateTime",
                      "type": "string"
                    },
                    "id": {
                      "description": "The build ID",
                      "exclusiveMinimum": true,
                      "minimum": 0,
                      "type": "integer"
                    },
                    "lastChangedDate": {
                      "description": "The time the build status was last changed",
                      "format": "dateTime",
                      "type": "string"
                    },
                    "queueTime": {
                      "description": "The time the build was queued",
                      "format": "dateTime",
                      "type": "string"
                    },
                    "result": {
                      "description": "The build result",
                      "type": "string"
                    },
                    "sourceBranch": {
                      "description": "The source branch name",
                      "type": "string"
                    },
                    "sourceVersion": {
                      "description": "The source SHA",
                      "type": "string"
                    },
                    "startTime": {
                      "description": "The time the build was started",
                      "format": "dateTime",
                      "type": "string"
                    },
                    "status": {
                      "description": "The build status",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "buildNumber",
                    "queueTime",
                    "status",
                    "result",
                    "sourceBranch",
                    "sourceVersion"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "build"
        ],
        "description": "Cancels a build",
        "operationId": "builds_update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "status": {
                    "description": "The build status; used to cancel builds",
                    "enum": [
                      "cancelling"
                    ],
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}/distribute": {
      "post": {
        "parameters": [
          {
            "description": "The build ID",
            "in": "path",
            "name": "build_id",
            "required": true,
            "schema": {
              "exclusiveMinimum": true,
              "minimum": 0,
              "type": "integer"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "description": "Status of the Request",
                      "type": "string"
                    },
                    "upload_id": {
                      "description": "A unique ID of the upload",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Success"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "build"
        ],
        "description": "Distribute a build",
        "operationId": "builds_distribute",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "destinations": {
                    "description": "Array of objects {id:string, type:string} with \"id\" being the distribution group ID, store ID, or tester email, and \"type\" being \"group\", \"store\", or \"tester\"",
                    "items": {
                      "description": "Destination details for distributing build releases",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "type": {
                          "enum": [
                            "store",
                            "group",
                            "tester"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "id",
                        "type"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "mandatoryUpdate": {
                    "type": "boolean"
                  },
                  "notifyTesters": {
                    "default": true,
                    "type": "boolean"
                  },
                  "releaseNotes": {
                    "description": "The release notes",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "The distribution details",
          "required": true
        }
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}/downloads/{download_type}": {
      "get": {
        "parameters": [
          {
            "description": "The build ID",
            "in": "path",
            "name": "build_id",
            "required": true,
            "schema": {
              "exclusiveMinimum": true,
              "minimum": 0,
              "type": "integer"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The download type",
            "in": "path",
            "name": "download_type",
            "required": true,
            "schema": {
              "enum": [
                "build",
                "symbols",
                "logs",
                "mapping",
                "bundle"
              ],
              "type": "string"
            }
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A download reference",
                  "properties": {
                    "uri": {
                      "description": "Download URI",
                      "type": "string"
                    }
                  },
                  "required": [
                    "uri"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "build"
        ],
        "description": "Gets the download URI",
        "operationId": "builds_getDownloadUri"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}/logs": {
      "get": {
        "parameters": [
          {
            "description": "The build ID",
            "in": "path",
            "name": "build_id",
            "required": true,
            "schema": {
              "exclusiveMinimum": true,
              "minimum": 0,
              "type": "integer"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "value": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Success"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "build"
        ],
        "description": "Get the build log",
        "operationId": "builds_getLog"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/commits/batch": {
      "get": {
        "parameters": [
          {
            "description": "A collection of commit SHAs comma-delimited",
            "in": "query",
            "name": "hashes",
            "required": true,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A list of commits",
                  "items": {
                    "allOf": [
                      {
                        "properties": {
                          "sha": {
                            "description": "The commit SHA",
                            "type": "string"
                          },
                          "url": {
                            "description": "The URL to the commit",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "properties": {
                          "commit": {
                            "properties": {
                              "author": {
                                "properties": {
                                  "date": {
                                    "description": "Date and time of the commit",
                                    "type": "string"
                                  },
                                  "email": {
                                    "description": "Author's email",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Author name",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "message": {
                                "description": "Commit message",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "build"
        ],
        "description": "Returns commit information for a batch of shas",
        "operationId": "commits_listByShaList"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/crash_groups": {
      "get": {
        "parameters": [
          {
            "description": "Earliest date when the last time a crash occured in a crash group",
            "in": "query",
            "name": "last_occurrence_from",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Latest date when the last time a crash occured in a crash group",
            "in": "query",
            "name": "last_occurrence_to",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "version",
            "in": "query",
            "name": "app_version",
            "required": false,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "group_type",
            "required": false,
            "schema": {
              "enum": [
                "GroupType1",
                "GroupType2"
              ],
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "group_status",
            "required": false,
            "schema": {
              "enum": [
                "open",
                "closed",
                "ignored"
              ],
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "A freetext search that matches in crash, crash types, crash stack_traces and crash user",
            "in": "query",
            "name": "group_text_search",
            "required": false,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "allowEmptyValue": true,
            "description": "the OData-like $orderby argument",
            "in": "query",
            "name": "$orderby",
            "required": false,
            "schema": {
              "default": "last_occurrence desc",
              "enum": [
                "last_occurrence asc",
                "last_occurrence desc",
                "count asc",
                "count desc",
                "display_id asc",
                "display_id desc",
                "impacted_users asc",
                "impacted_users desc"
              ],
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Cassandra request continuation token. The token is used for pagination.",
            "in": "query",
            "name": "continuation_token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "continuation_token": {
                      "description": "Cassandra request continuation token. The token is used for pagination.",
                      "type": "string"
                    },
                    "crash_groups": {
                      "items": {
                        "properties": {
                          "annotation": {
                            "type": "string"
                          },
                          "app_version": {
                            "type": "string"
                          },
                          "build": {
                            "type": "string"
                          },
                          "count": {
                            "type": "integer"
                          },
                          "crash_group_id": {
                            "type": "string"
                          },
                          "crash_reason": {
                            "type": "string"
                          },
                          "display_id": {
                            "type": "string"
                          },
                          "exception": {
                            "type": "string"
                          },
                          "fatal": {
                            "description": "Crash or handled exception",
                            "type": "boolean"
                          },
                          "first_occurrence": {
                            "format": "date-time",
                            "type": "string"
                          },
                          "impacted_users": {
                            "type": "integer"
                          },
                          "last_occurrence": {
                            "format": "date-time",
                            "type": "string"
                          },
                          "new_crash_group_id": {
                            "type": "string"
                          },
                          "reason_frame": {
                            "description": "frame belonging to the reason of the crash",
                            "properties": {
                              "app_code": {
                                "description": "this line isn't from any framework",
                                "type": "boolean"
                              },
                              "class_method": {
                                "description": "is a class method",
                                "type": "boolean"
                              },
                              "class_name": {
                                "description": "name of the class",
                                "type": "string"
                              },
                              "code_formatted": {
                                "description": "Formatted frame string",
                                "type": "string"
                              },
                              "code_raw": {
                                "description": "Unformatted Frame string",
                                "type": "string"
                              },
                              "exception_type": {
                                "description": "Exception type.",
                                "type": "string"
                              },
                              "file": {
                                "description": "name of the file",
                                "type": "string"
                              },
                              "framework_name": {
                                "description": "Name of the framework",
                                "type": "string"
                              },
                              "language": {
                                "description": "programming language of the frame",
                                "enum": [
                                  "JavaScript",
                                  "CSharp",
                                  "Objective-C",
                                  "Objective-Cpp",
                                  "Cpp",
                                  "C",
                                  "Swift",
                                  "Java",
                                  "Unknown"
                                ],
                                "type": "string"
                              },
                              "line": {
                                "description": "line number",
                                "type": "integer"
                              },
                              "method": {
                                "description": "name of the method",
                                "type": "string"
                              },
                              "method_params": {
                                "description": "parameters of the frames method",
                                "type": "string"
                              },
                              "os_exception_type": {
                                "description": "OS exception type. (aka. SIGNAL)",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "status": {
                            "enum": [
                              "open",
                              "closed",
                              "ignored"
                            ],
                            "type": "string"
                          }
                        },
                        "required": [
                          "crash_group_id",
                          "new_crash_group_id",
                          "display_id",
                          "app_version",
                          "build",
                          "status",
                          "count",
                          "first_occurrence",
                          "last_occurrence",
                          "crash_reason",
                          "fatal",
                          "annotation"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "limited_result_set": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "limited_result_set",
                    "crash_groups"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "crash"
        ],
        "deprecated": true,
        "description": "Gets a list of crash groups and whether the list contains all available groups.",
        "operationId": "crashGroups_list"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}": {
      "get": {
        "parameters": [
          {
            "description": "id of a specific group",
            "in": "path",
            "name": "crash_group_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "annotation": {
                      "type": "string"
                    },
                    "app_version": {
                      "type": "string"
                    },
                    "build": {
                      "type": "string"
                    },
                    "count": {
                      "type": "integer"
                    },
                    "crash_group_id": {
                      "type": "string"
                    },
                    "crash_reason": {
                      "type": "string"
                    },
                    "display_id": {
                      "type": "string"
                    },
                    "exception": {
                      "type": "string"
                    },
                    "fatal": {
                      "description": "Crash or handled exception",
                      "type": "boolean"
                    },
                    "first_occurrence": {
                      "format": "date-time",
                      "type": "string"
                    },
                    "impacted_users": {
                      "type": "integer"
                    },
                    "last_occurrence": {
                      "format": "date-time",
                      "type": "string"
                    },
                    "new_crash_group_id": {
                      "type": "string"
                    },
                    "reason_frame": {
                      "description": "frame belonging to the reason of the crash",
                      "properties": {
                        "app_code": {
                          "description": "this line isn't from any framework",
                          "type": "boolean"
                        },
                        "class_method": {
                          "description": "is a class method",
                          "type": "boolean"
                        },
                        "class_name": {
                          "description": "name of the class",
                          "type": "string"
                        },
                        "code_formatted": {
                          "description": "Formatted frame string",
                          "type": "string"
                        },
                        "code_raw": {
                          "description": "Unformatted Frame string",
                          "type": "string"
                        },
                        "exception_type": {
                          "description": "Exception type.",
                          "type": "string"
                        },
                        "file": {
                          "description": "name of the file",
                          "type": "string"
                        },
                        "framework_name": {
                          "description": "Name of the framework",
                          "type": "string"
                        },
                        "language": {
                          "description": "programming language of the frame",
                          "enum": [
                            "JavaScript",
                            "CSharp",
                            "Objective-C",
                            "Objective-Cpp",
                            "Cpp",
                            "C",
                            "Swift",
                            "Java",
                            "Unknown"
                          ],
                          "type": "string"
                        },
                        "line": {
                          "description": "line number",
                          "type": "integer"
                        },
                        "method": {
                          "description": "name of the method",
                          "type": "string"
                        },
                        "method_params": {
                          "description": "parameters of the frames method",
                          "type": "string"
                        },
                        "os_exception_type": {
                          "description": "OS exception type. (aka. SIGNAL)",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "status": {
                      "enum": [
                        "open",
                        "closed",
                        "ignored"
                      ],
                      "type": "string"
                    }
                  },
                  "required": [
                    "crash_group_id",
                    "new_crash_group_id",
                    "display_id",
                    "app_version",
                    "build",
                    "status",
                    "count",
                    "first_occurrence",
                    "last_occurrence",
                    "crash_reason",
                    "fatal",
                    "annotation"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "crash"
        ],
        "deprecated": true,
        "description": "Gets a specific group.",
        "operationId": "crashGroups_get"
      },
      "patch": {
        "parameters": [
          {
            "description": "id of a specific group",
            "in": "path",
            "name": "crash_group_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "annotation": {
                      "type": "string"
                    },
                    "app_version": {
                      "type": "string"
                    },
                    "build": {
                      "type": "string"
                    },
                    "count": {
                      "type": "integer"
                    },
                    "crash_group_id": {
                      "type": "string"
                    },
                    "crash_reason": {
                      "type": "string"
                    },
                    "display_id": {
                      "type": "string"
                    },
                    "exception": {
                      "type": "string"
                    },
                    "fatal": {
                      "description": "Crash or handled exception",
                      "type": "boolean"
                    },
                    "first_occurrence": {
                      "format": "date-time",
                      "type": "string"
                    },
                    "impacted_users": {
                      "type": "integer"
                    },
                    "last_occurrence": {
                      "format": "date-time",
                      "type": "string"
                    },
                    "new_crash_group_id": {
                      "type": "string"
                    },
                    "reason_frame": {
                      "description": "frame belonging to the reason of the crash",
                      "properties": {
                        "app_code": {
                          "description": "this line isn't from any framework",
                          "type": "boolean"
                        },
                        "class_method": {
                          "description": "is a class method",
                          "type": "boolean"
                        },
                        "class_name": {
                          "description": "name of the class",
                          "type": "string"
                        },
                        "code_formatted": {
                          "description": "Formatted frame string",
                          "type": "string"
                        },
                        "code_raw": {
                          "description": "Unformatted Frame string",
                          "type": "string"
                        },
                        "exception_type": {
                          "description": "Exception type.",
                          "type": "string"
                        },
                        "file": {
                          "description": "name of the file",
                          "type": "string"
                        },
                        "framework_name": {
                          "description": "Name of the framework",
                          "type": "string"
                        },
                        "language": {
                          "description": "programming language of the frame",
                          "enum": [
                            "JavaScript",
                            "CSharp",
                            "Objective-C",
                            "Objective-Cpp",
                            "Cpp",
                            "C",
                            "Swift",
                            "Java",
                            "Unknown"
                          ],
                          "type": "string"
                        },
                        "line": {
                          "description": "line number",
                          "type": "integer"
                        },
                        "method": {
                          "description": "name of the method",
                          "type": "string"
                        },
                        "method_params": {
                          "description": "parameters of the frames method",
                          "type": "string"
                        },
                        "os_exception_type": {
                          "description": "OS exception type. (aka. SIGNAL)",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "status": {
                      "enum": [
                        "open",
                        "closed",
                        "ignored"
                      ],
                      "type": "string"
                    }
                  },
                  "required": [
                    "crash_group_id",
                    "new_crash_group_id",
                    "display_id",
                    "app_version",
                    "build",
                    "status",
                    "count",
                    "first_occurrence",
                    "last_occurrence",
                    "crash_reason",
                    "fatal",
                    "annotation"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "crash"
        ],
        "deprecated": true,
        "description": "Updates a group.",
        "operationId": "crashGroups_update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "annotation": {
                    "type": "string"
                  },
                  "status": {
                    "enum": [
                      "open",
                      "closed",
                      "ignored"
                    ]
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Group change object. All fields are optional and only provided fields will get updated.",
          "required": true
        }
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes": {
      "get": {
        "parameters": [
          {
            "description": "id of a specific group",
            "in": "path",
            "name": "crash_group_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "true if the crash should include the raw crash report. Default is false",
            "in": "query",
            "name": "include_report",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "true if the crash should include the custom log report. Default is false",
            "in": "query",
            "name": "include_log",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "",
            "in": "query",
            "name": "date_from",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "",
            "in": "query",
            "name": "date_to",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "version",
            "in": "query",
            "name": "app_version",
            "required": false,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "error_type",
            "required": false,
            "schema": {
              "enum": [
                "CrashingErrors",
                "HandledErrors"
              ],
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Crash"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "crash"
        ],
        "deprecated": true,
        "description": "Gets all crashes of a group.",
        "operationId": "crashes_list"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}": {
      "delete": {
        "parameters": [
          {
            "description": "id of a specific group",
            "in": "path",
            "name": "crash_group_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "id of a specific crash",
            "in": "path",
            "name": "crash_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "true in that case if the method should skip update counts",
            "in": "query",
            "name": "retention_delete",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "app_id": {
                      "type": "string"
                    },
                    "attachments_deleted": {
                      "type": "integer"
                    },
                    "blobs_failed": {
                      "type": "integer"
                    },
                    "blobs_succeeded": {
                      "type": "integer"
                    },
                    "crash_group_id": {
                      "type": "string"
                    },
                    "crash_id": {
                      "type": "string"
                    },
                    "crashes_deleted": {
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "crash"
        ],
        "deprecated": true,
        "description": "Delete a specific crash and related attachments and blobs for an app.",
        "operationId": "crashes_delete"
      },
      "get": {
        "parameters": [
          {
            "description": "id of a specific group",
            "in": "path",
            "name": "crash_group_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "id of a specific crash",
            "in": "path",
            "name": "crash_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "true if the crash should include the raw crash report. Default is false",
            "in": "query",
            "name": "include_report",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "true if the crash should include the custom log report. Default is false",
            "in": "query",
            "name": "include_log",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "true if the crash should include in depth crash details",
            "in": "query",
            "name": "include_details",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "true if the crash should include the stacktrace information",
            "in": "query",
            "name": "include_stacktrace",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "true if the stacktrace should be only the relevant thread / exception. Default is false",
            "in": "query",
            "name": "grouping_only",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Crash"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "crash"
        ],
        "deprecated": true,
        "description": "Gets a specific crash for an app.",
        "operationId": "crashes_get"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/native": {
      "get": {
        "parameters": [
          {
            "description": "id of a specific group",
            "in": "path",
            "name": "crash_group_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "id of a specific crash",
            "in": "path",
            "name": "crash_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "crash"
        ],
        "deprecated": true,
        "description": "Gets the native log of a specific crash.",
        "operationId": "crashes_getNativeCrash"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/native/download": {
      "get": {
        "parameters": [
          {
            "description": "id of a specific group",
            "in": "path",
            "name": "crash_group_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "id of a specific crash",
            "in": "path",
            "name": "crash_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "crash"
        ],
        "deprecated": true,
        "description": "Gets the native log of a specific crash as a text attachment.",
        "operationId": "crashes_getNativeCrashDownload"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/raw/location": {
      "get": {
        "parameters": [
          {
            "description": "id of a specific group",
            "in": "path",
            "name": "crash_group_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "id of a specific crash",
            "in": "path",
            "name": "crash_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Location for downloading crash raw",
                  "properties": {
                    "uri": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "uri"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "crash"
        ],
        "deprecated": true,
        "description": "Gets the URI location to download json of a specific crash.",
        "operationId": "crashes_getRawCrashLocation"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/stacktrace": {
      "get": {
        "parameters": [
          {
            "description": "id of a specific group",
            "in": "path",
            "name": "crash_group_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "id of a specific crash",
            "in": "path",
            "name": "crash_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "true if the stacktrace should be only the relevant thread / exception. Default is false",
            "in": "query",
            "name": "grouping_only",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Stacktrace"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "crash"
        ],
        "deprecated": true,
        "description": "Gets a stacktrace for a specific crash.",
        "operationId": "crashes_getStacktrace"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/stacktrace": {
      "get": {
        "parameters": [
          {
            "description": "id of a specific group",
            "in": "path",
            "name": "crash_group_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "true if the stacktrace should be only the relevant thread / exception. Default is false",
            "in": "query",
            "name": "grouping_only",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Stacktrace"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "crash"
        ],
        "deprecated": true,
        "description": "Gets a stacktrace for a specific crash.",
        "operationId": "crashGroups_getStacktrace"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/attachments": {
      "get": {
        "parameters": [
          {
            "description": "id of a specific crash",
            "in": "path",
            "name": "crash_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "app_id": {
                        "type": "string"
                      },
                      "attachment_id": {
                        "type": "string"
                      },
                      "blob_location": {
                        "type": "string"
                      },
                      "content_type": {
                        "type": "string"
                      },
                      "crash_id": {
                        "type": "string"
                      },
                      "created_time": {
                        "format": "date-time",
                        "type": "string"
                      },
                      "file_name": {
                        "type": "string"
                      },
                      "size": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "app_id",
                      "attachment_id",
                      "crash_id",
                      "blob_location",
                      "content_type",
                      "file_name",
                      "created_time",
                      "size"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "crash"
        ],
        "deprecated": true,
        "description": "Gets all attachments for a specific crash.",
        "operationId": "crashes_listAttachments"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/attachments/{attachment_id}/location": {
      "get": {
        "parameters": [
          {
            "description": "id of a specific crash",
            "in": "path",
            "name": "crash_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "attachment id",
            "in": "path",
            "name": "attachment_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Location for downloading crash attachment",
                  "properties": {
                    "uri": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "uri"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "crash"
        ],
        "deprecated": true,
        "description": "Gets the URI location to download crash attachment.",
        "operationId": "crashes_getCrashAttachmentLocation"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/attachments/{attachment_id}/text": {
      "get": {
        "parameters": [
          {
            "description": "id of a specific crash",
            "in": "path",
            "name": "crash_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "attachment id",
            "in": "path",
            "name": "attachment_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "crash"
        ],
        "deprecated": true,
        "description": "Gets content of the text attachment.",
        "operationId": "crashes_getCrashTextAttachmentContent"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/session_logs": {
      "get": {
        "parameters": [
          {
            "description": "The id of the a crash",
            "in": "path",
            "name": "crash_id",
            "required": true,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Date of data requested",
            "in": "query",
            "name": "date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "exceeded_max_limit": {
                      "description": "indicates if the number of available logs are more than the max allowed return limit(100).",
                      "type": "boolean"
                    },
                    "last_received_log_timestamp": {
                      "description": "the timestamp of the last log received. This value can be used as the start time parameter in the consecutive API call.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "logs": {
                      "description": "the list of logs",
                      "items": {
                        "description": "Generic log.",
                        "properties": {
                          "account_id": {
                            "description": "Account ID of the authenticated user.\n",
                            "type": "string"
                          },
                          "auth_provider": {
                            "description": "Auth service provider.\n",
                            "type": "string"
                          },
                          "device": {
                            "description": "Device characteristics.",
                            "properties": {
                              "app_build": {
                                "description": "The app's build number, e.g. 42.\n",
                                "type": "string"
                              },
                              "app_namespace": {
                                "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                                "type": "string"
                              },
                              "app_version": {
                                "description": "Application version name, e.g. 1.1.0\n",
                                "type": "string"
                              },
                              "carrier_code": {
                                "description": "Carrier country code (for mobile devices).\n",
                                "type": "string"
                              },
                              "carrier_country": {
                                "description": "Carrier country.\n",
                                "type": "string"
                              },
                              "carrier_name": {
                                "description": "Carrier name (for mobile devices).\n",
                                "type": "string"
                              },
                              "live_update_deployment_key": {
                                "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                                "type": "string"
                              },
                              "live_update_package_hash": {
                                "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                                "type": "string"
                              },
                              "live_update_release_label": {
                                "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                                "type": "string"
                              },
                              "locale": {
                                "description": "Language code (example: en_US).\n",
                                "type": "string"
                              },
                              "model": {
                                "description": "Device model (example: iPad2,3).\n",
                                "type": "string"
                              },
                              "oem_name": {
                                "description": "Device manufacturer (example: HTC).\n",
                                "type": "string"
                              },
                              "os_api_level": {
                                "description": "API level when applicable like in Android (example: 15).\n",
                                "type": "integer"
                              },
                              "os_build": {
                                "description": "OS build code (example: LMY47X).\n",
                                "type": "string"
                              },
                              "os_name": {
                                "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                                "type": "string"
                              },
                              "os_version": {
                                "description": "OS version (example: 9.3.0).\n",
                                "type": "string"
                              },
                              "screen_size": {
                                "description": "Screen size of the device in pixels (example: 640x480).\n",
                                "type": "string"
                              },
                              "sdk_name": {
                                "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                                "type": "string"
                              },
                              "sdk_version": {
                                "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                                "type": "string"
                              },
                              "time_zone_offset": {
                                "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                                "maximum": 840,
                                "minimum": -840,
                                "type": "integer"
                              },
                              "wrapper_runtime_version": {
                                "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                                "type": "string"
                              },
                              "wrapper_sdk_name": {
                                "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                                "type": "string"
                              },
                              "wrapper_sdk_version": {
                                "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                                "type": "string"
                              }
                            },
                            "required": [
                              "sdk_name",
                              "sdk_version",
                              "os_name",
                              "os_version",
                              "locale",
                              "time_zone_offset",
                              "app_version",
                              "app_build"
                            ],
                            "type": "object"
                          },
                          "event_id": {
                            "description": "Event ID.\n",
                            "type": "string"
                          },
                          "event_name": {
                            "description": "Event name.\n",
                            "type": "string"
                          },
                          "install_id": {
                            "description": "Install ID.\n",
                            "format": "uuid",
                            "type": "string"
                          },
                          "message_id": {
                            "description": "Message ID.\n",
                            "type": "string"
                          },
                          "properties": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "event specific properties.\n",
                            "type": "object"
                          },
                          "session_id": {
                            "description": "Session ID.\n",
                            "format": "uuid",
                            "type": "string"
                          },
                          "timestamp": {
                            "description": "Log creation timestamp.\n",
                            "format": "date-time",
                            "type": "string"
                          },
                          "type": {
                            "description": "Log type.\n",
                            "enum": [
                              "event",
                              "page",
                              "start_session",
                              "error",
                              "push_installation",
                              "start_service",
                              "custom_properties"
                            ],
                            "type": "string"
                          }
                        },
                        "required": [
                          "type",
                          "timestamp",
                          "install_id",
                          "device"
                        ],
                        "type": "object"
                      },
                      "minItems": 0,
                      "type": "array"
                    }
                  },
                  "required": [
                    "logs"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Session logs of specific crash"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "analytics"
        ],
        "description": "Get session logs by crash ID",
        "operationId": "Crashes_ListSessionLogs"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/crashes_info": {
      "get": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "features": {
                      "properties": {
                        "crash_download_raw": {
                          "description": "App supports download of raw crashes",
                          "type": "boolean"
                        },
                        "crashgroup_analytics_crashfreeusers": {
                          "description": "App supports the 'crash free user' metric",
                          "type": "boolean"
                        },
                        "crashgroup_analytics_impactedusers": {
                          "description": "App supports the 'impacted users' metric",
                          "type": "boolean"
                        },
                        "crashgroup_modify_annotation": {
                          "description": "App supports modification of crashgroup annotation",
                          "type": "boolean"
                        },
                        "crashgroup_modify_status": {
                          "description": "App supports modification of crashgroup status",
                          "type": "boolean"
                        },
                        "search": {
                          "description": "App supports search API",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "has_crashes": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "has_crashes",
                    "features"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "crash"
        ],
        "deprecated": true,
        "description": "Gets whether the application has any crashes.",
        "operationId": "crashes_getAppCrashesInfo"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/deployments": {
      "get": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "key": {
                        "type": "string"
                      },
                      "latest_release": {
                        "allOf": [
                          {
                            "properties": {
                              "description": {
                                "type": "string"
                              },
                              "is_disabled": {
                                "type": "boolean"
                              },
                              "is_mandatory": {
                                "type": "boolean"
                              },
                              "rollout": {
                                "maximum": 100,
                                "minimum": 1,
                                "type": "integer"
                              },
                              "target_binary_range": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          {
                            "properties": {
                              "blob_url": {
                                "type": "string"
                              },
                              "diff_package_map": {
                                "additionalProperties": {
                                  "properties": {
                                    "size": {
                                      "type": "number"
                                    },
                                    "url": {
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "size",
                                    "url"
                                  ],
                                  "type": "object"
                                },
                                "type": "object"
                              },
                              "label": {
                                "type": "string"
                              },
                              "original_deployment": {
                                "description": "Set on 'Promote'",
                                "type": "string"
                              },
                              "original_label": {
                                "description": "Set on 'Promote' and 'Rollback'",
                                "type": "string"
                              },
                              "package_hash": {
                                "type": "string"
                              },
                              "release_method": {
                                "description": "The release method is unknown if unspecified",
                                "enum": [
                                  "Upload",
                                  "Promote",
                                  "Rollback"
                                ],
                                "type": "string"
                              },
                              "released_by": {
                                "type": "string"
                              },
                              "size": {
                                "type": "number"
                              },
                              "upload_time": {
                                "type": "integer"
                              }
                            },
                            "type": "object"
                          }
                        ]
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "codepush"
        ],
        "description": "Gets a list of CodePush deployments for the given app",
        "operationId": "codePushDeployments_list"
      },
      "post": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "latest_release": {
                      "allOf": [
                        {
                          "properties": {
                            "description": {
                              "type": "string"
                            },
                            "is_disabled": {
                              "type": "boolean"
                            },
                            "is_mandatory": {
                              "type": "boolean"
                            },
                            "rollout": {
                              "maximum": 100,
                              "minimum": 1,
                              "type": "integer"
                            },
                            "target_binary_range": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        {
                          "properties": {
                            "blob_url": {
                              "type": "string"
                            },
                            "diff_package_map": {
                              "additionalProperties": {
                                "properties": {
                                  "size": {
                                    "type": "number"
                                  },
                                  "url": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "size",
                                  "url"
                                ],
                                "type": "object"
                              },
                              "type": "object"
                            },
                            "label": {
                              "type": "string"
                            },
                            "original_deployment": {
                              "description": "Set on 'Promote'",
                              "type": "string"
                            },
                            "original_label": {
                              "description": "Set on 'Promote' and 'Rollback'",
                              "type": "string"
                            },
                            "package_hash": {
                              "type": "string"
                            },
                            "release_method": {
                              "description": "The release method is unknown if unspecified",
                              "enum": [
                                "Upload",
                                "Promote",
                                "Rollback"
                              ],
                              "type": "string"
                            },
                            "released_by": {
                              "type": "string"
                            },
                            "size": {
                              "type": "number"
                            },
                            "upload_time": {
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        }
                      ]
                    },
                    "name": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "name"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "codepush"
        ],
        "description": "Creates a CodePush Deployment for the given app",
        "operationId": "codePushDeployments_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "key": {
                    "type": "string"
                  },
                  "latest_release": {
                    "allOf": [
                      {
                        "properties": {
                          "description": {
                            "type": "string"
                          },
                          "is_disabled": {
                            "type": "boolean"
                          },
                          "is_mandatory": {
                            "type": "boolean"
                          },
                          "rollout": {
                            "maximum": 100,
                            "minimum": 1,
                            "type": "integer"
                          },
                          "target_binary_range": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "properties": {
                          "blob_url": {
                            "type": "string"
                          },
                          "diff_package_map": {
                            "additionalProperties": {
                              "properties": {
                                "size": {
                                  "type": "number"
                                },
                                "url": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "size",
                                "url"
                              ],
                              "type": "object"
                            },
                            "type": "object"
                          },
                          "label": {
                            "type": "string"
                          },
                          "original_deployment": {
                            "description": "Set on 'Promote'",
                            "type": "string"
                          },
                          "original_label": {
                            "description": "Set on 'Promote' and 'Rollback'",
                            "type": "string"
                          },
                          "package_hash": {
                            "type": "string"
                          },
                          "release_method": {
                            "description": "The release method is unknown if unspecified",
                            "enum": [
                              "Upload",
                              "Promote",
                              "Rollback"
                            ],
                            "type": "string"
                          },
                          "released_by": {
                            "type": "string"
                          },
                          "size": {
                            "type": "number"
                          },
                          "upload_time": {
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              }
            }
          },
          "description": "Deployment to be created",
          "required": true
        }
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}": {
      "delete": {
        "parameters": [
          {
            "description": "deployment name",
            "in": "path",
            "name": "deployment_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "codepush"
        ],
        "description": "Deletes a CodePush Deployment for the given app",
        "operationId": "codePushDeployments_delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        }
      },
      "get": {
        "parameters": [
          {
            "description": "deployment name",
            "in": "path",
            "name": "deployment_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "latest_release": {
                      "allOf": [
                        {
                          "properties": {
                            "description": {
                              "type": "string"
                            },
                            "is_disabled": {
                              "type": "boolean"
                            },
                            "is_mandatory": {
                              "type": "boolean"
                            },
                            "rollout": {
                              "maximum": 100,
                              "minimum": 1,
                              "type": "integer"
                            },
                            "target_binary_range": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        {
                          "properties": {
                            "blob_url": {
                              "type": "string"
                            },
                            "diff_package_map": {
                              "additionalProperties": {
                                "properties": {
                                  "size": {
                                    "type": "number"
                                  },
                                  "url": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "size",
                                  "url"
                                ],
                                "type": "object"
                              },
                              "type": "object"
                            },
                            "label": {
                              "type": "string"
                            },
                            "original_deployment": {
                              "description": "Set on 'Promote'",
                              "type": "string"
                            },
                            "original_label": {
                              "description": "Set on 'Promote' and 'Rollback'",
                              "type": "string"
                            },
                            "package_hash": {
                              "type": "string"
                            },
                            "release_method": {
                              "description": "The release method is unknown if unspecified",
                              "enum": [
                                "Upload",
                                "Promote",
                                "Rollback"
                              ],
                              "type": "string"
                            },
                            "released_by": {
                              "type": "string"
                            },
                            "size": {
                              "type": "number"
                            },
                            "upload_time": {
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        }
                      ]
                    },
                    "name": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "name"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "codepush"
        ],
        "description": "Gets a CodePush Deployment for the given app",
        "operationId": "codePushDeployments_get"
      },
      "patch": {
        "parameters": [
          {
            "description": "deployment name",
            "in": "path",
            "name": "deployment_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "codepush"
        ],
        "description": "Modifies a CodePush Deployment for the given app",
        "operationId": "codePushDeployments_update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "maxLength": 1000,
                    "minLength": 1,
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              }
            }
          },
          "description": "Deployment modification. All fields are optional and only provided fields will get updated.",
          "required": true
        }
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/metrics": {
      "get": {
        "parameters": [
          {
            "description": "deployment name",
            "in": "path",
            "name": "deployment_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "active": {
                        "type": "integer"
                      },
                      "downloaded": {
                        "type": "integer"
                      },
                      "failed": {
                        "type": "integer"
                      },
                      "installed": {
                        "type": "integer"
                      },
                      "label": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "label",
                      "active"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "codepush"
        ],
        "description": "Gets all releases metrics for specified Deployment",
        "operationId": "codePushDeploymentMetrics_get"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/promote_release/{promote_deployment_name}": {
      "post": {
        "parameters": [
          {
            "description": "deployment name",
            "in": "path",
            "name": "deployment_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "deployment name",
            "in": "path",
            "name": "promote_deployment_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "properties": {
                        "description": {
                          "type": "string"
                        },
                        "is_disabled": {
                          "type": "boolean"
                        },
                        "is_mandatory": {
                          "type": "boolean"
                        },
                        "rollout": {
                          "maximum": 100,
                          "minimum": 1,
                          "type": "integer"
                        },
                        "target_binary_range": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "blob_url": {
                          "type": "string"
                        },
                        "diff_package_map": {
                          "additionalProperties": {
                            "properties": {
                              "size": {
                                "type": "number"
                              },
                              "url": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "size",
                              "url"
                            ],
                            "type": "object"
                          },
                          "type": "object"
                        },
                        "label": {
                          "type": "string"
                        },
                        "original_deployment": {
                          "description": "Set on 'Promote'",
                          "type": "string"
                        },
                        "original_label": {
                          "description": "Set on 'Promote' and 'Rollback'",
                          "type": "string"
                        },
                        "package_hash": {
                          "type": "string"
                        },
                        "release_method": {
                          "description": "The release method is unknown if unspecified",
                          "enum": [
                            "Upload",
                            "Promote",
                            "Rollback"
                          ],
                          "type": "string"
                        },
                        "released_by": {
                          "type": "string"
                        },
                        "size": {
                          "type": "number"
                        },
                        "upload_time": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Promote a new release to the target deployment, return this new release."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "codepush"
        ],
        "description": "Promote one release (default latest one) from one deployment to another",
        "operationId": "codePushDeployments_promote",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "properties": {
                      "description": {
                        "type": "string"
                      },
                      "is_disabled": {
                        "type": "boolean"
                      },
                      "is_mandatory": {
                        "type": "boolean"
                      },
                      "rollout": {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer"
                      },
                      "target_binary_range": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  {
                    "properties": {
                      "label": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                ]
              }
            }
          },
          "description": "Release to be promoted, only needs to provide optional fields, description, label, disabled, mandatory, rollout, targetBinaryVersion"
        }
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases": {
      "delete": {
        "parameters": [
          {
            "description": "deployment name",
            "in": "path",
            "name": "deployment_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "codepush"
        ],
        "description": "Clears a Deployment of releases",
        "operationId": "codePushDeploymentReleases_delete"
      },
      "get": {
        "parameters": [
          {
            "description": "deployment name",
            "in": "path",
            "name": "deployment_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "allOf": [
                      {
                        "properties": {
                          "description": {
                            "type": "string"
                          },
                          "is_disabled": {
                            "type": "boolean"
                          },
                          "is_mandatory": {
                            "type": "boolean"
                          },
                          "rollout": {
                            "maximum": 100,
                            "minimum": 1,
                            "type": "integer"
                          },
                          "target_binary_range": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "properties": {
                          "blob_url": {
                            "type": "string"
                          },
                          "diff_package_map": {
                            "additionalProperties": {
                              "properties": {
                                "size": {
                                  "type": "number"
                                },
                                "url": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "size",
                                "url"
                              ],
                              "type": "object"
                            },
                            "type": "object"
                          },
                          "label": {
                            "type": "string"
                          },
                          "original_deployment": {
                            "description": "Set on 'Promote'",
                            "type": "string"
                          },
                          "original_label": {
                            "description": "Set on 'Promote' and 'Rollback'",
                            "type": "string"
                          },
                          "package_hash": {
                            "type": "string"
                          },
                          "release_method": {
                            "description": "The release method is unknown if unspecified",
                            "enum": [
                              "Upload",
                              "Promote",
                              "Rollback"
                            ],
                            "type": "string"
                          },
                          "released_by": {
                            "type": "string"
                          },
                          "size": {
                            "type": "number"
                          },
                          "upload_time": {
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "codepush"
        ],
        "description": "Gets the history of releases on a Deployment",
        "operationId": "codePushDeploymentReleases_get"
      },
      "post": {
        "parameters": [
          {
            "description": "deployment name",
            "in": "path",
            "name": "deployment_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "properties": {
                        "description": {
                          "type": "string"
                        },
                        "is_disabled": {
                          "type": "boolean"
                        },
                        "is_mandatory": {
                          "type": "boolean"
                        },
                        "rollout": {
                          "maximum": 100,
                          "minimum": 1,
                          "type": "integer"
                        },
                        "target_binary_range": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "blob_url": {
                          "type": "string"
                        },
                        "diff_package_map": {
                          "additionalProperties": {
                            "properties": {
                              "size": {
                                "type": "number"
                              },
                              "url": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "size",
                              "url"
                            ],
                            "type": "object"
                          },
                          "type": "object"
                        },
                        "label": {
                          "type": "string"
                        },
                        "original_deployment": {
                          "description": "Set on 'Promote'",
                          "type": "string"
                        },
                        "original_label": {
                          "description": "Set on 'Promote' and 'Rollback'",
                          "type": "string"
                        },
                        "package_hash": {
                          "type": "string"
                        },
                        "release_method": {
                          "description": "The release method is unknown if unspecified",
                          "enum": [
                            "Upload",
                            "Promote",
                            "Rollback"
                          ],
                          "type": "string"
                        },
                        "released_by": {
                          "type": "string"
                        },
                        "size": {
                          "type": "number"
                        },
                        "upload_time": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "codepush"
        ],
        "description": "Create a new CodePush release for the specified deployment",
        "operationId": "codePushDeploymentReleases_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "deployment_name": {
                    "description": "This specifies which deployment you want to release the update to. Default is Staging.",
                    "type": "string"
                  },
                  "description": {
                    "description": "This provides an optional \"change log\" for the deployment.",
                    "maximum": 10000,
                    "type": "string"
                  },
                  "disabled": {
                    "description": "This specifies whether an update should be downloadable by end users or not.",
                    "type": "boolean"
                  },
                  "mandatory": {
                    "description": "This specifies whether the update should be considered mandatory or not (e.g. it includes a critical security fix).",
                    "type": "boolean"
                  },
                  "no_duplicate_release_error": {
                    "description": "This specifies that if the update is identical to the latest release on the deployment, the CLI should generate a warning instead of an error.",
                    "type": "boolean"
                  },
                  "release_upload": {
                    "description": "The upload metadata from the release initialization step.",
                    "properties": {
                      "id": {
                        "description": "The ID for the newly created upload. It is going to be required later in the process.",
                        "format": "uuid",
                        "type": "string"
                      },
                      "token": {
                        "description": "The URL encoded token used for upload permissions.",
                        "type": "string"
                      },
                      "upload_domain": {
                        "description": "The URL domain used to upload the release.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "upload_domain",
                      "token"
                    ],
                    "type": "object"
                  },
                  "rollout": {
                    "description": "This specifies the percentage of users (as an integer between 1 and 100) that should be eligible to receive this update.",
                    "type": "integer"
                  },
                  "target_binary_version": {
                    "description": "the binary version of the application",
                    "type": "string"
                  }
                },
                "required": [
                  "release_upload",
                  "target_binary_version"
                ],
                "type": "object"
              }
            }
          },
          "description": "The necessary information required to download the bundle and being the release process.",
          "required": true
        }
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases/{release_label}": {
      "patch": {
        "parameters": [
          {
            "description": "deployment name",
            "in": "path",
            "name": "deployment_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "release label",
            "in": "path",
            "name": "release_label",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "properties": {
                        "description": {
                          "type": "string"
                        },
                        "is_disabled": {
                          "type": "boolean"
                        },
                        "is_mandatory": {
                          "type": "boolean"
                        },
                        "rollout": {
                          "maximum": 100,
                          "minimum": 1,
                          "type": "integer"
                        },
                        "target_binary_range": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "blob_url": {
                          "type": "string"
                        },
                        "diff_package_map": {
                          "additionalProperties": {
                            "properties": {
                              "size": {
                                "type": "number"
                              },
                              "url": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "size",
                              "url"
                            ],
                            "type": "object"
                          },
                          "type": "object"
                        },
                        "label": {
                          "type": "string"
                        },
                        "original_deployment": {
                          "description": "Set on 'Promote'",
                          "type": "string"
                        },
                        "original_label": {
                          "description": "Set on 'Promote' and 'Rollback'",
                          "type": "string"
                        },
                        "package_hash": {
                          "type": "string"
                        },
                        "release_method": {
                          "description": "The release method is unknown if unspecified",
                          "enum": [
                            "Upload",
                            "Promote",
                            "Rollback"
                          ],
                          "type": "string"
                        },
                        "released_by": {
                          "type": "string"
                        },
                        "size": {
                          "type": "number"
                        },
                        "upload_time": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Success"
          },
          "204": {
            "description": "Nothing to patch"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "codepush"
        ],
        "description": "Modifies a CodePush release metadata under the given Deployment",
        "operationId": "deploymentReleases_update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "properties": {
                      "description": {
                        "type": "string"
                      },
                      "is_disabled": {
                        "type": "boolean"
                      },
                      "is_mandatory": {
                        "type": "boolean"
                      },
                      "rollout": {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer"
                      },
                      "target_binary_range": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                ]
              }
            }
          },
          "description": "Release modification. All fields are optional and only provided fields will get updated.",
          "required": true
        }
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/rollback_release": {
      "post": {
        "parameters": [
          {
            "description": "deployment name",
            "in": "path",
            "name": "deployment_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "properties": {
                        "description": {
                          "type": "string"
                        },
                        "is_disabled": {
                          "type": "boolean"
                        },
                        "is_mandatory": {
                          "type": "boolean"
                        },
                        "rollout": {
                          "maximum": 100,
                          "minimum": 1,
                          "type": "integer"
                        },
                        "target_binary_range": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "blob_url": {
                          "type": "string"
                        },
                        "diff_package_map": {
                          "additionalProperties": {
                            "properties": {
                              "size": {
                                "type": "number"
                              },
                              "url": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "size",
                              "url"
                            ],
                            "type": "object"
                          },
                          "type": "object"
                        },
                        "label": {
                          "type": "string"
                        },
                        "original_deployment": {
                          "description": "Set on 'Promote'",
                          "type": "string"
                        },
                        "original_label": {
                          "description": "Set on 'Promote' and 'Rollback'",
                          "type": "string"
                        },
                        "package_hash": {
                          "type": "string"
                        },
                        "release_method": {
                          "description": "The release method is unknown if unspecified",
                          "enum": [
                            "Upload",
                            "Promote",
                            "Rollback"
                          ],
                          "type": "string"
                        },
                        "released_by": {
                          "type": "string"
                        },
                        "size": {
                          "type": "number"
                        },
                        "upload_time": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "codepush"
        ],
        "description": "Rollback the latest or a specific release for an app deployment",
        "operationId": "codePushDeploymentRelease_rollback",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "label": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "The specific release label that you want to rollback to"
        }
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/uploads": {
      "post": {
        "parameters": [
          {
            "description": "deployment name",
            "in": "path",
            "name": "deployment_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "description": "The ID for the newly created upload. It is going to be required later in the process.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "token": {
                      "description": "The URL encoded token used for upload permissions.",
                      "type": "string"
                    },
                    "upload_domain": {
                      "description": "The URL domain used to upload the release.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "upload_domain",
                    "token"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "codepush"
        ],
        "description": "Create a new CodePush release upload for the specified deployment",
        "operationId": "codePushDeploymentUpload_create"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/device_configurations": {
      "get": {
        "parameters": [
          {
            "description": "The ID of the test run",
            "in": "query",
            "name": "app_upload_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "id": {
                        "description": "The unique id of the device configuration",
                        "format": "uuid",
                        "type": "string"
                      },
                      "image": {
                        "properties": {
                          "full": {
                            "type": "string"
                          },
                          "thumb": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "marketShare": {
                        "type": "number"
                      },
                      "model": {
                        "properties": {
                          "availabilityCount": {
                            "type": "number"
                          },
                          "cpu": {
                            "description": "CPU data for device",
                            "properties": {
                              "core": {
                                "type": "string"
                              },
                              "frequency": {
                                "type": "string"
                              },
                              "text": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "deviceFrame": {
                            "properties": {
                              "full": {
                                "properties": {
                                  "frameUrl": {
                                    "type": "string"
                                  },
                                  "height": {
                                    "type": "number"
                                  },
                                  "screen": {
                                    "items": {
                                      "type": "number"
                                    },
                                    "type": "array"
                                  },
                                  "width": {
                                    "type": "number"
                                  }
                                },
                                "type": "object"
                              },
                              "grid": {
                                "properties": {
                                  "frameUrl": {
                                    "type": "string"
                                  },
                                  "height": {
                                    "type": "number"
                                  },
                                  "screen": {
                                    "items": {
                                      "type": "number"
                                    },
                                    "type": "array"
                                  },
                                  "width": {
                                    "type": "number"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "dimensions": {
                            "description": "Physical device dimensions",
                            "properties": {
                              "depth": {
                                "type": "object"
                              },
                              "height": {
                                "type": "object"
                              },
                              "width": {
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "formFactor": {
                            "type": "string"
                          },
                          "manufacturer": {
                            "type": "string"
                          },
                          "memory": {
                            "description": "Memory data for device",
                            "properties": {
                              "formattedSize": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "model": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "platform": {
                            "type": "string"
                          },
                          "releaseDate": {
                            "type": "string"
                          },
                          "resolution": {
                            "description": "Device screen resolution",
                            "properties": {
                              "height": {
                                "type": "string"
                              },
                              "ppi": {
                                "type": "string"
                              },
                              "width": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "screenRotation": {
                            "type": "number"
                          },
                          "screenSize": {
                            "description": "Physical device screen dimensions",
                            "properties": {
                              "cm": {
                                "type": "string"
                              },
                              "in": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "name": {
                        "description": "The name of the device model and OS version",
                        "type": "string"
                      },
                      "os": {
                        "type": "string"
                      },
                      "osName": {
                        "type": "string"
                      },
                      "tier": {
                        "description": "The tier",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "test"
        ],
        "description": "Returns a list of available devices",
        "operationId": "test_getDeviceConfigurations"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/device_selection": {
      "post": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Short ID for a list of device IDs",
                  "properties": {
                    "shortId": {
                      "description": "Identifier of the device selection",
                      "type": "string"
                    }
                  },
                  "required": [
                    "shortId"
                  ],
                  "title": "Device Selection",
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Details of a failed operation",
                  "properties": {
                    "message": {
                      "description": "Human-readable message that describes the error",
                      "type": "string"
                    },
                    "status": {
                      "description": "Status of the operation",
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "message"
                  ],
                  "title": "Test Cloud Error Details",
                  "type": "object"
                }
              }
            },
            "description": "Invalid list of device IDs"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "test"
        ],
        "description": "Creates a short ID for a list of devices",
        "operationId": "test_createDeviceSelection",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "A list of device IDs",
                "properties": {
                  "devices": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "devices"
                ],
                "title": "Device List",
                "type": "object"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/devices/block_logs": {
      "put": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "format": "string",
                  "type": "string"
                }
              }
            },
            "description": "Operation successful"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "analytics"
        ],
        "description": "**Warning, this operation is not reversible.** \n\nA successful call to this API will permanently stop ingesting any logs received via SDK by app_id, and cannot be restored. We advise caution when using this API, it is designed to permanently disable an app_id.\n",
        "operationId": "App_BlockLogs"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/devices/block_logs/{install_id}": {
      "put": {
        "parameters": [
          {
            "description": "The id of the device",
            "in": "path",
            "name": "install_id",
            "required": true,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "format": "string",
                  "type": "string"
                }
              }
            },
            "description": "Operation successful"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "analytics"
        ],
        "description": "**Warning, this operation is not reversible.**\n\n A successful call to this API will permanently stop ingesting any logs received via SDK for the given installation ID, and cannot be restored. We advise caution when using this API, it is designed to permanently disable collection from a specific installation of the app on a device, usually following the request from a user.\n",
        "operationId": "Devices_BlockLogs"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups": {
      "get": {
        "parameters": [
          {
            "description": "top N elements",
            "in": "query",
            "name": "top",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "grouped by missing symbols crashes response object",
                  "properties": {
                    "groups": {
                      "description": "list of crash groups formed by missing symbols combination",
                      "items": {
                        "description": "missing symbol crash group object",
                        "properties": {
                          "app_build": {
                            "description": "application build",
                            "type": "string"
                          },
                          "app_id": {
                            "description": "application id",
                            "type": "string"
                          },
                          "app_ver": {
                            "description": "application version",
                            "type": "string"
                          },
                          "crash_count": {
                            "description": "number of crashes that belong to this group",
                            "type": "integer"
                          },
                          "error_count": {
                            "description": "number of errors that belong to this group",
                            "type": "integer"
                          },
                          "last_modified": {
                            "description": "last update date for the group",
                            "format": "date-time",
                            "type": "string"
                          },
                          "missing_symbols": {
                            "description": "list of missing symbols",
                            "items": {
                              "description": "missing symbol",
                              "properties": {
                                "name": {
                                  "description": "symbol name",
                                  "type": "string"
                                },
                                "platform": {
                                  "description": "symbol plarform",
                                  "type": "string"
                                },
                                "status": {
                                  "description": "symbol status",
                                  "enum": [
                                    "missing",
                                    "ignored",
                                    "available"
                                  ],
                                  "type": "string"
                                },
                                "symbol_id": {
                                  "description": "symbol id",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "symbol_id",
                                "name",
                                "status"
                              ],
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "status": {
                            "description": "group status",
                            "enum": [
                              "active",
                              "pending",
                              "closed"
                            ],
                            "type": "string"
                          },
                          "symbol_group_id": {
                            "description": "id of the symbol group",
                            "type": "string"
                          }
                        },
                        "required": [
                          "symbol_group_id",
                          "app_id",
                          "app_ver",
                          "app_build",
                          "last_modified",
                          "missing_symbols",
                          "status"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "total_crash_count": {
                      "description": "total number of crashes for all the groups",
                      "type": "integer"
                    }
                  },
                  "required": [
                    "total_crash_count",
                    "groups"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "failure response object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "crash"
        ],
        "description": "Gets top N (ordered by crash count) of crash groups by missing symbol",
        "operationId": "missingSymbolGroups_list",
        "summary": "Gets top N (ordered by crash count) of crash groups by missing symbol"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups/{symbol_group_id}": {
      "get": {
        "parameters": [
          {
            "description": "missing symbol crash group id",
            "in": "path",
            "name": "symbol_group_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "grouped by missing symbols crashes response object",
                  "properties": {
                    "groups": {
                      "description": "list of crash groups formed by missing symbols combination",
                      "items": {
                        "description": "missing symbol crash group object",
                        "properties": {
                          "app_build": {
                            "description": "application build",
                            "type": "string"
                          },
                          "app_id": {
                            "description": "application id",
                            "type": "string"
                          },
                          "app_ver": {
                            "description": "application version",
                            "type": "string"
                          },
                          "crash_count": {
                            "description": "number of crashes that belong to this group",
                            "type": "integer"
                          },
                          "error_count": {
                            "description": "number of errors that belong to this group",
                            "type": "integer"
                          },
                          "last_modified": {
                            "description": "last update date for the group",
                            "format": "date-time",
                            "type": "string"
                          },
                          "missing_symbols": {
                            "description": "list of missing symbols",
                            "items": {
                              "description": "missing symbol",
                              "properties": {
                                "name": {
                                  "description": "symbol name",
                                  "type": "string"
                                },
                                "platform": {
                                  "description": "symbol plarform",
                                  "type": "string"
                                },
                                "status": {
                                  "description": "symbol status",
                                  "enum": [
                                    "missing",
                                    "ignored",
                                    "available"
                                  ],
                                  "type": "string"
                                },
                                "symbol_id": {
                                  "description": "symbol id",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "symbol_id",
                                "name",
                                "status"
                              ],
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "status": {
                            "description": "group status",
                            "enum": [
                              "active",
                              "pending",
                              "closed"
                            ],
                            "type": "string"
                          },
                          "symbol_group_id": {
                            "description": "id of the symbol group",
                            "type": "string"
                          }
                        },
                        "required": [
                          "symbol_group_id",
                          "app_id",
                          "app_ver",
                          "app_build",
                          "last_modified",
                          "missing_symbols",
                          "status"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "total_crash_count": {
                      "description": "total number of crashes for all the groups",
                      "type": "integer"
                    }
                  },
                  "required": [
                    "total_crash_count",
                    "groups"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "failure response object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "crash"
        ],
        "description": "Gets missing symbol crash group by its id",
        "operationId": "missingSymbolGroups_get",
        "summary": "Gets missing symbol crash group by its id"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups_info": {
      "get": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "missing symbol groups",
                  "properties": {
                    "total_crash_count": {
                      "description": "total number of crashes for all missing symbol groups",
                      "type": "integer"
                    }
                  },
                  "required": [
                    "total_crash_count"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "failure response object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "crash"
        ],
        "description": "Gets application level statistics for all missing symbol groups",
        "operationId": "missingSymbolGroups_info",
        "summary": "Gets application level statistics for all missing symbol groups"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/distribution_groups": {
      "get": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "display_name": {
                        "description": "The name of the distribution group",
                        "type": "string"
                      },
                      "id": {
                        "description": "The unique ID of the distribution group",
                        "format": "uuid",
                        "type": "string"
                      },
                      "is_public": {
                        "description": "Whether the distribution group is public",
                        "type": "boolean"
                      },
                      "name": {
                        "description": "The name of the distribution group used in URLs",
                        "type": "string"
                      },
                      "origin": {
                        "description": "The creation origin of this distribution group",
                        "enum": [
                          "appcenter",
                          "hockeyapp"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "name",
                      "origin",
                      "is_public"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Returns a list of distribution groups in the app specified",
        "operationId": "distributionGroups_list"
      },
      "post": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "display_name": {
                      "description": "The name of the distribution group",
                      "type": "string"
                    },
                    "id": {
                      "description": "The unique ID of the distribution group",
                      "format": "uuid",
                      "type": "string"
                    },
                    "is_public": {
                      "description": "Whether the distribution group is public",
                      "type": "boolean"
                    },
                    "name": {
                      "description": "The name of the distribution group used in URLs",
                      "type": "string"
                    },
                    "origin": {
                      "description": "The creation origin of this distribution group",
                      "enum": [
                        "appcenter",
                        "hockeyapp"
                      ],
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "origin",
                    "is_public"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Creates a new distribution group and returns it to the caller",
        "operationId": "distributionGroups_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "display_name": {
                    "description": "The display name of the distribution group. If not specified, the name will be used.",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the distribution group",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              }
            }
          },
          "description": "The attributes to update for the distribution group",
          "required": true
        }
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}": {
      "delete": {
        "parameters": [
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the distribution group",
            "in": "path",
            "name": "distribution_group_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Deletes a distribution group",
        "operationId": "distributionGroups_delete"
      },
      "get": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the distribution group",
            "in": "path",
            "name": "distribution_group_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "display_name": {
                      "description": "The name of the distribution group",
                      "type": "string"
                    },
                    "id": {
                      "description": "The unique ID of the distribution group",
                      "format": "uuid",
                      "type": "string"
                    },
                    "is_public": {
                      "description": "Whether the distribution group is public",
                      "type": "boolean"
                    },
                    "name": {
                      "description": "The name of the distribution group used in URLs",
                      "type": "string"
                    },
                    "origin": {
                      "description": "The creation origin of this distribution group",
                      "enum": [
                        "appcenter",
                        "hockeyapp"
                      ],
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "origin",
                    "is_public"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Returns a single distribution group for a given distribution group name",
        "operationId": "distributionGroups_get"
      },
      "patch": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the distribution group",
            "in": "path",
            "name": "distribution_group_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "display_name": {
                      "description": "The name of the distribution group",
                      "type": "string"
                    },
                    "id": {
                      "description": "The unique ID of the distribution group",
                      "format": "uuid",
                      "type": "string"
                    },
                    "is_public": {
                      "description": "Whether the distribution group is public",
                      "type": "boolean"
                    },
                    "name": {
                      "description": "The name of the distribution group used in URLs",
                      "type": "string"
                    },
                    "origin": {
                      "description": "The creation origin of this distribution group",
                      "enum": [
                        "appcenter",
                        "hockeyapp"
                      ],
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "origin",
                    "is_public"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Updates the attributes of distribution group",
        "operationId": "distributionGroups_update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "is_public": {
                    "description": "Whether the distribution group is public",
                    "type": "boolean"
                  },
                  "name": {
                    "description": "The name of the distribution group",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "The attributes to update for the distribution group",
          "required": true
        }
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/devices": {
      "get": {
        "parameters": [
          {
            "description": "The name of the distribution group.",
            "in": "path",
            "name": "distribution_group_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "when provided, gets the provisioning state of the devices owned by users of this distribution group when compared to the provided release.",
            "in": "query",
            "name": "release_id",
            "schema": {
              "type": "number"
            }
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "description": "The information for a single iOS device",
                    "properties": {
                      "device_name": {
                        "description": "The device description, in the format \"iPhone 7 Plus (A1784)\"",
                        "type": "string"
                      },
                      "full_device_name": {
                        "description": "A combination of the device model name and the owner name.",
                        "type": "string"
                      },
                      "imei": {
                        "description": "The device's International Mobile Equipment Identity number. Always empty or undefined at present.",
                        "type": "string"
                      },
                      "model": {
                        "description": "The model identifier of the device, in the format iDeviceM,N",
                        "type": "string"
                      },
                      "os_build": {
                        "description": "The last known OS version running on the device",
                        "type": "string"
                      },
                      "os_version": {
                        "description": "The last known OS version running on the device",
                        "type": "string"
                      },
                      "owner_id": {
                        "description": "The user ID of the device owner.",
                        "type": "string"
                      },
                      "registered_at": {
                        "description": "Timestamp of when the device was registered in ISO format.",
                        "type": "string"
                      },
                      "serial": {
                        "description": "The device's serial number. Always empty or undefined at present.",
                        "type": "string"
                      },
                      "status": {
                        "description": "The provisioning status of the device.",
                        "type": "string"
                      },
                      "udid": {
                        "description": "The Unique Device IDentifier of the device",
                        "type": "string"
                      }
                    },
                    "required": [
                      "udid",
                      "model",
                      "device_name",
                      "os_build",
                      "os_version",
                      "status"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "<b>bad_request</b>: Devices information can only be requested for iOS apps.\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "<b>not_found</b>: A distribution group can't be found.\n"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "distribute"
        ],
        "description": "Returns all devices associated with the given distribution group",
        "operationId": "devices_list"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/devices/download_devices_list": {
      "get": {
        "parameters": [
          {
            "description": "The name of the distribution group.",
            "in": "path",
            "name": "distribution_group_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "when true, filters out provisioned devices",
            "in": "query",
            "name": "unprovisioned_only",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "multiple UDIDs which should be part of the resulting CSV.",
            "in": "query",
            "name": "udids",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              },
              "text/csv": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "<b>bad_request</b>: Devices information can only be requested for iOS apps.\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              },
              "text/csv": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "<b>not_found</b>: A distribution group can't be found.\n"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              },
              "text/csv": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "An internal error."
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "distribute"
        ],
        "description": "Returns all devices associated with the given distribution group.",
        "operationId": "devices_listCsvFormat"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/members": {
      "get": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the distribution group",
            "in": "path",
            "name": "distribution_group_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Whether to exclude pending invitations in the response",
            "in": "query",
            "name": "exclude_pending_invitations",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "avatar_url": {
                        "description": "The avatar URL of the user",
                        "type": "string"
                      },
                      "can_change_password": {
                        "description": "User is required to send an old password in order to change the password.",
                        "type": "boolean"
                      },
                      "display_name": {
                        "description": "The full name of the user. Might for example be first and last name",
                        "type": "string"
                      },
                      "email": {
                        "description": "The email address of the user",
                        "type": "string"
                      },
                      "id": {
                        "description": "The unique id (UUID) of the user",
                        "format": "uuid",
                        "type": "string"
                      },
                      "invite_pending": {
                        "description": "Whether the has accepted the invite. Available when an invite is pending, and the value will be \"true\".",
                        "type": "boolean"
                      },
                      "name": {
                        "description": "The unique name that is used to identify the user.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "email"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Returns a list of member details in the distribution group specified",
        "operationId": "distributionGroups_listUsers"
      },
      "post": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the distribution group",
            "in": "path",
            "name": "distribution_group_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "code": {
                        "description": "The code of the result",
                        "type": "string"
                      },
                      "invite_pending": {
                        "description": "Whether the has accepted the invite. Available when an invite is pending, and the value will be \"true\".",
                        "type": "boolean"
                      },
                      "message": {
                        "description": "The message of the result",
                        "type": "string"
                      },
                      "status": {
                        "description": "The status code of the result",
                        "type": "integer"
                      },
                      "user_email": {
                        "description": "The email of the user",
                        "type": "string"
                      }
                    },
                    "required": [
                      "status"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Adds the members to the specified distribution group",
        "operationId": "distributionGroups_addUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "user_emails": {
                    "description": "The list of emails of the users",
                    "items": {
                      "type": "string"
                    },
                    "minItems": 1,
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "The list of members to add",
          "required": true
        },
        "x-api-principals": [
          "user"
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/members/bulk_delete": {
      "post": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the distribution group",
            "in": "path",
            "name": "distribution_group_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "code": {
                        "description": "The code of the result",
                        "type": "string"
                      },
                      "message": {
                        "description": "The message of the result",
                        "type": "integer"
                      },
                      "status": {
                        "description": "The status code of the result",
                        "type": "integer"
                      },
                      "user_email": {
                        "description": "The email of the user",
                        "type": "string"
                      }
                    },
                    "required": [
                      "status"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Remove the users from the distribution group",
        "operationId": "distributionGroups_removeUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "user_emails": {
                    "description": "The list of emails of the users",
                    "items": {
                      "type": "string"
                    },
                    "minItems": 1,
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "The list of members to add",
          "required": true
        }
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/releases": {
      "get": {
        "parameters": [
          {
            "description": "The name of the distribution group.",
            "in": "path",
            "name": "distribution_group_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response for getting a list of releases in a distribution group",
                  "items": {
                    "description": "Response for getting a list of releases in a distribution group",
                    "properties": {
                      "enabled": {
                        "description": "This value determines the whether a release currently is enabled or disabled.",
                        "type": "boolean"
                      },
                      "id": {
                        "description": "ID identifying this unique release.",
                        "type": "integer"
                      },
                      "is_external_build": {
                        "description": "This value determines if a release is external or not.",
                        "type": "boolean"
                      },
                      "mandatory_update": {
                        "description": "A boolean which determines whether the release is a mandatory update or not.",
                        "type": "boolean"
                      },
                      "origin": {
                        "description": "The release's origin",
                        "enum": [
                          "hockeyapp",
                          "appcenter"
                        ],
                        "type": "string"
                      },
                      "short_version": {
                        "description": "The release's short version.<br>\nFor iOS: CFBundleShortVersionString from info.plist.<br>\nFor Android: android:versionName from AppManifest.xml.\n",
                        "type": "string"
                      },
                      "uploaded_at": {
                        "description": "UTC time in ISO 8601 format of the uploaded time.",
                        "type": "string"
                      },
                      "version": {
                        "description": "The release's version.<br>\nFor iOS: CFBundleVersion from info.plist.<br>\nFor Android: android:versionCode from AppManifest.xml.\n",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "version",
                      "enabled",
                      "uploaded_at",
                      "short_version",
                      "mandatory_update"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "A distribution group can't be found.\n"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "distribute"
        ],
        "description": "Return basic information about distributed releases in a given distribution group.",
        "operationId": "releases_listByDistributionGroup"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/releases/{release_id}": {
      "delete": {
        "parameters": [
          {
            "description": "The name of the app owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the app",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the distribution group.",
            "in": "path",
            "name": "distribution_group_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID identifying the unique release.",
            "in": "path",
            "name": "release_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Error codes:\n- `distribution_group_not_found` - Distribution group or the app doesn't exist.\n- `not_found` - release isn't found.\n"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "distribute"
        ],
        "description": "Deletes a release with id 'release_id' in a given distribution group.",
        "operationId": "releases_deleteWithDistributionGroupId"
      },
      "get": {
        "parameters": [
          {
            "description": "The name of the app owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the app",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the distribution group.",
            "in": "path",
            "name": "distribution_group_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Also supports the constant `latest`, which will return the latest release in the distribution group.",
            "in": "path",
            "name": "release_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The check if the request is from Install page",
            "in": "query",
            "name": "is_install_page",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Details of an uploaded release",
                  "properties": {
                    "android_min_api_level": {
                      "description": "The release's minimum required Android API level.",
                      "type": "string"
                    },
                    "app_display_name": {
                      "description": "The app's display name.",
                      "type": "string"
                    },
                    "app_icon_url": {
                      "description": "A URL to the app's icon.",
                      "type": "string"
                    },
                    "app_name": {
                      "description": "The app's name (extracted from the uploaded release).",
                      "type": "string"
                    },
                    "app_os": {
                      "description": "The app's OS.",
                      "type": "string"
                    },
                    "build": {
                      "description": "Contains metadata about the build that produced the release being uploaded",
                      "properties": {
                        "branch_name": {
                          "description": "The branch name of the build producing the release",
                          "type": "string"
                        },
                        "commit_hash": {
                          "description": "The commit hash of the build producing the release",
                          "type": "string"
                        },
                        "commit_message": {
                          "description": "The commit message of the build producing the release",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "bundle_identifier": {
                      "description": "The identifier of the apps bundle.",
                      "type": "string"
                    },
                    "can_resign": {
                      "description": "In calls that allow passing `udid` in the query string, this value determines if a release can be re-signed. When true, after a re-sign, the tester will be able to install the release from his registered devices. Will not be returned for non-iOS platforms.",
                      "type": "boolean"
                    },
                    "destination_type": {
                      "description": "OBSOLETE. Will be removed in next version. The destination type.<br>\n<b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br>\n<b>store</b>: The release distributed to external stores and distribution_stores details will be returned.<br>\n<b>tester</b>: The release distributed testers details will be returned.<br>\n",
                      "enum": [
                        "group",
                        "store",
                        "tester"
                      ],
                      "type": "string"
                    },
                    "destinations": {
                      "description": "A list of distribution groups or stores.",
                      "items": {
                        "allOf": [
                          {
                            "allOf": [
                              {
                                "properties": {
                                  "id": {
                                    "description": "ID identifying a unique distribution group.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "A name identifying a unique distribution group.",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "is_latest": {
                                    "description": "Is the containing release the latest one in this distribution group.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              }
                            ]
                          },
                          {
                            "allOf": [
                              {
                                "properties": {
                                  "id": {
                                    "description": "ID identifying a unique distribution store.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "A name identifying a unique distribution store.",
                                    "type": "string"
                                  },
                                  "publishing_status": {
                                    "description": "publishing status of the release in the store.",
                                    "type": "string"
                                  },
                                  "type": {
                                    "description": "type of the distribution store currently stores type can be intune, googleplay or windows.",
                                    "enum": [
                                      "intune",
                                      "googleplay",
                                      "apple",
                                      "none"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "is_latest": {
                                    "description": "Is the containing release the latest one in this distribution store.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              }
                            ]
                          },
                          {
                            "description": "A unique identifier for a destination. A destination can be identified by an ID (guid) or by a name. DestinationId encapsulates both options. A destination can be either a distribution group or a store.",
                            "properties": {
                              "id": {
                                "description": "Id of a distribution group / store. The release will be associated with this distribution group / store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of a distribution group / distribution store. The release will be associated with this distribution group or store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          {
                            "properties": {
                              "destination_type": {
                                "description": "Destination can be either store or group.",
                                "enum": [
                                  "group",
                                  "store",
                                  "tester"
                                ],
                                "type": "string"
                              },
                              "display_name": {
                                "description": "Display name for the group or tester",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        ]
                      },
                      "type": "array"
                    },
                    "device_family": {
                      "description": "The release's device family.",
                      "type": "string"
                    },
                    "distribution_groups": {
                      "description": "OBSOLETE. Will be removed in next version. A list of distribution groups that are associated with this release.",
                      "items": {
                        "properties": {
                          "id": {
                            "description": "ID identifying a unique distribution group.",
                            "type": "string"
                          },
                          "name": {
                            "description": "A name identifying a unique distribution group.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "id"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "distribution_stores": {
                      "description": "OBSOLETE. Will be removed in next version. A list of distribution stores that are associated with this release.",
                      "items": {
                        "properties": {
                          "id": {
                            "description": "ID identifying a unique distribution store.",
                            "type": "string"
                          },
                          "name": {
                            "description": "A name identifying a unique distribution store.",
                            "type": "string"
                          },
                          "publishing_status": {
                            "description": "publishing status of the release in the store.",
                            "type": "string"
                          },
                          "type": {
                            "description": "type of the distribution store currently stores type can be intune, googleplay or windows.",
                            "enum": [
                              "intune",
                              "googleplay",
                              "apple",
                              "none"
                            ],
                            "type": "string"
                          }
                        },
                        "required": [
                          "id"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "download_url": {
                      "description": "The URL that hosts the binary for this release.",
                      "type": "string"
                    },
                    "enabled": {
                      "description": "This value determines the whether a release currently is enabled or disabled.",
                      "type": "boolean"
                    },
                    "fingerprint": {
                      "description": "MD5 checksum of the release binary.",
                      "type": "string"
                    },
                    "id": {
                      "description": "ID identifying this unique release.",
                      "type": "integer"
                    },
                    "install_url": {
                      "description": "The href required to install a release on a mobile device. On iOS devices will be prefixed with `itms-services://?action=download-manifest&url=`",
                      "type": "string"
                    },
                    "is_external_build": {
                      "description": "This value determines if a release is external or not.",
                      "type": "boolean"
                    },
                    "is_provisioning_profile_syncing": {
                      "description": "A flag that determines whether the release's provisioning profile is still extracted or not.",
                      "type": "boolean"
                    },
                    "is_udid_provisioned": {
                      "description": "In calls that allow passing `udid` in the query string, this value will hold the provisioning status of that UDID in this release. Will be ignored for non-iOS platforms.",
                      "type": "boolean"
                    },
                    "min_os": {
                      "description": "The release's minimum required operating system.",
                      "type": "string"
                    },
                    "origin": {
                      "description": "The release's origin",
                      "enum": [
                        "hockeyapp",
                        "appcenter"
                      ],
                      "type": "string"
                    },
                    "package_hashes": {
                      "description": "Hashes for the packages.",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "provisioning_profile_expiry_date": {
                      "description": "expiration date of provisioning profile in UTC format.",
                      "type": "string"
                    },
                    "provisioning_profile_name": {
                      "description": "The release's provisioning profile name.",
                      "type": "string"
                    },
                    "provisioning_profile_type": {
                      "description": "The type of the provisioning profile for the requested app version.",
                      "enum": [
                        "adhoc",
                        "enterprise",
                        "other"
                      ],
                      "type": "string"
                    },
                    "release_notes": {
                      "description": "The release's release notes.",
                      "type": "string"
                    },
                    "secondary_download_url": {
                      "description": "The URL that hosts the secondary binary for this release, such as the apk file for aab releases.",
                      "type": "string"
                    },
                    "short_version": {
                      "description": "The release's short version.<br>\nFor iOS: CFBundleShortVersionString from info.plist.\nFor Android: android:versionName from AppManifest.xml.\n",
                      "type": "string"
                    },
                    "size": {
                      "description": "The release's size in bytes.",
                      "type": "integer"
                    },
                    "status": {
                      "description": "Status of the release.",
                      "type": "string"
                    },
                    "uploaded_at": {
                      "description": "UTC time in ISO 8601 format of the uploaded time.",
                      "type": "string"
                    },
                    "version": {
                      "description": "The release's version.<br>\nFor iOS: CFBundleVersion from info.plist.\nFor Android: android:versionCode from AppManifest.xml.\n",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "app_name",
                    "app_display_name",
                    "uploaded_at",
                    "version",
                    "short_version",
                    "app_icon_url",
                    "enabled"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error Codes:\n- `not_found` - Distribution group or the app doesn't exist\n- `no_releases_for_app` - App has no releases.\n"
          },
          "501": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Requesting a specific release_id is not supported.\n"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "distribute"
        ],
        "description": "Return detailed information about a distributed release in a given distribution group.",
        "operationId": "releases_getLatestByDistributionGroup"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/resend_invite": {
      "post": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the distribution group",
            "in": "path",
            "name": "distribution_group_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Resend distribution group app invite notification to previously invited testers",
        "operationId": "distributionGroups_resendInvite",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "user_emails": {
                    "description": "The list of emails of the users",
                    "items": {
                      "type": "string"
                    },
                    "minItems": 1,
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "The list of members to add",
          "required": true
        },
        "x-api-principals": [
          "user"
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/distribution_stores": {
      "get": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "description": "ExternalStoreResponse",
                    "properties": {
                      "created_by": {
                        "description": "The ID of the principal that created the store.",
                        "type": "string"
                      },
                      "created_by_principal_type": {
                        "description": "The type of the principal that created the store.",
                        "type": "string"
                      },
                      "id": {
                        "description": "Store id",
                        "type": "string"
                      },
                      "intune_details": {
                        "description": "Store details for intune",
                        "properties": {
                          "app_category": {
                            "properties": {
                              "id": {
                                "description": "ID for the category.",
                                "type": "string"
                              },
                              "name": {
                                "description": "display name for the app category",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "target_audience": {
                            "properties": {
                              "id": {
                                "description": "ID for the target audience/group.",
                                "type": "string"
                              },
                              "name": {
                                "description": "display name for the target audience/group",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "name": {
                        "description": "Store Name",
                        "type": "string"
                      },
                      "service_connection_id": {
                        "description": "Id for the shared service connection. In case of Apple / GooglePlay stores, this connection will be used to connect to the Apple / Google stores in App Center.",
                        "type": "string"
                      },
                      "track": {
                        "description": "Store track",
                        "enum": [
                          "production",
                          "alpha",
                          "beta",
                          "testflight-internal",
                          "testflight-external"
                        ],
                        "type": "string"
                      },
                      "type": {
                        "description": "Store Type",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "distribute"
        ],
        "description": "Get all the store details from Storage store table for a particular application.",
        "operationId": "stores_list"
      },
      "post": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "ExternalStoreResponse",
                  "properties": {
                    "created_by": {
                      "description": "The ID of the principal that created the store.",
                      "type": "string"
                    },
                    "created_by_principal_type": {
                      "description": "The type of the principal that created the store.",
                      "type": "string"
                    },
                    "id": {
                      "description": "Store id",
                      "type": "string"
                    },
                    "intune_details": {
                      "description": "Store details for intune",
                      "properties": {
                        "app_category": {
                          "properties": {
                            "id": {
                              "description": "ID for the category.",
                              "type": "string"
                            },
                            "name": {
                              "description": "display name for the app category",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "target_audience": {
                          "properties": {
                            "id": {
                              "description": "ID for the target audience/group.",
                              "type": "string"
                            },
                            "name": {
                              "description": "display name for the target audience/group",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "name": {
                      "description": "Store Name",
                      "type": "string"
                    },
                    "service_connection_id": {
                      "description": "Id for the shared service connection. In case of Apple / GooglePlay stores, this connection will be used to connect to the Apple / Google stores in App Center.",
                      "type": "string"
                    },
                    "track": {
                      "description": "Store track",
                      "enum": [
                        "production",
                        "alpha",
                        "beta",
                        "testflight-internal",
                        "testflight-external"
                      ],
                      "type": "string"
                    },
                    "type": {
                      "description": "Store Type",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "distribute"
        ],
        "description": "Create a new external store for the specified application.",
        "operationId": "stores_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "ExternalStoreRequest",
                "properties": {
                  "intune_details": {
                    "properties": {
                      "app_category": {
                        "properties": {
                          "name": {
                            "description": "display name for the app category",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "secret_json": {
                        "properties": {
                          "id_token": {
                            "description": "the id token of user",
                            "type": "string"
                          },
                          "refresh_token": {
                            "description": "the refresh token for user",
                            "type": "string"
                          },
                          "refresh_token_expiry": {
                            "description": "the expiry of refresh token",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "target_audience": {
                        "properties": {
                          "name": {
                            "description": "display name for the target audience/group",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "tenant_id": {
                        "description": "tenant id of the intune store",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": {
                    "description": "name of the store. In case of googleplay, and Apple store this is fixed to Production.",
                    "type": "string"
                  },
                  "service_connection_id": {
                    "description": "Id for the shared service connection. In case of Apple AppStore, this connection will be used to create and connect to the Apple AppStore in Mobile Center.",
                    "type": "string"
                  },
                  "track": {
                    "description": "track of the store. Can be production, alpha & beta for googleplay. Can be production, testflight-internal & testflight-external for Apple Store.",
                    "enum": [
                      "production",
                      "alpha",
                      "beta",
                      "testflight-internal",
                      "testflight-external"
                    ],
                    "type": "string"
                  },
                  "type": {
                    "description": "store Type",
                    "enum": [
                      "googleplay",
                      "apple",
                      "intune"
                    ],
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "The store request",
          "required": true
        }
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}": {
      "delete": {
        "parameters": [
          {
            "description": "The name of the store",
            "in": "path",
            "name": "store_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "distribute"
        ],
        "description": "delete the store based on specific store name.",
        "operationId": "stores_delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        }
      },
      "get": {
        "parameters": [
          {
            "description": "The name of the store",
            "in": "path",
            "name": "store_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "ExternalStoreResponse",
                  "properties": {
                    "created_by": {
                      "description": "The ID of the principal that created the store.",
                      "type": "string"
                    },
                    "created_by_principal_type": {
                      "description": "The type of the principal that created the store.",
                      "type": "string"
                    },
                    "id": {
                      "description": "Store id",
                      "type": "string"
                    },
                    "intune_details": {
                      "description": "Store details for intune",
                      "properties": {
                        "app_category": {
                          "properties": {
                            "id": {
                              "description": "ID for the category.",
                              "type": "string"
                            },
                            "name": {
                              "description": "display name for the app category",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "target_audience": {
                          "properties": {
                            "id": {
                              "description": "ID for the target audience/group.",
                              "type": "string"
                            },
                            "name": {
                              "description": "display name for the target audience/group",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "name": {
                      "description": "Store Name",
                      "type": "string"
                    },
                    "service_connection_id": {
                      "description": "Id for the shared service connection. In case of Apple / GooglePlay stores, this connection will be used to connect to the Apple / Google stores in App Center.",
                      "type": "string"
                    },
                    "track": {
                      "description": "Store track",
                      "enum": [
                        "production",
                        "alpha",
                        "beta",
                        "testflight-internal",
                        "testflight-external"
                      ],
                      "type": "string"
                    },
                    "type": {
                      "description": "Store Type",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "distribute"
        ],
        "description": "Return the store details for specified store name.",
        "operationId": "stores_get"
      },
      "patch": {
        "parameters": [
          {
            "description": "The name of the store",
            "in": "path",
            "name": "store_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "distribute"
        ],
        "description": "Update the store.",
        "operationId": "stores_patch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "service_connection_id": {
                    "description": "Service connection id to updated.",
                    "type": "string"
                  }
                },
                "required": [
                  "service_connection_id"
                ],
                "type": "object"
              }
            }
          },
          "description": "Store update request",
          "required": true
        }
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/latest_release": {
      "get": {
        "parameters": [
          {
            "description": "The name of the store",
            "in": "path",
            "name": "store_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "description": "Details of an uploaded release",
                    "properties": {
                      "android_min_api_level": {
                        "description": "The release's minimum required Android API level.",
                        "type": "string"
                      },
                      "app_display_name": {
                        "description": "The app's display name.",
                        "type": "string"
                      },
                      "app_name": {
                        "description": "The app's name (extracted from the uploaded release).",
                        "type": "string"
                      },
                      "bundle_identifier": {
                        "description": "The identifier of the apps bundle.",
                        "type": "string"
                      },
                      "distribution_stores": {
                        "description": "a list of distribution stores that are associated with this release.",
                        "items": {
                          "properties": {
                            "id": {
                              "description": "ID identifying a unique distribution store.",
                              "type": "string"
                            },
                            "name": {
                              "description": "A name identifying a unique distribution store.",
                              "type": "string"
                            },
                            "publishing_status": {
                              "description": "publishing status of the release in the store.",
                              "type": "string"
                            },
                            "type": {
                              "description": "type of the distribution store currently stores type can be intune or googleplay.",
                              "enum": [
                                "intune",
                                "googleplay"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "download_url": {
                        "description": "The URL that hosts the binary for this release.",
                        "type": "string"
                      },
                      "fingerprint": {
                        "description": "MD5 checksum of the release binary.",
                        "type": "string"
                      },
                      "id": {
                        "description": "ID identifying this unique release.",
                        "type": "number"
                      },
                      "install_url": {
                        "description": "The href required to install a release on a mobile device. On iOS devices will be prefixed with `itms-services://?action=download-manifest&url=`",
                        "enum": [
                          "group",
                          "store"
                        ],
                        "type": "string"
                      },
                      "min_os": {
                        "description": "The release's minimum required operating system.",
                        "type": "string"
                      },
                      "release_notes": {
                        "description": "The release's release notes.",
                        "type": "string"
                      },
                      "short_version": {
                        "description": "The release's short version.<br>\nFor iOS: CFBundleShortVersionString from info.plist.\nFor Android: android:versionName from AppManifest.xml.\n",
                        "type": "string"
                      },
                      "size": {
                        "description": "The release's size in bytes.",
                        "type": "number"
                      },
                      "status": {
                        "description": "OBSOLETE. Will be removed in next version. The availability concept is now replaced with distributed. Any 'available' release will be associated with the default distribution group of an app.</br>\nThe release state.<br>\n<b>available</b>: The uploaded release has been distributed.<br>\n<b>unavailable</b>: The uploaded release is not visible to the user. <br>\n",
                        "enum": [
                          "available",
                          "unavailable"
                        ],
                        "type": "string"
                      },
                      "uploaded_at": {
                        "description": "UTC time in ISO 8601 format of the uploaded time.",
                        "type": "string"
                      },
                      "version": {
                        "description": "The release's version.<br>\nFor iOS: CFBundleVersion from info.plist.\nFor Android: android:versionCode from AppManifest.xml.\n",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "distribute"
        ],
        "description": "Returns the latest release published in a store.",
        "operationId": "storeReleases_getLatest"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases": {
      "get": {
        "parameters": [
          {
            "description": "The name of the store",
            "in": "path",
            "name": "store_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "description": "Basic information on a release",
                    "properties": {
                      "destination_type": {
                        "description": "Destination for this release.",
                        "enum": [
                          "group",
                          "store",
                          "tester"
                        ],
                        "type": "string"
                      },
                      "distribution_stores": {
                        "description": "a list of distribution stores that are associated with this release.",
                        "items": {
                          "properties": {
                            "id": {
                              "description": "ID identifying a unique distribution store.",
                              "type": "string"
                            },
                            "is_latest": {
                              "description": "Is the containing release the latest one in this distribution store.",
                              "type": "boolean"
                            },
                            "name": {
                              "description": "A name identifying a unique distribution store.",
                              "type": "string"
                            },
                            "publishing_status": {
                              "description": "A status identifying the status of release in the distribution store.",
                              "type": "string"
                            },
                            "type": {
                              "description": "A type identifying the type of distribution store.",
                              "enum": [
                                "googleplay",
                                "intune",
                                "apple"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "id": {
                        "description": "ID identifying this unique release.",
                        "type": "number"
                      },
                      "short_version": {
                        "description": "The release's short version.\nFor iOS: CFBundleShortVersionString from info.plist.\nFor Android: android:versionName from AppManifest.xml.\n",
                        "type": "string"
                      },
                      "uploaded_at": {
                        "description": "UTC time in ISO 8601 format of the uploaded time.",
                        "type": "string"
                      },
                      "version": {
                        "description": "The release's version.\nFor iOS: CFBundleVersion from info.plist.\nFor Android: android:versionCode from AppManifest.xml.\n",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "distribute"
        ],
        "description": "Return all releases published  in a store",
        "operationId": "storeReleases_list"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}": {
      "delete": {
        "parameters": [
          {
            "description": "The name of the store",
            "in": "path",
            "name": "store_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The id of the release",
            "in": "path",
            "name": "release_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "distribute"
        ],
        "description": "delete the release with release Id",
        "operationId": "storeReleases_delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        }
      },
      "get": {
        "parameters": [
          {
            "description": "The name of the store",
            "in": "path",
            "name": "store_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the store",
            "in": "path",
            "name": "release_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "description": "Details of an uploaded release",
                    "properties": {
                      "android_min_api_level": {
                        "description": "The release's minimum required Android API level.",
                        "type": "string"
                      },
                      "app_display_name": {
                        "description": "The app's display name.",
                        "type": "string"
                      },
                      "app_name": {
                        "description": "The app's name (extracted from the uploaded release).",
                        "type": "string"
                      },
                      "bundle_identifier": {
                        "description": "The identifier of the apps bundle.",
                        "type": "string"
                      },
                      "distribution_stores": {
                        "description": "a list of distribution stores that are associated with this release.",
                        "items": {
                          "properties": {
                            "id": {
                              "description": "ID identifying a unique distribution store.",
                              "type": "string"
                            },
                            "name": {
                              "description": "A name identifying a unique distribution store.",
                              "type": "string"
                            },
                            "publishing_status": {
                              "description": "publishing status of the release in the store.",
                              "type": "string"
                            },
                            "type": {
                              "description": "type of the distribution store currently stores type can be intune or googleplay.",
                              "enum": [
                                "intune",
                                "googleplay"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "download_url": {
                        "description": "The URL that hosts the binary for this release.",
                        "type": "string"
                      },
                      "fingerprint": {
                        "description": "MD5 checksum of the release binary.",
                        "type": "string"
                      },
                      "id": {
                        "description": "ID identifying this unique release.",
                        "type": "number"
                      },
                      "install_url": {
                        "description": "The href required to install a release on a mobile device. On iOS devices will be prefixed with `itms-services://?action=download-manifest&url=`",
                        "enum": [
                          "group",
                          "store"
                        ],
                        "type": "string"
                      },
                      "min_os": {
                        "description": "The release's minimum required operating system.",
                        "type": "string"
                      },
                      "release_notes": {
                        "description": "The release's release notes.",
                        "type": "string"
                      },
                      "short_version": {
                        "description": "The release's short version.<br>\nFor iOS: CFBundleShortVersionString from info.plist.\nFor Android: android:versionName from AppManifest.xml.\n",
                        "type": "string"
                      },
                      "size": {
                        "description": "The release's size in bytes.",
                        "type": "number"
                      },
                      "status": {
                        "description": "OBSOLETE. Will be removed in next version. The availability concept is now replaced with distributed. Any 'available' release will be associated with the default distribution group of an app.</br>\nThe release state.<br>\n<b>available</b>: The uploaded release has been distributed.<br>\n<b>unavailable</b>: The uploaded release is not visible to the user. <br>\n",
                        "enum": [
                          "available",
                          "unavailable"
                        ],
                        "type": "string"
                      },
                      "uploaded_at": {
                        "description": "UTC time in ISO 8601 format of the uploaded time.",
                        "type": "string"
                      },
                      "version": {
                        "description": "The release's version.<br>\nFor iOS: CFBundleVersion from info.plist.\nFor Android: android:versionCode from AppManifest.xml.\n",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "distribute"
        ],
        "description": "Return releases published in a store for releaseId and storeId",
        "operationId": "storeReleases_get"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}/publish_error_details": {
      "get": {
        "parameters": [
          {
            "description": "The name of the store",
            "in": "path",
            "name": "store_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The id of the release",
            "in": "path",
            "name": "release_id",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "ReleasePublishErrorResponse",
                  "properties": {
                    "is_log_available": {
                      "description": "boolean property to tell if logs are available for download",
                      "type": "boolean"
                    },
                    "message": {
                      "description": "error Details",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "distribute"
        ],
        "description": "Return the Error Details of release which failed in publishing.",
        "operationId": "storeReleases_getPublishError"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}/publish_logs": {
      "get": {
        "parameters": [
          {
            "description": "The name of the store",
            "in": "path",
            "name": "store_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the realease",
            "in": "path",
            "name": "release_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "distribute"
        ],
        "description": "Returns publish logs for a particular release published to a particular store",
        "operationId": "storeReleasePublishLogs_get"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}/realtimestatus": {
      "get": {
        "parameters": [
          {
            "description": "The name of the store",
            "in": "path",
            "name": "store_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The id of the release",
            "in": "path",
            "name": "release_id",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "status of the app from store",
                  "properties": {
                    "app_id": {
                      "description": "app id",
                      "type": "string"
                    },
                    "release_id": {
                      "description": "release id",
                      "type": "string"
                    },
                    "status": {
                      "description": "Status Data from store",
                      "properties": {
                        "status": {
                          "description": "status from store",
                          "type": "string"
                        },
                        "storetype": {
                          "description": "store type",
                          "type": "string"
                        },
                        "track": {
                          "description": "track information from store",
                          "type": "string"
                        },
                        "version": {
                          "description": "version of the app from store",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "distribute"
        ],
        "description": "Return the Real time Status publishing of release from store.",
        "operationId": "storeReleases_getRealTimeStatusByReleaseId"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/errors/availableAppBuilds": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "version",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Start date time in data in ISO 8601 date time format",
            "in": "query",
            "name": "start",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Last date time in data in ISO 8601 date time format",
            "in": "query",
            "name": "end",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The maximum number of results to return. (0 will fetch all results till the max number.)",
            "in": "query",
            "name": "$top",
            "required": false,
            "schema": {
              "default": 30,
              "format": "int64",
              "maximum": 1000,
              "minimum": 0,
              "type": "integer"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Type of error (handled vs unhandled), including All",
            "in": "query",
            "name": "errorType",
            "required": false,
            "schema": {
              "enum": [
                "all",
                "unhandledError",
                "handledError"
              ],
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "appBuilds": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "List of App builds"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "errors"
        ],
        "description": "List of app builds",
        "operationId": "Errors_AppBuildsList"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/errors/available_versions": {
      "get": {
        "parameters": [
          {
            "description": "Start date time in data in ISO 8601 date time format",
            "in": "query",
            "name": "start",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Last date time in data in ISO 8601 date time format",
            "in": "query",
            "name": "end",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The maximum number of results to return. (0 will fetch all results till the max number.)",
            "in": "query",
            "name": "$top",
            "required": false,
            "schema": {
              "default": 30,
              "format": "int64",
              "maximum": 1000,
              "minimum": 0,
              "type": "integer"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination.",
            "in": "query",
            "name": "$skip",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int64",
              "minimum": 0,
              "type": "integer"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "A filter as specified in https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering.",
            "in": "query",
            "name": "$filter",
            "required": false,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Controls whether or not to include a count of all the items across all pages.",
            "in": "query",
            "name": "$inlinecount",
            "required": false,
            "schema": {
              "default": "none",
              "enum": [
                "allpages",
                "none"
              ],
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Type of error (handled vs unhandled), including All",
            "in": "query",
            "name": "errorType",
            "required": false,
            "schema": {
              "enum": [
                "all",
                "unhandledError",
                "handledError"
              ],
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "total_count": {
                      "description": "The full number of versions across all pages.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "versions": {
                      "description": "List of available versions.",
                      "items": {
                        "description": "Version name.",
                        "format": "string",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "A list of available versions in the time range."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason."
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "errors"
        ],
        "description": "Get all available versions in the time range.",
        "operationId": "Errors_AvailableVersions"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/errors/errorCountsPerDay": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "version",
            "required": false,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Start date time in data in ISO 8601 date time format",
            "in": "query",
            "name": "start",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Last date time in data in ISO 8601 date time format",
            "in": "query",
            "name": "end",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "app build",
            "in": "query",
            "name": "app_build",
            "required": false,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Type of error (handled vs unhandled), excluding All",
            "in": "query",
            "name": "errorType",
            "required": false,
            "schema": {
              "enum": [
                "unhandledError",
                "handledError"
              ],
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "count": {
                      "description": "total error count",
                      "format": "int64",
                      "type": "integer"
                    },
                    "errors": {
                      "description": "the total error count for day",
                      "items": {
                        "properties": {
                          "count": {
                            "description": "count of the object",
                            "format": "int64",
                            "type": "integer"
                          },
                          "datetime": {
                            "description": "the ISO 8601 datetime",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Count of crashes or errors by day in the time range, and total over the entire time range."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "errors"
        ],
        "description": "Count of crashes or errors by day in the time range based the selected versions. If SingleErrorTypeParameter is not provided, defaults to handlederror.",
        "operationId": "Errors_CountsPerDay"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "version",
            "required": false,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "app build",
            "in": "query",
            "name": "app_build",
            "required": false,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "groupState",
            "required": false,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Start date time in data in ISO 8601 date time format",
            "in": "query",
            "name": "start",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Last date time in data in ISO 8601 date time format",
            "in": "query",
            "name": "end",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "controls the sorting order and sorting based on which column",
            "in": "query",
            "name": "$orderby",
            "required": false,
            "schema": {
              "default": "count desc",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The maximum number of results to return. (0 will fetch all results till the max number.)",
            "in": "query",
            "name": "$top",
            "required": false,
            "schema": {
              "default": 30,
              "format": "int64",
              "maximum": 1000,
              "minimum": 0,
              "type": "integer"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Type of error (handled vs unhandled), including All",
            "in": "query",
            "name": "errorType",
            "required": false,
            "schema": {
              "enum": [
                "all",
                "unhandledError",
                "handledError"
              ],
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errorGroups": {
                      "items": {
                        "allOf": [
                          {
                            "allOf": [
                              {
                                "properties": {
                                  "annotation": {
                                    "type": "string"
                                  },
                                  "state": {
                                    "enum": [
                                      "open",
                                      "closed",
                                      "ignored"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "state"
                                ],
                                "type": "object"
                              }
                            ],
                            "properties": {
                              "appBuild": {
                                "type": "string"
                              },
                              "appVersion": {
                                "type": "string"
                              },
                              "codeRaw": {
                                "type": "string"
                              },
                              "count": {
                                "format": "int64",
                                "type": "integer"
                              },
                              "deviceCount": {
                                "format": "int64",
                                "type": "integer"
                              },
                              "errorGroupId": {
                                "type": "string"
                              },
                              "exceptionAppCode": {
                                "type": "boolean"
                              },
                              "exceptionClassMethod": {
                                "type": "boolean"
                              },
                              "exceptionClassName": {
                                "type": "string"
                              },
                              "exceptionFile": {
                                "type": "string"
                              },
                              "exceptionLine": {
                                "type": "string"
                              },
                              "exceptionMessage": {
                                "type": "string"
                              },
                              "exceptionMethod": {
                                "type": "string"
                              },
                              "exceptionType": {
                                "type": "string"
                              },
                              "firstOccurrence": {
                                "format": "date-time",
                                "type": "string"
                              },
                              "hidden": {
                                "type": "boolean"
                              },
                              "lastOccurrence": {
                                "format": "date-time",
                                "type": "string"
                              },
                              "reasonFrames": {
                                "items": {
                                  "properties": {
                                    "appCode": {
                                      "description": "this line isn't from any framework",
                                      "type": "boolean"
                                    },
                                    "classMethod": {
                                      "description": "is a class method",
                                      "type": "boolean"
                                    },
                                    "className": {
                                      "description": "name of the class",
                                      "type": "string"
                                    },
                                    "codeFormatted": {
                                      "description": "Formatted frame string",
                                      "type": "string"
                                    },
                                    "codeRaw": {
                                      "description": "Unformatted Frame string",
                                      "type": "string"
                                    },
                                    "exceptionType": {
                                      "description": "Exception type.",
                                      "type": "string"
                                    },
                                    "file": {
                                      "description": "name of the file",
                                      "type": "string"
                                    },
                                    "frameworkName": {
                                      "description": "Name of the framework",
                                      "type": "string"
                                    },
                                    "language": {
                                      "description": "programming language of the frame",
                                      "enum": [
                                        "JavaScript",
                                        "CSharp",
                                        "Objective-C",
                                        "Objective-Cpp",
                                        "Cpp",
                                        "C",
                                        "Swift",
                                        "Java",
                                        "Unknown"
                                      ],
                                      "type": "string"
                                    },
                                    "line": {
                                      "description": "line number",
                                      "type": "integer"
                                    },
                                    "method": {
                                      "description": "name of the method",
                                      "type": "string"
                                    },
                                    "methodParams": {
                                      "description": "parameters of the frames method",
                                      "type": "string"
                                    },
                                    "osExceptionType": {
                                      "description": "OS exception type. (aka. SIGNAL)",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              }
                            },
                            "required": [
                              "errorGroupId",
                              "appVersion",
                              "state",
                              "count",
                              "deviceCount",
                              "firstOccurrence",
                              "lastOccurrence"
                            ],
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "nextLink": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "List of error groups"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "errors"
        ],
        "description": "List of error groups",
        "operationId": "Errors_GroupList"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/search": {
      "get": {
        "parameters": [
          {
            "description": "A filter as specified in OData notation",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "A query string",
            "in": "query",
            "name": "q",
            "required": false,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "It controls the order of sorting",
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "default": "desc",
              "enum": [
                "desc",
                "asc"
              ],
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "It controls the sort based on specified field",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "matchingReportsCount",
              "enum": [
                "matchingReportsCount",
                "exceptionClassName",
                "exceptionMessage",
                "exceptionMethod",
                "lastOccurrence"
              ],
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The maximum number of results to return",
            "in": "query",
            "name": "$top",
            "required": false,
            "schema": {
              "default": 100,
              "format": "int64",
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination.",
            "in": "query",
            "name": "$skip",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int64",
              "minimum": 0,
              "type": "integer"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errorGroups": {
                      "items": {
                        "allOf": [
                          {
                            "allOf": [
                              {
                                "properties": {
                                  "annotation": {
                                    "type": "string"
                                  },
                                  "state": {
                                    "enum": [
                                      "open",
                                      "closed",
                                      "ignored"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "state"
                                ],
                                "type": "object"
                              }
                            ],
                            "properties": {
                              "appBuild": {
                                "type": "string"
                              },
                              "appVersion": {
                                "type": "string"
                              },
                              "codeRaw": {
                                "type": "string"
                              },
                              "count": {
                                "format": "int64",
                                "type": "integer"
                              },
                              "deviceCount": {
                                "format": "int64",
                                "type": "integer"
                              },
                              "errorGroupId": {
                                "type": "string"
                              },
                              "exceptionAppCode": {
                                "type": "boolean"
                              },
                              "exceptionClassMethod": {
                                "type": "boolean"
                              },
                              "exceptionClassName": {
                                "type": "string"
                              },
                              "exceptionFile": {
                                "type": "string"
                              },
                              "exceptionLine": {
                                "type": "string"
                              },
                              "exceptionMessage": {
                                "type": "string"
                              },
                              "exceptionMethod": {
                                "type": "string"
                              },
                              "exceptionType": {
                                "type": "string"
                              },
                              "firstOccurrence": {
                                "format": "date-time",
                                "type": "string"
                              },
                              "hidden": {
                                "type": "boolean"
                              },
                              "lastOccurrence": {
                                "format": "date-time",
                                "type": "string"
                              },
                              "reasonFrames": {
                                "items": {
                                  "properties": {
                                    "appCode": {
                                      "description": "this line isn't from any framework",
                                      "type": "boolean"
                                    },
                                    "classMethod": {
                                      "description": "is a class method",
                                      "type": "boolean"
                                    },
                                    "className": {
                                      "description": "name of the class",
                                      "type": "string"
                                    },
                                    "codeFormatted": {
                                      "description": "Formatted frame string",
                                      "type": "string"
                                    },
                                    "codeRaw": {
                                      "description": "Unformatted Frame string",
                                      "type": "string"
                                    },
                                    "exceptionType": {
                                      "description": "Exception type.",
                                      "type": "string"
                                    },
                                    "file": {
                                      "description": "name of the file",
                                      "type": "string"
                                    },
                                    "frameworkName": {
                                      "description": "Name of the framework",
                                      "type": "string"
                                    },
                                    "language": {
                                      "description": "programming language of the frame",
                                      "enum": [
                                        "JavaScript",
                                        "CSharp",
                                        "Objective-C",
                                        "Objective-Cpp",
                                        "Cpp",
                                        "C",
                                        "Swift",
                                        "Java",
                                        "Unknown"
                                      ],
                                      "type": "string"
                                    },
                                    "line": {
                                      "description": "line number",
                                      "type": "integer"
                                    },
                                    "method": {
                                      "description": "name of the method",
                                      "type": "string"
                                    },
                                    "methodParams": {
                                      "description": "parameters of the frames method",
                                      "type": "string"
                                    },
                                    "osExceptionType": {
                                      "description": "OS exception type. (aka. SIGNAL)",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              }
                            },
                            "required": [
                              "errorGroupId",
                              "appVersion",
                              "state",
                              "count",
                              "deviceCount",
                              "firstOccurrence",
                              "lastOccurrence"
                            ],
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "hasMoreResults": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "List of error groups"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "errors"
        ],
        "description": "Error groups list based on search parameters",
        "operationId": "Errors_ErrorGroupsSearch"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}": {
      "get": {
        "parameters": [
          {
            "description": "The id of the error group",
            "in": "path",
            "name": "errorGroupId",
            "required": true,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "properties": {
                        "annotation": {
                          "type": "string"
                        },
                        "state": {
                          "enum": [
                            "open",
                            "closed",
                            "ignored"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "state"
                      ],
                      "type": "object"
                    }
                  ],
                  "properties": {
                    "appBuild": {
                      "type": "string"
                    },
                    "appVersion": {
                      "type": "string"
                    },
                    "codeRaw": {
                      "type": "string"
                    },
                    "count": {
                      "format": "int64",
                      "type": "integer"
                    },
                    "deviceCount": {
                      "format": "int64",
                      "type": "integer"
                    },
                    "errorGroupId": {
                      "type": "string"
                    },
                    "exceptionAppCode": {
                      "type": "boolean"
                    },
                    "exceptionClassMethod": {
                      "type": "boolean"
                    },
                    "exceptionClassName": {
                      "type": "string"
                    },
                    "exceptionFile": {
                      "type": "string"
                    },
                    "exceptionLine": {
                      "type": "string"
                    },
                    "exceptionMessage": {
                      "type": "string"
                    },
                    "exceptionMethod": {
                      "type": "string"
                    },
                    "exceptionType": {
                      "type": "string"
                    },
                    "firstOccurrence": {
                      "format": "date-time",
                      "type": "string"
                    },
                    "hidden": {
                      "type": "boolean"
                    },
                    "lastOccurrence": {
                      "format": "date-time",
                      "type": "string"
                    },
                    "reasonFrames": {
                      "items": {
                        "properties": {
                          "appCode": {
                            "description": "this line isn't from any framework",
                            "type": "boolean"
                          },
                          "classMethod": {
                            "description": "is a class method",
                            "type": "boolean"
                          },
                          "className": {
                            "description": "name of the class",
                            "type": "string"
                          },
                          "codeFormatted": {
                            "description": "Formatted frame string",
                            "type": "string"
                          },
                          "codeRaw": {
                            "description": "Unformatted Frame string",
                            "type": "string"
                          },
                          "exceptionType": {
                            "description": "Exception type.",
                            "type": "string"
                          },
                          "file": {
                            "description": "name of the file",
                            "type": "string"
                          },
                          "frameworkName": {
                            "description": "Name of the framework",
                            "type": "string"
                          },
                          "language": {
                            "description": "programming language of the frame",
                            "enum": [
                              "JavaScript",
                              "CSharp",
                              "Objective-C",
                              "Objective-Cpp",
                              "Cpp",
                              "C",
                              "Swift",
                              "Java",
                              "Unknown"
                            ],
                            "type": "string"
                          },
                          "line": {
                            "description": "line number",
                            "type": "integer"
                          },
                          "method": {
                            "description": "name of the method",
                            "type": "string"
                          },
                          "methodParams": {
                            "description": "parameters of the frames method",
                            "type": "string"
                          },
                          "osExceptionType": {
                            "description": "OS exception type. (aka. SIGNAL)",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errorGroupId",
                    "appVersion",
                    "state",
                    "count",
                    "deviceCount",
                    "firstOccurrence",
                    "lastOccurrence"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error group details"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "errors"
        ],
        "description": "Error group details",
        "operationId": "Errors_GroupDetails"
      },
      "patch": {
        "parameters": [
          {
            "description": "The id of the error group",
            "in": "path",
            "name": "errorGroupId",
            "required": true,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "properties": {
                        "annotation": {
                          "type": "string"
                        },
                        "state": {
                          "enum": [
                            "open",
                            "closed",
                            "ignored"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "state"
                      ],
                      "type": "object"
                    }
                  ],
                  "properties": {
                    "appBuild": {
                      "type": "string"
                    },
                    "appVersion": {
                      "type": "string"
                    },
                    "codeRaw": {
                      "type": "string"
                    },
                    "count": {
                      "format": "int64",
                      "type": "integer"
                    },
                    "deviceCount": {
                      "format": "int64",
                      "type": "integer"
                    },
                    "errorGroupId": {
                      "type": "string"
                    },
                    "exceptionAppCode": {
                      "type": "boolean"
                    },
                    "exceptionClassMethod": {
                      "type": "boolean"
                    },
                    "exceptionClassName": {
                      "type": "string"
                    },
                    "exceptionFile": {
                      "type": "string"
                    },
                    "exceptionLine": {
                      "type": "string"
                    },
                    "exceptionMessage": {
                      "type": "string"
                    },
                    "exceptionMethod": {
                      "type": "string"
                    },
                    "exceptionType": {
                      "type": "string"
                    },
                    "firstOccurrence": {
                      "format": "date-time",
                      "type": "string"
                    },
                    "hidden": {
                      "type": "boolean"
                    },
                    "lastOccurrence": {
                      "format": "date-time",
                      "type": "string"
                    },
                    "reasonFrames": {
                      "items": {
                        "properties": {
                          "appCode": {
                            "description": "this line isn't from any framework",
                            "type": "boolean"
                          },
                          "classMethod": {
                            "description": "is a class method",
                            "type": "boolean"
                          },
                          "className": {
                            "description": "name of the class",
                            "type": "string"
                          },
                          "codeFormatted": {
                            "description": "Formatted frame string",
                            "type": "string"
                          },
                          "codeRaw": {
                            "description": "Unformatted Frame string",
                            "type": "string"
                          },
                          "exceptionType": {
                            "description": "Exception type.",
                            "type": "string"
                          },
                          "file": {
                            "description": "name of the file",
                            "type": "string"
                          },
                          "frameworkName": {
                            "description": "Name of the framework",
                            "type": "string"
                          },
                          "language": {
                            "description": "programming language of the frame",
                            "enum": [
                              "JavaScript",
                              "CSharp",
                              "Objective-C",
                              "Objective-Cpp",
                              "Cpp",
                              "C",
                              "Swift",
                              "Java",
                              "Unknown"
                            ],
                            "type": "string"
                          },
                          "line": {
                            "description": "line number",
                            "type": "integer"
                          },
                          "method": {
                            "description": "name of the method",
                            "type": "string"
                          },
                          "methodParams": {
                            "description": "parameters of the frames method",
                            "type": "string"
                          },
                          "osExceptionType": {
                            "description": "OS exception type. (aka. SIGNAL)",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errorGroupId",
                    "appVersion",
                    "state",
                    "count",
                    "deviceCount",
                    "firstOccurrence",
                    "lastOccurrence"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error group details"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "errors"
        ],
        "description": "Update error group state",
        "operationId": "Errors_UpdateState",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "annotation": {
                    "type": "string"
                  },
                  "state": {
                    "enum": [
                      "open",
                      "closed",
                      "ignored"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "state"
                ],
                "type": "object"
              }
            }
          },
          "description": "The state of the error group",
          "required": true
        }
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errorCountsPerDay": {
      "get": {
        "parameters": [
          {
            "description": "The id of the error group",
            "in": "path",
            "name": "errorGroupId",
            "required": true,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "version",
            "required": false,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Start date time in data in ISO 8601 date time format",
            "in": "query",
            "name": "start",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Last date time in data in ISO 8601 date time format",
            "in": "query",
            "name": "end",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "count": {
                      "description": "total error count",
                      "format": "int64",
                      "type": "integer"
                    },
                    "errors": {
                      "description": "the total error count for day",
                      "items": {
                        "properties": {
                          "count": {
                            "description": "count of the object",
                            "format": "int64",
                            "type": "integer"
                          },
                          "datetime": {
                            "description": "the ISO 8601 datetime",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Count of errors by day in the time range and total errors over the time range."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "errors"
        ],
        "description": "Count of errors by day in the time range of the selected error group with selected version",
        "operationId": "Errors_GroupCountsPerDay"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errorfreeDevicePercentages": {
      "get": {
        "parameters": [
          {
            "description": "The id of the error group",
            "in": "path",
            "name": "errorGroupId",
            "required": true,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Start date time in data in ISO 8601 date time format",
            "in": "query",
            "name": "start",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Last date time in data in ISO 8601 date time format",
            "in": "query",
            "name": "end",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "averagePercentage": {
                      "description": "Average percentage",
                      "format": "double",
                      "type": "number"
                    },
                    "dailyPercentages": {
                      "description": "The error-free percentage per day.",
                      "items": {
                        "properties": {
                          "datetime": {
                            "description": "the ISO 8601 datetime",
                            "type": "string"
                          },
                          "percentage": {
                            "description": "percentage of the object",
                            "format": "double",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Percentage of error-free devices by day in the time range and overall percentage of the time range."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "errors"
        ],
        "description": "Percentage of error-free devices by day in the time range. Api will return -1 if crash devices is greater than active devices",
        "operationId": "Errors_GroupErrorFreeDevicePercentages"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors": {
      "get": {
        "parameters": [
          {
            "description": "The id of the error group",
            "in": "path",
            "name": "errorGroupId",
            "required": true,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Start date time in data in ISO 8601 date time format",
            "in": "query",
            "name": "start",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Last date time in data in ISO 8601 date time format",
            "in": "query",
            "name": "end",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The maximum number of results to return. (0 will fetch all results till the max number.)",
            "in": "query",
            "name": "$top",
            "required": false,
            "schema": {
              "default": 30,
              "format": "int64",
              "maximum": 1000,
              "minimum": 0,
              "type": "integer"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "model",
            "required": false,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "os",
            "required": false,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errors": {
                      "description": "Errors list.",
                      "items": {
                        "properties": {
                          "country": {
                            "type": "string"
                          },
                          "deviceName": {
                            "type": "string"
                          },
                          "errorId": {
                            "type": "string"
                          },
                          "hasAttachments": {
                            "type": "boolean"
                          },
                          "hasBreadcrumbs": {
                            "type": "boolean"
                          },
                          "language": {
                            "type": "string"
                          },
                          "osType": {
                            "type": "string"
                          },
                          "osVersion": {
                            "type": "string"
                          },
                          "timestamp": {
                            "format": "date-time",
                            "type": "string"
                          },
                          "userId": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "nextLink": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Get all errors for group"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "errors"
        ],
        "description": "Get all errors for group",
        "operationId": "Errors_ListForGroup"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/latest": {
      "get": {
        "parameters": [
          {
            "description": "The id of the error group",
            "in": "path",
            "name": "errorGroupId",
            "required": true,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "properties": {
                        "country": {
                          "type": "string"
                        },
                        "deviceName": {
                          "type": "string"
                        },
                        "errorId": {
                          "type": "string"
                        },
                        "hasAttachments": {
                          "type": "boolean"
                        },
                        "hasBreadcrumbs": {
                          "type": "boolean"
                        },
                        "language": {
                          "type": "string"
                        },
                        "osType": {
                          "type": "string"
                        },
                        "osVersion": {
                          "type": "string"
                        },
                        "timestamp": {
                          "format": "date-time",
                          "type": "string"
                        },
                        "userId": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "properties": {
                    "appLaunchTimestamp": {
                      "description": "Timestamp when the app was launched, example: '2017-03-13T18:05:42Z'.\n",
                      "format": "date-time",
                      "type": "string"
                    },
                    "carrierName": {
                      "description": "Carrier name (for mobile devices).\n",
                      "type": "string"
                    },
                    "jailbreak": {
                      "description": "Flag indicating if device is jailbroken\n",
                      "type": "boolean"
                    },
                    "name": {
                      "type": "string"
                    },
                    "properties": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "type": "object"
                    },
                    "reasonFrames": {
                      "items": {
                        "properties": {
                          "appCode": {
                            "description": "this line isn't from any framework",
                            "type": "boolean"
                          },
                          "classMethod": {
                            "description": "is a class method",
                            "type": "boolean"
                          },
                          "className": {
                            "description": "name of the class",
                            "type": "string"
                          },
                          "codeFormatted": {
                            "description": "Formatted frame string",
                            "type": "string"
                          },
                          "codeRaw": {
                            "description": "Unformatted Frame string",
                            "type": "string"
                          },
                          "exceptionType": {
                            "description": "Exception type.",
                            "type": "string"
                          },
                          "file": {
                            "description": "name of the file",
                            "type": "string"
                          },
                          "frameworkName": {
                            "description": "Name of the framework",
                            "type": "string"
                          },
                          "language": {
                            "description": "programming language of the frame",
                            "enum": [
                              "JavaScript",
                              "CSharp",
                              "Objective-C",
                              "Objective-Cpp",
                              "Cpp",
                              "C",
                              "Swift",
                              "Java",
                              "Unknown"
                            ],
                            "type": "string"
                          },
                          "line": {
                            "description": "line number",
                            "type": "integer"
                          },
                          "method": {
                            "description": "name of the method",
                            "type": "string"
                          },
                          "methodParams": {
                            "description": "parameters of the frames method",
                            "type": "string"
                          },
                          "osExceptionType": {
                            "description": "OS exception type. (aka. SIGNAL)",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Latest error details."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "errors"
        ],
        "description": "Latest error details.",
        "operationId": "Errors_LatestErrorDetails"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}": {
      "delete": {
        "parameters": [
          {
            "description": "The id of the error group",
            "in": "path",
            "name": "errorGroupId",
            "required": true,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The id of the error",
            "in": "path",
            "name": "errorId",
            "required": true,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "appId": {
                      "type": "string"
                    },
                    "attachmentsDeleted": {
                      "type": "integer"
                    },
                    "blobsFailed": {
                      "type": "integer"
                    },
                    "blobsSucceeded": {
                      "type": "integer"
                    },
                    "errorGroupId": {
                      "type": "string"
                    },
                    "errorId": {
                      "type": "string"
                    },
                    "errorsDeleted": {
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Success."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "errors"
        ],
        "description": "Delete a specific error and related attachments and blobs for an app. Searchable data will not be deleted immediately and may take up to 30 days.",
        "operationId": "Errors_DeleteError"
      },
      "get": {
        "parameters": [
          {
            "description": "The id of the error group",
            "in": "path",
            "name": "errorGroupId",
            "required": true,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The id of the error",
            "in": "path",
            "name": "errorId",
            "required": true,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "properties": {
                        "country": {
                          "type": "string"
                        },
                        "deviceName": {
                          "type": "string"
                        },
                        "errorId": {
                          "type": "string"
                        },
                        "hasAttachments": {
                          "type": "boolean"
                        },
                        "hasBreadcrumbs": {
                          "type": "boolean"
                        },
                        "language": {
                          "type": "string"
                        },
                        "osType": {
                          "type": "string"
                        },
                        "osVersion": {
                          "type": "string"
                        },
                        "timestamp": {
                          "format": "date-time",
                          "type": "string"
                        },
                        "userId": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "properties": {
                    "appLaunchTimestamp": {
                      "description": "Timestamp when the app was launched, example: '2017-03-13T18:05:42Z'.\n",
                      "format": "date-time",
                      "type": "string"
                    },
                    "carrierName": {
                      "description": "Carrier name (for mobile devices).\n",
                      "type": "string"
                    },
                    "jailbreak": {
                      "description": "Flag indicating if device is jailbroken\n",
                      "type": "boolean"
                    },
                    "name": {
                      "type": "string"
                    },
                    "properties": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "type": "object"
                    },
                    "reasonFrames": {
                      "items": {
                        "properties": {
                          "appCode": {
                            "description": "this line isn't from any framework",
                            "type": "boolean"
                          },
                          "classMethod": {
                            "description": "is a class method",
                            "type": "boolean"
                          },
                          "className": {
                            "description": "name of the class",
                            "type": "string"
                          },
                          "codeFormatted": {
                            "description": "Formatted frame string",
                            "type": "string"
                          },
                          "codeRaw": {
                            "description": "Unformatted Frame string",
                            "type": "string"
                          },
                          "exceptionType": {
                            "description": "Exception type.",
                            "type": "string"
                          },
                          "file": {
                            "description": "name of the file",
                            "type": "string"
                          },
                          "frameworkName": {
                            "description": "Name of the framework",
                            "type": "string"
                          },
                          "language": {
                            "description": "programming language of the frame",
                            "enum": [
                              "JavaScript",
                              "CSharp",
                              "Objective-C",
                              "Objective-Cpp",
                              "Cpp",
                              "C",
                              "Swift",
                              "Java",
                              "Unknown"
                            ],
                            "type": "string"
                          },
                          "line": {
                            "description": "line number",
                            "type": "integer"
                          },
                          "method": {
                            "description": "name of the method",
                            "type": "string"
                          },
                          "methodParams": {
                            "description": "parameters of the frames method",
                            "type": "string"
                          },
                          "osExceptionType": {
                            "description": "OS exception type. (aka. SIGNAL)",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error details."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "errors"
        ],
        "description": "Error details.",
        "operationId": "Errors_GetErrorDetails"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}/download": {
      "get": {
        "parameters": [
          {
            "description": "The id of the error group",
            "in": "path",
            "name": "errorGroupId",
            "required": true,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The id of the error",
            "in": "path",
            "name": "errorId",
            "required": true,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "the format of the crash log",
            "in": "query",
            "name": "format",
            "required": false,
            "schema": {
              "enum": [
                "json",
                "txt"
              ],
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "format": "file",
                  "type": "object"
                }
              }
            },
            "description": "Error details."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "errors"
        ],
        "description": "Download details for a specific error.",
        "operationId": "Errors_ErrorDownload"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}/location": {
      "get": {
        "parameters": [
          {
            "description": "The id of the error group",
            "in": "path",
            "name": "errorGroupId",
            "required": true,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The id of the error",
            "in": "path",
            "name": "errorId",
            "required": true,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "uri": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error location."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "errors"
        ],
        "description": "Error location.",
        "operationId": "Errors_ErrorLocation"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}/stacktrace": {
      "get": {
        "parameters": [
          {
            "description": "The id of the error group",
            "in": "path",
            "name": "errorGroupId",
            "required": true,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The id of the error",
            "in": "path",
            "name": "errorId",
            "required": true,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiagnosticsStackTrace"
                }
              }
            },
            "description": "Error stacktrace details."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "errors"
        ],
        "description": "Error Stacktrace details.",
        "operationId": "Errors_ErrorStackTrace"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/models": {
      "get": {
        "parameters": [
          {
            "description": "The id of the error group",
            "in": "path",
            "name": "errorGroupId",
            "required": true,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The maximum number of results to return. (0 will fetch all results till the max number.)",
            "in": "query",
            "name": "$top",
            "required": false,
            "schema": {
              "default": 30,
              "format": "int64",
              "maximum": 1000,
              "minimum": 0,
              "type": "integer"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errorCount": {
                      "format": "int64",
                      "type": "integer"
                    },
                    "models": {
                      "items": {
                        "properties": {
                          "errorCount": {
                            "description": "count of errors in a model",
                            "format": "int64",
                            "type": "integer"
                          },
                          "modelCode": {
                            "description": "model code",
                            "type": "string"
                          },
                          "modelName": {
                            "description": "model name",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Top Models with percentage in descending order"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "errors"
        ],
        "description": "Top models of the selected error group.",
        "operationId": "Errors_GroupModelCounts"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/operatingSystems": {
      "get": {
        "parameters": [
          {
            "description": "The id of the error group",
            "in": "path",
            "name": "errorGroupId",
            "required": true,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The maximum number of results to return. (0 will fetch all results till the max number.)",
            "in": "query",
            "name": "$top",
            "required": false,
            "schema": {
              "default": 30,
              "format": "int64",
              "maximum": 1000,
              "minimum": 0,
              "type": "integer"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errorCount": {
                      "format": "int64",
                      "type": "integer"
                    },
                    "operatingSystems": {
                      "items": {
                        "properties": {
                          "errorCount": {
                            "description": "count of OS",
                            "format": "int64",
                            "type": "integer"
                          },
                          "operatingSystemName": {
                            "description": "OS name",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Top OSes with percentage in descending order"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "errors"
        ],
        "description": "Top OSes of the selected error group.",
        "operationId": "Errors_GroupOperatingSystemCounts"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/stacktrace": {
      "get": {
        "parameters": [
          {
            "description": "The id of the error group",
            "in": "path",
            "name": "errorGroupId",
            "required": true,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiagnosticsStackTrace"
                }
              }
            },
            "description": "Gets the stack trace for the error group."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "errors"
        ],
        "description": "Gets the stack trace for the error group.",
        "operationId": "Errors_GroupErrorStackTrace"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/errors/errorfreeDevicePercentages": {
      "get": {
        "parameters": [
          {
            "description": "Start date time in data in ISO 8601 date time format",
            "in": "query",
            "name": "start",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Last date time in data in ISO 8601 date time format",
            "in": "query",
            "name": "end",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "in": "query",
            "name": "versions",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "pipeDelimited",
            "x-ms-parameter-location": "method"
          },
          {
            "description": "app build",
            "in": "query",
            "name": "app_build",
            "required": false,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Type of error (handled vs unhandled), excluding All",
            "in": "query",
            "name": "errorType",
            "required": false,
            "schema": {
              "enum": [
                "unhandledError",
                "handledError"
              ],
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "averagePercentage": {
                      "description": "Average percentage",
                      "format": "double",
                      "type": "number"
                    },
                    "dailyPercentages": {
                      "description": "The error-free percentage per day.",
                      "items": {
                        "properties": {
                          "datetime": {
                            "description": "the ISO 8601 datetime",
                            "type": "string"
                          },
                          "percentage": {
                            "description": "percentage of the object",
                            "format": "double",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Percentage of error-free devices by day in the time range and overall percentage of the entire time range."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "errors"
        ],
        "description": "Percentage of error-free devices by day in the time range based on the selected versions. If SingleErrorTypeParameter is not provided, defaults to handlederror. API will return -1 if crash devices is greater than active devices",
        "operationId": "Errors_ErrorFreeDevicePercentages"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/errors/retention_settings": {
      "get": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "retention_in_days": {
                      "enum": [
                        28
                      ],
                      "type": "integer"
                    }
                  },
                  "required": [
                    "retention_in_days"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason."
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "errors"
        ],
        "description": "gets the retention settings in days",
        "operationId": "errors_getRetentionSettings",
        "summary": "gets the retention settings in days"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/errors/search": {
      "get": {
        "parameters": [
          {
            "description": "A filter as specified in OData notation",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "A query string",
            "in": "query",
            "name": "q",
            "required": false,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "It controls the order of sorting",
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "default": "desc",
              "enum": [
                "desc",
                "asc"
              ],
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "It controls the sort based on specified field",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "timestamp",
              "enum": [
                "timestamp",
                "errorGroupId",
                "exceptionClassName",
                "exceptionFile",
                "exceptionLine",
                "exceptionMessage",
                "exceptionMethod",
                "deviceName",
                "osVersion",
                "userId"
              ],
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The maximum number of results to return",
            "in": "query",
            "name": "$top",
            "required": false,
            "schema": {
              "default": 100,
              "format": "int64",
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination.",
            "in": "query",
            "name": "$skip",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int64",
              "minimum": 0,
              "type": "integer"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errors": {
                      "items": {
                        "properties": {
                          "country": {
                            "type": "string"
                          },
                          "deviceName": {
                            "type": "string"
                          },
                          "errorId": {
                            "type": "string"
                          },
                          "hasAttachments": {
                            "type": "boolean"
                          },
                          "hasBreadcrumbs": {
                            "type": "boolean"
                          },
                          "language": {
                            "type": "string"
                          },
                          "osType": {
                            "type": "string"
                          },
                          "osVersion": {
                            "type": "string"
                          },
                          "timestamp": {
                            "format": "date-time",
                            "type": "string"
                          },
                          "userId": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "hasMoreResults": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "List of errors"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "errors"
        ],
        "description": "Errors list based on search parameters",
        "operationId": "Errors_ErrorSearch"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/attachments": {
      "get": {
        "parameters": [
          {
            "description": "The id of the error",
            "in": "path",
            "name": "errorId",
            "required": true,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "appId": {
                        "type": "string"
                      },
                      "attachmentId": {
                        "type": "string"
                      },
                      "blobLocation": {
                        "type": "string"
                      },
                      "contentType": {
                        "type": "string"
                      },
                      "crashId": {
                        "type": "string"
                      },
                      "createdTime": {
                        "format": "date-time",
                        "type": "string"
                      },
                      "fileName": {
                        "type": "string"
                      },
                      "size": {
                        "format": "int64",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "List of error attachments."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "errors"
        ],
        "description": "List error attachments.",
        "operationId": "Errors_ErrorAttachments"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/attachments/{attachmentId}/location": {
      "get": {
        "parameters": [
          {
            "description": "The id of the error",
            "in": "path",
            "name": "errorId",
            "required": true,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Error attachment id.",
            "in": "path",
            "name": "attachmentId",
            "required": true,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "uri": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error attachment location."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "errors"
        ],
        "description": "Error attachment location.",
        "operationId": "Errors_ErrorAttachmentLocation"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/attachments/{attachmentId}/text": {
      "get": {
        "parameters": [
          {
            "description": "The id of the error",
            "in": "path",
            "name": "errorId",
            "required": true,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Error attachment id.",
            "in": "path",
            "name": "attachmentId",
            "required": true,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "content": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error attachment text."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "errors"
        ],
        "description": "Error attachment text.",
        "operationId": "Errors_ErrorAttachmentText"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/sessionLogs": {
      "get": {
        "parameters": [
          {
            "description": "The id of the error",
            "in": "path",
            "name": "errorId",
            "required": true,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Date of data requested",
            "in": "query",
            "name": "date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "exceeded_max_limit": {
                      "description": "indicates if the number of available logs are more than the max allowed return limit(100).",
                      "type": "boolean"
                    },
                    "last_received_log_timestamp": {
                      "description": "the timestamp of the last log received. This value can be used as the start time parameter in the consecutive API call.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "logs": {
                      "description": "the list of logs",
                      "items": {
                        "description": "Generic log.",
                        "properties": {
                          "device": {
                            "description": "Device characteristics.",
                            "properties": {
                              "app_build": {
                                "description": "The app's build number, e.g. 42.\n",
                                "type": "string"
                              },
                              "app_namespace": {
                                "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                                "type": "string"
                              },
                              "app_version": {
                                "description": "Application version name, e.g. 1.1.0\n",
                                "type": "string"
                              },
                              "carrier_code": {
                                "description": "Carrier country code (for mobile devices).\n",
                                "type": "string"
                              },
                              "carrier_country": {
                                "description": "Carrier country.\n",
                                "type": "string"
                              },
                              "carrier_name": {
                                "description": "Carrier name (for mobile devices).\n",
                                "type": "string"
                              },
                              "live_update_deployment_key": {
                                "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                                "type": "string"
                              },
                              "live_update_package_hash": {
                                "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                                "type": "string"
                              },
                              "live_update_release_label": {
                                "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                                "type": "string"
                              },
                              "locale": {
                                "description": "Language code (example: en_US).\n",
                                "type": "string"
                              },
                              "model": {
                                "description": "Device model (example: iPad2,3).\n",
                                "type": "string"
                              },
                              "oem_name": {
                                "description": "Device manufacturer (example: HTC).\n",
                                "type": "string"
                              },
                              "os_api_level": {
                                "description": "API level when applicable like in Android (example: 15).\n",
                                "type": "integer"
                              },
                              "os_build": {
                                "description": "OS build code (example: LMY47X).\n",
                                "type": "string"
                              },
                              "os_name": {
                                "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                                "type": "string"
                              },
                              "os_version": {
                                "description": "OS version (example: 9.3.0).\n",
                                "type": "string"
                              },
                              "screen_size": {
                                "description": "Screen size of the device in pixels (example: 640x480).\n",
                                "type": "string"
                              },
                              "sdk_name": {
                                "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                                "type": "string"
                              },
                              "sdk_version": {
                                "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                                "type": "string"
                              },
                              "time_zone_offset": {
                                "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                                "maximum": 840,
                                "minimum": -840,
                                "type": "integer"
                              },
                              "wrapper_runtime_version": {
                                "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                                "type": "string"
                              },
                              "wrapper_sdk_name": {
                                "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                                "type": "string"
                              },
                              "wrapper_sdk_version": {
                                "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                                "type": "string"
                              }
                            },
                            "required": [
                              "sdk_name",
                              "sdk_version",
                              "os_name",
                              "os_version",
                              "locale",
                              "time_zone_offset",
                              "app_version",
                              "app_build"
                            ],
                            "type": "object"
                          },
                          "event_id": {
                            "description": "Event ID.\n",
                            "type": "string"
                          },
                          "event_name": {
                            "description": "Event name.\n",
                            "type": "string"
                          },
                          "install_id": {
                            "description": "Install ID.\n",
                            "format": "uuid",
                            "type": "string"
                          },
                          "message_id": {
                            "description": "Message ID.\n",
                            "type": "string"
                          },
                          "properties": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "event specific properties.\n",
                            "type": "object"
                          },
                          "session_id": {
                            "description": "Session ID.\n",
                            "format": "uuid",
                            "type": "string"
                          },
                          "timestamp": {
                            "description": "Log creation timestamp.\n",
                            "format": "date-time",
                            "type": "string"
                          },
                          "type": {
                            "description": "Log type.\n",
                            "enum": [
                              "event",
                              "page",
                              "start_session",
                              "error",
                              "push_installation",
                              "start_service",
                              "custom_properties"
                            ],
                            "type": "string"
                          }
                        },
                        "required": [
                          "type",
                          "timestamp",
                          "install_id",
                          "device"
                        ],
                        "type": "object"
                      },
                      "minItems": 0,
                      "type": "array"
                    }
                  },
                  "required": [
                    "logs"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Session logs of specific error"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "errors"
        ],
        "description": "Get session logs by error ID",
        "operationId": "Errors_ListSessionLogs"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/export_configurations": {
      "get": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "List of export configurations",
                  "properties": {
                    "nextLink": {
                      "type": "string"
                    },
                    "total": {
                      "description": "the total count of exports",
                      "format": "int64",
                      "type": "integer"
                    },
                    "values": {
                      "items": {
                        "description": "Export configuration result",
                        "properties": {
                          "creation_time": {
                            "description": "Creation time in ISO 8601 format",
                            "type": "string"
                          },
                          "export_configuration": {
                            "description": "Export configuration",
                            "discriminator": {
                              "propertyName": "type"
                            },
                            "properties": {
                              "backfill": {
                                "description": "Field to determine if backfilling should occur. The default value is true. If set to false export starts from date and time of config creation.",
                                "type": "boolean"
                              },
                              "export_entities": {
                                "items": {
                                  "enum": [
                                    "crashes",
                                    "errors",
                                    "attachments",
                                    "no_logs"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": false,
                                    "name": "ExportEntity"
                                  }
                                },
                                "type": "array"
                              },
                              "resource_group": {
                                "description": "The resource group name on azure",
                                "type": "string"
                              },
                              "resource_name": {
                                "description": "The resource name on azure",
                                "type": "string"
                              },
                              "type": {
                                "description": "Type of export configuration",
                                "enum": [
                                  "blob_storage_connection_string",
                                  "application_insights_instrumentation_key",
                                  "blob_storage_linked_subscription",
                                  "application_insights_linked_subscription"
                                ],
                                "type": "string"
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          },
                          "export_entities": {
                            "items": {
                              "enum": [
                                "crashes",
                                "errors",
                                "attachments",
                                "no_logs"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": false,
                                "name": "ExportEntity"
                              }
                            },
                            "type": "array"
                          },
                          "export_type": {
                            "description": "Target resource type of export configuration",
                            "enum": [
                              "BlobStorage",
                              "AppInsights"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "ExportType"
                            }
                          },
                          "id": {
                            "description": "Export configuration id",
                            "type": "string"
                          },
                          "last_run_time": {
                            "description": "Latest time in ISO 8601 format when export completed successfully",
                            "type": "string"
                          },
                          "resource_group": {
                            "description": "resource group for the storage account/App Insights resource",
                            "type": "string"
                          },
                          "resource_name": {
                            "description": "Storage accout or Appinsights resource name",
                            "type": "string"
                          },
                          "state": {
                            "description": "State of the export job",
                            "enum": [
                              "Enabled",
                              "Disabled",
                              "Pending",
                              "Deleted",
                              "Invalid"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "ExportState"
                            }
                          },
                          "state_info": {
                            "description": "Additional information about export configuration state",
                            "type": "string"
                          }
                        },
                        "required": [
                          "id",
                          "export_type",
                          "creation_time",
                          "state"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "values"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "List export configurations."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "export"
        ],
        "description": "List export configurations.",
        "operationId": "ExportConfigurations_List"
      },
      "post": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Export configuration result",
                  "properties": {
                    "creation_time": {
                      "description": "Creation time in ISO 8601 format",
                      "type": "string"
                    },
                    "export_configuration": {
                      "description": "Export configuration",
                      "discriminator": {
                        "propertyName": "type"
                      },
                      "properties": {
                        "backfill": {
                          "description": "Field to determine if backfilling should occur. The default value is true. If set to false export starts from date and time of config creation.",
                          "type": "boolean"
                        },
                        "export_entities": {
                          "items": {
                            "enum": [
                              "crashes",
                              "errors",
                              "attachments",
                              "no_logs"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "ExportEntity"
                            }
                          },
                          "type": "array"
                        },
                        "resource_group": {
                          "description": "The resource group name on azure",
                          "type": "string"
                        },
                        "resource_name": {
                          "description": "The resource name on azure",
                          "type": "string"
                        },
                        "type": {
                          "description": "Type of export configuration",
                          "enum": [
                            "blob_storage_connection_string",
                            "application_insights_instrumentation_key",
                            "blob_storage_linked_subscription",
                            "application_insights_linked_subscription"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "type": "object"
                    },
                    "export_entities": {
                      "items": {
                        "enum": [
                          "crashes",
                          "errors",
                          "attachments",
                          "no_logs"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "ExportEntity"
                        }
                      },
                      "type": "array"
                    },
                    "export_type": {
                      "description": "Target resource type of export configuration",
                      "enum": [
                        "BlobStorage",
                        "AppInsights"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "ExportType"
                      }
                    },
                    "id": {
                      "description": "Export configuration id",
                      "type": "string"
                    },
                    "last_run_time": {
                      "description": "Latest time in ISO 8601 format when export completed successfully",
                      "type": "string"
                    },
                    "resource_group": {
                      "description": "resource group for the storage account/App Insights resource",
                      "type": "string"
                    },
                    "resource_name": {
                      "description": "Storage accout or Appinsights resource name",
                      "type": "string"
                    },
                    "state": {
                      "description": "State of the export job",
                      "enum": [
                        "Enabled",
                        "Disabled",
                        "Pending",
                        "Deleted",
                        "Invalid"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "ExportState"
                      }
                    },
                    "state_info": {
                      "description": "Additional information about export configuration state",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "export_type",
                    "creation_time",
                    "state"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Create export configuration request successfully received."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "export"
        ],
        "description": "Create new export configuration",
        "operationId": "ExportConfigurations_Create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Export configuration",
                "discriminator": {
                  "propertyName": "type"
                },
                "properties": {
                  "backfill": {
                    "description": "Field to determine if backfilling should occur. The default value is true. If set to false export starts from date and time of config creation.",
                    "type": "boolean"
                  },
                  "export_entities": {
                    "items": {
                      "enum": [
                        "crashes",
                        "errors",
                        "attachments",
                        "no_logs"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "ExportEntity"
                      }
                    },
                    "type": "array"
                  },
                  "resource_group": {
                    "description": "The resource group name on azure",
                    "type": "string"
                  },
                  "resource_name": {
                    "description": "The resource name on azure",
                    "type": "string"
                  },
                  "type": {
                    "description": "Type of export configuration",
                    "enum": [
                      "blob_storage_connection_string",
                      "application_insights_instrumentation_key",
                      "blob_storage_linked_subscription",
                      "application_insights_linked_subscription"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "type"
                ],
                "type": "object"
              }
            }
          },
          "description": "Export configurations.",
          "required": true
        }
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}": {
      "delete": {
        "parameters": [
          {
            "description": "The id of the export configuration.",
            "in": "path",
            "name": "export_configuration_id",
            "required": true,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Export configuration was successfully deleted."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "export"
        ],
        "description": "Delete export configuration.",
        "operationId": "ExportConfigurations_Delete"
      },
      "get": {
        "parameters": [
          {
            "description": "The id of the export configuration.",
            "in": "path",
            "name": "export_configuration_id",
            "required": true,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Export configuration result",
                  "properties": {
                    "creation_time": {
                      "description": "Creation time in ISO 8601 format",
                      "type": "string"
                    },
                    "export_configuration": {
                      "description": "Export configuration",
                      "discriminator": {
                        "propertyName": "type"
                      },
                      "properties": {
                        "backfill": {
                          "description": "Field to determine if backfilling should occur. The default value is true. If set to false export starts from date and time of config creation.",
                          "type": "boolean"
                        },
                        "export_entities": {
                          "items": {
                            "enum": [
                              "crashes",
                              "errors",
                              "attachments",
                              "no_logs"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "ExportEntity"
                            }
                          },
                          "type": "array"
                        },
                        "resource_group": {
                          "description": "The resource group name on azure",
                          "type": "string"
                        },
                        "resource_name": {
                          "description": "The resource name on azure",
                          "type": "string"
                        },
                        "type": {
                          "description": "Type of export configuration",
                          "enum": [
                            "blob_storage_connection_string",
                            "application_insights_instrumentation_key",
                            "blob_storage_linked_subscription",
                            "application_insights_linked_subscription"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "type": "object"
                    },
                    "export_entities": {
                      "items": {
                        "enum": [
                          "crashes",
                          "errors",
                          "attachments",
                          "no_logs"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "ExportEntity"
                        }
                      },
                      "type": "array"
                    },
                    "export_type": {
                      "description": "Target resource type of export configuration",
                      "enum": [
                        "BlobStorage",
                        "AppInsights"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "ExportType"
                      }
                    },
                    "id": {
                      "description": "Export configuration id",
                      "type": "string"
                    },
                    "last_run_time": {
                      "description": "Latest time in ISO 8601 format when export completed successfully",
                      "type": "string"
                    },
                    "resource_group": {
                      "description": "resource group for the storage account/App Insights resource",
                      "type": "string"
                    },
                    "resource_name": {
                      "description": "Storage accout or Appinsights resource name",
                      "type": "string"
                    },
                    "state": {
                      "description": "State of the export job",
                      "enum": [
                        "Enabled",
                        "Disabled",
                        "Pending",
                        "Deleted",
                        "Invalid"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "ExportState"
                      }
                    },
                    "state_info": {
                      "description": "Additional information about export configuration state",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "export_type",
                    "creation_time",
                    "state"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Get export configuration."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "export"
        ],
        "description": "Get export configuration.",
        "operationId": "ExportConfigurations_Get"
      },
      "patch": {
        "parameters": [
          {
            "description": "The id of the export configuration.",
            "in": "path",
            "name": "export_configuration_id",
            "required": true,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Export configuration result",
                  "properties": {
                    "creation_time": {
                      "description": "Creation time in ISO 8601 format",
                      "type": "string"
                    },
                    "export_configuration": {
                      "description": "Export configuration",
                      "discriminator": {
                        "propertyName": "type"
                      },
                      "properties": {
                        "backfill": {
                          "description": "Field to determine if backfilling should occur. The default value is true. If set to false export starts from date and time of config creation.",
                          "type": "boolean"
                        },
                        "export_entities": {
                          "items": {
                            "enum": [
                              "crashes",
                              "errors",
                              "attachments",
                              "no_logs"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "ExportEntity"
                            }
                          },
                          "type": "array"
                        },
                        "resource_group": {
                          "description": "The resource group name on azure",
                          "type": "string"
                        },
                        "resource_name": {
                          "description": "The resource name on azure",
                          "type": "string"
                        },
                        "type": {
                          "description": "Type of export configuration",
                          "enum": [
                            "blob_storage_connection_string",
                            "application_insights_instrumentation_key",
                            "blob_storage_linked_subscription",
                            "application_insights_linked_subscription"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "type": "object"
                    },
                    "export_entities": {
                      "items": {
                        "enum": [
                          "crashes",
                          "errors",
                          "attachments",
                          "no_logs"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "ExportEntity"
                        }
                      },
                      "type": "array"
                    },
                    "export_type": {
                      "description": "Target resource type of export configuration",
                      "enum": [
                        "BlobStorage",
                        "AppInsights"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "ExportType"
                      }
                    },
                    "id": {
                      "description": "Export configuration id",
                      "type": "string"
                    },
                    "last_run_time": {
                      "description": "Latest time in ISO 8601 format when export completed successfully",
                      "type": "string"
                    },
                    "resource_group": {
                      "description": "resource group for the storage account/App Insights resource",
                      "type": "string"
                    },
                    "resource_name": {
                      "description": "Storage accout or Appinsights resource name",
                      "type": "string"
                    },
                    "state": {
                      "description": "State of the export job",
                      "enum": [
                        "Enabled",
                        "Disabled",
                        "Pending",
                        "Deleted",
                        "Invalid"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "ExportState"
                      }
                    },
                    "state_info": {
                      "description": "Additional information about export configuration state",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "export_type",
                    "creation_time",
                    "state"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Export configuration updated successfully."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "export"
        ],
        "description": "Partially update export configuration.",
        "operationId": "ExportConfigurations_PartialUpdate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Export configuration",
                "discriminator": {
                  "propertyName": "type"
                },
                "properties": {
                  "backfill": {
                    "description": "Field to determine if backfilling should occur. The default value is true. If set to false export starts from date and time of config creation.",
                    "type": "boolean"
                  },
                  "export_entities": {
                    "items": {
                      "enum": [
                        "crashes",
                        "errors",
                        "attachments",
                        "no_logs"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "ExportEntity"
                      }
                    },
                    "type": "array"
                  },
                  "resource_group": {
                    "description": "The resource group name on azure",
                    "type": "string"
                  },
                  "resource_name": {
                    "description": "The resource name on azure",
                    "type": "string"
                  },
                  "type": {
                    "description": "Type of export configuration",
                    "enum": [
                      "blob_storage_connection_string",
                      "application_insights_instrumentation_key",
                      "blob_storage_linked_subscription",
                      "application_insights_linked_subscription"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "type"
                ],
                "type": "object"
              }
            }
          },
          "description": "Export configurations.",
          "required": true
        }
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}/disable": {
      "post": {
        "parameters": [
          {
            "description": "The id of the export configuration.",
            "in": "path",
            "name": "export_configuration_id",
            "required": true,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Export configuration was successfully disabled."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "export"
        ],
        "description": "Disable export configuration.",
        "operationId": "ExportConfigurations_Disable"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}/enable": {
      "post": {
        "parameters": [
          {
            "description": "The id of the export configuration.",
            "in": "path",
            "name": "export_configuration_id",
            "required": true,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Export configuration was successfully enabled."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "export"
        ],
        "description": "Enable export configuration.",
        "operationId": "ExportConfigurations_Enable"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/file_asset": {
      "post": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "token": {
                      "type": "string"
                    },
                    "uploadDomain": {
                      "type": "string"
                    },
                    "uploadWindowLocation": {
                      "type": "string"
                    },
                    "urlEncodedToken": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "build"
        ],
        "description": "Create a new asset to upload a file",
        "operationId": "fileAssets_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/invitations": {
      "get": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "app": {
                      "allOf": [
                        {
                          "properties": {
                            "description": {
                              "description": "The description of the app",
                              "type": "string"
                            },
                            "display_name": {
                              "description": "The display name of the app",
                              "type": "string"
                            },
                            "icon_source": {
                              "description": "The string representation of the source of the app's icon",
                              "type": "string"
                            },
                            "icon_url": {
                              "description": "The string representation of the URL pointing to the app's icon",
                              "type": "string"
                            },
                            "id": {
                              "description": "The unique ID (UUID) of the app",
                              "format": "uuid",
                              "type": "string"
                            },
                            "name": {
                              "description": "The name of the app used in URLs",
                              "type": "string"
                            },
                            "os": {
                              "description": "The OS the app will be running on",
                              "enum": [
                                "Android",
                                "iOS",
                                "macOS",
                                "Tizen",
                                "tvOS",
                                "Windows",
                                "Linux",
                                "Custom"
                              ],
                              "type": "string"
                            },
                            "owner": {
                              "description": "The information about the app's owner",
                              "properties": {
                                "avatar_url": {
                                  "description": "The avatar URL of the owner",
                                  "type": "string"
                                },
                                "display_name": {
                                  "description": "The owner's display name",
                                  "type": "string"
                                },
                                "email": {
                                  "description": "The owner's email address",
                                  "type": "string"
                                },
                                "id": {
                                  "description": "The unique id (UUID) of the owner",
                                  "format": "uuid",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "The unique name that used to identify the owner",
                                  "type": "string"
                                },
                                "type": {
                                  "description": "The owner type. Can either be 'org' or 'user'",
                                  "enum": [
                                    "org",
                                    "user"
                                  ],
                                  "type": "string"
                                }
                              },
                              "required": [
                                "id",
                                "display_name",
                                "name",
                                "type"
                              ],
                              "type": "object"
                            },
                            "release_type": {
                              "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
                              "type": "string"
                            }
                          },
                          "required": [
                            "id",
                            "display_name",
                            "name",
                            "os",
                            "owner"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "app_secret": {
                              "description": "A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics",
                              "type": "string"
                            },
                            "azure_subscription": {
                              "properties": {
                                "is_billable": {
                                  "description": "If the subscription can be used for billing",
                                  "type": "boolean"
                                },
                                "is_billing": {
                                  "description": "If the subscription is used for billing",
                                  "type": "boolean"
                                },
                                "is_microsoft_internal": {
                                  "description": "If the subscription is internal Microsoft subscription",
                                  "type": "boolean"
                                },
                                "subscription_id": {
                                  "description": "The azure subscription id",
                                  "format": "uuid",
                                  "type": "string"
                                },
                                "subscription_name": {
                                  "description": "The name of the azure subscription",
                                  "type": "string"
                                },
                                "tenant_id": {
                                  "description": "The tenant id of the azure subscription belongs to",
                                  "format": "uuid",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "subscription_id",
                                "tenant_id",
                                "subscription_name"
                              ],
                              "type": "object"
                            },
                            "created_at": {
                              "description": "The created date of this app",
                              "type": "string"
                            },
                            "member_permissions": {
                              "description": "The permissions of the calling user",
                              "items": {
                                "enum": [
                                  "manager",
                                  "developer",
                                  "viewer",
                                  "tester"
                                ],
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "origin": {
                              "description": "The creation origin of this app",
                              "enum": [
                                "appcenter",
                                "hockeyapp",
                                "codepush"
                              ],
                              "type": "string"
                            },
                            "platform": {
                              "description": "The platform of the app",
                              "enum": [
                                "Java",
                                "Objective-C-Swift",
                                "UWP",
                                "Cordova",
                                "React-Native",
                                "Unity",
                                "Electron",
                                "Xamarin",
                                "WPF",
                                "WinForms",
                                "Unknown",
                                "Custom"
                              ],
                              "type": "string"
                            },
                            "updated_at": {
                              "description": "The last updated date of this app",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      ],
                      "required": [
                        "app_secret",
                        "platform",
                        "origin"
                      ]
                    },
                    "app_count": {
                      "description": "The number of apps in the group",
                      "type": "number"
                    },
                    "distribution_group": {
                      "description": "The organization that owns the distribution group, if it exists",
                      "properties": {
                        "owner": {
                          "description": "The information about the app's owner",
                          "properties": {
                            "avatar_url": {
                              "description": "The avatar URL of the owner",
                              "type": "string"
                            },
                            "display_name": {
                              "description": "The owner's display name",
                              "type": "string"
                            },
                            "email": {
                              "description": "The owner's email address",
                              "type": "string"
                            },
                            "id": {
                              "description": "The unique id (UUID) of the owner",
                              "format": "uuid",
                              "type": "string"
                            },
                            "name": {
                              "description": "The unique name that used to identify the owner",
                              "type": "string"
                            },
                            "type": {
                              "description": "The owner type. Can either be 'org' or 'user'",
                              "enum": [
                                "org",
                                "user"
                              ],
                              "type": "string"
                            }
                          },
                          "required": [
                            "id",
                            "display_name",
                            "name",
                            "type"
                          ],
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "email": {
                      "description": "The email address of the invited user",
                      "type": "string"
                    },
                    "id": {
                      "description": "The unique ID (UUID) of the invitation",
                      "format": "uuid",
                      "type": "string"
                    },
                    "invite_type": {
                      "description": "The invitation type",
                      "enum": [
                        "developer",
                        "tester"
                      ],
                      "type": "string"
                    },
                    "invited_by": {
                      "properties": {
                        "avatar_url": {
                          "description": "The avatar URL of the user",
                          "type": "string"
                        },
                        "can_change_password": {
                          "description": "User is required to send an old password in order to change the password.",
                          "type": "boolean"
                        },
                        "display_name": {
                          "description": "The full name of the user. Might for example be first and last name",
                          "type": "string"
                        },
                        "email": {
                          "description": "The email address of the user",
                          "type": "string"
                        },
                        "id": {
                          "description": "The unique id (UUID) of the user",
                          "format": "uuid",
                          "type": "string"
                        },
                        "name": {
                          "description": "The unique name that is used to identify the user.",
                          "type": "string"
                        },
                        "origin": {
                          "description": "The creation origin of this user",
                          "enum": [
                            "appcenter",
                            "hockeyapp",
                            "codepush"
                          ],
                          "type": "string"
                        },
                        "permissions": {
                          "description": "The permissions the user has for the app",
                          "items": {
                            "enum": [
                              "manager",
                              "developer",
                              "viewer",
                              "tester"
                            ],
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "id",
                        "display_name",
                        "email",
                        "name",
                        "origin"
                      ],
                      "type": "object"
                    },
                    "is_existing_user": {
                      "description": "Indicates whether the invited user already exists",
                      "type": "boolean"
                    },
                    "permissions": {
                      "description": "The permissions the user has for the app",
                      "items": {
                        "enum": [
                          "manager",
                          "developer",
                          "viewer",
                          "tester"
                        ],
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "id",
                    "email",
                    "is_existing_user",
                    "invited_by",
                    "invite_type",
                    "app"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Gets the pending invitations for the app",
        "operationId": "appInvitations_list"
      },
      "post": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Invites a new or existing user to an app",
        "operationId": "appInvitations_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "role": {
                    "description": "The user's role",
                    "enum": [
                      "admin",
                      "collaborator",
                      "member"
                    ],
                    "type": "string"
                  },
                  "user_email": {
                    "description": "The user's email address",
                    "type": "string"
                  }
                },
                "required": [
                  "user_email"
                ],
                "type": "object"
              }
            }
          },
          "description": "The email of the user to invite"
        },
        "x-api-principals": [
          "user"
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/invitations/{user_email}": {
      "delete": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The email of the user to invite",
            "in": "path",
            "name": "user_email",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Removes a user's invitation to an app",
        "operationId": "appInvitations_delete",
        "x-api-principals": [
          "user"
        ]
      },
      "patch": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The email of the user to invite",
            "in": "path",
            "name": "user_email",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Update pending invitation permission",
        "operationId": "appInvitations_updatePermissions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "permissions": {
                    "description": "The permissions the user has for the app in the invitation",
                    "items": {
                      "enum": [
                        "manager",
                        "developer",
                        "viewer"
                      ],
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "permissions"
                ],
                "type": "object"
              }
            }
          },
          "description": "The value to update the user permission in the invite.",
          "required": true
        },
        "x-api-principals": [
          "user"
        ]
      },
      "post": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The email of the user to invite",
            "in": "path",
            "name": "user_email",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "deprecated": true,
        "description": "Invites a new or existing user to an app",
        "operationId": "appInvitations_createByEmail",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "role": {
                    "description": "The role of the user to be added",
                    "enum": [
                      "admin",
                      "collaborator",
                      "member"
                    ],
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "The role of the user to be added"
        },
        "x-api-principals": [
          "user"
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/notifications/emailSettings": {
      "get": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "allOf": [
                        {
                          "description": "Generic result for any alerting API operation",
                          "properties": {
                            "request_id": {
                              "description": "Unique request identifier for tracking",
                              "type": "string"
                            }
                          },
                          "required": [
                            "request_id"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "eTag": {
                              "description": "The ETag of the entity",
                              "type": "string"
                            },
                            "enabled": {
                              "description": "Allows to forcefully disable emails on app or user level",
                              "type": "boolean"
                            },
                            "settings": {
                              "description": "The settings the user has for the app",
                              "items": {
                                "description": "Event Setting",
                                "properties": {
                                  "default_value": {
                                    "description": "Default frequency of event",
                                    "enum": [
                                      "Disabled",
                                      "Individual",
                                      "Daily",
                                      "DailyAndIndividual"
                                    ],
                                    "type": "string"
                                  },
                                  "event_type": {
                                    "description": "Event Name",
                                    "enum": [
                                      "crash_newCrashGroupCreated"
                                    ],
                                    "type": "string"
                                  },
                                  "value": {
                                    "description": "Frequency of event",
                                    "enum": [
                                      "Disabled",
                                      "Individual",
                                      "Daily",
                                      "DailyAndIndividual",
                                      "Default"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "event_type",
                                  "value"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "userId": {
                              "description": "The unique id (UUID) of the user",
                              "type": "string"
                            }
                          },
                          "required": [
                            "enabled",
                            "settings"
                          ],
                          "type": "object"
                        }
                      ],
                      "description": "Alerting Default Email Settings of the user",
                      "type": "object"
                    },
                    {
                      "properties": {
                        "appId": {
                          "description": "Application ID",
                          "type": "string"
                        },
                        "request_id": {
                          "description": "Unique request",
                          "type": "string"
                        },
                        "user_enabled": {
                          "description": "A flag indicating if settings are enabled at user/global level",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "description": "Alerting Email Settings of the user for a particular app",
                  "required": [
                    "user_enabled"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "description": "Generic result for any alerting API operation",
                      "properties": {
                        "request_id": {
                          "description": "Unique request identifier for tracking",
                          "type": "string"
                        }
                      },
                      "required": [
                        "request_id"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "code": {
                          "description": "The status code return by the API. It can be 400 or 404 or 409 or 500.",
                          "enum": [
                            400,
                            404,
                            409,
                            500
                          ],
                          "type": "integer"
                        },
                        "message": {
                          "description": "The reason for the request failed",
                          "type": "string"
                        }
                      },
                      "required": [
                        "code"
                      ],
                      "type": "object"
                    }
                  ],
                  "description": "Alerting service error"
                }
              }
            },
            "description": "Error code with reason"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "alerting"
        ],
        "description": "Get Email notification settings of user for a particular app",
        "operationId": "notifications_getAppEmailSettings",
        "x-api-principals": [
          "user"
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/owner/device_sets": {
      "get": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "description": "The name and devices of the device set",
                    "properties": {
                      "deviceConfigurations": {
                        "items": {
                          "properties": {
                            "id": {
                              "description": "The unique id of the device configuration",
                              "format": "uuid",
                              "type": "string"
                            },
                            "image": {
                              "properties": {
                                "thumb": {
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "model": {
                              "properties": {
                                "formFactor": {
                                  "type": "string"
                                },
                                "manufacturer": {
                                  "type": "string"
                                },
                                "name": {
                                  "type": "string"
                                },
                                "releaseDate": {
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "os": {
                              "type": "string"
                            },
                            "osName": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "id": {
                        "description": "Identifier of the device set",
                        "type": "string"
                      },
                      "manufacturerCount": {
                        "description": "The number of manufacturers in the device set's device selection",
                        "type": "number"
                      },
                      "name": {
                        "description": "Name of the device set",
                        "type": "string"
                      },
                      "osVersionCount": {
                        "description": "The number of os versions in the device set's device selection",
                        "type": "number"
                      },
                      "owner": {
                        "description": "The owner of a device set",
                        "properties": {
                          "displayName": {
                            "description": "Display name of the account",
                            "type": "string"
                          },
                          "id": {
                            "description": "Account ID",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the account",
                            "type": "string"
                          },
                          "type": {
                            "description": "Type of account",
                            "type": "string"
                          }
                        },
                        "required": [
                          "type",
                          "id",
                          "name"
                        ],
                        "title": "Device Set Owner",
                        "type": "object"
                      },
                      "slug": {
                        "description": "Slug of the device set",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "name",
                      "owner",
                      "deviceConfigurations"
                    ],
                    "title": "Device Set",
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "test"
        ],
        "description": "Lists device sets belonging to the owner",
        "operationId": "test_listDeviceSetsOfOwner"
      },
      "post": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "The name and devices of the device set",
                  "properties": {
                    "deviceConfigurations": {
                      "items": {
                        "properties": {
                          "id": {
                            "description": "The unique id of the device configuration",
                            "format": "uuid",
                            "type": "string"
                          },
                          "image": {
                            "properties": {
                              "thumb": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "model": {
                            "properties": {
                              "formFactor": {
                                "type": "string"
                              },
                              "manufacturer": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              },
                              "releaseDate": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "os": {
                            "type": "string"
                          },
                          "osName": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "id": {
                      "description": "Identifier of the device set",
                      "type": "string"
                    },
                    "manufacturerCount": {
                      "description": "The number of manufacturers in the device set's device selection",
                      "type": "number"
                    },
                    "name": {
                      "description": "Name of the device set",
                      "type": "string"
                    },
                    "osVersionCount": {
                      "description": "The number of os versions in the device set's device selection",
                      "type": "number"
                    },
                    "owner": {
                      "description": "The owner of a device set",
                      "properties": {
                        "displayName": {
                          "description": "Display name of the account",
                          "type": "string"
                        },
                        "id": {
                          "description": "Account ID",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the account",
                          "type": "string"
                        },
                        "type": {
                          "description": "Type of account",
                          "type": "string"
                        }
                      },
                      "required": [
                        "type",
                        "id",
                        "name"
                      ],
                      "title": "Device Set Owner",
                      "type": "object"
                    },
                    "slug": {
                      "description": "Slug of the device set",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "owner",
                    "deviceConfigurations"
                  ],
                  "title": "Device Set",
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Details of a failed operation",
                  "properties": {
                    "message": {
                      "description": "Human-readable message that describes the error",
                      "type": "string"
                    },
                    "status": {
                      "description": "Status of the operation",
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "message"
                  ],
                  "title": "Test Cloud Error Details",
                  "type": "object"
                }
              }
            },
            "description": "Invalid list of device IDs or conflicting name"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "test"
        ],
        "description": "Creates a device set belonging to the owner",
        "operationId": "test_createDeviceSetOfOwner",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "The name of the device set and the list of device IDs",
                "properties": {
                  "devices": {
                    "description": "List of device IDs",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "name": {
                    "description": "The name of the device set",
                    "type": "string"
                  }
                },
                "required": [
                  "devices",
                  "name"
                ],
                "title": "Device Set update information",
                "type": "object"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/owner/device_sets/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "The UUID of the device set",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Device set with the given ID was not found"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "test"
        ],
        "description": "Deletes a device set belonging to the owner",
        "operationId": "test_deleteDeviceSetOfOwner"
      },
      "get": {
        "parameters": [
          {
            "description": "The UUID of the device set",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "The name and devices of the device set",
                  "properties": {
                    "deviceConfigurations": {
                      "items": {
                        "properties": {
                          "id": {
                            "description": "The unique id of the device configuration",
                            "format": "uuid",
                            "type": "string"
                          },
                          "image": {
                            "properties": {
                              "thumb": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "model": {
                            "properties": {
                              "formFactor": {
                                "type": "string"
                              },
                              "manufacturer": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              },
                              "releaseDate": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "os": {
                            "type": "string"
                          },
                          "osName": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "id": {
                      "description": "Identifier of the device set",
                      "type": "string"
                    },
                    "manufacturerCount": {
                      "description": "The number of manufacturers in the device set's device selection",
                      "type": "number"
                    },
                    "name": {
                      "description": "Name of the device set",
                      "type": "string"
                    },
                    "osVersionCount": {
                      "description": "The number of os versions in the device set's device selection",
                      "type": "number"
                    },
                    "owner": {
                      "description": "The owner of a device set",
                      "properties": {
                        "displayName": {
                          "description": "Display name of the account",
                          "type": "string"
                        },
                        "id": {
                          "description": "Account ID",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the account",
                          "type": "string"
                        },
                        "type": {
                          "description": "Type of account",
                          "type": "string"
                        }
                      },
                      "required": [
                        "type",
                        "id",
                        "name"
                      ],
                      "title": "Device Set Owner",
                      "type": "object"
                    },
                    "slug": {
                      "description": "Slug of the device set",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "owner",
                    "deviceConfigurations"
                  ],
                  "title": "Device Set",
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "description": "Device set with the given ID was not found"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "test"
        ],
        "description": "Gets a device set belonging to the owner",
        "operationId": "test_getDeviceSetOfOwner"
      },
      "put": {
        "parameters": [
          {
            "description": "The UUID of the device set",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "The name and devices of the device set",
                  "properties": {
                    "deviceConfigurations": {
                      "items": {
                        "properties": {
                          "id": {
                            "description": "The unique id of the device configuration",
                            "format": "uuid",
                            "type": "string"
                          },
                          "image": {
                            "properties": {
                              "thumb": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "model": {
                            "properties": {
                              "formFactor": {
                                "type": "string"
                              },
                              "manufacturer": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              },
                              "releaseDate": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "os": {
                            "type": "string"
                          },
                          "osName": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "id": {
                      "description": "Identifier of the device set",
                      "type": "string"
                    },
                    "manufacturerCount": {
                      "description": "The number of manufacturers in the device set's device selection",
                      "type": "number"
                    },
                    "name": {
                      "description": "Name of the device set",
                      "type": "string"
                    },
                    "osVersionCount": {
                      "description": "The number of os versions in the device set's device selection",
                      "type": "number"
                    },
                    "owner": {
                      "description": "The owner of a device set",
                      "properties": {
                        "displayName": {
                          "description": "Display name of the account",
                          "type": "string"
                        },
                        "id": {
                          "description": "Account ID",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the account",
                          "type": "string"
                        },
                        "type": {
                          "description": "Type of account",
                          "type": "string"
                        }
                      },
                      "required": [
                        "type",
                        "id",
                        "name"
                      ],
                      "title": "Device Set Owner",
                      "type": "object"
                    },
                    "slug": {
                      "description": "Slug of the device set",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "owner",
                    "deviceConfigurations"
                  ],
                  "title": "Device Set",
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Details of a failed operation",
                  "properties": {
                    "message": {
                      "description": "Human-readable message that describes the error",
                      "type": "string"
                    },
                    "status": {
                      "description": "Status of the operation",
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "message"
                  ],
                  "title": "Test Cloud Error Details",
                  "type": "object"
                }
              }
            },
            "description": "Invalid list of device IDs or conflicting name"
          },
          "404": {
            "description": "Device set with the given ID was not found"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "test"
        ],
        "description": "Updates a device set belonging to the owner",
        "operationId": "test_updateDeviceSetOfOwner",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "The name of the device set and the list of device IDs",
                "properties": {
                  "devices": {
                    "description": "List of device IDs",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "name": {
                    "description": "The name of the device set",
                    "type": "string"
                  }
                },
                "required": [
                  "devices",
                  "name"
                ],
                "title": "Device Set update information",
                "type": "object"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/recent_releases": {
      "get": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "description": "Basic information on a release",
                    "properties": {
                      "build": {
                        "description": "Build information for the release\n",
                        "properties": {
                          "branch_name": {
                            "description": "The branch name of the build producing the release",
                            "type": "string"
                          },
                          "commit_hash": {
                            "description": "The commit hash of the build producing the release",
                            "type": "string"
                          },
                          "commit_message": {
                            "description": "The commit message of the build producing the release",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "destination_type": {
                        "description": "OBSOLETE. Will be removed in next version. The destination type.<br>\n<b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br>\n<b>store</b>: The release distributed to external stores and distribution_stores details will be returned. <br>\n",
                        "enum": [
                          "group",
                          "store",
                          "tester"
                        ],
                        "type": "string"
                      },
                      "destinations": {
                        "description": "A list of distribution groups or stores.",
                        "items": {
                          "allOf": [
                            {
                              "allOf": [
                                {
                                  "properties": {
                                    "id": {
                                      "description": "ID identifying a unique distribution group.",
                                      "type": "string"
                                    },
                                    "name": {
                                      "description": "A name identifying a unique distribution group.",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "id"
                                  ],
                                  "type": "object"
                                },
                                {
                                  "properties": {
                                    "is_latest": {
                                      "description": "Is the containing release the latest one in this distribution group.",
                                      "type": "boolean"
                                    }
                                  },
                                  "type": "object"
                                }
                              ]
                            },
                            {
                              "allOf": [
                                {
                                  "properties": {
                                    "id": {
                                      "description": "ID identifying a unique distribution store.",
                                      "type": "string"
                                    },
                                    "name": {
                                      "description": "A name identifying a unique distribution store.",
                                      "type": "string"
                                    },
                                    "publishing_status": {
                                      "description": "publishing status of the release in the store.",
                                      "type": "string"
                                    },
                                    "type": {
                                      "description": "type of the distribution store currently stores type can be intune, googleplay or windows.",
                                      "enum": [
                                        "intune",
                                        "googleplay",
                                        "apple",
                                        "none"
                                      ],
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "id"
                                  ],
                                  "type": "object"
                                },
                                {
                                  "properties": {
                                    "is_latest": {
                                      "description": "Is the containing release the latest one in this distribution store.",
                                      "type": "boolean"
                                    }
                                  },
                                  "type": "object"
                                }
                              ]
                            },
                            {
                              "description": "A unique identifier for a destination. A destination can be identified by an ID (guid) or by a name. DestinationId encapsulates both options. A destination can be either a distribution group or a store.",
                              "properties": {
                                "id": {
                                  "description": "Id of a distribution group / store. The release will be associated with this distribution group / store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name of a distribution group / distribution store. The release will be associated with this distribution group or store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "properties": {
                                "destination_type": {
                                  "description": "Destination can be either store or group.",
                                  "enum": [
                                    "group",
                                    "store",
                                    "tester"
                                  ],
                                  "type": "string"
                                },
                                "display_name": {
                                  "description": "Display name for the group or tester",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          ]
                        },
                        "type": "array"
                      },
                      "distribution_groups": {
                        "description": "OBSOLETE. Will be removed in next version. A list of distribution groups that are associated with this release.",
                        "items": {
                          "allOf": [
                            {
                              "properties": {
                                "id": {
                                  "description": "ID identifying a unique distribution group.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "A name identifying a unique distribution group.",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "id"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "is_latest": {
                                  "description": "Is the containing release the latest one in this distribution group.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            }
                          ]
                        },
                        "type": "array"
                      },
                      "distribution_stores": {
                        "description": "OBSOLETE. Will be removed in next version. A list of distribution stores that are associated with this release.",
                        "items": {
                          "allOf": [
                            {
                              "properties": {
                                "id": {
                                  "description": "ID identifying a unique distribution store.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "A name identifying a unique distribution store.",
                                  "type": "string"
                                },
                                "publishing_status": {
                                  "description": "publishing status of the release in the store.",
                                  "type": "string"
                                },
                                "type": {
                                  "description": "type of the distribution store currently stores type can be intune, googleplay or windows.",
                                  "enum": [
                                    "intune",
                                    "googleplay",
                                    "apple",
                                    "none"
                                  ],
                                  "type": "string"
                                }
                              },
                              "required": [
                                "id"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "is_latest": {
                                  "description": "Is the containing release the latest one in this distribution store.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            }
                          ]
                        },
                        "type": "array"
                      },
                      "enabled": {
                        "description": "This value determines the whether a release currently is enabled or disabled.",
                        "type": "boolean"
                      },
                      "file_extension": {
                        "description": "The file extension of the main (user-uploaded) package file.",
                        "type": "string"
                      },
                      "id": {
                        "description": "ID identifying this unique release.",
                        "type": "integer"
                      },
                      "is_external_build": {
                        "description": "This value determines if a release is external or not.",
                        "type": "boolean"
                      },
                      "origin": {
                        "description": "The release's origin",
                        "enum": [
                          "hockeyapp",
                          "appcenter"
                        ],
                        "type": "string"
                      },
                      "short_version": {
                        "description": "The release's short version.<br>\nFor iOS: CFBundleShortVersionString from info.plist.<br>\nFor Android: android:versionName from AppManifest.xml.\n",
                        "type": "string"
                      },
                      "uploaded_at": {
                        "description": "UTC time in ISO 8601 format of the uploaded time.",
                        "type": "string"
                      },
                      "version": {
                        "description": "The release's version.<br>\nFor iOS: CFBundleVersion from info.plist.<br>\nFor Android: android:versionCode from AppManifest.xml.\n",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "version",
                      "enabled",
                      "uploaded_at",
                      "short_version"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "distribute"
        ],
        "description": "Get the latest release from every distribution group associated with an application.",
        "operationId": "releases_listLatest"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/releases": {
      "get": {
        "parameters": [
          {
            "description": "When *true*, filters out releases that were uploaded but were never distributed. Releases that under deleted distribution groups will not be filtered out.",
            "in": "query",
            "name": "published_only",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "When the scope is 'tester', only includes releases that have been distributed to groups that the user belongs to.",
            "in": "query",
            "name": "scope",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of releases to return",
            "in": "query",
            "name": "top",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "description": "The id of a release",
            "in": "query",
            "name": "releaseId",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "description": "Basic information on a release",
                    "properties": {
                      "build": {
                        "description": "Build information for the release\n",
                        "properties": {
                          "branch_name": {
                            "description": "The branch name of the build producing the release",
                            "type": "string"
                          },
                          "commit_hash": {
                            "description": "The commit hash of the build producing the release",
                            "type": "string"
                          },
                          "commit_message": {
                            "description": "The commit message of the build producing the release",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "destination_type": {
                        "description": "OBSOLETE. Will be removed in next version. The destination type.<br>\n<b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br>\n<b>store</b>: The release distributed to external stores and distribution_stores details will be returned. <br>\n",
                        "enum": [
                          "group",
                          "store",
                          "tester"
                        ],
                        "type": "string"
                      },
                      "destinations": {
                        "description": "A list of distribution groups or stores.",
                        "items": {
                          "allOf": [
                            {
                              "allOf": [
                                {
                                  "properties": {
                                    "id": {
                                      "description": "ID identifying a unique distribution group.",
                                      "type": "string"
                                    },
                                    "name": {
                                      "description": "A name identifying a unique distribution group.",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "id"
                                  ],
                                  "type": "object"
                                },
                                {
                                  "properties": {
                                    "is_latest": {
                                      "description": "Is the containing release the latest one in this distribution group.",
                                      "type": "boolean"
                                    }
                                  },
                                  "type": "object"
                                }
                              ]
                            },
                            {
                              "allOf": [
                                {
                                  "properties": {
                                    "id": {
                                      "description": "ID identifying a unique distribution store.",
                                      "type": "string"
                                    },
                                    "name": {
                                      "description": "A name identifying a unique distribution store.",
                                      "type": "string"
                                    },
                                    "publishing_status": {
                                      "description": "publishing status of the release in the store.",
                                      "type": "string"
                                    },
                                    "type": {
                                      "description": "type of the distribution store currently stores type can be intune, googleplay or windows.",
                                      "enum": [
                                        "intune",
                                        "googleplay",
                                        "apple",
                                        "none"
                                      ],
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "id"
                                  ],
                                  "type": "object"
                                },
                                {
                                  "properties": {
                                    "is_latest": {
                                      "description": "Is the containing release the latest one in this distribution store.",
                                      "type": "boolean"
                                    }
                                  },
                                  "type": "object"
                                }
                              ]
                            },
                            {
                              "description": "A unique identifier for a destination. A destination can be identified by an ID (guid) or by a name. DestinationId encapsulates both options. A destination can be either a distribution group or a store.",
                              "properties": {
                                "id": {
                                  "description": "Id of a distribution group / store. The release will be associated with this distribution group / store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name of a distribution group / distribution store. The release will be associated with this distribution group or store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "properties": {
                                "destination_type": {
                                  "description": "Destination can be either store or group.",
                                  "enum": [
                                    "group",
                                    "store",
                                    "tester"
                                  ],
                                  "type": "string"
                                },
                                "display_name": {
                                  "description": "Display name for the group or tester",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          ]
                        },
                        "type": "array"
                      },
                      "distribution_groups": {
                        "description": "OBSOLETE. Will be removed in next version. A list of distribution groups that are associated with this release.",
                        "items": {
                          "allOf": [
                            {
                              "properties": {
                                "id": {
                                  "description": "ID identifying a unique distribution group.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "A name identifying a unique distribution group.",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "id"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "is_latest": {
                                  "description": "Is the containing release the latest one in this distribution group.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            }
                          ]
                        },
                        "type": "array"
                      },
                      "distribution_stores": {
                        "description": "OBSOLETE. Will be removed in next version. A list of distribution stores that are associated with this release.",
                        "items": {
                          "allOf": [
                            {
                              "properties": {
                                "id": {
                                  "description": "ID identifying a unique distribution store.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "A name identifying a unique distribution store.",
                                  "type": "string"
                                },
                                "publishing_status": {
                                  "description": "publishing status of the release in the store.",
                                  "type": "string"
                                },
                                "type": {
                                  "description": "type of the distribution store currently stores type can be intune, googleplay or windows.",
                                  "enum": [
                                    "intune",
                                    "googleplay",
                                    "apple",
                                    "none"
                                  ],
                                  "type": "string"
                                }
                              },
                              "required": [
                                "id"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "is_latest": {
                                  "description": "Is the containing release the latest one in this distribution store.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            }
                          ]
                        },
                        "type": "array"
                      },
                      "enabled": {
                        "description": "This value determines the whether a release currently is enabled or disabled.",
                        "type": "boolean"
                      },
                      "file_extension": {
                        "description": "The file extension of the main (user-uploaded) package file.",
                        "type": "string"
                      },
                      "id": {
                        "description": "ID identifying this unique release.",
                        "type": "integer"
                      },
                      "is_external_build": {
                        "description": "This value determines if a release is external or not.",
                        "type": "boolean"
                      },
                      "origin": {
                        "description": "The release's origin",
                        "enum": [
                          "hockeyapp",
                          "appcenter"
                        ],
                        "type": "string"
                      },
                      "short_version": {
                        "description": "The release's short version.<br>\nFor iOS: CFBundleShortVersionString from info.plist.<br>\nFor Android: android:versionName from AppManifest.xml.\n",
                        "type": "string"
                      },
                      "uploaded_at": {
                        "description": "UTC time in ISO 8601 format of the uploaded time.",
                        "type": "string"
                      },
                      "version": {
                        "description": "The release's version.<br>\nFor iOS: CFBundleVersion from info.plist.<br>\nFor Android: android:versionCode from AppManifest.xml.\n",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "version",
                      "enabled",
                      "uploaded_at",
                      "short_version"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "distribute"
        ],
        "description": "Return basic information about releases.",
        "operationId": "releases_list"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/releases/filter_by_tester": {
      "get": {
        "parameters": [
          {
            "description": "when *true*, filters out releases that were uploaded but were never distributed. Releases that under deleted distribution groups will not be filtered out.",
            "in": "query",
            "name": "published_only",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "description": "Basic information on a release",
                    "properties": {
                      "build": {
                        "description": "Build information for the release\n",
                        "properties": {
                          "branch_name": {
                            "description": "The branch name of the build producing the release",
                            "type": "string"
                          },
                          "commit_hash": {
                            "description": "The commit hash of the build producing the release",
                            "type": "string"
                          },
                          "commit_message": {
                            "description": "The commit message of the build producing the release",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "destination_type": {
                        "description": "OBSOLETE. Will be removed in next version. The destination type.<br>\n<b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br>\n<b>store</b>: The release distributed to external stores and distribution_stores details will be returned. <br>\n",
                        "enum": [
                          "group",
                          "store",
                          "tester"
                        ],
                        "type": "string"
                      },
                      "destinations": {
                        "description": "A list of distribution groups or stores.",
                        "items": {
                          "allOf": [
                            {
                              "allOf": [
                                {
                                  "properties": {
                                    "id": {
                                      "description": "ID identifying a unique distribution group.",
                                      "type": "string"
                                    },
                                    "name": {
                                      "description": "A name identifying a unique distribution group.",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "id"
                                  ],
                                  "type": "object"
                                },
                                {
                                  "properties": {
                                    "is_latest": {
                                      "description": "Is the containing release the latest one in this distribution group.",
                                      "type": "boolean"
                                    }
                                  },
                                  "type": "object"
                                }
                              ]
                            },
                            {
                              "allOf": [
                                {
                                  "properties": {
                                    "id": {
                                      "description": "ID identifying a unique distribution store.",
                                      "type": "string"
                                    },
                                    "name": {
                                      "description": "A name identifying a unique distribution store.",
                                      "type": "string"
                                    },
                                    "publishing_status": {
                                      "description": "publishing status of the release in the store.",
                                      "type": "string"
                                    },
                                    "type": {
                                      "description": "type of the distribution store currently stores type can be intune, googleplay or windows.",
                                      "enum": [
                                        "intune",
                                        "googleplay",
                                        "apple",
                                        "none"
                                      ],
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "id"
                                  ],
                                  "type": "object"
                                },
                                {
                                  "properties": {
                                    "is_latest": {
                                      "description": "Is the containing release the latest one in this distribution store.",
                                      "type": "boolean"
                                    }
                                  },
                                  "type": "object"
                                }
                              ]
                            },
                            {
                              "description": "A unique identifier for a destination. A destination can be identified by an ID (guid) or by a name. DestinationId encapsulates both options. A destination can be either a distribution group or a store.",
                              "properties": {
                                "id": {
                                  "description": "Id of a distribution group / store. The release will be associated with this distribution group / store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name of a distribution group / distribution store. The release will be associated with this distribution group or store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "properties": {
                                "destination_type": {
                                  "description": "Destination can be either store or group.",
                                  "enum": [
                                    "group",
                                    "store",
                                    "tester"
                                  ],
                                  "type": "string"
                                },
                                "display_name": {
                                  "description": "Display name for the group or tester",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          ]
                        },
                        "type": "array"
                      },
                      "distribution_groups": {
                        "description": "OBSOLETE. Will be removed in next version. A list of distribution groups that are associated with this release.",
                        "items": {
                          "allOf": [
                            {
                              "properties": {
                                "id": {
                                  "description": "ID identifying a unique distribution group.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "A name identifying a unique distribution group.",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "id"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "is_latest": {
                                  "description": "Is the containing release the latest one in this distribution group.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            }
                          ]
                        },
                        "type": "array"
                      },
                      "distribution_stores": {
                        "description": "OBSOLETE. Will be removed in next version. A list of distribution stores that are associated with this release.",
                        "items": {
                          "allOf": [
                            {
                              "properties": {
                                "id": {
                                  "description": "ID identifying a unique distribution store.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "A name identifying a unique distribution store.",
                                  "type": "string"
                                },
                                "publishing_status": {
                                  "description": "publishing status of the release in the store.",
                                  "type": "string"
                                },
                                "type": {
                                  "description": "type of the distribution store currently stores type can be intune, googleplay or windows.",
                                  "enum": [
                                    "intune",
                                    "googleplay",
                                    "apple",
                                    "none"
                                  ],
                                  "type": "string"
                                }
                              },
                              "required": [
                                "id"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "is_latest": {
                                  "description": "Is the containing release the latest one in this distribution store.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            }
                          ]
                        },
                        "type": "array"
                      },
                      "enabled": {
                        "description": "This value determines the whether a release currently is enabled or disabled.",
                        "type": "boolean"
                      },
                      "file_extension": {
                        "description": "The file extension of the main (user-uploaded) package file.",
                        "type": "string"
                      },
                      "id": {
                        "description": "ID identifying this unique release.",
                        "type": "integer"
                      },
                      "is_external_build": {
                        "description": "This value determines if a release is external or not.",
                        "type": "boolean"
                      },
                      "origin": {
                        "description": "The release's origin",
                        "enum": [
                          "hockeyapp",
                          "appcenter"
                        ],
                        "type": "string"
                      },
                      "short_version": {
                        "description": "The release's short version.<br>\nFor iOS: CFBundleShortVersionString from info.plist.<br>\nFor Android: android:versionName from AppManifest.xml.\n",
                        "type": "string"
                      },
                      "uploaded_at": {
                        "description": "UTC time in ISO 8601 format of the uploaded time.",
                        "type": "string"
                      },
                      "version": {
                        "description": "The release's version.<br>\nFor iOS: CFBundleVersion from info.plist.<br>\nFor Android: android:versionCode from AppManifest.xml.\n",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "version",
                      "enabled",
                      "uploaded_at",
                      "short_version"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "distribute"
        ],
        "deprecated": true,
        "description": "Return detailed information about releases avaiable to a tester.",
        "operationId": "releases_availableToTester"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}": {
      "delete": {
        "parameters": [
          {
            "description": "The ID of the release",
            "in": "path",
            "name": "release_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "An app or a release couldn't be found\n"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "An internal error. if delete has partially failed **partially_deleted** error_code will be returned.\n- `partially_deleted`: Release was removed from all distribution groups, but couldn't be deleted from App Center.\n"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "distribute"
        ],
        "description": "Deletes a release.",
        "operationId": "releases_delete"
      },
      "get": {
        "parameters": [
          {
            "description": "The ID of the release, or `latest` to get the latest release from all the distribution groups assigned to the current user.",
            "in": "path",
            "name": "release_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "when supplied, this call will also check if the given UDID is provisioned. Will be ignored for non-iOS platforms. The value will be returned in the property is_udid_provisioned.",
            "in": "query",
            "name": "udid",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The check if the request is from Install page",
            "in": "query",
            "name": "is_install_page",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Details of an uploaded release",
                  "properties": {
                    "android_min_api_level": {
                      "description": "The release's minimum required Android API level.",
                      "type": "string"
                    },
                    "app_display_name": {
                      "description": "The app's display name.",
                      "type": "string"
                    },
                    "app_icon_url": {
                      "description": "A URL to the app's icon.",
                      "type": "string"
                    },
                    "app_name": {
                      "description": "The app's name (extracted from the uploaded release).",
                      "type": "string"
                    },
                    "app_os": {
                      "description": "The app's OS.",
                      "type": "string"
                    },
                    "build": {
                      "description": "Contains metadata about the build that produced the release being uploaded",
                      "properties": {
                        "branch_name": {
                          "description": "The branch name of the build producing the release",
                          "type": "string"
                        },
                        "commit_hash": {
                          "description": "The commit hash of the build producing the release",
                          "type": "string"
                        },
                        "commit_message": {
                          "description": "The commit message of the build producing the release",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "bundle_identifier": {
                      "description": "The identifier of the apps bundle.",
                      "type": "string"
                    },
                    "can_resign": {
                      "description": "In calls that allow passing `udid` in the query string, this value determines if a release can be re-signed. When true, after a re-sign, the tester will be able to install the release from his registered devices. Will not be returned for non-iOS platforms.",
                      "type": "boolean"
                    },
                    "destination_type": {
                      "description": "OBSOLETE. Will be removed in next version. The destination type.<br>\n<b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br>\n<b>store</b>: The release distributed to external stores and distribution_stores details will be returned.<br>\n<b>tester</b>: The release distributed testers details will be returned.<br>\n",
                      "enum": [
                        "group",
                        "store",
                        "tester"
                      ],
                      "type": "string"
                    },
                    "destinations": {
                      "description": "A list of distribution groups or stores.",
                      "items": {
                        "allOf": [
                          {
                            "allOf": [
                              {
                                "properties": {
                                  "id": {
                                    "description": "ID identifying a unique distribution group.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "A name identifying a unique distribution group.",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "is_latest": {
                                    "description": "Is the containing release the latest one in this distribution group.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              }
                            ]
                          },
                          {
                            "allOf": [
                              {
                                "properties": {
                                  "id": {
                                    "description": "ID identifying a unique distribution store.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "A name identifying a unique distribution store.",
                                    "type": "string"
                                  },
                                  "publishing_status": {
                                    "description": "publishing status of the release in the store.",
                                    "type": "string"
                                  },
                                  "type": {
                                    "description": "type of the distribution store currently stores type can be intune, googleplay or windows.",
                                    "enum": [
                                      "intune",
                                      "googleplay",
                                      "apple",
                                      "none"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "is_latest": {
                                    "description": "Is the containing release the latest one in this distribution store.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              }
                            ]
                          },
                          {
                            "description": "A unique identifier for a destination. A destination can be identified by an ID (guid) or by a name. DestinationId encapsulates both options. A destination can be either a distribution group or a store.",
                            "properties": {
                              "id": {
                                "description": "Id of a distribution group / store. The release will be associated with this distribution group / store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of a distribution group / distribution store. The release will be associated with this distribution group or store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          {
                            "properties": {
                              "destination_type": {
                                "description": "Destination can be either store or group.",
                                "enum": [
                                  "group",
                                  "store",
                                  "tester"
                                ],
                                "type": "string"
                              },
                              "display_name": {
                                "description": "Display name for the group or tester",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        ]
                      },
                      "type": "array"
                    },
                    "device_family": {
                      "description": "The release's device family.",
                      "type": "string"
                    },
                    "distribution_groups": {
                      "description": "OBSOLETE. Will be removed in next version. A list of distribution groups that are associated with this release.",
                      "items": {
                        "properties": {
                          "id": {
                            "description": "ID identifying a unique distribution group.",
                            "type": "string"
                          },
                          "name": {
                            "description": "A name identifying a unique distribution group.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "id"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "distribution_stores": {
                      "description": "OBSOLETE. Will be removed in next version. A list of distribution stores that are associated with this release.",
                      "items": {
                        "properties": {
                          "id": {
                            "description": "ID identifying a unique distribution store.",
                            "type": "string"
                          },
                          "name": {
                            "description": "A name identifying a unique distribution store.",
                            "type": "string"
                          },
                          "publishing_status": {
                            "description": "publishing status of the release in the store.",
                            "type": "string"
                          },
                          "type": {
                            "description": "type of the distribution store currently stores type can be intune, googleplay or windows.",
                            "enum": [
                              "intune",
                              "googleplay",
                              "apple",
                              "none"
                            ],
                            "type": "string"
                          }
                        },
                        "required": [
                          "id"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "download_url": {
                      "description": "The URL that hosts the binary for this release.",
                      "type": "string"
                    },
                    "enabled": {
                      "description": "This value determines the whether a release currently is enabled or disabled.",
                      "type": "boolean"
                    },
                    "fingerprint": {
                      "description": "MD5 checksum of the release binary.",
                      "type": "string"
                    },
                    "id": {
                      "description": "ID identifying this unique release.",
                      "type": "integer"
                    },
                    "install_url": {
                      "description": "The href required to install a release on a mobile device. On iOS devices will be prefixed with `itms-services://?action=download-manifest&url=`",
                      "type": "string"
                    },
                    "is_external_build": {
                      "description": "This value determines if a release is external or not.",
                      "type": "boolean"
                    },
                    "is_provisioning_profile_syncing": {
                      "description": "A flag that determines whether the release's provisioning profile is still extracted or not.",
                      "type": "boolean"
                    },
                    "is_udid_provisioned": {
                      "description": "In calls that allow passing `udid` in the query string, this value will hold the provisioning status of that UDID in this release. Will be ignored for non-iOS platforms.",
                      "type": "boolean"
                    },
                    "min_os": {
                      "description": "The release's minimum required operating system.",
                      "type": "string"
                    },
                    "origin": {
                      "description": "The release's origin",
                      "enum": [
                        "hockeyapp",
                        "appcenter"
                      ],
                      "type": "string"
                    },
                    "package_hashes": {
                      "description": "Hashes for the packages.",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "provisioning_profile_expiry_date": {
                      "description": "expiration date of provisioning profile in UTC format.",
                      "type": "string"
                    },
                    "provisioning_profile_name": {
                      "description": "The release's provisioning profile name.",
                      "type": "string"
                    },
                    "provisioning_profile_type": {
                      "description": "The type of the provisioning profile for the requested app version.",
                      "enum": [
                        "adhoc",
                        "enterprise",
                        "other"
                      ],
                      "type": "string"
                    },
                    "release_notes": {
                      "description": "The release's release notes.",
                      "type": "string"
                    },
                    "secondary_download_url": {
                      "description": "The URL that hosts the secondary binary for this release, such as the apk file for aab releases.",
                      "type": "string"
                    },
                    "short_version": {
                      "description": "The release's short version.<br>\nFor iOS: CFBundleShortVersionString from info.plist.\nFor Android: android:versionName from AppManifest.xml.\n",
                      "type": "string"
                    },
                    "size": {
                      "description": "The release's size in bytes.",
                      "type": "integer"
                    },
                    "status": {
                      "description": "Status of the release.",
                      "type": "string"
                    },
                    "uploaded_at": {
                      "description": "UTC time in ISO 8601 format of the uploaded time.",
                      "type": "string"
                    },
                    "version": {
                      "description": "The release's version.<br>\nFor iOS: CFBundleVersion from info.plist.\nFor Android: android:versionCode from AppManifest.xml.\n",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "app_name",
                    "app_display_name",
                    "uploaded_at",
                    "version",
                    "short_version",
                    "app_icon_url",
                    "enabled"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "`release_id` is not an integer or the string `latest`.\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error codes:\n- `not_found` - A release or an app can't be found.\n- `no_releases_for_user` - No releases available for that user (will only be returned when `release_id` is `latest`)\n"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "distribute"
        ],
        "description": "Get a release with id `release_id`. If `release_id` is `latest`, return the latest release that was distributed to the current user (from all the distribution groups).",
        "operationId": "releases_getLatestByUser"
      },
      "patch": {
        "parameters": [
          {
            "description": "The ID of the release",
            "in": "path",
            "name": "release_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response for updating release details",
                  "properties": {
                    "release_notes": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "destinations": {
                          "items": {
                            "properties": {
                              "code": {
                                "description": "Error Codes:<br>\n<b>invalid_store_secrets</b>: While distributing to store, secrets provided for store are not valid.<br>\n<b>store_release_bad_request</b>: Proper package release details for the store is not provided.<br>\n<b>store_release_unauthorized</b>: User is not authorized to publish to store due to invalid developer credentials.<br>\n<b>store_release_forbidden</b>: Publish to store is forbidden due to conflicts/errors in the release version and already existing version in the store.<br>\n<b>store_release_promotion</b>: Release already distributed, promoting a release is not supported.<br>\n<b>store_track_deactivated</b>: One or more tracks would be deactivated with this release. This is not supported yet.<br>\n<b>store_release_not_found</b>: App with the given package name is not found in the store.<br>\n<b>store_release_not_available</b>: The release is not available.<br>\n<b>internal_server_error</b>: Failed to distribute to a destination due to an internal server error.\n",
                                "type": "string"
                              },
                              "id": {
                                "type": "string"
                              },
                              "message": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "mandatory_update": {
                          "type": "boolean"
                        },
                        "release_notes": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Failure"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Release not found"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "distribute"
        ],
        "description": "Updates a release.",
        "operationId": "releases_update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "A request containing information for updating a release.",
                "properties": {
                  "build": {
                    "description": "Contains metadata about the build that produced the release being uploaded",
                    "properties": {
                      "branch_name": {
                        "description": "The branch name of the build producing the release",
                        "type": "string"
                      },
                      "commit_hash": {
                        "description": "The commit hash of the build producing the release",
                        "type": "string"
                      },
                      "commit_message": {
                        "description": "The commit message of the build producing the release",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "destination_id": {
                    "description": "OBSOLETE. Will be removed in future releases - use destinations instead. Id of a destination. The release will be associated with this destination. If the destination doesn't exist a 400 is returned. If both destination name and id are passed, the id is taking precedence.",
                    "type": "string"
                  },
                  "destination_name": {
                    "description": "OBSOLETE. Will be removed in future releases - use destinations instead. Name of a destination. The release will be associated with this destination. If the destination doesn't exist a 400 is returned. If both distribution group name and id are passed, the id is taking precedence.",
                    "type": "string"
                  },
                  "destination_type": {
                    "description": "Not used anymore.",
                    "type": "string"
                  },
                  "destinations": {
                    "description": "Distribute this release under the following list of destinations (store groups or distribution groups).",
                    "items": {
                      "description": "A unique identifier for a destination. A destination can be identified by an ID (guid) or by a name. DestinationId encapsulates both options. A destination can be either a distribution group or a store.",
                      "properties": {
                        "id": {
                          "description": "Id of a distribution group / store. The release will be associated with this distribution group / store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of a distribution group / distribution store. The release will be associated with this distribution group or store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "distribution_group_id": {
                    "description": "OBSOLETE. Will be removed in future releases - use destinations instead. Id of a distribution group. The release will be associated with this distribution group. If the distribution group doesn't exist a 400 is returned. If both distribution group name and id are passed, the id is taking precedence.",
                    "type": "string"
                  },
                  "distribution_group_name": {
                    "description": "OBSOLETE. Will be removed in future releases - use destinations instead. Name of a distribution group. The release will be associated with this distribution group. If the distribution group doesn't exist a 400 is returned. If both distribution group name and id are passed, the id is taking precedence.",
                    "type": "string"
                  },
                  "mandatory_update": {
                    "description": "A boolean which determines whether this version should be a mandatory update or not.",
                    "type": "boolean"
                  },
                  "metadata": {
                    "description": "An object containing all the release metadata.",
                    "properties": {
                      "dsa_signature": {
                        "description": "dsa signature of the release for the sparkle feed.",
                        "type": "string"
                      },
                      "ed_signature": {
                        "description": "edDSA signature of the release for the sparkle feed.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "notify_testers": {
                    "default": true,
                    "description": "A boolean which determines whether to notify testers of a new release, default to true.",
                    "type": "boolean"
                  },
                  "release_notes": {
                    "description": "Release notes for this release.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "text/plain": {
              "schema": {
                "description": "A request containing information for updating a release.",
                "properties": {
                  "build": {
                    "description": "Contains metadata about the build that produced the release being uploaded",
                    "properties": {
                      "branch_name": {
                        "description": "The branch name of the build producing the release",
                        "type": "string"
                      },
                      "commit_hash": {
                        "description": "The commit hash of the build producing the release",
                        "type": "string"
                      },
                      "commit_message": {
                        "description": "The commit message of the build producing the release",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "destination_id": {
                    "description": "OBSOLETE. Will be removed in future releases - use destinations instead. Id of a destination. The release will be associated with this destination. If the destination doesn't exist a 400 is returned. If both destination name and id are passed, the id is taking precedence.",
                    "type": "string"
                  },
                  "destination_name": {
                    "description": "OBSOLETE. Will be removed in future releases - use destinations instead. Name of a destination. The release will be associated with this destination. If the destination doesn't exist a 400 is returned. If both distribution group name and id are passed, the id is taking precedence.",
                    "type": "string"
                  },
                  "destination_type": {
                    "description": "Not used anymore.",
                    "type": "string"
                  },
                  "destinations": {
                    "description": "Distribute this release under the following list of destinations (store groups or distribution groups).",
                    "items": {
                      "description": "A unique identifier for a destination. A destination can be identified by an ID (guid) or by a name. DestinationId encapsulates both options. A destination can be either a distribution group or a store.",
                      "properties": {
                        "id": {
                          "description": "Id of a distribution group / store. The release will be associated with this distribution group / store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of a distribution group / distribution store. The release will be associated with this distribution group or store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "distribution_group_id": {
                    "description": "OBSOLETE. Will be removed in future releases - use destinations instead. Id of a distribution group. The release will be associated with this distribution group. If the distribution group doesn't exist a 400 is returned. If both distribution group name and id are passed, the id is taking precedence.",
                    "type": "string"
                  },
                  "distribution_group_name": {
                    "description": "OBSOLETE. Will be removed in future releases - use destinations instead. Name of a distribution group. The release will be associated with this distribution group. If the distribution group doesn't exist a 400 is returned. If both distribution group name and id are passed, the id is taking precedence.",
                    "type": "string"
                  },
                  "mandatory_update": {
                    "description": "A boolean which determines whether this version should be a mandatory update or not.",
                    "type": "boolean"
                  },
                  "metadata": {
                    "description": "An object containing all the release metadata.",
                    "properties": {
                      "dsa_signature": {
                        "description": "dsa signature of the release for the sparkle feed.",
                        "type": "string"
                      },
                      "ed_signature": {
                        "description": "edDSA signature of the release for the sparkle feed.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "notify_testers": {
                    "default": true,
                    "description": "A boolean which determines whether to notify testers of a new release, default to true.",
                    "type": "boolean"
                  },
                  "release_notes": {
                    "description": "Release notes for this release.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "The release information.",
          "required": true
        }
      },
      "put": {
        "parameters": [
          {
            "description": "The ID of the release",
            "in": "path",
            "name": "release_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response for updating a release",
                  "properties": {
                    "destinations": {
                      "items": {
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "enabled": {
                      "type": "boolean"
                    },
                    "mandatory_update": {
                      "type": "boolean"
                    },
                    "provisioning_status_url": {
                      "type": "string"
                    },
                    "release_notes": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "destinations": {
                          "items": {
                            "properties": {
                              "code": {
                                "description": "Error Codes:<br>\n<b>invalid_store_secrets</b>: While distributing to store, secrets provided for store are not valid.<br>\n<b>store_release_bad_request</b>: Proper package release details for the store is not provided.<br>\n<b>store_release_unauthorized</b>: User is not authorized to publish to store due to invalid developer credentials.<br>\n<b>store_release_forbidden</b>: Publish to store is forbidden due to conflicts/errors in the release version and already existing version in the store.<br>\n<b>store_release_promotion</b>: Release already distributed, promoting a release is not supported.<br>\n<b>store_track_deactivated</b>: One or more tracks would be deactivated with this release. This is not supported yet.<br>\n<b>store_release_not_found</b>: App with the given package name is not found in the store.<br>\n<b>store_release_not_available</b>: The release is not available.<br>\n<b>internal_server_error</b>: Failed to distribute to a destination due to an internal server error.\n",
                                "type": "string"
                              },
                              "id": {
                                "type": "string"
                              },
                              "message": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "mandatory_update": {
                          "type": "boolean"
                        },
                        "release_notes": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Failure"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Release not found"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "distribute"
        ],
        "description": "Update details of a release.",
        "operationId": "releases_updateDetails",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "A request containing information for updating details of a release",
                "properties": {
                  "build": {
                    "description": "Contains metadata about the build that produced the release being uploaded",
                    "properties": {
                      "branch_name": {
                        "description": "The branch name of the build producing the release",
                        "type": "string"
                      },
                      "commit_hash": {
                        "description": "The commit hash of the build producing the release",
                        "type": "string"
                      },
                      "commit_message": {
                        "description": "The commit message of the build producing the release",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "enabled": {
                    "description": "Toggle this release to be enable distribute/download or not.",
                    "type": "boolean"
                  },
                  "release_notes": {
                    "description": "Release notes for this release.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "The release information.",
          "required": true
        }
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/groups": {
      "post": {
        "parameters": [
          {
            "description": "The ID of the release",
            "in": "path",
            "name": "release_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "properties": {
                        "id": {
                          "description": "Unique id for the release destination",
                          "type": "string"
                        }
                      },
                      "required": [
                        "id"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "mandatory_update": {
                          "description": "Flag to mark the release for the provided destinations as mandatory",
                          "type": "boolean"
                        },
                        "provisioning_status_url": {
                          "description": "The url to check provisioning status.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "mandatory_update"
                      ],
                      "type": "object"
                    }
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Failure"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Release not found"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "distribute"
        ],
        "description": "Distributes a release to a group",
        "operationId": "releases_addDistributionGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "properties": {
                      "id": {
                        "description": "Unique id of the release destination",
                        "format": "uuid",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  {
                    "properties": {
                      "mandatory_update": {
                        "description": "Flag to mark the release for the provided destinations as mandatory",
                        "type": "boolean"
                      },
                      "notify_testers": {
                        "default": true,
                        "description": "Flag to enable or disable notifications to testers",
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  }
                ],
                "type": "object"
              }
            }
          },
          "description": "The release information.",
          "required": true
        }
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/groups/{group_id}": {
      "delete": {
        "parameters": [
          {
            "description": "The ID of the release",
            "in": "path",
            "name": "release_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The id of the distribution group",
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Distribution group destination can't be found.\n"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "distribute"
        ],
        "description": "Delete the given distribution group from the release",
        "operationId": "releases_deleteDistributionGroup"
      },
      "put": {
        "parameters": [
          {
            "description": "The ID of the release",
            "in": "path",
            "name": "release_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The id of the releases destination",
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "A destination can't be found.\n"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "distribute"
        ],
        "description": "Update details about the specified distribution group associated with the release",
        "operationId": "releases_putDistributionGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "mandatory_update": {
                    "description": "Whether a release is mandatory for the given destination",
                    "type": "boolean"
                  }
                },
                "required": [
                  "mandatory_update"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/provisioning_profile": {
      "get": {
        "parameters": [
          {
            "description": "The release_id",
            "in": "path",
            "name": "release_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProvisioningProfileResponse"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "The app's OS is not iOS."
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "distribute"
        ],
        "description": "Return information about the provisioning profile. Only available for iOS.",
        "operationId": "provisioning_profile"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/stores": {
      "post": {
        "parameters": [
          {
            "description": "The ID of the release",
            "in": "path",
            "name": "release_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "description": "Unique id for the release destination",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Failure"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Release not found"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "distribute"
        ],
        "description": "Distributes a release to a store",
        "operationId": "releases_addStore",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "description": "Unique id of the release destination",
                    "format": "uuid",
                    "type": "string"
                  }
                },
                "required": [
                  "id"
                ],
                "type": "object"
              }
            }
          },
          "description": "The release information.",
          "required": true
        }
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/stores/{store_id}": {
      "delete": {
        "parameters": [
          {
            "description": "The ID of the release",
            "in": "path",
            "name": "release_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The id of the distribution store",
            "in": "path",
            "name": "store_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Distribution store destination can't be found.\n"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "distribute"
        ],
        "description": "Delete the given distribution store from the release",
        "operationId": "releases_deleteDistributionStore"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/testers": {
      "post": {
        "parameters": [
          {
            "description": "The ID of the release",
            "in": "path",
            "name": "release_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "properties": {
                        "id": {
                          "description": "Unique id for the release destination",
                          "type": "string"
                        }
                      },
                      "required": [
                        "id"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "mandatory_update": {
                          "description": "Flag to mark the release for the provided destinations as mandatory",
                          "type": "boolean"
                        },
                        "provisioning_status_url": {
                          "description": "The url to check provisioning status.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "mandatory_update"
                      ],
                      "type": "object"
                    }
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Failure"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Release not found"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "distribute"
        ],
        "description": "Distributes a release to a user",
        "operationId": "releases_addTesters",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "email": {
                    "description": "Tester's email address",
                    "type": "string"
                  },
                  "mandatory_update": {
                    "description": "Flag to mark the release for the provided destinations as mandatory",
                    "type": "boolean"
                  },
                  "notify_testers": {
                    "default": true,
                    "description": "Flag to enable or disable notifications to testers",
                    "type": "boolean"
                  }
                },
                "required": [
                  "email"
                ],
                "type": "object"
              }
            }
          },
          "description": "The release information.",
          "required": true
        }
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/testers/{tester_id}": {
      "delete": {
        "parameters": [
          {
            "description": "The ID of the release",
            "in": "path",
            "name": "release_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The id of the tester",
            "in": "path",
            "name": "tester_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Tester can't be found\n"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "distribute"
        ],
        "description": "Delete the given tester from the release",
        "operationId": "releases_deleteDistributionTester"
      },
      "put": {
        "parameters": [
          {
            "description": "The ID of the release",
            "in": "path",
            "name": "release_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The id of the tester",
            "in": "path",
            "name": "tester_id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "A destination can't be found.\n"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "distribute"
        ],
        "description": "Update details about the specified tester associated with the release",
        "operationId": "releases_putDistributionTester",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "mandatory_update": {
                    "description": "Whether a release is mandatory for the given destination",
                    "type": "boolean"
                  }
                },
                "required": [
                  "mandatory_update"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/update_devices/{resign_id}": {
      "get": {
        "parameters": [
          {
            "description": "The ID of the release.",
            "in": "path",
            "name": "release_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the resign operation.",
            "in": "path",
            "name": "resign_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A boolean value that indicates if the provisioning profile should be return in addition to the status. When set to true, the provisioning profile will be returned only when status is 'complete' or 'preparing_for_testers'.",
            "in": "query",
            "name": "include_provisioning_profile",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "The status of the resign operation.",
                  "properties": {
                    "error_code": {
                      "description": "Error code for any error that occured during the resigning operation.",
                      "type": "string"
                    },
                    "error_message": {
                      "description": "Error message for any error that occured during the resigning operation.",
                      "type": "string"
                    },
                    "status": {
                      "description": "The status of the resign",
                      "type": "string"
                    }
                  },
                  "required": [
                    "status"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "<b>not_found</b>: A distribution group can't be found.\n"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "distribute"
        ],
        "description": "Returns the resign status to the caller",
        "operationId": "devices_getReleaseUpdateDevicesStatus"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/repo_config": {
      "delete": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "build"
        ],
        "description": "Removes the configuration for the repository",
        "operationId": "repositoryConfigurations_delete"
      },
      "get": {
        "parameters": [
          {
            "description": "Include inactive configurations if none are active",
            "in": "query",
            "name": "includeInactive",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A list of repo configurations",
                  "items": {
                    "allOf": [
                      {
                        "allOf": [
                          {
                            "properties": {
                              "external_user_id": {
                                "description": "The external user id from the repository provider. Required for GitLab.com repositories",
                                "type": "string"
                              },
                              "repo_id": {
                                "description": "The repository id from the repository provider. Required for repositories connected from GitHub App and GitLab.com",
                                "type": "string"
                              },
                              "repo_url": {
                                "description": "The repository's git url, must be a HTTPS URL",
                                "example": "https://github.com/foo/bar.git",
                                "type": "string"
                              },
                              "service_connection_id": {
                                "description": "The id of the service connection (private). Required for GitLab self-hosted repositories",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "properties": {
                          "installation_id": {
                            "description": "The GitHub App Installation id. Required for repositories connected from GitHub App",
                            "type": "string"
                          }
                        },
                        "required": [
                          "repo_url"
                        ],
                        "type": "object"
                      }
                    ],
                    "properties": {
                      "id": {
                        "description": "Repository configuration identifier",
                        "type": "string"
                      },
                      "state": {
                        "description": "State of the configuration",
                        "enum": [
                          "unauthorized",
                          "inactive",
                          "active"
                        ],
                        "type": "string"
                      },
                      "type": {
                        "description": "Type of repository",
                        "type": "string"
                      },
                      "user_email": {
                        "description": "Email of the user who linked the repository",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "type",
                      "state",
                      "repo_url"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "List of repository configurations"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "build"
        ],
        "description": "Returns the repository build configuration status of the app",
        "operationId": "repositoryConfigurations_list"
      },
      "post": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "build"
        ],
        "description": "Configures the repository for build",
        "operationId": "repositoryConfigurations_createOrUpdate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "properties": {
                      "external_user_id": {
                        "description": "The external user id from the repository provider. Required for GitLab.com repositories",
                        "type": "string"
                      },
                      "repo_id": {
                        "description": "The repository id from the repository provider. Required for repositories connected from GitHub App and GitLab.com",
                        "type": "string"
                      },
                      "repo_url": {
                        "description": "The repository's git url, must be a HTTPS URL",
                        "example": "https://github.com/foo/bar.git",
                        "type": "string"
                      },
                      "service_connection_id": {
                        "description": "The id of the service connection (private). Required for GitLab self-hosted repositories",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                ],
                "properties": {
                  "installation_id": {
                    "description": "The GitHub App Installation id. Required for repositories connected from GitHub App",
                    "type": "string"
                  }
                },
                "required": [
                  "repo_url"
                ],
                "type": "object"
              }
            }
          },
          "description": "The repository information",
          "required": true
        },
        "x-api-principals": [
          "user"
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/source_hosts/{source_host}/repositories": {
      "get": {
        "parameters": [
          {
            "description": "The source host",
            "in": "path",
            "name": "source_host",
            "required": true,
            "schema": {
              "enum": [
                "github",
                "bitbucket",
                "vsts",
                "gitlab"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filter repositories only for specified account and project, \"vstsProjectId\" is required",
            "in": "query",
            "name": "vstsAccountName",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter repositories only for specified account and project, \"vstsAccountName\" is required",
            "in": "query",
            "name": "vstsProjectId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The id of the service connection (private). Required for GitLab self-hosted repositories",
            "in": "query",
            "name": "service_connection_id",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The selected form of the object",
            "in": "query",
            "name": "form",
            "required": false,
            "schema": {
              "enum": [
                "lite",
                "full"
              ],
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A list of source repositories",
                  "items": {
                    "description": "The source repository",
                    "properties": {
                      "clone_url": {
                        "description": "URL used to clone the repository",
                        "type": "string"
                      },
                      "name": {
                        "description": "The repository name",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "build"
        ],
        "description": "Gets the repositories available from the source code host",
        "operationId": "repositories_list",
        "x-api-principals": [
          "user"
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/store_service_status": {
      "get": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "service": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "valid_until": {
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Success. Availability for store service status is stored in response schema."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "distribute"
        ],
        "description": "Application specific store service status",
        "operationId": "storeNotifications_getNotificationByAppId"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/subscriptions": {
      "get": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Subscription information",
                  "properties": {
                    "active": {
                      "description": "Is the subscription currently active?",
                      "type": "boolean"
                    },
                    "concurrentDevicesLimit": {
                      "description": "Customer limits on concurrent devices",
                      "type": "integer"
                    },
                    "daysLeft": {
                      "description": "The number of days left in the subscription",
                      "type": "number"
                    },
                    "endsAt": {
                      "description": "The date the subscription will end or ended",
                      "format": "dateTime",
                      "type": "string"
                    },
                    "id": {
                      "description": "Id of the subscription",
                      "format": "uuid",
                      "type": "string"
                    },
                    "runningDevices": {
                      "description": "Current device concurrency utilization",
                      "type": "integer"
                    },
                    "startsAt": {
                      "description": "The date the subscription began",
                      "format": "dateTime",
                      "type": "string"
                    },
                    "tier": {
                      "properties": {
                        "name": {
                          "description": "The name of the tier",
                          "type": "string"
                        }
                      },
                      "title": "Subscription Tier",
                      "type": "object"
                    }
                  },
                  "title": "Subscription",
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "test"
        ],
        "description": "Get information about the currently active subscriptions, if any",
        "operationId": "test_getSubscriptions"
      },
      "post": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Subscription information",
                  "properties": {
                    "active": {
                      "description": "Is the subscription currently active?",
                      "type": "boolean"
                    },
                    "concurrentDevicesLimit": {
                      "description": "Customer limits on concurrent devices",
                      "type": "integer"
                    },
                    "daysLeft": {
                      "description": "The number of days left in the subscription",
                      "type": "number"
                    },
                    "endsAt": {
                      "description": "The date the subscription will end or ended",
                      "format": "dateTime",
                      "type": "string"
                    },
                    "id": {
                      "description": "Id of the subscription",
                      "format": "uuid",
                      "type": "string"
                    },
                    "runningDevices": {
                      "description": "Current device concurrency utilization",
                      "type": "integer"
                    },
                    "startsAt": {
                      "description": "The date the subscription began",
                      "format": "dateTime",
                      "type": "string"
                    },
                    "tier": {
                      "properties": {
                        "name": {
                          "description": "The name of the tier",
                          "type": "string"
                        }
                      },
                      "title": "Subscription Tier",
                      "type": "object"
                    }
                  },
                  "title": "Subscription",
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "test"
        ],
        "description": "Accept a free trial subscription",
        "operationId": "test_createSubscription"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/symbol_uploads": {
      "get": {
        "parameters": [
          {
            "description": "The maximum number of results to return.",
            "in": "query",
            "name": "top",
            "required": false,
            "schema": {
              "default": 30,
              "format": "int64",
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Filter results by the current status of a symbol upload: * all: all states in the symbol upload process. Includes created, aborted, committed, processing, indexed and failed states * uploaded: all states after package is uploaded. Includes committed, processing, indexed and failed states * processed: symbol upload processing is completed. Includes indexed and failed states.\n",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "enum": [
                "all",
                "uploaded",
                "processed"
              ],
              "type": "string"
            }
          },
          {
            "description": "The type of symbols",
            "in": "query",
            "name": "symbol_type",
            "required": false,
            "schema": {
              "enum": [
                "AndroidProguard",
                "Apple",
                "Breakpad",
                "JavaScript",
                "UWP"
              ],
              "type": "string"
            }
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A set of symbol upload entities",
                  "items": {
                    "description": "A single symbol upload entity",
                    "properties": {
                      "app_id": {
                        "description": "The application that this symbol upload belongs to",
                        "type": "string"
                      },
                      "file_name": {
                        "description": "The file name for the symbol upload",
                        "type": "string"
                      },
                      "file_size": {
                        "description": "The size of the file in Mebibytes. This may be 0 until the status is indexed",
                        "type": "number"
                      },
                      "origin": {
                        "description": "The origin of the symbol upload",
                        "enum": [
                          "User",
                          "System"
                        ],
                        "type": "string"
                      },
                      "status": {
                        "description": "The current status for the symbol upload",
                        "enum": [
                          "created",
                          "committed",
                          "aborted",
                          "processing",
                          "indexed",
                          "failed"
                        ],
                        "type": "string"
                      },
                      "symbol_type": {
                        "description": "The type of the symbol for the current symbol upload",
                        "enum": [
                          "Apple",
                          "JavaScript",
                          "Breakpad",
                          "AndroidProguard",
                          "UWP"
                        ],
                        "type": "string"
                      },
                      "symbol_upload_id": {
                        "description": "The id for the current symbol upload",
                        "type": "string"
                      },
                      "symbols_uploaded": {
                        "description": "The symbols found in the upload. This may be empty until the status is indexed",
                        "items": {
                          "properties": {
                            "platform": {
                              "description": "The platform the symbol is associated with",
                              "type": "string"
                            },
                            "symbol_id": {
                              "description": "The symbol id of the symbol binary",
                              "type": "string"
                            }
                          },
                          "required": [
                            "symbol_id",
                            "platform"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "timestamp": {
                        "description": "When the symbol upload was committed, or last transaction time if not committed",
                        "format": "date-time",
                        "type": "string"
                      },
                      "user": {
                        "description": "User information of the one who intitiated the symbol upload",
                        "properties": {
                          "display_name": {
                            "description": "The full name of the user. Might for example be first and last name",
                            "type": "string"
                          },
                          "email": {
                            "description": "The email of the user",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "required": [
                      "symbol_upload_id",
                      "app_id",
                      "status",
                      "symbol_type"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Internal error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "crash"
        ],
        "description": "Gets a list of all uploads for the specified application",
        "operationId": "symbolUploads_list"
      },
      "post": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A response containing information pertaining to starting a symbol upload process",
                  "properties": {
                    "expiration_date": {
                      "description": "Describes how long the upload_url is valid",
                      "format": "date-time",
                      "type": "string"
                    },
                    "symbol_upload_id": {
                      "description": "The id for the current upload",
                      "type": "string"
                    },
                    "upload_url": {
                      "description": "The URL where the client needs to upload the symbol blob to",
                      "type": "string"
                    }
                  },
                  "required": [
                    "symbol_upload_id",
                    "upload_url",
                    "expiration_date"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Internal error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "crash"
        ],
        "description": "Begins the symbol upload process for a new set of symbols for the specified application",
        "operationId": "symbolUploads_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "A request containing information pertaining to starting a symbol upload process",
                "properties": {
                  "build": {
                    "description": "The build number. Optional for Apple. Required for Android.",
                    "type": "string"
                  },
                  "client_callback": {
                    "description": "The callback URL that the client can optionally provide to get status updates for the current symbol upload",
                    "type": "string"
                  },
                  "file_name": {
                    "description": "The file name for the symbol upload",
                    "type": "string"
                  },
                  "symbol_type": {
                    "description": "The type of the symbol for the current symbol upload",
                    "enum": [
                      "Apple",
                      "JavaScript",
                      "Breakpad",
                      "AndroidProguard",
                      "UWP"
                    ],
                    "type": "string"
                  },
                  "version": {
                    "description": "The version number. Optional for Apple. Required for Android.",
                    "type": "string"
                  }
                },
                "required": [
                  "symbol_type"
                ],
                "type": "object"
              }
            }
          },
          "description": "The symbol information",
          "required": true
        }
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}": {
      "delete": {
        "parameters": [
          {
            "description": "The ID of the symbol upload",
            "in": "path",
            "name": "symbol_upload_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A single symbol upload entity",
                  "properties": {
                    "app_id": {
                      "description": "The application that this symbol upload belongs to",
                      "type": "string"
                    },
                    "file_name": {
                      "description": "The file name for the symbol upload",
                      "type": "string"
                    },
                    "file_size": {
                      "description": "The size of the file in Mebibytes. This may be 0 until the status is indexed",
                      "type": "number"
                    },
                    "origin": {
                      "description": "The origin of the symbol upload",
                      "enum": [
                        "User",
                        "System"
                      ],
                      "type": "string"
                    },
                    "status": {
                      "description": "The current status for the symbol upload",
                      "enum": [
                        "created",
                        "committed",
                        "aborted",
                        "processing",
                        "indexed",
                        "failed"
                      ],
                      "type": "string"
                    },
                    "symbol_type": {
                      "description": "The type of the symbol for the current symbol upload",
                      "enum": [
                        "Apple",
                        "JavaScript",
                        "Breakpad",
                        "AndroidProguard",
                        "UWP"
                      ],
                      "type": "string"
                    },
                    "symbol_upload_id": {
                      "description": "The id for the current symbol upload",
                      "type": "string"
                    },
                    "symbols_uploaded": {
                      "description": "The symbols found in the upload. This may be empty until the status is indexed",
                      "items": {
                        "properties": {
                          "platform": {
                            "description": "The platform the symbol is associated with",
                            "type": "string"
                          },
                          "symbol_id": {
                            "description": "The symbol id of the symbol binary",
                            "type": "string"
                          }
                        },
                        "required": [
                          "symbol_id",
                          "platform"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "timestamp": {
                      "description": "When the symbol upload was committed, or last transaction time if not committed",
                      "format": "date-time",
                      "type": "string"
                    },
                    "user": {
                      "description": "User information of the one who intitiated the symbol upload",
                      "properties": {
                        "display_name": {
                          "description": "The full name of the user. Might for example be first and last name",
                          "type": "string"
                        },
                        "email": {
                          "description": "The email of the user",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "required": [
                    "symbol_upload_id",
                    "app_id",
                    "status",
                    "symbol_type"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Internal error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "crash"
        ],
        "description": "Deletes a symbol upload by id for the specified application",
        "operationId": "symbolUploads_delete"
      },
      "get": {
        "parameters": [
          {
            "description": "The ID of the symbol upload",
            "in": "path",
            "name": "symbol_upload_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A single symbol upload entity",
                  "properties": {
                    "app_id": {
                      "description": "The application that this symbol upload belongs to",
                      "type": "string"
                    },
                    "file_name": {
                      "description": "The file name for the symbol upload",
                      "type": "string"
                    },
                    "file_size": {
                      "description": "The size of the file in Mebibytes. This may be 0 until the status is indexed",
                      "type": "number"
                    },
                    "origin": {
                      "description": "The origin of the symbol upload",
                      "enum": [
                        "User",
                        "System"
                      ],
                      "type": "string"
                    },
                    "status": {
                      "description": "The current status for the symbol upload",
                      "enum": [
                        "created",
                        "committed",
                        "aborted",
                        "processing",
                        "indexed",
                        "failed"
                      ],
                      "type": "string"
                    },
                    "symbol_type": {
                      "description": "The type of the symbol for the current symbol upload",
                      "enum": [
                        "Apple",
                        "JavaScript",
                        "Breakpad",
                        "AndroidProguard",
                        "UWP"
                      ],
                      "type": "string"
                    },
                    "symbol_upload_id": {
                      "description": "The id for the current symbol upload",
                      "type": "string"
                    },
                    "symbols_uploaded": {
                      "description": "The symbols found in the upload. This may be empty until the status is indexed",
                      "items": {
                        "properties": {
                          "platform": {
                            "description": "The platform the symbol is associated with",
                            "type": "string"
                          },
                          "symbol_id": {
                            "description": "The symbol id of the symbol binary",
                            "type": "string"
                          }
                        },
                        "required": [
                          "symbol_id",
                          "platform"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "timestamp": {
                      "description": "When the symbol upload was committed, or last transaction time if not committed",
                      "format": "date-time",
                      "type": "string"
                    },
                    "user": {
                      "description": "User information of the one who intitiated the symbol upload",
                      "properties": {
                        "display_name": {
                          "description": "The full name of the user. Might for example be first and last name",
                          "type": "string"
                        },
                        "email": {
                          "description": "The email of the user",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "required": [
                    "symbol_upload_id",
                    "app_id",
                    "status",
                    "symbol_type"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Internal error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "crash"
        ],
        "description": "Gets a symbol upload by id for the specified application",
        "operationId": "symbolUploads_get"
      },
      "patch": {
        "parameters": [
          {
            "description": "The ID of the symbol upload",
            "in": "path",
            "name": "symbol_upload_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A single symbol upload entity",
                  "properties": {
                    "app_id": {
                      "description": "The application that this symbol upload belongs to",
                      "type": "string"
                    },
                    "file_name": {
                      "description": "The file name for the symbol upload",
                      "type": "string"
                    },
                    "file_size": {
                      "description": "The size of the file in Mebibytes. This may be 0 until the status is indexed",
                      "type": "number"
                    },
                    "origin": {
                      "description": "The origin of the symbol upload",
                      "enum": [
                        "User",
                        "System"
                      ],
                      "type": "string"
                    },
                    "status": {
                      "description": "The current status for the symbol upload",
                      "enum": [
                        "created",
                        "committed",
                        "aborted",
                        "processing",
                        "indexed",
                        "failed"
                      ],
                      "type": "string"
                    },
                    "symbol_type": {
                      "description": "The type of the symbol for the current symbol upload",
                      "enum": [
                        "Apple",
                        "JavaScript",
                        "Breakpad",
                        "AndroidProguard",
                        "UWP"
                      ],
                      "type": "string"
                    },
                    "symbol_upload_id": {
                      "description": "The id for the current symbol upload",
                      "type": "string"
                    },
                    "symbols_uploaded": {
                      "description": "The symbols found in the upload. This may be empty until the status is indexed",
                      "items": {
                        "properties": {
                          "platform": {
                            "description": "The platform the symbol is associated with",
                            "type": "string"
                          },
                          "symbol_id": {
                            "description": "The symbol id of the symbol binary",
                            "type": "string"
                          }
                        },
                        "required": [
                          "symbol_id",
                          "platform"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "timestamp": {
                      "description": "When the symbol upload was committed, or last transaction time if not committed",
                      "format": "date-time",
                      "type": "string"
                    },
                    "user": {
                      "description": "User information of the one who intitiated the symbol upload",
                      "properties": {
                        "display_name": {
                          "description": "The full name of the user. Might for example be first and last name",
                          "type": "string"
                        },
                        "email": {
                          "description": "The email of the user",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "required": [
                    "symbol_upload_id",
                    "app_id",
                    "status",
                    "symbol_type"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Internal error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "crash"
        ],
        "description": "Commits or aborts the symbol upload process for a new set of symbols for the specified application",
        "operationId": "symbolUploads_complete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "A request containing information pertaining to completing a symbol upload process",
                "properties": {
                  "status": {
                    "description": "The desired operation for the symbol upload",
                    "enum": [
                      "committed",
                      "aborted"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "status"
                ],
                "type": "object"
              }
            }
          },
          "description": "The symbol information",
          "required": true
        }
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}/location": {
      "get": {
        "parameters": [
          {
            "description": "The ID of the symbol upload",
            "in": "path",
            "name": "symbol_upload_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Location for downloading symbol upload",
                  "properties": {
                    "uri": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "uri"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Internal error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "crash"
        ],
        "description": "Gets the URL to download the symbol upload",
        "operationId": "symbolUploads_getLocation"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/symbols": {
      "get": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A response containing the list of symbols matching the specified filter (if any was provided)",
                  "items": {
                    "properties": {
                      "alternate_symbol_ids": {
                        "description": "The other symbols in the same file",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "app_id": {
                        "description": "The application that this symbol belongs to",
                        "type": "string"
                      },
                      "build": {
                        "description": "The build number. Optional for Apple. Required for Android.",
                        "type": "string"
                      },
                      "origin": {
                        "description": "The origin of the symbol file",
                        "enum": [
                          "System",
                          "User"
                        ],
                        "type": "string"
                      },
                      "platform": {
                        "description": "The platform that this symbol is associated with",
                        "type": "string"
                      },
                      "status": {
                        "description": "Whether the symbol is ignored.",
                        "enum": [
                          "available",
                          "ignored"
                        ],
                        "type": "string"
                      },
                      "symbol_id": {
                        "description": "The unique id for this symbol (uuid)",
                        "type": "string"
                      },
                      "symbol_upload_id": {
                        "description": "The id of the symbol upload this symbol belongs to.",
                        "type": "string"
                      },
                      "type": {
                        "description": "The type of the symbol for the current symbol upload",
                        "enum": [
                          "Apple",
                          "JavaScript",
                          "Breakpad",
                          "AndroidProguard",
                          "UWP"
                        ],
                        "type": "string"
                      },
                      "url": {
                        "description": "The path name of the symbol file in blob storage",
                        "type": "string"
                      },
                      "version": {
                        "description": "The version number. Optional for Apple. Required for Android.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "symbol_id",
                      "platform",
                      "type",
                      "app_id",
                      "url",
                      "origin",
                      "alternate_symbol_ids",
                      "status",
                      "symbol_upload_id"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Internal error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "crash"
        ],
        "description": "Returns the list of all symbols for the provided application",
        "operationId": "symbols_list"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}": {
      "get": {
        "parameters": [
          {
            "description": "The ID of the symbol (uuid of the symbol)",
            "in": "path",
            "name": "symbol_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "alternate_symbol_ids": {
                      "description": "The other symbols in the same file",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "app_id": {
                      "description": "The application that this symbol belongs to",
                      "type": "string"
                    },
                    "build": {
                      "description": "The build number. Optional for Apple. Required for Android.",
                      "type": "string"
                    },
                    "origin": {
                      "description": "The origin of the symbol file",
                      "enum": [
                        "System",
                        "User"
                      ],
                      "type": "string"
                    },
                    "platform": {
                      "description": "The platform that this symbol is associated with",
                      "type": "string"
                    },
                    "status": {
                      "description": "Whether the symbol is ignored.",
                      "enum": [
                        "available",
                        "ignored"
                      ],
                      "type": "string"
                    },
                    "symbol_id": {
                      "description": "The unique id for this symbol (uuid)",
                      "type": "string"
                    },
                    "symbol_upload_id": {
                      "description": "The id of the symbol upload this symbol belongs to.",
                      "type": "string"
                    },
                    "type": {
                      "description": "The type of the symbol for the current symbol upload",
                      "enum": [
                        "Apple",
                        "JavaScript",
                        "Breakpad",
                        "AndroidProguard",
                        "UWP"
                      ],
                      "type": "string"
                    },
                    "url": {
                      "description": "The path name of the symbol file in blob storage",
                      "type": "string"
                    },
                    "version": {
                      "description": "The version number. Optional for Apple. Required for Android.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "symbol_id",
                    "platform",
                    "type",
                    "app_id",
                    "url",
                    "origin",
                    "alternate_symbol_ids",
                    "status",
                    "symbol_upload_id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Internal error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "crash"
        ],
        "description": "Returns a particular symbol by id (uuid) for the provided application",
        "operationId": "symbols_get"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/ignore": {
      "post": {
        "parameters": [
          {
            "description": "The ID of the symbol (uuid of the symbol)",
            "in": "path",
            "name": "symbol_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "alternate_symbol_ids": {
                      "description": "The other symbols in the same file",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "app_id": {
                      "description": "The application that this symbol belongs to",
                      "type": "string"
                    },
                    "build": {
                      "description": "The build number. Optional for Apple. Required for Android.",
                      "type": "string"
                    },
                    "origin": {
                      "description": "The origin of the symbol file",
                      "enum": [
                        "System",
                        "User"
                      ],
                      "type": "string"
                    },
                    "platform": {
                      "description": "The platform that this symbol is associated with",
                      "type": "string"
                    },
                    "status": {
                      "description": "Whether the symbol is ignored.",
                      "enum": [
                        "available",
                        "ignored"
                      ],
                      "type": "string"
                    },
                    "symbol_id": {
                      "description": "The unique id for this symbol (uuid)",
                      "type": "string"
                    },
                    "symbol_upload_id": {
                      "description": "The id of the symbol upload this symbol belongs to.",
                      "type": "string"
                    },
                    "type": {
                      "description": "The type of the symbol for the current symbol upload",
                      "enum": [
                        "Apple",
                        "JavaScript",
                        "Breakpad",
                        "AndroidProguard",
                        "UWP"
                      ],
                      "type": "string"
                    },
                    "url": {
                      "description": "The path name of the symbol file in blob storage",
                      "type": "string"
                    },
                    "version": {
                      "description": "The version number. Optional for Apple. Required for Android.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "symbol_id",
                    "platform",
                    "type",
                    "app_id",
                    "url",
                    "origin",
                    "alternate_symbol_ids",
                    "status",
                    "symbol_upload_id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Internal error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "crash"
        ],
        "description": "Marks a symbol by id (uuid) as ignored",
        "operationId": "symbols_ignore"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/location": {
      "get": {
        "parameters": [
          {
            "description": "The ID of the symbol (uuid of the symbol)",
            "in": "path",
            "name": "symbol_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Location for downloading symbol",
                  "properties": {
                    "uri": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "uri"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Internal error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "crash"
        ],
        "description": "Gets the URL to download the symbol",
        "operationId": "symbols_getLocation"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/status": {
      "get": {
        "parameters": [
          {
            "description": "The ID of the symbol (uuid of the symbol)",
            "in": "path",
            "name": "symbol_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A response containing information pertaining to a symbol status",
                  "properties": {
                    "app_id": {
                      "description": "The application that this symbol belongs to",
                      "type": "string"
                    },
                    "status": {
                      "description": "Whether the symbol is ignored.",
                      "enum": [
                        "available",
                        "ignored",
                        "missing"
                      ],
                      "type": "string"
                    },
                    "symbol_id": {
                      "description": "The unique id for this symbol (uuid)",
                      "type": "string"
                    }
                  },
                  "required": [
                    "symbol_id",
                    "app_id",
                    "status"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Internal error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "crash"
        ],
        "description": "Returns a particular symbol by id (uuid) for the provided application",
        "operationId": "symbols_getStatus"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/teams": {
      "get": {
        "parameters": [
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "allOf": [
                      {
                        "properties": {
                          "description": {
                            "description": "The description of the team",
                            "type": "string"
                          },
                          "display_name": {
                            "description": "The display name of the team",
                            "type": "string"
                          },
                          "id": {
                            "description": "The internal unique id (UUID) of the team.",
                            "format": "uuid",
                            "type": "string"
                          },
                          "name": {
                            "description": "The name of the team",
                            "type": "string"
                          }
                        },
                        "required": [
                          "id",
                          "name",
                          "display_name"
                        ],
                        "type": "object"
                      },
                      {
                        "properties": {
                          "permissions": {
                            "description": "The permissions the team has for the app",
                            "items": {
                              "enum": [
                                "manager",
                                "developer",
                                "viewer",
                                "tester"
                              ],
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Returns the details of all teams that have access to the app.",
        "operationId": "apps_getTeams"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/test/export": {
      "get": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "resources": {
                      "items": {
                        "properties": {
                          "path": {
                            "format": "URL",
                            "type": "string"
                          },
                          "rel": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "test"
        ],
        "description": "Lists all the endpoints available for Test apps data",
        "operationId": "test_gdprExportApps"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/test/export/apps": {
      "get": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "hash_files_url": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "test"
        ],
        "description": "Lists app data",
        "operationId": "test_gdprExportApp"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/test/export/fileSetFiles": {
      "get": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "app_upload_id": {
                      "format": "uuid",
                      "type": "string"
                    },
                    "hash_file_id": {
                      "format": "uuid",
                      "type": "string"
                    },
                    "hash_file_url": {
                      "type": "string"
                    },
                    "path": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "test"
        ],
        "description": "Lists file set file data",
        "operationId": "test_gdprExportFileSetFile"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/test/export/hashFiles": {
      "get": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "filename": {
                      "type": "string"
                    },
                    "id": {
                      "format": "uuid",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "test"
        ],
        "description": "Lists hash file data",
        "operationId": "test_gdprExportHashFile"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/test/export/pipelineTests": {
      "get": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "app_upload_id": {
                      "format": "uuid",
                      "type": "string"
                    },
                    "test_parameters": {
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "test"
        ],
        "description": "Lists pipeline test data",
        "operationId": "test_gdprExportPipelineTest"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/test/export/testRuns": {
      "get": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "app_hash_file_id": {
                      "format": "uuid",
                      "type": "string"
                    },
                    "app_hash_file_url": {
                      "type": "string"
                    },
                    "app_icon_url": {
                      "type": "string"
                    },
                    "dsym_hash_file_id": {
                      "format": "uuid",
                      "type": "string"
                    },
                    "dsym_hash_file_url": {
                      "type": "string"
                    },
                    "id": {
                      "format": "uuid",
                      "type": "string"
                    },
                    "locale": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "test"
        ],
        "description": "Lists test run data",
        "operationId": "test_gdprExportTestRun"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/test_runs": {
      "get": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "description": "Summary single test run on Xamarin Test Cloud",
                    "properties": {
                      "appVersion": {
                        "description": "The compiled version of the app binary",
                        "type": "string"
                      },
                      "date": {
                        "description": "The date and time the test was uploaded",
                        "type": "string"
                      },
                      "description": {
                        "description": "Human readable explanation of the current test status",
                        "type": "string"
                      },
                      "id": {
                        "description": "The unique id of the test upload",
                        "format": "uuid",
                        "type": "string"
                      },
                      "platform": {
                        "description": "The device platform targeted by the test. Possible values are 'ios' or 'android'",
                        "type": "string"
                      },
                      "resultStatus": {
                        "description": "The passed/failed state",
                        "type": "string"
                      },
                      "runStatus": {
                        "description": "The current status of the test run, in relation to the various phases",
                        "type": "string"
                      },
                      "state": {
                        "description": "Deprecated. Use runStatus instead.",
                        "type": "string"
                      },
                      "stats": {
                        "description": "Summary single test run on Xamarin Test Cloud",
                        "properties": {
                          "devices": {
                            "description": "Number of devices running the test",
                            "type": "number"
                          },
                          "devicesFailed": {
                            "description": "Number of failed devices",
                            "type": "number"
                          },
                          "devicesFinished": {
                            "description": "Number of finished devices",
                            "type": "number"
                          },
                          "failed": {
                            "description": "Number of failed tests",
                            "type": "number"
                          },
                          "passed": {
                            "description": "Number of passed tests",
                            "type": "number"
                          },
                          "peakMemory": {
                            "description": "The max amount of MB used during the test run",
                            "type": "number"
                          },
                          "skipped": {
                            "description": "Number of skipped tests",
                            "type": "number"
                          },
                          "total": {
                            "description": "Number of tests in total",
                            "type": "number"
                          },
                          "totalDeviceMinutes": {
                            "description": "The number of minutes of device time the test has been runnign",
                            "type": "number"
                          }
                        },
                        "title": "Test Run Statistics",
                        "type": "object"
                      },
                      "status": {
                        "description": "Deprecated. Use resultStatus instead.",
                        "type": "string"
                      },
                      "testSeries": {
                        "description": "The name of the test series with which this test upload is associated",
                        "type": "string"
                      },
                      "testType": {
                        "description": "The name of the test framework used to run this test",
                        "type": "string"
                      }
                    },
                    "title": "Test Run",
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "test"
        ],
        "description": "Returns a list of test runs",
        "operationId": "test_getTestRuns"
      },
      "post": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "headers": {
              "Location": {
                "description": "Relative URL that points to the test run",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "test"
        ],
        "description": "Creates a new test run",
        "operationId": "test_createTestRun"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}": {
      "delete": {
        "parameters": [
          {
            "description": "The ID of the test run",
            "in": "path",
            "name": "test_run_id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Summary single test run on Xamarin Test Cloud",
                  "properties": {
                    "appVersion": {
                      "description": "The compiled version of the app binary",
                      "type": "string"
                    },
                    "date": {
                      "description": "The date and time the test was uploaded",
                      "type": "string"
                    },
                    "description": {
                      "description": "Human readable explanation of the current test status",
                      "type": "string"
                    },
                    "id": {
                      "description": "The unique id of the test upload",
                      "format": "uuid",
                      "type": "string"
                    },
                    "platform": {
                      "description": "The device platform targeted by the test. Possible values are 'ios' or 'android'",
                      "type": "string"
                    },
                    "resultStatus": {
                      "description": "The passed/failed state",
                      "type": "string"
                    },
                    "runStatus": {
                      "description": "The current status of the test run, in relation to the various phases",
                      "type": "string"
                    },
                    "state": {
                      "description": "Deprecated. Use runStatus instead.",
                      "type": "string"
                    },
                    "stats": {
                      "description": "Summary single test run on Xamarin Test Cloud",
                      "properties": {
                        "devices": {
                          "description": "Number of devices running the test",
                          "type": "number"
                        },
                        "devicesFailed": {
                          "description": "Number of failed devices",
                          "type": "number"
                        },
                        "devicesFinished": {
                          "description": "Number of finished devices",
                          "type": "number"
                        },
                        "failed": {
                          "description": "Number of failed tests",
                          "type": "number"
                        },
                        "passed": {
                          "description": "Number of passed tests",
                          "type": "number"
                        },
                        "peakMemory": {
                          "description": "The max amount of MB used during the test run",
                          "type": "number"
                        },
                        "skipped": {
                          "description": "Number of skipped tests",
                          "type": "number"
                        },
                        "total": {
                          "description": "Number of tests in total",
                          "type": "number"
                        },
                        "totalDeviceMinutes": {
                          "description": "The number of minutes of device time the test has been runnign",
                          "type": "number"
                        }
                      },
                      "title": "Test Run Statistics",
                      "type": "object"
                    },
                    "status": {
                      "description": "Deprecated. Use resultStatus instead.",
                      "type": "string"
                    },
                    "testSeries": {
                      "description": "The name of the test series with which this test upload is associated",
                      "type": "string"
                    },
                    "testType": {
                      "description": "The name of the test framework used to run this test",
                      "type": "string"
                    }
                  },
                  "title": "Test Run",
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "description": "Test run with the given ID was not found"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "test"
        ],
        "description": "Logically deletes a test run",
        "operationId": "test_archiveTestRun"
      },
      "get": {
        "parameters": [
          {
            "description": "The ID of the test run",
            "in": "path",
            "name": "test_run_id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Summary single test run on Xamarin Test Cloud",
                  "properties": {
                    "appVersion": {
                      "description": "The compiled version of the app binary",
                      "type": "string"
                    },
                    "date": {
                      "description": "The date and time the test was uploaded",
                      "type": "string"
                    },
                    "description": {
                      "description": "Human readable explanation of the current test status",
                      "type": "string"
                    },
                    "id": {
                      "description": "The unique id of the test upload",
                      "format": "uuid",
                      "type": "string"
                    },
                    "platform": {
                      "description": "The device platform targeted by the test. Possible values are 'ios' or 'android'",
                      "type": "string"
                    },
                    "resultStatus": {
                      "description": "The passed/failed state",
                      "type": "string"
                    },
                    "runStatus": {
                      "description": "The current status of the test run, in relation to the various phases",
                      "type": "string"
                    },
                    "state": {
                      "description": "Deprecated. Use runStatus instead.",
                      "type": "string"
                    },
                    "stats": {
                      "description": "Summary single test run on Xamarin Test Cloud",
                      "properties": {
                        "devices": {
                          "description": "Number of devices running the test",
                          "type": "number"
                        },
                        "devicesFailed": {
                          "description": "Number of failed devices",
                          "type": "number"
                        },
                        "devicesFinished": {
                          "description": "Number of finished devices",
                          "type": "number"
                        },
                        "failed": {
                          "description": "Number of failed tests",
                          "type": "number"
                        },
                        "passed": {
                          "description": "Number of passed tests",
                          "type": "number"
                        },
                        "peakMemory": {
                          "description": "The max amount of MB used during the test run",
                          "type": "number"
                        },
                        "skipped": {
                          "description": "Number of skipped tests",
                          "type": "number"
                        },
                        "total": {
                          "description": "Number of tests in total",
                          "type": "number"
                        },
                        "totalDeviceMinutes": {
                          "description": "The number of minutes of device time the test has been runnign",
                          "type": "number"
                        }
                      },
                      "title": "Test Run Statistics",
                      "type": "object"
                    },
                    "status": {
                      "description": "Deprecated. Use resultStatus instead.",
                      "type": "string"
                    },
                    "testSeries": {
                      "description": "The name of the test series with which this test upload is associated",
                      "type": "string"
                    },
                    "testType": {
                      "description": "The name of the test framework used to run this test",
                      "type": "string"
                    }
                  },
                  "title": "Test Run",
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "test"
        ],
        "description": "Returns a single test runs",
        "operationId": "test_getTestRun"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/files": {
      "post": {
        "parameters": [
          {
            "description": "The ID of the test run",
            "in": "path",
            "name": "test_run_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "File was created and can be uploaded",
            "headers": {
              "Location": {
                "description": "Relative URL that points to the upload endpoint",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "test"
        ],
        "description": "Uploads file for a test run",
        "operationId": "test_startUploadingFile"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/hashes": {
      "post": {
        "parameters": [
          {
            "description": "The ID of the test run",
            "in": "path",
            "name": "test_run_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "201": {
            "description": "OK"
          },
          "401": {
            "description": "Byte range verification required for given SHA256 hash",
            "headers": {
              "X-Challenge-Bytes": {
                "description": "Byte range required to authenticate the request",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "412": {
            "description": "File with given SHA256 hash doesn't exist and must be uploaded"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "test"
        ],
        "description": "Adds file with the given hash to a test run",
        "operationId": "test_uploadHash",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Hash, type, path and byte range of a file that is required in test run",
                "properties": {
                  "byte_range": {
                    "description": "Range of bytes required to verify ownership of the file",
                    "type": "string"
                  },
                  "checksum": {
                    "description": "SHA256 hash of the file",
                    "type": "string"
                  },
                  "file_type": {
                    "description": "Type of the file",
                    "enum": [
                      "dsym-file",
                      "app-file",
                      "test-file"
                    ],
                    "type": "string"
                  },
                  "relative_path": {
                    "description": "Relative path of the file",
                    "type": "string"
                  }
                },
                "required": [
                  "file_type",
                  "checksum",
                  "relative_path"
                ],
                "title": "Test Cloud File Hash",
                "type": "object"
              }
            }
          },
          "description": "File hash information",
          "required": true
        }
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/hashes/batch": {
      "post": {
        "parameters": [
          {
            "description": "The ID of the test run",
            "in": "path",
            "name": "test_run_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "description": "Response message for single uploaded file hash",
                    "properties": {
                      "checksum": {
                        "description": "SHA256 hash of the file",
                        "type": "string"
                      },
                      "fileType": {
                        "description": "Type of the file",
                        "enum": [
                          "dsym-file",
                          "app-file",
                          "test-file"
                        ],
                        "type": "string"
                      },
                      "relativePath": {
                        "description": "Relative path of the file",
                        "type": "string"
                      },
                      "uploadStatus": {
                        "description": "Status of the upload",
                        "properties": {
                          "location": {
                            "description": "URI that should be used to make POST request if file with given hash doesn't exist. This is set when status_code is equal to 412",
                            "type": "string"
                          },
                          "statusCode": {
                            "description": "HTTP status code that represent result of upload",
                            "type": "number"
                          }
                        },
                        "required": [
                          "statusCode"
                        ],
                        "title": "Test Cloud Hash Upload Status",
                        "type": "object"
                      }
                    },
                    "required": [
                      "fileType",
                      "checksum",
                      "uploadStatus"
                    ],
                    "title": "Test Cloud File Hash Response",
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "test"
        ],
        "description": "Adds file with the given hash to a test run",
        "operationId": "test_uploadHashesBatch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "description": "Hash, type, path and byte range of a file that is required in test run",
                  "properties": {
                    "checksum": {
                      "description": "SHA256 hash of the file",
                      "type": "string"
                    },
                    "fileType": {
                      "description": "Type of the file",
                      "enum": [
                        "dsym-file",
                        "app-file",
                        "test-file"
                      ],
                      "type": "string"
                    },
                    "relativePath": {
                      "description": "Relative path of the file",
                      "type": "string"
                    }
                  },
                  "required": [
                    "fileType",
                    "checksum",
                    "relativePath"
                  ],
                  "title": "Test Cloud File Hash",
                  "type": "object"
                },
                "type": "array"
              }
            }
          },
          "description": "File hash information",
          "required": true
        }
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/report": {
      "get": {
        "parameters": [
          {
            "description": "The ID of the test run",
            "in": "path",
            "name": "test_run_id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "app_upload_id": {
                      "type": "string"
                    },
                    "date": {
                      "type": "string"
                    },
                    "date_finished": {
                      "type": "string"
                    },
                    "device_logs": {
                      "items": {
                        "properties": {
                          "appium_log": {
                            "type": "string"
                          },
                          "device_log": {
                            "type": "string"
                          },
                          "device_snapshot_id": {
                            "type": "string"
                          },
                          "test_log": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "errorMessage": {
                      "type": "string"
                    },
                    "features": {
                      "items": {
                        "properties": {
                          "failed": {
                            "type": "number"
                          },
                          "name": {
                            "type": "string"
                          },
                          "peakDuration": {
                            "type": "number"
                          },
                          "peakMemory": {
                            "type": "number"
                          },
                          "skipped": {
                            "type": "number"
                          },
                          "tests": {
                            "items": {
                              "properties": {
                                "peakDuration": {
                                  "type": "number"
                                },
                                "peakMemory": {
                                  "type": "number"
                                },
                                "runs": {
                                  "items": {
                                    "properties": {
                                      "failed": {
                                        "type": "number"
                                      },
                                      "id": {
                                        "type": "string"
                                      },
                                      "number": {
                                        "type": "number"
                                      },
                                      "report_url": {
                                        "type": "string"
                                      },
                                      "skipped": {
                                        "type": "number"
                                      },
                                      "steps": {
                                        "items": {
                                          "properties": {
                                            "failed": {
                                              "type": "number"
                                            },
                                            "id": {
                                              "type": "string"
                                            },
                                            "skipped": {
                                              "type": "number"
                                            },
                                            "stepExecutions": {
                                              "items": {
                                                "properties": {
                                                  "device_snapshot_id": {
                                                    "type": "string"
                                                  },
                                                  "status": {
                                                    "type": "string"
                                                  },
                                                  "timestamp": {
                                                    "type": "number"
                                                  }
                                                },
                                                "type": "object"
                                              },
                                              "type": "array"
                                            },
                                            "stepName": {
                                              "type": "string"
                                            },
                                            "step_report_url": {
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "testName": {
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "finished_device_snapshots": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "id": {
                      "type": "string"
                    },
                    "platform": {
                      "type": "string"
                    },
                    "revision": {
                      "type": "number"
                    },
                    "schema_version": {
                      "type": "number"
                    },
                    "snapshot_fatal_errors": {
                      "items": {
                        "properties": {
                          "device_snapshot_id": {
                            "type": "string"
                          },
                          "error_message": {
                            "type": "string"
                          },
                          "error_title": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "stats": {
                      "properties": {
                        "artifacts": {
                          "additionalProperties": {
                            "type": "string"
                          },
                          "type": "object"
                        },
                        "devices": {
                          "type": "number"
                        },
                        "devices_failed": {
                          "type": "number"
                        },
                        "devices_finished": {
                          "type": "number"
                        },
                        "devices_not_runned": {
                          "type": "number"
                        },
                        "devices_skipped": {
                          "type": "number"
                        },
                        "failed": {
                          "type": "number"
                        },
                        "filesize": {
                          "type": "number"
                        },
                        "os": {
                          "type": "number"
                        },
                        "passed": {
                          "type": "number"
                        },
                        "skipped": {
                          "type": "number"
                        },
                        "step_count": {
                          "type": "number"
                        },
                        "total": {
                          "type": "number"
                        },
                        "totalDeviceMinutes": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "os",
                        "devices",
                        "filesize",
                        "totalDeviceMinutes",
                        "devices_not_runned",
                        "failed",
                        "skipped",
                        "passed",
                        "total",
                        "devices_finished",
                        "devices_failed",
                        "devices_skipped",
                        "step_count"
                      ],
                      "type": "object"
                    },
                    "testType": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "app_upload_id",
                    "date",
                    "testType",
                    "platform",
                    "stats",
                    "id",
                    "schema_version",
                    "revision",
                    "features",
                    "finished_device_snapshots",
                    "device_logs",
                    "date_finished"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "test"
        ],
        "description": "Returns a single test report",
        "operationId": "test_getTestReport"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/start": {
      "post": {
        "parameters": [
          {
            "description": "The ID of the test run",
            "in": "path",
            "name": "test_run_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Result of starting a test run",
                  "properties": {
                    "accepted_devices": {
                      "description": "List with names of accepted devices",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "rejected_devices": {
                      "description": "List with names and descriptions of rejected devices",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "title": "Test Cloud Test Run Start Result",
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "test"
        ],
        "description": "Starts test run",
        "operationId": "test_startTestRun",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Options required to start the test run",
                "properties": {
                  "device_selection": {
                    "description": "Device selection string.",
                    "type": "string"
                  },
                  "language": {
                    "description": "Language that should be used to run tests.",
                    "type": "string"
                  },
                  "locale": {
                    "description": "Locale that should be used to run tests.",
                    "type": "string"
                  },
                  "test_framework": {
                    "description": "Test framework used by tests.",
                    "type": "string"
                  },
                  "test_parameters": {
                    "description": "A JSON dictionary with additional test parameters",
                    "type": "object"
                  },
                  "test_series": {
                    "description": "Name of the test series.",
                    "type": "string"
                  }
                },
                "required": [
                  "test_framework",
                  "device_selection"
                ],
                "title": "Test Cloud Start Test Run Options",
                "type": "object"
              }
            }
          },
          "description": "Option required to start the test run",
          "required": true
        }
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/state": {
      "get": {
        "parameters": [
          {
            "description": "The ID of the test run",
            "in": "path",
            "name": "test_run_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Current status of a test run",
                  "properties": {
                    "exit_code": {
                      "description": "The exit code that the client should use when exiting. Used for indicating status to the caller of the client.\n0: test run completes with no failing tests\n1: test run completes with at least one failing test\n2: test run failed to complete. Status for test run is unknown\n",
                      "type": "integer"
                    },
                    "message": {
                      "description": "Multi-line message that describes the status",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "wait_time": {
                      "description": "Time (in seconds) that the client should wait for before checking the status again",
                      "type": "integer"
                    }
                  },
                  "title": "Test Run State",
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "test"
        ],
        "description": "Gets state of the test run",
        "operationId": "test_getTestRunState"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/stop": {
      "put": {
        "parameters": [
          {
            "description": "The ID of the test run to be stopped",
            "in": "path",
            "name": "test_run_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Summary single test run on Xamarin Test Cloud",
                  "properties": {
                    "appVersion": {
                      "description": "The compiled version of the app binary",
                      "type": "string"
                    },
                    "date": {
                      "description": "The date and time the test was uploaded",
                      "type": "string"
                    },
                    "description": {
                      "description": "Human readable explanation of the current test status",
                      "type": "string"
                    },
                    "id": {
                      "description": "The unique id of the test upload",
                      "format": "uuid",
                      "type": "string"
                    },
                    "platform": {
                      "description": "The device platform targeted by the test. Possible values are 'ios' or 'android'",
                      "type": "string"
                    },
                    "resultStatus": {
                      "description": "The passed/failed state",
                      "type": "string"
                    },
                    "runStatus": {
                      "description": "The current status of the test run, in relation to the various phases",
                      "type": "string"
                    },
                    "state": {
                      "description": "Deprecated. Use runStatus instead.",
                      "type": "string"
                    },
                    "stats": {
                      "description": "Summary single test run on Xamarin Test Cloud",
                      "properties": {
                        "devices": {
                          "description": "Number of devices running the test",
                          "type": "number"
                        },
                        "devicesFailed": {
                          "description": "Number of failed devices",
                          "type": "number"
                        },
                        "devicesFinished": {
                          "description": "Number of finished devices",
                          "type": "number"
                        },
                        "failed": {
                          "description": "Number of failed tests",
                          "type": "number"
                        },
                        "passed": {
                          "description": "Number of passed tests",
                          "type": "number"
                        },
                        "peakMemory": {
                          "description": "The max amount of MB used during the test run",
                          "type": "number"
                        },
                        "skipped": {
                          "description": "Number of skipped tests",
                          "type": "number"
                        },
                        "total": {
                          "description": "Number of tests in total",
                          "type": "number"
                        },
                        "totalDeviceMinutes": {
                          "description": "The number of minutes of device time the test has been runnign",
                          "type": "number"
                        }
                      },
                      "title": "Test Run Statistics",
                      "type": "object"
                    },
                    "status": {
                      "description": "Deprecated. Use resultStatus instead.",
                      "type": "string"
                    },
                    "testSeries": {
                      "description": "The name of the test series with which this test upload is associated",
                      "type": "string"
                    },
                    "testType": {
                      "description": "The name of the test framework used to run this test",
                      "type": "string"
                    }
                  },
                  "title": "Test Run",
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "description": "Test run with the given ID was not found"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "test"
        ],
        "description": "Stop a test run execution",
        "operationId": "test_stopTestRun"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/test_series": {
      "get": {
        "parameters": [
          {
            "description": "A query string to filter test series",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "description": "Summary of a single test series",
                    "properties": {
                      "mostRecentActivity": {
                        "description": "Date of the latest test run that used this test series",
                        "format": "dateTime",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the test series",
                        "type": "string"
                      },
                      "slug": {
                        "description": "Unique, human-readable identifier of the test series",
                        "type": "string"
                      },
                      "testRuns": {
                        "description": "Most recent test runs",
                        "items": {
                          "description": "Most important information about a test run.",
                          "properties": {
                            "completed": {
                              "description": "Tells whether the test run has completed",
                              "type": "boolean"
                            },
                            "date": {
                              "description": "Date of the test run.",
                              "format": "dateTime",
                              "type": "string"
                            },
                            "failed": {
                              "description": "Number of failed tests",
                              "type": "number"
                            },
                            "passed": {
                              "description": "Number of passed tests",
                              "type": "number"
                            },
                            "statusDescription": {
                              "description": "Human-readable status of the test run.",
                              "type": "string"
                            }
                          },
                          "title": "Test Run Summary",
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "slug",
                      "name"
                    ],
                    "title": "Test Series",
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "test"
        ],
        "description": "Returns list of all test series for an application",
        "operationId": "test_getAllTestSeries"
      },
      "post": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Summary of a single test series",
                  "properties": {
                    "mostRecentActivity": {
                      "description": "Date of the latest test run that used this test series",
                      "format": "dateTime",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the test series",
                      "type": "string"
                    },
                    "slug": {
                      "description": "Unique, human-readable identifier of the test series",
                      "type": "string"
                    },
                    "testRuns": {
                      "description": "Most recent test runs",
                      "items": {
                        "description": "Most important information about a test run.",
                        "properties": {
                          "completed": {
                            "description": "Tells whether the test run has completed",
                            "type": "boolean"
                          },
                          "date": {
                            "description": "Date of the test run.",
                            "format": "dateTime",
                            "type": "string"
                          },
                          "failed": {
                            "description": "Number of failed tests",
                            "type": "number"
                          },
                          "passed": {
                            "description": "Number of passed tests",
                            "type": "number"
                          },
                          "statusDescription": {
                            "description": "Human-readable status of the test run.",
                            "type": "string"
                          }
                        },
                        "title": "Test Run Summary",
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "slug",
                    "name"
                  ],
                  "title": "Test Series",
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Details of a failed operation",
                  "properties": {
                    "message": {
                      "description": "Human-readable message that describes the error",
                      "type": "string"
                    },
                    "status": {
                      "description": "Status of the operation",
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "message"
                  ],
                  "title": "Test Cloud Error Details",
                  "type": "object"
                }
              }
            },
            "description": "Invalid test series name"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "test"
        ],
        "description": "Creates new test series for an application",
        "operationId": "test_createTestSeries",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "description": "Name of the new test series",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ],
                "title": "Name of the test series",
                "type": "object"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}": {
      "delete": {
        "parameters": [
          {
            "description": "The slug of the test series",
            "in": "path",
            "name": "test_series_slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Test series was successfully removed"
          },
          "404": {
            "description": "The test series was not found"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "test"
        ],
        "description": "Deletes a single test series",
        "operationId": "test_deleteTestSeries"
      },
      "patch": {
        "parameters": [
          {
            "description": "The slug of the test series",
            "in": "path",
            "name": "test_series_slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Summary of a single test series",
                  "properties": {
                    "mostRecentActivity": {
                      "description": "Date of the latest test run that used this test series",
                      "format": "dateTime",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the test series",
                      "type": "string"
                    },
                    "slug": {
                      "description": "Unique, human-readable identifier of the test series",
                      "type": "string"
                    },
                    "testRuns": {
                      "description": "Most recent test runs",
                      "items": {
                        "description": "Most important information about a test run.",
                        "properties": {
                          "completed": {
                            "description": "Tells whether the test run has completed",
                            "type": "boolean"
                          },
                          "date": {
                            "description": "Date of the test run.",
                            "format": "dateTime",
                            "type": "string"
                          },
                          "failed": {
                            "description": "Number of failed tests",
                            "type": "number"
                          },
                          "passed": {
                            "description": "Number of passed tests",
                            "type": "number"
                          },
                          "statusDescription": {
                            "description": "Human-readable status of the test run.",
                            "type": "string"
                          }
                        },
                        "title": "Test Run Summary",
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "slug",
                    "name"
                  ],
                  "title": "Test Series",
                  "type": "object"
                }
              }
            },
            "description": "Test series was successfully patched"
          },
          "400": {
            "description": "The new test series name is incorrect"
          },
          "404": {
            "description": "Test series with the given slug name was not found"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "test"
        ],
        "description": "Updates name and slug of a test series",
        "operationId": "test_patchTestSeries",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "description": "Name of the new test series",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ],
                "title": "Name of the test series",
                "type": "object"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}/test_runs": {
      "get": {
        "parameters": [
          {
            "description": "The slug of the test series",
            "in": "path",
            "name": "test_series_slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "description": "Summary single test run on Xamarin Test Cloud",
                    "properties": {
                      "appVersion": {
                        "description": "The compiled version of the app binary",
                        "type": "string"
                      },
                      "date": {
                        "description": "The date and time the test was uploaded",
                        "type": "string"
                      },
                      "description": {
                        "description": "Human readable explanation of the current test status",
                        "type": "string"
                      },
                      "id": {
                        "description": "The unique id of the test upload",
                        "format": "uuid",
                        "type": "string"
                      },
                      "platform": {
                        "description": "The device platform targeted by the test. Possible values are 'ios' or 'android'",
                        "type": "string"
                      },
                      "resultStatus": {
                        "description": "The passed/failed state",
                        "type": "string"
                      },
                      "runStatus": {
                        "description": "The current status of the test run, in relation to the various phases",
                        "type": "string"
                      },
                      "state": {
                        "description": "Deprecated. Use runStatus instead.",
                        "type": "string"
                      },
                      "stats": {
                        "description": "Summary single test run on Xamarin Test Cloud",
                        "properties": {
                          "devices": {
                            "description": "Number of devices running the test",
                            "type": "number"
                          },
                          "devicesFailed": {
                            "description": "Number of failed devices",
                            "type": "number"
                          },
                          "devicesFinished": {
                            "description": "Number of finished devices",
                            "type": "number"
                          },
                          "failed": {
                            "description": "Number of failed tests",
                            "type": "number"
                          },
                          "passed": {
                            "description": "Number of passed tests",
                            "type": "number"
                          },
                          "peakMemory": {
                            "description": "The max amount of MB used during the test run",
                            "type": "number"
                          },
                          "skipped": {
                            "description": "Number of skipped tests",
                            "type": "number"
                          },
                          "total": {
                            "description": "Number of tests in total",
                            "type": "number"
                          },
                          "totalDeviceMinutes": {
                            "description": "The number of minutes of device time the test has been runnign",
                            "type": "number"
                          }
                        },
                        "title": "Test Run Statistics",
                        "type": "object"
                      },
                      "status": {
                        "description": "Deprecated. Use resultStatus instead.",
                        "type": "string"
                      },
                      "testSeries": {
                        "description": "The name of the test series with which this test upload is associated",
                        "type": "string"
                      },
                      "testType": {
                        "description": "The name of the test framework used to run this test",
                        "type": "string"
                      }
                    },
                    "title": "Test Run",
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "test"
        ],
        "description": "Returns list of all test runs for a given test series",
        "operationId": "test_getAllTestRunsForSeries"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/testers": {
      "get": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "avatar_url": {
                        "description": "The avatar URL of the user",
                        "type": "string"
                      },
                      "can_change_password": {
                        "description": "User is required to send an old password in order to change the password.",
                        "type": "boolean"
                      },
                      "display_name": {
                        "description": "The full name of the user. Might for example be first and last name",
                        "type": "string"
                      },
                      "email": {
                        "description": "The email address of the user",
                        "type": "string"
                      },
                      "id": {
                        "description": "The unique id (UUID) of the user",
                        "format": "uuid",
                        "type": "string"
                      },
                      "name": {
                        "description": "The unique name that is used to identify the user.",
                        "type": "string"
                      },
                      "origin": {
                        "description": "The creation origin of this user",
                        "enum": [
                          "appcenter",
                          "hockeyapp",
                          "codepush"
                        ],
                        "type": "string"
                      },
                      "permissions": {
                        "description": "The permissions the user has for the app",
                        "items": {
                          "enum": [
                            "manager",
                            "developer",
                            "viewer",
                            "tester"
                          ],
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "id",
                      "display_name",
                      "email",
                      "name",
                      "origin"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Returns the testers associated with the app specified with the given app name which belongs to the given owner.",
        "operationId": "apps_listTesters"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/testers/{tester_id}": {
      "delete": {
        "parameters": [
          {
            "description": "The id of the tester",
            "in": "path",
            "name": "tester_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Tester can't be found\n"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "distribute"
        ],
        "description": "Delete the given tester from the all releases",
        "operationId": "releases_deleteTesterFromDestinations"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/toolsets": {
      "get": {
        "parameters": [
          {
            "description": "Toolset name",
            "in": "query",
            "name": "tools",
            "required": false,
            "schema": {
              "enum": [
                "xamarin",
                "xcode",
                "node"
              ],
              "type": "string"
            }
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Set of toolsets available for app",
                  "properties": {
                    "node": {
                      "description": "A list of Node versions",
                      "items": {
                        "description": "The Node version",
                        "properties": {
                          "current": {
                            "description": "If the Node version is default for AppCenter",
                            "type": "boolean"
                          },
                          "name": {
                            "description": "The version name",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "xamarin": {
                      "description": "A list of Xamarin SDK bundles",
                      "items": {
                        "description": "The Xamarin SDK bundle",
                        "properties": {
                          "current": {
                            "description": "If the SDK is latest stable",
                            "type": "boolean"
                          },
                          "monoVersion": {
                            "description": "The Mono version",
                            "type": "string"
                          },
                          "sdkBundle": {
                            "description": "The Xamarin SDK version",
                            "type": "string"
                          },
                          "stable": {
                            "description": "If the SDK is stable",
                            "type": "boolean"
                          },
                          "xcodeVersions": {
                            "description": "Specific for iOS SDK. A list of Xcode versions supported by current SDK version",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "xcode": {
                      "description": "A list of Xcode versions",
                      "items": {
                        "description": "The Xcode version",
                        "properties": {
                          "current": {
                            "description": "If the Xcode is latest stable",
                            "type": "boolean"
                          },
                          "name": {
                            "description": "The version name",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "build"
        ],
        "description": "Returns available toolsets for application",
        "operationId": "builds_listToolsets"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/transfer/{destination_owner_name}": {
      "post": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the owner (user or organization) to which the app is being transferred",
            "in": "path",
            "name": "destination_owner_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "properties": {
                        "description": {
                          "description": "The description of the app",
                          "type": "string"
                        },
                        "display_name": {
                          "description": "The display name of the app",
                          "type": "string"
                        },
                        "icon_source": {
                          "description": "The string representation of the source of the app's icon",
                          "type": "string"
                        },
                        "icon_url": {
                          "description": "The string representation of the URL pointing to the app's icon",
                          "type": "string"
                        },
                        "id": {
                          "description": "The unique ID (UUID) of the app",
                          "format": "uuid",
                          "type": "string"
                        },
                        "name": {
                          "description": "The name of the app used in URLs",
                          "type": "string"
                        },
                        "os": {
                          "description": "The OS the app will be running on",
                          "enum": [
                            "Android",
                            "iOS",
                            "macOS",
                            "Tizen",
                            "tvOS",
                            "Windows",
                            "Linux",
                            "Custom"
                          ],
                          "type": "string"
                        },
                        "owner": {
                          "description": "The information about the app's owner",
                          "properties": {
                            "avatar_url": {
                              "description": "The avatar URL of the owner",
                              "type": "string"
                            },
                            "display_name": {
                              "description": "The owner's display name",
                              "type": "string"
                            },
                            "email": {
                              "description": "The owner's email address",
                              "type": "string"
                            },
                            "id": {
                              "description": "The unique id (UUID) of the owner",
                              "format": "uuid",
                              "type": "string"
                            },
                            "name": {
                              "description": "The unique name that used to identify the owner",
                              "type": "string"
                            },
                            "type": {
                              "description": "The owner type. Can either be 'org' or 'user'",
                              "enum": [
                                "org",
                                "user"
                              ],
                              "type": "string"
                            }
                          },
                          "required": [
                            "id",
                            "display_name",
                            "name",
                            "type"
                          ],
                          "type": "object"
                        },
                        "release_type": {
                          "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
                          "type": "string"
                        }
                      },
                      "required": [
                        "id",
                        "display_name",
                        "name",
                        "os",
                        "owner"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "app_secret": {
                          "description": "A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics",
                          "type": "string"
                        },
                        "azure_subscription": {
                          "properties": {
                            "is_billable": {
                              "description": "If the subscription can be used for billing",
                              "type": "boolean"
                            },
                            "is_billing": {
                              "description": "If the subscription is used for billing",
                              "type": "boolean"
                            },
                            "is_microsoft_internal": {
                              "description": "If the subscription is internal Microsoft subscription",
                              "type": "boolean"
                            },
                            "subscription_id": {
                              "description": "The azure subscription id",
                              "format": "uuid",
                              "type": "string"
                            },
                            "subscription_name": {
                              "description": "The name of the azure subscription",
                              "type": "string"
                            },
                            "tenant_id": {
                              "description": "The tenant id of the azure subscription belongs to",
                              "format": "uuid",
                              "type": "string"
                            }
                          },
                          "required": [
                            "subscription_id",
                            "tenant_id",
                            "subscription_name"
                          ],
                          "type": "object"
                        },
                        "created_at": {
                          "description": "The created date of this app",
                          "type": "string"
                        },
                        "member_permissions": {
                          "description": "The permissions of the calling user",
                          "items": {
                            "enum": [
                              "manager",
                              "developer",
                              "viewer",
                              "tester"
                            ],
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "origin": {
                          "description": "The creation origin of this app",
                          "enum": [
                            "appcenter",
                            "hockeyapp",
                            "codepush"
                          ],
                          "type": "string"
                        },
                        "platform": {
                          "description": "The platform of the app",
                          "enum": [
                            "Java",
                            "Objective-C-Swift",
                            "UWP",
                            "Cordova",
                            "React-Native",
                            "Unity",
                            "Electron",
                            "Xamarin",
                            "WPF",
                            "WinForms",
                            "Unknown",
                            "Custom"
                          ],
                          "type": "string"
                        },
                        "updated_at": {
                          "description": "The last updated date of this app",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "required": [
                    "app_secret",
                    "platform",
                    "origin"
                  ]
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Transfers ownership of an app to a different user or organization",
        "operationId": "apps_transferOwnership",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            },
            "application/octet-stream": {
              "schema": {
                "type": "object"
              }
            }
          },
          "description": "allow empty body for custom http-client lib"
        },
        "x-api-principals": [
          "user"
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/transfer_to_org": {
      "post": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "avatar_url": {
                      "description": "The URL to a user-uploaded Avatar image",
                      "type": "string"
                    },
                    "created_at": {
                      "description": "The creation date of this organization",
                      "type": "string"
                    },
                    "display_name": {
                      "description": "The display name of the organization",
                      "type": "string"
                    },
                    "id": {
                      "description": "The internal unique id (UUID) of the organization.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "name": {
                      "description": "The slug name of the organization",
                      "type": "string"
                    },
                    "origin": {
                      "description": "The creation origin of this organization",
                      "enum": [
                        "appcenter",
                        "hockeyapp"
                      ],
                      "type": "string"
                    },
                    "updated_at": {
                      "description": "The date the organization was last updated at",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "display_name",
                    "name",
                    "origin",
                    "created_at",
                    "updated_at"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Transfers ownership of an app to a new organization",
        "operationId": "apps_transferToOrg",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "description": "allow empty body for custom http-client lib"
        },
        "x-api-principals": [
          "user"
        ]
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/uploads/releases": {
      "post": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "description": "The ID for the newly created upload. It is going to be required later in the process.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "package_asset_id": {
                      "description": "The associated asset ID in the file management service associated with this uploaded.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "token": {
                      "description": "The access token used for upload permissions.",
                      "type": "string"
                    },
                    "upload_domain": {
                      "description": "The URL domain used to upload the release.",
                      "type": "string"
                    },
                    "url_encoded_token": {
                      "description": "The access token used for upload permissions (URL encoded to use as a single query parameter).",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "upload_domain",
                    "token",
                    "url_encoded_token",
                    "package_asset_id"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "The request contained invalid properties."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error codes:\n- `not_found` - The app doesn't exist.\n"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "distribute"
        ],
        "description": "Initiate a new release upload. This API is part of multi-step upload process.",
        "operationId": "releases_createReleaseUpload",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "build_number": {
                    "description": "User defined build number",
                    "type": "string"
                  },
                  "build_version": {
                    "description": "User defined build version",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Optional parameters to create releases with user defined metadata"
        }
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/uploads/releases/{upload_id}": {
      "get": {
        "parameters": [
          {
            "description": "The ID of the release upload",
            "in": "path",
            "name": "upload_id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error_details": {
                      "description": "Details describing what went wrong processing the upload. Will only be set if status = 'error'.",
                      "type": "string"
                    },
                    "id": {
                      "description": "The ID for the upload.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "release_distinct_id": {
                      "description": "The distinct ID of the release. Will only be set when the status = 'readyToBePublished'.",
                      "type": "number"
                    },
                    "release_url": {
                      "description": "The URL of the release. Will only be set when the status = 'readyToBePublished'."
                    },
                    "upload_status": {
                      "description": "The current upload status.",
                      "enum": [
                        "uploadStarted",
                        "uploadFinished",
                        "readyToBePublished",
                        "malwareDetected",
                        "error"
                      ],
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "upload_status"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "The request contained invalid properties."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error codes:\n- `not_found` - The app or upload doesn't exist.\n"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "distribute"
        ],
        "description": "Get the current status of the release upload.",
        "operationId": "releases_getReleaseUploadStatus"
      },
      "patch": {
        "parameters": [
          {
            "description": "The ID of the release upload",
            "in": "path",
            "name": "upload_id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "A flag that indicates to extract release or not, true by default",
            "in": "query",
            "name": "extract",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "description": "The ID for the upload.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "upload_status": {
                      "description": "The current upload status.",
                      "enum": [
                        "uploadStarted",
                        "uploadFinished",
                        "uploadCanceled",
                        "readyToBePublished",
                        "malwareDetected",
                        "error"
                      ],
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "upload_status"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "The request contained invalid properties."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error codes:\n- `not_found` - The app or upload doesn't exist.\n"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "distribute"
        ],
        "description": "Update the current status of the release upload.",
        "operationId": "releases_updateReleaseUploadStatus",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "upload_status": {
                    "description": "The new status of the release upload",
                    "enum": [
                      "uploadFinished",
                      "uploadCanceled"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "upload_status"
                ],
                "type": "object"
              }
            }
          },
          "description": "The release upload status information.",
          "required": true
        }
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/user/device_sets": {
      "get": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "description": "The name and devices of the device set",
                    "properties": {
                      "deviceConfigurations": {
                        "items": {
                          "properties": {
                            "id": {
                              "description": "The unique id of the device configuration",
                              "format": "uuid",
                              "type": "string"
                            },
                            "image": {
                              "properties": {
                                "thumb": {
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "model": {
                              "properties": {
                                "formFactor": {
                                  "type": "string"
                                },
                                "manufacturer": {
                                  "type": "string"
                                },
                                "name": {
                                  "type": "string"
                                },
                                "releaseDate": {
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "os": {
                              "type": "string"
                            },
                            "osName": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "id": {
                        "description": "Identifier of the device set",
                        "type": "string"
                      },
                      "manufacturerCount": {
                        "description": "The number of manufacturers in the device set's device selection",
                        "type": "number"
                      },
                      "name": {
                        "description": "Name of the device set",
                        "type": "string"
                      },
                      "osVersionCount": {
                        "description": "The number of os versions in the device set's device selection",
                        "type": "number"
                      },
                      "owner": {
                        "description": "The owner of a device set",
                        "properties": {
                          "displayName": {
                            "description": "Display name of the account",
                            "type": "string"
                          },
                          "id": {
                            "description": "Account ID",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the account",
                            "type": "string"
                          },
                          "type": {
                            "description": "Type of account",
                            "type": "string"
                          }
                        },
                        "required": [
                          "type",
                          "id",
                          "name"
                        ],
                        "title": "Device Set Owner",
                        "type": "object"
                      },
                      "slug": {
                        "description": "Slug of the device set",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "name",
                      "owner",
                      "deviceConfigurations"
                    ],
                    "title": "Device Set",
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "test"
        ],
        "description": "Lists device sets belonging to the user",
        "operationId": "test_listDeviceSetsOfUser"
      },
      "post": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "The name and devices of the device set",
                  "properties": {
                    "deviceConfigurations": {
                      "items": {
                        "properties": {
                          "id": {
                            "description": "The unique id of the device configuration",
                            "format": "uuid",
                            "type": "string"
                          },
                          "image": {
                            "properties": {
                              "thumb": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "model": {
                            "properties": {
                              "formFactor": {
                                "type": "string"
                              },
                              "manufacturer": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              },
                              "releaseDate": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "os": {
                            "type": "string"
                          },
                          "osName": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "id": {
                      "description": "Identifier of the device set",
                      "type": "string"
                    },
                    "manufacturerCount": {
                      "description": "The number of manufacturers in the device set's device selection",
                      "type": "number"
                    },
                    "name": {
                      "description": "Name of the device set",
                      "type": "string"
                    },
                    "osVersionCount": {
                      "description": "The number of os versions in the device set's device selection",
                      "type": "number"
                    },
                    "owner": {
                      "description": "The owner of a device set",
                      "properties": {
                        "displayName": {
                          "description": "Display name of the account",
                          "type": "string"
                        },
                        "id": {
                          "description": "Account ID",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the account",
                          "type": "string"
                        },
                        "type": {
                          "description": "Type of account",
                          "type": "string"
                        }
                      },
                      "required": [
                        "type",
                        "id",
                        "name"
                      ],
                      "title": "Device Set Owner",
                      "type": "object"
                    },
                    "slug": {
                      "description": "Slug of the device set",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "owner",
                    "deviceConfigurations"
                  ],
                  "title": "Device Set",
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Details of a failed operation",
                  "properties": {
                    "message": {
                      "description": "Human-readable message that describes the error",
                      "type": "string"
                    },
                    "status": {
                      "description": "Status of the operation",
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "message"
                  ],
                  "title": "Test Cloud Error Details",
                  "type": "object"
                }
              }
            },
            "description": "Invalid list of device IDs or conflicting name"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "test"
        ],
        "description": "Creates a device set belonging to the user",
        "operationId": "test_createDeviceSetOfUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "The name of the device set and the list of device IDs",
                "properties": {
                  "devices": {
                    "description": "List of device IDs",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "name": {
                    "description": "The name of the device set",
                    "type": "string"
                  }
                },
                "required": [
                  "devices",
                  "name"
                ],
                "title": "Device Set update information",
                "type": "object"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/user/device_sets/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "The UUID of the device set",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Device set with the given ID was not found"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "test"
        ],
        "description": "Deletes a device set belonging to the user",
        "operationId": "test_deleteDeviceSetOfUser"
      },
      "get": {
        "parameters": [
          {
            "description": "The UUID of the device set",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "The name and devices of the device set",
                  "properties": {
                    "deviceConfigurations": {
                      "items": {
                        "properties": {
                          "id": {
                            "description": "The unique id of the device configuration",
                            "format": "uuid",
                            "type": "string"
                          },
                          "image": {
                            "properties": {
                              "thumb": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "model": {
                            "properties": {
                              "formFactor": {
                                "type": "string"
                              },
                              "manufacturer": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              },
                              "releaseDate": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "os": {
                            "type": "string"
                          },
                          "osName": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "id": {
                      "description": "Identifier of the device set",
                      "type": "string"
                    },
                    "manufacturerCount": {
                      "description": "The number of manufacturers in the device set's device selection",
                      "type": "number"
                    },
                    "name": {
                      "description": "Name of the device set",
                      "type": "string"
                    },
                    "osVersionCount": {
                      "description": "The number of os versions in the device set's device selection",
                      "type": "number"
                    },
                    "owner": {
                      "description": "The owner of a device set",
                      "properties": {
                        "displayName": {
                          "description": "Display name of the account",
                          "type": "string"
                        },
                        "id": {
                          "description": "Account ID",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the account",
                          "type": "string"
                        },
                        "type": {
                          "description": "Type of account",
                          "type": "string"
                        }
                      },
                      "required": [
                        "type",
                        "id",
                        "name"
                      ],
                      "title": "Device Set Owner",
                      "type": "object"
                    },
                    "slug": {
                      "description": "Slug of the device set",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "owner",
                    "deviceConfigurations"
                  ],
                  "title": "Device Set",
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "description": "Device set with the given ID was not found"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "test"
        ],
        "description": "Gets a device set belonging to the user",
        "operationId": "test_getDeviceSetOfUser"
      },
      "put": {
        "parameters": [
          {
            "description": "The UUID of the device set",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "The name and devices of the device set",
                  "properties": {
                    "deviceConfigurations": {
                      "items": {
                        "properties": {
                          "id": {
                            "description": "The unique id of the device configuration",
                            "format": "uuid",
                            "type": "string"
                          },
                          "image": {
                            "properties": {
                              "thumb": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "model": {
                            "properties": {
                              "formFactor": {
                                "type": "string"
                              },
                              "manufacturer": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              },
                              "releaseDate": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "os": {
                            "type": "string"
                          },
                          "osName": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "id": {
                      "description": "Identifier of the device set",
                      "type": "string"
                    },
                    "manufacturerCount": {
                      "description": "The number of manufacturers in the device set's device selection",
                      "type": "number"
                    },
                    "name": {
                      "description": "Name of the device set",
                      "type": "string"
                    },
                    "osVersionCount": {
                      "description": "The number of os versions in the device set's device selection",
                      "type": "number"
                    },
                    "owner": {
                      "description": "The owner of a device set",
                      "properties": {
                        "displayName": {
                          "description": "Display name of the account",
                          "type": "string"
                        },
                        "id": {
                          "description": "Account ID",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the account",
                          "type": "string"
                        },
                        "type": {
                          "description": "Type of account",
                          "type": "string"
                        }
                      },
                      "required": [
                        "type",
                        "id",
                        "name"
                      ],
                      "title": "Device Set Owner",
                      "type": "object"
                    },
                    "slug": {
                      "description": "Slug of the device set",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "owner",
                    "deviceConfigurations"
                  ],
                  "title": "Device Set",
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Details of a failed operation",
                  "properties": {
                    "message": {
                      "description": "Human-readable message that describes the error",
                      "type": "string"
                    },
                    "status": {
                      "description": "Status of the operation",
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "message"
                  ],
                  "title": "Test Cloud Error Details",
                  "type": "object"
                }
              }
            },
            "description": "Invalid list of device IDs or conflicting name"
          },
          "404": {
            "description": "Device set with the given ID was not found"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "test"
        ],
        "description": "Updates a device set belonging to the user",
        "operationId": "test_updateDeviceSetOfUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "The name of the device set and the list of device IDs",
                "properties": {
                  "devices": {
                    "description": "List of device IDs",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "name": {
                    "description": "The name of the device set",
                    "type": "string"
                  }
                },
                "required": [
                  "devices",
                  "name"
                ],
                "title": "Device Set update information",
                "type": "object"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/users": {
      "get": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "avatar_url": {
                        "description": "The avatar URL of the user",
                        "type": "string"
                      },
                      "can_change_password": {
                        "description": "User is required to send an old password in order to change the password.",
                        "type": "boolean"
                      },
                      "display_name": {
                        "description": "The full name of the user. Might for example be first and last name",
                        "type": "string"
                      },
                      "email": {
                        "description": "The email address of the user",
                        "type": "string"
                      },
                      "id": {
                        "description": "The unique id (UUID) of the user",
                        "format": "uuid",
                        "type": "string"
                      },
                      "name": {
                        "description": "The unique name that is used to identify the user.",
                        "type": "string"
                      },
                      "origin": {
                        "description": "The creation origin of this user",
                        "enum": [
                          "appcenter",
                          "hockeyapp",
                          "codepush"
                        ],
                        "type": "string"
                      },
                      "permissions": {
                        "description": "The permissions the user has for the app",
                        "items": {
                          "enum": [
                            "manager",
                            "developer",
                            "viewer",
                            "tester"
                          ],
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "id",
                      "display_name",
                      "email",
                      "name",
                      "origin"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Returns the users associated with the app specified with the given app name which belongs to the given owner.",
        "operationId": "users_list"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/users/{user_email}": {
      "delete": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The user email of the user to delete",
            "in": "path",
            "name": "user_email",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "BadRequest"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Removes the user from the app",
        "operationId": "apps_removeUser"
      },
      "patch": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The user email of the user to patch",
            "in": "path",
            "name": "user_email",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "BadRequest"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Update user permission for the app",
        "operationId": "apps_updateUserPermissions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "permissions": {
                    "description": "The permissions the user has for the app",
                    "items": {
                      "enum": [
                        "manager",
                        "developer",
                        "viewer"
                      ],
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "permissions"
                ],
                "type": "object"
              }
            }
          },
          "description": "The value to update the user permission for the app.",
          "required": true
        }
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/versions": {
      "get": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "app_id": {
                        "type": "string"
                      },
                      "app_version": {
                        "type": "string"
                      },
                      "app_version_id": {
                        "type": "string"
                      },
                      "build_number": {
                        "type": "string"
                      },
                      "display_name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "app_version_id",
                      "app_id",
                      "display_name",
                      "app_version"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "crash"
        ],
        "deprecated": true,
        "description": "Gets a list of application versions.",
        "operationId": "crashes_getAppVersions"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/webhooks": {
      "get": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "List of alerting webhooks wrapped as operation result",
                  "properties": {
                    "values": {
                      "items": {
                        "description": "Alerting webhook",
                        "properties": {
                          "enabled": {
                            "description": "Allows eanble/disable webhook",
                            "type": "boolean"
                          },
                          "event_types": {
                            "description": "Event types enabled for webhook",
                            "items": {
                              "description": "Alerting EventTypes enum",
                              "enum": [
                                "newCrashGroupCreated",
                                "newAppReleased"
                              ],
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "id": {
                            "description": "The unique id (UUID) of the webhook",
                            "type": "string"
                          },
                          "name": {
                            "description": "display name of the webhook",
                            "maxLength": 512,
                            "type": "string"
                          },
                          "url": {
                            "description": "target url of the webhook",
                            "type": "string"
                          }
                        },
                        "required": [
                          "name",
                          "url",
                          "event_types"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "values"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "description": "Generic result for any alerting API operation",
                      "properties": {
                        "request_id": {
                          "description": "Unique request identifier for tracking",
                          "type": "string"
                        }
                      },
                      "required": [
                        "request_id"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "code": {
                          "description": "The status code return by the API. It can be 400 or 404 or 409 or 500.",
                          "enum": [
                            400,
                            404,
                            409,
                            500
                          ],
                          "type": "integer"
                        },
                        "message": {
                          "description": "The reason for the request failed",
                          "type": "string"
                        }
                      },
                      "required": [
                        "code"
                      ],
                      "type": "object"
                    }
                  ],
                  "description": "Alerting service error"
                }
              }
            },
            "description": "Error code with reason"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "alerting"
        ],
        "description": "Get web hooks configured for a particular app",
        "operationId": "webhooks_list"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/xamarin_sdk_bundles": {
      "get": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A list of Xamarin SDK bundles",
                  "items": {
                    "description": "The Xamarin SDK bundle",
                    "properties": {
                      "current": {
                        "description": "If the SDK is latest stable",
                        "type": "boolean"
                      },
                      "monoVersion": {
                        "description": "The Mono version",
                        "type": "string"
                      },
                      "sdkBundle": {
                        "description": "The Xamarin SDK version",
                        "type": "string"
                      },
                      "stable": {
                        "description": "If the SDK is stable",
                        "type": "boolean"
                      },
                      "xcodeVersions": {
                        "description": "Specific for iOS SDK. A list of Xcode versions supported by current SDK version",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "build"
        ],
        "deprecated": true,
        "description": "Gets the Xamarin SDK bundles available to this app",
        "operationId": "builds_listXamarinSDKBundles"
      }
    },
    "/v0.1/apps/{owner_name}/{app_name}/xcode_versions": {
      "get": {
        "parameters": [
          {
            "description": "The name of the owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A list of Xcode versions",
                  "items": {
                    "description": "The Xcode version",
                    "properties": {
                      "current": {
                        "description": "If the Xcode is latest stable",
                        "type": "boolean"
                      },
                      "name": {
                        "description": "The version name",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "build"
        ],
        "deprecated": true,
        "description": "Gets the Xcode versions available to this app",
        "operationId": "builds_listXcodeVersions"
      }
    },
    "/v0.1/azure_subscriptions": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "is_billable": {
                        "description": "If the subscription can be used for billing",
                        "type": "boolean"
                      },
                      "is_billing": {
                        "description": "If the subscription is used for billing",
                        "type": "boolean"
                      },
                      "is_microsoft_internal": {
                        "description": "If the subscription is internal Microsoft subscription",
                        "type": "boolean"
                      },
                      "subscription_id": {
                        "description": "The azure subscription id",
                        "format": "uuid",
                        "type": "string"
                      },
                      "subscription_name": {
                        "description": "The name of the azure subscription",
                        "type": "string"
                      },
                      "tenant_id": {
                        "description": "The tenant id of the azure subscription belongs to",
                        "format": "uuid",
                        "type": "string"
                      }
                    },
                    "required": [
                      "subscription_id",
                      "tenant_id",
                      "subscription_name"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "BadRequest"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Returns a list of azure subscriptions for the user",
        "operationId": "azureSubscription_listForUser"
      }
    },
    "/v0.1/billing/allAccountsAggregated": {
      "get": {
        "parameters": [
          {
            "description": "Type of service that should be included in the Billing Information",
            "in": "query",
            "name": "service",
            "required": false,
            "schema": {
              "enum": [
                "Test",
                "Build"
              ],
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Type of period that should be included in the Billing Information",
            "in": "query",
            "name": "period",
            "required": false,
            "schema": {
              "enum": [
                "Previous",
                "Current",
                "Next"
              ],
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Controls whether the API should show the original plan when Azure Subscription is not enabled",
            "in": "query",
            "name": "showOriginalPlans",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Aggregated Billing Information for a user an the organizations in which the user is an admin.",
                  "properties": {
                    "aggregatedBillings": {
                      "description": "Aggregated Billing Information for a user or an organization",
                      "properties": {
                        "azureSubscriptionId": {
                          "description": "Unique identifier for the Azure subscription used for billing",
                          "type": "string"
                        },
                        "azureSubscriptionState": {
                          "description": "State of the Azure subscription used for billing",
                          "enum": [
                            "Enabled",
                            "Disabled",
                            "NotSet"
                          ],
                          "type": "string"
                        },
                        "billingPlans": {
                          "description": "Billing Plans section in the Billing Information",
                          "properties": {
                            "buildService": {
                              "description": "Billing Plans for a single service",
                              "properties": {
                                "canSelectTrialPlan": {
                                  "description": "Can customer select trial plan for that service (if it exists)?",
                                  "type": "boolean"
                                },
                                "currentBillingPeriod": {
                                  "description": "Billing plans for a given period",
                                  "properties": {
                                    "byAccount": {
                                      "description": "Selection of a billing plan",
                                      "properties": {
                                        "count": {
                                          "description": "Number of instances of the billing plan.",
                                          "type": "integer"
                                        },
                                        "plan": {
                                          "description": "Billing Plan",
                                          "properties": {
                                            "attributes": {
                                              "additionalProperties": {
                                                "type": "object"
                                              },
                                              "description": "Collection of attribute values.",
                                              "type": "object"
                                            },
                                            "id": {
                                              "description": "The Billing Plan ID",
                                              "type": "string"
                                            },
                                            "limits": {
                                              "additionalProperties": {
                                                "type": "number"
                                              },
                                              "description": "A collection of named numeric values",
                                              "type": "object"
                                            },
                                            "parentId": {
                                              "type": "string"
                                            },
                                            "paymentSource": {
                                              "description": "Service that receives payments for this billing plan.",
                                              "enum": [
                                                "None",
                                                "AppCenter",
                                                "GitHub",
                                                "Xtc"
                                              ],
                                              "type": "string"
                                            },
                                            "price": {
                                              "description": "Price of the Billing Plan",
                                              "type": "number"
                                            },
                                            "service": {
                                              "description": "Name of the service that the plan applies to.",
                                              "enum": [
                                                "Build",
                                                "Test"
                                              ],
                                              "type": "string"
                                            },
                                            "version": {
                                              "description": "Version of the Billing Plan schema",
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "endTime": {
                                      "description": "Exclusive end of the period.",
                                      "format": "dateTime",
                                      "type": "string"
                                    },
                                    "startTime": {
                                      "description": "Inclusive start of the period",
                                      "format": "dateTime",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "lastTrialPlanExpirationTime": {
                                  "description": "Expiration time of the last selected trial plan. Will be null if trial plan was not used.",
                                  "format": "dateTime",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "testService": {
                              "description": "Billing Plans for a single service",
                              "properties": {
                                "canSelectTrialPlan": {
                                  "description": "Can customer select trial plan for that service (if it exists)?",
                                  "type": "boolean"
                                },
                                "currentBillingPeriod": {
                                  "description": "Billing plans for a given period",
                                  "properties": {
                                    "byAccount": {
                                      "description": "Selection of a billing plan",
                                      "properties": {
                                        "count": {
                                          "description": "Number of instances of the billing plan.",
                                          "type": "integer"
                                        },
                                        "plan": {
                                          "description": "Billing Plan",
                                          "properties": {
                                            "attributes": {
                                              "additionalProperties": {
                                                "type": "object"
                                              },
                                              "description": "Collection of attribute values.",
                                              "type": "object"
                                            },
                                            "id": {
                                              "description": "The Billing Plan ID",
                                              "type": "string"
                                            },
                                            "limits": {
                                              "additionalProperties": {
                                                "type": "number"
                                              },
                                              "description": "A collection of named numeric values",
                                              "type": "object"
                                            },
                                            "parentId": {
                                              "type": "string"
                                            },
                                            "paymentSource": {
                                              "description": "Service that receives payments for this billing plan.",
                                              "enum": [
                                                "None",
                                                "AppCenter",
                                                "GitHub",
                                                "Xtc"
                                              ],
                                              "type": "string"
                                            },
                                            "price": {
                                              "description": "Price of the Billing Plan",
                                              "type": "number"
                                            },
                                            "service": {
                                              "description": "Name of the service that the plan applies to.",
                                              "enum": [
                                                "Build",
                                                "Test"
                                              ],
                                              "type": "string"
                                            },
                                            "version": {
                                              "description": "Version of the Billing Plan schema",
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "endTime": {
                                      "description": "Exclusive end of the period.",
                                      "format": "dateTime",
                                      "type": "string"
                                    },
                                    "startTime": {
                                      "description": "Inclusive start of the period",
                                      "format": "dateTime",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "lastTrialPlanExpirationTime": {
                                  "description": "Expiration time of the last selected trial plan. Will be null if trial plan was not used.",
                                  "format": "dateTime",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "ID of the user or organization",
                          "type": "string"
                        },
                        "timestamp": {
                          "description": "The ISO 8601 datetime of last modification",
                          "format": "dateTime",
                          "type": "string"
                        },
                        "usage": {
                          "description": "Usage section in the Billing Information",
                          "properties": {
                            "buildService": {
                              "description": "Resource usage for a single Mobile Center service",
                              "properties": {
                                "currentUsagePeriod": {
                                  "description": "Usage for a single period",
                                  "properties": {
                                    "byAccount": {
                                      "additionalProperties": {
                                        "type": "number"
                                      },
                                      "description": "A collection of named numeric values",
                                      "type": "object"
                                    },
                                    "byApp": {
                                      "additionalProperties": {
                                        "additionalProperties": {
                                          "type": "number"
                                        },
                                        "description": "A collection of named numeric values",
                                        "type": "object"
                                      },
                                      "description": "A collection of  named numeric values grouped by app",
                                      "type": "object"
                                    },
                                    "endTime": {
                                      "description": "Exclusive end time of the usage period.",
                                      "format": "dateTime",
                                      "type": "string"
                                    },
                                    "startTime": {
                                      "description": "Inclusive start time of the usage period",
                                      "format": "dateTime",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            "testService": {
                              "description": "Resource usage for a single Mobile Center service",
                              "properties": {
                                "currentUsagePeriod": {
                                  "description": "Usage for a single period",
                                  "properties": {
                                    "byAccount": {
                                      "additionalProperties": {
                                        "type": "number"
                                      },
                                      "description": "A collection of named numeric values",
                                      "type": "object"
                                    },
                                    "byApp": {
                                      "additionalProperties": {
                                        "additionalProperties": {
                                          "type": "number"
                                        },
                                        "description": "A collection of named numeric values",
                                        "type": "object"
                                      },
                                      "description": "A collection of  named numeric values grouped by app",
                                      "type": "object"
                                    },
                                    "endTime": {
                                      "description": "Exclusive end time of the usage period.",
                                      "format": "dateTime",
                                      "type": "string"
                                    },
                                    "startTime": {
                                      "description": "Inclusive start time of the usage period",
                                      "format": "dateTime",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "version": {
                          "description": "Version of the Billing Information schema",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Aggregated Billing Information for the requesting user and the organizations in which the user is an admin."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error",
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "description": "The status code return by the API. It can be 400 or 403 or 500.",
                          "enum": [
                            400,
                            403,
                            500
                          ],
                          "type": "integer"
                        },
                        "message": {
                          "description": "The reason for the request failed",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "billing"
        ],
        "description": "Aggregated Billing Information for the requesting user and the organizations in which the user is an admin.",
        "operationId": "billingAggregatedInformation_getAll"
      }
    },
    "/v0.1/invitations/sent": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "app": {
                        "allOf": [
                          {
                            "properties": {
                              "description": {
                                "description": "The description of the app",
                                "type": "string"
                              },
                              "display_name": {
                                "description": "The display name of the app",
                                "type": "string"
                              },
                              "icon_source": {
                                "description": "The string representation of the source of the app's icon",
                                "type": "string"
                              },
                              "icon_url": {
                                "description": "The string representation of the URL pointing to the app's icon",
                                "type": "string"
                              },
                              "id": {
                                "description": "The unique ID (UUID) of the app",
                                "format": "uuid",
                                "type": "string"
                              },
                              "name": {
                                "description": "The name of the app used in URLs",
                                "type": "string"
                              },
                              "os": {
                                "description": "The OS the app will be running on",
                                "enum": [
                                  "Android",
                                  "iOS",
                                  "macOS",
                                  "Tizen",
                                  "tvOS",
                                  "Windows",
                                  "Linux",
                                  "Custom"
                                ],
                                "type": "string"
                              },
                              "owner": {
                                "description": "The information about the app's owner",
                                "properties": {
                                  "avatar_url": {
                                    "description": "The avatar URL of the owner",
                                    "type": "string"
                                  },
                                  "display_name": {
                                    "description": "The owner's display name",
                                    "type": "string"
                                  },
                                  "email": {
                                    "description": "The owner's email address",
                                    "type": "string"
                                  },
                                  "id": {
                                    "description": "The unique id (UUID) of the owner",
                                    "format": "uuid",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "The unique name that used to identify the owner",
                                    "type": "string"
                                  },
                                  "type": {
                                    "description": "The owner type. Can either be 'org' or 'user'",
                                    "enum": [
                                      "org",
                                      "user"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id",
                                  "display_name",
                                  "name",
                                  "type"
                                ],
                                "type": "object"
                              },
                              "release_type": {
                                "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
                                "type": "string"
                              }
                            },
                            "required": [
                              "id",
                              "display_name",
                              "name",
                              "os",
                              "owner"
                            ],
                            "type": "object"
                          },
                          {
                            "properties": {
                              "app_secret": {
                                "description": "A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics",
                                "type": "string"
                              },
                              "azure_subscription": {
                                "properties": {
                                  "is_billable": {
                                    "description": "If the subscription can be used for billing",
                                    "type": "boolean"
                                  },
                                  "is_billing": {
                                    "description": "If the subscription is used for billing",
                                    "type": "boolean"
                                  },
                                  "is_microsoft_internal": {
                                    "description": "If the subscription is internal Microsoft subscription",
                                    "type": "boolean"
                                  },
                                  "subscription_id": {
                                    "description": "The azure subscription id",
                                    "format": "uuid",
                                    "type": "string"
                                  },
                                  "subscription_name": {
                                    "description": "The name of the azure subscription",
                                    "type": "string"
                                  },
                                  "tenant_id": {
                                    "description": "The tenant id of the azure subscription belongs to",
                                    "format": "uuid",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "subscription_id",
                                  "tenant_id",
                                  "subscription_name"
                                ],
                                "type": "object"
                              },
                              "created_at": {
                                "description": "The created date of this app",
                                "type": "string"
                              },
                              "member_permissions": {
                                "description": "The permissions of the calling user",
                                "items": {
                                  "enum": [
                                    "manager",
                                    "developer",
                                    "viewer",
                                    "tester"
                                  ],
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "origin": {
                                "description": "The creation origin of this app",
                                "enum": [
                                  "appcenter",
                                  "hockeyapp",
                                  "codepush"
                                ],
                                "type": "string"
                              },
                              "platform": {
                                "description": "The platform of the app",
                                "enum": [
                                  "Java",
                                  "Objective-C-Swift",
                                  "UWP",
                                  "Cordova",
                                  "React-Native",
                                  "Unity",
                                  "Electron",
                                  "Xamarin",
                                  "WPF",
                                  "WinForms",
                                  "Unknown",
                                  "Custom"
                                ],
                                "type": "string"
                              },
                              "updated_at": {
                                "description": "The last updated date of this app",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "required": [
                          "app_secret",
                          "platform",
                          "origin"
                        ]
                      },
                      "invitation_id": {
                        "description": "The id of the invitation",
                        "format": "uuid",
                        "type": "string"
                      },
                      "organization": {
                        "properties": {
                          "avatar_url": {
                            "description": "The URL to a user-uploaded Avatar image",
                            "type": "string"
                          },
                          "created_at": {
                            "description": "The creation date of this organization",
                            "type": "string"
                          },
                          "display_name": {
                            "description": "The display name of the organization",
                            "type": "string"
                          },
                          "id": {
                            "description": "The internal unique id (UUID) of the organization.",
                            "format": "uuid",
                            "type": "string"
                          },
                          "name": {
                            "description": "The slug name of the organization",
                            "type": "string"
                          },
                          "origin": {
                            "description": "The creation origin of this organization",
                            "enum": [
                              "appcenter",
                              "hockeyapp"
                            ],
                            "type": "string"
                          },
                          "updated_at": {
                            "description": "The date the organization was last updated at",
                            "type": "string"
                          }
                        },
                        "required": [
                          "id",
                          "display_name",
                          "name",
                          "origin",
                          "created_at",
                          "updated_at"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "invitation_id"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Returns all invitations sent by the caller",
        "operationId": "invitations_sent"
      }
    },
    "/v0.1/legacy/reportStatus/deploy": {
      "post": {
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "codepush"
        ],
        "description": "Report deploy of specified release",
        "operationId": "legacyCodePushAcquisition_updateInstallsStatus",
        "requestBody": {
          "$ref": "#/components/requestBodies/legacyCodePushAcquisition_updateDownloadStatusReleasemetadata"
        }
      }
    },
    "/v0.1/legacy/reportStatus/download": {
      "post": {
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "codepush"
        ],
        "description": "Report download of specified release",
        "operationId": "legacyCodePushAcquisition_updateDownloadStatus",
        "requestBody": {
          "$ref": "#/components/requestBodies/legacyCodePushAcquisition_updateDownloadStatusReleasemetadata"
        }
      }
    },
    "/v0.1/legacy/updateCheck": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "deploymentKey",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "appVersion",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "packageHash",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "label",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "clientUniqueId",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "isCompanion",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "updateInfo": {
                      "allOf": [
                        {
                          "properties": {
                            "appVersion": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            },
                            "isDisabled": {
                              "type": "boolean"
                            },
                            "isMandatory": {
                              "type": "boolean"
                            },
                            "rollout": {
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        },
                        {
                          "properties": {
                            "downloadURL": {
                              "type": "string"
                            },
                            "isAvailable": {
                              "type": "boolean"
                            },
                            "label": {
                              "type": "string"
                            },
                            "packageHash": {
                              "type": "string"
                            },
                            "packageSize": {
                              "type": "number"
                            },
                            "shouldRunBinaryVersion": {
                              "type": "boolean"
                            },
                            "updateAppVersion": {
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        }
                      ],
                      "required": [
                        "isAvailable"
                      ]
                    }
                  },
                  "required": [
                    "updateInfo"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "codepush"
        ],
        "description": "Check for updates",
        "operationId": "legacyCodePushAcquisition_updateCheck"
      }
    },
    "/v0.1/orgs": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "display_name": {
                        "description": "The display name of the organization",
                        "type": "string"
                      },
                      "name": {
                        "description": "The slug name of the organization",
                        "type": "string"
                      },
                      "origin": {
                        "description": "The creation origin of this organization",
                        "enum": [
                          "appcenter",
                          "hockeyapp"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "display_name",
                      "name",
                      "origin"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Returns a list of organizations the requesting user has access to",
        "operationId": "organizations_list"
      },
      "post": {
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "avatar_url": {
                      "description": "The URL to a user-uploaded Avatar image",
                      "type": "string"
                    },
                    "created_at": {
                      "description": "The creation date of this organization",
                      "type": "string"
                    },
                    "display_name": {
                      "description": "The display name of the organization",
                      "type": "string"
                    },
                    "id": {
                      "description": "The internal unique id (UUID) of the organization.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "name": {
                      "description": "The slug name of the organization",
                      "type": "string"
                    },
                    "origin": {
                      "description": "The creation origin of this organization",
                      "enum": [
                        "appcenter",
                        "hockeyapp"
                      ],
                      "type": "string"
                    },
                    "updated_at": {
                      "description": "The date the organization was last updated at",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "display_name",
                    "name",
                    "origin",
                    "created_at",
                    "updated_at"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Creates a new organization and returns it to the caller",
        "operationId": "organizations_createOrUpdate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "display_name": {
                    "description": "The display name of the organization",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the organization used in URLs",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "The organization data",
          "required": true
        }
      }
    },
    "/v0.1/orgs/{orgName}/billing/aggregated": {
      "get": {
        "parameters": [
          {
            "description": "The name of the Organization",
            "in": "path",
            "name": "orgName",
            "required": true,
            "schema": {
              "format": "string",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Type of service that should be included in the Billing Information",
            "in": "query",
            "name": "service",
            "required": false,
            "schema": {
              "enum": [
                "Test",
                "Build"
              ],
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Type of period that should be included in the Billing Information",
            "in": "query",
            "name": "period",
            "required": false,
            "schema": {
              "enum": [
                "Previous",
                "Current",
                "Next"
              ],
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Controls whether the API should show the original plan when Azure Subscription is not enabled",
            "in": "query",
            "name": "showOriginalPlans",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Aggregated Billing Information for a user or an organization",
                  "properties": {
                    "azureSubscriptionId": {
                      "description": "Unique identifier for the Azure subscription used for billing",
                      "type": "string"
                    },
                    "azureSubscriptionState": {
                      "description": "State of the Azure subscription used for billing",
                      "enum": [
                        "Enabled",
                        "Disabled",
                        "NotSet"
                      ],
                      "type": "string"
                    },
                    "billingPlans": {
                      "description": "Billing Plans section in the Billing Information",
                      "properties": {
                        "buildService": {
                          "description": "Billing Plans for a single service",
                          "properties": {
                            "canSelectTrialPlan": {
                              "description": "Can customer select trial plan for that service (if it exists)?",
                              "type": "boolean"
                            },
                            "currentBillingPeriod": {
                              "description": "Billing plans for a given period",
                              "properties": {
                                "byAccount": {
                                  "description": "Selection of a billing plan",
                                  "properties": {
                                    "count": {
                                      "description": "Number of instances of the billing plan.",
                                      "type": "integer"
                                    },
                                    "plan": {
                                      "description": "Billing Plan",
                                      "properties": {
                                        "attributes": {
                                          "additionalProperties": {
                                            "type": "object"
                                          },
                                          "description": "Collection of attribute values.",
                                          "type": "object"
                                        },
                                        "id": {
                                          "description": "The Billing Plan ID",
                                          "type": "string"
                                        },
                                        "limits": {
                                          "additionalProperties": {
                                            "type": "number"
                                          },
                                          "description": "A collection of named numeric values",
                                          "type": "object"
                                        },
                                        "parentId": {
                                          "type": "string"
                                        },
                                        "paymentSource": {
                                          "description": "Service that receives payments for this billing plan.",
                                          "enum": [
                                            "None",
                                            "AppCenter",
                                            "GitHub",
                                            "Xtc"
                                          ],
                                          "type": "string"
                                        },
                                        "price": {
                                          "description": "Price of the Billing Plan",
                                          "type": "number"
                                        },
                                        "service": {
                                          "description": "Name of the service that the plan applies to.",
                                          "enum": [
                                            "Build",
                                            "Test"
                                          ],
                                          "type": "string"
                                        },
                                        "version": {
                                          "description": "Version of the Billing Plan schema",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "endTime": {
                                  "description": "Exclusive end of the period.",
                                  "format": "dateTime",
                                  "type": "string"
                                },
                                "startTime": {
                                  "description": "Inclusive start of the period",
                                  "format": "dateTime",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "lastTrialPlanExpirationTime": {
                              "description": "Expiration time of the last selected trial plan. Will be null if trial plan was not used.",
                              "format": "dateTime",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "testService": {
                          "description": "Billing Plans for a single service",
                          "properties": {
                            "canSelectTrialPlan": {
                              "description": "Can customer select trial plan for that service (if it exists)?",
                              "type": "boolean"
                            },
                            "currentBillingPeriod": {
                              "description": "Billing plans for a given period",
                              "properties": {
                                "byAccount": {
                                  "description": "Selection of a billing plan",
                                  "properties": {
                                    "count": {
                                      "description": "Number of instances of the billing plan.",
                                      "type": "integer"
                                    },
                                    "plan": {
                                      "description": "Billing Plan",
                                      "properties": {
                                        "attributes": {
                                          "additionalProperties": {
                                            "type": "object"
                                          },
                                          "description": "Collection of attribute values.",
                                          "type": "object"
                                        },
                                        "id": {
                                          "description": "The Billing Plan ID",
                                          "type": "string"
                                        },
                                        "limits": {
                                          "additionalProperties": {
                                            "type": "number"
                                          },
                                          "description": "A collection of named numeric values",
                                          "type": "object"
                                        },
                                        "parentId": {
                                          "type": "string"
                                        },
                                        "paymentSource": {
                                          "description": "Service that receives payments for this billing plan.",
                                          "enum": [
                                            "None",
                                            "AppCenter",
                                            "GitHub",
                                            "Xtc"
                                          ],
                                          "type": "string"
                                        },
                                        "price": {
                                          "description": "Price of the Billing Plan",
                                          "type": "number"
                                        },
                                        "service": {
                                          "description": "Name of the service that the plan applies to.",
                                          "enum": [
                                            "Build",
                                            "Test"
                                          ],
                                          "type": "string"
                                        },
                                        "version": {
                                          "description": "Version of the Billing Plan schema",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "endTime": {
                                  "description": "Exclusive end of the period.",
                                  "format": "dateTime",
                                  "type": "string"
                                },
                                "startTime": {
                                  "description": "Inclusive start of the period",
                                  "format": "dateTime",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "lastTrialPlanExpirationTime": {
                              "description": "Expiration time of the last selected trial plan. Will be null if trial plan was not used.",
                              "format": "dateTime",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "id": {
                      "description": "ID of the user or organization",
                      "type": "string"
                    },
                    "timestamp": {
                      "description": "The ISO 8601 datetime of last modification",
                      "format": "dateTime",
                      "type": "string"
                    },
                    "usage": {
                      "description": "Usage section in the Billing Information",
                      "properties": {
                        "buildService": {
                          "description": "Resource usage for a single Mobile Center service",
                          "properties": {
                            "currentUsagePeriod": {
                              "description": "Usage for a single period",
                              "properties": {
                                "byAccount": {
                                  "additionalProperties": {
                                    "type": "number"
                                  },
                                  "description": "A collection of named numeric values",
                                  "type": "object"
                                },
                                "byApp": {
                                  "additionalProperties": {
                                    "additionalProperties": {
                                      "type": "number"
                                    },
                                    "description": "A collection of named numeric values",
                                    "type": "object"
                                  },
                                  "description": "A collection of  named numeric values grouped by app",
                                  "type": "object"
                                },
                                "endTime": {
                                  "description": "Exclusive end time of the usage period.",
                                  "format": "dateTime",
                                  "type": "string"
                                },
                                "startTime": {
                                  "description": "Inclusive start time of the usage period",
                                  "format": "dateTime",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "testService": {
                          "description": "Resource usage for a single Mobile Center service",
                          "properties": {
                            "currentUsagePeriod": {
                              "description": "Usage for a single period",
                              "properties": {
                                "byAccount": {
                                  "additionalProperties": {
                                    "type": "number"
                                  },
                                  "description": "A collection of named numeric values",
                                  "type": "object"
                                },
                                "byApp": {
                                  "additionalProperties": {
                                    "additionalProperties": {
                                      "type": "number"
                                    },
                                    "description": "A collection of named numeric values",
                                    "type": "object"
                                  },
                                  "description": "A collection of  named numeric values grouped by app",
                                  "type": "object"
                                },
                                "endTime": {
                                  "description": "Exclusive end time of the usage period.",
                                  "format": "dateTime",
                                  "type": "string"
                                },
                                "startTime": {
                                  "description": "Inclusive start time of the usage period",
                                  "format": "dateTime",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "version": {
                      "description": "Version of the Billing Information schema",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Aggregated Billing Information for a given Organization"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error",
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "description": "The status code return by the API. It can be 400 or 403 or 500.",
                          "enum": [
                            400,
                            403,
                            500
                          ],
                          "type": "integer"
                        },
                        "message": {
                          "description": "The reason for the request failed",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "billing"
        ],
        "description": "Aggregated Billing Information for a given Organization.",
        "operationId": "billingAggregatedInformation_getForOrg"
      }
    },
    "/v0.1/orgs/{org_name}": {
      "delete": {
        "parameters": [
          {
            "description": "The organization's name",
            "in": "path",
            "name": "org_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Deletes a single organization",
        "operationId": "organizations_delete"
      },
      "get": {
        "parameters": [
          {
            "description": "The organization's name",
            "in": "path",
            "name": "org_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "avatar_url": {
                      "description": "The URL to a user-uploaded Avatar image",
                      "type": "string"
                    },
                    "created_at": {
                      "description": "The creation date of this organization",
                      "type": "string"
                    },
                    "display_name": {
                      "description": "The display name of the organization",
                      "type": "string"
                    },
                    "id": {
                      "description": "The internal unique id (UUID) of the organization.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "name": {
                      "description": "The slug name of the organization",
                      "type": "string"
                    },
                    "origin": {
                      "description": "The creation origin of this organization",
                      "enum": [
                        "appcenter",
                        "hockeyapp"
                      ],
                      "type": "string"
                    },
                    "updated_at": {
                      "description": "The date the organization was last updated at",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "display_name",
                    "name",
                    "origin",
                    "created_at",
                    "updated_at"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Returns the details of a single organization",
        "operationId": "organizations_get"
      },
      "patch": {
        "parameters": [
          {
            "description": "The organization's name",
            "in": "path",
            "name": "org_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "avatar_url": {
                      "description": "The URL to a user-uploaded Avatar image",
                      "type": "string"
                    },
                    "created_at": {
                      "description": "The creation date of this organization",
                      "type": "string"
                    },
                    "display_name": {
                      "description": "The display name of the organization",
                      "type": "string"
                    },
                    "id": {
                      "description": "The internal unique id (UUID) of the organization.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "name": {
                      "description": "The slug name of the organization",
                      "type": "string"
                    },
                    "origin": {
                      "description": "The creation origin of this organization",
                      "enum": [
                        "appcenter",
                        "hockeyapp"
                      ],
                      "type": "string"
                    },
                    "updated_at": {
                      "description": "The date the organization was last updated at",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "display_name",
                    "name",
                    "origin",
                    "created_at",
                    "updated_at"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Returns a list of organizations the requesting user has access to",
        "operationId": "organizations_update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "display_name": {
                    "description": "The full (friendly) name of the organization.",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the organization used in URLs",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "The data for the org",
          "required": true
        }
      }
    },
    "/v0.1/orgs/{org_name}/apps": {
      "get": {
        "parameters": [
          {
            "description": "The organization's name",
            "in": "path",
            "name": "org_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "allOf": [
                      {
                        "properties": {
                          "description": {
                            "description": "The description of the app",
                            "type": "string"
                          },
                          "display_name": {
                            "description": "The display name of the app",
                            "type": "string"
                          },
                          "icon_source": {
                            "description": "The string representation of the source of the app's icon",
                            "type": "string"
                          },
                          "icon_url": {
                            "description": "The string representation of the URL pointing to the app's icon",
                            "type": "string"
                          },
                          "id": {
                            "description": "The unique ID (UUID) of the app",
                            "format": "uuid",
                            "type": "string"
                          },
                          "name": {
                            "description": "The name of the app used in URLs",
                            "type": "string"
                          },
                          "os": {
                            "description": "The OS the app will be running on",
                            "enum": [
                              "Android",
                              "iOS",
                              "macOS",
                              "Tizen",
                              "tvOS",
                              "Windows",
                              "Linux",
                              "Custom"
                            ],
                            "type": "string"
                          },
                          "owner": {
                            "description": "The information about the app's owner",
                            "properties": {
                              "avatar_url": {
                                "description": "The avatar URL of the owner",
                                "type": "string"
                              },
                              "display_name": {
                                "description": "The owner's display name",
                                "type": "string"
                              },
                              "email": {
                                "description": "The owner's email address",
                                "type": "string"
                              },
                              "id": {
                                "description": "The unique id (UUID) of the owner",
                                "format": "uuid",
                                "type": "string"
                              },
                              "name": {
                                "description": "The unique name that used to identify the owner",
                                "type": "string"
                              },
                              "type": {
                                "description": "The owner type. Can either be 'org' or 'user'",
                                "enum": [
                                  "org",
                                  "user"
                                ],
                                "type": "string"
                              }
                            },
                            "required": [
                              "id",
                              "display_name",
                              "name",
                              "type"
                            ],
                            "type": "object"
                          },
                          "release_type": {
                            "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
                            "type": "string"
                          }
                        },
                        "required": [
                          "id",
                          "display_name",
                          "name",
                          "os",
                          "owner"
                        ],
                        "type": "object"
                      },
                      {
                        "properties": {
                          "app_secret": {
                            "description": "A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics",
                            "type": "string"
                          },
                          "azure_subscription": {
                            "properties": {
                              "is_billable": {
                                "description": "If the subscription can be used for billing",
                                "type": "boolean"
                              },
                              "is_billing": {
                                "description": "If the subscription is used for billing",
                                "type": "boolean"
                              },
                              "is_microsoft_internal": {
                                "description": "If the subscription is internal Microsoft subscription",
                                "type": "boolean"
                              },
                              "subscription_id": {
                                "description": "The azure subscription id",
                                "format": "uuid",
                                "type": "string"
                              },
                              "subscription_name": {
                                "description": "The name of the azure subscription",
                                "type": "string"
                              },
                              "tenant_id": {
                                "description": "The tenant id of the azure subscription belongs to",
                                "format": "uuid",
                                "type": "string"
                              }
                            },
                            "required": [
                              "subscription_id",
                              "tenant_id",
                              "subscription_name"
                            ],
                            "type": "object"
                          },
                          "created_at": {
                            "description": "The created date of this app",
                            "type": "string"
                          },
                          "member_permissions": {
                            "description": "The permissions of the calling user",
                            "items": {
                              "enum": [
                                "manager",
                                "developer",
                                "viewer",
                                "tester"
                              ],
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "origin": {
                            "description": "The creation origin of this app",
                            "enum": [
                              "appcenter",
                              "hockeyapp",
                              "codepush"
                            ],
                            "type": "string"
                          },
                          "platform": {
                            "description": "The platform of the app",
                            "enum": [
                              "Java",
                              "Objective-C-Swift",
                              "UWP",
                              "Cordova",
                              "React-Native",
                              "Unity",
                              "Electron",
                              "Xamarin",
                              "WPF",
                              "WinForms",
                              "Unknown",
                              "Custom"
                            ],
                            "type": "string"
                          },
                          "updated_at": {
                            "description": "The last updated date of this app",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "required": [
                      "app_secret",
                      "platform",
                      "origin"
                    ]
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Returns a list of apps for the organization",
        "operationId": "apps_listForOrg"
      },
      "post": {
        "parameters": [
          {
            "description": "The organization's name",
            "in": "path",
            "name": "org_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "properties": {
                        "description": {
                          "description": "The description of the app",
                          "type": "string"
                        },
                        "display_name": {
                          "description": "The display name of the app",
                          "type": "string"
                        },
                        "icon_source": {
                          "description": "The string representation of the source of the app's icon",
                          "type": "string"
                        },
                        "icon_url": {
                          "description": "The string representation of the URL pointing to the app's icon",
                          "type": "string"
                        },
                        "id": {
                          "description": "The unique ID (UUID) of the app",
                          "format": "uuid",
                          "type": "string"
                        },
                        "name": {
                          "description": "The name of the app used in URLs",
                          "type": "string"
                        },
                        "os": {
                          "description": "The OS the app will be running on",
                          "enum": [
                            "Android",
                            "iOS",
                            "macOS",
                            "Tizen",
                            "tvOS",
                            "Windows",
                            "Linux",
                            "Custom"
                          ],
                          "type": "string"
                        },
                        "owner": {
                          "description": "The information about the app's owner",
                          "properties": {
                            "avatar_url": {
                              "description": "The avatar URL of the owner",
                              "type": "string"
                            },
                            "display_name": {
                              "description": "The owner's display name",
                              "type": "string"
                            },
                            "email": {
                              "description": "The owner's email address",
                              "type": "string"
                            },
                            "id": {
                              "description": "The unique id (UUID) of the owner",
                              "format": "uuid",
                              "type": "string"
                            },
                            "name": {
                              "description": "The unique name that used to identify the owner",
                              "type": "string"
                            },
                            "type": {
                              "description": "The owner type. Can either be 'org' or 'user'",
                              "enum": [
                                "org",
                                "user"
                              ],
                              "type": "string"
                            }
                          },
                          "required": [
                            "id",
                            "display_name",
                            "name",
                            "type"
                          ],
                          "type": "object"
                        },
                        "release_type": {
                          "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
                          "type": "string"
                        }
                      },
                      "required": [
                        "id",
                        "display_name",
                        "name",
                        "os",
                        "owner"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "app_secret": {
                          "description": "A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics",
                          "type": "string"
                        },
                        "azure_subscription": {
                          "properties": {
                            "is_billable": {
                              "description": "If the subscription can be used for billing",
                              "type": "boolean"
                            },
                            "is_billing": {
                              "description": "If the subscription is used for billing",
                              "type": "boolean"
                            },
                            "is_microsoft_internal": {
                              "description": "If the subscription is internal Microsoft subscription",
                              "type": "boolean"
                            },
                            "subscription_id": {
                              "description": "The azure subscription id",
                              "format": "uuid",
                              "type": "string"
                            },
                            "subscription_name": {
                              "description": "The name of the azure subscription",
                              "type": "string"
                            },
                            "tenant_id": {
                              "description": "The tenant id of the azure subscription belongs to",
                              "format": "uuid",
                              "type": "string"
                            }
                          },
                          "required": [
                            "subscription_id",
                            "tenant_id",
                            "subscription_name"
                          ],
                          "type": "object"
                        },
                        "created_at": {
                          "description": "The created date of this app",
                          "type": "string"
                        },
                        "member_permissions": {
                          "description": "The permissions of the calling user",
                          "items": {
                            "enum": [
                              "manager",
                              "developer",
                              "viewer",
                              "tester"
                            ],
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "origin": {
                          "description": "The creation origin of this app",
                          "enum": [
                            "appcenter",
                            "hockeyapp",
                            "codepush"
                          ],
                          "type": "string"
                        },
                        "platform": {
                          "description": "The platform of the app",
                          "enum": [
                            "Java",
                            "Objective-C-Swift",
                            "UWP",
                            "Cordova",
                            "React-Native",
                            "Unity",
                            "Electron",
                            "Xamarin",
                            "WPF",
                            "WinForms",
                            "Unknown",
                            "Custom"
                          ],
                          "type": "string"
                        },
                        "updated_at": {
                          "description": "The last updated date of this app",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "required": [
                    "app_secret",
                    "platform",
                    "origin"
                  ]
                }
              }
            },
            "description": "Success"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "properties": {
                        "description": {
                          "description": "The description of the app",
                          "type": "string"
                        },
                        "display_name": {
                          "description": "The display name of the app",
                          "type": "string"
                        },
                        "icon_source": {
                          "description": "The string representation of the source of the app's icon",
                          "type": "string"
                        },
                        "icon_url": {
                          "description": "The string representation of the URL pointing to the app's icon",
                          "type": "string"
                        },
                        "id": {
                          "description": "The unique ID (UUID) of the app",
                          "format": "uuid",
                          "type": "string"
                        },
                        "name": {
                          "description": "The name of the app used in URLs",
                          "type": "string"
                        },
                        "os": {
                          "description": "The OS the app will be running on",
                          "enum": [
                            "Android",
                            "iOS",
                            "macOS",
                            "Tizen",
                            "tvOS",
                            "Windows",
                            "Linux",
                            "Custom"
                          ],
                          "type": "string"
                        },
                        "owner": {
                          "description": "The information about the app's owner",
                          "properties": {
                            "avatar_url": {
                              "description": "The avatar URL of the owner",
                              "type": "string"
                            },
                            "display_name": {
                              "description": "The owner's display name",
                              "type": "string"
                            },
                            "email": {
                              "description": "The owner's email address",
                              "type": "string"
                            },
                            "id": {
                              "description": "The unique id (UUID) of the owner",
                              "format": "uuid",
                              "type": "string"
                            },
                            "name": {
                              "description": "The unique name that used to identify the owner",
                              "type": "string"
                            },
                            "type": {
                              "description": "The owner type. Can either be 'org' or 'user'",
                              "enum": [
                                "org",
                                "user"
                              ],
                              "type": "string"
                            }
                          },
                          "required": [
                            "id",
                            "display_name",
                            "name",
                            "type"
                          ],
                          "type": "object"
                        },
                        "release_type": {
                          "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
                          "type": "string"
                        }
                      },
                      "required": [
                        "id",
                        "display_name",
                        "name",
                        "os",
                        "owner"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "app_secret": {
                          "description": "A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics",
                          "type": "string"
                        },
                        "azure_subscription": {
                          "properties": {
                            "is_billable": {
                              "description": "If the subscription can be used for billing",
                              "type": "boolean"
                            },
                            "is_billing": {
                              "description": "If the subscription is used for billing",
                              "type": "boolean"
                            },
                            "is_microsoft_internal": {
                              "description": "If the subscription is internal Microsoft subscription",
                              "type": "boolean"
                            },
                            "subscription_id": {
                              "description": "The azure subscription id",
                              "format": "uuid",
                              "type": "string"
                            },
                            "subscription_name": {
                              "description": "The name of the azure subscription",
                              "type": "string"
                            },
                            "tenant_id": {
                              "description": "The tenant id of the azure subscription belongs to",
                              "format": "uuid",
                              "type": "string"
                            }
                          },
                          "required": [
                            "subscription_id",
                            "tenant_id",
                            "subscription_name"
                          ],
                          "type": "object"
                        },
                        "created_at": {
                          "description": "The created date of this app",
                          "type": "string"
                        },
                        "member_permissions": {
                          "description": "The permissions of the calling user",
                          "items": {
                            "enum": [
                              "manager",
                              "developer",
                              "viewer",
                              "tester"
                            ],
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "origin": {
                          "description": "The creation origin of this app",
                          "enum": [
                            "appcenter",
                            "hockeyapp",
                            "codepush"
                          ],
                          "type": "string"
                        },
                        "platform": {
                          "description": "The platform of the app",
                          "enum": [
                            "Java",
                            "Objective-C-Swift",
                            "UWP",
                            "Cordova",
                            "React-Native",
                            "Unity",
                            "Electron",
                            "Xamarin",
                            "WPF",
                            "WinForms",
                            "Unknown",
                            "Custom"
                          ],
                          "type": "string"
                        },
                        "updated_at": {
                          "description": "The last updated date of this app",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "required": [
                    "app_secret",
                    "platform",
                    "origin"
                  ]
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Creates a new app for the organization and returns it to the caller",
        "operationId": "apps_createForOrg",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "description": {
                    "description": "A short text describing the app",
                    "type": "string"
                  },
                  "display_name": {
                    "description": "The descriptive name of the app. This can contain any characters",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the app used in URLs",
                    "type": "string"
                  },
                  "os": {
                    "description": "The OS the app will be running on",
                    "enum": [
                      "Android",
                      "iOS",
                      "macOS",
                      "Tizen",
                      "tvOS",
                      "Windows",
                      "Linux",
                      "Custom"
                    ],
                    "type": "string"
                  },
                  "platform": {
                    "description": "The platform of the app",
                    "enum": [
                      "Java",
                      "Objective-C-Swift",
                      "UWP",
                      "Cordova",
                      "React-Native",
                      "Xamarin",
                      "Unity",
                      "Electron",
                      "WPF",
                      "WinForms",
                      "Custom"
                    ],
                    "type": "string"
                  },
                  "release_type": {
                    "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
                    "type": "string"
                  }
                },
                "required": [
                  "display_name",
                  "os",
                  "platform"
                ],
                "type": "object"
              }
            }
          },
          "description": "The data for the app",
          "required": true
        }
      }
    },
    "/v0.1/orgs/{org_name}/avatar": {
      "delete": {
        "parameters": [
          {
            "description": "The organization's name",
            "in": "path",
            "name": "org_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "avatar_url": {
                      "description": "The URL to a user-uploaded Avatar image",
                      "type": "string"
                    },
                    "created_at": {
                      "description": "The creation date of this organization",
                      "type": "string"
                    },
                    "display_name": {
                      "description": "The display name of the organization",
                      "type": "string"
                    },
                    "id": {
                      "description": "The internal unique id (UUID) of the organization.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "name": {
                      "description": "The slug name of the organization",
                      "type": "string"
                    },
                    "origin": {
                      "description": "The creation origin of this organization",
                      "enum": [
                        "appcenter",
                        "hockeyapp"
                      ],
                      "type": "string"
                    },
                    "updated_at": {
                      "description": "The date the organization was last updated at",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "display_name",
                    "name",
                    "origin",
                    "created_at",
                    "updated_at"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Deletes the uploaded organization avatar",
        "operationId": "organization_deleteAvatar"
      },
      "post": {
        "parameters": [
          {
            "description": "The organization's name",
            "in": "path",
            "name": "org_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "avatar_url": {
                      "description": "The URL to a user-uploaded Avatar image",
                      "type": "string"
                    },
                    "created_at": {
                      "description": "The creation date of this organization",
                      "type": "string"
                    },
                    "display_name": {
                      "description": "The display name of the organization",
                      "type": "string"
                    },
                    "id": {
                      "description": "The internal unique id (UUID) of the organization.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "name": {
                      "description": "The slug name of the organization",
                      "type": "string"
                    },
                    "origin": {
                      "description": "The creation origin of this organization",
                      "enum": [
                        "appcenter",
                        "hockeyapp"
                      ],
                      "type": "string"
                    },
                    "updated_at": {
                      "description": "The date the organization was last updated at",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "display_name",
                    "name",
                    "origin",
                    "created_at",
                    "updated_at"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Sets the organization avatar",
        "operationId": "organization_updateAvatar",
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/v0.1/orgs/{org_name}/azure_subscriptions": {
      "get": {
        "parameters": [
          {
            "description": "The organization's name",
            "in": "path",
            "name": "org_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "is_billable": {
                        "description": "If the subscription can be used for billing",
                        "type": "boolean"
                      },
                      "is_billing": {
                        "description": "If the subscription is used for billing",
                        "type": "boolean"
                      },
                      "is_microsoft_internal": {
                        "description": "If the subscription is internal Microsoft subscription",
                        "type": "boolean"
                      },
                      "subscription_id": {
                        "description": "The azure subscription id",
                        "format": "uuid",
                        "type": "string"
                      },
                      "subscription_name": {
                        "description": "The name of the azure subscription",
                        "type": "string"
                      },
                      "tenant_id": {
                        "description": "The tenant id of the azure subscription belongs to",
                        "format": "uuid",
                        "type": "string"
                      }
                    },
                    "required": [
                      "subscription_id",
                      "tenant_id",
                      "subscription_name"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Returns a list of azure subscriptions for the organization",
        "operationId": "azureSubscription_listForOrg"
      }
    },
    "/v0.1/orgs/{org_name}/distribution_groups": {
      "get": {
        "parameters": [
          {
            "description": "The organization's name",
            "in": "path",
            "name": "org_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "display_name": {
                        "description": "The name of the distribution group",
                        "type": "string"
                      },
                      "id": {
                        "description": "The unique ID of the distribution group",
                        "format": "uuid",
                        "type": "string"
                      },
                      "is_public": {
                        "description": "Whether the distribution group is public",
                        "type": "boolean"
                      },
                      "name": {
                        "description": "The name of the distribution group used in URLs",
                        "type": "string"
                      },
                      "origin": {
                        "description": "The creation origin of this distribution group",
                        "enum": [
                          "appcenter",
                          "hockeyapp"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "name",
                      "origin",
                      "is_public"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Returns a list of distribution groups in the org specified",
        "operationId": "distributionGroups_listForOrg"
      },
      "post": {
        "parameters": [
          {
            "description": "The organization's name",
            "in": "path",
            "name": "org_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "display_name": {
                      "description": "The name of the distribution group",
                      "type": "string"
                    },
                    "id": {
                      "description": "The unique ID of the distribution group",
                      "format": "uuid",
                      "type": "string"
                    },
                    "is_public": {
                      "description": "Whether the distribution group is public",
                      "type": "boolean"
                    },
                    "name": {
                      "description": "The name of the distribution group used in URLs",
                      "type": "string"
                    },
                    "origin": {
                      "description": "The creation origin of this distribution group",
                      "enum": [
                        "appcenter",
                        "hockeyapp"
                      ],
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "origin",
                    "is_public"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Creates a disribution goup which can be shared across apps under an organization",
        "operationId": "distributionGroups_createForOrg",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "display_name": {
                    "description": "The display name of the distribution group. If not specified, the name will be used.",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the distribution group",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              }
            }
          },
          "description": "The attributes to update for the distribution group",
          "required": true
        }
      }
    },
    "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}": {
      "delete": {
        "parameters": [
          {
            "description": "The organization's name",
            "in": "path",
            "name": "org_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the distribution group",
            "in": "path",
            "name": "distribution_group_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Deletes a single distribution group from an org with a given distribution group name",
        "operationId": "distributionGroups_deleteForOrg"
      },
      "get": {
        "parameters": [
          {
            "description": "The organization's name",
            "in": "path",
            "name": "org_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the distribution group",
            "in": "path",
            "name": "distribution_group_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "display_name": {
                      "description": "The name of the distribution group",
                      "type": "string"
                    },
                    "id": {
                      "description": "The unique ID of the distribution group",
                      "format": "uuid",
                      "type": "string"
                    },
                    "is_public": {
                      "description": "Whether the distribution group is public",
                      "type": "boolean"
                    },
                    "name": {
                      "description": "The name of the distribution group used in URLs",
                      "type": "string"
                    },
                    "origin": {
                      "description": "The creation origin of this distribution group",
                      "enum": [
                        "appcenter",
                        "hockeyapp"
                      ],
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "origin",
                    "is_public"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Returns a single distribution group in org for a given distribution group name",
        "operationId": "distributionGroups_getForOrg"
      },
      "patch": {
        "parameters": [
          {
            "description": "The organization's name",
            "in": "path",
            "name": "org_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the distribution group",
            "in": "path",
            "name": "distribution_group_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "display_name": {
                      "description": "The name of the distribution group",
                      "type": "string"
                    },
                    "id": {
                      "description": "The unique ID of the distribution group",
                      "format": "uuid",
                      "type": "string"
                    },
                    "is_public": {
                      "description": "Whether the distribution group is public",
                      "type": "boolean"
                    },
                    "name": {
                      "description": "The name of the distribution group used in URLs",
                      "type": "string"
                    },
                    "origin": {
                      "description": "The creation origin of this distribution group",
                      "enum": [
                        "appcenter",
                        "hockeyapp"
                      ],
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "origin",
                    "is_public"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Update one given distribution group name in an org",
        "operationId": "distributionGroups_patchForOrg",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "is_public": {
                    "description": "Whether the distribution group is public",
                    "type": "boolean"
                  },
                  "name": {
                    "description": "The name of the distribution group",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "The attributes to update for the distribution group"
        }
      }
    },
    "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/apps": {
      "get": {
        "parameters": [
          {
            "description": "The organization's name",
            "in": "path",
            "name": "org_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the distribution group",
            "in": "path",
            "name": "distribution_group_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "allOf": [
                      {
                        "properties": {
                          "description": {
                            "description": "The description of the app",
                            "type": "string"
                          },
                          "display_name": {
                            "description": "The display name of the app",
                            "type": "string"
                          },
                          "icon_source": {
                            "description": "The string representation of the source of the app's icon",
                            "type": "string"
                          },
                          "icon_url": {
                            "description": "The string representation of the URL pointing to the app's icon",
                            "type": "string"
                          },
                          "id": {
                            "description": "The unique ID (UUID) of the app",
                            "format": "uuid",
                            "type": "string"
                          },
                          "name": {
                            "description": "The name of the app used in URLs",
                            "type": "string"
                          },
                          "os": {
                            "description": "The OS the app will be running on",
                            "enum": [
                              "Android",
                              "iOS",
                              "macOS",
                              "Tizen",
                              "tvOS",
                              "Windows",
                              "Linux",
                              "Custom"
                            ],
                            "type": "string"
                          },
                          "owner": {
                            "description": "The information about the app's owner",
                            "properties": {
                              "avatar_url": {
                                "description": "The avatar URL of the owner",
                                "type": "string"
                              },
                              "display_name": {
                                "description": "The owner's display name",
                                "type": "string"
                              },
                              "email": {
                                "description": "The owner's email address",
                                "type": "string"
                              },
                              "id": {
                                "description": "The unique id (UUID) of the owner",
                                "format": "uuid",
                                "type": "string"
                              },
                              "name": {
                                "description": "The unique name that used to identify the owner",
                                "type": "string"
                              },
                              "type": {
                                "description": "The owner type. Can either be 'org' or 'user'",
                                "enum": [
                                  "org",
                                  "user"
                                ],
                                "type": "string"
                              }
                            },
                            "required": [
                              "id",
                              "display_name",
                              "name",
                              "type"
                            ],
                            "type": "object"
                          },
                          "release_type": {
                            "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
                            "type": "string"
                          }
                        },
                        "required": [
                          "id",
                          "display_name",
                          "name",
                          "os",
                          "owner"
                        ],
                        "type": "object"
                      },
                      {
                        "properties": {
                          "origin": {
                            "description": "The creation origin of this app",
                            "type": "string"
                          },
                          "platform": {
                            "description": "The platform of the app",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Get apps from a distribution group in an org",
        "operationId": "distributionGroups_getApps"
      },
      "post": {
        "parameters": [
          {
            "description": "The organization's name",
            "in": "path",
            "name": "org_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the distribution group",
            "in": "path",
            "name": "distribution_group_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Add apps to distribution group in an org",
        "operationId": "distributionGroups_addApps",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "apps": {
                    "description": "The list of apps to add to distribution group",
                    "items": {
                      "properties": {
                        "name": {
                          "description": "The name of the app to be added to the distribution group",
                          "type": "string"
                        }
                      },
                      "required": [
                        "name"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "The name of the apps to be added to the distribution group. The apps have to be owned by the organization.",
          "required": true
        }
      }
    },
    "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/apps/bulk_delete": {
      "post": {
        "parameters": [
          {
            "description": "The organization's name",
            "in": "path",
            "name": "org_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the distribution group",
            "in": "path",
            "name": "distribution_group_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Delete apps from distribution group in an org",
        "operationId": "distributionGroups_bulkDeleteApps",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "apps": {
                    "description": "The list of apps to delete from the distribution group",
                    "items": {
                      "properties": {
                        "name": {
                          "description": "The name of the app to be deleted from the distribution group",
                          "type": "string"
                        }
                      },
                      "required": [
                        "name"
                      ],
                      "type": "object"
                    },
                    "minItems": 1,
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "The name of the apps to be deleted from the distribution group. The apps have to be owned by the organization.",
          "required": true
        }
      }
    },
    "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/members": {
      "get": {
        "parameters": [
          {
            "description": "The organization's name",
            "in": "path",
            "name": "org_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the distribution group",
            "in": "path",
            "name": "distribution_group_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "avatar_url": {
                        "description": "The avatar URL of the user",
                        "type": "string"
                      },
                      "can_change_password": {
                        "description": "User is required to send an old password in order to change the password.",
                        "type": "boolean"
                      },
                      "display_name": {
                        "description": "The full name of the user. Might for example be first and last name",
                        "type": "string"
                      },
                      "email": {
                        "description": "The email address of the user",
                        "type": "string"
                      },
                      "id": {
                        "description": "The unique id (UUID) of the user",
                        "format": "uuid",
                        "type": "string"
                      },
                      "invite_pending": {
                        "description": "Whether the has accepted the invite. Available when an invite is pending, and the value will be \"true\".",
                        "type": "boolean"
                      },
                      "name": {
                        "description": "The unique name that is used to identify the user.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "email"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Returns a list of member in the distribution group specified",
        "operationId": "distributionGroups_listUsersForOrg"
      },
      "post": {
        "parameters": [
          {
            "description": "The organization's name",
            "in": "path",
            "name": "org_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the distribution group",
            "in": "path",
            "name": "distribution_group_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "code": {
                        "description": "The code of the result",
                        "type": "string"
                      },
                      "invite_pending": {
                        "description": "Whether the has accepted the invite. Available when an invite is pending, and the value will be \"true\".",
                        "type": "boolean"
                      },
                      "message": {
                        "description": "The message of the result",
                        "type": "string"
                      },
                      "status": {
                        "description": "The status code of the result",
                        "type": "integer"
                      },
                      "user_email": {
                        "description": "The email of the user",
                        "type": "string"
                      }
                    },
                    "required": [
                      "status"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Accepts an array of user email addresses to get added to the specified group",
        "operationId": "distributionGroups_addUsersForOrg",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "user_emails": {
                    "description": "The list of emails of the users",
                    "items": {
                      "type": "string"
                    },
                    "minItems": 1,
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "list of user email addresses that should get added as members to the specified group",
          "required": true
        }
      }
    },
    "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/members/bulk_delete": {
      "post": {
        "parameters": [
          {
            "description": "The organization's name",
            "in": "path",
            "name": "org_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the distribution group",
            "in": "path",
            "name": "distribution_group_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Delete testers from distribution group in an org",
        "operationId": "distributionGroups_bulkDeleteUsers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "user_emails": {
                    "description": "The list of emails of the users",
                    "items": {
                      "type": "string"
                    },
                    "minItems": 1,
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "The list of members to add",
          "required": true
        }
      }
    },
    "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/resend_invite": {
      "post": {
        "parameters": [
          {
            "description": "The organization's name",
            "in": "path",
            "name": "org_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the distribution group",
            "in": "path",
            "name": "distribution_group_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Resend shared distribution group invite notification to previously invited testers",
        "operationId": "distributionGroups_resendSharedInvite",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "user_emails": {
                    "description": "The list of emails of the users",
                    "items": {
                      "type": "string"
                    },
                    "minItems": 1,
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "The list of members to add",
          "required": true
        }
      }
    },
    "/v0.1/orgs/{org_name}/distribution_groups_details": {
      "get": {
        "parameters": [
          {
            "description": "The organization's name",
            "in": "path",
            "name": "org_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The max number of apps to include in the response",
            "in": "query",
            "name": "apps_limit",
            "required": false,
            "schema": {
              "type": "number"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "allOf": [
                      {
                        "properties": {
                          "display_name": {
                            "description": "The name of the distribution group",
                            "type": "string"
                          },
                          "id": {
                            "description": "The unique ID of the distribution group",
                            "format": "uuid",
                            "type": "string"
                          },
                          "is_public": {
                            "description": "Whether the distribution group is public",
                            "type": "boolean"
                          },
                          "name": {
                            "description": "The name of the distribution group used in URLs",
                            "type": "string"
                          },
                          "origin": {
                            "description": "The creation origin of this distribution group",
                            "enum": [
                              "appcenter",
                              "hockeyapp"
                            ],
                            "type": "string"
                          }
                        },
                        "required": [
                          "id",
                          "name",
                          "origin",
                          "is_public"
                        ],
                        "type": "object"
                      },
                      {
                        "properties": {
                          "apps": {
                            "description": "The apps associated with the distribution group",
                            "items": {
                              "allOf": [
                                {
                                  "properties": {
                                    "description": {
                                      "description": "The description of the app",
                                      "type": "string"
                                    },
                                    "display_name": {
                                      "description": "The display name of the app",
                                      "type": "string"
                                    },
                                    "icon_source": {
                                      "description": "The string representation of the source of the app's icon",
                                      "type": "string"
                                    },
                                    "icon_url": {
                                      "description": "The string representation of the URL pointing to the app's icon",
                                      "type": "string"
                                    },
                                    "id": {
                                      "description": "The unique ID (UUID) of the app",
                                      "format": "uuid",
                                      "type": "string"
                                    },
                                    "name": {
                                      "description": "The name of the app used in URLs",
                                      "type": "string"
                                    },
                                    "os": {
                                      "description": "The OS the app will be running on",
                                      "enum": [
                                        "Android",
                                        "iOS",
                                        "macOS",
                                        "Tizen",
                                        "tvOS",
                                        "Windows",
                                        "Linux",
                                        "Custom"
                                      ],
                                      "type": "string"
                                    },
                                    "owner": {
                                      "description": "The information about the app's owner",
                                      "properties": {
                                        "avatar_url": {
                                          "description": "The avatar URL of the owner",
                                          "type": "string"
                                        },
                                        "display_name": {
                                          "description": "The owner's display name",
                                          "type": "string"
                                        },
                                        "email": {
                                          "description": "The owner's email address",
                                          "type": "string"
                                        },
                                        "id": {
                                          "description": "The unique id (UUID) of the owner",
                                          "format": "uuid",
                                          "type": "string"
                                        },
                                        "name": {
                                          "description": "The unique name that used to identify the owner",
                                          "type": "string"
                                        },
                                        "type": {
                                          "description": "The owner type. Can either be 'org' or 'user'",
                                          "enum": [
                                            "org",
                                            "user"
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "id",
                                        "display_name",
                                        "name",
                                        "type"
                                      ],
                                      "type": "object"
                                    },
                                    "release_type": {
                                      "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "display_name",
                                    "name",
                                    "os",
                                    "owner"
                                  ],
                                  "type": "object"
                                },
                                {
                                  "properties": {
                                    "app_secret": {
                                      "description": "A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics",
                                      "type": "string"
                                    },
                                    "azure_subscription": {
                                      "properties": {
                                        "is_billable": {
                                          "description": "If the subscription can be used for billing",
                                          "type": "boolean"
                                        },
                                        "is_billing": {
                                          "description": "If the subscription is used for billing",
                                          "type": "boolean"
                                        },
                                        "is_microsoft_internal": {
                                          "description": "If the subscription is internal Microsoft subscription",
                                          "type": "boolean"
                                        },
                                        "subscription_id": {
                                          "description": "The azure subscription id",
                                          "format": "uuid",
                                          "type": "string"
                                        },
                                        "subscription_name": {
                                          "description": "The name of the azure subscription",
                                          "type": "string"
                                        },
                                        "tenant_id": {
                                          "description": "The tenant id of the azure subscription belongs to",
                                          "format": "uuid",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "subscription_id",
                                        "tenant_id",
                                        "subscription_name"
                                      ],
                                      "type": "object"
                                    },
                                    "created_at": {
                                      "description": "The created date of this app",
                                      "type": "string"
                                    },
                                    "member_permissions": {
                                      "description": "The permissions of the calling user",
                                      "items": {
                                        "enum": [
                                          "manager",
                                          "developer",
                                          "viewer",
                                          "tester"
                                        ],
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "origin": {
                                      "description": "The creation origin of this app",
                                      "enum": [
                                        "appcenter",
                                        "hockeyapp",
                                        "codepush"
                                      ],
                                      "type": "string"
                                    },
                                    "platform": {
                                      "description": "The platform of the app",
                                      "enum": [
                                        "Java",
                                        "Objective-C-Swift",
                                        "UWP",
                                        "Cordova",
                                        "React-Native",
                                        "Unity",
                                        "Electron",
                                        "Xamarin",
                                        "WPF",
                                        "WinForms",
                                        "Unknown",
                                        "Custom"
                                      ],
                                      "type": "string"
                                    },
                                    "updated_at": {
                                      "description": "The last updated date of this app",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              ],
                              "required": [
                                "app_secret",
                                "platform",
                                "origin"
                              ]
                            },
                            "type": "array"
                          },
                          "total_apps_count": {
                            "description": "The count of apps associated with this distribution group",
                            "type": "number"
                          },
                          "total_users_count": {
                            "description": "The count of users in the distribution group",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "required": [
                      "apps",
                      "total_users_count",
                      "total_apps_count"
                    ]
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Returns a list of distribution groups with details for an organization",
        "operationId": "distributionGroups_detailsForOrg"
      }
    },
    "/v0.1/orgs/{org_name}/invitations": {
      "delete": {
        "parameters": [
          {
            "description": "The organization's name",
            "in": "path",
            "name": "org_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Removes a user's invitation to an organization",
        "operationId": "orgInvitations_delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "user_email": {
                    "description": "The user's email address",
                    "type": "string"
                  }
                },
                "required": [
                  "user_email"
                ],
                "type": "object"
              }
            }
          },
          "description": "The email of the user whose invitation should be removed",
          "required": true
        }
      },
      "get": {
        "parameters": [
          {
            "description": "The organization's name",
            "in": "path",
            "name": "org_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "email": {
                        "description": "The email address of the invited user",
                        "type": "string"
                      },
                      "id": {
                        "description": "The unique ID (UUID) of the invitation",
                        "format": "uuid",
                        "type": "string"
                      },
                      "role": {
                        "description": "The role assigned to the invited user",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "email",
                      "role"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Gets the pending invitations for the organization",
        "operationId": "orgInvitations_listPending"
      },
      "post": {
        "parameters": [
          {
            "description": "The organization's name",
            "in": "path",
            "name": "org_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Invites a new or existing user to an organization",
        "operationId": "orgInvitations_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "role": {
                    "description": "The user's role",
                    "enum": [
                      "admin",
                      "collaborator",
                      "member"
                    ],
                    "type": "string"
                  },
                  "user_email": {
                    "description": "The user's email address",
                    "type": "string"
                  }
                },
                "required": [
                  "user_email"
                ],
                "type": "object"
              }
            }
          },
          "description": "The email of the user to invite",
          "required": true
        }
      }
    },
    "/v0.1/orgs/{org_name}/invitations/{email}": {
      "patch": {
        "parameters": [
          {
            "description": "The organization's name",
            "in": "path",
            "name": "org_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The email address of the user to send the password reset mail to.",
            "in": "path",
            "name": "email",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Allows the role of an invited user to be changed",
        "operationId": "orgInvitations_update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "role": {
                    "description": "The user's role in the organizatiion",
                    "enum": [
                      "admin",
                      "collaborator",
                      "member"
                    ],
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "The new role of the user",
          "required": true
        }
      }
    },
    "/v0.1/orgs/{org_name}/invitations/{email}/resend": {
      "post": {
        "parameters": [
          {
            "description": "The organization's name",
            "in": "path",
            "name": "org_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The email address of the user to send the password reset mail to.",
            "in": "path",
            "name": "email",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Cancels an existing organization invitation for the user and sends a new one",
        "operationId": "orgInvitations_sendNewInvitation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "role": {
                    "description": "The role of the user to be added",
                    "enum": [
                      "admin",
                      "collaborator",
                      "member"
                    ],
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "The role of the user to be added"
        }
      }
    },
    "/v0.1/orgs/{org_name}/invitations/{email}/revoke": {
      "post": {
        "parameters": [
          {
            "description": "The organization's name",
            "in": "path",
            "name": "org_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The email address of the user to send the password reset mail to.",
            "in": "path",
            "name": "email",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Removes a user's invitation to an organization",
        "operationId": "orgInvitations_",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "description": "allow empty body for custom http-client lib"
        }
      }
    },
    "/v0.1/orgs/{org_name}/teams": {
      "get": {
        "parameters": [
          {
            "description": "The organization's name",
            "in": "path",
            "name": "org_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "description": {
                        "description": "The description of the team",
                        "type": "string"
                      },
                      "display_name": {
                        "description": "The display name of the team",
                        "type": "string"
                      },
                      "id": {
                        "description": "The internal unique id (UUID) of the team.",
                        "format": "uuid",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the team",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "name",
                      "display_name"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Returns the list of all teams in this org",
        "operationId": "teams_listAll"
      },
      "post": {
        "parameters": [
          {
            "description": "The organization's name",
            "in": "path",
            "name": "org_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "description": {
                        "description": "The description of the team",
                        "type": "string"
                      },
                      "display_name": {
                        "description": "The display name of the team",
                        "type": "string"
                      },
                      "id": {
                        "description": "The internal unique id (UUID) of the team.",
                        "format": "uuid",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the team",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "name",
                      "display_name"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Creates a team and returns it",
        "operationId": "teams_createTeam",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "description": {
                    "description": "The description of the team",
                    "type": "string"
                  },
                  "display_name": {
                    "description": "The display name of the team",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the team",
                    "type": "string"
                  }
                },
                "required": [
                  "display_name"
                ],
                "type": "object"
              }
            }
          },
          "description": "The information used to create the team",
          "required": true
        }
      }
    },
    "/v0.1/orgs/{org_name}/teams/{team_name}": {
      "delete": {
        "parameters": [
          {
            "description": "The organization's name",
            "in": "path",
            "name": "org_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The team's name",
            "in": "path",
            "name": "team_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Deletes a single team",
        "operationId": "teams_delete"
      },
      "get": {
        "parameters": [
          {
            "description": "The organization's name",
            "in": "path",
            "name": "org_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The team's name",
            "in": "path",
            "name": "team_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "description": {
                      "description": "The description of the team",
                      "type": "string"
                    },
                    "display_name": {
                      "description": "The display name of the team",
                      "type": "string"
                    },
                    "id": {
                      "description": "The internal unique id (UUID) of the team.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "name": {
                      "description": "The name of the team",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "display_name"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Returns the details of a single team",
        "operationId": "teams_getTeam"
      },
      "patch": {
        "parameters": [
          {
            "description": "The organization's name",
            "in": "path",
            "name": "org_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The team's name",
            "in": "path",
            "name": "team_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "description": {
                      "description": "The description of the team",
                      "type": "string"
                    },
                    "display_name": {
                      "description": "The display name of the team",
                      "type": "string"
                    },
                    "id": {
                      "description": "The internal unique id (UUID) of the team.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "name": {
                      "description": "The name of the team",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "display_name"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Updates a single team",
        "operationId": "teams_update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "display_name": {
                    "description": "The new display name of the team",
                    "type": "string"
                  }
                },
                "required": [
                  "display_name"
                ],
                "type": "object"
              }
            }
          },
          "description": "The information used to update the team",
          "required": true
        }
      }
    },
    "/v0.1/orgs/{org_name}/teams/{team_name}/apps": {
      "get": {
        "parameters": [
          {
            "description": "The organization's name",
            "in": "path",
            "name": "org_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The team's name",
            "in": "path",
            "name": "team_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "allOf": [
                      {
                        "allOf": [
                          {
                            "properties": {
                              "description": {
                                "description": "The description of the app",
                                "type": "string"
                              },
                              "display_name": {
                                "description": "The display name of the app",
                                "type": "string"
                              },
                              "icon_source": {
                                "description": "The string representation of the source of the app's icon",
                                "type": "string"
                              },
                              "icon_url": {
                                "description": "The string representation of the URL pointing to the app's icon",
                                "type": "string"
                              },
                              "id": {
                                "description": "The unique ID (UUID) of the app",
                                "format": "uuid",
                                "type": "string"
                              },
                              "name": {
                                "description": "The name of the app used in URLs",
                                "type": "string"
                              },
                              "os": {
                                "description": "The OS the app will be running on",
                                "enum": [
                                  "Android",
                                  "iOS",
                                  "macOS",
                                  "Tizen",
                                  "tvOS",
                                  "Windows",
                                  "Linux",
                                  "Custom"
                                ],
                                "type": "string"
                              },
                              "owner": {
                                "description": "The information about the app's owner",
                                "properties": {
                                  "avatar_url": {
                                    "description": "The avatar URL of the owner",
                                    "type": "string"
                                  },
                                  "display_name": {
                                    "description": "The owner's display name",
                                    "type": "string"
                                  },
                                  "email": {
                                    "description": "The owner's email address",
                                    "type": "string"
                                  },
                                  "id": {
                                    "description": "The unique id (UUID) of the owner",
                                    "format": "uuid",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "The unique name that used to identify the owner",
                                    "type": "string"
                                  },
                                  "type": {
                                    "description": "The owner type. Can either be 'org' or 'user'",
                                    "enum": [
                                      "org",
                                      "user"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id",
                                  "display_name",
                                  "name",
                                  "type"
                                ],
                                "type": "object"
                              },
                              "release_type": {
                                "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
                                "type": "string"
                              }
                            },
                            "required": [
                              "id",
                              "display_name",
                              "name",
                              "os",
                              "owner"
                            ],
                            "type": "object"
                          },
                          {
                            "properties": {
                              "app_secret": {
                                "description": "A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics",
                                "type": "string"
                              },
                              "azure_subscription": {
                                "properties": {
                                  "is_billable": {
                                    "description": "If the subscription can be used for billing",
                                    "type": "boolean"
                                  },
                                  "is_billing": {
                                    "description": "If the subscription is used for billing",
                                    "type": "boolean"
                                  },
                                  "is_microsoft_internal": {
                                    "description": "If the subscription is internal Microsoft subscription",
                                    "type": "boolean"
                                  },
                                  "subscription_id": {
                                    "description": "The azure subscription id",
                                    "format": "uuid",
                                    "type": "string"
                                  },
                                  "subscription_name": {
                                    "description": "The name of the azure subscription",
                                    "type": "string"
                                  },
                                  "tenant_id": {
                                    "description": "The tenant id of the azure subscription belongs to",
                                    "format": "uuid",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "subscription_id",
                                  "tenant_id",
                                  "subscription_name"
                                ],
                                "type": "object"
                              },
                              "created_at": {
                                "description": "The created date of this app",
                                "type": "string"
                              },
                              "member_permissions": {
                                "description": "The permissions of the calling user",
                                "items": {
                                  "enum": [
                                    "manager",
                                    "developer",
                                    "viewer",
                                    "tester"
                                  ],
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "origin": {
                                "description": "The creation origin of this app",
                                "enum": [
                                  "appcenter",
                                  "hockeyapp",
                                  "codepush"
                                ],
                                "type": "string"
                              },
                              "platform": {
                                "description": "The platform of the app",
                                "enum": [
                                  "Java",
                                  "Objective-C-Swift",
                                  "UWP",
                                  "Cordova",
                                  "React-Native",
                                  "Unity",
                                  "Electron",
                                  "Xamarin",
                                  "WPF",
                                  "WinForms",
                                  "Unknown",
                                  "Custom"
                                ],
                                "type": "string"
                              },
                              "updated_at": {
                                "description": "The last updated date of this app",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "required": [
                          "app_secret",
                          "platform",
                          "origin"
                        ]
                      },
                      {
                        "properties": {
                          "team_permissions": {
                            "description": "The permissions the team has for the app",
                            "items": {
                              "enum": [
                                "manager",
                                "developer",
                                "viewer"
                              ],
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Returns the apps a team has access to",
        "operationId": "teams_listApps"
      },
      "post": {
        "parameters": [
          {
            "description": "The organization's name",
            "in": "path",
            "name": "org_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The team's name",
            "in": "path",
            "name": "team_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "allOf": [
                        {
                          "properties": {
                            "description": {
                              "description": "The description of the app",
                              "type": "string"
                            },
                            "display_name": {
                              "description": "The display name of the app",
                              "type": "string"
                            },
                            "icon_source": {
                              "description": "The string representation of the source of the app's icon",
                              "type": "string"
                            },
                            "icon_url": {
                              "description": "The string representation of the URL pointing to the app's icon",
                              "type": "string"
                            },
                            "id": {
                              "description": "The unique ID (UUID) of the app",
                              "format": "uuid",
                              "type": "string"
                            },
                            "name": {
                              "description": "The name of the app used in URLs",
                              "type": "string"
                            },
                            "os": {
                              "description": "The OS the app will be running on",
                              "enum": [
                                "Android",
                                "iOS",
                                "macOS",
                                "Tizen",
                                "tvOS",
                                "Windows",
                                "Linux",
                                "Custom"
                              ],
                              "type": "string"
                            },
                            "owner": {
                              "description": "The information about the app's owner",
                              "properties": {
                                "avatar_url": {
                                  "description": "The avatar URL of the owner",
                                  "type": "string"
                                },
                                "display_name": {
                                  "description": "The owner's display name",
                                  "type": "string"
                                },
                                "email": {
                                  "description": "The owner's email address",
                                  "type": "string"
                                },
                                "id": {
                                  "description": "The unique id (UUID) of the owner",
                                  "format": "uuid",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "The unique name that used to identify the owner",
                                  "type": "string"
                                },
                                "type": {
                                  "description": "The owner type. Can either be 'org' or 'user'",
                                  "enum": [
                                    "org",
                                    "user"
                                  ],
                                  "type": "string"
                                }
                              },
                              "required": [
                                "id",
                                "display_name",
                                "name",
                                "type"
                              ],
                              "type": "object"
                            },
                            "release_type": {
                              "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
                              "type": "string"
                            }
                          },
                          "required": [
                            "id",
                            "display_name",
                            "name",
                            "os",
                            "owner"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "app_secret": {
                              "description": "A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics",
                              "type": "string"
                            },
                            "azure_subscription": {
                              "properties": {
                                "is_billable": {
                                  "description": "If the subscription can be used for billing",
                                  "type": "boolean"
                                },
                                "is_billing": {
                                  "description": "If the subscription is used for billing",
                                  "type": "boolean"
                                },
                                "is_microsoft_internal": {
                                  "description": "If the subscription is internal Microsoft subscription",
                                  "type": "boolean"
                                },
                                "subscription_id": {
                                  "description": "The azure subscription id",
                                  "format": "uuid",
                                  "type": "string"
                                },
                                "subscription_name": {
                                  "description": "The name of the azure subscription",
                                  "type": "string"
                                },
                                "tenant_id": {
                                  "description": "The tenant id of the azure subscription belongs to",
                                  "format": "uuid",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "subscription_id",
                                "tenant_id",
                                "subscription_name"
                              ],
                              "type": "object"
                            },
                            "created_at": {
                              "description": "The created date of this app",
                              "type": "string"
                            },
                            "member_permissions": {
                              "description": "The permissions of the calling user",
                              "items": {
                                "enum": [
                                  "manager",
                                  "developer",
                                  "viewer",
                                  "tester"
                                ],
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "origin": {
                              "description": "The creation origin of this app",
                              "enum": [
                                "appcenter",
                                "hockeyapp",
                                "codepush"
                              ],
                              "type": "string"
                            },
                            "platform": {
                              "description": "The platform of the app",
                              "enum": [
                                "Java",
                                "Objective-C-Swift",
                                "UWP",
                                "Cordova",
                                "React-Native",
                                "Unity",
                                "Electron",
                                "Xamarin",
                                "WPF",
                                "WinForms",
                                "Unknown",
                                "Custom"
                              ],
                              "type": "string"
                            },
                            "updated_at": {
                              "description": "The last updated date of this app",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      ],
                      "required": [
                        "app_secret",
                        "platform",
                        "origin"
                      ]
                    },
                    {
                      "properties": {
                        "team_permissions": {
                          "description": "The permissions the team has for the app",
                          "items": {
                            "enum": [
                              "manager",
                              "developer",
                              "viewer"
                            ],
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Adds an app to a team",
        "operationId": "teams_addApp",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "description": "The name of the app to be added to the distribution group",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              }
            }
          },
          "description": "The name of the app to be added to the team. The app has to be owned by the organization.",
          "required": true
        }
      }
    },
    "/v0.1/orgs/{org_name}/teams/{team_name}/apps/{app_name}": {
      "delete": {
        "parameters": [
          {
            "description": "The organization's name",
            "in": "path",
            "name": "org_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The team's name",
            "in": "path",
            "name": "team_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Removes an app from a team",
        "operationId": "teams_removeApp"
      },
      "patch": {
        "parameters": [
          {
            "description": "The organization's name",
            "in": "path",
            "name": "org_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The team's name",
            "in": "path",
            "name": "team_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The name of the application",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "allOf": [
                        {
                          "properties": {
                            "description": {
                              "description": "The description of the app",
                              "type": "string"
                            },
                            "display_name": {
                              "description": "The display name of the app",
                              "type": "string"
                            },
                            "icon_source": {
                              "description": "The string representation of the source of the app's icon",
                              "type": "string"
                            },
                            "icon_url": {
                              "description": "The string representation of the URL pointing to the app's icon",
                              "type": "string"
                            },
                            "id": {
                              "description": "The unique ID (UUID) of the app",
                              "format": "uuid",
                              "type": "string"
                            },
                            "name": {
                              "description": "The name of the app used in URLs",
                              "type": "string"
                            },
                            "os": {
                              "description": "The OS the app will be running on",
                              "enum": [
                                "Android",
                                "iOS",
                                "macOS",
                                "Tizen",
                                "tvOS",
                                "Windows",
                                "Linux",
                                "Custom"
                              ],
                              "type": "string"
                            },
                            "owner": {
                              "description": "The information about the app's owner",
                              "properties": {
                                "avatar_url": {
                                  "description": "The avatar URL of the owner",
                                  "type": "string"
                                },
                                "display_name": {
                                  "description": "The owner's display name",
                                  "type": "string"
                                },
                                "email": {
                                  "description": "The owner's email address",
                                  "type": "string"
                                },
                                "id": {
                                  "description": "The unique id (UUID) of the owner",
                                  "format": "uuid",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "The unique name that used to identify the owner",
                                  "type": "string"
                                },
                                "type": {
                                  "description": "The owner type. Can either be 'org' or 'user'",
                                  "enum": [
                                    "org",
                                    "user"
                                  ],
                                  "type": "string"
                                }
                              },
                              "required": [
                                "id",
                                "display_name",
                                "name",
                                "type"
                              ],
                              "type": "object"
                            },
                            "release_type": {
                              "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
                              "type": "string"
                            }
                          },
                          "required": [
                            "id",
                            "display_name",
                            "name",
                            "os",
                            "owner"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "app_secret": {
                              "description": "A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics",
                              "type": "string"
                            },
                            "azure_subscription": {
                              "properties": {
                                "is_billable": {
                                  "description": "If the subscription can be used for billing",
                                  "type": "boolean"
                                },
                                "is_billing": {
                                  "description": "If the subscription is used for billing",
                                  "type": "boolean"
                                },
                                "is_microsoft_internal": {
                                  "description": "If the subscription is internal Microsoft subscription",
                                  "type": "boolean"
                                },
                                "subscription_id": {
                                  "description": "The azure subscription id",
                                  "format": "uuid",
                                  "type": "string"
                                },
                                "subscription_name": {
                                  "description": "The name of the azure subscription",
                                  "type": "string"
                                },
                                "tenant_id": {
                                  "description": "The tenant id of the azure subscription belongs to",
                                  "format": "uuid",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "subscription_id",
                                "tenant_id",
                                "subscription_name"
                              ],
                              "type": "object"
                            },
                            "created_at": {
                              "description": "The created date of this app",
                              "type": "string"
                            },
                            "member_permissions": {
                              "description": "The permissions of the calling user",
                              "items": {
                                "enum": [
                                  "manager",
                                  "developer",
                                  "viewer",
                                  "tester"
                                ],
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "origin": {
                              "description": "The creation origin of this app",
                              "enum": [
                                "appcenter",
                                "hockeyapp",
                                "codepush"
                              ],
                              "type": "string"
                            },
                            "platform": {
                              "description": "The platform of the app",
                              "enum": [
                                "Java",
                                "Objective-C-Swift",
                                "UWP",
                                "Cordova",
                                "React-Native",
                                "Unity",
                                "Electron",
                                "Xamarin",
                                "WPF",
                                "WinForms",
                                "Unknown",
                                "Custom"
                              ],
                              "type": "string"
                            },
                            "updated_at": {
                              "description": "The last updated date of this app",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      ],
                      "required": [
                        "app_secret",
                        "platform",
                        "origin"
                      ]
                    },
                    {
                      "properties": {
                        "team_permissions": {
                          "description": "The permissions the team has for the app",
                          "items": {
                            "enum": [
                              "manager",
                              "developer",
                              "viewer"
                            ],
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Updates the permissions the team has to the app",
        "operationId": "teams_updatePermissions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "permissions": {
                    "description": "The permissions all members of the team have on the app",
                    "items": {
                      "enum": [
                        "manager",
                        "developer",
                        "viewer"
                      ],
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "permissions"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v0.1/orgs/{org_name}/teams/{team_name}/users": {
      "get": {
        "parameters": [
          {
            "description": "The organization's name",
            "in": "path",
            "name": "org_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The team's name",
            "in": "path",
            "name": "team_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "display_name": {
                      "description": "The full name of the user. Might for example be first and last name",
                      "type": "string"
                    },
                    "email": {
                      "description": "The email address of the user",
                      "type": "string"
                    },
                    "name": {
                      "description": "The unique name that is used to identify the user.",
                      "type": "string"
                    },
                    "role": {
                      "description": "The role of the user has within the team",
                      "enum": [
                        "maintainer",
                        "collaborator"
                      ]
                    }
                  },
                  "required": [
                    "email",
                    "display_name",
                    "name",
                    "role"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Returns the users of a team which is owned by an organization",
        "operationId": "teams_getUsers"
      },
      "post": {
        "parameters": [
          {
            "description": "The organization's name",
            "in": "path",
            "name": "org_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The team's name",
            "in": "path",
            "name": "team_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "display_name": {
                      "description": "The full name of the user. Might for example be first and last name",
                      "type": "string"
                    },
                    "email": {
                      "description": "The email address of the user",
                      "type": "string"
                    },
                    "name": {
                      "description": "The unique name that is used to identify the user.",
                      "type": "string"
                    },
                    "role": {
                      "description": "The role of the user has within the team",
                      "enum": [
                        "maintainer",
                        "collaborator"
                      ]
                    }
                  },
                  "required": [
                    "email",
                    "display_name",
                    "name",
                    "role"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Adds a new user to a team that is owned by an organization",
        "operationId": "teams_addUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "user_email": {
                    "description": "The user's email address",
                    "type": "string"
                  }
                },
                "required": [
                  "user_email"
                ],
                "type": "object"
              }
            }
          },
          "description": "The email of the user to add to the team",
          "required": true
        }
      }
    },
    "/v0.1/orgs/{org_name}/teams/{team_name}/users/{user_name}": {
      "delete": {
        "parameters": [
          {
            "description": "The organization's name",
            "in": "path",
            "name": "org_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The team's name",
            "in": "path",
            "name": "team_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The slug name of the user",
            "in": "path",
            "name": "user_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Removes a user from a team that is owned by an organization",
        "operationId": "teams_removeUser"
      }
    },
    "/v0.1/orgs/{org_name}/testers": {
      "get": {
        "parameters": [
          {
            "description": "The organization's name",
            "in": "path",
            "name": "org_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "display_name": {
                        "description": "The full name of the tester. Might for example be first and last name",
                        "type": "string"
                      },
                      "email": {
                        "description": "The email address of the tester",
                        "type": "string"
                      },
                      "name": {
                        "description": "The unique name that is used to identify the tester.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "email"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Returns a unique list of users including the whole organization members plus testers in any shared group of that org",
        "operationId": "distributionGroups_listAllTestersForOrg"
      }
    },
    "/v0.1/orgs/{org_name}/users": {
      "get": {
        "parameters": [
          {
            "description": "The organization's name",
            "in": "path",
            "name": "org_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "display_name": {
                        "description": "The full name of the user. Might for example be first and last name",
                        "type": "string"
                      },
                      "email": {
                        "description": "The email address of the user",
                        "type": "string"
                      },
                      "joined_at": {
                        "description": "The date when the user joined the organization",
                        "type": "string"
                      },
                      "name": {
                        "description": "The unique name that is used to identify the user.",
                        "type": "string"
                      },
                      "role": {
                        "description": "The role the user has within the organization",
                        "type": "string"
                      }
                    },
                    "required": [
                      "display_name",
                      "email",
                      "joined_at",
                      "name",
                      "role"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Returns a list of users that belong to an organization",
        "operationId": "users_listForOrg"
      }
    },
    "/v0.1/orgs/{org_name}/users/{user_name}": {
      "delete": {
        "parameters": [
          {
            "description": "The organization's name",
            "in": "path",
            "name": "org_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The slug name of the user",
            "in": "path",
            "name": "user_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Removes a user from an organization.",
        "operationId": "users_removeFromOrg"
      },
      "get": {
        "parameters": [
          {
            "description": "The organization's name",
            "in": "path",
            "name": "org_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The slug name of the user",
            "in": "path",
            "name": "user_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "display_name": {
                      "description": "The full name of the user. Might for example be first and last name",
                      "type": "string"
                    },
                    "email": {
                      "description": "The email address of the user",
                      "type": "string"
                    },
                    "joined_at": {
                      "description": "The date when the user joined the organization",
                      "type": "string"
                    },
                    "name": {
                      "description": "The unique name that is used to identify the user.",
                      "type": "string"
                    },
                    "role": {
                      "description": "The role the user has within the organization",
                      "type": "string"
                    }
                  },
                  "required": [
                    "display_name",
                    "email",
                    "joined_at",
                    "name",
                    "role"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Get a user information from an organization by name - if there is explicit permission return it, if not if not return highest implicit permission",
        "operationId": "users_getForOrg"
      },
      "patch": {
        "parameters": [
          {
            "description": "The organization's name",
            "in": "path",
            "name": "org_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The slug name of the user",
            "in": "path",
            "name": "user_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "display_name": {
                      "description": "The full name of the user. Might for example be first and last name",
                      "type": "string"
                    },
                    "email": {
                      "description": "The email address of the user",
                      "type": "string"
                    },
                    "joined_at": {
                      "description": "The date when the user joined the organization",
                      "type": "string"
                    },
                    "name": {
                      "description": "The unique name that is used to identify the user.",
                      "type": "string"
                    },
                    "role": {
                      "description": "The role the user has within the organization",
                      "type": "string"
                    }
                  },
                  "required": [
                    "display_name",
                    "email",
                    "joined_at",
                    "name",
                    "role"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Updates the given organization user",
        "operationId": "users_updateOrgRole",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "role": {
                    "description": "The user's role in the organizatiion",
                    "enum": [
                      "admin",
                      "collaborator",
                      "member"
                    ],
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v0.1/orgs/{org_name}/users/{user_name}/apps": {
      "get": {
        "parameters": [
          {
            "description": "The organization's name",
            "in": "path",
            "name": "org_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "The slug name of the user",
            "in": "path",
            "name": "user_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "allOf": [
                      {
                        "properties": {
                          "description": {
                            "description": "The description of the app",
                            "type": "string"
                          },
                          "display_name": {
                            "description": "The display name of the app",
                            "type": "string"
                          },
                          "icon_source": {
                            "description": "The string representation of the source of the app's icon",
                            "type": "string"
                          },
                          "icon_url": {
                            "description": "The string representation of the URL pointing to the app's icon",
                            "type": "string"
                          },
                          "id": {
                            "description": "The unique ID (UUID) of the app",
                            "format": "uuid",
                            "type": "string"
                          },
                          "name": {
                            "description": "The name of the app used in URLs",
                            "type": "string"
                          },
                          "os": {
                            "description": "The OS the app will be running on",
                            "enum": [
                              "Android",
                              "iOS",
                              "macOS",
                              "Tizen",
                              "tvOS",
                              "Windows",
                              "Linux",
                              "Custom"
                            ],
                            "type": "string"
                          },
                          "owner": {
                            "description": "The information about the app's owner",
                            "properties": {
                              "avatar_url": {
                                "description": "The avatar URL of the owner",
                                "type": "string"
                              },
                              "display_name": {
                                "description": "The owner's display name",
                                "type": "string"
                              },
                              "email": {
                                "description": "The owner's email address",
                                "type": "string"
                              },
                              "id": {
                                "description": "The unique id (UUID) of the owner",
                                "format": "uuid",
                                "type": "string"
                              },
                              "name": {
                                "description": "The unique name that used to identify the owner",
                                "type": "string"
                              },
                              "type": {
                                "description": "The owner type. Can either be 'org' or 'user'",
                                "enum": [
                                  "org",
                                  "user"
                                ],
                                "type": "string"
                              }
                            },
                            "required": [
                              "id",
                              "display_name",
                              "name",
                              "type"
                            ],
                            "type": "object"
                          },
                          "release_type": {
                            "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
                            "type": "string"
                          }
                        },
                        "required": [
                          "id",
                          "display_name",
                          "name",
                          "os",
                          "owner"
                        ],
                        "type": "object"
                      },
                      {
                        "properties": {
                          "app_secret": {
                            "description": "A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics",
                            "type": "string"
                          },
                          "azure_subscription": {
                            "properties": {
                              "is_billable": {
                                "description": "If the subscription can be used for billing",
                                "type": "boolean"
                              },
                              "is_billing": {
                                "description": "If the subscription is used for billing",
                                "type": "boolean"
                              },
                              "is_microsoft_internal": {
                                "description": "If the subscription is internal Microsoft subscription",
                                "type": "boolean"
                              },
                              "subscription_id": {
                                "description": "The azure subscription id",
                                "format": "uuid",
                                "type": "string"
                              },
                              "subscription_name": {
                                "description": "The name of the azure subscription",
                                "type": "string"
                              },
                              "tenant_id": {
                                "description": "The tenant id of the azure subscription belongs to",
                                "format": "uuid",
                                "type": "string"
                              }
                            },
                            "required": [
                              "subscription_id",
                              "tenant_id",
                              "subscription_name"
                            ],
                            "type": "object"
                          },
                          "created_at": {
                            "description": "The created date of this app",
                            "type": "string"
                          },
                          "member_permissions": {
                            "description": "The permissions of the calling user",
                            "items": {
                              "enum": [
                                "manager",
                                "developer",
                                "viewer",
                                "tester"
                              ],
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "origin": {
                            "description": "The creation origin of this app",
                            "enum": [
                              "appcenter",
                              "hockeyapp",
                              "codepush"
                            ],
                            "type": "string"
                          },
                          "platform": {
                            "description": "The platform of the app",
                            "enum": [
                              "Java",
                              "Objective-C-Swift",
                              "UWP",
                              "Cordova",
                              "React-Native",
                              "Unity",
                              "Electron",
                              "Xamarin",
                              "WPF",
                              "WinForms",
                              "Unknown",
                              "Custom"
                            ],
                            "type": "string"
                          },
                          "updated_at": {
                            "description": "The last updated date of this app",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "required": [
                      "app_secret",
                      "platform",
                      "origin"
                    ]
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Get a user apps information from an organization by name",
        "operationId": "apps_getForOrgUser"
      }
    },
    "/v0.1/public/apps/{app_id}/releases/{release_id}/ios_manifest": {
      "get": {
        "parameters": [
          {
            "description": "The ID of the application",
            "in": "path",
            "name": "app_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The release_id",
            "in": "path",
            "name": "release_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "A hash that authorizes the download if it matches the release info.",
            "in": "query",
            "name": "token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "The app's OS is not iOS."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden - The token provided doesn't match the release's token."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "The app or release can't be found."
          }
        },
        "tags": [
          "distribute"
        ],
        "description": "Returns the manifest.plist in XML format for installing the release on a device. Only available for iOS.",
        "operationId": "releases_getIosManifest"
      }
    },
    "/v0.1/public/apps/{owner_name}/{app_name}/install_analytics": {
      "post": {
        "parameters": [
          {
            "description": "The name of the app owner",
            "in": "path",
            "name": "owner_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the app",
            "in": "path",
            "name": "app_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Install Analytics Notification Sent Successfully."
          }
        },
        "tags": [
          "distribute"
        ],
        "description": "Notify download(s) for the provided distribution release(s).",
        "operationId": "distibutionReleases_installAnalytics",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "releases": {
                    "items": {
                      "properties": {
                        "distribution_group_id": {
                          "description": "distribution group id",
                          "type": "string"
                        },
                        "release_id": {
                          "description": "release id",
                          "type": "integer"
                        },
                        "user_id": {
                          "description": "user id",
                          "format": "uuid",
                          "type": "string"
                        }
                      },
                      "required": [
                        "release_id",
                        "distribution_group_id",
                        "user_id"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "The install analytics request payload",
          "required": true
        }
      }
    },
    "/v0.1/public/codepush/report_status/deploy": {
      "post": {
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "codepush"
        ],
        "description": "Report Deployment status metric",
        "operationId": "codePushAcquisition_updateDeployStatus",
        "requestBody": {
          "$ref": "#/components/requestBodies/codePushAcquisition_updateDownloadStatusReleaseMetadata"
        }
      }
    },
    "/v0.1/public/codepush/report_status/download": {
      "post": {
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "codepush"
        ],
        "description": "Report download of specified release",
        "operationId": "codePushAcquisition_updateDownloadStatus",
        "requestBody": {
          "$ref": "#/components/requestBodies/codePushAcquisition_updateDownloadStatusReleaseMetadata"
        }
      }
    },
    "/v0.1/public/codepush/status": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "The code indicating the status",
                      "type": "string"
                    },
                    "message": {
                      "description": "The message indicating the status",
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "codepush"
        ],
        "description": "Returns the acquisition service status to the caller",
        "operationId": "codePushAcquisition_getAcquisitionStatus"
      }
    },
    "/v0.1/public/codepush/update_check": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "deployment_key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "app_version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "package_hash",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "label",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "client_unique_id",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "is_companion",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "previous_label_or_app_version",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "previous_deployment_key",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "update_info": {
                      "allOf": [
                        {
                          "properties": {
                            "description": {
                              "type": "string"
                            },
                            "is_disabled": {
                              "type": "boolean"
                            },
                            "is_mandatory": {
                              "type": "boolean"
                            },
                            "rollout": {
                              "maximum": 100,
                              "minimum": 1,
                              "type": "integer"
                            },
                            "target_binary_range": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        {
                          "properties": {
                            "download_url": {
                              "type": "string"
                            },
                            "is_available": {
                              "type": "boolean"
                            },
                            "label": {
                              "type": "string"
                            },
                            "package_hash": {
                              "type": "string"
                            },
                            "package_size": {
                              "type": "number"
                            },
                            "should_run_binary_version": {
                              "type": "boolean"
                            },
                            "update_app_version": {
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        }
                      ],
                      "required": [
                        "is_available"
                      ]
                    }
                  },
                  "required": [
                    "update_info"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "codepush"
        ],
        "description": "Check for updates",
        "operationId": "codePushAcquisition_updateCheck"
      }
    },
    "/v0.1/public/hooks": {
      "post": {
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          }
        },
        "tags": [
          "build"
        ],
        "description": "Public webhook sink",
        "operationId": "builds_webhook",
        "requestBody": {
          "$ref": "#/components/requestBodies/builds_webhookPayload"
        }
      }
    },
    "/v0.1/public/sdk/apps/{app_secret}/distribution_groups/{distribution_group_id}/releases/latest": {
      "get": {
        "parameters": [
          {
            "description": "The secret of the target application",
            "in": "path",
            "name": "app_secret",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the id for destination",
            "in": "path",
            "name": "distribution_group_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The check if the request is from Install page",
            "in": "query",
            "name": "is_install_page",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Details of an uploaded release",
                  "properties": {
                    "android_min_api_level": {
                      "description": "The release's minimum required Android API level.",
                      "type": "string"
                    },
                    "app_display_name": {
                      "description": "The app's display name.",
                      "type": "string"
                    },
                    "app_icon_url": {
                      "description": "A URL to the app's icon.",
                      "type": "string"
                    },
                    "app_name": {
                      "description": "The app's name (extracted from the uploaded release).",
                      "type": "string"
                    },
                    "app_os": {
                      "description": "The app's OS.",
                      "type": "string"
                    },
                    "build": {
                      "description": "Contains metadata about the build that produced the release being uploaded",
                      "properties": {
                        "branch_name": {
                          "description": "The branch name of the build producing the release",
                          "type": "string"
                        },
                        "commit_hash": {
                          "description": "The commit hash of the build producing the release",
                          "type": "string"
                        },
                        "commit_message": {
                          "description": "The commit message of the build producing the release",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "bundle_identifier": {
                      "description": "The identifier of the apps bundle.",
                      "type": "string"
                    },
                    "can_resign": {
                      "description": "In calls that allow passing `udid` in the query string, this value determines if a release can be re-signed. When true, after a re-sign, the tester will be able to install the release from his registered devices. Will not be returned for non-iOS platforms.",
                      "type": "boolean"
                    },
                    "destination_type": {
                      "description": "OBSOLETE. Will be removed in next version. The destination type.<br>\n<b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br>\n<b>store</b>: The release distributed to external stores and distribution_stores details will be returned.<br>\n<b>tester</b>: The release distributed testers details will be returned.<br>\n",
                      "enum": [
                        "group",
                        "store",
                        "tester"
                      ],
                      "type": "string"
                    },
                    "destinations": {
                      "description": "A list of distribution groups or stores.",
                      "items": {
                        "allOf": [
                          {
                            "allOf": [
                              {
                                "properties": {
                                  "id": {
                                    "description": "ID identifying a unique distribution group.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "A name identifying a unique distribution group.",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "is_latest": {
                                    "description": "Is the containing release the latest one in this distribution group.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              }
                            ]
                          },
                          {
                            "allOf": [
                              {
                                "properties": {
                                  "id": {
                                    "description": "ID identifying a unique distribution store.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "A name identifying a unique distribution store.",
                                    "type": "string"
                                  },
                                  "publishing_status": {
                                    "description": "publishing status of the release in the store.",
                                    "type": "string"
                                  },
                                  "type": {
                                    "description": "type of the distribution store currently stores type can be intune, googleplay or windows.",
                                    "enum": [
                                      "intune",
                                      "googleplay",
                                      "apple",
                                      "none"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "is_latest": {
                                    "description": "Is the containing release the latest one in this distribution store.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              }
                            ]
                          },
                          {
                            "description": "A unique identifier for a destination. A destination can be identified by an ID (guid) or by a name. DestinationId encapsulates both options. A destination can be either a distribution group or a store.",
                            "properties": {
                              "id": {
                                "description": "Id of a distribution group / store. The release will be associated with this distribution group / store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of a distribution group / distribution store. The release will be associated with this distribution group or store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          {
                            "properties": {
                              "destination_type": {
                                "description": "Destination can be either store or group.",
                                "enum": [
                                  "group",
                                  "store",
                                  "tester"
                                ],
                                "type": "string"
                              },
                              "display_name": {
                                "description": "Display name for the group or tester",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        ]
                      },
                      "type": "array"
                    },
                    "device_family": {
                      "description": "The release's device family.",
                      "type": "string"
                    },
                    "distribution_groups": {
                      "description": "OBSOLETE. Will be removed in next version. A list of distribution groups that are associated with this release.",
                      "items": {
                        "properties": {
                          "id": {
                            "description": "ID identifying a unique distribution group.",
                            "type": "string"
                          },
                          "name": {
                            "description": "A name identifying a unique distribution group.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "id"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "distribution_stores": {
                      "description": "OBSOLETE. Will be removed in next version. A list of distribution stores that are associated with this release.",
                      "items": {
                        "properties": {
                          "id": {
                            "description": "ID identifying a unique distribution store.",
                            "type": "string"
                          },
                          "name": {
                            "description": "A name identifying a unique distribution store.",
                            "type": "string"
                          },
                          "publishing_status": {
                            "description": "publishing status of the release in the store.",
                            "type": "string"
                          },
                          "type": {
                            "description": "type of the distribution store currently stores type can be intune, googleplay or windows.",
                            "enum": [
                              "intune",
                              "googleplay",
                              "apple",
                              "none"
                            ],
                            "type": "string"
                          }
                        },
                        "required": [
                          "id"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "download_url": {
                      "description": "The URL that hosts the binary for this release.",
                      "type": "string"
                    },
                    "enabled": {
                      "description": "This value determines the whether a release currently is enabled or disabled.",
                      "type": "boolean"
                    },
                    "fingerprint": {
                      "description": "MD5 checksum of the release binary.",
                      "type": "string"
                    },
                    "id": {
                      "description": "ID identifying this unique release.",
                      "type": "integer"
                    },
                    "install_url": {
                      "description": "The href required to install a release on a mobile device. On iOS devices will be prefixed with `itms-services://?action=download-manifest&url=`",
                      "type": "string"
                    },
                    "is_external_build": {
                      "description": "This value determines if a release is external or not.",
                      "type": "boolean"
                    },
                    "is_provisioning_profile_syncing": {
                      "description": "A flag that determines whether the release's provisioning profile is still extracted or not.",
                      "type": "boolean"
                    },
                    "is_udid_provisioned": {
                      "description": "In calls that allow passing `udid` in the query string, this value will hold the provisioning status of that UDID in this release. Will be ignored for non-iOS platforms.",
                      "type": "boolean"
                    },
                    "min_os": {
                      "description": "The release's minimum required operating system.",
                      "type": "string"
                    },
                    "origin": {
                      "description": "The release's origin",
                      "enum": [
                        "hockeyapp",
                        "appcenter"
                      ],
                      "type": "string"
                    },
                    "package_hashes": {
                      "description": "Hashes for the packages.",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "provisioning_profile_expiry_date": {
                      "description": "expiration date of provisioning profile in UTC format.",
                      "type": "string"
                    },
                    "provisioning_profile_name": {
                      "description": "The release's provisioning profile name.",
                      "type": "string"
                    },
                    "provisioning_profile_type": {
                      "description": "The type of the provisioning profile for the requested app version.",
                      "enum": [
                        "adhoc",
                        "enterprise",
                        "other"
                      ],
                      "type": "string"
                    },
                    "release_notes": {
                      "description": "The release's release notes.",
                      "type": "string"
                    },
                    "secondary_download_url": {
                      "description": "The URL that hosts the secondary binary for this release, such as the apk file for aab releases.",
                      "type": "string"
                    },
                    "short_version": {
                      "description": "The release's short version.<br>\nFor iOS: CFBundleShortVersionString from info.plist.\nFor Android: android:versionName from AppManifest.xml.\n",
                      "type": "string"
                    },
                    "size": {
                      "description": "The release's size in bytes.",
                      "type": "integer"
                    },
                    "status": {
                      "description": "Status of the release.",
                      "type": "string"
                    },
                    "uploaded_at": {
                      "description": "UTC time in ISO 8601 format of the uploaded time.",
                      "type": "string"
                    },
                    "version": {
                      "description": "The release's version.<br>\nFor iOS: CFBundleVersion from info.plist.\nFor Android: android:versionCode from AppManifest.xml.\n",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "app_name",
                    "app_display_name",
                    "uploaded_at",
                    "version",
                    "short_version",
                    "app_icon_url",
                    "enabled"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "The full release details of the latest release that was distributed from the given public group."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error Codes:\n- `forbidden` - Unauthorized to access private distribution group\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error Codes:\n- `not_found` - Distribution group or the app doesn't exist\n- `no_releases_for_app` - App has no releases.\n"
          }
        },
        "tags": [
          "distribute"
        ],
        "description": "Get a release with 'latest' for the given public group.",
        "operationId": "releases_getLatestByPublicDistributionGroup"
      }
    },
    "/v0.1/public/sdk/apps/{app_secret}/releases/latest": {
      "get": {
        "parameters": [
          {
            "description": "The secret of the target application",
            "in": "path",
            "name": "app_secret",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Details of an uploaded release",
                  "properties": {
                    "android_min_api_level": {
                      "description": "The release's minimum required Android API level.",
                      "type": "string"
                    },
                    "app_display_name": {
                      "description": "The app's display name.",
                      "type": "string"
                    },
                    "app_icon_url": {
                      "description": "A URL to the app's icon.",
                      "type": "string"
                    },
                    "app_name": {
                      "description": "The app's name (extracted from the uploaded release).",
                      "type": "string"
                    },
                    "app_os": {
                      "description": "The app's OS.",
                      "type": "string"
                    },
                    "build": {
                      "description": "Contains metadata about the build that produced the release being uploaded",
                      "properties": {
                        "branch_name": {
                          "description": "The branch name of the build producing the release",
                          "type": "string"
                        },
                        "commit_hash": {
                          "description": "The commit hash of the build producing the release",
                          "type": "string"
                        },
                        "commit_message": {
                          "description": "The commit message of the build producing the release",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "bundle_identifier": {
                      "description": "The identifier of the apps bundle.",
                      "type": "string"
                    },
                    "can_resign": {
                      "description": "In calls that allow passing `udid` in the query string, this value determines if a release can be re-signed. When true, after a re-sign, the tester will be able to install the release from his registered devices. Will not be returned for non-iOS platforms.",
                      "type": "boolean"
                    },
                    "destination_type": {
                      "description": "OBSOLETE. Will be removed in next version. The destination type.<br>\n<b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br>\n<b>store</b>: The release distributed to external stores and distribution_stores details will be returned.<br>\n<b>tester</b>: The release distributed testers details will be returned.<br>\n",
                      "enum": [
                        "group",
                        "store",
                        "tester"
                      ],
                      "type": "string"
                    },
                    "destinations": {
                      "description": "A list of distribution groups or stores.",
                      "items": {
                        "allOf": [
                          {
                            "allOf": [
                              {
                                "properties": {
                                  "id": {
                                    "description": "ID identifying a unique distribution group.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "A name identifying a unique distribution group.",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "is_latest": {
                                    "description": "Is the containing release the latest one in this distribution group.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              }
                            ]
                          },
                          {
                            "allOf": [
                              {
                                "properties": {
                                  "id": {
                                    "description": "ID identifying a unique distribution store.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "A name identifying a unique distribution store.",
                                    "type": "string"
                                  },
                                  "publishing_status": {
                                    "description": "publishing status of the release in the store.",
                                    "type": "string"
                                  },
                                  "type": {
                                    "description": "type of the distribution store currently stores type can be intune, googleplay or windows.",
                                    "enum": [
                                      "intune",
                                      "googleplay",
                                      "apple",
                                      "none"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "is_latest": {
                                    "description": "Is the containing release the latest one in this distribution store.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              }
                            ]
                          },
                          {
                            "description": "A unique identifier for a destination. A destination can be identified by an ID (guid) or by a name. DestinationId encapsulates both options. A destination can be either a distribution group or a store.",
                            "properties": {
                              "id": {
                                "description": "Id of a distribution group / store. The release will be associated with this distribution group / store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of a distribution group / distribution store. The release will be associated with this distribution group or store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          {
                            "properties": {
                              "destination_type": {
                                "description": "Destination can be either store or group.",
                                "enum": [
                                  "group",
                                  "store",
                                  "tester"
                                ],
                                "type": "string"
                              },
                              "display_name": {
                                "description": "Display name for the group or tester",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        ]
                      },
                      "type": "array"
                    },
                    "device_family": {
                      "description": "The release's device family.",
                      "type": "string"
                    },
                    "distribution_groups": {
                      "description": "OBSOLETE. Will be removed in next version. A list of distribution groups that are associated with this release.",
                      "items": {
                        "properties": {
                          "id": {
                            "description": "ID identifying a unique distribution group.",
                            "type": "string"
                          },
                          "name": {
                            "description": "A name identifying a unique distribution group.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "id"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "distribution_stores": {
                      "description": "OBSOLETE. Will be removed in next version. A list of distribution stores that are associated with this release.",
                      "items": {
                        "properties": {
                          "id": {
                            "description": "ID identifying a unique distribution store.",
                            "type": "string"
                          },
                          "name": {
                            "description": "A name identifying a unique distribution store.",
                            "type": "string"
                          },
                          "publishing_status": {
                            "description": "publishing status of the release in the store.",
                            "type": "string"
                          },
                          "type": {
                            "description": "type of the distribution store currently stores type can be intune, googleplay or windows.",
                            "enum": [
                              "intune",
                              "googleplay",
                              "apple",
                              "none"
                            ],
                            "type": "string"
                          }
                        },
                        "required": [
                          "id"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "download_url": {
                      "description": "The URL that hosts the binary for this release.",
                      "type": "string"
                    },
                    "enabled": {
                      "description": "This value determines the whether a release currently is enabled or disabled.",
                      "type": "boolean"
                    },
                    "fingerprint": {
                      "description": "MD5 checksum of the release binary.",
                      "type": "string"
                    },
                    "id": {
                      "description": "ID identifying this unique release.",
                      "type": "integer"
                    },
                    "install_url": {
                      "description": "The href required to install a release on a mobile device. On iOS devices will be prefixed with `itms-services://?action=download-manifest&url=`",
                      "type": "string"
                    },
                    "is_external_build": {
                      "description": "This value determines if a release is external or not.",
                      "type": "boolean"
                    },
                    "is_provisioning_profile_syncing": {
                      "description": "A flag that determines whether the release's provisioning profile is still extracted or not.",
                      "type": "boolean"
                    },
                    "is_udid_provisioned": {
                      "description": "In calls that allow passing `udid` in the query string, this value will hold the provisioning status of that UDID in this release. Will be ignored for non-iOS platforms.",
                      "type": "boolean"
                    },
                    "min_os": {
                      "description": "The release's minimum required operating system.",
                      "type": "string"
                    },
                    "origin": {
                      "description": "The release's origin",
                      "enum": [
                        "hockeyapp",
                        "appcenter"
                      ],
                      "type": "string"
                    },
                    "package_hashes": {
                      "description": "Hashes for the packages.",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "provisioning_profile_expiry_date": {
                      "description": "expiration date of provisioning profile in UTC format.",
                      "type": "string"
                    },
                    "provisioning_profile_name": {
                      "description": "The release's provisioning profile name.",
                      "type": "string"
                    },
                    "provisioning_profile_type": {
                      "description": "The type of the provisioning profile for the requested app version.",
                      "enum": [
                        "adhoc",
                        "enterprise",
                        "other"
                      ],
                      "type": "string"
                    },
                    "release_notes": {
                      "description": "The release's release notes.",
                      "type": "string"
                    },
                    "secondary_download_url": {
                      "description": "The URL that hosts the secondary binary for this release, such as the apk file for aab releases.",
                      "type": "string"
                    },
                    "short_version": {
                      "description": "The release's short version.<br>\nFor iOS: CFBundleShortVersionString from info.plist.\nFor Android: android:versionName from AppManifest.xml.\n",
                      "type": "string"
                    },
                    "size": {
                      "description": "The release's size in bytes.",
                      "type": "integer"
                    },
                    "status": {
                      "description": "Status of the release.",
                      "type": "string"
                    },
                    "uploaded_at": {
                      "description": "UTC time in ISO 8601 format of the uploaded time.",
                      "type": "string"
                    },
                    "version": {
                      "description": "The release's version.<br>\nFor iOS: CFBundleVersion from info.plist.\nFor Android: android:versionCode from AppManifest.xml.\n",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "app_name",
                    "app_display_name",
                    "uploaded_at",
                    "version",
                    "short_version",
                    "app_icon_url",
                    "enabled"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "The full release details of the latest release that was distributed to a public group."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error Codes:\n- `not_found` - The app doesn't exist\n- `no_releases_for_app` - The app has no public releases.\n"
          }
        },
        "tags": [
          "distribute"
        ],
        "deprecated": true,
        "description": "Get the latest public release for the given app.",
        "operationId": "releases_getLatestPublicRelease"
      }
    },
    "/v0.1/public/sdk/apps/{app_secret}/releases/{release_hash}/public_distribution_groups": {
      "get": {
        "parameters": [
          {
            "description": "The secret of the target application",
            "in": "path",
            "name": "app_secret",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The hash of the release",
            "in": "path",
            "name": "release_hash",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "id": {
                        "description": "The id of the distribution group",
                        "format": "uuid",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The public distribution groups that the release has been distributed to"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error Codes:\n- `not_found` - The app doesn't exist\n"
          }
        },
        "tags": [
          "distribute"
        ],
        "description": "Get all public distribution groups that a given release has been distributed to",
        "operationId": "releases_getPublicGroupsForReleaseByHash"
      }
    },
    "/v0.1/public/sparkle/apps/{app_secret}": {
      "get": {
        "parameters": [
          {
            "description": "The secret of the application.",
            "in": "path",
            "name": "app_secret",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The RSS feed of releases."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "distribute"
        ],
        "description": "Gets the sparkle feed of the releases that are distributed to all the public distribution groups.",
        "operationId": "releases_getSparkleFeed"
      }
    },
    "/v0.1/sdk/apps/{app_secret}/releases/private/latest": {
      "get": {
        "parameters": [
          {
            "description": "The secret of the target application",
            "in": "path",
            "name": "app_secret",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "When passing `udid` in the query string, a provisioning check for the given device ID will be done. Will be ignored for non-iOS platforms.",
            "in": "query",
            "name": "udid",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Details of an uploaded release",
                  "properties": {
                    "android_min_api_level": {
                      "description": "The release's minimum required Android API level.",
                      "type": "string"
                    },
                    "app_display_name": {
                      "description": "The app's display name.",
                      "type": "string"
                    },
                    "app_icon_url": {
                      "description": "A URL to the app's icon.",
                      "type": "string"
                    },
                    "app_name": {
                      "description": "The app's name (extracted from the uploaded release).",
                      "type": "string"
                    },
                    "app_os": {
                      "description": "The app's OS.",
                      "type": "string"
                    },
                    "build": {
                      "description": "Contains metadata about the build that produced the release being uploaded",
                      "properties": {
                        "branch_name": {
                          "description": "The branch name of the build producing the release",
                          "type": "string"
                        },
                        "commit_hash": {
                          "description": "The commit hash of the build producing the release",
                          "type": "string"
                        },
                        "commit_message": {
                          "description": "The commit message of the build producing the release",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "bundle_identifier": {
                      "description": "The identifier of the apps bundle.",
                      "type": "string"
                    },
                    "can_resign": {
                      "description": "In calls that allow passing `udid` in the query string, this value determines if a release can be re-signed. When true, after a re-sign, the tester will be able to install the release from his registered devices. Will not be returned for non-iOS platforms.",
                      "type": "boolean"
                    },
                    "destination_type": {
                      "description": "OBSOLETE. Will be removed in next version. The destination type.<br>\n<b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br>\n<b>store</b>: The release distributed to external stores and distribution_stores details will be returned.<br>\n<b>tester</b>: The release distributed testers details will be returned.<br>\n",
                      "enum": [
                        "group",
                        "store",
                        "tester"
                      ],
                      "type": "string"
                    },
                    "destinations": {
                      "description": "A list of distribution groups or stores.",
                      "items": {
                        "allOf": [
                          {
                            "allOf": [
                              {
                                "properties": {
                                  "id": {
                                    "description": "ID identifying a unique distribution group.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "A name identifying a unique distribution group.",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "is_latest": {
                                    "description": "Is the containing release the latest one in this distribution group.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              }
                            ]
                          },
                          {
                            "allOf": [
                              {
                                "properties": {
                                  "id": {
                                    "description": "ID identifying a unique distribution store.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "A name identifying a unique distribution store.",
                                    "type": "string"
                                  },
                                  "publishing_status": {
                                    "description": "publishing status of the release in the store.",
                                    "type": "string"
                                  },
                                  "type": {
                                    "description": "type of the distribution store currently stores type can be intune, googleplay or windows.",
                                    "enum": [
                                      "intune",
                                      "googleplay",
                                      "apple",
                                      "none"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "is_latest": {
                                    "description": "Is the containing release the latest one in this distribution store.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              }
                            ]
                          },
                          {
                            "description": "A unique identifier for a destination. A destination can be identified by an ID (guid) or by a name. DestinationId encapsulates both options. A destination can be either a distribution group or a store.",
                            "properties": {
                              "id": {
                                "description": "Id of a distribution group / store. The release will be associated with this distribution group / store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of a distribution group / distribution store. The release will be associated with this distribution group or store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          {
                            "properties": {
                              "destination_type": {
                                "description": "Destination can be either store or group.",
                                "enum": [
                                  "group",
                                  "store",
                                  "tester"
                                ],
                                "type": "string"
                              },
                              "display_name": {
                                "description": "Display name for the group or tester",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        ]
                      },
                      "type": "array"
                    },
                    "device_family": {
                      "description": "The release's device family.",
                      "type": "string"
                    },
                    "distribution_groups": {
                      "description": "OBSOLETE. Will be removed in next version. A list of distribution groups that are associated with this release.",
                      "items": {
                        "properties": {
                          "id": {
                            "description": "ID identifying a unique distribution group.",
                            "type": "string"
                          },
                          "name": {
                            "description": "A name identifying a unique distribution group.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "id"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "distribution_stores": {
                      "description": "OBSOLETE. Will be removed in next version. A list of distribution stores that are associated with this release.",
                      "items": {
                        "properties": {
                          "id": {
                            "description": "ID identifying a unique distribution store.",
                            "type": "string"
                          },
                          "name": {
                            "description": "A name identifying a unique distribution store.",
                            "type": "string"
                          },
                          "publishing_status": {
                            "description": "publishing status of the release in the store.",
                            "type": "string"
                          },
                          "type": {
                            "description": "type of the distribution store currently stores type can be intune, googleplay or windows.",
                            "enum": [
                              "intune",
                              "googleplay",
                              "apple",
                              "none"
                            ],
                            "type": "string"
                          }
                        },
                        "required": [
                          "id"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "download_url": {
                      "description": "The URL that hosts the binary for this release.",
                      "type": "string"
                    },
                    "enabled": {
                      "description": "This value determines the whether a release currently is enabled or disabled.",
                      "type": "boolean"
                    },
                    "fingerprint": {
                      "description": "MD5 checksum of the release binary.",
                      "type": "string"
                    },
                    "id": {
                      "description": "ID identifying this unique release.",
                      "type": "integer"
                    },
                    "install_url": {
                      "description": "The href required to install a release on a mobile device. On iOS devices will be prefixed with `itms-services://?action=download-manifest&url=`",
                      "type": "string"
                    },
                    "is_external_build": {
                      "description": "This value determines if a release is external or not.",
                      "type": "boolean"
                    },
                    "is_provisioning_profile_syncing": {
                      "description": "A flag that determines whether the release's provisioning profile is still extracted or not.",
                      "type": "boolean"
                    },
                    "is_udid_provisioned": {
                      "description": "In calls that allow passing `udid` in the query string, this value will hold the provisioning status of that UDID in this release. Will be ignored for non-iOS platforms.",
                      "type": "boolean"
                    },
                    "min_os": {
                      "description": "The release's minimum required operating system.",
                      "type": "string"
                    },
                    "origin": {
                      "description": "The release's origin",
                      "enum": [
                        "hockeyapp",
                        "appcenter"
                      ],
                      "type": "string"
                    },
                    "package_hashes": {
                      "description": "Hashes for the packages.",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "provisioning_profile_expiry_date": {
                      "description": "expiration date of provisioning profile in UTC format.",
                      "type": "string"
                    },
                    "provisioning_profile_name": {
                      "description": "The release's provisioning profile name.",
                      "type": "string"
                    },
                    "provisioning_profile_type": {
                      "description": "The type of the provisioning profile for the requested app version.",
                      "enum": [
                        "adhoc",
                        "enterprise",
                        "other"
                      ],
                      "type": "string"
                    },
                    "release_notes": {
                      "description": "The release's release notes.",
                      "type": "string"
                    },
                    "secondary_download_url": {
                      "description": "The URL that hosts the secondary binary for this release, such as the apk file for aab releases.",
                      "type": "string"
                    },
                    "short_version": {
                      "description": "The release's short version.<br>\nFor iOS: CFBundleShortVersionString from info.plist.\nFor Android: android:versionName from AppManifest.xml.\n",
                      "type": "string"
                    },
                    "size": {
                      "description": "The release's size in bytes.",
                      "type": "integer"
                    },
                    "status": {
                      "description": "Status of the release.",
                      "type": "string"
                    },
                    "uploaded_at": {
                      "description": "UTC time in ISO 8601 format of the uploaded time.",
                      "type": "string"
                    },
                    "version": {
                      "description": "The release's version.<br>\nFor iOS: CFBundleVersion from info.plist.\nFor Android: android:versionCode from AppManifest.xml.\n",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "app_name",
                    "app_display_name",
                    "uploaded_at",
                    "version",
                    "short_version",
                    "app_icon_url",
                    "enabled"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Return the full release details of the latest release that was distributed to the current user (from all the private distribution groups)."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error codes:\n- `not_found` - A release or an app can't be found.\n- `no_releases_for_user` - No releases available for that user.\n"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "distribute"
        ],
        "description": "Get the latest release distributed to a private group the given user is a member of for the given app.",
        "operationId": "releases_getLatestPrivateRelease"
      }
    },
    "/v0.1/sdk/apps/{app_secret}/releases/{release_hash}": {
      "get": {
        "parameters": [
          {
            "description": "The secret of the target application",
            "in": "path",
            "name": "app_secret",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The hash of the release or 'latest' to get the latest release from all the distribution groups assigned to the current user.",
            "in": "path",
            "name": "release_hash",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "When passing `udid` in the query string, a provisioning check for the given device ID will be done. Will be ignored for non-iOS platforms.",
            "in": "query",
            "name": "udid",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Details of an uploaded release",
                  "properties": {
                    "android_min_api_level": {
                      "description": "The release's minimum required Android API level.",
                      "type": "string"
                    },
                    "app_display_name": {
                      "description": "The app's display name.",
                      "type": "string"
                    },
                    "app_icon_url": {
                      "description": "A URL to the app's icon.",
                      "type": "string"
                    },
                    "app_name": {
                      "description": "The app's name (extracted from the uploaded release).",
                      "type": "string"
                    },
                    "app_os": {
                      "description": "The app's OS.",
                      "type": "string"
                    },
                    "build": {
                      "description": "Contains metadata about the build that produced the release being uploaded",
                      "properties": {
                        "branch_name": {
                          "description": "The branch name of the build producing the release",
                          "type": "string"
                        },
                        "commit_hash": {
                          "description": "The commit hash of the build producing the release",
                          "type": "string"
                        },
                        "commit_message": {
                          "description": "The commit message of the build producing the release",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "bundle_identifier": {
                      "description": "The identifier of the apps bundle.",
                      "type": "string"
                    },
                    "can_resign": {
                      "description": "In calls that allow passing `udid` in the query string, this value determines if a release can be re-signed. When true, after a re-sign, the tester will be able to install the release from his registered devices. Will not be returned for non-iOS platforms.",
                      "type": "boolean"
                    },
                    "destination_type": {
                      "description": "OBSOLETE. Will be removed in next version. The destination type.<br>\n<b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br>\n<b>store</b>: The release distributed to external stores and distribution_stores details will be returned.<br>\n<b>tester</b>: The release distributed testers details will be returned.<br>\n",
                      "enum": [
                        "group",
                        "store",
                        "tester"
                      ],
                      "type": "string"
                    },
                    "destinations": {
                      "description": "A list of distribution groups or stores.",
                      "items": {
                        "allOf": [
                          {
                            "allOf": [
                              {
                                "properties": {
                                  "id": {
                                    "description": "ID identifying a unique distribution group.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "A name identifying a unique distribution group.",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "is_latest": {
                                    "description": "Is the containing release the latest one in this distribution group.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              }
                            ]
                          },
                          {
                            "allOf": [
                              {
                                "properties": {
                                  "id": {
                                    "description": "ID identifying a unique distribution store.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "A name identifying a unique distribution store.",
                                    "type": "string"
                                  },
                                  "publishing_status": {
                                    "description": "publishing status of the release in the store.",
                                    "type": "string"
                                  },
                                  "type": {
                                    "description": "type of the distribution store currently stores type can be intune, googleplay or windows.",
                                    "enum": [
                                      "intune",
                                      "googleplay",
                                      "apple",
                                      "none"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "is_latest": {
                                    "description": "Is the containing release the latest one in this distribution store.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              }
                            ]
                          },
                          {
                            "description": "A unique identifier for a destination. A destination can be identified by an ID (guid) or by a name. DestinationId encapsulates both options. A destination can be either a distribution group or a store.",
                            "properties": {
                              "id": {
                                "description": "Id of a distribution group / store. The release will be associated with this distribution group / store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of a distribution group / distribution store. The release will be associated with this distribution group or store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          {
                            "properties": {
                              "destination_type": {
                                "description": "Destination can be either store or group.",
                                "enum": [
                                  "group",
                                  "store",
                                  "tester"
                                ],
                                "type": "string"
                              },
                              "display_name": {
                                "description": "Display name for the group or tester",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        ]
                      },
                      "type": "array"
                    },
                    "device_family": {
                      "description": "The release's device family.",
                      "type": "string"
                    },
                    "distribution_groups": {
                      "description": "OBSOLETE. Will be removed in next version. A list of distribution groups that are associated with this release.",
                      "items": {
                        "properties": {
                          "id": {
                            "description": "ID identifying a unique distribution group.",
                            "type": "string"
                          },
                          "name": {
                            "description": "A name identifying a unique distribution group.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "id"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "distribution_stores": {
                      "description": "OBSOLETE. Will be removed in next version. A list of distribution stores that are associated with this release.",
                      "items": {
                        "properties": {
                          "id": {
                            "description": "ID identifying a unique distribution store.",
                            "type": "string"
                          },
                          "name": {
                            "description": "A name identifying a unique distribution store.",
                            "type": "string"
                          },
                          "publishing_status": {
                            "description": "publishing status of the release in the store.",
                            "type": "string"
                          },
                          "type": {
                            "description": "type of the distribution store currently stores type can be intune, googleplay or windows.",
                            "enum": [
                              "intune",
                              "googleplay",
                              "apple",
                              "none"
                            ],
                            "type": "string"
                          }
                        },
                        "required": [
                          "id"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "download_url": {
                      "description": "The URL that hosts the binary for this release.",
                      "type": "string"
                    },
                    "enabled": {
                      "description": "This value determines the whether a release currently is enabled or disabled.",
                      "type": "boolean"
                    },
                    "fingerprint": {
                      "description": "MD5 checksum of the release binary.",
                      "type": "string"
                    },
                    "id": {
                      "description": "ID identifying this unique release.",
                      "type": "integer"
                    },
                    "install_url": {
                      "description": "The href required to install a release on a mobile device. On iOS devices will be prefixed with `itms-services://?action=download-manifest&url=`",
                      "type": "string"
                    },
                    "is_external_build": {
                      "description": "This value determines if a release is external or not.",
                      "type": "boolean"
                    },
                    "is_provisioning_profile_syncing": {
                      "description": "A flag that determines whether the release's provisioning profile is still extracted or not.",
                      "type": "boolean"
                    },
                    "is_udid_provisioned": {
                      "description": "In calls that allow passing `udid` in the query string, this value will hold the provisioning status of that UDID in this release. Will be ignored for non-iOS platforms.",
                      "type": "boolean"
                    },
                    "min_os": {
                      "description": "The release's minimum required operating system.",
                      "type": "string"
                    },
                    "origin": {
                      "description": "The release's origin",
                      "enum": [
                        "hockeyapp",
                        "appcenter"
                      ],
                      "type": "string"
                    },
                    "package_hashes": {
                      "description": "Hashes for the packages.",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "provisioning_profile_expiry_date": {
                      "description": "expiration date of provisioning profile in UTC format.",
                      "type": "string"
                    },
                    "provisioning_profile_name": {
                      "description": "The release's provisioning profile name.",
                      "type": "string"
                    },
                    "provisioning_profile_type": {
                      "description": "The type of the provisioning profile for the requested app version.",
                      "enum": [
                        "adhoc",
                        "enterprise",
                        "other"
                      ],
                      "type": "string"
                    },
                    "release_notes": {
                      "description": "The release's release notes.",
                      "type": "string"
                    },
                    "secondary_download_url": {
                      "description": "The URL that hosts the secondary binary for this release, such as the apk file for aab releases.",
                      "type": "string"
                    },
                    "short_version": {
                      "description": "The release's short version.<br>\nFor iOS: CFBundleShortVersionString from info.plist.\nFor Android: android:versionName from AppManifest.xml.\n",
                      "type": "string"
                    },
                    "size": {
                      "description": "The release's size in bytes.",
                      "type": "integer"
                    },
                    "status": {
                      "description": "Status of the release.",
                      "type": "string"
                    },
                    "uploaded_at": {
                      "description": "UTC time in ISO 8601 format of the uploaded time.",
                      "type": "string"
                    },
                    "version": {
                      "description": "The release's version.<br>\nFor iOS: CFBundleVersion from info.plist.\nFor Android: android:versionCode from AppManifest.xml.\n",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "app_name",
                    "app_display_name",
                    "uploaded_at",
                    "version",
                    "short_version",
                    "app_icon_url",
                    "enabled"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "If called with a specific `release_hash` return the app's 'display_name'' and 'buildIdentifier'. If 'release_hash' is 'latest' return the full release details of the latest release that was distributed to the current user (from all the distribution groups)."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error codes:\n- `not_found` - A release or an app can't be found.\n- `no_releases_for_user` - No releases available for that user (will only be returned when `release_hash` is `latest`)\n"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "distribute"
        ],
        "description": "If 'latest' is not specified then it will return the specified release if it's enabled. If 'latest' is specified, regardless of whether a release hash is provided, the latest enabled release is returned.",
        "operationId": "releases_getLatestByHash"
      }
    },
    "/v0.1/user": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "avatar_url": {
                      "description": "The avatar URL of the user",
                      "type": "string"
                    },
                    "can_change_password": {
                      "description": "User is required to send an old password in order to change the password.",
                      "type": "boolean"
                    },
                    "display_name": {
                      "description": "The full name of the user. Might for example be first and last name",
                      "type": "string"
                    },
                    "email": {
                      "description": "The email address of the user",
                      "type": "string"
                    },
                    "id": {
                      "description": "The unique id (UUID) of the user",
                      "format": "uuid",
                      "type": "string"
                    },
                    "name": {
                      "description": "The unique name that is used to identify the user.",
                      "type": "string"
                    },
                    "origin": {
                      "description": "The creation origin of this user",
                      "enum": [
                        "appcenter",
                        "hockeyapp",
                        "codepush"
                      ],
                      "type": "string"
                    },
                    "permissions": {
                      "description": "The permissions the user has for the app",
                      "items": {
                        "enum": [
                          "manager",
                          "developer",
                          "viewer",
                          "tester"
                        ],
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "id",
                    "display_name",
                    "email",
                    "name",
                    "origin"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Returns the user profile data",
        "operationId": "users_get"
      },
      "patch": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "avatar_url": {
                      "description": "The avatar URL of the user",
                      "type": "string"
                    },
                    "can_change_password": {
                      "description": "User is required to send an old password in order to change the password.",
                      "type": "boolean"
                    },
                    "display_name": {
                      "description": "The full name of the user. Might for example be first and last name",
                      "type": "string"
                    },
                    "email": {
                      "description": "The email address of the user",
                      "type": "string"
                    },
                    "id": {
                      "description": "The unique id (UUID) of the user",
                      "format": "uuid",
                      "type": "string"
                    },
                    "name": {
                      "description": "The unique name that is used to identify the user.",
                      "type": "string"
                    },
                    "origin": {
                      "description": "The creation origin of this user",
                      "enum": [
                        "appcenter",
                        "hockeyapp",
                        "codepush"
                      ],
                      "type": "string"
                    },
                    "permissions": {
                      "description": "The permissions the user has for the app",
                      "items": {
                        "enum": [
                          "manager",
                          "developer",
                          "viewer",
                          "tester"
                        ],
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "id",
                    "display_name",
                    "email",
                    "name",
                    "origin"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Updates the user profile and returns the updated user data",
        "operationId": "users_update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "display_name": {
                    "description": "The full name of the user. Might for example be first and last name",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "The data for the created user",
          "required": true
        }
      }
    },
    "/v0.1/user/devices": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "description": "The information for a single iOS device",
                    "properties": {
                      "device_name": {
                        "description": "The device description, in the format \"iPhone 7 Plus (A1784)\"",
                        "type": "string"
                      },
                      "full_device_name": {
                        "description": "A combination of the device model name and the owner name.",
                        "type": "string"
                      },
                      "imei": {
                        "description": "The device's International Mobile Equipment Identity number. Always empty or undefined at present.",
                        "type": "string"
                      },
                      "model": {
                        "description": "The model identifier of the device, in the format iDeviceM,N",
                        "type": "string"
                      },
                      "os_build": {
                        "description": "The last known OS version running on the device",
                        "type": "string"
                      },
                      "os_version": {
                        "description": "The last known OS version running on the device",
                        "type": "string"
                      },
                      "owner_id": {
                        "description": "The user ID of the device owner.",
                        "type": "string"
                      },
                      "registered_at": {
                        "description": "Timestamp of when the device was registered in ISO format.",
                        "type": "string"
                      },
                      "serial": {
                        "description": "The device's serial number. Always empty or undefined at present.",
                        "type": "string"
                      },
                      "status": {
                        "description": "The provisioning status of the device.",
                        "type": "string"
                      },
                      "udid": {
                        "description": "The Unique Device IDentifier of the device",
                        "type": "string"
                      }
                    },
                    "required": [
                      "udid",
                      "model",
                      "device_name",
                      "os_build",
                      "os_version",
                      "status"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "<b>bad_request</b>: Devices information can only be requested for iOS apps.\n"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "<b>forbidden</b>: The user is not allowed to view someone else's devices.\n"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "distribute"
        ],
        "description": "Returns all devices associated with the given user.",
        "operationId": "devices_userDevicesList"
      }
    },
    "/v0.1/user/devices/{device_udid}": {
      "delete": {
        "parameters": [
          {
            "description": "The UDID of the device",
            "in": "path",
            "name": "device_udid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "<b>forbidden</b>: The user is not allowed to delete someone else's device.\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "<b>not_found</b>: The user or the device can't be found.\n"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "distribute"
        ],
        "description": "Removes an existing device from a user",
        "operationId": "devices_removeUserDevice"
      },
      "get": {
        "parameters": [
          {
            "description": "The UDID of the device",
            "in": "path",
            "name": "device_udid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "The information for a single iOS device",
                  "properties": {
                    "device_name": {
                      "description": "The device description, in the format \"iPhone 7 Plus (A1784)\"",
                      "type": "string"
                    },
                    "full_device_name": {
                      "description": "A combination of the device model name and the owner name.",
                      "type": "string"
                    },
                    "imei": {
                      "description": "The device's International Mobile Equipment Identity number. Always empty or undefined at present.",
                      "type": "string"
                    },
                    "model": {
                      "description": "The model identifier of the device, in the format iDeviceM,N",
                      "type": "string"
                    },
                    "os_build": {
                      "description": "The last known OS version running on the device",
                      "type": "string"
                    },
                    "os_version": {
                      "description": "The last known OS version running on the device",
                      "type": "string"
                    },
                    "owner_id": {
                      "description": "The user ID of the device owner.",
                      "type": "string"
                    },
                    "registered_at": {
                      "description": "Timestamp of when the device was registered in ISO format.",
                      "type": "string"
                    },
                    "serial": {
                      "description": "The device's serial number. Always empty or undefined at present.",
                      "type": "string"
                    },
                    "status": {
                      "description": "The provisioning status of the device.",
                      "type": "string"
                    },
                    "udid": {
                      "description": "The Unique Device IDentifier of the device",
                      "type": "string"
                    }
                  },
                  "required": [
                    "udid",
                    "model",
                    "device_name",
                    "os_build",
                    "os_version",
                    "status"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "<b>bad_request</b>: Devices information can only be requested for iOS apps.\n"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "<b>forbidden</b>: The user is not allowed to view someone else's device.\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "<b>not_found</b>: The user or device can't be found.\n"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "distribute"
        ],
        "description": "Returns the device details.",
        "operationId": "devices_deviceDetails"
      }
    },
    "/v0.1/user/dsr/delete": {
      "post": {
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "createdAt": {
                      "description": "ISO 8601 format timestamp of when request was created.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "token": {
                      "description": "Unique request identifier",
                      "format": "uuid",
                      "type": "string"
                    }
                  },
                  "required": [
                    "token",
                    "createdAt"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Data subject right delete request has been accepted.",
            "headers": {
              "Location": {
                "description": "Link to get details about the delete.",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "gdpr"
        ],
        "operationId": "DataSubjectRight_DeleteRequest"
      }
    },
    "/v0.1/user/dsr/delete/{token}": {
      "get": {
        "parameters": [
          {
            "description": "Unique request ID (GUID)",
            "in": "path",
            "name": "token",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "description": "Email used for delete with x-authz-bypass headers",
            "in": "query",
            "name": "email",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "description": "explanation message of the status",
                      "type": "string"
                    },
                    "sasUrl": {
                      "description": "Azure Storage shared access signature (SAS) URL for exported user data.",
                      "type": "string"
                    },
                    "sasUrlExpired": {
                      "description": "Whether Azure Storage shared access signature (SAS) URL has expired or not.",
                      "type": "boolean"
                    },
                    "status": {
                      "description": "Status of data subject right request",
                      "enum": [
                        "None",
                        "Created",
                        "Queued",
                        "InProgress",
                        "Completed",
                        "Failed"
                      ],
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Data subject right delete request status successfully retrieved."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "gdpr"
        ],
        "operationId": "DataSubjectRight_DeleteStatusRequest"
      }
    },
    "/v0.1/user/dsr/delete/{token}/cancel": {
      "post": {
        "parameters": [
          {
            "description": "Unique request ID (GUID)",
            "in": "path",
            "name": "token",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "createdAt": {
                      "description": "ISO 8601 format timestamp of when request was created.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "token": {
                      "description": "Unique request identifier",
                      "format": "uuid",
                      "type": "string"
                    }
                  },
                  "required": [
                    "token",
                    "createdAt"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Data subject right cancel delete request has been accepted.",
            "headers": {
              "Location": {
                "description": "Link to get details about the cancel delete.",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "503": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Cancel delete request cannot be processed yet."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "gdpr"
        ],
        "operationId": "DataSubjectRight_CancelDeleteRequest",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "email": {
                    "description": "Email used for cancel delete with x-authz-bypass headers",
                    "type": "string"
                  }
                },
                "required": [
                  "email"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/v0.1/user/dsr/export": {
      "post": {
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "createdAt": {
                      "description": "ISO 8601 format timestamp of when request was created.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "token": {
                      "description": "Unique request identifier",
                      "format": "uuid",
                      "type": "string"
                    }
                  },
                  "required": [
                    "token",
                    "createdAt"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Data subject right export request has been accepted.",
            "headers": {
              "Location": {
                "description": "Link to get details about the export.",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "gdpr"
        ],
        "operationId": "DataSubjectRight_ExportRequest"
      }
    },
    "/v0.1/user/dsr/export/{token}": {
      "get": {
        "parameters": [
          {
            "description": "Unique request ID (GUID)",
            "in": "path",
            "name": "token",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "description": "explanation message of the status",
                      "type": "string"
                    },
                    "sasUrl": {
                      "description": "Azure Storage shared access signature (SAS) URL for exported user data.",
                      "type": "string"
                    },
                    "sasUrlExpired": {
                      "description": "Whether Azure Storage shared access signature (SAS) URL has expired or not.",
                      "type": "boolean"
                    },
                    "status": {
                      "description": "Status of data subject right request",
                      "enum": [
                        "None",
                        "Created",
                        "Queued",
                        "InProgress",
                        "Completed",
                        "Failed"
                      ],
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Data subject right export request status successfully retrieved."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "gdpr"
        ],
        "operationId": "DataSubjectRight_ExportStatusRequest"
      }
    },
    "/v0.1/user/dsr/export/{token}/cancel": {
      "post": {
        "parameters": [
          {
            "description": "Unique request ID (GUID)",
            "in": "path",
            "name": "token",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "createdAt": {
                      "description": "ISO 8601 format timestamp of when request was created.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "token": {
                      "description": "Unique request identifier",
                      "format": "uuid",
                      "type": "string"
                    }
                  },
                  "required": [
                    "token",
                    "createdAt"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Data subject right cancel export request has been accepted.",
            "headers": {
              "Location": {
                "description": "Link to get details about the cancel export.",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "503": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Cancel export request cannot be processed yet."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error code with reason"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "gdpr"
        ],
        "operationId": "DataSubjectRight_CancelExportRequest"
      }
    },
    "/v0.1/user/export/serviceConnections": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "description": "SharedConnectionResponse",
                    "discriminator": {
                      "propertyName": "serviceType"
                    },
                    "properties": {
                      "credentialType": {
                        "description": "the type of the credential",
                        "enum": [
                          "credentials",
                          "certificate",
                          "key"
                        ],
                        "type": "string"
                      },
                      "displayName": {
                        "description": "display name of shared connection",
                        "type": "string"
                      },
                      "serviceType": {
                        "description": "service type of shared connection can be apple|gitlab|googleplay|jira",
                        "enum": [
                          "apple",
                          "jira",
                          "googleplay",
                          "gitlab"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "displayName",
                      "serviceType"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "bad_request: proper details are not provided for connection in body.\n"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Gets all service connections of the service type for GDPR export.",
        "operationId": "sharedconnection_Connections"
      }
    },
    "/v0.1/user/invitations/apps/{invitation_token}/accept": {
      "post": {
        "parameters": [
          {
            "description": "The app invitation token that was sent to the user",
            "in": "path",
            "name": "invitation_token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Accepts a pending invitation for the specified user",
        "operationId": "appInvitations_accept",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "description": "allow empty body for custom http-client lib"
        }
      }
    },
    "/v0.1/user/invitations/apps/{invitation_token}/reject": {
      "post": {
        "parameters": [
          {
            "description": "The app invitation token that was sent to the user",
            "in": "path",
            "name": "invitation_token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Rejects a pending invitation for the specified user",
        "operationId": "appInvitations_reject",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "description": "allow empty body for custom http-client lib"
        }
      }
    },
    "/v0.1/user/invitations/distribution_groups/accept": {
      "post": {
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Accepts all pending invitations to distribution groups for the specified user",
        "operationId": "distributionGroupInvitations_acceptAll",
        "requestBody": {
          "$ref": "#/components/requestBodies/orgInvitations_rejectEmptyBody"
        }
      }
    },
    "/v0.1/user/invitations/orgs/{invitation_token}/accept": {
      "post": {
        "parameters": [
          {
            "description": "The app invitation token that was sent to the user",
            "in": "path",
            "name": "invitation_token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Accepts a pending organization invitation for the specified user",
        "operationId": "orgInvitations_accept",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "description": "allow empty body for custom http-client lib"
        }
      }
    },
    "/v0.1/user/invitations/orgs/{invitation_token}/reject": {
      "post": {
        "parameters": [
          {
            "description": "The app invitation token that was sent to the user",
            "in": "path",
            "name": "invitation_token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized",
                            "TooManyRequests"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "description": "Rejects a pending organization invitation",
        "operationId": "orgInvitations_reject",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "description": "allow empty body for custom http-client lib"
        }
      }
    },
    "/v0.1/user/metadata/optimizely": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "metadata": {
                      "type": "object"
                    },
                    "userId": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "enum": [
                            "BadRequest",
                            "Conflict",
                            "NotAcceptable",
                            "NotFound",
                            "InternalServerError",
                            "Unauthorized"
                          ],
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "account"
        ],
        "operationId": "Users_getUserMetadata"
      }
    },
    "/v0.1/user/notifications/emailSettings": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "description": "Generic result for any alerting API operation",
                      "properties": {
                        "request_id": {
                          "description": "Unique request identifier for tracking",
                          "type": "string"
                        }
                      },
                      "required": [
                        "request_id"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "eTag": {
                          "description": "The ETag of the entity",
                          "type": "string"
                        },
                        "enabled": {
                          "description": "Allows to forcefully disable emails on app or user level",
                          "type": "boolean"
                        },
                        "settings": {
                          "description": "The settings the user has for the app",
                          "items": {
                            "description": "Event Setting",
                            "properties": {
                              "default_value": {
                                "description": "Default frequency of event",
                                "enum": [
                                  "Disabled",
                                  "Individual",
                                  "Daily",
                                  "DailyAndIndividual"
                                ],
                                "type": "string"
                              },
                              "event_type": {
                                "description": "Event Name",
                                "enum": [
                                  "crash_newCrashGroupCreated"
                                ],
                                "type": "string"
                              },
                              "value": {
                                "description": "Frequency of event",
                                "enum": [
                                  "Disabled",
                                  "Individual",
                                  "Daily",
                                  "DailyAndIndividual",
                                  "Default"
                                ],
                                "type": "string"
                              }
                            },
                            "required": [
                              "event_type",
                              "value"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "userId": {
                          "description": "The unique id (UUID) of the user",
                          "type": "string"
                        }
                      },
                      "required": [
                        "enabled",
                        "settings"
                      ],
                      "type": "object"
                    }
                  ],
                  "description": "Alerting Default Email Settings of the user",
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "description": "Generic result for any alerting API operation",
                      "properties": {
                        "request_id": {
                          "description": "Unique request identifier for tracking",
                          "type": "string"
                        }
                      },
                      "required": [
                        "request_id"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "code": {
                          "description": "The status code return by the API. It can be 400 or 404 or 409 or 500.",
                          "enum": [
                            400,
                            404,
                            409,
                            500
                          ],
                          "type": "integer"
                        },
                        "message": {
                          "description": "The reason for the request failed",
                          "type": "string"
                        }
                      },
                      "required": [
                        "code"
                      ],
                      "type": "object"
                    }
                  ],
                  "description": "Alerting service error"
                }
              }
            },
            "description": "Error code with reason"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "alerting"
        ],
        "description": "Get Default email notification settings for the user",
        "operationId": "notifications_getUserEmailSettings"
      }
    },
    "/v0.1/users/{user_id}/devices/register": {
      "post": {
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "The information for a single iOS device",
                  "properties": {
                    "device_name": {
                      "description": "The device description, in the format \"iPhone 7 Plus (A1784)\"",
                      "type": "string"
                    },
                    "full_device_name": {
                      "description": "A combination of the device model name and the owner name.",
                      "type": "string"
                    },
                    "imei": {
                      "description": "The device's International Mobile Equipment Identity number. Always empty or undefined at present.",
                      "type": "string"
                    },
                    "model": {
                      "description": "The model identifier of the device, in the format iDeviceM,N",
                      "type": "string"
                    },
                    "os_build": {
                      "description": "The last known OS version running on the device",
                      "type": "string"
                    },
                    "os_version": {
                      "description": "The last known OS version running on the device",
                      "type": "string"
                    },
                    "owner_id": {
                      "description": "The user ID of the device owner.",
                      "type": "string"
                    },
                    "registered_at": {
                      "description": "Timestamp of when the device was registered in ISO format.",
                      "type": "string"
                    },
                    "serial": {
                      "description": "The device's serial number. Always empty or undefined at present.",
                      "type": "string"
                    },
                    "status": {
                      "description": "The provisioning status of the device.",
                      "type": "string"
                    },
                    "udid": {
                      "description": "The Unique Device IDentifier of the device",
                      "type": "string"
                    }
                  },
                  "required": [
                    "udid",
                    "model",
                    "device_name",
                    "os_build",
                    "os_version",
                    "status"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BadRequest",
                        "Conflict",
                        "NotAcceptable",
                        "NotFound",
                        "InternalServerError",
                        "Unauthorized",
                        "TooManyRequests"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "<b>not_found</b>: The user or the device can't be found.\n"
          }
        },
        "security": [
          {
            "APIToken": []
          }
        ],
        "tags": [
          "distribute"
        ],
        "description": "Registers a user for an existing device",
        "operationId": "devices_registerUserForDevice",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "The information for a single iOS device",
                "properties": {
                  "imei": {
                    "description": "The device's International Mobile Equipment Identity number. Always empty or undefined at present.",
                    "type": "string"
                  },
                  "model": {
                    "description": "The model identifier of the device, in the format iDeviceM,N",
                    "type": "string"
                  },
                  "os_build": {
                    "description": "The build number of the last known OS version running on the device",
                    "type": "string"
                  },
                  "os_version": {
                    "description": "The last known OS version running on the device",
                    "type": "string"
                  },
                  "owner_id": {
                    "description": "The user ID of the device owner.",
                    "type": "string"
                  },
                  "serial": {
                    "description": "The device's serial number. Always empty or undefined at present.",
                    "type": "string"
                  },
                  "udid": {
                    "description": "The Unique Device IDentifier of the device",
                    "type": "string"
                  }
                },
                "required": [
                  "udid",
                  "model"
                ],
                "type": "object"
              }
            }
          },
          "description": "The device info.",
          "required": true
        }
      }
    }
  },
  "components": {
    "requestBodies": {
      "Analytics_CreateOrUpdateAudienceAudience": {
        "content": {
          "application/json": {
            "schema": {
              "description": "Audience definition.",
              "properties": {
                "custom_properties": {
                  "additionalProperties": {
                    "enum": [
                      "string",
                      "number",
                      "boolean",
                      "date_time"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": false,
                      "name": "device_property_type"
                    }
                  },
                  "description": "Custom properties used in the definition.",
                  "type": "object"
                },
                "definition": {
                  "description": "Audience definition in OData format.",
                  "maxLength": 2000,
                  "type": "string"
                },
                "description": {
                  "description": "Audience description.",
                  "maxLength": 128,
                  "type": "string"
                },
                "enabled": {
                  "default": true,
                  "type": "boolean"
                }
              },
              "required": [
                "definition"
              ],
              "type": "object"
            }
          }
        },
        "description": "Audience definition",
        "required": true
      },
      "ExportConfigurations_PartialUpdateProperties": {
        "content": {
          "application/json": {
            "schema": {
              "description": "Export configuration",
              "discriminator": {
                "propertyName": "type"
              },
              "properties": {
                "backfill": {
                  "description": "Field to determine if backfilling should occur. The default value is true. If set to false export starts from date and time of config creation.",
                  "type": "boolean"
                },
                "export_entities": {
                  "items": {
                    "enum": [
                      "crashes",
                      "errors",
                      "attachments",
                      "no_logs"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": false,
                      "name": "ExportEntity"
                    }
                  },
                  "type": "array"
                },
                "resource_group": {
                  "description": "The resource group name on azure",
                  "type": "string"
                },
                "resource_name": {
                  "description": "The resource name on azure",
                  "type": "string"
                },
                "type": {
                  "description": "Type of export configuration",
                  "enum": [
                    "blob_storage_connection_string",
                    "application_insights_instrumentation_key",
                    "blob_storage_linked_subscription",
                    "application_insights_linked_subscription"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "type"
              ],
              "type": "object"
            }
          }
        },
        "description": "Export configurations.",
        "required": true
      },
      "appApiTokens_newDescription": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "description": {
                  "description": "The description of the token",
                  "type": "string"
                },
                "scope": {
                  "description": "The scope for this token.",
                  "items": {
                    "enum": [
                      "all",
                      "viewer"
                    ],
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          }
        },
        "description": "Description of the token"
      },
      "apps_createForOrgApp": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "description": {
                  "description": "A short text describing the app",
                  "type": "string"
                },
                "display_name": {
                  "description": "The descriptive name of the app. This can contain any characters",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the app used in URLs",
                  "type": "string"
                },
                "os": {
                  "description": "The OS the app will be running on",
                  "enum": [
                    "Android",
                    "iOS",
                    "macOS",
                    "Tizen",
                    "tvOS",
                    "Windows",
                    "Linux",
                    "Custom"
                  ],
                  "type": "string"
                },
                "platform": {
                  "description": "The platform of the app",
                  "enum": [
                    "Java",
                    "Objective-C-Swift",
                    "UWP",
                    "Cordova",
                    "React-Native",
                    "Xamarin",
                    "Unity",
                    "Electron",
                    "WPF",
                    "WinForms",
                    "Custom"
                  ],
                  "type": "string"
                },
                "release_type": {
                  "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
                  "type": "string"
                }
              },
              "required": [
                "display_name",
                "os",
                "platform"
              ],
              "type": "object"
            }
          }
        },
        "description": "The data for the app",
        "required": true
      },
      "branchConfigurations_createParams": {
        "content": {
          "application/json": {
            "schema": {
              "additionalProperties": {
                "description": "The branch build core properties",
                "properties": {
                  "branch": {
                    "properties": {
                      "commit": {
                        "properties": {
                          "sha": {
                            "description": "The commit SHA",
                            "type": "string"
                          },
                          "url": {
                            "description": "The URL to the commit",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "name": {
                        "description": "The branch name",
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "commit"
                    ],
                    "type": "object"
                  },
                  "enabled": {
                    "type": "boolean"
                  }
                },
                "type": "object"
              },
              "description": "The branch build configuration",
              "properties": {
                "artifactVersioning": {
                  "description": "The versioning configuration for artifacts built for this branch",
                  "properties": {
                    "buildNumberFormat": {
                      "enum": [
                        "buildId",
                        "timestamp"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "badgeIsEnabled": {
                  "type": "boolean"
                },
                "cloneFromBranch": {
                  "description": "A configured branch name to clone from. If provided, all other parameters will be ignored. Only supported in POST requests.",
                  "type": "string"
                },
                "signed": {
                  "type": "boolean"
                },
                "testsEnabled": {
                  "type": "boolean"
                },
                "toolsets": {
                  "description": "The branch build configuration for each toolset",
                  "properties": {
                    "android": {
                      "description": "Build configuration for Android projects",
                      "properties": {
                        "automaticSigning": {
                          "description": "Whether to apply automatic signing or not",
                          "type": "boolean"
                        },
                        "buildVariant": {
                          "description": "The Android build variant to build",
                          "example": "release",
                          "type": "string"
                        },
                        "gradleWrapperPath": {
                          "description": "Path to the Gradle wrapper script",
                          "example": "android/gradlew",
                          "type": "string"
                        },
                        "isRoot": {
                          "description": "Whether it is the root module or not",
                          "type": "boolean"
                        },
                        "keyAlias": {
                          "description": "The key alias",
                          "type": "string"
                        },
                        "keyPassword": {
                          "description": "The key password",
                          "type": "string"
                        },
                        "keystoreEncoded": {
                          "description": "The keystore encoded value",
                          "type": "string"
                        },
                        "keystoreFilename": {
                          "description": "The name of the keystore file",
                          "type": "string"
                        },
                        "keystorePassword": {
                          "description": "The password of the keystore",
                          "type": "string"
                        },
                        "module": {
                          "description": "The Gradle module to build",
                          "example": "app",
                          "type": "string"
                        },
                        "runLint": {
                          "description": "Whether to run lint checks during the build (default)",
                          "type": "boolean"
                        },
                        "runTests": {
                          "default": true,
                          "description": "Whether to run unit tests during the build (default)",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "javascript": {
                      "description": "Build configuration when React Native, or other JavaScript tech, is part of the build steps",
                      "properties": {
                        "packageJsonPath": {
                          "description": "Path to package.json file for the main project, e.g. \"package.json\" or \"myapp/package.json\"",
                          "type": "string"
                        },
                        "reactNativeVersion": {
                          "description": "Version of React Native from package.json files",
                          "type": "string"
                        },
                        "runTests": {
                          "description": "Whether to run Jest unit tests, via npm test, during the build",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "xamarin": {
                      "description": "Build configuration for Xamarin projects",
                      "properties": {
                        "args": {
                          "type": "string"
                        },
                        "configuration": {
                          "type": "string"
                        },
                        "isSimBuild": {
                          "type": "boolean"
                        },
                        "monoVersion": {
                          "type": "string"
                        },
                        "p12File": {
                          "type": "string"
                        },
                        "p12Pwd": {
                          "type": "string"
                        },
                        "provProfile": {
                          "type": "string"
                        },
                        "sdkBundle": {
                          "type": "string"
                        },
                        "slnPath": {
                          "type": "string"
                        },
                        "symlink": {
                          "description": "Symlink of the SDK Bundle and Mono installation.\nThe build will use the associated Mono bundled with related Xamarin SDK. If both symlink and monoVersion or sdkBundle are passed, the symlink is taking precedence. If non-existing symlink is passed, the current stable Mono version will be configured for building.\n",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "xcode": {
                      "description": "Build configuration when Xcode is part of the build steps",
                      "properties": {
                        "appExtensionProvisioningProfileFiles": {
                          "items": {
                            "description": "Provisioning profile fetch and store information",
                            "properties": {
                              "fileId": {
                                "description": "File id from secure file storage",
                                "type": "string"
                              },
                              "fileName": {
                                "description": "Name of uploaded provisioning profile",
                                "type": "string"
                              },
                              "targetBundleIdentifier": {
                                "description": "Target the provisioning profile is used to sign",
                                "type": "string"
                              },
                              "uploadId": {
                                "description": "Upload id to App Center File Upload Store",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "archiveConfiguration": {
                          "description": "The build configuration of the target to archive",
                          "type": "string"
                        },
                        "automaticSigning": {
                          "type": "boolean"
                        },
                        "cartfilePath": {
                          "description": "Path to Carthage file, if present",
                          "type": "string"
                        },
                        "certificateEncoded": {
                          "type": "string"
                        },
                        "certificateFileId": {
                          "type": "string"
                        },
                        "certificateFilename": {
                          "type": "string"
                        },
                        "certificatePassword": {
                          "type": "string"
                        },
                        "certificateUploadId": {
                          "type": "string"
                        },
                        "forceLegacyBuildSystem": {
                          "description": "Setting this to true forces the build to use Xcode legacy build system. Otherwise, the setting from workspace settings is used.\nBy default new build system is used if workspace setting is not committed to the repository. Only used for iOS React Native app, with Xcode 10.\n",
                          "type": "boolean"
                        },
                        "podfilePath": {
                          "description": "Path to CococaPods file, if present",
                          "type": "string"
                        },
                        "projectOrWorkspacePath": {
                          "description": "Xcode project/workspace path",
                          "type": "string"
                        },
                        "provisioningProfileEncoded": {
                          "type": "string"
                        },
                        "provisioningProfileFileId": {
                          "type": "string"
                        },
                        "provisioningProfileFilename": {
                          "type": "string"
                        },
                        "provisioningProfileUploadId": {
                          "type": "string"
                        },
                        "scheme": {
                          "type": "string"
                        },
                        "targetToArchive": {
                          "description": "The target id of the selected scheme to archive",
                          "type": "string"
                        },
                        "teamId": {
                          "type": "string"
                        },
                        "xcodeProjectSha": {
                          "description": "The selected pbxproject hash to the repositroy",
                          "type": "string"
                        },
                        "xcodeVersion": {
                          "description": "Xcode version used to build. Available versions can be found in \"/xcode_versions\" API. Default is latest stable version, at the time when the configuration is set.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "trigger": {
                  "enum": [
                    "continous",
                    "continuous",
                    "manual"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "description": "Parameters of the configuration",
        "required": true
      },
      "builds_webhookPayload": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "codePushAcquisition_updateDownloadStatusReleaseMetadata": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "app_version": {
                  "type": "string"
                },
                "client_unique_id": {
                  "type": "string"
                },
                "deployment_key": {
                  "type": "string"
                },
                "label": {
                  "type": "string"
                },
                "previous_deployment_key": {
                  "type": "string"
                },
                "previous_label_or_app_version": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                }
              },
              "required": [
                "deployment_key"
              ],
              "type": "object"
            }
          }
        },
        "description": "Deployment status metric properties",
        "required": true
      },
      "distributionGroups_createForOrgDistributionGroup": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "display_name": {
                  "description": "The display name of the distribution group. If not specified, the name will be used.",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the distribution group",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object"
            }
          }
        },
        "description": "The attributes to update for the distribution group",
        "required": true
      },
      "distributionGroups_resendSharedInviteMembers": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "user_emails": {
                  "description": "The list of emails of the users",
                  "items": {
                    "type": "string"
                  },
                  "minItems": 1,
                  "type": "array"
                }
              },
              "type": "object"
            }
          }
        },
        "description": "The list of members to add",
        "required": true
      },
      "legacyCodePushAcquisition_updateDownloadStatusReleasemetadata": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "appVersion": {
                  "type": "string"
                },
                "clientUniqueId": {
                  "type": "string"
                },
                "deploymentKey": {
                  "type": "string"
                },
                "label": {
                  "type": "string"
                },
                "previousDeploymentKey": {
                  "type": "string"
                },
                "previousLabelOrAppVersion": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "description": "Deployment status metric properties",
        "required": true
      },
      "orgInvitations_rejectEmptyBody": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object"
            }
          }
        },
        "description": "allow empty body for custom http-client lib"
      },
      "orgInvitations_sendNewInvitationRole": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "role": {
                  "description": "The role of the user to be added",
                  "enum": [
                    "admin",
                    "collaborator",
                    "member"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "description": "The role of the user to be added"
      },
      "organization_updateAvatar": {
        "content": {
          "application/octet-stream": {
            "schema": {
              "format": "binary",
              "type": "string"
            }
          }
        }
      },
      "releases_putDistributionTesterDestinationTesterUpdateDetails": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "mandatory_update": {
                  "description": "Whether a release is mandatory for the given destination",
                  "type": "boolean"
                }
              },
              "required": [
                "mandatory_update"
              ],
              "type": "object"
            }
          }
        }
      },
      "storeReleases_deleteBody": {
        "content": {
          "application/json": {
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "test_patchTestSeriesName": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "name": {
                  "description": "Name of the new test series",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "title": "Name of the test series",
              "type": "object"
            }
          }
        },
        "required": true
      },
      "test_updateDeviceSetOfUserDeviceset": {
        "content": {
          "application/json": {
            "schema": {
              "description": "The name of the device set and the list of device IDs",
              "properties": {
                "devices": {
                  "description": "List of device IDs",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "name": {
                  "description": "The name of the device set",
                  "type": "string"
                }
              },
              "required": [
                "devices",
                "name"
              ],
              "title": "Device Set update information",
              "type": "object"
            }
          }
        },
        "required": true
      }
    },
    "schemas": {
      "AADGroup": {
        "properties": {
          "aad_group_id": {
            "description": "The id of the aad group",
            "format": "uuid",
            "type": "string"
          },
          "display_name": {
            "description": "The display name of the aad group",
            "type": "string"
          },
          "tenant_id": {
            "description": "The id of the aad tenant",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "aad_group_id",
          "tenant_id",
          "display_name"
        ],
        "type": "object"
      },
      "AADTenantAddRequest": {
        "properties": {
          "aad_tenant_id": {
            "description": "The AAD tenant id",
            "format": "uuid",
            "type": "string"
          },
          "display_name": {
            "description": "The name of the AAD Tenant",
            "type": "string"
          },
          "user_id": {
            "description": "The user wanting to add this tenant to the organization, must be an admin of the organization",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "user_id",
          "aad_tenant_id",
          "display_name"
        ],
        "type": "object"
      },
      "AADTenantResponse": {
        "properties": {
          "aad_tenant_id": {
            "description": "The AAD tenant id",
            "format": "uuid",
            "type": "string"
          },
          "display_name": {
            "description": "The name of the AAD Tenant",
            "type": "string"
          }
        },
        "required": [
          "aad_tenant_id",
          "display_name"
        ],
        "type": "object"
      },
      "AADUser": {
        "description": "an AAD user's id and tenant id",
        "properties": {
          "object_id": {
            "description": "the aad user's id",
            "format": "uuid",
            "type": "string"
          },
          "tenant_id": {
            "description": "the aad user's tenant id",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "object_id",
          "tenant_id"
        ],
        "type": "object"
      },
      "AccessKey": {
        "properties": {
          "createdBy": {
            "description": "Account name of creator.",
            "type": "string"
          },
          "createdTime": {
            "description": "Created time of access key",
            "type": "number"
          },
          "description": {
            "description": "Description of access key",
            "type": "string"
          },
          "expires": {
            "description": "Time of expiry of access key",
            "type": "number"
          },
          "friendlyName": {
            "description": "Friendly name of access key",
            "type": "string"
          },
          "id": {
            "description": "Id of accessKey",
            "type": "string"
          },
          "isSession": {
            "description": "Legacy property which indicate if accessKey was created from session",
            "type": "boolean"
          },
          "name": {
            "description": "Key of access key",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AccessKeyListResponse": {
        "properties": {
          "accessKeys": {
            "description": "Array containing the list of existing AccessKeys",
            "items": {
              "properties": {
                "createdBy": {
                  "description": "Account name of creator.",
                  "type": "string"
                },
                "createdTime": {
                  "description": "Created time of access key",
                  "type": "number"
                },
                "description": {
                  "description": "Description of access key",
                  "type": "string"
                },
                "expires": {
                  "description": "Time of expiry of access key",
                  "type": "number"
                },
                "friendlyName": {
                  "description": "Friendly name of access key",
                  "type": "string"
                },
                "id": {
                  "description": "Id of accessKey",
                  "type": "string"
                },
                "isSession": {
                  "description": "Legacy property which indicate if accessKey was created from session",
                  "type": "boolean"
                },
                "name": {
                  "description": "Key of access key",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "AccountResponse": {
        "properties": {
          "display_name": {
            "description": "The display name of the account",
            "type": "string"
          },
          "email": {
            "description": "The account's email. For org that value might be empty.",
            "type": "string"
          },
          "id": {
            "description": "The internal unique id (UUID) of the account.",
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "description": "The slug name of the account",
            "type": "string"
          },
          "origin": {
            "description": "The creation origin of this account",
            "enum": [
              "appcenter",
              "hockeyapp"
            ],
            "type": "string"
          },
          "type": {
            "description": "The type of this account",
            "enum": [
              "user",
              "org"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "display_name",
          "name",
          "origin",
          "type"
        ],
        "type": "object"
      },
      "AcquisitionStatusSuccessResponse": {
        "properties": {
          "code": {
            "description": "The code indicating the status",
            "type": "string"
          },
          "message": {
            "description": "The message indicating the status",
            "type": "string"
          }
        },
        "required": [
          "code",
          "message"
        ],
        "type": "object"
      },
      "ActiveCrashingAppDetails": {
        "properties": {
          "appsWithCrashes": {
            "description": "details of the apps with crashes",
            "items": {
              "properties": {
                "appId": {
                  "description": "application identifier",
                  "type": "string"
                },
                "appVersion": {
                  "description": "application version",
                  "type": "string"
                },
                "crashGroupId": {
                  "description": "crash group identifier",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "nextLink": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ActiveDeviceCounts": {
        "properties": {
          "daily": {
            "description": "The active device count for each interval.",
            "items": {
              "properties": {
                "count": {
                  "description": "Count of the object.",
                  "format": "int64",
                  "type": "integer"
                },
                "datetime": {
                  "description": "The ISO 8601 datetime.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "monthly": {
            "description": "The active device count for each interval with a month's retention.",
            "items": {
              "properties": {
                "count": {
                  "description": "Count of the object.",
                  "format": "int64",
                  "type": "integer"
                },
                "datetime": {
                  "description": "The ISO 8601 datetime.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "weekly": {
            "description": "The active device count for each interval with a week's retention.",
            "items": {
              "properties": {
                "count": {
                  "description": "Count of the object.",
                  "format": "int64",
                  "type": "integer"
                },
                "datetime": {
                  "description": "The ISO 8601 datetime.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "AddAADGroupResponse": {
        "properties": {
          "id": {
            "description": "The unique ID (UUID) of the aad group",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AddAppTesterRequest": {
        "properties": {
          "release_id": {
            "description": "The ID of the release the user was added to",
            "type": "integer"
          },
          "user_id": {
            "description": "The user ID of the tester that needs to be added",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "user_id",
          "release_id"
        ],
        "type": "object"
      },
      "AddAppTesterResponse": {
        "properties": {
          "release_id": {
            "description": "The ID of the release the user was added to",
            "type": "integer"
          },
          "user_id": {
            "description": "The user ID of the tester that needs to be added",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "user_id",
          "release_id"
        ],
        "type": "object"
      },
      "AddOrganizationAdminRequest": {
        "properties": {
          "assigning_reason": {
            "description": "The explanation for adding new org admin.",
            "type": "string"
          },
          "issue_id": {
            "description": "The id of the related Intercom issue.",
            "type": "string"
          },
          "new_org_admin_id": {
            "description": "The internal unique id (UUID) of the account.",
            "format": "uuid",
            "type": "string"
          },
          "responsible_admin_id": {
            "description": "The id of the user who started adding new org admin.",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "new_org_admin_id",
          "issue_id",
          "assigning_reason",
          "responsible_admin_id"
        ],
        "type": "object"
      },
      "AddUserAsRoleRequest": {
        "properties": {
          "role": {
            "description": "The role of the user to be added",
            "enum": [
              "admin",
              "collaborator",
              "member"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "AdministeredOrgsResponse": {
        "properties": {
          "organizations": {
            "properties": {
              "avatar_url": {
                "description": "The URL to a user-uploaded Avatar image",
                "type": "string"
              },
              "created_at": {
                "description": "The creation date of this organization",
                "type": "string"
              },
              "display_name": {
                "description": "The display name of the organization",
                "type": "string"
              },
              "id": {
                "description": "The internal unique id (UUID) of the organization.",
                "format": "uuid",
                "type": "string"
              },
              "name": {
                "description": "The slug name of the organization",
                "type": "string"
              },
              "origin": {
                "description": "The creation origin of this organization",
                "enum": [
                  "appcenter",
                  "hockeyapp"
                ],
                "type": "string"
              },
              "updated_at": {
                "description": "The date the organization was last updated at",
                "type": "string"
              }
            },
            "required": [
              "id",
              "display_name",
              "name",
              "origin",
              "created_at",
              "updated_at"
            ],
            "type": "object"
          }
        },
        "required": [
          "organizations"
        ],
        "type": "object"
      },
      "AgentQueueResponse": {
        "description": "Agent queue",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "AgentQueuesResponse": {
        "description": "A list of agent queues",
        "items": {
          "description": "Agent queue",
          "properties": {
            "id": {
              "type": "integer"
            },
            "name": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "type": "array"
      },
      "AggregatedBillingInformation": {
        "description": "Aggregated Billing Information for a user or an organization",
        "properties": {
          "azureSubscriptionId": {
            "description": "Unique identifier for the Azure subscription used for billing",
            "type": "string"
          },
          "azureSubscriptionState": {
            "description": "State of the Azure subscription used for billing",
            "enum": [
              "Enabled",
              "Disabled",
              "NotSet"
            ],
            "type": "string"
          },
          "billingPlans": {
            "description": "Billing Plans section in the Billing Information",
            "properties": {
              "buildService": {
                "description": "Billing Plans for a single service",
                "properties": {
                  "canSelectTrialPlan": {
                    "description": "Can customer select trial plan for that service (if it exists)?",
                    "type": "boolean"
                  },
                  "currentBillingPeriod": {
                    "description": "Billing plans for a given period",
                    "properties": {
                      "byAccount": {
                        "description": "Selection of a billing plan",
                        "properties": {
                          "count": {
                            "description": "Number of instances of the billing plan.",
                            "type": "integer"
                          },
                          "plan": {
                            "description": "Billing Plan",
                            "properties": {
                              "attributes": {
                                "additionalProperties": {
                                  "type": "object"
                                },
                                "description": "Collection of attribute values.",
                                "type": "object"
                              },
                              "id": {
                                "description": "The Billing Plan ID",
                                "type": "string"
                              },
                              "limits": {
                                "additionalProperties": {
                                  "type": "number"
                                },
                                "description": "A collection of named numeric values",
                                "type": "object"
                              },
                              "parentId": {
                                "type": "string"
                              },
                              "paymentSource": {
                                "description": "Service that receives payments for this billing plan.",
                                "enum": [
                                  "None",
                                  "AppCenter",
                                  "GitHub",
                                  "Xtc"
                                ],
                                "type": "string"
                              },
                              "price": {
                                "description": "Price of the Billing Plan",
                                "type": "number"
                              },
                              "service": {
                                "description": "Name of the service that the plan applies to.",
                                "enum": [
                                  "Build",
                                  "Test"
                                ],
                                "type": "string"
                              },
                              "version": {
                                "description": "Version of the Billing Plan schema",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "endTime": {
                        "description": "Exclusive end of the period.",
                        "format": "dateTime",
                        "type": "string"
                      },
                      "startTime": {
                        "description": "Inclusive start of the period",
                        "format": "dateTime",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "lastTrialPlanExpirationTime": {
                    "description": "Expiration time of the last selected trial plan. Will be null if trial plan was not used.",
                    "format": "dateTime",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "testService": {
                "description": "Billing Plans for a single service",
                "properties": {
                  "canSelectTrialPlan": {
                    "description": "Can customer select trial plan for that service (if it exists)?",
                    "type": "boolean"
                  },
                  "currentBillingPeriod": {
                    "description": "Billing plans for a given period",
                    "properties": {
                      "byAccount": {
                        "description": "Selection of a billing plan",
                        "properties": {
                          "count": {
                            "description": "Number of instances of the billing plan.",
                            "type": "integer"
                          },
                          "plan": {
                            "description": "Billing Plan",
                            "properties": {
                              "attributes": {
                                "additionalProperties": {
                                  "type": "object"
                                },
                                "description": "Collection of attribute values.",
                                "type": "object"
                              },
                              "id": {
                                "description": "The Billing Plan ID",
                                "type": "string"
                              },
                              "limits": {
                                "additionalProperties": {
                                  "type": "number"
                                },
                                "description": "A collection of named numeric values",
                                "type": "object"
                              },
                              "parentId": {
                                "type": "string"
                              },
                              "paymentSource": {
                                "description": "Service that receives payments for this billing plan.",
                                "enum": [
                                  "None",
                                  "AppCenter",
                                  "GitHub",
                                  "Xtc"
                                ],
                                "type": "string"
                              },
                              "price": {
                                "description": "Price of the Billing Plan",
                                "type": "number"
                              },
                              "service": {
                                "description": "Name of the service that the plan applies to.",
                                "enum": [
                                  "Build",
                                  "Test"
                                ],
                                "type": "string"
                              },
                              "version": {
                                "description": "Version of the Billing Plan schema",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "endTime": {
                        "description": "Exclusive end of the period.",
                        "format": "dateTime",
                        "type": "string"
                      },
                      "startTime": {
                        "description": "Inclusive start of the period",
                        "format": "dateTime",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "lastTrialPlanExpirationTime": {
                    "description": "Expiration time of the last selected trial plan. Will be null if trial plan was not used.",
                    "format": "dateTime",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "ID of the user or organization",
            "type": "string"
          },
          "timestamp": {
            "description": "The ISO 8601 datetime of last modification",
            "format": "dateTime",
            "type": "string"
          },
          "usage": {
            "description": "Usage section in the Billing Information",
            "properties": {
              "buildService": {
                "description": "Resource usage for a single Mobile Center service",
                "properties": {
                  "currentUsagePeriod": {
                    "description": "Usage for a single period",
                    "properties": {
                      "byAccount": {
                        "additionalProperties": {
                          "type": "number"
                        },
                        "description": "A collection of named numeric values",
                        "type": "object"
                      },
                      "byApp": {
                        "additionalProperties": {
                          "additionalProperties": {
                            "type": "number"
                          },
                          "description": "A collection of named numeric values",
                          "type": "object"
                        },
                        "description": "A collection of  named numeric values grouped by app",
                        "type": "object"
                      },
                      "endTime": {
                        "description": "Exclusive end time of the usage period.",
                        "format": "dateTime",
                        "type": "string"
                      },
                      "startTime": {
                        "description": "Inclusive start time of the usage period",
                        "format": "dateTime",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "testService": {
                "description": "Resource usage for a single Mobile Center service",
                "properties": {
                  "currentUsagePeriod": {
                    "description": "Usage for a single period",
                    "properties": {
                      "byAccount": {
                        "additionalProperties": {
                          "type": "number"
                        },
                        "description": "A collection of named numeric values",
                        "type": "object"
                      },
                      "byApp": {
                        "additionalProperties": {
                          "additionalProperties": {
                            "type": "number"
                          },
                          "description": "A collection of named numeric values",
                          "type": "object"
                        },
                        "description": "A collection of  named numeric values grouped by app",
                        "type": "object"
                      },
                      "endTime": {
                        "description": "Exclusive end time of the usage period.",
                        "format": "dateTime",
                        "type": "string"
                      },
                      "startTime": {
                        "description": "Inclusive start time of the usage period",
                        "format": "dateTime",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "version": {
            "description": "Version of the Billing Information schema",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AlertBugTrackerRepo": {
        "description": "Repostiory object",
        "properties": {
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "owner": {
            "description": "Repository owner object",
            "properties": {
              "id": {
                "type": "string"
              },
              "login": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "private": {
            "type": "boolean"
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "url",
          "id"
        ],
        "type": "object"
      },
      "AlertBugTrackerRepoOwner": {
        "description": "Repository owner object",
        "properties": {
          "id": {
            "type": "string"
          },
          "login": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "AlertBugTrackerReposResult": {
        "description": "List of bug tracker repositories",
        "properties": {
          "repo_type": {
            "enum": [
              "github",
              "vsts",
              "jira"
            ],
            "type": "string"
          },
          "repositories": {
            "items": {
              "description": "Repostiory object",
              "properties": {
                "description": {
                  "type": "string"
                },
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "owner": {
                  "description": "Repository owner object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "login": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "private": {
                  "type": "boolean"
                },
                "url": {
                  "type": "string"
                }
              },
              "required": [
                "name",
                "url",
                "id"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "repositories"
        ],
        "type": "object"
      },
      "AlertCrashGroupStateChange": {
        "description": "AlertCrashGroup patching parameter",
        "properties": {
          "state": {
            "enum": [
              "Open",
              "Closed",
              "Ignored"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "AlertEmailSettings": {
        "description": "Alerting Email Settings",
        "properties": {
          "settings": {
            "description": "The settings the user has for the app",
            "items": {
              "description": "Event Setting",
              "properties": {
                "default_value": {
                  "description": "Default frequency of event",
                  "enum": [
                    "Disabled",
                    "Individual",
                    "Daily",
                    "DailyAndIndividual"
                  ],
                  "type": "string"
                },
                "event_type": {
                  "description": "Event Name",
                  "enum": [
                    "crash_newCrashGroupCreated"
                  ],
                  "type": "string"
                },
                "value": {
                  "description": "Frequency of event",
                  "enum": [
                    "Disabled",
                    "Individual",
                    "Daily",
                    "DailyAndIndividual",
                    "Default"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "event_type",
                "value"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "settings"
        ],
        "type": "object"
      },
      "AlertOperationResult": {
        "description": "Generic result for any alerting API operation",
        "properties": {
          "request_id": {
            "description": "Unique request identifier for tracking",
            "type": "string"
          }
        },
        "required": [
          "request_id"
        ],
        "type": "object"
      },
      "AlertUserAppEmailSettingsResult": {
        "allOf": [
          {
            "allOf": [
              {
                "description": "Generic result for any alerting API operation",
                "properties": {
                  "request_id": {
                    "description": "Unique request identifier for tracking",
                    "type": "string"
                  }
                },
                "required": [
                  "request_id"
                ],
                "type": "object"
              },
              {
                "properties": {
                  "eTag": {
                    "description": "The ETag of the entity",
                    "type": "string"
                  },
                  "enabled": {
                    "description": "Allows to forcefully disable emails on app or user level",
                    "type": "boolean"
                  },
                  "settings": {
                    "description": "The settings the user has for the app",
                    "items": {
                      "description": "Event Setting",
                      "properties": {
                        "default_value": {
                          "description": "Default frequency of event",
                          "enum": [
                            "Disabled",
                            "Individual",
                            "Daily",
                            "DailyAndIndividual"
                          ],
                          "type": "string"
                        },
                        "event_type": {
                          "description": "Event Name",
                          "enum": [
                            "crash_newCrashGroupCreated"
                          ],
                          "type": "string"
                        },
                        "value": {
                          "description": "Frequency of event",
                          "enum": [
                            "Disabled",
                            "Individual",
                            "Daily",
                            "DailyAndIndividual",
                            "Default"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "event_type",
                        "value"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "userId": {
                    "description": "The unique id (UUID) of the user",
                    "type": "string"
                  }
                },
                "required": [
                  "enabled",
                  "settings"
                ],
                "type": "object"
              }
            ],
            "description": "Alerting Default Email Settings of the user",
            "type": "object"
          },
          {
            "properties": {
              "appId": {
                "description": "Application ID",
                "type": "string"
              },
              "request_id": {
                "description": "Unique request",
                "type": "string"
              },
              "user_enabled": {
                "description": "A flag indicating if settings are enabled at user/global level",
                "type": "boolean"
              }
            },
            "type": "object"
          }
        ],
        "description": "Alerting Email Settings of the user for a particular app",
        "required": [
          "user_enabled"
        ],
        "type": "object"
      },
      "AlertUserEmailSettingsResult": {
        "allOf": [
          {
            "description": "Generic result for any alerting API operation",
            "properties": {
              "request_id": {
                "description": "Unique request identifier for tracking",
                "type": "string"
              }
            },
            "required": [
              "request_id"
            ],
            "type": "object"
          },
          {
            "properties": {
              "eTag": {
                "description": "The ETag of the entity",
                "type": "string"
              },
              "enabled": {
                "description": "Allows to forcefully disable emails on app or user level",
                "type": "boolean"
              },
              "settings": {
                "description": "The settings the user has for the app",
                "items": {
                  "description": "Event Setting",
                  "properties": {
                    "default_value": {
                      "description": "Default frequency of event",
                      "enum": [
                        "Disabled",
                        "Individual",
                        "Daily",
                        "DailyAndIndividual"
                      ],
                      "type": "string"
                    },
                    "event_type": {
                      "description": "Event Name",
                      "enum": [
                        "crash_newCrashGroupCreated"
                      ],
                      "type": "string"
                    },
                    "value": {
                      "description": "Frequency of event",
                      "enum": [
                        "Disabled",
                        "Individual",
                        "Daily",
                        "DailyAndIndividual",
                        "Default"
                      ],
                      "type": "string"
                    }
                  },
                  "required": [
                    "event_type",
                    "value"
                  ],
                  "type": "object"
                },
                "type": "array"
              },
              "userId": {
                "description": "The unique id (UUID) of the user",
                "type": "string"
              }
            },
            "required": [
              "enabled",
              "settings"
            ],
            "type": "object"
          }
        ],
        "description": "Alerting Default Email Settings of the user",
        "type": "object"
      },
      "AlertWebhook": {
        "description": "Alerting webhook",
        "properties": {
          "enabled": {
            "description": "Allows eanble/disable webhook",
            "type": "boolean"
          },
          "event_types": {
            "description": "Event types enabled for webhook",
            "items": {
              "description": "Alerting EventTypes enum",
              "enum": [
                "newCrashGroupCreated",
                "newAppReleased"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "description": "The unique id (UUID) of the webhook",
            "type": "string"
          },
          "name": {
            "description": "display name of the webhook",
            "maxLength": 512,
            "type": "string"
          },
          "url": {
            "description": "target url of the webhook",
            "type": "string"
          }
        },
        "required": [
          "name",
          "url",
          "event_types"
        ],
        "type": "object"
      },
      "AlertWebhookListResult": {
        "description": "List of alerting webhooks wrapped as operation result",
        "properties": {
          "values": {
            "items": {
              "description": "Alerting webhook",
              "properties": {
                "enabled": {
                  "description": "Allows eanble/disable webhook",
                  "type": "boolean"
                },
                "event_types": {
                  "description": "Event types enabled for webhook",
                  "items": {
                    "description": "Alerting EventTypes enum",
                    "enum": [
                      "newCrashGroupCreated",
                      "newAppReleased"
                    ],
                    "type": "string"
                  },
                  "type": "array"
                },
                "id": {
                  "description": "The unique id (UUID) of the webhook",
                  "type": "string"
                },
                "name": {
                  "description": "display name of the webhook",
                  "maxLength": 512,
                  "type": "string"
                },
                "url": {
                  "description": "target url of the webhook",
                  "type": "string"
                }
              },
              "required": [
                "name",
                "url",
                "event_types"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "values"
        ],
        "type": "object"
      },
      "AlertWebhookPingResult": {
        "allOf": [
          {
            "description": "Generic result for any alerting API operation",
            "properties": {
              "request_id": {
                "description": "Unique request identifier for tracking",
                "type": "string"
              }
            },
            "required": [
              "request_id"
            ],
            "type": "object"
          },
          {
            "properties": {
              "response_reason": {
                "description": "Reason returned in response from calling webhook",
                "type": "string"
              },
              "response_status_code": {
                "description": "HTTP status code returned in response from calling webhook",
                "type": "integer"
              }
            },
            "required": [
              "response_status_code"
            ],
            "type": "object"
          }
        ],
        "description": "Alerting webhook ping operation result"
      },
      "AlertingAccessTokenResponse": {
        "description": "Access token details",
        "properties": {
          "access_token_id": {
            "description": "ID of the access token",
            "type": "string"
          },
          "external_account_name": {
            "description": "The account name of external user that used to authenticate against the external oauth provider or basic auth",
            "type": "string"
          },
          "external_provider_name": {
            "description": "External provider name",
            "enum": [
              "github",
              "vsts",
              "jira"
            ],
            "type": "string"
          },
          "external_user_email": {
            "description": "The email of external user that used to authenticate aginst the external oauth provider",
            "type": "string"
          }
        },
        "required": [
          "access_token_id",
          "external_provider_name",
          "external_user_email",
          "external_account_name"
        ],
        "type": "object"
      },
      "AlertingBugtracker": {
        "description": "Alerting bugtracker resource",
        "properties": {
          "event_types": {
            "description": "Event types enabled for bugtracker",
            "items": {
              "description": "Alerting EventTypes enum",
              "enum": [
                "newCrashGroupCreated",
                "newAppReleased"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "settings": {
            "description": "Bugtracker specific settings",
            "discriminator": {
              "propertyName": "type"
            },
            "properties": {
              "callback_url": {
                "type": "string"
              },
              "owner_name": {
                "type": "string"
              },
              "type": {
                "description": "type of bugtracker",
                "enum": [
                  "github",
                  "vsts",
                  "jira"
                ],
                "type": "string"
              }
            },
            "required": [
              "type",
              "owner_name"
            ],
            "type": "object"
          },
          "state": {
            "description": "bugtracker state",
            "enum": [
              "enabled",
              "disabled",
              "unauthorized"
            ],
            "type": "string"
          },
          "token_id": {
            "description": "ID of OAuth token",
            "type": "string"
          },
          "type": {
            "description": "type of bugtracker",
            "enum": [
              "github",
              "vsts",
              "jira"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "AlertingBugtrackerSettings": {
        "description": "Bugtracker specific settings",
        "discriminator": {
          "propertyName": "type"
        },
        "properties": {
          "callback_url": {
            "type": "string"
          },
          "owner_name": {
            "type": "string"
          },
          "type": {
            "description": "type of bugtracker",
            "enum": [
              "github",
              "vsts",
              "jira"
            ],
            "type": "string"
          }
        },
        "required": [
          "type",
          "owner_name"
        ],
        "type": "object"
      },
      "AlertingCrashGroup": {
        "properties": {
          "app_display_name": {
            "type": "string"
          },
          "app_platform": {
            "description": "SDK/Platform this thread is beeing generated from",
            "enum": [
              "ios",
              "android",
              "xamarin",
              "react-native",
              "ndk",
              "unity",
              "other"
            ],
            "type": "string"
          },
          "app_version": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          },
          "stack_trace": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "AlertingError": {
        "allOf": [
          {
            "description": "Generic result for any alerting API operation",
            "properties": {
              "request_id": {
                "description": "Unique request identifier for tracking",
                "type": "string"
              }
            },
            "required": [
              "request_id"
            ],
            "type": "object"
          },
          {
            "properties": {
              "code": {
                "description": "The status code return by the API. It can be 400 or 404 or 409 or 500.",
                "enum": [
                  400,
                  404,
                  409,
                  500
                ],
                "type": "integer"
              },
              "message": {
                "description": "The reason for the request failed",
                "type": "string"
              }
            },
            "required": [
              "code"
            ],
            "type": "object"
          }
        ],
        "description": "Alerting service error"
      },
      "AlertingEvent": {
        "description": "Alerting event",
        "properties": {
          "event_id": {
            "description": "A unique identifier for this event instance. Useful for deduplication",
            "type": "string"
          },
          "event_timestamp": {
            "description": "ISO 8601 date time when event was generated",
            "type": "string"
          },
          "properties": {
            "description": "Obsolete. Use emailProperties.",
            "type": "object"
          }
        },
        "required": [
          "event_id",
          "event_timestamp"
        ],
        "type": "object"
      },
      "AlertingEventTypes": {
        "description": "Alerting EventTypes enum",
        "enum": [
          "newCrashGroupCreated",
          "newAppReleased"
        ],
        "type": "string"
      },
      "AlertingGithubBugtrackerSettings": {
        "allOf": [
          {
            "description": "Bugtracker specific settings",
            "discriminator": {
              "propertyName": "type"
            },
            "properties": {
              "callback_url": {
                "type": "string"
              },
              "owner_name": {
                "type": "string"
              },
              "type": {
                "description": "type of bugtracker",
                "enum": [
                  "github",
                  "vsts",
                  "jira"
                ],
                "type": "string"
              }
            },
            "required": [
              "type",
              "owner_name"
            ],
            "type": "object"
          }
        ],
        "description": "Github bugtracker specific settings",
        "properties": {
          "github_label": {
            "type": "string"
          },
          "github_repo_id": {
            "type": "integer"
          },
          "github_repo_name": {
            "type": "string"
          }
        },
        "required": [
          "github_repo_id",
          "github_repo_name"
        ],
        "type": "object",
        "x-ms-discriminator-value": "github"
      },
      "AlertingJiraBugtrackerSettings": {
        "allOf": [
          {
            "description": "Bugtracker specific settings",
            "discriminator": {
              "propertyName": "type"
            },
            "properties": {
              "callback_url": {
                "type": "string"
              },
              "owner_name": {
                "type": "string"
              },
              "type": {
                "description": "type of bugtracker",
                "enum": [
                  "github",
                  "vsts",
                  "jira"
                ],
                "type": "string"
              }
            },
            "required": [
              "type",
              "owner_name"
            ],
            "type": "object"
          }
        ],
        "description": "Jira bugtracker specific settings",
        "properties": {
          "jira_project_id": {
            "type": "integer"
          },
          "jira_project_name": {
            "type": "string"
          }
        },
        "required": [
          "jira_project_id",
          "jira_project_name"
        ],
        "type": "object",
        "x-ms-discriminator-value": "jira"
      },
      "AlertingVstsBugtrackerSettings": {
        "allOf": [
          {
            "description": "Bugtracker specific settings",
            "discriminator": {
              "propertyName": "type"
            },
            "properties": {
              "callback_url": {
                "type": "string"
              },
              "owner_name": {
                "type": "string"
              },
              "type": {
                "description": "type of bugtracker",
                "enum": [
                  "github",
                  "vsts",
                  "jira"
                ],
                "type": "string"
              }
            },
            "required": [
              "type",
              "owner_name"
            ],
            "type": "object"
          }
        ],
        "description": "VSTS bugtracker specific settings",
        "properties": {
          "vsts_account_name": {
            "type": "string"
          },
          "vsts_area_path": {
            "type": "string"
          },
          "vsts_default_payload": {
            "type": "object"
          },
          "vsts_project_id": {
            "type": "string"
          },
          "vsts_project_name": {
            "type": "string"
          },
          "vsts_project_uri": {
            "type": "string"
          }
        },
        "required": [
          "vsts_project_id",
          "vsts_project_uri"
        ],
        "type": "object",
        "x-ms-discriminator-value": "vsts"
      },
      "AllAccountsAggregatedBillingInformation": {
        "description": "Aggregated Billing Information for a user an the organizations in which the user is an admin.",
        "properties": {
          "aggregatedBillings": {
            "description": "Aggregated Billing Information for a user or an organization",
            "properties": {
              "azureSubscriptionId": {
                "description": "Unique identifier for the Azure subscription used for billing",
                "type": "string"
              },
              "azureSubscriptionState": {
                "description": "State of the Azure subscription used for billing",
                "enum": [
                  "Enabled",
                  "Disabled",
                  "NotSet"
                ],
                "type": "string"
              },
              "billingPlans": {
                "description": "Billing Plans section in the Billing Information",
                "properties": {
                  "buildService": {
                    "description": "Billing Plans for a single service",
                    "properties": {
                      "canSelectTrialPlan": {
                        "description": "Can customer select trial plan for that service (if it exists)?",
                        "type": "boolean"
                      },
                      "currentBillingPeriod": {
                        "description": "Billing plans for a given period",
                        "properties": {
                          "byAccount": {
                            "description": "Selection of a billing plan",
                            "properties": {
                              "count": {
                                "description": "Number of instances of the billing plan.",
                                "type": "integer"
                              },
                              "plan": {
                                "description": "Billing Plan",
                                "properties": {
                                  "attributes": {
                                    "additionalProperties": {
                                      "type": "object"
                                    },
                                    "description": "Collection of attribute values.",
                                    "type": "object"
                                  },
                                  "id": {
                                    "description": "The Billing Plan ID",
                                    "type": "string"
                                  },
                                  "limits": {
                                    "additionalProperties": {
                                      "type": "number"
                                    },
                                    "description": "A collection of named numeric values",
                                    "type": "object"
                                  },
                                  "parentId": {
                                    "type": "string"
                                  },
                                  "paymentSource": {
                                    "description": "Service that receives payments for this billing plan.",
                                    "enum": [
                                      "None",
                                      "AppCenter",
                                      "GitHub",
                                      "Xtc"
                                    ],
                                    "type": "string"
                                  },
                                  "price": {
                                    "description": "Price of the Billing Plan",
                                    "type": "number"
                                  },
                                  "service": {
                                    "description": "Name of the service that the plan applies to.",
                                    "enum": [
                                      "Build",
                                      "Test"
                                    ],
                                    "type": "string"
                                  },
                                  "version": {
                                    "description": "Version of the Billing Plan schema",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "endTime": {
                            "description": "Exclusive end of the period.",
                            "format": "dateTime",
                            "type": "string"
                          },
                          "startTime": {
                            "description": "Inclusive start of the period",
                            "format": "dateTime",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "lastTrialPlanExpirationTime": {
                        "description": "Expiration time of the last selected trial plan. Will be null if trial plan was not used.",
                        "format": "dateTime",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "testService": {
                    "description": "Billing Plans for a single service",
                    "properties": {
                      "canSelectTrialPlan": {
                        "description": "Can customer select trial plan for that service (if it exists)?",
                        "type": "boolean"
                      },
                      "currentBillingPeriod": {
                        "description": "Billing plans for a given period",
                        "properties": {
                          "byAccount": {
                            "description": "Selection of a billing plan",
                            "properties": {
                              "count": {
                                "description": "Number of instances of the billing plan.",
                                "type": "integer"
                              },
                              "plan": {
                                "description": "Billing Plan",
                                "properties": {
                                  "attributes": {
                                    "additionalProperties": {
                                      "type": "object"
                                    },
                                    "description": "Collection of attribute values.",
                                    "type": "object"
                                  },
                                  "id": {
                                    "description": "The Billing Plan ID",
                                    "type": "string"
                                  },
                                  "limits": {
                                    "additionalProperties": {
                                      "type": "number"
                                    },
                                    "description": "A collection of named numeric values",
                                    "type": "object"
                                  },
                                  "parentId": {
                                    "type": "string"
                                  },
                                  "paymentSource": {
                                    "description": "Service that receives payments for this billing plan.",
                                    "enum": [
                                      "None",
                                      "AppCenter",
                                      "GitHub",
                                      "Xtc"
                                    ],
                                    "type": "string"
                                  },
                                  "price": {
                                    "description": "Price of the Billing Plan",
                                    "type": "number"
                                  },
                                  "service": {
                                    "description": "Name of the service that the plan applies to.",
                                    "enum": [
                                      "Build",
                                      "Test"
                                    ],
                                    "type": "string"
                                  },
                                  "version": {
                                    "description": "Version of the Billing Plan schema",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "endTime": {
                            "description": "Exclusive end of the period.",
                            "format": "dateTime",
                            "type": "string"
                          },
                          "startTime": {
                            "description": "Inclusive start of the period",
                            "format": "dateTime",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "lastTrialPlanExpirationTime": {
                        "description": "Expiration time of the last selected trial plan. Will be null if trial plan was not used.",
                        "format": "dateTime",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "ID of the user or organization",
                "type": "string"
              },
              "timestamp": {
                "description": "The ISO 8601 datetime of last modification",
                "format": "dateTime",
                "type": "string"
              },
              "usage": {
                "description": "Usage section in the Billing Information",
                "properties": {
                  "buildService": {
                    "description": "Resource usage for a single Mobile Center service",
                    "properties": {
                      "currentUsagePeriod": {
                        "description": "Usage for a single period",
                        "properties": {
                          "byAccount": {
                            "additionalProperties": {
                              "type": "number"
                            },
                            "description": "A collection of named numeric values",
                            "type": "object"
                          },
                          "byApp": {
                            "additionalProperties": {
                              "additionalProperties": {
                                "type": "number"
                              },
                              "description": "A collection of named numeric values",
                              "type": "object"
                            },
                            "description": "A collection of  named numeric values grouped by app",
                            "type": "object"
                          },
                          "endTime": {
                            "description": "Exclusive end time of the usage period.",
                            "format": "dateTime",
                            "type": "string"
                          },
                          "startTime": {
                            "description": "Inclusive start time of the usage period",
                            "format": "dateTime",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "testService": {
                    "description": "Resource usage for a single Mobile Center service",
                    "properties": {
                      "currentUsagePeriod": {
                        "description": "Usage for a single period",
                        "properties": {
                          "byAccount": {
                            "additionalProperties": {
                              "type": "number"
                            },
                            "description": "A collection of named numeric values",
                            "type": "object"
                          },
                          "byApp": {
                            "additionalProperties": {
                              "additionalProperties": {
                                "type": "number"
                              },
                              "description": "A collection of named numeric values",
                              "type": "object"
                            },
                            "description": "A collection of  named numeric values grouped by app",
                            "type": "object"
                          },
                          "endTime": {
                            "description": "Exclusive end time of the usage period.",
                            "format": "dateTime",
                            "type": "string"
                          },
                          "startTime": {
                            "description": "Inclusive start time of the usage period",
                            "format": "dateTime",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "version": {
                "description": "Version of the Billing Information schema",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "AllItunesAppsResponse": {
        "description": "Itunes teams details .",
        "properties": {
          "apple_id": {
            "description": "apple id for app team id.",
            "type": "string"
          },
          "bundle_id": {
            "description": "bundle identifier of app",
            "type": "string"
          },
          "iconUrl": {
            "description": "url for the app icon from app store",
            "type": "string"
          },
          "name": {
            "description": "App Name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AnalyticsModels": {
        "properties": {
          "models": {
            "items": {
              "properties": {
                "count": {
                  "description": "Count current of model.",
                  "format": "int64",
                  "type": "integer"
                },
                "model_name": {
                  "description": "Model's name.",
                  "type": "string"
                },
                "previous_count": {
                  "description": "Count of previous model.",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "total": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "AnalyticsReleasesParameter": {
        "properties": {
          "distribution_group_id": {
            "description": "distribution group id",
            "type": "string"
          },
          "release_id": {
            "description": "release id",
            "type": "integer"
          },
          "user_id": {
            "description": "user id",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "release_id",
          "distribution_group_id",
          "user_id"
        ],
        "type": "object"
      },
      "AnalyticsReleasesResponse": {
        "properties": {
          "releases": {
            "items": {
              "properties": {
                "distribution_group_id": {
                  "description": "distribution group id",
                  "type": "string"
                },
                "release_id": {
                  "description": "release id",
                  "type": "integer"
                },
                "user_id": {
                  "description": "user id",
                  "format": "uuid",
                  "type": "string"
                }
              },
              "required": [
                "release_id",
                "distribution_group_id",
                "user_id"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "AndroidBranchConfigurationProperties": {
        "description": "Build configuration for Android projects",
        "properties": {
          "automaticSigning": {
            "description": "Whether to apply automatic signing or not",
            "type": "boolean"
          },
          "buildVariant": {
            "description": "The Android build variant to build",
            "example": "release",
            "type": "string"
          },
          "gradleWrapperPath": {
            "description": "Path to the Gradle wrapper script",
            "example": "android/gradlew",
            "type": "string"
          },
          "isRoot": {
            "description": "Whether it is the root module or not",
            "type": "boolean"
          },
          "keyAlias": {
            "description": "The key alias",
            "type": "string"
          },
          "keyPassword": {
            "description": "The key password",
            "type": "string"
          },
          "keystoreEncoded": {
            "description": "The keystore encoded value",
            "type": "string"
          },
          "keystoreFilename": {
            "description": "The name of the keystore file",
            "type": "string"
          },
          "keystorePassword": {
            "description": "The password of the keystore",
            "type": "string"
          },
          "module": {
            "description": "The Gradle module to build",
            "example": "app",
            "type": "string"
          },
          "runLint": {
            "description": "Whether to run lint checks during the build (default)",
            "type": "boolean"
          },
          "runTests": {
            "default": true,
            "description": "Whether to run unit tests during the build (default)",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "AndroidModule": {
        "properties": {
          "buildConfigurations": {
            "description": "The detected build configurations of the Android module",
            "items": {
              "properties": {
                "name": {
                  "description": "Name of build configuration (the same as a build type name)",
                  "type": "string"
                },
                "signingConfig": {
                  "description": "Android signing config. Null if not specified",
                  "properties": {
                    "hasStoreFile": {
                      "description": "Indicates if storeFile is specified in the signing configuration",
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              },
              "required": [
                "name"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "buildTypes": {
            "description": "The detected build types of the Android module",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "buildVariants": {
            "description": "The detected build variants of the Android module (matrix of product flavor + build type (debug|release))",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "hasBundle": {
            "description": "Module contains bundle settings",
            "type": "boolean"
          },
          "isRoot": {
            "description": "Whether the module is at the root level of the project",
            "type": "boolean"
          },
          "name": {
            "description": "Name of the Android module",
            "type": "string"
          },
          "productFlavors": {
            "description": "The product flavors of the Android module",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "AndroidProject": {
        "properties": {
          "androidModules": {
            "description": "Android Gradle modules",
            "items": {
              "properties": {
                "buildConfigurations": {
                  "description": "The detected build configurations of the Android module",
                  "items": {
                    "properties": {
                      "name": {
                        "description": "Name of build configuration (the same as a build type name)",
                        "type": "string"
                      },
                      "signingConfig": {
                        "description": "Android signing config. Null if not specified",
                        "properties": {
                          "hasStoreFile": {
                            "description": "Indicates if storeFile is specified in the signing configuration",
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "buildTypes": {
                  "description": "The detected build types of the Android module",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "buildVariants": {
                  "description": "The detected build variants of the Android module (matrix of product flavor + build type (debug|release))",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "hasBundle": {
                  "description": "Module contains bundle settings",
                  "type": "boolean"
                },
                "isRoot": {
                  "description": "Whether the module is at the root level of the project",
                  "type": "boolean"
                },
                "name": {
                  "description": "Name of the Android module",
                  "type": "string"
                },
                "productFlavors": {
                  "description": "The product flavors of the Android module",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "required": [
                "name"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "gradleWrapperPath": {
            "description": "The path of the Gradle wrapper",
            "type": "string"
          }
        },
        "required": [
          "androidModules"
        ],
        "type": "object"
      },
      "ApiTokenClaim": {
        "properties": {
          "claim_type": {
            "enum": [
              "user_email",
              "user_origin",
              "app_owner_name",
              "app_name",
              "app_origin",
              "app_os",
              "app_platform",
              "app_secret"
            ],
            "type": "string"
          },
          "claim_value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiTokenDeleteResponse": {
        "properties": {
          "id": {
            "description": "The unique id (UUID) of the api token",
            "format": "uuid",
            "type": "string"
          },
          "token_hash": {
            "description": "The hashed value of api token",
            "type": "string"
          }
        },
        "required": [
          "id",
          "token_hash"
        ],
        "type": "object"
      },
      "ApiTokenGetUserResponse": {
        "properties": {
          "token_id": {
            "description": "The token's unique id (UUID)",
            "format": "uuid",
            "type": "string"
          },
          "token_scope": {
            "description": "The token's scope. A list of allowed roles.",
            "items": {
              "enum": [
                "all",
                "in_app_update",
                "viewer"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "user_email": {
            "description": "The user email",
            "type": "string"
          },
          "user_id": {
            "description": "The unique id (UUID) of the user",
            "format": "uuid",
            "type": "string"
          },
          "user_origin": {
            "description": "The creation origin of the user who created this api token",
            "enum": [
              "appcenter",
              "hockeyapp",
              "codepush"
            ],
            "type": "string"
          }
        },
        "required": [
          "token_id",
          "token_scope",
          "user_id",
          "user_email",
          "user_origin"
        ],
        "type": "object"
      },
      "ApiTokenResponse": {
        "properties": {
          "created_at": {
            "description": "The creation time",
            "type": "string"
          },
          "description": {
            "description": "The description of the token",
            "type": "string"
          },
          "encrypted_token": {
            "description": "The encrypted value of a token. This value will only be returned for token of type in_app_update.",
            "type": "string"
          },
          "id": {
            "description": "The unique id (UUID) of the api token",
            "format": "uuid",
            "type": "string"
          },
          "scope": {
            "description": "The token's scope. A list of allowed roles.",
            "items": {
              "enum": [
                "all",
                "in_app_update",
                "viewer"
              ],
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "id",
          "created_at"
        ],
        "type": "object"
      },
      "ApiTokenResponsev2": {
        "properties": {
          "created_at": {
            "description": "The creation time",
            "type": "string"
          },
          "description": {
            "description": "The description of the token",
            "type": "string"
          },
          "encrypted_token": {
            "description": "The encrypted value of a token. This value will only be returned for token of type in_app_update.",
            "type": "string"
          },
          "id": {
            "description": "The unique id (UUID) of the api token",
            "format": "uuid",
            "type": "string"
          },
          "scope": {
            "description": "The token's scope. A list of allowed roles.",
            "items": {
              "enum": [
                "all",
                "in_app_update",
                "viewer"
              ],
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "id",
          "created_at"
        ],
        "type": "object"
      },
      "ApiTokensCreateRequest": {
        "properties": {
          "description": {
            "description": "The description of the token",
            "type": "string"
          },
          "scope": {
            "description": "The scope for this token.",
            "items": {
              "enum": [
                "all",
                "viewer"
              ],
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ApiTokensCreateResponse": {
        "properties": {
          "api_token": {
            "description": "The api token generated will not be accessible again",
            "type": "string"
          },
          "created_at": {
            "description": "The creation time",
            "type": "string"
          },
          "description": {
            "description": "The description of the token",
            "type": "string"
          },
          "id": {
            "description": "The unique id (UUID) of the api token",
            "type": "string"
          },
          "scope": {
            "description": "The scope for this token.",
            "items": {
              "enum": [
                "all",
                "viewer"
              ],
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "id",
          "created_at",
          "api_token"
        ],
        "type": "object"
      },
      "ApiTokensGetResponse": {
        "properties": {
          "created_at": {
            "description": "The creation time",
            "type": "string"
          },
          "description": {
            "description": "The description of the token",
            "type": "string"
          },
          "id": {
            "description": "The unique id (UUID) of the api token",
            "type": "string"
          },
          "scope": {
            "description": "The scope for this token.",
            "items": {
              "enum": [
                "all",
                "viewer"
              ],
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "id",
          "created_at"
        ],
        "type": "object"
      },
      "ApiTokensPostRequest": {
        "properties": {
          "description": {
            "description": "The description of the token",
            "type": "string"
          },
          "encrypted_token": {
            "description": "An encrypted value of the token.",
            "type": "string"
          },
          "scope": {
            "description": "The scope for this token. An array of supported roles.",
            "items": {
              "enum": [
                "all",
                "in_app_update",
                "viewer"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "token_hash": {
            "description": "The hashed value of api token",
            "type": "string"
          },
          "token_type": {
            "description": "The token's type. public:managed by the user; in_app_update:special token for in-app update scenario; buid:dedicated for CI usage for now; session:for CLI session management; tester_app: used for tester mobile app; default is \"public\".'",
            "enum": [
              "public",
              "in_app_update",
              "build",
              "session",
              "tester_app"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiTokensPrivateCreateRequest": {
        "properties": {
          "description": {
            "description": "The description of the token",
            "type": "string"
          },
          "principal_id": {
            "description": "The principal ID assigned to the API token",
            "format": "uuid",
            "type": "string"
          },
          "principal_type": {
            "description": "The principal type assigned to the API token",
            "enum": [
              "app",
              "user"
            ],
            "type": "string"
          },
          "scope": {
            "description": "The scope for this token (default \"all\").",
            "items": {
              "enum": [
                "all",
                "in_app_update",
                "viewer"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "token_type": {
            "description": "The token's type (default \"public\")\n  public: managed by the user\n  in_app_update: special token for in-app update scenario\n  buid: dedicated for CI usage for now\n  session: for CLI session management\n  tester_app: used for tester mobile app",
            "enum": [
              "public",
              "in_app_update",
              "build",
              "session",
              "tester_app"
            ],
            "type": "string"
          }
        },
        "required": [
          "principal_id",
          "principal_type"
        ],
        "type": "object"
      },
      "ApiTokensPrivateCreateResponse": {
        "properties": {
          "api_token": {
            "description": "The api token generated will not be accessible again",
            "type": "string"
          },
          "created_at": {
            "description": "The creation time",
            "type": "string"
          },
          "description": {
            "description": "The description of the token",
            "type": "string"
          },
          "encrypted_token": {
            "description": "The encrypted value of a token. This value will only be returned for token of type in_app_update.",
            "type": "string"
          },
          "id": {
            "description": "The unique id (UUID) of the api token",
            "type": "string"
          },
          "scope": {
            "description": "The scope for this token.",
            "items": {
              "enum": [
                "all",
                "in_app_update",
                "viewer"
              ],
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "id",
          "created_at",
          "api_token"
        ],
        "type": "object"
      },
      "AppAddRequest": {
        "properties": {
          "name": {
            "description": "The name of the app to be added to the distribution group",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "AppBuildFeature": {
        "description": "supported feature",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "AppBuildFeatures": {
        "description": "A list of supported features",
        "items": {
          "description": "supported feature",
          "properties": {
            "name": {
              "type": "string"
            },
            "value": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "type": "array"
      },
      "AppCrashesInfo": {
        "properties": {
          "features": {
            "properties": {
              "crash_download_raw": {
                "description": "App supports download of raw crashes",
                "type": "boolean"
              },
              "crashgroup_analytics_crashfreeusers": {
                "description": "App supports the 'crash free user' metric",
                "type": "boolean"
              },
              "crashgroup_analytics_impactedusers": {
                "description": "App supports the 'impacted users' metric",
                "type": "boolean"
              },
              "crashgroup_modify_annotation": {
                "description": "App supports modification of crashgroup annotation",
                "type": "boolean"
              },
              "crashgroup_modify_status": {
                "description": "App supports modification of crashgroup status",
                "type": "boolean"
              },
              "search": {
                "description": "App supports search API",
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "has_crashes": {
            "type": "boolean"
          }
        },
        "required": [
          "has_crashes",
          "features"
        ],
        "type": "object"
      },
      "AppDeleteRequest": {
        "properties": {
          "name": {
            "description": "The name of the app to be deleted from the distribution group",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "AppDistributionGroupUsersRequest": {
        "properties": {
          "member_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "AppFeatures": {
        "properties": {
          "crash_download_raw": {
            "description": "App supports download of raw crashes",
            "type": "boolean"
          },
          "crashgroup_analytics_crashfreeusers": {
            "description": "App supports the 'crash free user' metric",
            "type": "boolean"
          },
          "crashgroup_analytics_impactedusers": {
            "description": "App supports the 'impacted users' metric",
            "type": "boolean"
          },
          "crashgroup_modify_annotation": {
            "description": "App supports modification of crashgroup annotation",
            "type": "boolean"
          },
          "crashgroup_modify_status": {
            "description": "App supports modification of crashgroup status",
            "type": "boolean"
          },
          "search": {
            "description": "App supports search API",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "AppGroupResponse": {
        "properties": {
          "display_name": {
            "description": "The display name of the app",
            "type": "string"
          },
          "group_id": {
            "description": "The unique ID (UUID) of the group that the app belongs to",
            "format": "uuid",
            "type": "string"
          },
          "id": {
            "description": "The unique ID (UUID) of the app",
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "description": "The name of the app used in URLs",
            "type": "string"
          },
          "os": {
            "description": "The OS the app will be running on",
            "enum": [
              "Android",
              "iOS",
              "macOS",
              "Tizen",
              "tvOS",
              "Windows",
              "Linux",
              "Custom"
            ],
            "type": "string"
          },
          "platform": {
            "description": "The platform of the app",
            "enum": [
              "Java",
              "Objective-C-Swift",
              "UWP",
              "Cordova",
              "React-Native",
              "Unity",
              "Electron",
              "Xamarin",
              "WPF",
              "WinForms",
              "Unknown",
              "Custom"
            ],
            "type": "string"
          },
          "release_type": {
            "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
            "type": "string"
          }
        },
        "required": [
          "id",
          "group_id",
          "name",
          "os",
          "platform"
        ],
        "type": "object"
      },
      "AppId": {
        "properties": {
          "id": {
            "description": "the id of the app",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AppInvitationDetailResponse": {
        "properties": {
          "app": {
            "allOf": [
              {
                "properties": {
                  "description": {
                    "description": "The description of the app",
                    "type": "string"
                  },
                  "display_name": {
                    "description": "The display name of the app",
                    "type": "string"
                  },
                  "icon_source": {
                    "description": "The string representation of the source of the app's icon",
                    "type": "string"
                  },
                  "icon_url": {
                    "description": "The string representation of the URL pointing to the app's icon",
                    "type": "string"
                  },
                  "id": {
                    "description": "The unique ID (UUID) of the app",
                    "format": "uuid",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the app used in URLs",
                    "type": "string"
                  },
                  "os": {
                    "description": "The OS the app will be running on",
                    "enum": [
                      "Android",
                      "iOS",
                      "macOS",
                      "Tizen",
                      "tvOS",
                      "Windows",
                      "Linux",
                      "Custom"
                    ],
                    "type": "string"
                  },
                  "owner": {
                    "description": "The information about the app's owner",
                    "properties": {
                      "avatar_url": {
                        "description": "The avatar URL of the owner",
                        "type": "string"
                      },
                      "display_name": {
                        "description": "The owner's display name",
                        "type": "string"
                      },
                      "email": {
                        "description": "The owner's email address",
                        "type": "string"
                      },
                      "id": {
                        "description": "The unique id (UUID) of the owner",
                        "format": "uuid",
                        "type": "string"
                      },
                      "name": {
                        "description": "The unique name that used to identify the owner",
                        "type": "string"
                      },
                      "type": {
                        "description": "The owner type. Can either be 'org' or 'user'",
                        "enum": [
                          "org",
                          "user"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "display_name",
                      "name",
                      "type"
                    ],
                    "type": "object"
                  },
                  "release_type": {
                    "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
                    "type": "string"
                  }
                },
                "required": [
                  "id",
                  "display_name",
                  "name",
                  "os",
                  "owner"
                ],
                "type": "object"
              },
              {
                "properties": {
                  "app_secret": {
                    "description": "A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics",
                    "type": "string"
                  },
                  "azure_subscription": {
                    "properties": {
                      "is_billable": {
                        "description": "If the subscription can be used for billing",
                        "type": "boolean"
                      },
                      "is_billing": {
                        "description": "If the subscription is used for billing",
                        "type": "boolean"
                      },
                      "is_microsoft_internal": {
                        "description": "If the subscription is internal Microsoft subscription",
                        "type": "boolean"
                      },
                      "subscription_id": {
                        "description": "The azure subscription id",
                        "format": "uuid",
                        "type": "string"
                      },
                      "subscription_name": {
                        "description": "The name of the azure subscription",
                        "type": "string"
                      },
                      "tenant_id": {
                        "description": "The tenant id of the azure subscription belongs to",
                        "format": "uuid",
                        "type": "string"
                      }
                    },
                    "required": [
                      "subscription_id",
                      "tenant_id",
                      "subscription_name"
                    ],
                    "type": "object"
                  },
                  "created_at": {
                    "description": "The created date of this app",
                    "type": "string"
                  },
                  "member_permissions": {
                    "description": "The permissions of the calling user",
                    "items": {
                      "enum": [
                        "manager",
                        "developer",
                        "viewer",
                        "tester"
                      ],
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "origin": {
                    "description": "The creation origin of this app",
                    "enum": [
                      "appcenter",
                      "hockeyapp",
                      "codepush"
                    ],
                    "type": "string"
                  },
                  "platform": {
                    "description": "The platform of the app",
                    "enum": [
                      "Java",
                      "Objective-C-Swift",
                      "UWP",
                      "Cordova",
                      "React-Native",
                      "Unity",
                      "Electron",
                      "Xamarin",
                      "WPF",
                      "WinForms",
                      "Unknown",
                      "Custom"
                    ],
                    "type": "string"
                  },
                  "updated_at": {
                    "description": "The last updated date of this app",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            ],
            "required": [
              "app_secret",
              "platform",
              "origin"
            ]
          },
          "app_count": {
            "description": "The number of apps in the group",
            "type": "number"
          },
          "distribution_group": {
            "description": "The organization that owns the distribution group, if it exists",
            "properties": {
              "owner": {
                "description": "The information about the app's owner",
                "properties": {
                  "avatar_url": {
                    "description": "The avatar URL of the owner",
                    "type": "string"
                  },
                  "display_name": {
                    "description": "The owner's display name",
                    "type": "string"
                  },
                  "email": {
                    "description": "The owner's email address",
                    "type": "string"
                  },
                  "id": {
                    "description": "The unique id (UUID) of the owner",
                    "format": "uuid",
                    "type": "string"
                  },
                  "name": {
                    "description": "The unique name that used to identify the owner",
                    "type": "string"
                  },
                  "type": {
                    "description": "The owner type. Can either be 'org' or 'user'",
                    "enum": [
                      "org",
                      "user"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "id",
                  "display_name",
                  "name",
                  "type"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "email": {
            "description": "The email address of the invited user",
            "type": "string"
          },
          "id": {
            "description": "The unique ID (UUID) of the invitation",
            "format": "uuid",
            "type": "string"
          },
          "invite_type": {
            "description": "The invitation type",
            "enum": [
              "developer",
              "tester"
            ],
            "type": "string"
          },
          "invited_by": {
            "properties": {
              "avatar_url": {
                "description": "The avatar URL of the user",
                "type": "string"
              },
              "can_change_password": {
                "description": "User is required to send an old password in order to change the password.",
                "type": "boolean"
              },
              "display_name": {
                "description": "The full name of the user. Might for example be first and last name",
                "type": "string"
              },
              "email": {
                "description": "The email address of the user",
                "type": "string"
              },
              "id": {
                "description": "The unique id (UUID) of the user",
                "format": "uuid",
                "type": "string"
              },
              "name": {
                "description": "The unique name that is used to identify the user.",
                "type": "string"
              },
              "origin": {
                "description": "The creation origin of this user",
                "enum": [
                  "appcenter",
                  "hockeyapp",
                  "codepush"
                ],
                "type": "string"
              },
              "permissions": {
                "description": "The permissions the user has for the app",
                "items": {
                  "enum": [
                    "manager",
                    "developer",
                    "viewer",
                    "tester"
                  ],
                  "type": "string"
                },
                "type": "array"
              }
            },
            "required": [
              "id",
              "display_name",
              "email",
              "name",
              "origin"
            ],
            "type": "object"
          },
          "is_existing_user": {
            "description": "Indicates whether the invited user already exists",
            "type": "boolean"
          },
          "permissions": {
            "description": "The permissions the user has for the app",
            "items": {
              "enum": [
                "manager",
                "developer",
                "viewer",
                "tester"
              ],
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "id",
          "email",
          "is_existing_user",
          "invited_by",
          "invite_type",
          "app"
        ],
        "type": "object"
      },
      "AppMembership": {
        "properties": {
          "app_id": {
            "type": "string"
          },
          "origin": {
            "enum": [
              "appcenter",
              "hockeyapp",
              "codepush",
              "testcloud",
              "hockeyapp-dogfood"
            ],
            "type": "string"
          },
          "permissions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "source_id": {
            "type": "string"
          },
          "source_type": {
            "enum": [
              "user",
              "org",
              "distribution_group",
              "team",
              "release"
            ],
            "type": "string"
          },
          "user_id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "AppMembershipsResponse": {
        "properties": {
          "app_origin": {
            "description": "The app's origin",
            "type": "string"
          },
          "memberships": {
            "description": "An array of all ways a user has access to the app, based on the app_memberships table.",
            "items": {
              "properties": {
                "app_id": {
                  "type": "string"
                },
                "origin": {
                  "enum": [
                    "appcenter",
                    "hockeyapp",
                    "codepush",
                    "testcloud",
                    "hockeyapp-dogfood"
                  ],
                  "type": "string"
                },
                "permissions": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "source_id": {
                  "type": "string"
                },
                "source_type": {
                  "enum": [
                    "user",
                    "org",
                    "distribution_group",
                    "team",
                    "release"
                  ],
                  "type": "string"
                },
                "user_id": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "AppMembershipsValidationResponse": {
        "properties": {
          "app_users_with_missing_memberships": {
            "items": {
              "properties": {
                "app_id": {
                  "type": "string"
                },
                "origin": {
                  "type": "string"
                },
                "permissions": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "user_id": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "distribution_group_users_with_missing_memberships": {
            "items": {
              "properties": {
                "distribution_group_id": {
                  "type": "string"
                },
                "origin": {
                  "type": "string"
                },
                "user_id": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "excess_app_memberships": {
            "properties": {
              "app_users_memberships": {
                "items": {
                  "properties": {
                    "app_id": {
                      "type": "string"
                    },
                    "origin": {
                      "enum": [
                        "appcenter",
                        "hockeyapp",
                        "codepush",
                        "testcloud",
                        "hockeyapp-dogfood"
                      ],
                      "type": "string"
                    },
                    "permissions": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "source_id": {
                      "type": "string"
                    },
                    "source_type": {
                      "enum": [
                        "user",
                        "org",
                        "distribution_group",
                        "team",
                        "release"
                      ],
                      "type": "string"
                    },
                    "user_id": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "distribution_group_memberships": {
                "items": {
                  "properties": {
                    "app_id": {
                      "type": "string"
                    },
                    "origin": {
                      "enum": [
                        "appcenter",
                        "hockeyapp",
                        "codepush",
                        "testcloud",
                        "hockeyapp-dogfood"
                      ],
                      "type": "string"
                    },
                    "permissions": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "source_id": {
                      "type": "string"
                    },
                    "source_type": {
                      "enum": [
                        "user",
                        "org",
                        "distribution_group",
                        "team",
                        "release"
                      ],
                      "type": "string"
                    },
                    "user_id": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "organization_admin_memberships": {
                "items": {
                  "properties": {
                    "app_id": {
                      "type": "string"
                    },
                    "origin": {
                      "enum": [
                        "appcenter",
                        "hockeyapp",
                        "codepush",
                        "testcloud",
                        "hockeyapp-dogfood"
                      ],
                      "type": "string"
                    },
                    "permissions": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "source_id": {
                      "type": "string"
                    },
                    "source_type": {
                      "enum": [
                        "user",
                        "org",
                        "distribution_group",
                        "team",
                        "release"
                      ],
                      "type": "string"
                    },
                    "user_id": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "organization_admins_with_missing_memberships": {
            "items": {
              "properties": {
                "organization_id": {
                  "type": "string"
                },
                "origin": {
                  "type": "string"
                },
                "role": {
                  "type": "string"
                },
                "user_id": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "AppName": {
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "AppPatchRequest": {
        "properties": {
          "description": {
            "description": "A short text describing the app",
            "type": "string"
          },
          "display_name": {
            "description": "The display name of the app",
            "type": "string"
          },
          "icon_asset_id": {
            "description": "The uuid for the icon's asset id from ACFUS",
            "format": "uuid",
            "type": "string"
          },
          "icon_url": {
            "description": "The string representation of the URL pointing to the app's icon",
            "type": "string"
          },
          "name": {
            "description": "The name of the app used in URLs",
            "type": "string"
          },
          "release_type": {
            "description": "A one-word descriptive release type value that starts with a capital letter but is otherwise lowercase",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AppRepoPatchRequest": {
        "properties": {
          "external_user_id": {
            "description": "The external user id from the provider",
            "type": "string"
          },
          "repo_url": {
            "description": "The absolute URL of the repository",
            "type": "string"
          },
          "service_connection_id": {
            "description": "The id of the service connection stored in customer credential store",
            "format": "uuid",
            "type": "string"
          },
          "user_id": {
            "description": "The unique id (UUID) of the user",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AppRepoPostRequest": {
        "properties": {
          "external_user_id": {
            "description": "The external user id from the provider",
            "type": "string"
          },
          "installation_id": {
            "description": "Installation id from the provider",
            "type": "string"
          },
          "repo_id": {
            "description": "Repository id from the provider",
            "type": "string"
          },
          "repo_provider": {
            "description": "The provider of the repository",
            "enum": [
              "github",
              "bitbucket",
              "vsts",
              "gitlab"
            ],
            "type": "string"
          },
          "repo_url": {
            "description": "The absolute URL of the repository",
            "type": "string"
          },
          "service_connection_id": {
            "description": "The id of the service connection stored in customer credential store",
            "format": "uuid",
            "type": "string"
          },
          "user_id": {
            "description": "The unique id (UUID) of the user who configured the repository",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "repo_url",
          "user_id"
        ],
        "type": "object"
      },
      "AppRepoResponse": {
        "properties": {
          "app_id": {
            "description": "The unique id (UUID) of the app that this repository integration belongs to",
            "format": "uuid",
            "type": "string"
          },
          "external_user_id": {
            "description": "User id from the provider",
            "type": "string"
          },
          "id": {
            "description": "The unique id (UUID) of the repository integration",
            "format": "uuid",
            "type": "string"
          },
          "installation_id": {
            "description": "Installation id from the provider",
            "type": "string"
          },
          "repo_id": {
            "description": "Repository id from the provider",
            "type": "string"
          },
          "repo_provider": {
            "description": "The provider of the repository",
            "enum": [
              "github",
              "bitbucket",
              "vsts",
              "gitlab"
            ],
            "type": "string"
          },
          "repo_url": {
            "description": "The absolute URL of the repository",
            "type": "string"
          },
          "service_connection_id": {
            "description": "The id of the service connection stored in customer credential store",
            "format": "uuid",
            "type": "string"
          },
          "user_id": {
            "description": "The unique id (UUID) of the user who configured the repository",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "id",
          "app_id",
          "user_id",
          "repo_url"
        ],
        "type": "object"
      },
      "AppRequest": {
        "properties": {
          "description": {
            "description": "A short text describing the app",
            "type": "string"
          },
          "display_name": {
            "description": "The descriptive name of the app. This can contain any characters",
            "type": "string"
          },
          "name": {
            "description": "The name of the app used in URLs",
            "type": "string"
          },
          "os": {
            "description": "The OS the app will be running on",
            "enum": [
              "Android",
              "iOS",
              "macOS",
              "Tizen",
              "tvOS",
              "Windows",
              "Linux",
              "Custom"
            ],
            "type": "string"
          },
          "platform": {
            "description": "The platform of the app",
            "enum": [
              "Java",
              "Objective-C-Swift",
              "UWP",
              "Cordova",
              "React-Native",
              "Xamarin",
              "Unity",
              "Electron",
              "WPF",
              "WinForms",
              "Custom"
            ],
            "type": "string"
          },
          "release_type": {
            "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
            "type": "string"
          }
        },
        "required": [
          "display_name",
          "os",
          "platform"
        ],
        "type": "object"
      },
      "AppResponse": {
        "allOf": [
          {
            "properties": {
              "description": {
                "description": "The description of the app",
                "type": "string"
              },
              "display_name": {
                "description": "The display name of the app",
                "type": "string"
              },
              "icon_source": {
                "description": "The string representation of the source of the app's icon",
                "type": "string"
              },
              "icon_url": {
                "description": "The string representation of the URL pointing to the app's icon",
                "type": "string"
              },
              "id": {
                "description": "The unique ID (UUID) of the app",
                "format": "uuid",
                "type": "string"
              },
              "name": {
                "description": "The name of the app used in URLs",
                "type": "string"
              },
              "os": {
                "description": "The OS the app will be running on",
                "enum": [
                  "Android",
                  "iOS",
                  "macOS",
                  "Tizen",
                  "tvOS",
                  "Windows",
                  "Linux",
                  "Custom"
                ],
                "type": "string"
              },
              "owner": {
                "description": "The information about the app's owner",
                "properties": {
                  "avatar_url": {
                    "description": "The avatar URL of the owner",
                    "type": "string"
                  },
                  "display_name": {
                    "description": "The owner's display name",
                    "type": "string"
                  },
                  "email": {
                    "description": "The owner's email address",
                    "type": "string"
                  },
                  "id": {
                    "description": "The unique id (UUID) of the owner",
                    "format": "uuid",
                    "type": "string"
                  },
                  "name": {
                    "description": "The unique name that used to identify the owner",
                    "type": "string"
                  },
                  "type": {
                    "description": "The owner type. Can either be 'org' or 'user'",
                    "enum": [
                      "org",
                      "user"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "id",
                  "display_name",
                  "name",
                  "type"
                ],
                "type": "object"
              },
              "release_type": {
                "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
                "type": "string"
              }
            },
            "required": [
              "id",
              "display_name",
              "name",
              "os",
              "owner"
            ],
            "type": "object"
          },
          {
            "properties": {
              "app_secret": {
                "description": "A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics",
                "type": "string"
              },
              "azure_subscription": {
                "properties": {
                  "is_billable": {
                    "description": "If the subscription can be used for billing",
                    "type": "boolean"
                  },
                  "is_billing": {
                    "description": "If the subscription is used for billing",
                    "type": "boolean"
                  },
                  "is_microsoft_internal": {
                    "description": "If the subscription is internal Microsoft subscription",
                    "type": "boolean"
                  },
                  "subscription_id": {
                    "description": "The azure subscription id",
                    "format": "uuid",
                    "type": "string"
                  },
                  "subscription_name": {
                    "description": "The name of the azure subscription",
                    "type": "string"
                  },
                  "tenant_id": {
                    "description": "The tenant id of the azure subscription belongs to",
                    "format": "uuid",
                    "type": "string"
                  }
                },
                "required": [
                  "subscription_id",
                  "tenant_id",
                  "subscription_name"
                ],
                "type": "object"
              },
              "created_at": {
                "description": "The created date of this app",
                "type": "string"
              },
              "member_permissions": {
                "description": "The permissions of the calling user",
                "items": {
                  "enum": [
                    "manager",
                    "developer",
                    "viewer",
                    "tester"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "origin": {
                "description": "The creation origin of this app",
                "enum": [
                  "appcenter",
                  "hockeyapp",
                  "codepush"
                ],
                "type": "string"
              },
              "platform": {
                "description": "The platform of the app",
                "enum": [
                  "Java",
                  "Objective-C-Swift",
                  "UWP",
                  "Cordova",
                  "React-Native",
                  "Unity",
                  "Electron",
                  "Xamarin",
                  "WPF",
                  "WinForms",
                  "Unknown",
                  "Custom"
                ],
                "type": "string"
              },
              "updated_at": {
                "description": "The last updated date of this app",
                "type": "string"
              }
            },
            "type": "object"
          }
        ],
        "required": [
          "app_secret",
          "platform",
          "origin"
        ]
      },
      "AppResponseInternal": {
        "allOf": [
          {
            "allOf": [
              {
                "properties": {
                  "description": {
                    "description": "The description of the app",
                    "type": "string"
                  },
                  "display_name": {
                    "description": "The display name of the app",
                    "type": "string"
                  },
                  "icon_source": {
                    "description": "The string representation of the source of the app's icon",
                    "type": "string"
                  },
                  "icon_url": {
                    "description": "The string representation of the URL pointing to the app's icon",
                    "type": "string"
                  },
                  "id": {
                    "description": "The unique ID (UUID) of the app",
                    "format": "uuid",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the app used in URLs",
                    "type": "string"
                  },
                  "os": {
                    "description": "The OS the app will be running on",
                    "enum": [
                      "Android",
                      "iOS",
                      "macOS",
                      "Tizen",
                      "tvOS",
                      "Windows",
                      "Linux",
                      "Custom"
                    ],
                    "type": "string"
                  },
                  "owner": {
                    "description": "The information about the app's owner",
                    "properties": {
                      "avatar_url": {
                        "description": "The avatar URL of the owner",
                        "type": "string"
                      },
                      "display_name": {
                        "description": "The owner's display name",
                        "type": "string"
                      },
                      "email": {
                        "description": "The owner's email address",
                        "type": "string"
                      },
                      "id": {
                        "description": "The unique id (UUID) of the owner",
                        "format": "uuid",
                        "type": "string"
                      },
                      "name": {
                        "description": "The unique name that used to identify the owner",
                        "type": "string"
                      },
                      "type": {
                        "description": "The owner type. Can either be 'org' or 'user'",
                        "enum": [
                          "org",
                          "user"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "display_name",
                      "name",
                      "type"
                    ],
                    "type": "object"
                  },
                  "release_type": {
                    "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
                    "type": "string"
                  }
                },
                "required": [
                  "id",
                  "display_name",
                  "name",
                  "os",
                  "owner"
                ],
                "type": "object"
              },
              {
                "properties": {
                  "app_secret": {
                    "description": "A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics",
                    "type": "string"
                  },
                  "azure_subscription": {
                    "properties": {
                      "is_billable": {
                        "description": "If the subscription can be used for billing",
                        "type": "boolean"
                      },
                      "is_billing": {
                        "description": "If the subscription is used for billing",
                        "type": "boolean"
                      },
                      "is_microsoft_internal": {
                        "description": "If the subscription is internal Microsoft subscription",
                        "type": "boolean"
                      },
                      "subscription_id": {
                        "description": "The azure subscription id",
                        "format": "uuid",
                        "type": "string"
                      },
                      "subscription_name": {
                        "description": "The name of the azure subscription",
                        "type": "string"
                      },
                      "tenant_id": {
                        "description": "The tenant id of the azure subscription belongs to",
                        "format": "uuid",
                        "type": "string"
                      }
                    },
                    "required": [
                      "subscription_id",
                      "tenant_id",
                      "subscription_name"
                    ],
                    "type": "object"
                  },
                  "created_at": {
                    "description": "The created date of this app",
                    "type": "string"
                  },
                  "member_permissions": {
                    "description": "The permissions of the calling user",
                    "items": {
                      "enum": [
                        "manager",
                        "developer",
                        "viewer",
                        "tester"
                      ],
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "origin": {
                    "description": "The creation origin of this app",
                    "enum": [
                      "appcenter",
                      "hockeyapp",
                      "codepush"
                    ],
                    "type": "string"
                  },
                  "platform": {
                    "description": "The platform of the app",
                    "enum": [
                      "Java",
                      "Objective-C-Swift",
                      "UWP",
                      "Cordova",
                      "React-Native",
                      "Unity",
                      "Electron",
                      "Xamarin",
                      "WPF",
                      "WinForms",
                      "Unknown",
                      "Custom"
                    ],
                    "type": "string"
                  },
                  "updated_at": {
                    "description": "The last updated date of this app",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            ],
            "required": [
              "app_secret",
              "platform",
              "origin"
            ]
          },
          {
            "properties": {
              "cutover_from_hockeyapp_at": {
                "description": "The cutover date of this app",
                "type": "string"
              },
              "feature_flags": {
                "description": "The feature flags that are enabled for this app",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "repositories": {
                "description": "The repositories associated with this app",
                "items": {
                  "properties": {
                    "repo_provider": {
                      "type": "string"
                    },
                    "repo_url": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "user_permissions": {
                "description": "the permissions for the specified app user",
                "properties": {
                  "permissions": {
                    "items": {
                      "enum": [
                        "manager",
                        "developer",
                        "viewer",
                        "tester"
                      ],
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "user_id": {
                    "format": "uuid",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        ]
      },
      "AppUserPermissionResponse": {
        "properties": {
          "app_id": {
            "description": "The unique id (UUID) of the app",
            "format": "uuid",
            "type": "string"
          },
          "app_origin": {
            "description": "The creation origin of this app",
            "enum": [
              "appcenter",
              "codepush"
            ],
            "type": "string"
          },
          "app_secret": {
            "description": "A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics",
            "type": "string"
          },
          "permissions": {
            "description": "The permissions the user has for the app",
            "items": {
              "enum": [
                "manager",
                "developer",
                "viewer",
                "tester"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "user_email": {
            "description": "The email of the user",
            "type": "string"
          },
          "user_id": {
            "description": "The unique id (UUID) of the user",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "app_id",
          "user_id",
          "user_email",
          "permissions",
          "app_origin",
          "app_secret"
        ],
        "type": "object"
      },
      "AppVersion": {
        "properties": {
          "app_id": {
            "type": "string"
          },
          "app_version": {
            "type": "string"
          },
          "app_version_id": {
            "type": "string"
          },
          "build_number": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          }
        },
        "required": [
          "app_version_id",
          "app_id",
          "display_name",
          "app_version"
        ],
        "type": "object"
      },
      "AppWithTeamPermissionsResponse": {
        "allOf": [
          {
            "allOf": [
              {
                "properties": {
                  "description": {
                    "description": "The description of the app",
                    "type": "string"
                  },
                  "display_name": {
                    "description": "The display name of the app",
                    "type": "string"
                  },
                  "icon_source": {
                    "description": "The string representation of the source of the app's icon",
                    "type": "string"
                  },
                  "icon_url": {
                    "description": "The string representation of the URL pointing to the app's icon",
                    "type": "string"
                  },
                  "id": {
                    "description": "The unique ID (UUID) of the app",
                    "format": "uuid",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the app used in URLs",
                    "type": "string"
                  },
                  "os": {
                    "description": "The OS the app will be running on",
                    "enum": [
                      "Android",
                      "iOS",
                      "macOS",
                      "Tizen",
                      "tvOS",
                      "Windows",
                      "Linux",
                      "Custom"
                    ],
                    "type": "string"
                  },
                  "owner": {
                    "description": "The information about the app's owner",
                    "properties": {
                      "avatar_url": {
                        "description": "The avatar URL of the owner",
                        "type": "string"
                      },
                      "display_name": {
                        "description": "The owner's display name",
                        "type": "string"
                      },
                      "email": {
                        "description": "The owner's email address",
                        "type": "string"
                      },
                      "id": {
                        "description": "The unique id (UUID) of the owner",
                        "format": "uuid",
                        "type": "string"
                      },
                      "name": {
                        "description": "The unique name that used to identify the owner",
                        "type": "string"
                      },
                      "type": {
                        "description": "The owner type. Can either be 'org' or 'user'",
                        "enum": [
                          "org",
                          "user"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "display_name",
                      "name",
                      "type"
                    ],
                    "type": "object"
                  },
                  "release_type": {
                    "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
                    "type": "string"
                  }
                },
                "required": [
                  "id",
                  "display_name",
                  "name",
                  "os",
                  "owner"
                ],
                "type": "object"
              },
              {
                "properties": {
                  "app_secret": {
                    "description": "A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics",
                    "type": "string"
                  },
                  "azure_subscription": {
                    "properties": {
                      "is_billable": {
                        "description": "If the subscription can be used for billing",
                        "type": "boolean"
                      },
                      "is_billing": {
                        "description": "If the subscription is used for billing",
                        "type": "boolean"
                      },
                      "is_microsoft_internal": {
                        "description": "If the subscription is internal Microsoft subscription",
                        "type": "boolean"
                      },
                      "subscription_id": {
                        "description": "The azure subscription id",
                        "format": "uuid",
                        "type": "string"
                      },
                      "subscription_name": {
                        "description": "The name of the azure subscription",
                        "type": "string"
                      },
                      "tenant_id": {
                        "description": "The tenant id of the azure subscription belongs to",
                        "format": "uuid",
                        "type": "string"
                      }
                    },
                    "required": [
                      "subscription_id",
                      "tenant_id",
                      "subscription_name"
                    ],
                    "type": "object"
                  },
                  "created_at": {
                    "description": "The created date of this app",
                    "type": "string"
                  },
                  "member_permissions": {
                    "description": "The permissions of the calling user",
                    "items": {
                      "enum": [
                        "manager",
                        "developer",
                        "viewer",
                        "tester"
                      ],
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "origin": {
                    "description": "The creation origin of this app",
                    "enum": [
                      "appcenter",
                      "hockeyapp",
                      "codepush"
                    ],
                    "type": "string"
                  },
                  "platform": {
                    "description": "The platform of the app",
                    "enum": [
                      "Java",
                      "Objective-C-Swift",
                      "UWP",
                      "Cordova",
                      "React-Native",
                      "Unity",
                      "Electron",
                      "Xamarin",
                      "WPF",
                      "WinForms",
                      "Unknown",
                      "Custom"
                    ],
                    "type": "string"
                  },
                  "updated_at": {
                    "description": "The last updated date of this app",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            ],
            "required": [
              "app_secret",
              "platform",
              "origin"
            ]
          },
          {
            "properties": {
              "team_permissions": {
                "description": "The permissions the team has for the app",
                "items": {
                  "enum": [
                    "manager",
                    "developer",
                    "viewer"
                  ],
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "AppleCertificateDetails": {
        "description": "Apple Certificate Details",
        "properties": {
          "base64Certificate": {
            "description": "The certificate contents in base 64 encoded string",
            "type": "string"
          },
          "password": {
            "description": "The password for the certificate",
            "type": "string"
          }
        },
        "required": [
          "base64Certificate",
          "password"
        ],
        "type": "object"
      },
      "AppleCertificateNonSecretDetails": {
        "description": "Apple Certificate Secret Details",
        "properties": {
          "certificateValidityEndDate": {
            "description": "The date-time till which the certificate is valid",
            "type": "string"
          },
          "certificateValidityStartDate": {
            "description": "The date-time from which the certificate is valid",
            "type": "string"
          },
          "displayName": {
            "description": "The display name (CN) of the certificate",
            "type": "string"
          }
        },
        "required": [
          "displayName",
          "certificateValidityStartDate",
          "certificateValidityEndDate"
        ],
        "type": "object"
      },
      "AppleCertificateNonSecretDetailsResponse": {
        "allOf": [
          {
            "allOf": [
              {
                "description": "SharedConnectionResponse",
                "discriminator": {
                  "propertyName": "serviceType"
                },
                "properties": {
                  "credentialType": {
                    "description": "the type of the credential",
                    "enum": [
                      "credentials",
                      "certificate",
                      "key"
                    ],
                    "type": "string"
                  },
                  "displayName": {
                    "description": "display name of shared connection",
                    "type": "string"
                  },
                  "serviceType": {
                    "description": "service type of shared connection can be apple|gitlab|googleplay|jira",
                    "enum": [
                      "apple",
                      "jira",
                      "googleplay",
                      "gitlab"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "displayName",
                  "serviceType"
                ],
                "type": "object"
              }
            ],
            "description": "Apple connection secrets",
            "discriminator": {
              "propertyName": "credentialType"
            },
            "x-ms-discriminator-value": "apple"
          }
        ],
        "description": "Apple certificate non-secret details",
        "properties": {
          "data": {
            "description": "apple certificate non-secret details",
            "properties": {
              "certificateValidityEndDate": {
                "description": "The date-time till which the certificate is valid",
                "type": "string"
              },
              "certificateValidityStartDate": {
                "description": "The date-time from which the certificate is valid",
                "type": "string"
              },
              "displayName": {
                "description": "The display name (CN) of the certificate",
                "type": "string"
              }
            },
            "required": [
              "displayName",
              "certificateValidityStartDate",
              "certificateValidityEndDate"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object",
        "x-ms-discriminator-value": "certificate"
      },
      "AppleCertificateSecretDetails": {
        "description": "Apple Certificate Secret Details",
        "properties": {
          "base64Certificate": {
            "description": "The certificate contents in base 64 encoded string",
            "type": "string"
          },
          "certificateValidityEndDate": {
            "description": "The date-time till which the certificate is valid",
            "type": "string"
          },
          "certificateValidityStartDate": {
            "description": "The date-time from which the certificate is valid",
            "type": "string"
          },
          "displayName": {
            "description": "The display name (CN) of the certificate",
            "type": "string"
          },
          "password": {
            "description": "The password for the certificate",
            "type": "string"
          }
        },
        "required": [
          "base64Certificate",
          "password",
          "displayName",
          "certificateValidityStartDate",
          "certificateValidityEndDate"
        ],
        "type": "object"
      },
      "AppleCertificateSecretDetailsResponse": {
        "allOf": [
          {
            "description": "SharedConnectionResponse",
            "discriminator": {
              "propertyName": "serviceType"
            },
            "properties": {
              "credentialType": {
                "description": "the type of the credential",
                "enum": [
                  "credentials",
                  "certificate",
                  "key"
                ],
                "type": "string"
              },
              "displayName": {
                "description": "display name of shared connection",
                "type": "string"
              },
              "serviceType": {
                "description": "service type of shared connection can be apple|gitlab|googleplay|jira",
                "enum": [
                  "apple",
                  "jira",
                  "googleplay",
                  "gitlab"
                ],
                "type": "string"
              }
            },
            "required": [
              "displayName",
              "serviceType"
            ],
            "type": "object"
          }
        ],
        "description": "Apple connection secrets",
        "discriminator": {
          "propertyName": "serviceType"
        },
        "properties": {
          "data": {
            "description": "apple certificate secret details.",
            "properties": {
              "base64Certificate": {
                "description": "The certificate contents in base 64 encoded string",
                "type": "string"
              },
              "certificateValidityEndDate": {
                "description": "The date-time till which the certificate is valid",
                "type": "string"
              },
              "certificateValidityStartDate": {
                "description": "The date-time from which the certificate is valid",
                "type": "string"
              },
              "displayName": {
                "description": "The display name (CN) of the certificate",
                "type": "string"
              },
              "password": {
                "description": "The password for the certificate",
                "type": "string"
              }
            },
            "required": [
              "base64Certificate",
              "password",
              "displayName",
              "certificateValidityStartDate",
              "certificateValidityEndDate"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object",
        "x-ms-discriminator-value": "apple"
      },
      "AppleCertificateSecretRequest": {
        "allOf": [
          {
            "allOf": [
              {
                "description": "SharedConnectionRequest",
                "discriminator": {
                  "propertyName": "serviceType"
                },
                "properties": {
                  "credentialType": {
                    "default": "credentials",
                    "description": "credential type of the shared connection. Values can be credentials|certificate",
                    "enum": [
                      "credentials",
                      "certificate",
                      "key"
                    ],
                    "type": "string"
                  },
                  "data": {
                    "description": "shared connection details",
                    "properties": {
                      "password": {
                        "description": "password to connect to shared connection.",
                        "type": "string"
                      },
                      "username": {
                        "description": "username to connect to shared connection.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "displayName": {
                    "description": "display name of shared connection",
                    "type": "string"
                  },
                  "serviceType": {
                    "description": "service type of shared connection can be apple|gitlab|googleplay|jira|applecertificate",
                    "enum": [
                      "apple",
                      "jira",
                      "googleplay",
                      "gitlab"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "serviceType"
                ],
                "type": "object"
              }
            ],
            "description": "Apple connection secrets",
            "discriminator": {
              "propertyName": "credentialType"
            },
            "x-ms-discriminator-value": "apple"
          }
        ],
        "description": "Apple certificate secrets",
        "properties": {
          "data": {
            "description": "apple secret details",
            "properties": {
              "base64Certificate": {
                "description": "The certificate contents in base 64 encoded string",
                "type": "string"
              },
              "password": {
                "description": "The password for the certificate",
                "type": "string"
              }
            },
            "required": [
              "base64Certificate",
              "password"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object",
        "x-ms-discriminator-value": "certificate"
      },
      "AppleConnectionNonSecretResponse": {
        "allOf": [
          {
            "description": "SharedConnectionResponse",
            "discriminator": {
              "propertyName": "serviceType"
            },
            "properties": {
              "credentialType": {
                "description": "the type of the credential",
                "enum": [
                  "credentials",
                  "certificate",
                  "key"
                ],
                "type": "string"
              },
              "displayName": {
                "description": "display name of shared connection",
                "type": "string"
              },
              "serviceType": {
                "description": "service type of shared connection can be apple|gitlab|googleplay|jira",
                "enum": [
                  "apple",
                  "jira",
                  "googleplay",
                  "gitlab"
                ],
                "type": "string"
              }
            },
            "required": [
              "displayName",
              "serviceType"
            ],
            "type": "object"
          }
        ],
        "description": "Apple connection secrets",
        "discriminator": {
          "propertyName": "credentialType"
        },
        "x-ms-discriminator-value": "apple"
      },
      "AppleConnectionSecretRequest": {
        "allOf": [
          {
            "description": "SharedConnectionRequest",
            "discriminator": {
              "propertyName": "serviceType"
            },
            "properties": {
              "credentialType": {
                "default": "credentials",
                "description": "credential type of the shared connection. Values can be credentials|certificate",
                "enum": [
                  "credentials",
                  "certificate",
                  "key"
                ],
                "type": "string"
              },
              "data": {
                "description": "shared connection details",
                "properties": {
                  "password": {
                    "description": "password to connect to shared connection.",
                    "type": "string"
                  },
                  "username": {
                    "description": "username to connect to shared connection.",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "displayName": {
                "description": "display name of shared connection",
                "type": "string"
              },
              "serviceType": {
                "description": "service type of shared connection can be apple|gitlab|googleplay|jira|applecertificate",
                "enum": [
                  "apple",
                  "jira",
                  "googleplay",
                  "gitlab"
                ],
                "type": "string"
              }
            },
            "required": [
              "serviceType"
            ],
            "type": "object"
          }
        ],
        "description": "Apple connection secrets",
        "discriminator": {
          "propertyName": "credentialType"
        },
        "x-ms-discriminator-value": "apple"
      },
      "AppleConnectionSecretResponse": {
        "allOf": [
          {
            "description": "SharedConnectionResponse",
            "discriminator": {
              "propertyName": "serviceType"
            },
            "properties": {
              "credentialType": {
                "description": "the type of the credential",
                "enum": [
                  "credentials",
                  "certificate",
                  "key"
                ],
                "type": "string"
              },
              "displayName": {
                "description": "display name of shared connection",
                "type": "string"
              },
              "serviceType": {
                "description": "service type of shared connection can be apple|gitlab|googleplay|jira",
                "enum": [
                  "apple",
                  "jira",
                  "googleplay",
                  "gitlab"
                ],
                "type": "string"
              }
            },
            "required": [
              "displayName",
              "serviceType"
            ],
            "type": "object"
          }
        ],
        "description": "Apple connection secrets",
        "discriminator": {
          "propertyName": "serviceType"
        },
        "properties": {
          "data": {
            "description": "apple secret details",
            "properties": {
              "username": {
                "description": "username to connect to apple store",
                "type": "string"
              }
            },
            "required": [
              "username"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object",
        "x-ms-discriminator-value": "apple"
      },
      "AppleCredentialNonSecretDetailsResponse": {
        "allOf": [
          {
            "allOf": [
              {
                "description": "SharedConnectionResponse",
                "discriminator": {
                  "propertyName": "serviceType"
                },
                "properties": {
                  "credentialType": {
                    "description": "the type of the credential",
                    "enum": [
                      "credentials",
                      "certificate",
                      "key"
                    ],
                    "type": "string"
                  },
                  "displayName": {
                    "description": "display name of shared connection",
                    "type": "string"
                  },
                  "serviceType": {
                    "description": "service type of shared connection can be apple|gitlab|googleplay|jira",
                    "enum": [
                      "apple",
                      "jira",
                      "googleplay",
                      "gitlab"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "displayName",
                  "serviceType"
                ],
                "type": "object"
              }
            ],
            "description": "Apple connection secrets",
            "discriminator": {
              "propertyName": "credentialType"
            },
            "x-ms-discriminator-value": "apple"
          }
        ],
        "description": "Apple credentials non-secret details",
        "properties": {
          "data": {
            "description": "Apple credentials non-secret data",
            "properties": {
              "username": {
                "description": "username to connect to apple store",
                "type": "string"
              }
            },
            "required": [
              "username"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object",
        "x-ms-discriminator-value": "credentials"
      },
      "AppleCredentialsMultifactorSecretRequest": {
        "allOf": [
          {
            "allOf": [
              {
                "description": "SharedConnectionRequest",
                "discriminator": {
                  "propertyName": "serviceType"
                },
                "properties": {
                  "credentialType": {
                    "default": "credentials",
                    "description": "credential type of the shared connection. Values can be credentials|certificate",
                    "enum": [
                      "credentials",
                      "certificate",
                      "key"
                    ],
                    "type": "string"
                  },
                  "data": {
                    "description": "shared connection details",
                    "properties": {
                      "password": {
                        "description": "password to connect to shared connection.",
                        "type": "string"
                      },
                      "username": {
                        "description": "username to connect to shared connection.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "displayName": {
                    "description": "display name of shared connection",
                    "type": "string"
                  },
                  "serviceType": {
                    "description": "service type of shared connection can be apple|gitlab|googleplay|jira|applecertificate",
                    "enum": [
                      "apple",
                      "jira",
                      "googleplay",
                      "gitlab"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "serviceType"
                ],
                "type": "object"
              }
            ],
            "description": "Apple connection secrets",
            "discriminator": {
              "propertyName": "credentialType"
            },
            "x-ms-discriminator-value": "apple"
          }
        ],
        "description": "Apple connection secrets",
        "properties": {
          "data": {
            "description": "apple secret details",
            "properties": {
              "appSpecificPassword": {
                "description": "The app specific password required for app publishing for 2FA accounts",
                "type": "string"
              },
              "authCode": {
                "description": "The 6 digit Apple OTP for Multifactor accounts",
                "type": "string"
              },
              "password": {
                "description": "password to connect to apple store.",
                "type": "string"
              },
              "username": {
                "description": "username to connect to apple store.",
                "type": "string"
              }
            },
            "required": [
              "username",
              "password",
              "authCode"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object",
        "x-ms-discriminator-value": "credentials"
      },
      "AppleCredentialsSecretRequest": {
        "allOf": [
          {
            "allOf": [
              {
                "description": "SharedConnectionRequest",
                "discriminator": {
                  "propertyName": "serviceType"
                },
                "properties": {
                  "credentialType": {
                    "default": "credentials",
                    "description": "credential type of the shared connection. Values can be credentials|certificate",
                    "enum": [
                      "credentials",
                      "certificate",
                      "key"
                    ],
                    "type": "string"
                  },
                  "data": {
                    "description": "shared connection details",
                    "properties": {
                      "password": {
                        "description": "password to connect to shared connection.",
                        "type": "string"
                      },
                      "username": {
                        "description": "username to connect to shared connection.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "displayName": {
                    "description": "display name of shared connection",
                    "type": "string"
                  },
                  "serviceType": {
                    "description": "service type of shared connection can be apple|gitlab|googleplay|jira|applecertificate",
                    "enum": [
                      "apple",
                      "jira",
                      "googleplay",
                      "gitlab"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "serviceType"
                ],
                "type": "object"
              }
            ],
            "description": "Apple connection secrets",
            "discriminator": {
              "propertyName": "credentialType"
            },
            "x-ms-discriminator-value": "apple"
          }
        ],
        "description": "Apple connection secrets",
        "properties": {
          "data": {
            "description": "apple secret details",
            "properties": {
              "authCode": {
                "description": "6 digit auth code",
                "maxLength": 6,
                "minLength": 6,
                "type": "string"
              },
              "password": {
                "description": "password to connect to apple store.",
                "type": "string"
              },
              "username": {
                "description": "username to connect to apple store.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object",
        "x-ms-discriminator-value": "credentials"
      },
      "AppleLoginRequest": {
        "description": "Apple credentials needed to log into the Apple Developer Portal",
        "properties": {
          "cookie": {
            "description": "The 30-day session cookie for multi-factor authentication backed accounts.",
            "type": "string"
          },
          "password": {
            "description": "The password for the Apple Developer account.",
            "type": "string"
          },
          "team_identifier": {
            "description": "Identifier of the team to use when logged in.",
            "type": "string"
          },
          "username": {
            "description": "The username for the Apple Developer account.",
            "type": "string"
          }
        },
        "required": [
          "username",
          "password"
        ],
        "type": "object"
      },
      "AppleLoginResponse": {
        "description": "Indicates if login was successful.",
        "properties": {
          "successful": {
            "description": "True when login was successful.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "AppleMappingRequest": {
        "description": "Apple Mapping Request Type",
        "properties": {
          "apple_id": {
            "description": "ID of the apple application in apple store, takes precedence over bundle_identifier when both are provided",
            "type": "string"
          },
          "bundle_identifier": {
            "description": "Bundle Identifier of the apple package",
            "type": "string"
          },
          "service_connection_id": {
            "description": "Id for the shared service connection. In case of Apple AppStore, this connection will be used to create and connect to the Apple AppStore in Mobile Center.",
            "type": "string"
          },
          "team_identifier": {
            "description": "ID of the Team associated with the app in apple store",
            "type": "string"
          }
        },
        "required": [
          "service_connection_id",
          "team_identifier"
        ],
        "type": "object"
      },
      "AppleMappingResponse": {
        "description": "Apple Mapping Request Type",
        "properties": {
          "app_id": {
            "description": "ID of the apple application in Mobile Center",
            "type": "string"
          },
          "apple_id": {
            "description": "ID of the apple application in apple store",
            "type": "string"
          },
          "service_connection_id": {
            "description": "Id for the shared service connection. In case of Apple AppStore, this connection will be used to create and connect to the Apple AppStore in Mobile Center.",
            "type": "string"
          },
          "team_identifier": {
            "description": "ID of the Team associated with the app in apple store",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AppleMultifactorLoginResponse": {
        "description": "The response of Multifactor login. This is a 30 day session token generated by apple.",
        "properties": {
          "cookie": {
            "description": "The 30-day session Token generated by apple after successfully logging in with Multifactor authentication.",
            "type": "string"
          },
          "expires": {
            "description": "The expiry date of the cookie generated by apple",
            "type": "string"
          },
          "username": {
            "description": "the apple developer account.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AppleMultifactorSecretDetails": {
        "description": "Apple secret details",
        "properties": {
          "appSpecificPassword": {
            "description": "The app specific password required for app publishing for 2FA accounts",
            "type": "string"
          },
          "authCode": {
            "description": "The 6 digit Apple OTP for Multifactor accounts",
            "type": "string"
          },
          "password": {
            "description": "password to connect to apple store.",
            "type": "string"
          },
          "username": {
            "description": "username to connect to apple store.",
            "type": "string"
          }
        },
        "required": [
          "username",
          "password",
          "authCode"
        ],
        "type": "object"
      },
      "AppleMutifactorLoginRequest": {
        "description": "Apple credentials needed to log into the Apple Developer Portal",
        "properties": {
          "authcode": {
            "description": "This is the six digit OTP used for completing the multi-factor authentication",
            "type": "string"
          },
          "username": {
            "description": "The username for the Apple Developer account.",
            "type": "string"
          }
        },
        "required": [
          "username",
          "authcode"
        ],
        "type": "object"
      },
      "AppleSecretDetails": {
        "description": "Apple secret details",
        "properties": {
          "authCode": {
            "description": "6 digit auth code",
            "maxLength": 6,
            "minLength": 6,
            "type": "string"
          },
          "password": {
            "description": "password to connect to apple store.",
            "type": "string"
          },
          "username": {
            "description": "username to connect to apple store.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AppleSecretDetailsResponse": {
        "description": "Apple secret details",
        "properties": {
          "username": {
            "description": "username to connect to apple store",
            "type": "string"
          }
        },
        "required": [
          "username"
        ],
        "type": "object"
      },
      "AppleTestFlightGroupRequest": {
        "description": "Apple details for fetching test flight groups from Apple Developer Portal. pass either apple_id or bundle_identifier to get the test flight groups. if both are passed than apple_id will take preference",
        "properties": {
          "apple_id": {
            "description": "apple_id of the app for which test flight groups need to be fetched.",
            "type": "string"
          },
          "bundle_identifier": {
            "description": "apple_id of the app for which test flight groups need to be fetched.",
            "type": "string"
          },
          "cookie": {
            "description": "The 30-day session cookie for multi-factor authentication backed accounts.",
            "type": "string"
          },
          "password": {
            "description": "The password for the Apple Developer account.",
            "type": "string"
          },
          "service_connection_id": {
            "description": "The service_connection_id of the stored Apple credentials instead of username, password.",
            "type": "string"
          },
          "team_identifier": {
            "description": "Identifier of the team to use when logged in.",
            "type": "string"
          },
          "username": {
            "description": "The username for the Apple Developer account.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AppleTestFlightGroupResponse": {
        "description": "test flight group details for the app.",
        "properties": {
          "active": {
            "description": "true if group is in active state.",
            "type": "boolean"
          },
          "appAdamId": {
            "description": "apple id of the group.",
            "type": "number"
          },
          "id": {
            "description": "id of the group.",
            "type": "string"
          },
          "isInternalGroup": {
            "description": "true if the group is an internal group.",
            "type": "boolean"
          },
          "name": {
            "description": "name of the group.",
            "type": "string"
          },
          "providerId": {
            "description": "provider id of the group.",
            "type": "number"
          }
        },
        "type": "object"
      },
      "AppleTestFlightGroupsResponse": {
        "description": "Apple Test Flight Groups Response Type",
        "properties": {
          "appleId": {
            "description": "apple id of the group.",
            "type": "number"
          },
          "id": {
            "description": "id of the group.",
            "type": "string"
          },
          "name": {
            "description": "name of the group.",
            "type": "string"
          },
          "providerId": {
            "description": "provider id of the group.",
            "type": "number"
          }
        },
        "type": "object"
      },
      "ApplicationStatusRequest": {
        "description": "The information needed to fetch the status of an application",
        "properties": {
          "build_version": {
            "description": "The version of build for which real time status is to be fetched.",
            "type": "string"
          },
          "bundle_identifier": {
            "description": "Bundle Identifier of application in Apple Itunes portal.",
            "type": "string"
          },
          "password": {
            "description": "The password for the Apple Developer account.",
            "type": "string"
          },
          "team_identifier": {
            "description": "Identifier of the team to use when logged in.",
            "type": "string"
          },
          "track_identifier": {
            "description": "Track Identifier for which the status is to be fetched.",
            "type": "string"
          },
          "train_version": {
            "description": "The Train version for which the status is to be fetched.",
            "type": "string"
          },
          "username": {
            "description": "The username for the Apple Developer account.",
            "type": "string"
          }
        },
        "required": [
          "username",
          "password",
          "bundle_identifier",
          "track_identifier"
        ],
        "type": "object"
      },
      "ApplicationStatusResponse": {
        "description": "The status information from Itunes portal",
        "properties": {
          "version": {
            "description": "The version of the application",
            "type": "string"
          },
          "version_type": {
            "description": "The type of version being returned (production/edit/test flight).",
            "type": "string"
          }
        },
        "required": [
          "version_type"
        ],
        "type": "object"
      },
      "ArchIdentifier": {
        "description": "An object containing a UUID for an architecture for an iOS app.",
        "properties": {
          "architecture": {
            "description": "The architecture that the UUID belongs to, i.e. armv7 or arm64.",
            "type": "string"
          },
          "uuid": {
            "description": "The unique identifier.",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "architecture",
          "uuid"
        ],
        "type": "object"
      },
      "AttributesValues": {
        "additionalProperties": {
          "type": "object"
        },
        "description": "Collection of attribute values.",
        "type": "object"
      },
      "Audience": {
        "allOf": [
          {
            "description": "Audience definition.",
            "properties": {
              "definition": {
                "description": "Audience definition in OData format.",
                "type": "string"
              },
              "description": {
                "description": "Audience description.",
                "type": "string"
              },
              "estimated_count": {
                "description": "Estimated audience size.",
                "format": "int64",
                "type": "integer"
              },
              "name": {
                "description": "Audience name.",
                "type": "string"
              },
              "state": {
                "description": "Audience state.",
                "enum": [
                  "Calculating",
                  "Ready",
                  "Disabled"
                ],
                "type": "string",
                "x-ms-enum": {
                  "name": "AudienceProcessingState"
                }
              }
            },
            "type": "object"
          }
        ],
        "description": "Audience with details.",
        "properties": {
          "custom_properties": {
            "additionalProperties": {
              "enum": [
                "string",
                "number",
                "boolean",
                "date_time"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "device_property_type"
              }
            },
            "description": "Custom properties used in the definition.",
            "type": "object"
          },
          "enabled": {
            "default": true,
            "type": "boolean"
          },
          "estimated_total_count": {
            "description": "Estimated total audience size.",
            "format": "int64",
            "type": "integer"
          },
          "timestamp": {
            "description": "Date the audience was last refreshed.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AudienceBlobResult": {
        "description": "Audience definition.",
        "properties": {
          "url": {
            "description": "Location of the audience blob.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AudienceDefinition": {
        "description": "Audience definition.",
        "properties": {
          "custom_properties": {
            "additionalProperties": {
              "enum": [
                "string",
                "number",
                "boolean",
                "date_time"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "device_property_type"
              }
            },
            "description": "Custom properties used in the definition.",
            "type": "object"
          },
          "definition": {
            "description": "Audience definition in OData format.",
            "maxLength": 2000,
            "type": "string"
          },
          "description": {
            "description": "Audience description.",
            "maxLength": 128,
            "type": "string"
          },
          "enabled": {
            "default": true,
            "type": "boolean"
          }
        },
        "required": [
          "definition"
        ],
        "type": "object"
      },
      "AudienceDevicePropertiesListResult": {
        "description": "List of device properties.",
        "properties": {
          "values": {
            "additionalProperties": {
              "description": "Type of the property.",
              "enum": [
                "string",
                "number",
                "boolean",
                "date_time"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "device_property_type"
              }
            },
            "description": "List of device properties.",
            "type": "object"
          }
        },
        "required": [
          "values"
        ],
        "type": "object"
      },
      "AudienceDevicePropertyValuesListResult": {
        "description": "List of device property values.",
        "properties": {
          "values": {
            "description": "List of device property values.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "values"
        ],
        "type": "object"
      },
      "AudienceListResult": {
        "description": "List of audiences.",
        "properties": {
          "nextLink": {
            "type": "string"
          },
          "values": {
            "description": "List of audiences.",
            "items": {
              "description": "Audience definition.",
              "properties": {
                "definition": {
                  "description": "Audience definition in OData format.",
                  "type": "string"
                },
                "description": {
                  "description": "Audience description.",
                  "type": "string"
                },
                "estimated_count": {
                  "description": "Estimated audience size.",
                  "format": "int64",
                  "type": "integer"
                },
                "name": {
                  "description": "Audience name.",
                  "type": "string"
                },
                "state": {
                  "description": "Audience state.",
                  "enum": [
                    "Calculating",
                    "Ready",
                    "Disabled"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "name": "AudienceProcessingState"
                  }
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "values"
        ],
        "type": "object"
      },
      "AudienceQueryDefinition": {
        "description": "Audience Query definition.",
        "properties": {
          "identifiers": {
            "description": "List of identifiers.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "queryType": {
            "description": "Audience Query Type",
            "enum": [
              "broadcast",
              "user_ids",
              "account_ids",
              "install_ids"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": false,
              "name": "audience_query_type"
            }
          }
        },
        "required": [
          "queryType"
        ],
        "type": "object"
      },
      "AudienceSummary": {
        "description": "Audience definition.",
        "properties": {
          "definition": {
            "description": "Audience definition in OData format.",
            "type": "string"
          },
          "description": {
            "description": "Audience description.",
            "type": "string"
          },
          "estimated_count": {
            "description": "Estimated audience size.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "Audience name.",
            "type": "string"
          },
          "state": {
            "description": "Audience state.",
            "enum": [
              "Calculating",
              "Ready",
              "Disabled"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "AudienceProcessingState"
            }
          }
        },
        "type": "object"
      },
      "AudienceTestResult": {
        "description": "Audience test result.",
        "properties": {
          "custom_properties": {
            "additionalProperties": {
              "enum": [
                "string",
                "number",
                "boolean",
                "date_time"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "device_property_type"
              }
            },
            "description": "Custom properties used in the definition.",
            "type": "object"
          },
          "definition": {
            "description": "Audience definition in OData format.",
            "type": "string"
          },
          "estimated_count": {
            "description": "Estimated audience size.",
            "format": "int64",
            "type": "integer"
          },
          "estimated_total_count": {
            "description": "Estimated total audience size.",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "AutoProvisioningConfigRequest": {
        "description": "A request containing information for creating a Auto Provisioning Config.",
        "properties": {
          "allow_auto_provisioning": {
            "description": "When *true* enables auto provisioning",
            "type": "boolean"
          },
          "apple_developer_account_key": {
            "description": "A key to a secret in customer-credential-store. apple_developer_account refers to the user's developer account that is used to log into https://developer.apple.com. Normally the user's email.",
            "type": "string"
          },
          "apple_distribution_certificate_key": {
            "description": "A key to a secret in customer-credential-store. distribution_certificate refers to the customer's certificate (that holds the private key) that will be used to sign the app.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AutoProvisioningConfigResponse": {
        "description": "A response from API containing information for a Auto Provisioning Config.",
        "properties": {
          "allow_auto_provisioning": {
            "description": "When *true* enables auto provisioning",
            "type": "boolean"
          },
          "app_id": {
            "description": "The identifier of the App.",
            "type": "string"
          },
          "apple_developer_account_key": {
            "description": "A key to a secret in customer-credential-store. apple_developer_account refers to the user's developer account that is used to log into https://developer.apple.com. Normally the user's email.",
            "type": "string"
          },
          "apple_distribution_certificate_key": {
            "description": "A key to a secret in customer-credential-store. distribution_certificate refers to the cusomer's certificate (that holds the private key) that will be used to sign the app.",
            "type": "string"
          },
          "destination_id": {
            "description": "The identifier of the destination.",
            "type": "string"
          },
          "id": {
            "description": "The identifier of the config.",
            "type": "number"
          }
        },
        "type": "object"
      },
      "AvailabilityOfDevicesRequest": {
        "description": "Apple credentials needed to log into the Apple Developer Portal and access provisioning profiles",
        "properties": {
          "password": {
            "description": "The password for the Apple Developer account.",
            "type": "string"
          },
          "service_connection_id": {
            "description": "The service_connection_id of the stored Apple credentials instad of username, password.",
            "type": "string"
          },
          "username": {
            "description": "The username for the Apple Developer account.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AvailabilityOfDevicesResponse": {
        "description": "The current device availability (registered, available and maxmimum) for iPhones, iPads, iPods and Watches from Apple Developer Portal",
        "properties": {
          "ipads": {
            "description": "...",
            "properties": {
              "available": {
                "type": "number"
              },
              "maximum": {
                "type": "number"
              },
              "registered": {
                "type": "number"
              }
            },
            "required": [
              "registered",
              "available",
              "maximum"
            ],
            "type": "object"
          },
          "iphones": {
            "description": "...",
            "properties": {
              "available": {
                "type": "number"
              },
              "maximum": {
                "type": "number"
              },
              "registered": {
                "type": "number"
              }
            },
            "required": [
              "registered",
              "available",
              "maximum"
            ],
            "type": "object"
          },
          "ipods": {
            "description": "...",
            "properties": {
              "available": {
                "type": "number"
              },
              "maximum": {
                "type": "number"
              },
              "registered": {
                "type": "number"
              }
            },
            "required": [
              "registered",
              "available",
              "maximum"
            ],
            "type": "object"
          },
          "watches": {
            "description": "...",
            "properties": {
              "available": {
                "type": "number"
              },
              "maximum": {
                "type": "number"
              },
              "registered": {
                "type": "number"
              }
            },
            "required": [
              "registered",
              "available",
              "maximum"
            ],
            "type": "object"
          }
        },
        "required": [
          "iphones",
          "ipads",
          "ipods",
          "watches"
        ],
        "type": "object"
      },
      "AvailableAppBuilds": {
        "properties": {
          "app_builds": {
            "description": "List of available app builds.",
            "items": {
              "description": "App Build name.",
              "format": "string",
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "AvailableVersions": {
        "properties": {
          "total_count": {
            "description": "The full number of versions across all pages.",
            "format": "int64",
            "type": "integer"
          },
          "versions": {
            "description": "List of available versions.",
            "items": {
              "description": "Version name.",
              "format": "string",
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "AvailableVersions_Diagnostics": {
        "properties": {
          "total_count": {
            "description": "The full number of versions across all pages.",
            "format": "int64",
            "type": "integer"
          },
          "versions": {
            "description": "List of available versions.",
            "items": {
              "description": "Version name.",
              "format": "string",
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "AzureSubscriptionAddRequest": {
        "properties": {
          "is_billing": {
            "description": "If the subscription is used for billing",
            "type": "boolean"
          },
          "subscription_id": {
            "description": "The azure subscription id",
            "format": "uuid",
            "type": "string"
          },
          "subscription_name": {
            "description": "The name of the azure subscription",
            "type": "string"
          },
          "tenant_id": {
            "description": "The tenant id of the azure subscription belongs to",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "subscription_id",
          "tenant_id",
          "subscription_name"
        ],
        "type": "object"
      },
      "AzureSubscriptionAddToAppRequest": {
        "properties": {
          "subscription_id": {
            "description": "The azure subscription id",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "subscription_id"
        ],
        "type": "object"
      },
      "AzureSubscriptionPatchRequest": {
        "properties": {
          "is_billing": {
            "description": "If the subscription is used for billing",
            "type": "boolean"
          }
        },
        "required": [
          "is_billing"
        ],
        "type": "object"
      },
      "AzureSubscriptionResponse": {
        "properties": {
          "is_billable": {
            "description": "If the subscription can be used for billing",
            "type": "boolean"
          },
          "is_billing": {
            "description": "If the subscription is used for billing",
            "type": "boolean"
          },
          "is_microsoft_internal": {
            "description": "If the subscription is internal Microsoft subscription",
            "type": "boolean"
          },
          "subscription_id": {
            "description": "The azure subscription id",
            "format": "uuid",
            "type": "string"
          },
          "subscription_name": {
            "description": "The name of the azure subscription",
            "type": "string"
          },
          "tenant_id": {
            "description": "The tenant id of the azure subscription belongs to",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "subscription_id",
          "tenant_id",
          "subscription_name"
        ],
        "type": "object"
      },
      "AzureSubscriptionUpdateBillableRequest": {
        "properties": {
          "is_billable": {
            "description": "Billable status of the subscription",
            "type": "boolean"
          }
        },
        "required": [
          "is_billable"
        ],
        "type": "object"
      },
      "BasicAppResponse": {
        "properties": {
          "description": {
            "description": "The description of the app",
            "type": "string"
          },
          "display_name": {
            "description": "The display name of the app",
            "type": "string"
          },
          "icon_source": {
            "description": "The string representation of the source of the app's icon",
            "type": "string"
          },
          "icon_url": {
            "description": "The string representation of the URL pointing to the app's icon",
            "type": "string"
          },
          "id": {
            "description": "The unique ID (UUID) of the app",
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "description": "The name of the app used in URLs",
            "type": "string"
          },
          "os": {
            "description": "The OS the app will be running on",
            "enum": [
              "Android",
              "iOS",
              "macOS",
              "Tizen",
              "tvOS",
              "Windows",
              "Linux",
              "Custom"
            ],
            "type": "string"
          },
          "owner": {
            "description": "The information about the app's owner",
            "properties": {
              "avatar_url": {
                "description": "The avatar URL of the owner",
                "type": "string"
              },
              "display_name": {
                "description": "The owner's display name",
                "type": "string"
              },
              "email": {
                "description": "The owner's email address",
                "type": "string"
              },
              "id": {
                "description": "The unique id (UUID) of the owner",
                "format": "uuid",
                "type": "string"
              },
              "name": {
                "description": "The unique name that used to identify the owner",
                "type": "string"
              },
              "type": {
                "description": "The owner type. Can either be 'org' or 'user'",
                "enum": [
                  "org",
                  "user"
                ],
                "type": "string"
              }
            },
            "required": [
              "id",
              "display_name",
              "name",
              "type"
            ],
            "type": "object"
          },
          "release_type": {
            "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
            "type": "string"
          }
        },
        "required": [
          "id",
          "display_name",
          "name",
          "os",
          "owner"
        ],
        "type": "object"
      },
      "BasicReleaseDetailsResponse": {
        "description": "Basic information on a release",
        "properties": {
          "build": {
            "description": "Build information for the release\n",
            "properties": {
              "branch_name": {
                "description": "The branch name of the build producing the release",
                "type": "string"
              },
              "commit_hash": {
                "description": "The commit hash of the build producing the release",
                "type": "string"
              },
              "commit_message": {
                "description": "The commit message of the build producing the release",
                "type": "string"
              }
            },
            "type": "object"
          },
          "destination_type": {
            "description": "OBSOLETE. Will be removed in next version. The destination type.<br>\n<b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br>\n<b>store</b>: The release distributed to external stores and distribution_stores details will be returned. <br>\n",
            "enum": [
              "group",
              "store",
              "tester"
            ],
            "type": "string"
          },
          "destinations": {
            "description": "A list of distribution groups or stores.",
            "items": {
              "allOf": [
                {
                  "allOf": [
                    {
                      "properties": {
                        "id": {
                          "description": "ID identifying a unique distribution group.",
                          "type": "string"
                        },
                        "name": {
                          "description": "A name identifying a unique distribution group.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "id"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "is_latest": {
                          "description": "Is the containing release the latest one in this distribution group.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    }
                  ]
                },
                {
                  "allOf": [
                    {
                      "properties": {
                        "id": {
                          "description": "ID identifying a unique distribution store.",
                          "type": "string"
                        },
                        "name": {
                          "description": "A name identifying a unique distribution store.",
                          "type": "string"
                        },
                        "publishing_status": {
                          "description": "publishing status of the release in the store.",
                          "type": "string"
                        },
                        "type": {
                          "description": "type of the distribution store currently stores type can be intune, googleplay or windows.",
                          "enum": [
                            "intune",
                            "googleplay",
                            "apple",
                            "none"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "id"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "is_latest": {
                          "description": "Is the containing release the latest one in this distribution store.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    }
                  ]
                },
                {
                  "description": "A unique identifier for a destination. A destination can be identified by an ID (guid) or by a name. DestinationId encapsulates both options. A destination can be either a distribution group or a store.",
                  "properties": {
                    "id": {
                      "description": "Id of a distribution group / store. The release will be associated with this distribution group / store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of a distribution group / distribution store. The release will be associated with this distribution group or store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                {
                  "properties": {
                    "destination_type": {
                      "description": "Destination can be either store or group.",
                      "enum": [
                        "group",
                        "store",
                        "tester"
                      ],
                      "type": "string"
                    },
                    "display_name": {
                      "description": "Display name for the group or tester",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              ]
            },
            "type": "array"
          },
          "distribution_groups": {
            "description": "OBSOLETE. Will be removed in next version. A list of distribution groups that are associated with this release.",
            "items": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "description": "ID identifying a unique distribution group.",
                      "type": "string"
                    },
                    "name": {
                      "description": "A name identifying a unique distribution group.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ],
                  "type": "object"
                },
                {
                  "properties": {
                    "is_latest": {
                      "description": "Is the containing release the latest one in this distribution group.",
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              ]
            },
            "type": "array"
          },
          "distribution_stores": {
            "description": "OBSOLETE. Will be removed in next version. A list of distribution stores that are associated with this release.",
            "items": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "description": "ID identifying a unique distribution store.",
                      "type": "string"
                    },
                    "name": {
                      "description": "A name identifying a unique distribution store.",
                      "type": "string"
                    },
                    "publishing_status": {
                      "description": "publishing status of the release in the store.",
                      "type": "string"
                    },
                    "type": {
                      "description": "type of the distribution store currently stores type can be intune, googleplay or windows.",
                      "enum": [
                        "intune",
                        "googleplay",
                        "apple",
                        "none"
                      ],
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ],
                  "type": "object"
                },
                {
                  "properties": {
                    "is_latest": {
                      "description": "Is the containing release the latest one in this distribution store.",
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              ]
            },
            "type": "array"
          },
          "enabled": {
            "description": "This value determines the whether a release currently is enabled or disabled.",
            "type": "boolean"
          },
          "file_extension": {
            "description": "The file extension of the main (user-uploaded) package file.",
            "type": "string"
          },
          "id": {
            "description": "ID identifying this unique release.",
            "type": "integer"
          },
          "is_external_build": {
            "description": "This value determines if a release is external or not.",
            "type": "boolean"
          },
          "origin": {
            "description": "The release's origin",
            "enum": [
              "hockeyapp",
              "appcenter"
            ],
            "type": "string"
          },
          "short_version": {
            "description": "The release's short version.<br>\nFor iOS: CFBundleShortVersionString from info.plist.<br>\nFor Android: android:versionName from AppManifest.xml.\n",
            "type": "string"
          },
          "uploaded_at": {
            "description": "UTC time in ISO 8601 format of the uploaded time.",
            "type": "string"
          },
          "version": {
            "description": "The release's version.<br>\nFor iOS: CFBundleVersion from info.plist.<br>\nFor Android: android:versionCode from AppManifest.xml.\n",
            "type": "string"
          }
        },
        "required": [
          "id",
          "version",
          "enabled",
          "uploaded_at",
          "short_version"
        ],
        "type": "object"
      },
      "BillingError": {
        "description": "Error",
        "properties": {
          "error": {
            "properties": {
              "code": {
                "description": "The status code return by the API. It can be 400 or 403 or 500.",
                "enum": [
                  400,
                  403,
                  500
                ],
                "type": "integer"
              },
              "message": {
                "description": "The reason for the request failed",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "BillingInformationPlans": {
        "description": "Billing Plans section in the Billing Information",
        "properties": {
          "buildService": {
            "description": "Billing Plans for a single service",
            "properties": {
              "canSelectTrialPlan": {
                "description": "Can customer select trial plan for that service (if it exists)?",
                "type": "boolean"
              },
              "currentBillingPeriod": {
                "description": "Billing plans for a given period",
                "properties": {
                  "byAccount": {
                    "description": "Selection of a billing plan",
                    "properties": {
                      "count": {
                        "description": "Number of instances of the billing plan.",
                        "type": "integer"
                      },
                      "plan": {
                        "description": "Billing Plan",
                        "properties": {
                          "attributes": {
                            "additionalProperties": {
                              "type": "object"
                            },
                            "description": "Collection of attribute values.",
                            "type": "object"
                          },
                          "id": {
                            "description": "The Billing Plan ID",
                            "type": "string"
                          },
                          "limits": {
                            "additionalProperties": {
                              "type": "number"
                            },
                            "description": "A collection of named numeric values",
                            "type": "object"
                          },
                          "parentId": {
                            "type": "string"
                          },
                          "paymentSource": {
                            "description": "Service that receives payments for this billing plan.",
                            "enum": [
                              "None",
                              "AppCenter",
                              "GitHub",
                              "Xtc"
                            ],
                            "type": "string"
                          },
                          "price": {
                            "description": "Price of the Billing Plan",
                            "type": "number"
                          },
                          "service": {
                            "description": "Name of the service that the plan applies to.",
                            "enum": [
                              "Build",
                              "Test"
                            ],
                            "type": "string"
                          },
                          "version": {
                            "description": "Version of the Billing Plan schema",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "endTime": {
                    "description": "Exclusive end of the period.",
                    "format": "dateTime",
                    "type": "string"
                  },
                  "startTime": {
                    "description": "Inclusive start of the period",
                    "format": "dateTime",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "lastTrialPlanExpirationTime": {
                "description": "Expiration time of the last selected trial plan. Will be null if trial plan was not used.",
                "format": "dateTime",
                "type": "string"
              }
            },
            "type": "object"
          },
          "testService": {
            "description": "Billing Plans for a single service",
            "properties": {
              "canSelectTrialPlan": {
                "description": "Can customer select trial plan for that service (if it exists)?",
                "type": "boolean"
              },
              "currentBillingPeriod": {
                "description": "Billing plans for a given period",
                "properties": {
                  "byAccount": {
                    "description": "Selection of a billing plan",
                    "properties": {
                      "count": {
                        "description": "Number of instances of the billing plan.",
                        "type": "integer"
                      },
                      "plan": {
                        "description": "Billing Plan",
                        "properties": {
                          "attributes": {
                            "additionalProperties": {
                              "type": "object"
                            },
                            "description": "Collection of attribute values.",
                            "type": "object"
                          },
                          "id": {
                            "description": "The Billing Plan ID",
                            "type": "string"
                          },
                          "limits": {
                            "additionalProperties": {
                              "type": "number"
                            },
                            "description": "A collection of named numeric values",
                            "type": "object"
                          },
                          "parentId": {
                            "type": "string"
                          },
                          "paymentSource": {
                            "description": "Service that receives payments for this billing plan.",
                            "enum": [
                              "None",
                              "AppCenter",
                              "GitHub",
                              "Xtc"
                            ],
                            "type": "string"
                          },
                          "price": {
                            "description": "Price of the Billing Plan",
                            "type": "number"
                          },
                          "service": {
                            "description": "Name of the service that the plan applies to.",
                            "enum": [
                              "Build",
                              "Test"
                            ],
                            "type": "string"
                          },
                          "version": {
                            "description": "Version of the Billing Plan schema",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "endTime": {
                    "description": "Exclusive end of the period.",
                    "format": "dateTime",
                    "type": "string"
                  },
                  "startTime": {
                    "description": "Inclusive start of the period",
                    "format": "dateTime",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "lastTrialPlanExpirationTime": {
                "description": "Expiration time of the last selected trial plan. Will be null if trial plan was not used.",
                "format": "dateTime",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "BillingInformationSearchResults": {
        "description": "The results of a Billing Information search",
        "items": {
          "properties": {
            "accountId": {
              "description": "The Account ID",
              "format": "string",
              "type": "string"
            },
            "accountName": {
              "description": "The Account Name",
              "format": "string",
              "type": "string"
            },
            "billingInternalAccountId": {
              "description": "The Billing Internal Account ID",
              "format": "string",
              "type": "string"
            },
            "buildPlan": {
              "description": "The ID of the Build Billing Plan",
              "format": "string",
              "type": "string"
            },
            "testPlan": {
              "description": "The ID of the Test Billing Plan",
              "format": "string",
              "type": "string"
            }
          },
          "type": "object"
        },
        "type": "array"
      },
      "BillingPeriod": {
        "description": "Billing plans for a given period",
        "properties": {
          "byAccount": {
            "description": "Selection of a billing plan",
            "properties": {
              "count": {
                "description": "Number of instances of the billing plan.",
                "type": "integer"
              },
              "plan": {
                "description": "Billing Plan",
                "properties": {
                  "attributes": {
                    "additionalProperties": {
                      "type": "object"
                    },
                    "description": "Collection of attribute values.",
                    "type": "object"
                  },
                  "id": {
                    "description": "The Billing Plan ID",
                    "type": "string"
                  },
                  "limits": {
                    "additionalProperties": {
                      "type": "number"
                    },
                    "description": "A collection of named numeric values",
                    "type": "object"
                  },
                  "parentId": {
                    "type": "string"
                  },
                  "paymentSource": {
                    "description": "Service that receives payments for this billing plan.",
                    "enum": [
                      "None",
                      "AppCenter",
                      "GitHub",
                      "Xtc"
                    ],
                    "type": "string"
                  },
                  "price": {
                    "description": "Price of the Billing Plan",
                    "type": "number"
                  },
                  "service": {
                    "description": "Name of the service that the plan applies to.",
                    "enum": [
                      "Build",
                      "Test"
                    ],
                    "type": "string"
                  },
                  "version": {
                    "description": "Version of the Billing Plan schema",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "endTime": {
            "description": "Exclusive end of the period.",
            "format": "dateTime",
            "type": "string"
          },
          "startTime": {
            "description": "Inclusive start of the period",
            "format": "dateTime",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BillingPlan": {
        "description": "Billing Plan",
        "properties": {
          "attributes": {
            "additionalProperties": {
              "type": "object"
            },
            "description": "Collection of attribute values.",
            "type": "object"
          },
          "id": {
            "description": "The Billing Plan ID",
            "type": "string"
          },
          "limits": {
            "additionalProperties": {
              "type": "number"
            },
            "description": "A collection of named numeric values",
            "type": "object"
          },
          "parentId": {
            "type": "string"
          },
          "paymentSource": {
            "description": "Service that receives payments for this billing plan.",
            "enum": [
              "None",
              "AppCenter",
              "GitHub",
              "Xtc"
            ],
            "type": "string"
          },
          "price": {
            "description": "Price of the Billing Plan",
            "type": "number"
          },
          "service": {
            "description": "Name of the service that the plan applies to.",
            "enum": [
              "Build",
              "Test"
            ],
            "type": "string"
          },
          "version": {
            "description": "Version of the Billing Plan schema",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BillingPlanSelection": {
        "description": "Selection of a billing plan",
        "properties": {
          "count": {
            "description": "Number of instances of the billing plan.",
            "type": "integer"
          },
          "plan": {
            "description": "Billing Plan",
            "properties": {
              "attributes": {
                "additionalProperties": {
                  "type": "object"
                },
                "description": "Collection of attribute values.",
                "type": "object"
              },
              "id": {
                "description": "The Billing Plan ID",
                "type": "string"
              },
              "limits": {
                "additionalProperties": {
                  "type": "number"
                },
                "description": "A collection of named numeric values",
                "type": "object"
              },
              "parentId": {
                "type": "string"
              },
              "paymentSource": {
                "description": "Service that receives payments for this billing plan.",
                "enum": [
                  "None",
                  "AppCenter",
                  "GitHub",
                  "Xtc"
                ],
                "type": "string"
              },
              "price": {
                "description": "Price of the Billing Plan",
                "type": "number"
              },
              "service": {
                "description": "Name of the service that the plan applies to.",
                "enum": [
                  "Build",
                  "Test"
                ],
                "type": "string"
              },
              "version": {
                "description": "Version of the Billing Plan schema",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "BillingPlansChangeTypeResponse": {
        "description": "Responses for requests that detect billing plans change type",
        "properties": {
          "result": {
            "enum": [
              "NoChange",
              "Downgrade",
              "Upgrade"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "BillingPlansSelection": {
        "description": "Selection of a billing plan for one or more services",
        "properties": {
          "buildService": {
            "description": "Selection of a billing plan",
            "properties": {
              "count": {
                "description": "Number of instances of the billing plan.",
                "type": "integer"
              },
              "plan": {
                "description": "Billing Plan",
                "properties": {
                  "attributes": {
                    "additionalProperties": {
                      "type": "object"
                    },
                    "description": "Collection of attribute values.",
                    "type": "object"
                  },
                  "id": {
                    "description": "The Billing Plan ID",
                    "type": "string"
                  },
                  "limits": {
                    "additionalProperties": {
                      "type": "number"
                    },
                    "description": "A collection of named numeric values",
                    "type": "object"
                  },
                  "parentId": {
                    "type": "string"
                  },
                  "paymentSource": {
                    "description": "Service that receives payments for this billing plan.",
                    "enum": [
                      "None",
                      "AppCenter",
                      "GitHub",
                      "Xtc"
                    ],
                    "type": "string"
                  },
                  "price": {
                    "description": "Price of the Billing Plan",
                    "type": "number"
                  },
                  "service": {
                    "description": "Name of the service that the plan applies to.",
                    "enum": [
                      "Build",
                      "Test"
                    ],
                    "type": "string"
                  },
                  "version": {
                    "description": "Version of the Billing Plan schema",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "testService": {
            "description": "Selection of a billing plan",
            "properties": {
              "count": {
                "description": "Number of instances of the billing plan.",
                "type": "integer"
              },
              "plan": {
                "description": "Billing Plan",
                "properties": {
                  "attributes": {
                    "additionalProperties": {
                      "type": "object"
                    },
                    "description": "Collection of attribute values.",
                    "type": "object"
                  },
                  "id": {
                    "description": "The Billing Plan ID",
                    "type": "string"
                  },
                  "limits": {
                    "additionalProperties": {
                      "type": "number"
                    },
                    "description": "A collection of named numeric values",
                    "type": "object"
                  },
                  "parentId": {
                    "type": "string"
                  },
                  "paymentSource": {
                    "description": "Service that receives payments for this billing plan.",
                    "enum": [
                      "None",
                      "AppCenter",
                      "GitHub",
                      "Xtc"
                    ],
                    "type": "string"
                  },
                  "price": {
                    "description": "Price of the Billing Plan",
                    "type": "number"
                  },
                  "service": {
                    "description": "Name of the service that the plan applies to.",
                    "enum": [
                      "Build",
                      "Test"
                    ],
                    "type": "string"
                  },
                  "version": {
                    "description": "Version of the Billing Plan schema",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "BillingResourceUsage": {
        "description": "Usage section in the Billing Information",
        "properties": {
          "buildService": {
            "description": "Resource usage for a single Mobile Center service",
            "properties": {
              "currentUsagePeriod": {
                "description": "Usage for a single period",
                "properties": {
                  "byAccount": {
                    "additionalProperties": {
                      "type": "number"
                    },
                    "description": "A collection of named numeric values",
                    "type": "object"
                  },
                  "byApp": {
                    "additionalProperties": {
                      "additionalProperties": {
                        "type": "number"
                      },
                      "description": "A collection of named numeric values",
                      "type": "object"
                    },
                    "description": "A collection of  named numeric values grouped by app",
                    "type": "object"
                  },
                  "endTime": {
                    "description": "Exclusive end time of the usage period.",
                    "format": "dateTime",
                    "type": "string"
                  },
                  "startTime": {
                    "description": "Inclusive start time of the usage period",
                    "format": "dateTime",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "testService": {
            "description": "Resource usage for a single Mobile Center service",
            "properties": {
              "currentUsagePeriod": {
                "description": "Usage for a single period",
                "properties": {
                  "byAccount": {
                    "additionalProperties": {
                      "type": "number"
                    },
                    "description": "A collection of named numeric values",
                    "type": "object"
                  },
                  "byApp": {
                    "additionalProperties": {
                      "additionalProperties": {
                        "type": "number"
                      },
                      "description": "A collection of named numeric values",
                      "type": "object"
                    },
                    "description": "A collection of  named numeric values grouped by app",
                    "type": "object"
                  },
                  "endTime": {
                    "description": "Exclusive end time of the usage period.",
                    "format": "dateTime",
                    "type": "string"
                  },
                  "startTime": {
                    "description": "Inclusive start time of the usage period",
                    "format": "dateTime",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "BlobInfo": {
        "properties": {
          "size": {
            "type": "number"
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "size",
          "url"
        ],
        "type": "object"
      },
      "BooleanProperty": {
        "allOf": [
          {
            "discriminator": {
              "propertyName": "type"
            },
            "properties": {
              "name": {
                "maxLength": 128,
                "pattern": "^[a-zA-Z][a-zA-Z0-9\\-_]*$",
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            },
            "required": [
              "type",
              "name"
            ],
            "type": "object"
          }
        ],
        "description": "Boolean property.",
        "properties": {
          "value": {
            "description": "Boolean property value.",
            "type": "boolean"
          }
        },
        "required": [
          "value"
        ],
        "type": "object",
        "x-ms-discriminator-value": "boolean"
      },
      "BooleanProperty_Diagnostics": {
        "allOf": [
          {
            "discriminator": {
              "propertyName": "type"
            },
            "properties": {
              "name": {
                "maxLength": 128,
                "pattern": "^[a-zA-Z][a-zA-Z0-9\\-_]*$",
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            },
            "required": [
              "type",
              "name"
            ],
            "type": "object"
          }
        ],
        "description": "Boolean property.",
        "properties": {
          "value": {
            "description": "Boolean property value.",
            "type": "boolean"
          }
        },
        "required": [
          "value"
        ],
        "type": "object",
        "x-ms-discriminator-value": "boolean"
      },
      "Branch": {
        "properties": {
          "commit": {
            "properties": {
              "sha": {
                "description": "The commit SHA",
                "type": "string"
              },
              "url": {
                "description": "The URL to the commit",
                "type": "string"
              }
            },
            "type": "object"
          },
          "name": {
            "description": "The branch name",
            "type": "string"
          }
        },
        "required": [
          "name",
          "commit"
        ],
        "type": "object"
      },
      "BranchConfiguration": {
        "additionalProperties": {
          "description": "The branch build core properties",
          "properties": {
            "branch": {
              "properties": {
                "commit": {
                  "properties": {
                    "sha": {
                      "description": "The commit SHA",
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL to the commit",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "name": {
                  "description": "The branch name",
                  "type": "string"
                }
              },
              "required": [
                "name",
                "commit"
              ],
              "type": "object"
            },
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "description": "The branch build configuration",
        "properties": {
          "artifactVersioning": {
            "description": "The versioning configuration for artifacts built for this branch",
            "properties": {
              "buildNumberFormat": {
                "enum": [
                  "buildId",
                  "timestamp"
                ],
                "type": "string"
              }
            },
            "type": "object"
          },
          "badgeIsEnabled": {
            "type": "boolean"
          },
          "cloneFromBranch": {
            "description": "A configured branch name to clone from. If provided, all other parameters will be ignored. Only supported in POST requests.",
            "type": "string"
          },
          "signed": {
            "type": "boolean"
          },
          "testsEnabled": {
            "type": "boolean"
          },
          "toolsets": {
            "description": "The branch build configuration for each toolset",
            "properties": {
              "android": {
                "description": "Build configuration for Android projects",
                "properties": {
                  "automaticSigning": {
                    "description": "Whether to apply automatic signing or not",
                    "type": "boolean"
                  },
                  "buildVariant": {
                    "description": "The Android build variant to build",
                    "example": "release",
                    "type": "string"
                  },
                  "gradleWrapperPath": {
                    "description": "Path to the Gradle wrapper script",
                    "example": "android/gradlew",
                    "type": "string"
                  },
                  "isRoot": {
                    "description": "Whether it is the root module or not",
                    "type": "boolean"
                  },
                  "keyAlias": {
                    "description": "The key alias",
                    "type": "string"
                  },
                  "keyPassword": {
                    "description": "The key password",
                    "type": "string"
                  },
                  "keystoreEncoded": {
                    "description": "The keystore encoded value",
                    "type": "string"
                  },
                  "keystoreFilename": {
                    "description": "The name of the keystore file",
                    "type": "string"
                  },
                  "keystorePassword": {
                    "description": "The password of the keystore",
                    "type": "string"
                  },
                  "module": {
                    "description": "The Gradle module to build",
                    "example": "app",
                    "type": "string"
                  },
                  "runLint": {
                    "description": "Whether to run lint checks during the build (default)",
                    "type": "boolean"
                  },
                  "runTests": {
                    "default": true,
                    "description": "Whether to run unit tests during the build (default)",
                    "type": "boolean"
                  }
                },
                "type": "object"
              },
              "javascript": {
                "description": "Build configuration when React Native, or other JavaScript tech, is part of the build steps",
                "properties": {
                  "packageJsonPath": {
                    "description": "Path to package.json file for the main project, e.g. \"package.json\" or \"myapp/package.json\"",
                    "type": "string"
                  },
                  "reactNativeVersion": {
                    "description": "Version of React Native from package.json files",
                    "type": "string"
                  },
                  "runTests": {
                    "description": "Whether to run Jest unit tests, via npm test, during the build",
                    "type": "boolean"
                  }
                },
                "type": "object"
              },
              "xamarin": {
                "description": "Build configuration for Xamarin projects",
                "properties": {
                  "args": {
                    "type": "string"
                  },
                  "configuration": {
                    "type": "string"
                  },
                  "isSimBuild": {
                    "type": "boolean"
                  },
                  "monoVersion": {
                    "type": "string"
                  },
                  "p12File": {
                    "type": "string"
                  },
                  "p12Pwd": {
                    "type": "string"
                  },
                  "provProfile": {
                    "type": "string"
                  },
                  "sdkBundle": {
                    "type": "string"
                  },
                  "slnPath": {
                    "type": "string"
                  },
                  "symlink": {
                    "description": "Symlink of the SDK Bundle and Mono installation.\nThe build will use the associated Mono bundled with related Xamarin SDK. If both symlink and monoVersion or sdkBundle are passed, the symlink is taking precedence. If non-existing symlink is passed, the current stable Mono version will be configured for building.\n",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "xcode": {
                "description": "Build configuration when Xcode is part of the build steps",
                "properties": {
                  "appExtensionProvisioningProfileFiles": {
                    "items": {
                      "description": "Provisioning profile fetch and store information",
                      "properties": {
                        "fileId": {
                          "description": "File id from secure file storage",
                          "type": "string"
                        },
                        "fileName": {
                          "description": "Name of uploaded provisioning profile",
                          "type": "string"
                        },
                        "targetBundleIdentifier": {
                          "description": "Target the provisioning profile is used to sign",
                          "type": "string"
                        },
                        "uploadId": {
                          "description": "Upload id to App Center File Upload Store",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "archiveConfiguration": {
                    "description": "The build configuration of the target to archive",
                    "type": "string"
                  },
                  "automaticSigning": {
                    "type": "boolean"
                  },
                  "cartfilePath": {
                    "description": "Path to Carthage file, if present",
                    "type": "string"
                  },
                  "certificateEncoded": {
                    "type": "string"
                  },
                  "certificateFileId": {
                    "type": "string"
                  },
                  "certificateFilename": {
                    "type": "string"
                  },
                  "certificatePassword": {
                    "type": "string"
                  },
                  "certificateUploadId": {
                    "type": "string"
                  },
                  "forceLegacyBuildSystem": {
                    "description": "Setting this to true forces the build to use Xcode legacy build system. Otherwise, the setting from workspace settings is used.\nBy default new build system is used if workspace setting is not committed to the repository. Only used for iOS React Native app, with Xcode 10.\n",
                    "type": "boolean"
                  },
                  "podfilePath": {
                    "description": "Path to CococaPods file, if present",
                    "type": "string"
                  },
                  "projectOrWorkspacePath": {
                    "description": "Xcode project/workspace path",
                    "type": "string"
                  },
                  "provisioningProfileEncoded": {
                    "type": "string"
                  },
                  "provisioningProfileFileId": {
                    "type": "string"
                  },
                  "provisioningProfileFilename": {
                    "type": "string"
                  },
                  "provisioningProfileUploadId": {
                    "type": "string"
                  },
                  "scheme": {
                    "type": "string"
                  },
                  "targetToArchive": {
                    "description": "The target id of the selected scheme to archive",
                    "type": "string"
                  },
                  "teamId": {
                    "type": "string"
                  },
                  "xcodeProjectSha": {
                    "description": "The selected pbxproject hash to the repositroy",
                    "type": "string"
                  },
                  "xcodeVersion": {
                    "description": "Xcode version used to build. Available versions can be found in \"/xcode_versions\" API. Default is latest stable version, at the time when the configuration is set.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "trigger": {
            "enum": [
              "continous",
              "continuous",
              "manual"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "BranchConfigurationArtifactVersioning": {
        "description": "The versioning configuration for artifacts built for this branch",
        "properties": {
          "buildNumberFormat": {
            "enum": [
              "buildId",
              "timestamp"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "BranchConfigurationRevision": {
        "description": "branch configuration revision",
        "properties": {
          "changeType": {
            "type": "string"
          },
          "changedBy": {
            "description": "user who made a change in branch configuration",
            "properties": {
              "displayName": {
                "type": "string"
              },
              "url": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "changedDate": {
            "type": "string"
          },
          "definitionUrl": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "revision": {
            "type": "number"
          }
        },
        "type": "object"
      },
      "BranchConfigurationRevisionAuthor": {
        "description": "user who made a change in branch configuration",
        "properties": {
          "displayName": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "BranchConfigurationRevisions": {
        "description": "list of branch configuration revisions",
        "items": {
          "description": "branch configuration revision",
          "properties": {
            "changeType": {
              "type": "string"
            },
            "changedBy": {
              "description": "user who made a change in branch configuration",
              "properties": {
                "displayName": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "changedDate": {
              "type": "string"
            },
            "definitionUrl": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "revision": {
              "type": "number"
            }
          },
          "type": "object"
        },
        "type": "array"
      },
      "BranchConfigurationToolsets": {
        "description": "The branch build configuration for each toolset",
        "properties": {
          "android": {
            "description": "Build configuration for Android projects",
            "properties": {
              "automaticSigning": {
                "description": "Whether to apply automatic signing or not",
                "type": "boolean"
              },
              "buildVariant": {
                "description": "The Android build variant to build",
                "example": "release",
                "type": "string"
              },
              "gradleWrapperPath": {
                "description": "Path to the Gradle wrapper script",
                "example": "android/gradlew",
                "type": "string"
              },
              "isRoot": {
                "description": "Whether it is the root module or not",
                "type": "boolean"
              },
              "keyAlias": {
                "description": "The key alias",
                "type": "string"
              },
              "keyPassword": {
                "description": "The key password",
                "type": "string"
              },
              "keystoreEncoded": {
                "description": "The keystore encoded value",
                "type": "string"
              },
              "keystoreFilename": {
                "description": "The name of the keystore file",
                "type": "string"
              },
              "keystorePassword": {
                "description": "The password of the keystore",
                "type": "string"
              },
              "module": {
                "description": "The Gradle module to build",
                "example": "app",
                "type": "string"
              },
              "runLint": {
                "description": "Whether to run lint checks during the build (default)",
                "type": "boolean"
              },
              "runTests": {
                "default": true,
                "description": "Whether to run unit tests during the build (default)",
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "javascript": {
            "description": "Build configuration when React Native, or other JavaScript tech, is part of the build steps",
            "properties": {
              "packageJsonPath": {
                "description": "Path to package.json file for the main project, e.g. \"package.json\" or \"myapp/package.json\"",
                "type": "string"
              },
              "reactNativeVersion": {
                "description": "Version of React Native from package.json files",
                "type": "string"
              },
              "runTests": {
                "description": "Whether to run Jest unit tests, via npm test, during the build",
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "xamarin": {
            "description": "Build configuration for Xamarin projects",
            "properties": {
              "args": {
                "type": "string"
              },
              "configuration": {
                "type": "string"
              },
              "isSimBuild": {
                "type": "boolean"
              },
              "monoVersion": {
                "type": "string"
              },
              "p12File": {
                "type": "string"
              },
              "p12Pwd": {
                "type": "string"
              },
              "provProfile": {
                "type": "string"
              },
              "sdkBundle": {
                "type": "string"
              },
              "slnPath": {
                "type": "string"
              },
              "symlink": {
                "description": "Symlink of the SDK Bundle and Mono installation.\nThe build will use the associated Mono bundled with related Xamarin SDK. If both symlink and monoVersion or sdkBundle are passed, the symlink is taking precedence. If non-existing symlink is passed, the current stable Mono version will be configured for building.\n",
                "type": "string"
              }
            },
            "type": "object"
          },
          "xcode": {
            "description": "Build configuration when Xcode is part of the build steps",
            "properties": {
              "appExtensionProvisioningProfileFiles": {
                "items": {
                  "description": "Provisioning profile fetch and store information",
                  "properties": {
                    "fileId": {
                      "description": "File id from secure file storage",
                      "type": "string"
                    },
                    "fileName": {
                      "description": "Name of uploaded provisioning profile",
                      "type": "string"
                    },
                    "targetBundleIdentifier": {
                      "description": "Target the provisioning profile is used to sign",
                      "type": "string"
                    },
                    "uploadId": {
                      "description": "Upload id to App Center File Upload Store",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "archiveConfiguration": {
                "description": "The build configuration of the target to archive",
                "type": "string"
              },
              "automaticSigning": {
                "type": "boolean"
              },
              "cartfilePath": {
                "description": "Path to Carthage file, if present",
                "type": "string"
              },
              "certificateEncoded": {
                "type": "string"
              },
              "certificateFileId": {
                "type": "string"
              },
              "certificateFilename": {
                "type": "string"
              },
              "certificatePassword": {
                "type": "string"
              },
              "certificateUploadId": {
                "type": "string"
              },
              "forceLegacyBuildSystem": {
                "description": "Setting this to true forces the build to use Xcode legacy build system. Otherwise, the setting from workspace settings is used.\nBy default new build system is used if workspace setting is not committed to the repository. Only used for iOS React Native app, with Xcode 10.\n",
                "type": "boolean"
              },
              "podfilePath": {
                "description": "Path to CococaPods file, if present",
                "type": "string"
              },
              "projectOrWorkspacePath": {
                "description": "Xcode project/workspace path",
                "type": "string"
              },
              "provisioningProfileEncoded": {
                "type": "string"
              },
              "provisioningProfileFileId": {
                "type": "string"
              },
              "provisioningProfileFilename": {
                "type": "string"
              },
              "provisioningProfileUploadId": {
                "type": "string"
              },
              "scheme": {
                "type": "string"
              },
              "targetToArchive": {
                "description": "The target id of the selected scheme to archive",
                "type": "string"
              },
              "teamId": {
                "type": "string"
              },
              "xcodeProjectSha": {
                "description": "The selected pbxproject hash to the repositroy",
                "type": "string"
              },
              "xcodeVersion": {
                "description": "Xcode version used to build. Available versions can be found in \"/xcode_versions\" API. Default is latest stable version, at the time when the configuration is set.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "BranchConfigurationWithId": {
        "allOf": [
          {
            "additionalProperties": {
              "description": "The branch build core properties",
              "properties": {
                "branch": {
                  "properties": {
                    "commit": {
                      "properties": {
                        "sha": {
                          "description": "The commit SHA",
                          "type": "string"
                        },
                        "url": {
                          "description": "The URL to the commit",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "name": {
                      "description": "The branch name",
                      "type": "string"
                    }
                  },
                  "required": [
                    "name",
                    "commit"
                  ],
                  "type": "object"
                },
                "enabled": {
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            "description": "The branch build configuration",
            "properties": {
              "artifactVersioning": {
                "description": "The versioning configuration for artifacts built for this branch",
                "properties": {
                  "buildNumberFormat": {
                    "enum": [
                      "buildId",
                      "timestamp"
                    ],
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "badgeIsEnabled": {
                "type": "boolean"
              },
              "cloneFromBranch": {
                "description": "A configured branch name to clone from. If provided, all other parameters will be ignored. Only supported in POST requests.",
                "type": "string"
              },
              "signed": {
                "type": "boolean"
              },
              "testsEnabled": {
                "type": "boolean"
              },
              "toolsets": {
                "description": "The branch build configuration for each toolset",
                "properties": {
                  "android": {
                    "description": "Build configuration for Android projects",
                    "properties": {
                      "automaticSigning": {
                        "description": "Whether to apply automatic signing or not",
                        "type": "boolean"
                      },
                      "buildVariant": {
                        "description": "The Android build variant to build",
                        "example": "release",
                        "type": "string"
                      },
                      "gradleWrapperPath": {
                        "description": "Path to the Gradle wrapper script",
                        "example": "android/gradlew",
                        "type": "string"
                      },
                      "isRoot": {
                        "description": "Whether it is the root module or not",
                        "type": "boolean"
                      },
                      "keyAlias": {
                        "description": "The key alias",
                        "type": "string"
                      },
                      "keyPassword": {
                        "description": "The key password",
                        "type": "string"
                      },
                      "keystoreEncoded": {
                        "description": "The keystore encoded value",
                        "type": "string"
                      },
                      "keystoreFilename": {
                        "description": "The name of the keystore file",
                        "type": "string"
                      },
                      "keystorePassword": {
                        "description": "The password of the keystore",
                        "type": "string"
                      },
                      "module": {
                        "description": "The Gradle module to build",
                        "example": "app",
                        "type": "string"
                      },
                      "runLint": {
                        "description": "Whether to run lint checks during the build (default)",
                        "type": "boolean"
                      },
                      "runTests": {
                        "default": true,
                        "description": "Whether to run unit tests during the build (default)",
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "javascript": {
                    "description": "Build configuration when React Native, or other JavaScript tech, is part of the build steps",
                    "properties": {
                      "packageJsonPath": {
                        "description": "Path to package.json file for the main project, e.g. \"package.json\" or \"myapp/package.json\"",
                        "type": "string"
                      },
                      "reactNativeVersion": {
                        "description": "Version of React Native from package.json files",
                        "type": "string"
                      },
                      "runTests": {
                        "description": "Whether to run Jest unit tests, via npm test, during the build",
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "xamarin": {
                    "description": "Build configuration for Xamarin projects",
                    "properties": {
                      "args": {
                        "type": "string"
                      },
                      "configuration": {
                        "type": "string"
                      },
                      "isSimBuild": {
                        "type": "boolean"
                      },
                      "monoVersion": {
                        "type": "string"
                      },
                      "p12File": {
                        "type": "string"
                      },
                      "p12Pwd": {
                        "type": "string"
                      },
                      "provProfile": {
                        "type": "string"
                      },
                      "sdkBundle": {
                        "type": "string"
                      },
                      "slnPath": {
                        "type": "string"
                      },
                      "symlink": {
                        "description": "Symlink of the SDK Bundle and Mono installation.\nThe build will use the associated Mono bundled with related Xamarin SDK. If both symlink and monoVersion or sdkBundle are passed, the symlink is taking precedence. If non-existing symlink is passed, the current stable Mono version will be configured for building.\n",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "xcode": {
                    "description": "Build configuration when Xcode is part of the build steps",
                    "properties": {
                      "appExtensionProvisioningProfileFiles": {
                        "items": {
                          "description": "Provisioning profile fetch and store information",
                          "properties": {
                            "fileId": {
                              "description": "File id from secure file storage",
                              "type": "string"
                            },
                            "fileName": {
                              "description": "Name of uploaded provisioning profile",
                              "type": "string"
                            },
                            "targetBundleIdentifier": {
                              "description": "Target the provisioning profile is used to sign",
                              "type": "string"
                            },
                            "uploadId": {
                              "description": "Upload id to App Center File Upload Store",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "archiveConfiguration": {
                        "description": "The build configuration of the target to archive",
                        "type": "string"
                      },
                      "automaticSigning": {
                        "type": "boolean"
                      },
                      "cartfilePath": {
                        "description": "Path to Carthage file, if present",
                        "type": "string"
                      },
                      "certificateEncoded": {
                        "type": "string"
                      },
                      "certificateFileId": {
                        "type": "string"
                      },
                      "certificateFilename": {
                        "type": "string"
                      },
                      "certificatePassword": {
                        "type": "string"
                      },
                      "certificateUploadId": {
                        "type": "string"
                      },
                      "forceLegacyBuildSystem": {
                        "description": "Setting this to true forces the build to use Xcode legacy build system. Otherwise, the setting from workspace settings is used.\nBy default new build system is used if workspace setting is not committed to the repository. Only used for iOS React Native app, with Xcode 10.\n",
                        "type": "boolean"
                      },
                      "podfilePath": {
                        "description": "Path to CococaPods file, if present",
                        "type": "string"
                      },
                      "projectOrWorkspacePath": {
                        "description": "Xcode project/workspace path",
                        "type": "string"
                      },
                      "provisioningProfileEncoded": {
                        "type": "string"
                      },
                      "provisioningProfileFileId": {
                        "type": "string"
                      },
                      "provisioningProfileFilename": {
                        "type": "string"
                      },
                      "provisioningProfileUploadId": {
                        "type": "string"
                      },
                      "scheme": {
                        "type": "string"
                      },
                      "targetToArchive": {
                        "description": "The target id of the selected scheme to archive",
                        "type": "string"
                      },
                      "teamId": {
                        "type": "string"
                      },
                      "xcodeProjectSha": {
                        "description": "The selected pbxproject hash to the repositroy",
                        "type": "string"
                      },
                      "xcodeVersion": {
                        "description": "Xcode version used to build. Available versions can be found in \"/xcode_versions\" API. Default is latest stable version, at the time when the configuration is set.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "trigger": {
                "enum": [
                  "continous",
                  "continuous",
                  "manual"
                ],
                "type": "string"
              }
            },
            "type": "object"
          },
          {
            "properties": {
              "id": {
                "type": "integer"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          }
        ]
      },
      "BranchProperties": {
        "description": "The branch build core properties",
        "properties": {
          "branch": {
            "properties": {
              "commit": {
                "properties": {
                  "sha": {
                    "description": "The commit SHA",
                    "type": "string"
                  },
                  "url": {
                    "description": "The URL to the commit",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "name": {
                "description": "The branch name",
                "type": "string"
              }
            },
            "required": [
              "name",
              "commit"
            ],
            "type": "object"
          },
          "enabled": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "BranchStatus": {
        "additionalProperties": {
          "description": "The branch build core properties",
          "properties": {
            "branch": {
              "properties": {
                "commit": {
                  "properties": {
                    "sha": {
                      "description": "The commit SHA",
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL to the commit",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "name": {
                  "description": "The branch name",
                  "type": "string"
                }
              },
              "required": [
                "name",
                "commit"
              ],
              "type": "object"
            },
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "description": "The branch build status",
        "properties": {
          "configured": {
            "type": "boolean"
          },
          "lastBuild": {
            "properties": {
              "buildNumber": {
                "description": "The build number",
                "type": "string"
              },
              "finishTime": {
                "description": "The time the build was finished",
                "format": "dateTime",
                "type": "string"
              },
              "id": {
                "description": "The build ID",
                "exclusiveMinimum": true,
                "minimum": 0,
                "type": "integer"
              },
              "lastChangedDate": {
                "description": "The time the build status was last changed",
                "format": "dateTime",
                "type": "string"
              },
              "queueTime": {
                "description": "The time the build was queued",
                "format": "dateTime",
                "type": "string"
              },
              "result": {
                "description": "The build result",
                "type": "string"
              },
              "sourceBranch": {
                "description": "The source branch name",
                "type": "string"
              },
              "sourceVersion": {
                "description": "The source SHA",
                "type": "string"
              },
              "startTime": {
                "description": "The time the build was started",
                "format": "dateTime",
                "type": "string"
              },
              "status": {
                "description": "The build status",
                "type": "string"
              }
            },
            "required": [
              "id",
              "buildNumber",
              "queueTime",
              "status",
              "result",
              "sourceBranch",
              "sourceVersion"
            ],
            "type": "object"
          }
        },
        "required": [
          "configured"
        ],
        "type": "object"
      },
      "BranchStatusCollection": {
        "description": "A collection of branch status",
        "items": {
          "additionalProperties": {
            "description": "The branch build core properties",
            "properties": {
              "branch": {
                "properties": {
                  "commit": {
                    "properties": {
                      "sha": {
                        "description": "The commit SHA",
                        "type": "string"
                      },
                      "url": {
                        "description": "The URL to the commit",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": {
                    "description": "The branch name",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "commit"
                ],
                "type": "object"
              },
              "enabled": {
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "description": "The branch build status",
          "properties": {
            "configured": {
              "type": "boolean"
            },
            "lastBuild": {
              "properties": {
                "buildNumber": {
                  "description": "The build number",
                  "type": "string"
                },
                "finishTime": {
                  "description": "The time the build was finished",
                  "format": "dateTime",
                  "type": "string"
                },
                "id": {
                  "description": "The build ID",
                  "exclusiveMinimum": true,
                  "minimum": 0,
                  "type": "integer"
                },
                "lastChangedDate": {
                  "description": "The time the build status was last changed",
                  "format": "dateTime",
                  "type": "string"
                },
                "queueTime": {
                  "description": "The time the build was queued",
                  "format": "dateTime",
                  "type": "string"
                },
                "result": {
                  "description": "The build result",
                  "type": "string"
                },
                "sourceBranch": {
                  "description": "The source branch name",
                  "type": "string"
                },
                "sourceVersion": {
                  "description": "The source SHA",
                  "type": "string"
                },
                "startTime": {
                  "description": "The time the build was started",
                  "format": "dateTime",
                  "type": "string"
                },
                "status": {
                  "description": "The build status",
                  "type": "string"
                }
              },
              "required": [
                "id",
                "buildNumber",
                "queueTime",
                "status",
                "result",
                "sourceBranch",
                "sourceVersion"
              ],
              "type": "object"
            }
          },
          "required": [
            "configured"
          ],
          "type": "object"
        },
        "type": "array"
      },
      "BranchYamlConfiguration": {
        "description": "The build configuration in Azure pipeline YAML format",
        "properties": {
          "yaml": {
            "description": "Azure Pipelines YAML file",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BugTrackerIssueResult": {
        "description": "Object returned in response to getting a bug tracker issue related to a crash group id",
        "properties": {
          "bug_tracker_type": {
            "enum": [
              "github",
              "vsts",
              "jira"
            ],
            "type": "string"
          },
          "event_type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "mobile_center_id": {
            "type": "string"
          },
          "repo_name": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "BugTrackerIssuesResult": {
        "description": "Returns a list of all issues associated with a repo",
        "properties": {
          "issues": {
            "items": {
              "description": "Object returned in response to getting a bug tracker issue related to a crash group id",
              "properties": {
                "bug_tracker_type": {
                  "enum": [
                    "github",
                    "vsts",
                    "jira"
                  ],
                  "type": "string"
                },
                "event_type": {
                  "type": "string"
                },
                "id": {
                  "type": "string"
                },
                "mobile_center_id": {
                  "type": "string"
                },
                "repo_name": {
                  "type": "string"
                },
                "title": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "BugTrackerStateResult": {
        "description": "Object returned in response to getting or updating the state of a bugtracker",
        "properties": {
          "state": {
            "description": "bugtracker state",
            "enum": [
              "enabled",
              "disabled",
              "unauthorized"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "BugTrackerTokenId": {
        "description": "Contains the token ID for a bug tracker",
        "properties": {
          "token_id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Build": {
        "properties": {
          "buildNumber": {
            "description": "The build number",
            "type": "string"
          },
          "finishTime": {
            "description": "The time the build was finished",
            "format": "dateTime",
            "type": "string"
          },
          "id": {
            "description": "The build ID",
            "exclusiveMinimum": true,
            "minimum": 0,
            "type": "integer"
          },
          "lastChangedDate": {
            "description": "The time the build status was last changed",
            "format": "dateTime",
            "type": "string"
          },
          "queueTime": {
            "description": "The time the build was queued",
            "format": "dateTime",
            "type": "string"
          },
          "result": {
            "description": "The build result",
            "type": "string"
          },
          "sourceBranch": {
            "description": "The source branch name",
            "type": "string"
          },
          "sourceVersion": {
            "description": "The source SHA",
            "type": "string"
          },
          "startTime": {
            "description": "The time the build was started",
            "format": "dateTime",
            "type": "string"
          },
          "status": {
            "description": "The build status",
            "type": "string"
          }
        },
        "required": [
          "id",
          "buildNumber",
          "queueTime",
          "status",
          "result",
          "sourceBranch",
          "sourceVersion"
        ],
        "type": "object"
      },
      "BuildAgentQueue": {
        "properties": {
          "queue": {
            "type": "string"
          }
        },
        "required": [
          "queue"
        ],
        "type": "object"
      },
      "BuildAgentQueueResponse": {
        "description": "Queue configured in build definition",
        "properties": {
          "buildDefinition": {
            "description": "Name of the build definition",
            "type": "string"
          },
          "name": {
            "description": "Name of the queue",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BuildAgentQueuesResponse": {
        "description": "A list of queues configured in build definitions",
        "items": {
          "description": "Queue configured in build definition",
          "properties": {
            "buildDefinition": {
              "description": "Name of the build definition",
              "type": "string"
            },
            "name": {
              "description": "Name of the queue",
              "type": "string"
            }
          },
          "type": "object"
        },
        "type": "array"
      },
      "BuildConcurrencyResponse": {
        "description": "Number of pipelines",
        "properties": {
          "committed_quantity": {
            "description": "The number of pipelines committed, which can be equal or greater than the number from the billing plan",
            "type": "number"
          },
          "quantity": {
            "description": "The number of pipelines set by the billing plan",
            "type": "number"
          }
        },
        "type": "object"
      },
      "BuildConfiguration": {
        "properties": {
          "name": {
            "description": "Name of build configuration (the same as a build type name)",
            "type": "string"
          },
          "signingConfig": {
            "description": "Android signing config. Null if not specified",
            "properties": {
              "hasStoreFile": {
                "description": "Indicates if storeFile is specified in the signing configuration",
                "type": "boolean"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "BuildInfo": {
        "description": "Contains metadata about the build that produced the release being uploaded",
        "properties": {
          "branch_name": {
            "description": "The branch name of the build producing the release",
            "type": "string"
          },
          "commit_hash": {
            "description": "The commit hash of the build producing the release",
            "type": "string"
          },
          "commit_message": {
            "description": "The commit message of the build producing the release",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BuildIssue": {
        "properties": {
          "category": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "BuildLog": {
        "properties": {
          "value": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "BuildParams": {
        "properties": {
          "debug": {
            "description": "Run build in debug mode",
            "type": "boolean"
          },
          "sourceVersion": {
            "description": "Version to build which represents the full Git commit reference",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BuildPatch": {
        "properties": {
          "status": {
            "description": "The build status; used to cancel builds",
            "enum": [
              "cancelling"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "BuildScripts": {
        "additionalProperties": {
          "description": "Abstract platform project",
          "properties": {
            "name": {
              "type": "string"
            },
            "path": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "description": "A collection of detected pre/post buildscripts for current platform toolset"
      },
      "BuildServiceStatus": {
        "properties": {
          "message": {
            "type": "string"
          },
          "os": {
            "type": "string"
          },
          "service": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "valid_until": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "BuildTimeline": {
        "properties": {
          "id": {
            "type": "string"
          },
          "records": {
            "items": {
              "properties": {
                "currentOperation": {
                  "type": "string"
                },
                "errorCount": {
                  "type": "number"
                },
                "finishTime": {
                  "type": "string"
                },
                "id": {
                  "type": "string"
                },
                "issues": {
                  "items": {
                    "properties": {
                      "category": {
                        "type": "string"
                      },
                      "message": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "name": {
                  "type": "string"
                },
                "order": {
                  "type": "number"
                },
                "percentComplete": {
                  "type": "number"
                },
                "result": {
                  "type": "string"
                },
                "startTime": {
                  "type": "string"
                },
                "state": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "warningCount": {
                  "type": "number"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "BuildTimelineRecord": {
        "properties": {
          "currentOperation": {
            "type": "string"
          },
          "errorCount": {
            "type": "number"
          },
          "finishTime": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "issues": {
            "items": {
              "properties": {
                "category": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          },
          "order": {
            "type": "number"
          },
          "percentComplete": {
            "type": "number"
          },
          "result": {
            "type": "string"
          },
          "startTime": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "warningCount": {
            "type": "number"
          }
        },
        "type": "object"
      },
      "Builds": {
        "description": "A list of builds",
        "items": {
          "properties": {
            "buildNumber": {
              "description": "The build number",
              "type": "string"
            },
            "finishTime": {
              "description": "The time the build was finished",
              "format": "dateTime",
              "type": "string"
            },
            "id": {
              "description": "The build ID",
              "exclusiveMinimum": true,
              "minimum": 0,
              "type": "integer"
            },
            "lastChangedDate": {
              "description": "The time the build status was last changed",
              "format": "dateTime",
              "type": "string"
            },
            "queueTime": {
              "description": "The time the build was queued",
              "format": "dateTime",
              "type": "string"
            },
            "result": {
              "description": "The build result",
              "type": "string"
            },
            "sourceBranch": {
              "description": "The source branch name",
              "type": "string"
            },
            "sourceVersion": {
              "description": "The source SHA",
              "type": "string"
            },
            "startTime": {
              "description": "The time the build was started",
              "format": "dateTime",
              "type": "string"
            },
            "status": {
              "description": "The build status",
              "type": "string"
            }
          },
          "required": [
            "id",
            "buildNumber",
            "queueTime",
            "status",
            "result",
            "sourceBranch",
            "sourceVersion"
          ],
          "type": "object"
        },
        "type": "array"
      },
      "ClearProperty": {
        "allOf": [
          {
            "discriminator": {
              "propertyName": "type"
            },
            "properties": {
              "name": {
                "maxLength": 128,
                "pattern": "^[a-zA-Z][a-zA-Z0-9\\-_]*$",
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            },
            "required": [
              "type",
              "name"
            ],
            "type": "object"
          }
        ],
        "description": "Clear an existing property.",
        "type": "object",
        "x-ms-discriminator-value": "clear"
      },
      "ClearProperty_Diagnostics": {
        "allOf": [
          {
            "discriminator": {
              "propertyName": "type"
            },
            "properties": {
              "name": {
                "maxLength": 128,
                "pattern": "^[a-zA-Z][a-zA-Z0-9\\-_]*$",
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            },
            "required": [
              "type",
              "name"
            ],
            "type": "object"
          }
        ],
        "description": "Clear an existing property.",
        "type": "object",
        "x-ms-discriminator-value": "clear"
      },
      "CloseAccountOrganizationResponse": {
        "allOf": [
          {
            "properties": {
              "avatar_url": {
                "description": "The URL to a user-uploaded Avatar image",
                "type": "string"
              },
              "created_at": {
                "description": "The creation date of this organization",
                "type": "string"
              },
              "display_name": {
                "description": "The display name of the organization",
                "type": "string"
              },
              "id": {
                "description": "The internal unique id (UUID) of the organization.",
                "format": "uuid",
                "type": "string"
              },
              "name": {
                "description": "The slug name of the organization",
                "type": "string"
              },
              "origin": {
                "description": "The creation origin of this organization",
                "enum": [
                  "appcenter",
                  "hockeyapp"
                ],
                "type": "string"
              },
              "updated_at": {
                "description": "The date the organization was last updated at",
                "type": "string"
              }
            },
            "required": [
              "id",
              "display_name",
              "name",
              "origin",
              "created_at",
              "updated_at"
            ],
            "type": "object"
          },
          {
            "properties": {
              "collaborators_count": {
                "description": "The number of collaborators from the organization",
                "type": "number"
              }
            },
            "type": "object"
          }
        ],
        "required": [
          "display_name",
          "name",
          "origin",
          "collaborators_count"
        ]
      },
      "CodePushRelease": {
        "allOf": [
          {
            "properties": {
              "description": {
                "type": "string"
              },
              "is_disabled": {
                "type": "boolean"
              },
              "is_mandatory": {
                "type": "boolean"
              },
              "rollout": {
                "maximum": 100,
                "minimum": 1,
                "type": "integer"
              },
              "target_binary_range": {
                "type": "string"
              }
            },
            "type": "object"
          },
          {
            "properties": {
              "blob_url": {
                "type": "string"
              },
              "diff_package_map": {
                "additionalProperties": {
                  "properties": {
                    "size": {
                      "type": "number"
                    },
                    "url": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "size",
                    "url"
                  ],
                  "type": "object"
                },
                "type": "object"
              },
              "label": {
                "type": "string"
              },
              "original_deployment": {
                "description": "Set on 'Promote'",
                "type": "string"
              },
              "original_label": {
                "description": "Set on 'Promote' and 'Rollback'",
                "type": "string"
              },
              "package_hash": {
                "type": "string"
              },
              "release_method": {
                "description": "The release method is unknown if unspecified",
                "enum": [
                  "Upload",
                  "Promote",
                  "Rollback"
                ],
                "type": "string"
              },
              "released_by": {
                "type": "string"
              },
              "size": {
                "type": "number"
              },
              "upload_time": {
                "type": "integer"
              }
            },
            "type": "object"
          }
        ]
      },
      "CodePushReleaseInfo": {
        "properties": {
          "description": {
            "type": "string"
          },
          "is_disabled": {
            "type": "boolean"
          },
          "is_mandatory": {
            "type": "boolean"
          },
          "rollout": {
            "maximum": 100,
            "minimum": 1,
            "type": "integer"
          },
          "target_binary_range": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "CodePushReleaseLabel": {
        "properties": {
          "label": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "CodePushReleaseMetric": {
        "properties": {
          "active": {
            "type": "integer"
          },
          "downloaded": {
            "type": "integer"
          },
          "failed": {
            "type": "integer"
          },
          "installed": {
            "type": "integer"
          },
          "label": {
            "type": "string"
          }
        },
        "required": [
          "label",
          "active"
        ],
        "type": "object"
      },
      "CodePushReleaseModification": {
        "allOf": [
          {
            "properties": {
              "description": {
                "type": "string"
              },
              "is_disabled": {
                "type": "boolean"
              },
              "is_mandatory": {
                "type": "boolean"
              },
              "rollout": {
                "maximum": 100,
                "minimum": 1,
                "type": "integer"
              },
              "target_binary_range": {
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "CodePushReleasePromote": {
        "allOf": [
          {
            "properties": {
              "description": {
                "type": "string"
              },
              "is_disabled": {
                "type": "boolean"
              },
              "is_mandatory": {
                "type": "boolean"
              },
              "rollout": {
                "maximum": 100,
                "minimum": 1,
                "type": "integer"
              },
              "target_binary_range": {
                "type": "string"
              }
            },
            "type": "object"
          },
          {
            "properties": {
              "label": {
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "CodePushReleaseUpload": {
        "properties": {
          "id": {
            "description": "The ID for the newly created upload. It is going to be required later in the process.",
            "format": "uuid",
            "type": "string"
          },
          "token": {
            "description": "The URL encoded token used for upload permissions.",
            "type": "string"
          },
          "upload_domain": {
            "description": "The URL domain used to upload the release.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "upload_domain",
          "token"
        ],
        "type": "object"
      },
      "CodePushStatusMetricMetadata": {
        "properties": {
          "app_version": {
            "type": "string"
          },
          "client_unique_id": {
            "type": "string"
          },
          "deployment_key": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "previous_deployment_key": {
            "type": "string"
          },
          "previous_label_or_app_version": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "required": [
          "deployment_key"
        ],
        "type": "object"
      },
      "CodePushUploadedRelease": {
        "properties": {
          "deployment_name": {
            "description": "This specifies which deployment you want to release the update to. Default is Staging.",
            "type": "string"
          },
          "description": {
            "description": "This provides an optional \"change log\" for the deployment.",
            "maximum": 10000,
            "type": "string"
          },
          "disabled": {
            "description": "This specifies whether an update should be downloadable by end users or not.",
            "type": "boolean"
          },
          "mandatory": {
            "description": "This specifies whether the update should be considered mandatory or not (e.g. it includes a critical security fix).",
            "type": "boolean"
          },
          "no_duplicate_release_error": {
            "description": "This specifies that if the update is identical to the latest release on the deployment, the CLI should generate a warning instead of an error.",
            "type": "boolean"
          },
          "release_upload": {
            "description": "The upload metadata from the release initialization step.",
            "properties": {
              "id": {
                "description": "The ID for the newly created upload. It is going to be required later in the process.",
                "format": "uuid",
                "type": "string"
              },
              "token": {
                "description": "The URL encoded token used for upload permissions.",
                "type": "string"
              },
              "upload_domain": {
                "description": "The URL domain used to upload the release.",
                "type": "string"
              }
            },
            "required": [
              "id",
              "upload_domain",
              "token"
            ],
            "type": "object"
          },
          "rollout": {
            "description": "This specifies the percentage of users (as an integer between 1 and 100) that should be eligible to receive this update.",
            "type": "integer"
          },
          "target_binary_version": {
            "description": "the binary version of the application",
            "type": "string"
          }
        },
        "required": [
          "release_upload",
          "target_binary_version"
        ],
        "type": "object"
      },
      "Commit": {
        "properties": {
          "sha": {
            "description": "The commit SHA",
            "type": "string"
          },
          "url": {
            "description": "The URL to the commit",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CommitDetails": {
        "allOf": [
          {
            "properties": {
              "sha": {
                "description": "The commit SHA",
                "type": "string"
              },
              "url": {
                "description": "The URL to the commit",
                "type": "string"
              }
            },
            "type": "object"
          },
          {
            "properties": {
              "commit": {
                "properties": {
                  "author": {
                    "properties": {
                      "date": {
                        "description": "Date and time of the commit",
                        "type": "string"
                      },
                      "email": {
                        "description": "Author's email",
                        "type": "string"
                      },
                      "name": {
                        "description": "Author name",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "message": {
                    "description": "Commit message",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "CommitDetailsList": {
        "description": "A list of commits",
        "items": {
          "allOf": [
            {
              "properties": {
                "sha": {
                  "description": "The commit SHA",
                  "type": "string"
                },
                "url": {
                  "description": "The URL to the commit",
                  "type": "string"
                }
              },
              "type": "object"
            },
            {
              "properties": {
                "commit": {
                  "properties": {
                    "author": {
                      "properties": {
                        "date": {
                          "description": "Date and time of the commit",
                          "type": "string"
                        },
                        "email": {
                          "description": "Author's email",
                          "type": "string"
                        },
                        "name": {
                          "description": "Author name",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "message": {
                      "description": "Commit message",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          ],
          "type": "object"
        },
        "type": "array"
      },
      "Crash": {
        "properties": {
          "build": {
            "description": "",
            "type": "string"
          },
          "crash_id": {
            "description": "",
            "type": "string"
          },
          "details": {
            "properties": {
              "app_start_timestamp": {
                "description": "Application launch timestamp (example: 1985-04-12T23:20:50.52Z).\n",
                "format": "date-time",
                "type": "string"
              },
              "carrier_country": {
                "description": "Carrier country code (for mobile devices).\n",
                "type": "string"
              },
              "carrier_name": {
                "description": "Carrier name (for mobile devices).\n",
                "type": "string"
              },
              "locale": {
                "description": "Language code (example: en_US).\n",
                "type": "string"
              },
              "os_build": {
                "description": "OS build code (example: LMY47X).\n",
                "type": "string"
              },
              "rooted": {
                "description": "Whether the device where the crash occurred is rooted or jailbroken\n",
                "type": "boolean"
              },
              "screen_size": {
                "description": "Screen size of the device in pixels (example: 640x480).\n",
                "type": "string"
              }
            },
            "required": [
              "locale",
              "screen_size",
              "rooted"
            ],
            "type": "object"
          },
          "device": {
            "description": "",
            "type": "string"
          },
          "device_name": {
            "description": "",
            "type": "string"
          },
          "display_id": {
            "type": "string"
          },
          "new_crash_group_id": {
            "description": "",
            "type": "string"
          },
          "new_crash_id": {
            "description": "",
            "type": "string"
          },
          "os_type": {
            "description": "",
            "type": "string"
          },
          "os_version": {
            "description": "",
            "type": "string"
          },
          "stacktrace": {
            "$ref": "#/components/schemas/Stacktrace"
          },
          "timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "user_email": {
            "description": "",
            "type": "string"
          },
          "user_name": {
            "description": "",
            "type": "string"
          },
          "version": {
            "description": "",
            "type": "string"
          }
        },
        "required": [
          "new_crash_group_id",
          "crash_id",
          "new_crash_id",
          "timestamp",
          "version",
          "build",
          "device",
          "os_version",
          "user_name"
        ],
        "type": "object"
      },
      "CrashAttachment": {
        "properties": {
          "app_id": {
            "type": "string"
          },
          "attachment_id": {
            "type": "string"
          },
          "blob_location": {
            "type": "string"
          },
          "content_type": {
            "type": "string"
          },
          "crash_id": {
            "type": "string"
          },
          "created_time": {
            "format": "date-time",
            "type": "string"
          },
          "file_name": {
            "type": "string"
          },
          "size": {
            "type": "number"
          }
        },
        "required": [
          "app_id",
          "attachment_id",
          "crash_id",
          "blob_location",
          "content_type",
          "file_name",
          "created_time",
          "size"
        ],
        "type": "object"
      },
      "CrashAttachmentLocation": {
        "description": "Location for downloading crash attachment",
        "properties": {
          "uri": {
            "type": "string"
          }
        },
        "required": [
          "uri"
        ],
        "type": "object"
      },
      "CrashCounts": {
        "properties": {
          "count": {
            "description": "Total crash count.",
            "format": "int64",
            "type": "integer"
          },
          "crashes": {
            "description": "The total crash count for day.",
            "items": {
              "properties": {
                "count": {
                  "description": "Count of the object.",
                  "format": "int64",
                  "type": "integer"
                },
                "datetime": {
                  "description": "The ISO 8601 datetime.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CrashDeleteCounter": {
        "properties": {
          "app_id": {
            "type": "string"
          },
          "attachments_deleted": {
            "type": "integer"
          },
          "blobs_failed": {
            "type": "integer"
          },
          "blobs_succeeded": {
            "type": "integer"
          },
          "crash_group_id": {
            "type": "string"
          },
          "crash_id": {
            "type": "string"
          },
          "crashes_deleted": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "CrashDetails": {
        "properties": {
          "app_start_timestamp": {
            "description": "Application launch timestamp (example: 1985-04-12T23:20:50.52Z).\n",
            "format": "date-time",
            "type": "string"
          },
          "carrier_country": {
            "description": "Carrier country code (for mobile devices).\n",
            "type": "string"
          },
          "carrier_name": {
            "description": "Carrier name (for mobile devices).\n",
            "type": "string"
          },
          "locale": {
            "description": "Language code (example: en_US).\n",
            "type": "string"
          },
          "os_build": {
            "description": "OS build code (example: LMY47X).\n",
            "type": "string"
          },
          "rooted": {
            "description": "Whether the device where the crash occurred is rooted or jailbroken\n",
            "type": "boolean"
          },
          "screen_size": {
            "description": "Screen size of the device in pixels (example: 640x480).\n",
            "type": "string"
          }
        },
        "required": [
          "locale",
          "screen_size",
          "rooted"
        ],
        "type": "object"
      },
      "CrashFreeDevicePercentages": {
        "properties": {
          "average_percentage": {
            "description": "Average percentage.",
            "format": "double",
            "type": "number"
          },
          "daily_percentages": {
            "description": "The crash-free percentage per day.",
            "items": {
              "properties": {
                "datetime": {
                  "description": "The ISO 8601 datetime.",
                  "type": "string"
                },
                "percentage": {
                  "description": "Percentage of the object.",
                  "format": "double",
                  "type": "number"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CrashGroup": {
        "properties": {
          "annotation": {
            "type": "string"
          },
          "app_version": {
            "type": "string"
          },
          "build": {
            "type": "string"
          },
          "count": {
            "type": "integer"
          },
          "crash_group_id": {
            "type": "string"
          },
          "crash_reason": {
            "type": "string"
          },
          "display_id": {
            "type": "string"
          },
          "exception": {
            "type": "string"
          },
          "fatal": {
            "description": "Crash or handled exception",
            "type": "boolean"
          },
          "first_occurrence": {
            "format": "date-time",
            "type": "string"
          },
          "impacted_users": {
            "type": "integer"
          },
          "last_occurrence": {
            "format": "date-time",
            "type": "string"
          },
          "new_crash_group_id": {
            "type": "string"
          },
          "reason_frame": {
            "description": "frame belonging to the reason of the crash",
            "properties": {
              "app_code": {
                "description": "this line isn't from any framework",
                "type": "boolean"
              },
              "class_method": {
                "description": "is a class method",
                "type": "boolean"
              },
              "class_name": {
                "description": "name of the class",
                "type": "string"
              },
              "code_formatted": {
                "description": "Formatted frame string",
                "type": "string"
              },
              "code_raw": {
                "description": "Unformatted Frame string",
                "type": "string"
              },
              "exception_type": {
                "description": "Exception type.",
                "type": "string"
              },
              "file": {
                "description": "name of the file",
                "type": "string"
              },
              "framework_name": {
                "description": "Name of the framework",
                "type": "string"
              },
              "language": {
                "description": "programming language of the frame",
                "enum": [
                  "JavaScript",
                  "CSharp",
                  "Objective-C",
                  "Objective-Cpp",
                  "Cpp",
                  "C",
                  "Swift",
                  "Java",
                  "Unknown"
                ],
                "type": "string"
              },
              "line": {
                "description": "line number",
                "type": "integer"
              },
              "method": {
                "description": "name of the method",
                "type": "string"
              },
              "method_params": {
                "description": "parameters of the frames method",
                "type": "string"
              },
              "os_exception_type": {
                "description": "OS exception type. (aka. SIGNAL)",
                "type": "string"
              }
            },
            "type": "object"
          },
          "status": {
            "enum": [
              "open",
              "closed",
              "ignored"
            ],
            "type": "string"
          }
        },
        "required": [
          "crash_group_id",
          "new_crash_group_id",
          "display_id",
          "app_version",
          "build",
          "status",
          "count",
          "first_occurrence",
          "last_occurrence",
          "crash_reason",
          "fatal",
          "annotation"
        ],
        "type": "object"
      },
      "CrashGroupAndVersion": {
        "properties": {
          "app_version": {
            "format": "string",
            "type": "string"
          },
          "crash_group_id": {
            "format": "string",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CrashGroupCarrier": {
        "properties": {
          "carrier_name": {
            "description": "Carrier name.",
            "type": "string"
          },
          "crash_count": {
            "description": "Crash count of carrier.",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "CrashGroupCarriers": {
        "properties": {
          "carriers": {
            "items": {
              "properties": {
                "carrier_name": {
                  "description": "Carrier name.",
                  "type": "string"
                },
                "crash_count": {
                  "description": "Crash count of carrier.",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "crash_count": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "CrashGroupChange": {
        "properties": {
          "annotation": {
            "type": "string"
          },
          "status": {
            "enum": [
              "open",
              "closed",
              "ignored"
            ]
          }
        },
        "type": "object"
      },
      "CrashGroupContainer": {
        "properties": {
          "crash_groups": {
            "items": {
              "properties": {
                "app_version": {
                  "format": "string",
                  "type": "string"
                },
                "crash_group_id": {
                  "format": "string",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "minItems": 1,
            "type": "array"
          }
        },
        "required": [
          "crash_groups"
        ],
        "type": "object"
      },
      "CrashGroupLanguage": {
        "properties": {
          "crash_count": {
            "description": "Count of languages.",
            "format": "int64",
            "type": "integer"
          },
          "language_name": {
            "description": "Language name.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CrashGroupLanguages": {
        "properties": {
          "crash_count": {
            "format": "int64",
            "type": "integer"
          },
          "languages": {
            "items": {
              "properties": {
                "crash_count": {
                  "description": "Count of languages.",
                  "format": "int64",
                  "type": "integer"
                },
                "language_name": {
                  "description": "Language name.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CrashGroupModel": {
        "properties": {
          "crash_count": {
            "description": "Count of model.",
            "format": "int64",
            "type": "integer"
          },
          "model_name": {
            "description": "Model's name.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CrashGroupModels": {
        "properties": {
          "crash_count": {
            "format": "int64",
            "type": "integer"
          },
          "models": {
            "items": {
              "properties": {
                "crash_count": {
                  "description": "Count of model.",
                  "format": "int64",
                  "type": "integer"
                },
                "model_name": {
                  "description": "Model's name.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CrashGroupOperatingSystem": {
        "properties": {
          "crash_count": {
            "description": "Count of OS.",
            "format": "int64",
            "type": "integer"
          },
          "operating_system_name": {
            "description": "OS name.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CrashGroupOperatingSystems": {
        "properties": {
          "crash_count": {
            "format": "int64",
            "type": "integer"
          },
          "operating_systems": {
            "items": {
              "properties": {
                "crash_count": {
                  "description": "Count of OS.",
                  "format": "int64",
                  "type": "integer"
                },
                "operating_system_name": {
                  "description": "OS name.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CrashGroupPlace": {
        "properties": {
          "crash_count": {
            "description": "Count of places.",
            "format": "int64",
            "type": "integer"
          },
          "place_name": {
            "description": "Place name.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CrashGroupPlaces": {
        "properties": {
          "crash_count": {
            "format": "int64",
            "type": "integer"
          },
          "places": {
            "items": {
              "properties": {
                "crash_count": {
                  "description": "Count of places.",
                  "format": "int64",
                  "type": "integer"
                },
                "place_name": {
                  "description": "Place name.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CrashGroupStatusEnum": {
        "enum": [
          "open",
          "closed",
          "ignored"
        ]
      },
      "CrashGroupsContainer": {
        "properties": {
          "continuation_token": {
            "description": "Cassandra request continuation token. The token is used for pagination.",
            "type": "string"
          },
          "crash_groups": {
            "items": {
              "properties": {
                "annotation": {
                  "type": "string"
                },
                "app_version": {
                  "type": "string"
                },
                "build": {
                  "type": "string"
                },
                "count": {
                  "type": "integer"
                },
                "crash_group_id": {
                  "type": "string"
                },
                "crash_reason": {
                  "type": "string"
                },
                "display_id": {
                  "type": "string"
                },
                "exception": {
                  "type": "string"
                },
                "fatal": {
                  "description": "Crash or handled exception",
                  "type": "boolean"
                },
                "first_occurrence": {
                  "format": "date-time",
                  "type": "string"
                },
                "impacted_users": {
                  "type": "integer"
                },
                "last_occurrence": {
                  "format": "date-time",
                  "type": "string"
                },
                "new_crash_group_id": {
                  "type": "string"
                },
                "reason_frame": {
                  "description": "frame belonging to the reason of the crash",
                  "properties": {
                    "app_code": {
                      "description": "this line isn't from any framework",
                      "type": "boolean"
                    },
                    "class_method": {
                      "description": "is a class method",
                      "type": "boolean"
                    },
                    "class_name": {
                      "description": "name of the class",
                      "type": "string"
                    },
                    "code_formatted": {
                      "description": "Formatted frame string",
                      "type": "string"
                    },
                    "code_raw": {
                      "description": "Unformatted Frame string",
                      "type": "string"
                    },
                    "exception_type": {
                      "description": "Exception type.",
                      "type": "string"
                    },
                    "file": {
                      "description": "name of the file",
                      "type": "string"
                    },
                    "framework_name": {
                      "description": "Name of the framework",
                      "type": "string"
                    },
                    "language": {
                      "description": "programming language of the frame",
                      "enum": [
                        "JavaScript",
                        "CSharp",
                        "Objective-C",
                        "Objective-Cpp",
                        "Cpp",
                        "C",
                        "Swift",
                        "Java",
                        "Unknown"
                      ],
                      "type": "string"
                    },
                    "line": {
                      "description": "line number",
                      "type": "integer"
                    },
                    "method": {
                      "description": "name of the method",
                      "type": "string"
                    },
                    "method_params": {
                      "description": "parameters of the frames method",
                      "type": "string"
                    },
                    "os_exception_type": {
                      "description": "OS exception type. (aka. SIGNAL)",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "status": {
                  "enum": [
                    "open",
                    "closed",
                    "ignored"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "crash_group_id",
                "new_crash_group_id",
                "display_id",
                "app_version",
                "build",
                "status",
                "count",
                "first_occurrence",
                "last_occurrence",
                "crash_reason",
                "fatal",
                "annotation"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "limited_result_set": {
            "type": "boolean"
          }
        },
        "required": [
          "limited_result_set",
          "crash_groups"
        ],
        "type": "object"
      },
      "CrashOverall": {
        "properties": {
          "crash_count": {
            "format": "int64",
            "type": "integer"
          },
          "device_count": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "CrashRawLocation": {
        "description": "Location for downloading crash raw",
        "properties": {
          "uri": {
            "type": "string"
          }
        },
        "required": [
          "uri"
        ],
        "type": "object"
      },
      "CrashesOverall": {
        "description": "List of crash groups with overall crashes count and affected users.",
        "items": {
          "properties": {
            "app_version": {
              "format": "string",
              "type": "string"
            },
            "crash_group_id": {
              "format": "string",
              "type": "string"
            },
            "overall": {
              "properties": {
                "crash_count": {
                  "format": "int64",
                  "type": "integer"
                },
                "device_count": {
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "type": "array"
      },
      "CrashingAppDetail": {
        "properties": {
          "appId": {
            "description": "application identifier",
            "type": "string"
          },
          "appVersion": {
            "description": "application version",
            "type": "string"
          },
          "crashGroupId": {
            "description": "crash group identifier",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CreateAccessKeyRequest": {
        "properties": {
          "createdBy": {
            "description": "Name of creator current access key",
            "type": "string"
          },
          "friendlyName": {
            "description": "Friendly name of the access key",
            "type": "string"
          },
          "ttl": {
            "description": "Time to live of the access key",
            "type": "number"
          }
        },
        "type": "object"
      },
      "CreateAccessKeyResponse": {
        "properties": {
          "accessKey": {
            "properties": {
              "createdBy": {
                "description": "Account name of creator.",
                "type": "string"
              },
              "createdTime": {
                "description": "Created time of access key",
                "type": "number"
              },
              "description": {
                "description": "Description of access key",
                "type": "string"
              },
              "expires": {
                "description": "Time of expiry of access key",
                "type": "number"
              },
              "friendlyName": {
                "description": "Friendly name of access key",
                "type": "string"
              },
              "id": {
                "description": "Id of accessKey",
                "type": "string"
              },
              "isSession": {
                "description": "Legacy property which indicate if accessKey was created from session",
                "type": "boolean"
              },
              "name": {
                "description": "Key of access key",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "CreateGdprTestData": {
        "properties": {
          "accountId": {
            "format": "uuid",
            "type": "string"
          },
          "appId": {
            "format": "uuid",
            "type": "string"
          },
          "appName": {
            "type": "string"
          },
          "userEmail": {
            "type": "string"
          },
          "userName": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "CreateReleaseUploadResponse": {
        "properties": {
          "id": {
            "description": "The ID for the newly created upload. It is going to be required later in the process.",
            "format": "uuid",
            "type": "string"
          },
          "package_asset_id": {
            "description": "The associated asset ID in the file management service associated with this uploaded.",
            "format": "uuid",
            "type": "string"
          },
          "token": {
            "description": "The access token used for upload permissions.",
            "type": "string"
          },
          "upload_domain": {
            "description": "The URL domain used to upload the release.",
            "type": "string"
          },
          "url_encoded_token": {
            "description": "The access token used for upload permissions (URL encoded to use as a single query parameter).",
            "type": "string"
          }
        },
        "required": [
          "id",
          "upload_domain",
          "token",
          "url_encoded_token",
          "package_asset_id"
        ],
        "type": "object"
      },
      "CreateStoreSecretRequest": {
        "properties": {
          "secret_json": {
            "properties": {
              "id_token": {
                "description": "the id token of user",
                "type": "string"
              },
              "refresh_token": {
                "description": "the refresh token for user",
                "type": "string"
              },
              "refresh_token_expiry": {
                "description": "the expiry of refresh token",
                "type": "string"
              }
            },
            "type": "object"
          },
          "tenant_id": {
            "description": "the tenant id for user",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CreateStoreSecretResponse": {
        "properties": {
          "secret_id": {
            "description": "the secret id for store secret",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CustomProperty": {
        "discriminator": {
          "propertyName": "type"
        },
        "properties": {
          "name": {
            "maxLength": 128,
            "pattern": "^[a-zA-Z][a-zA-Z0-9\\-_]*$",
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "name"
        ],
        "type": "object"
      },
      "CustomPropertyLog": {
        "allOf": [
          {
            "discriminator": {
              "propertyName": "type"
            },
            "properties": {
              "device": {
                "description": "Device characteristics.",
                "properties": {
                  "app_build": {
                    "description": "The app's build number, e.g. 42.\n",
                    "type": "string"
                  },
                  "app_namespace": {
                    "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                    "type": "string"
                  },
                  "app_version": {
                    "description": "Application version name, e.g. 1.1.0\n",
                    "type": "string"
                  },
                  "carrier_code": {
                    "description": "Carrier country code (for mobile devices).\n",
                    "type": "string"
                  },
                  "carrier_country": {
                    "description": "Carrier country.\n",
                    "type": "string"
                  },
                  "carrier_name": {
                    "description": "Carrier name (for mobile devices).\n",
                    "type": "string"
                  },
                  "live_update_deployment_key": {
                    "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                    "type": "string"
                  },
                  "live_update_package_hash": {
                    "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                    "type": "string"
                  },
                  "live_update_release_label": {
                    "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                    "type": "string"
                  },
                  "locale": {
                    "description": "Language code (example: en_US).\n",
                    "type": "string"
                  },
                  "model": {
                    "description": "Device model (example: iPad2,3).\n",
                    "type": "string"
                  },
                  "oem_name": {
                    "description": "Device manufacturer (example: HTC).\n",
                    "type": "string"
                  },
                  "os_api_level": {
                    "description": "API level when applicable like in Android (example: 15).\n",
                    "type": "integer"
                  },
                  "os_build": {
                    "description": "OS build code (example: LMY47X).\n",
                    "type": "string"
                  },
                  "os_name": {
                    "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                    "type": "string"
                  },
                  "os_version": {
                    "description": "OS version (example: 9.3.0).\n",
                    "type": "string"
                  },
                  "screen_size": {
                    "description": "Screen size of the device in pixels (example: 640x480).\n",
                    "type": "string"
                  },
                  "sdk_name": {
                    "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                    "type": "string"
                  },
                  "sdk_version": {
                    "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                    "type": "string"
                  },
                  "time_zone_offset": {
                    "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                    "maximum": 840,
                    "minimum": -840,
                    "type": "integer"
                  },
                  "wrapper_runtime_version": {
                    "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                    "type": "string"
                  },
                  "wrapper_sdk_name": {
                    "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                    "type": "string"
                  },
                  "wrapper_sdk_version": {
                    "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                    "type": "string"
                  }
                },
                "required": [
                  "sdk_name",
                  "sdk_version",
                  "os_name",
                  "os_version",
                  "locale",
                  "time_zone_offset",
                  "app_version",
                  "app_build"
                ],
                "type": "object"
              },
              "install_id": {
                "description": "Install ID.\n",
                "format": "uuid",
                "type": "string"
              },
              "timestamp": {
                "description": "Log creation timestamp.\n",
                "format": "date-time",
                "type": "string"
              },
              "type": {
                "description": "Log type.\n",
                "enum": [
                  "event",
                  "page",
                  "start_session",
                  "error",
                  "push_installation",
                  "start_service",
                  "custom_properties"
                ],
                "type": "string"
              }
            },
            "required": [
              "type",
              "timestamp",
              "install_id",
              "device"
            ],
            "type": "object"
          }
        ],
        "description": "Set or remove custom properties.",
        "properties": {
          "properties": {
            "description": "Custom property changes.",
            "items": {
              "discriminator": {
                "propertyName": "type"
              },
              "properties": {
                "name": {
                  "maxLength": 128,
                  "pattern": "^[a-zA-Z][a-zA-Z0-9\\-_]*$",
                  "type": "string"
                },
                "type": {
                  "type": "string"
                }
              },
              "required": [
                "type",
                "name"
              ],
              "type": "object"
            },
            "maxItems": 60,
            "minItems": 1,
            "type": "array"
          }
        },
        "type": "object",
        "x-ms-discriminator-value": "custom_properties"
      },
      "CustomPropertyLog_Diagnostics": {
        "allOf": [
          {
            "discriminator": {
              "propertyName": "type"
            },
            "properties": {
              "device": {
                "description": "Device characteristics.",
                "properties": {
                  "app_build": {
                    "description": "The app's build number, e.g. 42.\n",
                    "type": "string"
                  },
                  "app_namespace": {
                    "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                    "type": "string"
                  },
                  "app_version": {
                    "description": "Application version name, e.g. 1.1.0\n",
                    "type": "string"
                  },
                  "carrier_code": {
                    "description": "Carrier country code (for mobile devices).\n",
                    "type": "string"
                  },
                  "carrier_country": {
                    "description": "Carrier country.\n",
                    "type": "string"
                  },
                  "carrier_name": {
                    "description": "Carrier name (for mobile devices).\n",
                    "type": "string"
                  },
                  "live_update_deployment_key": {
                    "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                    "type": "string"
                  },
                  "live_update_package_hash": {
                    "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                    "type": "string"
                  },
                  "live_update_release_label": {
                    "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                    "type": "string"
                  },
                  "locale": {
                    "description": "Language code (example: en_US).\n",
                    "type": "string"
                  },
                  "model": {
                    "description": "Device model (example: iPad2,3).\n",
                    "type": "string"
                  },
                  "oem_name": {
                    "description": "Device manufacturer (example: HTC).\n",
                    "type": "string"
                  },
                  "os_api_level": {
                    "description": "API level when applicable like in Android (example: 15).\n",
                    "type": "integer"
                  },
                  "os_build": {
                    "description": "OS build code (example: LMY47X).\n",
                    "type": "string"
                  },
                  "os_name": {
                    "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                    "type": "string"
                  },
                  "os_version": {
                    "description": "OS version (example: 9.3.0).\n",
                    "type": "string"
                  },
                  "screen_size": {
                    "description": "Screen size of the device in pixels (example: 640x480).\n",
                    "type": "string"
                  },
                  "sdk_name": {
                    "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                    "type": "string"
                  },
                  "sdk_version": {
                    "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                    "type": "string"
                  },
                  "time_zone_offset": {
                    "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                    "maximum": 840,
                    "minimum": -840,
                    "type": "integer"
                  },
                  "wrapper_runtime_version": {
                    "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                    "type": "string"
                  },
                  "wrapper_sdk_name": {
                    "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                    "type": "string"
                  },
                  "wrapper_sdk_version": {
                    "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                    "type": "string"
                  }
                },
                "required": [
                  "sdk_name",
                  "sdk_version",
                  "os_name",
                  "os_version",
                  "locale",
                  "time_zone_offset",
                  "app_version",
                  "app_build"
                ],
                "type": "object"
              },
              "install_id": {
                "description": "Install ID.\n",
                "format": "uuid",
                "type": "string"
              },
              "timestamp": {
                "description": "Log creation timestamp.\n",
                "format": "date-time",
                "type": "string"
              },
              "type": {
                "description": "Log type.\n",
                "enum": [
                  "event",
                  "page",
                  "start_session",
                  "error",
                  "push_installation",
                  "start_service",
                  "custom_properties"
                ],
                "type": "string"
              }
            },
            "required": [
              "type",
              "timestamp",
              "install_id",
              "device"
            ],
            "type": "object"
          }
        ],
        "description": "Set or remove custom properties.",
        "properties": {
          "properties": {
            "description": "Custom property changes.",
            "items": {
              "discriminator": {
                "propertyName": "type"
              },
              "properties": {
                "name": {
                  "maxLength": 128,
                  "pattern": "^[a-zA-Z][a-zA-Z0-9\\-_]*$",
                  "type": "string"
                },
                "type": {
                  "type": "string"
                }
              },
              "required": [
                "type",
                "name"
              ],
              "type": "object"
            },
            "maxItems": 60,
            "minItems": 1,
            "type": "array"
          }
        },
        "type": "object",
        "x-ms-discriminator-value": "custom_properties"
      },
      "CustomProperty_Diagnostics": {
        "discriminator": {
          "propertyName": "type"
        },
        "properties": {
          "name": {
            "maxLength": 128,
            "pattern": "^[a-zA-Z][a-zA-Z0-9\\-_]*$",
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "name"
        ],
        "type": "object"
      },
      "DailySession": {
        "properties": {
          "count": {
            "format": "int64",
            "type": "integer"
          },
          "datetime": {
            "description": "The ISO 8601 datetime.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DataSubjectRighBlobContainerInfo": {
        "properties": {
          "blobPath": {
            "type": "string"
          },
          "sasUri": {
            "type": "string"
          }
        },
        "required": [
          "sasUri",
          "blobPath"
        ],
        "type": "object"
      },
      "DataSubjectRightCustomerIdRequest": {
        "properties": {
          "dataSubjectIdentifier": {
            "description": "customer account id (b2c identifier) / customer user id (free form text) depending on the value of the fied `type`",
            "type": "string"
          },
          "type": {
            "description": "type of the customer dataSubjectIdentifier",
            "enum": [
              "CustomerAccountId",
              "CustomerUserId"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": false,
              "name": "CustomerIdentifierType"
            }
          }
        },
        "type": "object"
      },
      "DataSubjectRightEmailRequest": {
        "properties": {
          "email": {
            "description": "Email used for cancel delete with x-authz-bypass headers",
            "type": "string"
          }
        },
        "required": [
          "email"
        ],
        "type": "object"
      },
      "DataSubjectRightOperation": {
        "properties": {
          "appId": {
            "description": "Application identifier if applicable",
            "type": "string"
          },
          "context": {
            "description": "JSON object decribing what to delete (TODO - make separate definition?)",
            "type": "string"
          },
          "operationId": {
            "description": "Unique operation identifier",
            "format": "uuid",
            "type": "string"
          },
          "participant": {
            "description": "Participant to execute the response",
            "type": "string"
          },
          "participantData": {
            "description": "String field to be used by participant for any intermediate statuses or data they need to save",
            "type": "string"
          },
          "requestId": {
            "description": "Unique request identifier",
            "format": "uuid",
            "type": "string"
          },
          "requestType": {
            "description": "Request type",
            "enum": [
              "Unsupported",
              "Delete",
              "Purge",
              "UndoDelete",
              "Scheduled",
              "AppDelete",
              "AppPurge",
              "AppUndoDelete",
              "Export",
              "CustomerAccountDelete",
              "CustomerAccountExport",
              "CustomerUserDelete",
              "CustomerUserExport"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": false,
              "name": "RequestType"
            }
          },
          "status": {
            "description": "Operation status",
            "enum": [
              "None",
              "Created",
              "Queued",
              "InProgress",
              "Completed",
              "Failed"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": false,
              "name": "OperationStatus"
            }
          }
        },
        "required": [
          "requestId",
          "operationId",
          "requestType",
          "status",
          "participant",
          "context"
        ],
        "type": "object"
      },
      "DataSubjectRightQueueInfo": {
        "properties": {
          "expiresAt": {
            "format": "date-time",
            "type": "string"
          },
          "queueName": {
            "type": "string"
          },
          "sasUri": {
            "format": "uri",
            "type": "string"
          }
        },
        "required": [
          "sasUri",
          "queueName",
          "expiresAt"
        ],
        "type": "object"
      },
      "DataSubjectRightResponse": {
        "properties": {
          "createdAt": {
            "description": "ISO 8601 format timestamp of when request was created.",
            "format": "date-time",
            "type": "string"
          },
          "token": {
            "description": "Unique request identifier",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "token",
          "createdAt"
        ],
        "type": "object"
      },
      "DataSubjectRightStatusResponse": {
        "properties": {
          "message": {
            "description": "explanation message of the status",
            "type": "string"
          },
          "sasUrl": {
            "description": "Azure Storage shared access signature (SAS) URL for exported user data.",
            "type": "string"
          },
          "sasUrlExpired": {
            "description": "Whether Azure Storage shared access signature (SAS) URL has expired or not.",
            "type": "boolean"
          },
          "status": {
            "description": "Status of data subject right request",
            "enum": [
              "None",
              "Created",
              "Queued",
              "InProgress",
              "Completed",
              "Failed"
            ],
            "type": "string"
          }
        },
        "required": [
          "status",
          "message"
        ],
        "type": "object"
      },
      "DataSubjectRightUpdateStatusOperation": {
        "properties": {
          "participantData": {
            "description": "String field to be used by participant for any intermediate statuses or data they need to save",
            "type": "string"
          },
          "requestId": {
            "description": "Request identifier of the operation",
            "type": "string"
          },
          "status": {
            "description": "Operation status",
            "enum": [
              "None",
              "Created",
              "Queued",
              "InProgress",
              "Completed",
              "Failed"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": false,
              "name": "OperationStatus"
            }
          }
        },
        "required": [
          "requestId",
          "status"
        ],
        "type": "object"
      },
      "DateTimeCounts": {
        "properties": {
          "count": {
            "description": "Count of the object.",
            "format": "int64",
            "type": "integer"
          },
          "datetime": {
            "description": "The ISO 8601 datetime.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DateTimeDecimalCounts": {
        "properties": {
          "count": {
            "description": "Decimal count of the object.",
            "format": "double",
            "type": "number"
          },
          "datetime": {
            "description": "The ISO 8601 datetime.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DateTimeDownloadReleaseCount": {
        "properties": {
          "datetime": {
            "description": "The ISO 8601 datetime.",
            "type": "string"
          },
          "total": {
            "format": "int64",
            "type": "integer"
          },
          "unique": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "DateTimeDownloadReleaseCounts": {
        "properties": {
          "counts": {
            "description": "Release counts per day.",
            "items": {
              "properties": {
                "datetime": {
                  "description": "The ISO 8601 datetime.",
                  "type": "string"
                },
                "total": {
                  "format": "int64",
                  "type": "integer"
                },
                "unique": {
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "total": {
            "format": "int64",
            "type": "integer"
          },
          "unique": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "DateTimePercentages": {
        "properties": {
          "datetime": {
            "description": "The ISO 8601 datetime.",
            "type": "string"
          },
          "percentage": {
            "description": "Percentage of the object.",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "DateTimeProperty": {
        "allOf": [
          {
            "discriminator": {
              "propertyName": "type"
            },
            "properties": {
              "name": {
                "maxLength": 128,
                "pattern": "^[a-zA-Z][a-zA-Z0-9\\-_]*$",
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            },
            "required": [
              "type",
              "name"
            ],
            "type": "object"
          }
        ],
        "description": "Date and time property.",
        "properties": {
          "value": {
            "description": "Date time property value.",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "value"
        ],
        "type": "object",
        "x-ms-discriminator-value": "date_time"
      },
      "DateTimeProperty_Diagnostics": {
        "allOf": [
          {
            "discriminator": {
              "propertyName": "type"
            },
            "properties": {
              "name": {
                "maxLength": 128,
                "pattern": "^[a-zA-Z][a-zA-Z0-9\\-_]*$",
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            },
            "required": [
              "type",
              "name"
            ],
            "type": "object"
          }
        ],
        "description": "Date and time property.",
        "properties": {
          "value": {
            "description": "Date time property value.",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "value"
        ],
        "type": "object",
        "x-ms-discriminator-value": "date_time"
      },
      "DeleteReleasesContainer": {
        "properties": {
          "releases": {
            "items": {
              "properties": {
                "release": {
                  "description": "Release Id.\n",
                  "format": "string",
                  "type": "string"
                }
              },
              "required": [
                "release"
              ],
              "type": "object"
            },
            "minItems": 1,
            "type": "array"
          }
        },
        "required": [
          "releases"
        ],
        "type": "object"
      },
      "Deployment": {
        "properties": {
          "key": {
            "type": "string"
          },
          "latest_release": {
            "allOf": [
              {
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "is_disabled": {
                    "type": "boolean"
                  },
                  "is_mandatory": {
                    "type": "boolean"
                  },
                  "rollout": {
                    "maximum": 100,
                    "minimum": 1,
                    "type": "integer"
                  },
                  "target_binary_range": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "properties": {
                  "blob_url": {
                    "type": "string"
                  },
                  "diff_package_map": {
                    "additionalProperties": {
                      "properties": {
                        "size": {
                          "type": "number"
                        },
                        "url": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "size",
                        "url"
                      ],
                      "type": "object"
                    },
                    "type": "object"
                  },
                  "label": {
                    "type": "string"
                  },
                  "original_deployment": {
                    "description": "Set on 'Promote'",
                    "type": "string"
                  },
                  "original_label": {
                    "description": "Set on 'Promote' and 'Rollback'",
                    "type": "string"
                  },
                  "package_hash": {
                    "type": "string"
                  },
                  "release_method": {
                    "description": "The release method is unknown if unspecified",
                    "enum": [
                      "Upload",
                      "Promote",
                      "Rollback"
                    ],
                    "type": "string"
                  },
                  "released_by": {
                    "type": "string"
                  },
                  "size": {
                    "type": "number"
                  },
                  "upload_time": {
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            ]
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "DeploymentInternal": {
        "allOf": [
          {
            "properties": {
              "key": {
                "type": "string"
              },
              "latest_release": {
                "allOf": [
                  {
                    "properties": {
                      "description": {
                        "type": "string"
                      },
                      "is_disabled": {
                        "type": "boolean"
                      },
                      "is_mandatory": {
                        "type": "boolean"
                      },
                      "rollout": {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer"
                      },
                      "target_binary_range": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  {
                    "properties": {
                      "blob_url": {
                        "type": "string"
                      },
                      "diff_package_map": {
                        "additionalProperties": {
                          "properties": {
                            "size": {
                              "type": "number"
                            },
                            "url": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "size",
                            "url"
                          ],
                          "type": "object"
                        },
                        "type": "object"
                      },
                      "label": {
                        "type": "string"
                      },
                      "original_deployment": {
                        "description": "Set on 'Promote'",
                        "type": "string"
                      },
                      "original_label": {
                        "description": "Set on 'Promote' and 'Rollback'",
                        "type": "string"
                      },
                      "package_hash": {
                        "type": "string"
                      },
                      "release_method": {
                        "description": "The release method is unknown if unspecified",
                        "enum": [
                          "Upload",
                          "Promote",
                          "Rollback"
                        ],
                        "type": "string"
                      },
                      "released_by": {
                        "type": "string"
                      },
                      "size": {
                        "type": "number"
                      },
                      "upload_time": {
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  }
                ]
              },
              "name": {
                "type": "string"
              }
            },
            "required": [
              "name"
            ],
            "type": "object"
          }
        ],
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeploymentModification": {
        "properties": {
          "name": {
            "maxLength": 1000,
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "Destination": {
        "allOf": [
          {
            "allOf": [
              {
                "properties": {
                  "id": {
                    "description": "ID identifying a unique distribution group.",
                    "type": "string"
                  },
                  "name": {
                    "description": "A name identifying a unique distribution group.",
                    "type": "string"
                  }
                },
                "required": [
                  "id"
                ],
                "type": "object"
              },
              {
                "properties": {
                  "is_latest": {
                    "description": "Is the containing release the latest one in this distribution group.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            ]
          },
          {
            "allOf": [
              {
                "properties": {
                  "id": {
                    "description": "ID identifying a unique distribution store.",
                    "type": "string"
                  },
                  "name": {
                    "description": "A name identifying a unique distribution store.",
                    "type": "string"
                  },
                  "publishing_status": {
                    "description": "publishing status of the release in the store.",
                    "type": "string"
                  },
                  "type": {
                    "description": "type of the distribution store currently stores type can be intune, googleplay or windows.",
                    "enum": [
                      "intune",
                      "googleplay",
                      "apple",
                      "none"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "id"
                ],
                "type": "object"
              },
              {
                "properties": {
                  "is_latest": {
                    "description": "Is the containing release the latest one in this distribution store.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            ]
          },
          {
            "description": "A unique identifier for a destination. A destination can be identified by an ID (guid) or by a name. DestinationId encapsulates both options. A destination can be either a distribution group or a store.",
            "properties": {
              "id": {
                "description": "Id of a distribution group / store. The release will be associated with this distribution group / store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.",
                "type": "string"
              },
              "name": {
                "description": "Name of a distribution group / distribution store. The release will be associated with this distribution group or store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.",
                "type": "string"
              }
            },
            "type": "object"
          },
          {
            "properties": {
              "destination_type": {
                "description": "Destination can be either store or group.",
                "enum": [
                  "group",
                  "store",
                  "tester"
                ],
                "type": "string"
              },
              "display_name": {
                "description": "Display name for the group or tester",
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "DestinationDetails": {
        "description": "Destination details for distributing build releases",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "enum": [
              "store",
              "group",
              "tester"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "DestinationError": {
        "properties": {
          "code": {
            "description": "Error Codes:<br>\n<b>invalid_store_secrets</b>: While distributing to store, secrets provided for store are not valid.<br>\n<b>store_release_bad_request</b>: Proper package release details for the store is not provided.<br>\n<b>store_release_unauthorized</b>: User is not authorized to publish to store due to invalid developer credentials.<br>\n<b>store_release_forbidden</b>: Publish to store is forbidden due to conflicts/errors in the release version and already existing version in the store.<br>\n<b>store_release_promotion</b>: Release already distributed, promoting a release is not supported.<br>\n<b>store_track_deactivated</b>: One or more tracks would be deactivated with this release. This is not supported yet.<br>\n<b>store_release_not_found</b>: App with the given package name is not found in the store.<br>\n<b>store_release_not_available</b>: The release is not available.<br>\n<b>internal_server_error</b>: Failed to distribute to a destination due to an internal server error.\n",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "DestinationId": {
        "description": "A unique identifier for a destination. A destination can be identified by an ID (guid) or by a name. DestinationId encapsulates both options. A destination can be either a distribution group or a store.",
        "properties": {
          "id": {
            "description": "Id of a distribution group / store. The release will be associated with this distribution group / store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.",
            "type": "string"
          },
          "name": {
            "description": "Name of a distribution group / distribution store. The release will be associated with this distribution group or store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Device": {
        "description": "Device characteristics.",
        "properties": {
          "app_build": {
            "description": "The app's build number, e.g. 42.\n",
            "type": "string"
          },
          "app_namespace": {
            "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
            "type": "string"
          },
          "app_version": {
            "description": "Application version name, e.g. 1.1.0\n",
            "type": "string"
          },
          "carrier_code": {
            "description": "Carrier country code (for mobile devices).\n",
            "type": "string"
          },
          "carrier_country": {
            "description": "Carrier country.\n",
            "type": "string"
          },
          "carrier_name": {
            "description": "Carrier name (for mobile devices).\n",
            "type": "string"
          },
          "live_update_deployment_key": {
            "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
            "type": "string"
          },
          "live_update_package_hash": {
            "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
            "type": "string"
          },
          "live_update_release_label": {
            "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
            "type": "string"
          },
          "locale": {
            "description": "Language code (example: en_US).\n",
            "type": "string"
          },
          "model": {
            "description": "Device model (example: iPad2,3).\n",
            "type": "string"
          },
          "oem_name": {
            "description": "Device manufacturer (example: HTC).\n",
            "type": "string"
          },
          "os_api_level": {
            "description": "API level when applicable like in Android (example: 15).\n",
            "type": "integer"
          },
          "os_build": {
            "description": "OS build code (example: LMY47X).\n",
            "type": "string"
          },
          "os_name": {
            "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
            "type": "string"
          },
          "os_version": {
            "description": "OS version (example: 9.3.0).\n",
            "type": "string"
          },
          "screen_size": {
            "description": "Screen size of the device in pixels (example: 640x480).\n",
            "type": "string"
          },
          "sdk_name": {
            "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
            "type": "string"
          },
          "sdk_version": {
            "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
            "type": "string"
          },
          "time_zone_offset": {
            "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
            "maximum": 840,
            "minimum": -840,
            "type": "integer"
          },
          "wrapper_runtime_version": {
            "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
            "type": "string"
          },
          "wrapper_sdk_name": {
            "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
            "type": "string"
          },
          "wrapper_sdk_version": {
            "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
            "type": "string"
          }
        },
        "required": [
          "sdk_name",
          "sdk_version",
          "os_name",
          "os_version",
          "locale",
          "time_zone_offset",
          "app_version",
          "app_build"
        ],
        "type": "object"
      },
      "DeviceAvailability": {
        "description": "...",
        "properties": {
          "available": {
            "type": "number"
          },
          "maximum": {
            "type": "number"
          },
          "registered": {
            "type": "number"
          }
        },
        "required": [
          "registered",
          "available",
          "maximum"
        ],
        "type": "object"
      },
      "DeviceConfiguration": {
        "properties": {
          "id": {
            "description": "The unique id of the device configuration",
            "format": "uuid",
            "type": "string"
          },
          "image": {
            "properties": {
              "full": {
                "type": "string"
              },
              "thumb": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "marketShare": {
            "type": "number"
          },
          "model": {
            "properties": {
              "availabilityCount": {
                "type": "number"
              },
              "cpu": {
                "description": "CPU data for device",
                "properties": {
                  "core": {
                    "type": "string"
                  },
                  "frequency": {
                    "type": "string"
                  },
                  "text": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "deviceFrame": {
                "properties": {
                  "full": {
                    "properties": {
                      "frameUrl": {
                        "type": "string"
                      },
                      "height": {
                        "type": "number"
                      },
                      "screen": {
                        "items": {
                          "type": "number"
                        },
                        "type": "array"
                      },
                      "width": {
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "grid": {
                    "properties": {
                      "frameUrl": {
                        "type": "string"
                      },
                      "height": {
                        "type": "number"
                      },
                      "screen": {
                        "items": {
                          "type": "number"
                        },
                        "type": "array"
                      },
                      "width": {
                        "type": "number"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "dimensions": {
                "description": "Physical device dimensions",
                "properties": {
                  "depth": {
                    "type": "object"
                  },
                  "height": {
                    "type": "object"
                  },
                  "width": {
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "formFactor": {
                "type": "string"
              },
              "manufacturer": {
                "type": "string"
              },
              "memory": {
                "description": "Memory data for device",
                "properties": {
                  "formattedSize": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "model": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "platform": {
                "type": "string"
              },
              "releaseDate": {
                "type": "string"
              },
              "resolution": {
                "description": "Device screen resolution",
                "properties": {
                  "height": {
                    "type": "string"
                  },
                  "ppi": {
                    "type": "string"
                  },
                  "width": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "screenRotation": {
                "type": "number"
              },
              "screenSize": {
                "description": "Physical device screen dimensions",
                "properties": {
                  "cm": {
                    "type": "string"
                  },
                  "in": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "name": {
            "description": "The name of the device model and OS version",
            "type": "string"
          },
          "os": {
            "type": "string"
          },
          "osName": {
            "type": "string"
          },
          "tier": {
            "description": "The tier",
            "type": "number"
          }
        },
        "type": "object"
      },
      "DeviceConfigurationResponse": {
        "description": "A response containing the fully encoded binary blob for a mobileconfig",
        "properties": {
          "data_url": {
            "description": "A data URL containing a signed mobileconfig profile",
            "type": "string"
          }
        },
        "required": [
          "data_url"
        ],
        "type": "object"
      },
      "DeviceCpu": {
        "description": "CPU data for device",
        "properties": {
          "core": {
            "type": "string"
          },
          "frequency": {
            "type": "string"
          },
          "text": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeviceDimensions": {
        "description": "Physical device dimensions",
        "properties": {
          "depth": {
            "type": "object"
          },
          "height": {
            "type": "object"
          },
          "width": {
            "type": "object"
          }
        },
        "type": "object"
      },
      "DeviceFrame": {
        "properties": {
          "full": {
            "properties": {
              "frameUrl": {
                "type": "string"
              },
              "height": {
                "type": "number"
              },
              "screen": {
                "items": {
                  "type": "number"
                },
                "type": "array"
              },
              "width": {
                "type": "number"
              }
            },
            "type": "object"
          },
          "grid": {
            "properties": {
              "frameUrl": {
                "type": "string"
              },
              "height": {
                "type": "number"
              },
              "screen": {
                "items": {
                  "type": "number"
                },
                "type": "array"
              },
              "width": {
                "type": "number"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "DeviceFrameDefinition": {
        "properties": {
          "frameUrl": {
            "type": "string"
          },
          "height": {
            "type": "number"
          },
          "screen": {
            "items": {
              "type": "number"
            },
            "type": "array"
          },
          "width": {
            "type": "number"
          }
        },
        "type": "object"
      },
      "DeviceInfoRequest": {
        "description": "The information for a single iOS device",
        "properties": {
          "imei": {
            "description": "The device's International Mobile Equipment Identity number. Always empty or undefined at present.",
            "type": "string"
          },
          "model": {
            "description": "The model identifier of the device, in the format iDeviceM,N",
            "type": "string"
          },
          "os_build": {
            "description": "The build number of the last known OS version running on the device",
            "type": "string"
          },
          "os_version": {
            "description": "The last known OS version running on the device",
            "type": "string"
          },
          "owner_id": {
            "description": "The user ID of the device owner.",
            "type": "string"
          },
          "serial": {
            "description": "The device's serial number. Always empty or undefined at present.",
            "type": "string"
          },
          "udid": {
            "description": "The Unique Device IDentifier of the device",
            "type": "string"
          }
        },
        "required": [
          "udid",
          "model"
        ],
        "type": "object"
      },
      "DeviceInfoResponse": {
        "description": "The information for a single iOS device",
        "properties": {
          "device_name": {
            "description": "The device description, in the format \"iPhone 7 Plus (A1784)\"",
            "type": "string"
          },
          "full_device_name": {
            "description": "A combination of the device model name and the owner name.",
            "type": "string"
          },
          "imei": {
            "description": "The device's International Mobile Equipment Identity number. Always empty or undefined at present.",
            "type": "string"
          },
          "model": {
            "description": "The model identifier of the device, in the format iDeviceM,N",
            "type": "string"
          },
          "os_build": {
            "description": "The last known OS version running on the device",
            "type": "string"
          },
          "os_version": {
            "description": "The last known OS version running on the device",
            "type": "string"
          },
          "owner_id": {
            "description": "The user ID of the device owner.",
            "type": "string"
          },
          "registered_at": {
            "description": "Timestamp of when the device was registered in ISO format.",
            "type": "string"
          },
          "serial": {
            "description": "The device's serial number. Always empty or undefined at present.",
            "type": "string"
          },
          "status": {
            "description": "The provisioning status of the device.",
            "type": "string"
          },
          "udid": {
            "description": "The Unique Device IDentifier of the device",
            "type": "string"
          }
        },
        "required": [
          "udid",
          "model",
          "device_name",
          "os_build",
          "os_version",
          "status"
        ],
        "type": "object"
      },
      "DeviceList": {
        "description": "A list of device IDs",
        "properties": {
          "devices": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "devices"
        ],
        "title": "Device List",
        "type": "object"
      },
      "DeviceMemory": {
        "description": "Memory data for device",
        "properties": {
          "formattedSize": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeviceModel": {
        "properties": {
          "availabilityCount": {
            "type": "number"
          },
          "cpu": {
            "description": "CPU data for device",
            "properties": {
              "core": {
                "type": "string"
              },
              "frequency": {
                "type": "string"
              },
              "text": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "deviceFrame": {
            "properties": {
              "full": {
                "properties": {
                  "frameUrl": {
                    "type": "string"
                  },
                  "height": {
                    "type": "number"
                  },
                  "screen": {
                    "items": {
                      "type": "number"
                    },
                    "type": "array"
                  },
                  "width": {
                    "type": "number"
                  }
                },
                "type": "object"
              },
              "grid": {
                "properties": {
                  "frameUrl": {
                    "type": "string"
                  },
                  "height": {
                    "type": "number"
                  },
                  "screen": {
                    "items": {
                      "type": "number"
                    },
                    "type": "array"
                  },
                  "width": {
                    "type": "number"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "dimensions": {
            "description": "Physical device dimensions",
            "properties": {
              "depth": {
                "type": "object"
              },
              "height": {
                "type": "object"
              },
              "width": {
                "type": "object"
              }
            },
            "type": "object"
          },
          "formFactor": {
            "type": "string"
          },
          "manufacturer": {
            "type": "string"
          },
          "memory": {
            "description": "Memory data for device",
            "properties": {
              "formattedSize": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "model": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "platform": {
            "type": "string"
          },
          "releaseDate": {
            "type": "string"
          },
          "resolution": {
            "description": "Device screen resolution",
            "properties": {
              "height": {
                "type": "string"
              },
              "ppi": {
                "type": "string"
              },
              "width": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "screenRotation": {
            "type": "number"
          },
          "screenSize": {
            "description": "Physical device screen dimensions",
            "properties": {
              "cm": {
                "type": "string"
              },
              "in": {
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "DeviceRegistrationUrl": {
        "description": "The url that can be navigated to in order to start the device registration process.",
        "properties": {
          "registration_url": {
            "description": "The url that can be navigated to in order to start the device registration process.",
            "type": "string"
          }
        },
        "required": [
          "registration_url"
        ],
        "type": "object"
      },
      "DeviceResolution": {
        "description": "Device screen resolution",
        "properties": {
          "height": {
            "type": "string"
          },
          "ppi": {
            "type": "string"
          },
          "width": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeviceScreenSize": {
        "description": "Physical device screen dimensions",
        "properties": {
          "cm": {
            "type": "string"
          },
          "in": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeviceSelection": {
        "description": "Short ID for a list of device IDs",
        "properties": {
          "shortId": {
            "description": "Identifier of the device selection",
            "type": "string"
          }
        },
        "required": [
          "shortId"
        ],
        "title": "Device Selection",
        "type": "object"
      },
      "DeviceSet": {
        "description": "The name and devices of the device set",
        "properties": {
          "deviceConfigurations": {
            "items": {
              "properties": {
                "id": {
                  "description": "The unique id of the device configuration",
                  "format": "uuid",
                  "type": "string"
                },
                "image": {
                  "properties": {
                    "thumb": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "model": {
                  "properties": {
                    "formFactor": {
                      "type": "string"
                    },
                    "manufacturer": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "releaseDate": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "os": {
                  "type": "string"
                },
                "osName": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "id": {
            "description": "Identifier of the device set",
            "type": "string"
          },
          "manufacturerCount": {
            "description": "The number of manufacturers in the device set's device selection",
            "type": "number"
          },
          "name": {
            "description": "Name of the device set",
            "type": "string"
          },
          "osVersionCount": {
            "description": "The number of os versions in the device set's device selection",
            "type": "number"
          },
          "owner": {
            "description": "The owner of a device set",
            "properties": {
              "displayName": {
                "description": "Display name of the account",
                "type": "string"
              },
              "id": {
                "description": "Account ID",
                "type": "string"
              },
              "name": {
                "description": "Name of the account",
                "type": "string"
              },
              "type": {
                "description": "Type of account",
                "type": "string"
              }
            },
            "required": [
              "type",
              "id",
              "name"
            ],
            "title": "Device Set Owner",
            "type": "object"
          },
          "slug": {
            "description": "Slug of the device set",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "owner",
          "deviceConfigurations"
        ],
        "title": "Device Set",
        "type": "object"
      },
      "DeviceSetConfiguration": {
        "properties": {
          "id": {
            "description": "The unique id of the device configuration",
            "format": "uuid",
            "type": "string"
          },
          "image": {
            "properties": {
              "thumb": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "model": {
            "properties": {
              "formFactor": {
                "type": "string"
              },
              "manufacturer": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "releaseDate": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "os": {
            "type": "string"
          },
          "osName": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeviceSetModel": {
        "properties": {
          "formFactor": {
            "type": "string"
          },
          "manufacturer": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "releaseDate": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeviceSetOwner": {
        "description": "The owner of a device set",
        "properties": {
          "displayName": {
            "description": "Display name of the account",
            "type": "string"
          },
          "id": {
            "description": "Account ID",
            "type": "string"
          },
          "name": {
            "description": "Name of the account",
            "type": "string"
          },
          "type": {
            "description": "Type of account",
            "type": "string"
          }
        },
        "required": [
          "type",
          "id",
          "name"
        ],
        "title": "Device Set Owner",
        "type": "object"
      },
      "DeviceSetUpdate": {
        "description": "The name of the device set and the list of device IDs",
        "properties": {
          "devices": {
            "description": "List of device IDs",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "description": "The name of the device set",
            "type": "string"
          }
        },
        "required": [
          "devices",
          "name"
        ],
        "title": "Device Set update information",
        "type": "object"
      },
      "Device_Diagnostics": {
        "description": "Device characteristics.",
        "properties": {
          "app_build": {
            "description": "The app's build number, e.g. 42.\n",
            "type": "string"
          },
          "app_namespace": {
            "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
            "type": "string"
          },
          "app_version": {
            "description": "Application version name, e.g. 1.1.0\n",
            "type": "string"
          },
          "carrier_code": {
            "description": "Carrier country code (for mobile devices).\n",
            "type": "string"
          },
          "carrier_country": {
            "description": "Carrier country.\n",
            "type": "string"
          },
          "carrier_name": {
            "description": "Carrier name (for mobile devices).\n",
            "type": "string"
          },
          "live_update_deployment_key": {
            "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
            "type": "string"
          },
          "live_update_package_hash": {
            "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
            "type": "string"
          },
          "live_update_release_label": {
            "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
            "type": "string"
          },
          "locale": {
            "description": "Language code (example: en_US).\n",
            "type": "string"
          },
          "model": {
            "description": "Device model (example: iPad2,3).\n",
            "type": "string"
          },
          "oem_name": {
            "description": "Device manufacturer (example: HTC).\n",
            "type": "string"
          },
          "os_api_level": {
            "description": "API level when applicable like in Android (example: 15).\n",
            "type": "integer"
          },
          "os_build": {
            "description": "OS build code (example: LMY47X).\n",
            "type": "string"
          },
          "os_name": {
            "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
            "type": "string"
          },
          "os_version": {
            "description": "OS version (example: 9.3.0).\n",
            "type": "string"
          },
          "screen_size": {
            "description": "Screen size of the device in pixels (example: 640x480).\n",
            "type": "string"
          },
          "sdk_name": {
            "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
            "type": "string"
          },
          "sdk_version": {
            "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
            "type": "string"
          },
          "time_zone_offset": {
            "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
            "maximum": 840,
            "minimum": -840,
            "type": "integer"
          },
          "wrapper_runtime_version": {
            "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
            "type": "string"
          },
          "wrapper_sdk_name": {
            "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
            "type": "string"
          },
          "wrapper_sdk_version": {
            "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
            "type": "string"
          }
        },
        "required": [
          "sdk_name",
          "sdk_version",
          "os_name",
          "os_version",
          "locale",
          "time_zone_offset",
          "app_version",
          "app_build"
        ],
        "type": "object"
      },
      "DiagnosticIdResponse": {
        "description": "The diagnostic id for the given publish action",
        "properties": {
          "diagnostic_id": {
            "description": "diagnostic id",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DiagnosticsException": {
        "description": "a exception",
        "properties": {
          "frames": {
            "description": "frames of the excetpion",
            "items": {
              "description": "a single frame of a stack trace",
              "properties": {
                "address": {
                  "description": "address of the frame",
                  "type": "string"
                },
                "app_code": {
                  "description": "this line isn't from any framework",
                  "type": "boolean"
                },
                "class_method": {
                  "description": "is a class method",
                  "type": "boolean"
                },
                "class_name": {
                  "description": "name of the class",
                  "type": "string"
                },
                "code_formatted": {
                  "description": "Formatted frame string",
                  "type": "string"
                },
                "code_raw": {
                  "description": "Raw frame string",
                  "type": "string"
                },
                "file": {
                  "description": "name of the file",
                  "type": "string"
                },
                "framework_name": {
                  "description": "Name of the framework",
                  "type": "string"
                },
                "language": {
                  "description": "programming language of the frame",
                  "enum": [
                    "JavaScript",
                    "CSharp",
                    "Objective-C",
                    "Objective-Cpp",
                    "Cpp",
                    "C",
                    "Swift",
                    "Java",
                    "Unknown"
                  ],
                  "type": "string"
                },
                "line": {
                  "description": "line number",
                  "type": "integer"
                },
                "method": {
                  "description": "name of the method",
                  "type": "string"
                },
                "method_params": {
                  "description": "parameters of the frames method",
                  "type": "string"
                },
                "relevant": {
                  "description": "frame should be shown always",
                  "type": "boolean"
                }
              },
              "required": [
                "code_raw",
                "code_formatted",
                "app_code"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "inner_exceptions": {
            "items": {
              "$ref": "#/components/schemas/DiagnosticsException"
            },
            "type": "array"
          },
          "platform": {
            "description": "SDK/Platform this thread is beeing generated from",
            "enum": [
              "ios",
              "android",
              "xamarin",
              "react-native",
              "ndk",
              "unity",
              "other"
            ],
            "type": "string"
          },
          "reason": {
            "description": "Reason of the exception",
            "type": "string"
          },
          "relevant": {
            "description": "relevant exception (crashed)",
            "type": "boolean"
          },
          "type": {
            "description": "Type of the exception (NSSomethingException, NullPointerException)",
            "type": "string"
          }
        },
        "required": [
          "frames"
        ],
        "type": "object"
      },
      "DiagnosticsStackFrame": {
        "description": "a single frame of a stack trace",
        "properties": {
          "address": {
            "description": "address of the frame",
            "type": "string"
          },
          "app_code": {
            "description": "this line isn't from any framework",
            "type": "boolean"
          },
          "class_method": {
            "description": "is a class method",
            "type": "boolean"
          },
          "class_name": {
            "description": "name of the class",
            "type": "string"
          },
          "code_formatted": {
            "description": "Formatted frame string",
            "type": "string"
          },
          "code_raw": {
            "description": "Raw frame string",
            "type": "string"
          },
          "file": {
            "description": "name of the file",
            "type": "string"
          },
          "framework_name": {
            "description": "Name of the framework",
            "type": "string"
          },
          "language": {
            "description": "programming language of the frame",
            "enum": [
              "JavaScript",
              "CSharp",
              "Objective-C",
              "Objective-Cpp",
              "Cpp",
              "C",
              "Swift",
              "Java",
              "Unknown"
            ],
            "type": "string"
          },
          "line": {
            "description": "line number",
            "type": "integer"
          },
          "method": {
            "description": "name of the method",
            "type": "string"
          },
          "method_params": {
            "description": "parameters of the frames method",
            "type": "string"
          },
          "relevant": {
            "description": "frame should be shown always",
            "type": "boolean"
          }
        },
        "required": [
          "code_raw",
          "code_formatted",
          "app_code"
        ],
        "type": "object"
      },
      "DiagnosticsStackTrace": {
        "description": "a stacktrace in a processed and prettyfied way",
        "properties": {
          "exception": {
            "$ref": "#/components/schemas/DiagnosticsException"
          },
          "reason": {
            "type": "string"
          },
          "threads": {
            "items": {
              "$ref": "#/components/schemas/DiagnosticsThread"
            },
            "type": "array"
          },
          "title": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "DiagnosticsThread": {
        "description": "a thread representation",
        "properties": {
          "crashed": {
            "description": "True if this thread crashed",
            "type": "boolean"
          },
          "exception": {
            "$ref": "#/components/schemas/DiagnosticsException",
            "description": "potential additional exception happened in that thread (Last Exception Backtrace)"
          },
          "frames": {
            "description": "frames of that thread",
            "items": {
              "description": "a single frame of a stack trace",
              "properties": {
                "address": {
                  "description": "address of the frame",
                  "type": "string"
                },
                "app_code": {
                  "description": "this line isn't from any framework",
                  "type": "boolean"
                },
                "class_method": {
                  "description": "is a class method",
                  "type": "boolean"
                },
                "class_name": {
                  "description": "name of the class",
                  "type": "string"
                },
                "code_formatted": {
                  "description": "Formatted frame string",
                  "type": "string"
                },
                "code_raw": {
                  "description": "Raw frame string",
                  "type": "string"
                },
                "file": {
                  "description": "name of the file",
                  "type": "string"
                },
                "framework_name": {
                  "description": "Name of the framework",
                  "type": "string"
                },
                "language": {
                  "description": "programming language of the frame",
                  "enum": [
                    "JavaScript",
                    "CSharp",
                    "Objective-C",
                    "Objective-Cpp",
                    "Cpp",
                    "C",
                    "Swift",
                    "Java",
                    "Unknown"
                  ],
                  "type": "string"
                },
                "line": {
                  "description": "line number",
                  "type": "integer"
                },
                "method": {
                  "description": "name of the method",
                  "type": "string"
                },
                "method_params": {
                  "description": "parameters of the frames method",
                  "type": "string"
                },
                "relevant": {
                  "description": "frame should be shown always",
                  "type": "boolean"
                }
              },
              "required": [
                "code_raw",
                "code_formatted",
                "app_code"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "platform": {
            "description": "SDK/Platform this thread is beeing generated from",
            "enum": [
              "ios",
              "android",
              "xamarin",
              "react-native",
              "ndk",
              "unity",
              "other"
            ],
            "type": "string"
          },
          "relevant": {
            "description": "Shows if a thread is relevant or not. Is false if all frames are non relevant, otherwise true",
            "type": "boolean"
          },
          "title": {
            "description": "name of the thread",
            "type": "string"
          }
        },
        "required": [
          "title",
          "frames"
        ],
        "type": "object"
      },
      "DistributionGroup": {
        "allOf": [
          {
            "properties": {
              "id": {
                "description": "ID identifying a unique distribution group.",
                "type": "string"
              },
              "name": {
                "description": "A name identifying a unique distribution group.",
                "type": "string"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          {
            "properties": {
              "is_latest": {
                "description": "Is the containing release the latest one in this distribution group.",
                "type": "boolean"
              }
            },
            "type": "object"
          }
        ]
      },
      "DistributionGroupAADGroupBase": {
        "properties": {
          "aad_group_id": {
            "description": "The id of the aad group",
            "format": "uuid",
            "type": "string"
          },
          "display_name": {
            "description": "The display name of the aad group",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DistributionGroupAADGroupPostResponse": {
        "properties": {
          "aad_group_id": {
            "description": "The AAD unique id (UUID) of the AAD group.",
            "format": "uuid",
            "type": "string"
          },
          "display_name": {
            "description": "The display name of the AAD group",
            "type": "string"
          },
          "id": {
            "description": "The internal unique id (UUID) of the AAD group.",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DistributionGroupAADGroupRequest": {
        "properties": {
          "aad_groups": {
            "description": "The list of aad group ids and names to add",
            "items": {
              "properties": {
                "aad_group_id": {
                  "description": "The id of the aad group",
                  "format": "uuid",
                  "type": "string"
                },
                "display_name": {
                  "description": "The display name of the aad group",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DistributionGroupAADGroupResponse": {
        "properties": {
          "aad_group_id": {
            "description": "The AAD unique id (UUID) of the AAD group.",
            "format": "uuid",
            "type": "string"
          },
          "display_name": {
            "description": "The display name of the AAD group",
            "type": "string"
          },
          "distribution_group_name": {
            "description": "The distribution group of the AAD group",
            "type": "string"
          },
          "id": {
            "description": "The internal unique id (UUID) of the AAD group.",
            "format": "uuid",
            "type": "string"
          },
          "is_aad_group": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "DistributionGroupAADGroupsDeleteRequest": {
        "properties": {
          "aad_group_ids": {
            "description": "The list of aad group ids",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DistributionGroupAadGroupsDeleteResponse": {
        "properties": {
          "aad_group_id": {
            "description": "The aad id of the group",
            "format": "uuid",
            "type": "string"
          },
          "code": {
            "description": "The code of the result",
            "type": "string"
          },
          "message": {
            "description": "The message of the result",
            "type": "integer"
          },
          "status": {
            "description": "The status code of the result",
            "type": "integer"
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "DistributionGroupAppAddRequest": {
        "properties": {
          "apps": {
            "description": "The list of apps to add to distribution group",
            "items": {
              "properties": {
                "name": {
                  "description": "The name of the app to be added to the distribution group",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DistributionGroupAppsDeleteRequest": {
        "properties": {
          "apps": {
            "description": "The list of apps to delete from the distribution group",
            "items": {
              "properties": {
                "name": {
                  "description": "The name of the app to be deleted from the distribution group",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object"
            },
            "minItems": 1,
            "type": "array"
          }
        },
        "type": "object"
      },
      "DistributionGroupDetailsResponse": {
        "allOf": [
          {
            "properties": {
              "display_name": {
                "description": "The name of the distribution group",
                "type": "string"
              },
              "id": {
                "description": "The unique ID of the distribution group",
                "format": "uuid",
                "type": "string"
              },
              "is_public": {
                "description": "Whether the distribution group is public",
                "type": "boolean"
              },
              "name": {
                "description": "The name of the distribution group used in URLs",
                "type": "string"
              },
              "origin": {
                "description": "The creation origin of this distribution group",
                "enum": [
                  "appcenter",
                  "hockeyapp"
                ],
                "type": "string"
              }
            },
            "required": [
              "id",
              "name",
              "origin",
              "is_public"
            ],
            "type": "object"
          },
          {
            "properties": {
              "group_type": {
                "description": "Type of group (Default, HockeyAppDefault or MicrosoftDogfooding)",
                "enum": [
                  "Default",
                  "HockeyAppDefault",
                  "MicrosoftDogfooding"
                ],
                "type": "string"
              },
              "is_shared": {
                "description": "Whether the distribution group is shared group or not",
                "type": "boolean"
              },
              "notified_user_count": {
                "description": "The count of non-pending users in the distribution group who will be notified by new releases",
                "type": "number"
              },
              "total_apps_count": {
                "description": "The count of apps associated with this distribution group",
                "type": "number"
              },
              "total_user_count": {
                "description": "The count of users in the distribution group",
                "type": "number"
              },
              "users": {
                "description": "The distribution group users",
                "items": {
                  "properties": {
                    "avatar_url": {
                      "description": "The avatar URL of the user",
                      "type": "string"
                    },
                    "can_change_password": {
                      "description": "User is required to send an old password in order to change the password.",
                      "type": "boolean"
                    },
                    "display_name": {
                      "description": "The full name of the user. Might for example be first and last name",
                      "type": "string"
                    },
                    "email": {
                      "description": "The email address of the user",
                      "type": "string"
                    },
                    "id": {
                      "description": "The unique id (UUID) of the user",
                      "format": "uuid",
                      "type": "string"
                    },
                    "invite_pending": {
                      "description": "Whether the has accepted the invite. Available when an invite is pending, and the value will be \"true\".",
                      "type": "boolean"
                    },
                    "name": {
                      "description": "The unique name that is used to identify the user.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "email"
                  ],
                  "type": "object"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ],
        "required": [
          "is_shared",
          "users",
          "total_user_count",
          "notified_user_count",
          "total_apps_count"
        ]
      },
      "DistributionGroupPatchRequest": {
        "properties": {
          "is_public": {
            "description": "Whether the distribution group is public",
            "type": "boolean"
          },
          "name": {
            "description": "The name of the distribution group",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DistributionGroupPrivateResponse": {
        "allOf": [
          {
            "properties": {
              "display_name": {
                "description": "The name of the distribution group",
                "type": "string"
              },
              "id": {
                "description": "The unique ID of the distribution group",
                "format": "uuid",
                "type": "string"
              },
              "is_public": {
                "description": "Whether the distribution group is public",
                "type": "boolean"
              },
              "name": {
                "description": "The name of the distribution group used in URLs",
                "type": "string"
              },
              "origin": {
                "description": "The creation origin of this distribution group",
                "enum": [
                  "appcenter",
                  "hockeyapp"
                ],
                "type": "string"
              }
            },
            "required": [
              "id",
              "name",
              "origin",
              "is_public"
            ],
            "type": "object"
          },
          {
            "properties": {
              "group_type": {
                "description": "Type of group",
                "enum": [
                  "Default",
                  "HockeyAppDefault",
                  "MicrosoftDogfooding"
                ],
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "DistributionGroupRelease": {
        "description": "Response for getting a list of releases in a distribution group",
        "properties": {
          "enabled": {
            "description": "This value determines the whether a release currently is enabled or disabled.",
            "type": "boolean"
          },
          "id": {
            "description": "ID identifying this unique release.",
            "type": "integer"
          },
          "is_external_build": {
            "description": "This value determines if a release is external or not.",
            "type": "boolean"
          },
          "mandatory_update": {
            "description": "A boolean which determines whether the release is a mandatory update or not.",
            "type": "boolean"
          },
          "origin": {
            "description": "The release's origin",
            "enum": [
              "hockeyapp",
              "appcenter"
            ],
            "type": "string"
          },
          "short_version": {
            "description": "The release's short version.<br>\nFor iOS: CFBundleShortVersionString from info.plist.<br>\nFor Android: android:versionName from AppManifest.xml.\n",
            "type": "string"
          },
          "uploaded_at": {
            "description": "UTC time in ISO 8601 format of the uploaded time.",
            "type": "string"
          },
          "version": {
            "description": "The release's version.<br>\nFor iOS: CFBundleVersion from info.plist.<br>\nFor Android: android:versionCode from AppManifest.xml.\n",
            "type": "string"
          }
        },
        "required": [
          "id",
          "version",
          "enabled",
          "uploaded_at",
          "short_version",
          "mandatory_update"
        ],
        "type": "object"
      },
      "DistributionGroupReleasesResponse": {
        "description": "Response for getting a list of releases in a distribution group",
        "items": {
          "description": "Response for getting a list of releases in a distribution group",
          "properties": {
            "enabled": {
              "description": "This value determines the whether a release currently is enabled or disabled.",
              "type": "boolean"
            },
            "id": {
              "description": "ID identifying this unique release.",
              "type": "integer"
            },
            "is_external_build": {
              "description": "This value determines if a release is external or not.",
              "type": "boolean"
            },
            "mandatory_update": {
              "description": "A boolean which determines whether the release is a mandatory update or not.",
              "type": "boolean"
            },
            "origin": {
              "description": "The release's origin",
              "enum": [
                "hockeyapp",
                "appcenter"
              ],
              "type": "string"
            },
            "short_version": {
              "description": "The release's short version.<br>\nFor iOS: CFBundleShortVersionString from info.plist.<br>\nFor Android: android:versionName from AppManifest.xml.\n",
              "type": "string"
            },
            "uploaded_at": {
              "description": "UTC time in ISO 8601 format of the uploaded time.",
              "type": "string"
            },
            "version": {
              "description": "The release's version.<br>\nFor iOS: CFBundleVersion from info.plist.<br>\nFor Android: android:versionCode from AppManifest.xml.\n",
              "type": "string"
            }
          },
          "required": [
            "id",
            "version",
            "enabled",
            "uploaded_at",
            "short_version",
            "mandatory_update"
          ],
          "type": "object"
        },
        "type": "array"
      },
      "DistributionGroupRequest": {
        "properties": {
          "display_name": {
            "description": "The display name of the distribution group. If not specified, the name will be used.",
            "type": "string"
          },
          "name": {
            "description": "The name of the distribution group",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "DistributionGroupResponse": {
        "properties": {
          "display_name": {
            "description": "The name of the distribution group",
            "type": "string"
          },
          "id": {
            "description": "The unique ID of the distribution group",
            "format": "uuid",
            "type": "string"
          },
          "is_public": {
            "description": "Whether the distribution group is public",
            "type": "boolean"
          },
          "name": {
            "description": "The name of the distribution group used in URLs",
            "type": "string"
          },
          "origin": {
            "description": "The creation origin of this distribution group",
            "enum": [
              "appcenter",
              "hockeyapp"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "origin",
          "is_public"
        ],
        "type": "object"
      },
      "DistributionGroupTesterGetResponse": {
        "properties": {
          "display_name": {
            "description": "The full name of the tester. Might for example be first and last name",
            "type": "string"
          },
          "email": {
            "description": "The email address of the tester",
            "type": "string"
          },
          "name": {
            "description": "The unique name that is used to identify the tester.",
            "type": "string"
          }
        },
        "required": [
          "name",
          "email"
        ],
        "type": "object"
      },
      "DistributionGroupUserDeleteResponse": {
        "properties": {
          "code": {
            "description": "The code of the result",
            "type": "string"
          },
          "message": {
            "description": "The message of the result",
            "type": "integer"
          },
          "status": {
            "description": "The status code of the result",
            "type": "integer"
          },
          "user_email": {
            "description": "The email of the user",
            "type": "string"
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "DistributionGroupUserGetResponse": {
        "properties": {
          "avatar_url": {
            "description": "The avatar URL of the user",
            "type": "string"
          },
          "can_change_password": {
            "description": "User is required to send an old password in order to change the password.",
            "type": "boolean"
          },
          "display_name": {
            "description": "The full name of the user. Might for example be first and last name",
            "type": "string"
          },
          "email": {
            "description": "The email address of the user",
            "type": "string"
          },
          "id": {
            "description": "The unique id (UUID) of the user",
            "format": "uuid",
            "type": "string"
          },
          "invite_pending": {
            "description": "Whether the has accepted the invite. Available when an invite is pending, and the value will be \"true\".",
            "type": "boolean"
          },
          "name": {
            "description": "The unique name that is used to identify the user.",
            "type": "string"
          }
        },
        "required": [
          "email"
        ],
        "type": "object"
      },
      "DistributionGroupUserPostResponse": {
        "properties": {
          "code": {
            "description": "The code of the result",
            "type": "string"
          },
          "invite_pending": {
            "description": "Whether the has accepted the invite. Available when an invite is pending, and the value will be \"true\".",
            "type": "boolean"
          },
          "message": {
            "description": "The message of the result",
            "type": "string"
          },
          "status": {
            "description": "The status code of the result",
            "type": "integer"
          },
          "user_email": {
            "description": "The email of the user",
            "type": "string"
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "DistributionGroupUserRequest": {
        "properties": {
          "user_emails": {
            "description": "The list of emails of the users",
            "items": {
              "type": "string"
            },
            "minItems": 1,
            "type": "array"
          }
        },
        "type": "object"
      },
      "DistributionGroupWithUsersResponse": {
        "properties": {
          "aad_groups": {
            "description": "The distribution group aad groups",
            "items": {
              "properties": {
                "aad_group_id": {
                  "description": "The AAD unique id (UUID) of the AAD group.",
                  "format": "uuid",
                  "type": "string"
                },
                "display_name": {
                  "description": "The display name of the AAD group",
                  "type": "string"
                },
                "id": {
                  "description": "The internal unique id (UUID) of the AAD group.",
                  "format": "uuid",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "id": {
            "description": "The unique ID of the distribution group",
            "format": "uuid",
            "type": "string"
          },
          "is_public": {
            "description": "Whether the distribution group is public",
            "type": "boolean"
          },
          "name": {
            "description": "The name of the distribution group used in URLs",
            "type": "string"
          },
          "notified_user_count": {
            "description": "The count of non-pending users in the distribution group who will be notified by new releases",
            "type": "number"
          },
          "total_groups_count": {
            "description": "The count of aad groups in the distribution group",
            "type": "number"
          },
          "total_user_count": {
            "description": "The count of users in the distribution group",
            "type": "number"
          },
          "users": {
            "description": "The distribution group users",
            "items": {
              "properties": {
                "avatar_url": {
                  "description": "The avatar URL of the user",
                  "type": "string"
                },
                "can_change_password": {
                  "description": "User is required to send an old password in order to change the password.",
                  "type": "boolean"
                },
                "display_name": {
                  "description": "The full name of the user. Might for example be first and last name",
                  "type": "string"
                },
                "email": {
                  "description": "The email address of the user",
                  "type": "string"
                },
                "id": {
                  "description": "The unique id (UUID) of the user",
                  "format": "uuid",
                  "type": "string"
                },
                "invite_pending": {
                  "description": "Whether the has accepted the invite. Available when an invite is pending, and the value will be \"true\".",
                  "type": "boolean"
                },
                "name": {
                  "description": "The unique name that is used to identify the user.",
                  "type": "string"
                }
              },
              "required": [
                "email"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "id",
          "name",
          "users",
          "total_user_count",
          "notified_user_count"
        ],
        "type": "object"
      },
      "DistributionGroupWithoutIsLatest": {
        "properties": {
          "id": {
            "description": "ID identifying a unique distribution group.",
            "type": "string"
          },
          "name": {
            "description": "A name identifying a unique distribution group.",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "DistributionGroupsUserVerifyRequest": {
        "properties": {
          "distribution_group_ids": {
            "description": "An array of distribution group ids",
            "items": {
              "description": "The id of the distribution group",
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "distribution_group_ids"
        ],
        "type": "object"
      },
      "DistributionRequest": {
        "properties": {
          "destinations": {
            "description": "Array of objects {id:string, type:string} with \"id\" being the distribution group ID, store ID, or tester email, and \"type\" being \"group\", \"store\", or \"tester\"",
            "items": {
              "description": "Destination details for distributing build releases",
              "properties": {
                "id": {
                  "type": "string"
                },
                "type": {
                  "enum": [
                    "store",
                    "group",
                    "tester"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "id",
                "type"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "mandatoryUpdate": {
            "type": "boolean"
          },
          "notifyTesters": {
            "default": true,
            "type": "boolean"
          },
          "releaseNotes": {
            "description": "The release notes",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DistributionResponse": {
        "properties": {
          "status": {
            "description": "Status of the Request",
            "type": "string"
          },
          "upload_id": {
            "description": "A unique ID of the upload",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DistributionSettingsResponse": {
        "properties": {
          "default_public": {
            "description": "Is this app using the \"Default to Public Distribution Groups\" logic",
            "type": "boolean"
          }
        },
        "required": [
          "default_public"
        ],
        "type": "object"
      },
      "DistributionStartSessionLog": {
        "allOf": [
          {
            "discriminator": {
              "propertyName": "type"
            },
            "properties": {
              "device": {
                "description": "Device characteristics.",
                "properties": {
                  "app_build": {
                    "description": "The app's build number, e.g. 42.\n",
                    "type": "string"
                  },
                  "app_namespace": {
                    "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                    "type": "string"
                  },
                  "app_version": {
                    "description": "Application version name, e.g. 1.1.0\n",
                    "type": "string"
                  },
                  "carrier_code": {
                    "description": "Carrier country code (for mobile devices).\n",
                    "type": "string"
                  },
                  "carrier_country": {
                    "description": "Carrier country.\n",
                    "type": "string"
                  },
                  "carrier_name": {
                    "description": "Carrier name (for mobile devices).\n",
                    "type": "string"
                  },
                  "live_update_deployment_key": {
                    "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                    "type": "string"
                  },
                  "live_update_package_hash": {
                    "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                    "type": "string"
                  },
                  "live_update_release_label": {
                    "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                    "type": "string"
                  },
                  "locale": {
                    "description": "Language code (example: en_US).\n",
                    "type": "string"
                  },
                  "model": {
                    "description": "Device model (example: iPad2,3).\n",
                    "type": "string"
                  },
                  "oem_name": {
                    "description": "Device manufacturer (example: HTC).\n",
                    "type": "string"
                  },
                  "os_api_level": {
                    "description": "API level when applicable like in Android (example: 15).\n",
                    "type": "integer"
                  },
                  "os_build": {
                    "description": "OS build code (example: LMY47X).\n",
                    "type": "string"
                  },
                  "os_name": {
                    "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                    "type": "string"
                  },
                  "os_version": {
                    "description": "OS version (example: 9.3.0).\n",
                    "type": "string"
                  },
                  "screen_size": {
                    "description": "Screen size of the device in pixels (example: 640x480).\n",
                    "type": "string"
                  },
                  "sdk_name": {
                    "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                    "type": "string"
                  },
                  "sdk_version": {
                    "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                    "type": "string"
                  },
                  "time_zone_offset": {
                    "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                    "maximum": 840,
                    "minimum": -840,
                    "type": "integer"
                  },
                  "wrapper_runtime_version": {
                    "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                    "type": "string"
                  },
                  "wrapper_sdk_name": {
                    "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                    "type": "string"
                  },
                  "wrapper_sdk_version": {
                    "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                    "type": "string"
                  }
                },
                "required": [
                  "sdk_name",
                  "sdk_version",
                  "os_name",
                  "os_version",
                  "locale",
                  "time_zone_offset",
                  "app_version",
                  "app_build"
                ],
                "type": "object"
              },
              "install_id": {
                "description": "Install ID.\n",
                "format": "uuid",
                "type": "string"
              },
              "timestamp": {
                "description": "Log creation timestamp.\n",
                "format": "date-time",
                "type": "string"
              },
              "type": {
                "description": "Log type.\n",
                "enum": [
                  "event",
                  "page",
                  "start_session",
                  "error",
                  "push_installation",
                  "start_service",
                  "custom_properties"
                ],
                "type": "string"
              }
            },
            "required": [
              "type",
              "timestamp",
              "install_id",
              "device"
            ],
            "type": "object"
          }
        ],
        "description": "Log is used to update distribution group identifier for session (a marker event for analytics service).",
        "properties": {
          "distribution_group_id": {
            "description": "Distribution Group ID.\n",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "distribution_group_id"
        ],
        "type": "object",
        "x-ms-discriminator-value": "distribution_start_session"
      },
      "DistributionStore": {
        "allOf": [
          {
            "properties": {
              "id": {
                "description": "ID identifying a unique distribution store.",
                "type": "string"
              },
              "name": {
                "description": "A name identifying a unique distribution store.",
                "type": "string"
              },
              "publishing_status": {
                "description": "publishing status of the release in the store.",
                "type": "string"
              },
              "type": {
                "description": "type of the distribution store currently stores type can be intune, googleplay or windows.",
                "enum": [
                  "intune",
                  "googleplay",
                  "apple",
                  "none"
                ],
                "type": "string"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          {
            "properties": {
              "is_latest": {
                "description": "Is the containing release the latest one in this distribution store.",
                "type": "boolean"
              }
            },
            "type": "object"
          }
        ]
      },
      "DistributionStoreWithoutIsLatest": {
        "properties": {
          "id": {
            "description": "ID identifying a unique distribution store.",
            "type": "string"
          },
          "name": {
            "description": "A name identifying a unique distribution store.",
            "type": "string"
          },
          "publishing_status": {
            "description": "publishing status of the release in the store.",
            "type": "string"
          },
          "type": {
            "description": "type of the distribution store currently stores type can be intune, googleplay or windows.",
            "enum": [
              "intune",
              "googleplay",
              "apple",
              "none"
            ],
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "DownloadContainer": {
        "description": "A download reference",
        "properties": {
          "uri": {
            "description": "Download URI",
            "type": "string"
          }
        },
        "required": [
          "uri"
        ],
        "type": "object"
      },
      "EmailVerificationRequest": {
        "properties": {
          "token": {
            "description": "The verification token that was sent to the user",
            "type": "string"
          }
        },
        "required": [
          "token"
        ],
        "type": "object"
      },
      "Error": {
        "description": "Error",
        "properties": {
          "error": {
            "properties": {
              "code": {
                "description": "The status code return by the API. It can be 400 or 403 or 500.",
                "enum": [
                  400,
                  403,
                  500
                ],
                "type": "integer"
              },
              "message": {
                "description": "The reason for the request failed.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "ErrorAppBuilds": {
        "properties": {
          "appBuilds": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ErrorAttachment": {
        "properties": {
          "appId": {
            "type": "string"
          },
          "attachmentId": {
            "type": "string"
          },
          "blobLocation": {
            "type": "string"
          },
          "contentType": {
            "type": "string"
          },
          "crashId": {
            "type": "string"
          },
          "createdTime": {
            "format": "date-time",
            "type": "string"
          },
          "fileName": {
            "type": "string"
          },
          "size": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ErrorAttachmentLocation": {
        "properties": {
          "uri": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ErrorAttachmentText": {
        "properties": {
          "content": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ErrorAttachments": {
        "items": {
          "properties": {
            "appId": {
              "type": "string"
            },
            "attachmentId": {
              "type": "string"
            },
            "blobLocation": {
              "type": "string"
            },
            "contentType": {
              "type": "string"
            },
            "crashId": {
              "type": "string"
            },
            "createdTime": {
              "format": "date-time",
              "type": "string"
            },
            "fileName": {
              "type": "string"
            },
            "size": {
              "format": "int64",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "type": "array"
      },
      "ErrorCounts": {
        "properties": {
          "count": {
            "description": "total error count",
            "format": "int64",
            "type": "integer"
          },
          "errors": {
            "description": "the total error count for day",
            "items": {
              "properties": {
                "count": {
                  "description": "count of the object",
                  "format": "int64",
                  "type": "integer"
                },
                "datetime": {
                  "description": "the ISO 8601 datetime",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ErrorDateTimeCounts": {
        "properties": {
          "count": {
            "description": "count of the object",
            "format": "int64",
            "type": "integer"
          },
          "datetime": {
            "description": "the ISO 8601 datetime",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ErrorDateTimePercentages": {
        "properties": {
          "datetime": {
            "description": "the ISO 8601 datetime",
            "type": "string"
          },
          "percentage": {
            "description": "percentage of the object",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "ErrorDeleteCounter": {
        "properties": {
          "appId": {
            "type": "string"
          },
          "attachmentsDeleted": {
            "type": "integer"
          },
          "blobsFailed": {
            "type": "integer"
          },
          "blobsSucceeded": {
            "type": "integer"
          },
          "errorGroupId": {
            "type": "string"
          },
          "errorId": {
            "type": "string"
          },
          "errorsDeleted": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ErrorDetails": {
        "properties": {
          "code": {
            "enum": [
              "BadRequest",
              "Conflict",
              "NotAcceptable",
              "NotFound",
              "InternalServerError",
              "Unauthorized",
              "TooManyRequests"
            ],
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "code",
          "message"
        ],
        "type": "object"
      },
      "ErrorDetailsv2": {
        "properties": {
          "code": {
            "enum": [
              "BadRequest",
              "Conflict",
              "NotAcceptable",
              "NotFound",
              "InternalServerError",
              "Unauthorized"
            ],
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "code",
          "message"
        ],
        "type": "object"
      },
      "ErrorDownload": {
        "format": "file",
        "type": "object"
      },
      "ErrorDownloadLink": {
        "properties": {
          "link": {
            "type": "string"
          }
        },
        "required": [
          "link"
        ],
        "type": "object"
      },
      "ErrorFreeDevicePercentages": {
        "properties": {
          "averagePercentage": {
            "description": "Average percentage",
            "format": "double",
            "type": "number"
          },
          "dailyPercentages": {
            "description": "The error-free percentage per day.",
            "items": {
              "properties": {
                "datetime": {
                  "description": "the ISO 8601 datetime",
                  "type": "string"
                },
                "percentage": {
                  "description": "percentage of the object",
                  "format": "double",
                  "type": "number"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ErrorGroup": {
        "allOf": [
          {
            "properties": {
              "annotation": {
                "type": "string"
              },
              "state": {
                "enum": [
                  "open",
                  "closed",
                  "ignored"
                ],
                "type": "string"
              }
            },
            "required": [
              "state"
            ],
            "type": "object"
          }
        ],
        "properties": {
          "appBuild": {
            "type": "string"
          },
          "appVersion": {
            "type": "string"
          },
          "codeRaw": {
            "type": "string"
          },
          "count": {
            "format": "int64",
            "type": "integer"
          },
          "deviceCount": {
            "format": "int64",
            "type": "integer"
          },
          "errorGroupId": {
            "type": "string"
          },
          "exceptionAppCode": {
            "type": "boolean"
          },
          "exceptionClassMethod": {
            "type": "boolean"
          },
          "exceptionClassName": {
            "type": "string"
          },
          "exceptionFile": {
            "type": "string"
          },
          "exceptionLine": {
            "type": "string"
          },
          "exceptionMessage": {
            "type": "string"
          },
          "exceptionMethod": {
            "type": "string"
          },
          "exceptionType": {
            "type": "string"
          },
          "firstOccurrence": {
            "format": "date-time",
            "type": "string"
          },
          "hidden": {
            "type": "boolean"
          },
          "lastOccurrence": {
            "format": "date-time",
            "type": "string"
          },
          "reasonFrames": {
            "items": {
              "properties": {
                "appCode": {
                  "description": "this line isn't from any framework",
                  "type": "boolean"
                },
                "classMethod": {
                  "description": "is a class method",
                  "type": "boolean"
                },
                "className": {
                  "description": "name of the class",
                  "type": "string"
                },
                "codeFormatted": {
                  "description": "Formatted frame string",
                  "type": "string"
                },
                "codeRaw": {
                  "description": "Unformatted Frame string",
                  "type": "string"
                },
                "exceptionType": {
                  "description": "Exception type.",
                  "type": "string"
                },
                "file": {
                  "description": "name of the file",
                  "type": "string"
                },
                "frameworkName": {
                  "description": "Name of the framework",
                  "type": "string"
                },
                "language": {
                  "description": "programming language of the frame",
                  "enum": [
                    "JavaScript",
                    "CSharp",
                    "Objective-C",
                    "Objective-Cpp",
                    "Cpp",
                    "C",
                    "Swift",
                    "Java",
                    "Unknown"
                  ],
                  "type": "string"
                },
                "line": {
                  "description": "line number",
                  "type": "integer"
                },
                "method": {
                  "description": "name of the method",
                  "type": "string"
                },
                "methodParams": {
                  "description": "parameters of the frames method",
                  "type": "string"
                },
                "osExceptionType": {
                  "description": "OS exception type. (aka. SIGNAL)",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "errorGroupId",
          "appVersion",
          "state",
          "count",
          "deviceCount",
          "firstOccurrence",
          "lastOccurrence"
        ],
        "type": "object"
      },
      "ErrorGroupListItem": {
        "allOf": [
          {
            "allOf": [
              {
                "properties": {
                  "annotation": {
                    "type": "string"
                  },
                  "state": {
                    "enum": [
                      "open",
                      "closed",
                      "ignored"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "state"
                ],
                "type": "object"
              }
            ],
            "properties": {
              "appBuild": {
                "type": "string"
              },
              "appVersion": {
                "type": "string"
              },
              "codeRaw": {
                "type": "string"
              },
              "count": {
                "format": "int64",
                "type": "integer"
              },
              "deviceCount": {
                "format": "int64",
                "type": "integer"
              },
              "errorGroupId": {
                "type": "string"
              },
              "exceptionAppCode": {
                "type": "boolean"
              },
              "exceptionClassMethod": {
                "type": "boolean"
              },
              "exceptionClassName": {
                "type": "string"
              },
              "exceptionFile": {
                "type": "string"
              },
              "exceptionLine": {
                "type": "string"
              },
              "exceptionMessage": {
                "type": "string"
              },
              "exceptionMethod": {
                "type": "string"
              },
              "exceptionType": {
                "type": "string"
              },
              "firstOccurrence": {
                "format": "date-time",
                "type": "string"
              },
              "hidden": {
                "type": "boolean"
              },
              "lastOccurrence": {
                "format": "date-time",
                "type": "string"
              },
              "reasonFrames": {
                "items": {
                  "properties": {
                    "appCode": {
                      "description": "this line isn't from any framework",
                      "type": "boolean"
                    },
                    "classMethod": {
                      "description": "is a class method",
                      "type": "boolean"
                    },
                    "className": {
                      "description": "name of the class",
                      "type": "string"
                    },
                    "codeFormatted": {
                      "description": "Formatted frame string",
                      "type": "string"
                    },
                    "codeRaw": {
                      "description": "Unformatted Frame string",
                      "type": "string"
                    },
                    "exceptionType": {
                      "description": "Exception type.",
                      "type": "string"
                    },
                    "file": {
                      "description": "name of the file",
                      "type": "string"
                    },
                    "frameworkName": {
                      "description": "Name of the framework",
                      "type": "string"
                    },
                    "language": {
                      "description": "programming language of the frame",
                      "enum": [
                        "JavaScript",
                        "CSharp",
                        "Objective-C",
                        "Objective-Cpp",
                        "Cpp",
                        "C",
                        "Swift",
                        "Java",
                        "Unknown"
                      ],
                      "type": "string"
                    },
                    "line": {
                      "description": "line number",
                      "type": "integer"
                    },
                    "method": {
                      "description": "name of the method",
                      "type": "string"
                    },
                    "methodParams": {
                      "description": "parameters of the frames method",
                      "type": "string"
                    },
                    "osExceptionType": {
                      "description": "OS exception type. (aka. SIGNAL)",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              }
            },
            "required": [
              "errorGroupId",
              "appVersion",
              "state",
              "count",
              "deviceCount",
              "firstOccurrence",
              "lastOccurrence"
            ],
            "type": "object"
          }
        ],
        "type": "object"
      },
      "ErrorGroupModel": {
        "properties": {
          "errorCount": {
            "description": "count of errors in a model",
            "format": "int64",
            "type": "integer"
          },
          "modelCode": {
            "description": "model code",
            "type": "string"
          },
          "modelName": {
            "description": "model name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ErrorGroupModels": {
        "properties": {
          "errorCount": {
            "format": "int64",
            "type": "integer"
          },
          "models": {
            "items": {
              "properties": {
                "errorCount": {
                  "description": "count of errors in a model",
                  "format": "int64",
                  "type": "integer"
                },
                "modelCode": {
                  "description": "model code",
                  "type": "string"
                },
                "modelName": {
                  "description": "model name",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ErrorGroupOperatingSystem": {
        "properties": {
          "errorCount": {
            "description": "count of OS",
            "format": "int64",
            "type": "integer"
          },
          "operatingSystemName": {
            "description": "OS name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ErrorGroupOperatingSystems": {
        "properties": {
          "errorCount": {
            "format": "int64",
            "type": "integer"
          },
          "operatingSystems": {
            "items": {
              "properties": {
                "errorCount": {
                  "description": "count of OS",
                  "format": "int64",
                  "type": "integer"
                },
                "operatingSystemName": {
                  "description": "OS name",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ErrorGroupState": {
        "properties": {
          "annotation": {
            "type": "string"
          },
          "state": {
            "enum": [
              "open",
              "closed",
              "ignored"
            ],
            "type": "string"
          }
        },
        "required": [
          "state"
        ],
        "type": "object"
      },
      "ErrorGroups": {
        "properties": {
          "errorGroups": {
            "items": {
              "allOf": [
                {
                  "allOf": [
                    {
                      "properties": {
                        "annotation": {
                          "type": "string"
                        },
                        "state": {
                          "enum": [
                            "open",
                            "closed",
                            "ignored"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "state"
                      ],
                      "type": "object"
                    }
                  ],
                  "properties": {
                    "appBuild": {
                      "type": "string"
                    },
                    "appVersion": {
                      "type": "string"
                    },
                    "codeRaw": {
                      "type": "string"
                    },
                    "count": {
                      "format": "int64",
                      "type": "integer"
                    },
                    "deviceCount": {
                      "format": "int64",
                      "type": "integer"
                    },
                    "errorGroupId": {
                      "type": "string"
                    },
                    "exceptionAppCode": {
                      "type": "boolean"
                    },
                    "exceptionClassMethod": {
                      "type": "boolean"
                    },
                    "exceptionClassName": {
                      "type": "string"
                    },
                    "exceptionFile": {
                      "type": "string"
                    },
                    "exceptionLine": {
                      "type": "string"
                    },
                    "exceptionMessage": {
                      "type": "string"
                    },
                    "exceptionMethod": {
                      "type": "string"
                    },
                    "exceptionType": {
                      "type": "string"
                    },
                    "firstOccurrence": {
                      "format": "date-time",
                      "type": "string"
                    },
                    "hidden": {
                      "type": "boolean"
                    },
                    "lastOccurrence": {
                      "format": "date-time",
                      "type": "string"
                    },
                    "reasonFrames": {
                      "items": {
                        "properties": {
                          "appCode": {
                            "description": "this line isn't from any framework",
                            "type": "boolean"
                          },
                          "classMethod": {
                            "description": "is a class method",
                            "type": "boolean"
                          },
                          "className": {
                            "description": "name of the class",
                            "type": "string"
                          },
                          "codeFormatted": {
                            "description": "Formatted frame string",
                            "type": "string"
                          },
                          "codeRaw": {
                            "description": "Unformatted Frame string",
                            "type": "string"
                          },
                          "exceptionType": {
                            "description": "Exception type.",
                            "type": "string"
                          },
                          "file": {
                            "description": "name of the file",
                            "type": "string"
                          },
                          "frameworkName": {
                            "description": "Name of the framework",
                            "type": "string"
                          },
                          "language": {
                            "description": "programming language of the frame",
                            "enum": [
                              "JavaScript",
                              "CSharp",
                              "Objective-C",
                              "Objective-Cpp",
                              "Cpp",
                              "C",
                              "Swift",
                              "Java",
                              "Unknown"
                            ],
                            "type": "string"
                          },
                          "line": {
                            "description": "line number",
                            "type": "integer"
                          },
                          "method": {
                            "description": "name of the method",
                            "type": "string"
                          },
                          "methodParams": {
                            "description": "parameters of the frames method",
                            "type": "string"
                          },
                          "osExceptionType": {
                            "description": "OS exception type. (aka. SIGNAL)",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errorGroupId",
                    "appVersion",
                    "state",
                    "count",
                    "deviceCount",
                    "firstOccurrence",
                    "lastOccurrence"
                  ],
                  "type": "object"
                }
              ],
              "type": "object"
            },
            "type": "array"
          },
          "nextLink": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ErrorGroupsSearchResult": {
        "properties": {
          "errorGroups": {
            "items": {
              "allOf": [
                {
                  "allOf": [
                    {
                      "properties": {
                        "annotation": {
                          "type": "string"
                        },
                        "state": {
                          "enum": [
                            "open",
                            "closed",
                            "ignored"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "state"
                      ],
                      "type": "object"
                    }
                  ],
                  "properties": {
                    "appBuild": {
                      "type": "string"
                    },
                    "appVersion": {
                      "type": "string"
                    },
                    "codeRaw": {
                      "type": "string"
                    },
                    "count": {
                      "format": "int64",
                      "type": "integer"
                    },
                    "deviceCount": {
                      "format": "int64",
                      "type": "integer"
                    },
                    "errorGroupId": {
                      "type": "string"
                    },
                    "exceptionAppCode": {
                      "type": "boolean"
                    },
                    "exceptionClassMethod": {
                      "type": "boolean"
                    },
                    "exceptionClassName": {
                      "type": "string"
                    },
                    "exceptionFile": {
                      "type": "string"
                    },
                    "exceptionLine": {
                      "type": "string"
                    },
                    "exceptionMessage": {
                      "type": "string"
                    },
                    "exceptionMethod": {
                      "type": "string"
                    },
                    "exceptionType": {
                      "type": "string"
                    },
                    "firstOccurrence": {
                      "format": "date-time",
                      "type": "string"
                    },
                    "hidden": {
                      "type": "boolean"
                    },
                    "lastOccurrence": {
                      "format": "date-time",
                      "type": "string"
                    },
                    "reasonFrames": {
                      "items": {
                        "properties": {
                          "appCode": {
                            "description": "this line isn't from any framework",
                            "type": "boolean"
                          },
                          "classMethod": {
                            "description": "is a class method",
                            "type": "boolean"
                          },
                          "className": {
                            "description": "name of the class",
                            "type": "string"
                          },
                          "codeFormatted": {
                            "description": "Formatted frame string",
                            "type": "string"
                          },
                          "codeRaw": {
                            "description": "Unformatted Frame string",
                            "type": "string"
                          },
                          "exceptionType": {
                            "description": "Exception type.",
                            "type": "string"
                          },
                          "file": {
                            "description": "name of the file",
                            "type": "string"
                          },
                          "frameworkName": {
                            "description": "Name of the framework",
                            "type": "string"
                          },
                          "language": {
                            "description": "programming language of the frame",
                            "enum": [
                              "JavaScript",
                              "CSharp",
                              "Objective-C",
                              "Objective-Cpp",
                              "Cpp",
                              "C",
                              "Swift",
                              "Java",
                              "Unknown"
                            ],
                            "type": "string"
                          },
                          "line": {
                            "description": "line number",
                            "type": "integer"
                          },
                          "method": {
                            "description": "name of the method",
                            "type": "string"
                          },
                          "methodParams": {
                            "description": "parameters of the frames method",
                            "type": "string"
                          },
                          "osExceptionType": {
                            "description": "OS exception type. (aka. SIGNAL)",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errorGroupId",
                    "appVersion",
                    "state",
                    "count",
                    "deviceCount",
                    "firstOccurrence",
                    "lastOccurrence"
                  ],
                  "type": "object"
                }
              ],
              "type": "object"
            },
            "type": "array"
          },
          "hasMoreResults": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ErrorLocation": {
        "properties": {
          "uri": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ErrorLog": {
        "allOf": [
          {
            "discriminator": {
              "propertyName": "type"
            },
            "properties": {
              "device": {
                "description": "Device characteristics.",
                "properties": {
                  "app_build": {
                    "description": "The app's build number, e.g. 42.\n",
                    "type": "string"
                  },
                  "app_namespace": {
                    "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                    "type": "string"
                  },
                  "app_version": {
                    "description": "Application version name, e.g. 1.1.0\n",
                    "type": "string"
                  },
                  "carrier_code": {
                    "description": "Carrier country code (for mobile devices).\n",
                    "type": "string"
                  },
                  "carrier_country": {
                    "description": "Carrier country.\n",
                    "type": "string"
                  },
                  "carrier_name": {
                    "description": "Carrier name (for mobile devices).\n",
                    "type": "string"
                  },
                  "live_update_deployment_key": {
                    "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                    "type": "string"
                  },
                  "live_update_package_hash": {
                    "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                    "type": "string"
                  },
                  "live_update_release_label": {
                    "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                    "type": "string"
                  },
                  "locale": {
                    "description": "Language code (example: en_US).\n",
                    "type": "string"
                  },
                  "model": {
                    "description": "Device model (example: iPad2,3).\n",
                    "type": "string"
                  },
                  "oem_name": {
                    "description": "Device manufacturer (example: HTC).\n",
                    "type": "string"
                  },
                  "os_api_level": {
                    "description": "API level when applicable like in Android (example: 15).\n",
                    "type": "integer"
                  },
                  "os_build": {
                    "description": "OS build code (example: LMY47X).\n",
                    "type": "string"
                  },
                  "os_name": {
                    "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                    "type": "string"
                  },
                  "os_version": {
                    "description": "OS version (example: 9.3.0).\n",
                    "type": "string"
                  },
                  "screen_size": {
                    "description": "Screen size of the device in pixels (example: 640x480).\n",
                    "type": "string"
                  },
                  "sdk_name": {
                    "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                    "type": "string"
                  },
                  "sdk_version": {
                    "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                    "type": "string"
                  },
                  "time_zone_offset": {
                    "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                    "maximum": 840,
                    "minimum": -840,
                    "type": "integer"
                  },
                  "wrapper_runtime_version": {
                    "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                    "type": "string"
                  },
                  "wrapper_sdk_name": {
                    "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                    "type": "string"
                  },
                  "wrapper_sdk_version": {
                    "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                    "type": "string"
                  }
                },
                "required": [
                  "sdk_name",
                  "sdk_version",
                  "os_name",
                  "os_version",
                  "locale",
                  "time_zone_offset",
                  "app_version",
                  "app_build"
                ],
                "type": "object"
              },
              "install_id": {
                "description": "Install ID.\n",
                "format": "uuid",
                "type": "string"
              },
              "timestamp": {
                "description": "Log creation timestamp.\n",
                "format": "date-time",
                "type": "string"
              },
              "type": {
                "description": "Log type.\n",
                "enum": [
                  "event",
                  "page",
                  "start_session",
                  "error",
                  "push_installation",
                  "start_service",
                  "custom_properties"
                ],
                "type": "string"
              }
            },
            "required": [
              "type",
              "timestamp",
              "install_id",
              "device"
            ],
            "type": "object"
          }
        ],
        "description": "Error log.",
        "properties": {
          "app_launch_toffset": {
            "description": "Corresponds to the number of milliseconds elapsed between the time the error occurred and the app was launched.\n",
            "format": "int64",
            "type": "integer"
          },
          "id": {
            "description": "Error identifier.",
            "format": "uuid",
            "type": "string"
          },
          "session_id": {
            "description": "Session ID.\n",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "session_id",
          "id"
        ],
        "type": "object",
        "x-ms-discriminator-value": "error"
      },
      "ErrorLog_Diagnostics": {
        "allOf": [
          {
            "discriminator": {
              "propertyName": "type"
            },
            "properties": {
              "device": {
                "description": "Device characteristics.",
                "properties": {
                  "app_build": {
                    "description": "The app's build number, e.g. 42.\n",
                    "type": "string"
                  },
                  "app_namespace": {
                    "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                    "type": "string"
                  },
                  "app_version": {
                    "description": "Application version name, e.g. 1.1.0\n",
                    "type": "string"
                  },
                  "carrier_code": {
                    "description": "Carrier country code (for mobile devices).\n",
                    "type": "string"
                  },
                  "carrier_country": {
                    "description": "Carrier country.\n",
                    "type": "string"
                  },
                  "carrier_name": {
                    "description": "Carrier name (for mobile devices).\n",
                    "type": "string"
                  },
                  "live_update_deployment_key": {
                    "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                    "type": "string"
                  },
                  "live_update_package_hash": {
                    "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                    "type": "string"
                  },
                  "live_update_release_label": {
                    "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                    "type": "string"
                  },
                  "locale": {
                    "description": "Language code (example: en_US).\n",
                    "type": "string"
                  },
                  "model": {
                    "description": "Device model (example: iPad2,3).\n",
                    "type": "string"
                  },
                  "oem_name": {
                    "description": "Device manufacturer (example: HTC).\n",
                    "type": "string"
                  },
                  "os_api_level": {
                    "description": "API level when applicable like in Android (example: 15).\n",
                    "type": "integer"
                  },
                  "os_build": {
                    "description": "OS build code (example: LMY47X).\n",
                    "type": "string"
                  },
                  "os_name": {
                    "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                    "type": "string"
                  },
                  "os_version": {
                    "description": "OS version (example: 9.3.0).\n",
                    "type": "string"
                  },
                  "screen_size": {
                    "description": "Screen size of the device in pixels (example: 640x480).\n",
                    "type": "string"
                  },
                  "sdk_name": {
                    "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                    "type": "string"
                  },
                  "sdk_version": {
                    "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                    "type": "string"
                  },
                  "time_zone_offset": {
                    "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                    "maximum": 840,
                    "minimum": -840,
                    "type": "integer"
                  },
                  "wrapper_runtime_version": {
                    "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                    "type": "string"
                  },
                  "wrapper_sdk_name": {
                    "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                    "type": "string"
                  },
                  "wrapper_sdk_version": {
                    "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                    "type": "string"
                  }
                },
                "required": [
                  "sdk_name",
                  "sdk_version",
                  "os_name",
                  "os_version",
                  "locale",
                  "time_zone_offset",
                  "app_version",
                  "app_build"
                ],
                "type": "object"
              },
              "install_id": {
                "description": "Install ID.\n",
                "format": "uuid",
                "type": "string"
              },
              "timestamp": {
                "description": "Log creation timestamp.\n",
                "format": "date-time",
                "type": "string"
              },
              "type": {
                "description": "Log type.\n",
                "enum": [
                  "event",
                  "page",
                  "start_session",
                  "error",
                  "push_installation",
                  "start_service",
                  "custom_properties"
                ],
                "type": "string"
              }
            },
            "required": [
              "type",
              "timestamp",
              "install_id",
              "device"
            ],
            "type": "object"
          }
        ],
        "description": "Error log.",
        "properties": {
          "app_launch_toffset": {
            "description": "Corresponds to the number of milliseconds elapsed between the time the error occurred and the app was launched.\n",
            "format": "int64",
            "type": "integer"
          },
          "id": {
            "description": "Error identifier.",
            "format": "uuid",
            "type": "string"
          },
          "session_id": {
            "description": "Session ID.\n",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "session_id",
          "id"
        ],
        "type": "object",
        "x-ms-discriminator-value": "error"
      },
      "ErrorResponse": {
        "properties": {
          "error": {
            "properties": {
              "code": {
                "enum": [
                  "BadRequest",
                  "Conflict",
                  "NotAcceptable",
                  "NotFound",
                  "InternalServerError",
                  "Unauthorized",
                  "TooManyRequests"
                ],
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "required": [
              "code",
              "message"
            ],
            "type": "object"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "ErrorResponsev2": {
        "properties": {
          "error": {
            "properties": {
              "code": {
                "enum": [
                  "BadRequest",
                  "Conflict",
                  "NotAcceptable",
                  "NotFound",
                  "InternalServerError",
                  "Unauthorized"
                ],
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "required": [
              "code",
              "message"
            ],
            "type": "object"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "ErrorRetentionSettings": {
        "properties": {
          "retention_in_days": {
            "enum": [
              28
            ],
            "type": "integer"
          }
        },
        "required": [
          "retention_in_days"
        ],
        "type": "object"
      },
      "ErrorsSearchResult": {
        "properties": {
          "errors": {
            "items": {
              "properties": {
                "country": {
                  "type": "string"
                },
                "deviceName": {
                  "type": "string"
                },
                "errorId": {
                  "type": "string"
                },
                "hasAttachments": {
                  "type": "boolean"
                },
                "hasBreadcrumbs": {
                  "type": "boolean"
                },
                "language": {
                  "type": "string"
                },
                "osType": {
                  "type": "string"
                },
                "osVersion": {
                  "type": "string"
                },
                "timestamp": {
                  "format": "date-time",
                  "type": "string"
                },
                "userId": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "hasMoreResults": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "Event": {
        "properties": {
          "count": {
            "format": "int64",
            "type": "integer"
          },
          "count_per_device": {
            "format": "double",
            "type": "number"
          },
          "count_per_session": {
            "format": "double",
            "type": "number"
          },
          "device_count": {
            "format": "int64",
            "type": "integer"
          },
          "id": {
            "format": "string",
            "type": "string"
          },
          "name": {
            "format": "string",
            "type": "string"
          },
          "previous_count": {
            "description": "The event count of previous time range of the event.",
            "format": "int64",
            "type": "integer"
          },
          "previous_device_count": {
            "description": "The device count of previous time range of the event.",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "EventCount": {
        "properties": {
          "count": {
            "items": {
              "properties": {
                "count": {
                  "description": "Count of the object.",
                  "format": "int64",
                  "type": "integer"
                },
                "datetime": {
                  "description": "The ISO 8601 datetime.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "previous_total_count": {
            "format": "int64",
            "type": "integer"
          },
          "total_count": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "EventCountPerDevice": {
        "properties": {
          "avg_count_per_device": {
            "format": "double",
            "type": "number"
          },
          "count_per_device": {
            "items": {
              "properties": {
                "count": {
                  "description": "Decimal count of the object.",
                  "format": "double",
                  "type": "number"
                },
                "datetime": {
                  "description": "The ISO 8601 datetime.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "previous_avg_count_per_device": {
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "EventCountPerSession": {
        "properties": {
          "avg_count_per_session": {
            "format": "double",
            "type": "number"
          },
          "count_per_session": {
            "items": {
              "properties": {
                "count": {
                  "description": "Decimal count of the object.",
                  "format": "double",
                  "type": "number"
                },
                "datetime": {
                  "description": "The ISO 8601 datetime.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "previous_avg_count_per_session": {
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "EventDeviceCount": {
        "properties": {
          "devices_count": {
            "items": {
              "properties": {
                "count": {
                  "description": "Count of the object.",
                  "format": "int64",
                  "type": "integer"
                },
                "datetime": {
                  "description": "The ISO 8601 datetime.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "previous_total_devices_with_event": {
            "format": "int64",
            "type": "integer"
          },
          "total_devices": {
            "format": "int64",
            "type": "integer"
          },
          "total_devices_with_event": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "EventLog": {
        "allOf": [
          {
            "allOf": [
              {
                "discriminator": {
                  "propertyName": "type"
                },
                "properties": {
                  "device": {
                    "description": "Device characteristics.",
                    "properties": {
                      "app_build": {
                        "description": "The app's build number, e.g. 42.\n",
                        "type": "string"
                      },
                      "app_namespace": {
                        "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                        "type": "string"
                      },
                      "app_version": {
                        "description": "Application version name, e.g. 1.1.0\n",
                        "type": "string"
                      },
                      "carrier_code": {
                        "description": "Carrier country code (for mobile devices).\n",
                        "type": "string"
                      },
                      "carrier_country": {
                        "description": "Carrier country.\n",
                        "type": "string"
                      },
                      "carrier_name": {
                        "description": "Carrier name (for mobile devices).\n",
                        "type": "string"
                      },
                      "live_update_deployment_key": {
                        "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                        "type": "string"
                      },
                      "live_update_package_hash": {
                        "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                        "type": "string"
                      },
                      "live_update_release_label": {
                        "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                        "type": "string"
                      },
                      "locale": {
                        "description": "Language code (example: en_US).\n",
                        "type": "string"
                      },
                      "model": {
                        "description": "Device model (example: iPad2,3).\n",
                        "type": "string"
                      },
                      "oem_name": {
                        "description": "Device manufacturer (example: HTC).\n",
                        "type": "string"
                      },
                      "os_api_level": {
                        "description": "API level when applicable like in Android (example: 15).\n",
                        "type": "integer"
                      },
                      "os_build": {
                        "description": "OS build code (example: LMY47X).\n",
                        "type": "string"
                      },
                      "os_name": {
                        "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                        "type": "string"
                      },
                      "os_version": {
                        "description": "OS version (example: 9.3.0).\n",
                        "type": "string"
                      },
                      "screen_size": {
                        "description": "Screen size of the device in pixels (example: 640x480).\n",
                        "type": "string"
                      },
                      "sdk_name": {
                        "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                        "type": "string"
                      },
                      "sdk_version": {
                        "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                        "type": "string"
                      },
                      "time_zone_offset": {
                        "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                        "maximum": 840,
                        "minimum": -840,
                        "type": "integer"
                      },
                      "wrapper_runtime_version": {
                        "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                        "type": "string"
                      },
                      "wrapper_sdk_name": {
                        "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                        "type": "string"
                      },
                      "wrapper_sdk_version": {
                        "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                        "type": "string"
                      }
                    },
                    "required": [
                      "sdk_name",
                      "sdk_version",
                      "os_name",
                      "os_version",
                      "locale",
                      "time_zone_offset",
                      "app_version",
                      "app_build"
                    ],
                    "type": "object"
                  },
                  "install_id": {
                    "description": "Install ID.\n",
                    "format": "uuid",
                    "type": "string"
                  },
                  "timestamp": {
                    "description": "Log creation timestamp.\n",
                    "format": "date-time",
                    "type": "string"
                  },
                  "type": {
                    "description": "Log type.\n",
                    "enum": [
                      "event",
                      "page",
                      "start_session",
                      "error",
                      "push_installation",
                      "start_service",
                      "custom_properties"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "type",
                  "timestamp",
                  "install_id",
                  "device"
                ],
                "type": "object"
              }
            ],
            "properties": {
              "properties": {
                "additionalProperties": {
                  "type": "string"
                },
                "description": "Additional key/value pair parameters.\n",
                "type": "object"
              }
            },
            "type": "object"
          }
        ],
        "description": "Event log.",
        "properties": {
          "id": {
            "description": "Unique identifier for this event.\n",
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "description": "Name of the event.\n",
            "type": "string"
          },
          "session_id": {
            "description": "Session ID.\n",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "session_id"
        ],
        "type": "object",
        "x-ms-discriminator-value": "event"
      },
      "EventLog_Diagnostics": {
        "allOf": [
          {
            "allOf": [
              {
                "discriminator": {
                  "propertyName": "type"
                },
                "properties": {
                  "device": {
                    "description": "Device characteristics.",
                    "properties": {
                      "app_build": {
                        "description": "The app's build number, e.g. 42.\n",
                        "type": "string"
                      },
                      "app_namespace": {
                        "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                        "type": "string"
                      },
                      "app_version": {
                        "description": "Application version name, e.g. 1.1.0\n",
                        "type": "string"
                      },
                      "carrier_code": {
                        "description": "Carrier country code (for mobile devices).\n",
                        "type": "string"
                      },
                      "carrier_country": {
                        "description": "Carrier country.\n",
                        "type": "string"
                      },
                      "carrier_name": {
                        "description": "Carrier name (for mobile devices).\n",
                        "type": "string"
                      },
                      "live_update_deployment_key": {
                        "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                        "type": "string"
                      },
                      "live_update_package_hash": {
                        "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                        "type": "string"
                      },
                      "live_update_release_label": {
                        "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                        "type": "string"
                      },
                      "locale": {
                        "description": "Language code (example: en_US).\n",
                        "type": "string"
                      },
                      "model": {
                        "description": "Device model (example: iPad2,3).\n",
                        "type": "string"
                      },
                      "oem_name": {
                        "description": "Device manufacturer (example: HTC).\n",
                        "type": "string"
                      },
                      "os_api_level": {
                        "description": "API level when applicable like in Android (example: 15).\n",
                        "type": "integer"
                      },
                      "os_build": {
                        "description": "OS build code (example: LMY47X).\n",
                        "type": "string"
                      },
                      "os_name": {
                        "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                        "type": "string"
                      },
                      "os_version": {
                        "description": "OS version (example: 9.3.0).\n",
                        "type": "string"
                      },
                      "screen_size": {
                        "description": "Screen size of the device in pixels (example: 640x480).\n",
                        "type": "string"
                      },
                      "sdk_name": {
                        "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                        "type": "string"
                      },
                      "sdk_version": {
                        "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                        "type": "string"
                      },
                      "time_zone_offset": {
                        "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                        "maximum": 840,
                        "minimum": -840,
                        "type": "integer"
                      },
                      "wrapper_runtime_version": {
                        "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                        "type": "string"
                      },
                      "wrapper_sdk_name": {
                        "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                        "type": "string"
                      },
                      "wrapper_sdk_version": {
                        "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                        "type": "string"
                      }
                    },
                    "required": [
                      "sdk_name",
                      "sdk_version",
                      "os_name",
                      "os_version",
                      "locale",
                      "time_zone_offset",
                      "app_version",
                      "app_build"
                    ],
                    "type": "object"
                  },
                  "install_id": {
                    "description": "Install ID.\n",
                    "format": "uuid",
                    "type": "string"
                  },
                  "timestamp": {
                    "description": "Log creation timestamp.\n",
                    "format": "date-time",
                    "type": "string"
                  },
                  "type": {
                    "description": "Log type.\n",
                    "enum": [
                      "event",
                      "page",
                      "start_session",
                      "error",
                      "push_installation",
                      "start_service",
                      "custom_properties"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "type",
                  "timestamp",
                  "install_id",
                  "device"
                ],
                "type": "object"
              }
            ],
            "properties": {
              "properties": {
                "additionalProperties": {
                  "type": "string"
                },
                "description": "Additional key/value pair parameters.\n",
                "type": "object"
              }
            },
            "type": "object"
          }
        ],
        "description": "Event log.",
        "properties": {
          "id": {
            "description": "Unique identifier for this event.\n",
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "description": "Name of the event.\n",
            "type": "string"
          },
          "session_id": {
            "description": "Session ID.\n",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "session_id"
        ],
        "type": "object",
        "x-ms-discriminator-value": "event"
      },
      "EventProperties": {
        "description": "Event properties during the time range.",
        "properties": {
          "event_properties": {
            "items": {
              "description": "The event property.",
              "format": "string",
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "EventPropertyValue": {
        "description": "An event property value with counts.",
        "properties": {
          "count": {
            "description": "The count of the the event property value.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The event property value name.",
            "type": "string"
          },
          "previous_count": {
            "description": "The count of previous time range of the event property value.",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "EventPropertyValues": {
        "description": "Event property value counts during the time range in descending order.",
        "properties": {
          "total": {
            "description": "The total property value counts.",
            "format": "int64",
            "type": "integer"
          },
          "values": {
            "description": "The event property values.",
            "items": {
              "description": "An event property value with counts.",
              "properties": {
                "count": {
                  "description": "The count of the the event property value.",
                  "format": "int64",
                  "type": "integer"
                },
                "name": {
                  "description": "The event property value name.",
                  "type": "string"
                },
                "previous_count": {
                  "description": "The count of previous time range of the event property value.",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "EventResponseResult": {
        "allOf": [
          {
            "description": "Generic result for any alerting API operation",
            "properties": {
              "request_id": {
                "description": "Unique request identifier for tracking",
                "type": "string"
              }
            },
            "required": [
              "request_id"
            ],
            "type": "object"
          }
        ],
        "description": "Object returned in response to accepting an event occurance"
      },
      "EventSetting": {
        "description": "Event Setting",
        "properties": {
          "default_value": {
            "description": "Default frequency of event",
            "enum": [
              "Disabled",
              "Individual",
              "Daily",
              "DailyAndIndividual"
            ],
            "type": "string"
          },
          "event_type": {
            "description": "Event Name",
            "enum": [
              "crash_newCrashGroupCreated"
            ],
            "type": "string"
          },
          "value": {
            "description": "Frequency of event",
            "enum": [
              "Disabled",
              "Individual",
              "Daily",
              "DailyAndIndividual",
              "Default"
            ],
            "type": "string"
          }
        },
        "required": [
          "event_type",
          "value"
        ],
        "type": "object"
      },
      "Events": {
        "properties": {
          "events": {
            "items": {
              "properties": {
                "count": {
                  "format": "int64",
                  "type": "integer"
                },
                "count_per_device": {
                  "format": "double",
                  "type": "number"
                },
                "count_per_session": {
                  "format": "double",
                  "type": "number"
                },
                "device_count": {
                  "format": "int64",
                  "type": "integer"
                },
                "id": {
                  "format": "string",
                  "type": "string"
                },
                "name": {
                  "format": "string",
                  "type": "string"
                },
                "previous_count": {
                  "description": "The event count of previous time range of the event.",
                  "format": "int64",
                  "type": "integer"
                },
                "previous_device_count": {
                  "description": "The device count of previous time range of the event.",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "total": {
            "description": "The total count of events.",
            "format": "int64",
            "type": "integer"
          },
          "total_devices": {
            "description": "The active device over this period.",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Exception": {
        "description": "a exception",
        "properties": {
          "frames": {
            "description": "frames of the excetpion",
            "items": {
              "description": "a single frame of a stack trace",
              "properties": {
                "address": {
                  "description": "address of the frame",
                  "type": "string"
                },
                "app_code": {
                  "description": "this line isn't from any framework",
                  "type": "boolean"
                },
                "class_method": {
                  "description": "is a class method",
                  "type": "boolean"
                },
                "class_name": {
                  "description": "name of the class",
                  "type": "string"
                },
                "code_formatted": {
                  "description": "Formatted frame string",
                  "type": "string"
                },
                "code_raw": {
                  "description": "Raw frame string",
                  "type": "string"
                },
                "file": {
                  "description": "name of the file",
                  "type": "string"
                },
                "framework_name": {
                  "description": "Name of the framework",
                  "type": "string"
                },
                "language": {
                  "description": "programming language of the frame",
                  "enum": [
                    "JavaScript",
                    "CSharp",
                    "Objective-C",
                    "Objective-Cpp",
                    "Cpp",
                    "C",
                    "Swift",
                    "Java",
                    "Unknown"
                  ],
                  "type": "string"
                },
                "line": {
                  "description": "line number",
                  "type": "integer"
                },
                "method": {
                  "description": "name of the method",
                  "type": "string"
                },
                "method_params": {
                  "description": "parameters of the frames method",
                  "type": "string"
                },
                "relevant": {
                  "description": "frame should be shown always",
                  "type": "boolean"
                }
              },
              "required": [
                "code_raw",
                "code_formatted",
                "app_code"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "inner_exceptions": {
            "items": {
              "$ref": "#/components/schemas/Exception"
            },
            "type": "array"
          },
          "platform": {
            "description": "SDK/Platform this thread is beeing generated from",
            "enum": [
              "ios",
              "android",
              "xamarin",
              "react-native",
              "ndk",
              "unity",
              "other"
            ],
            "type": "string"
          },
          "reason": {
            "description": "Reason of the exception",
            "type": "string"
          },
          "relevant": {
            "description": "relevant exception (crashed)",
            "type": "boolean"
          },
          "type": {
            "description": "Type of the exception (NSSomethingException, NullPointerException)",
            "type": "string"
          }
        },
        "required": [
          "frames"
        ],
        "type": "object"
      },
      "ExportBlobConfiguration": {
        "allOf": [
          {
            "description": "Export configuration",
            "discriminator": {
              "propertyName": "type"
            },
            "properties": {
              "backfill": {
                "description": "Field to determine if backfilling should occur. The default value is true. If set to false export starts from date and time of config creation.",
                "type": "boolean"
              },
              "export_entities": {
                "items": {
                  "enum": [
                    "crashes",
                    "errors",
                    "attachments",
                    "no_logs"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "ExportEntity"
                  }
                },
                "type": "array"
              },
              "resource_group": {
                "description": "The resource group name on azure",
                "type": "string"
              },
              "resource_name": {
                "description": "The resource name on azure",
                "type": "string"
              },
              "type": {
                "description": "Type of export configuration",
                "enum": [
                  "blob_storage_connection_string",
                  "application_insights_instrumentation_key",
                  "blob_storage_linked_subscription",
                  "application_insights_linked_subscription"
                ],
                "type": "string"
              }
            },
            "required": [
              "type"
            ],
            "type": "object"
          }
        ],
        "description": "Configuration for export to Blob Storage with blob format",
        "properties": {
          "blob_path_format_kind": {
            "description": "The path to the blob when enum set to 'WithoutAppId' is 'year/month/day/hour/minute' and when set to 'WithAppId' is 'appId/year/month/day/hour/minute'",
            "enum": [
              "WithoutAppId",
              "WithAppId"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": false,
              "name": "BlobPathFormatKind"
            }
          }
        },
        "type": "object",
        "x-ms-discriminator-value": "export_blob_configuration"
      },
      "ExportConfiguration": {
        "description": "Export configuration",
        "discriminator": {
          "propertyName": "type"
        },
        "properties": {
          "backfill": {
            "description": "Field to determine if backfilling should occur. The default value is true. If set to false export starts from date and time of config creation.",
            "type": "boolean"
          },
          "export_entities": {
            "items": {
              "enum": [
                "crashes",
                "errors",
                "attachments",
                "no_logs"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "ExportEntity"
              }
            },
            "type": "array"
          },
          "resource_group": {
            "description": "The resource group name on azure",
            "type": "string"
          },
          "resource_name": {
            "description": "The resource name on azure",
            "type": "string"
          },
          "type": {
            "description": "Type of export configuration",
            "enum": [
              "blob_storage_connection_string",
              "application_insights_instrumentation_key",
              "blob_storage_linked_subscription",
              "application_insights_linked_subscription"
            ],
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "ExportConfigurationAppInsightsKey": {
        "allOf": [
          {
            "description": "Export configuration",
            "discriminator": {
              "propertyName": "type"
            },
            "properties": {
              "backfill": {
                "description": "Field to determine if backfilling should occur. The default value is true. If set to false export starts from date and time of config creation.",
                "type": "boolean"
              },
              "export_entities": {
                "items": {
                  "enum": [
                    "crashes",
                    "errors",
                    "attachments",
                    "no_logs"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "ExportEntity"
                  }
                },
                "type": "array"
              },
              "resource_group": {
                "description": "The resource group name on azure",
                "type": "string"
              },
              "resource_name": {
                "description": "The resource name on azure",
                "type": "string"
              },
              "type": {
                "description": "Type of export configuration",
                "enum": [
                  "blob_storage_connection_string",
                  "application_insights_instrumentation_key",
                  "blob_storage_linked_subscription",
                  "application_insights_linked_subscription"
                ],
                "type": "string"
              }
            },
            "required": [
              "type"
            ],
            "type": "object"
          }
        ],
        "description": "Configuration for export to Application Insights resource with customer provided intrumentation key",
        "properties": {
          "instrumentation_key": {
            "description": "Instrumentation key for Application Insights resource",
            "type": "string"
          }
        },
        "required": [
          "instrumentation_key"
        ],
        "type": "object",
        "x-ms-discriminator-value": "application_insights_instrumentation_key"
      },
      "ExportConfigurationAppInsightsLinkedSubscription": {
        "allOf": [
          {
            "description": "Export configuration",
            "discriminator": {
              "propertyName": "type"
            },
            "properties": {
              "backfill": {
                "description": "Field to determine if backfilling should occur. The default value is true. If set to false export starts from date and time of config creation.",
                "type": "boolean"
              },
              "export_entities": {
                "items": {
                  "enum": [
                    "crashes",
                    "errors",
                    "attachments",
                    "no_logs"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "ExportEntity"
                  }
                },
                "type": "array"
              },
              "resource_group": {
                "description": "The resource group name on azure",
                "type": "string"
              },
              "resource_name": {
                "description": "The resource name on azure",
                "type": "string"
              },
              "type": {
                "description": "Type of export configuration",
                "enum": [
                  "blob_storage_connection_string",
                  "application_insights_instrumentation_key",
                  "blob_storage_linked_subscription",
                  "application_insights_linked_subscription"
                ],
                "type": "string"
              }
            },
            "required": [
              "type"
            ],
            "type": "object"
          }
        ],
        "description": "Configuration for export to Application Insights resource with customer linked subscription.",
        "properties": {
          "subscription_id": {
            "description": "Id of customer subscription linked in App Center",
            "type": "string"
          }
        },
        "required": [
          "subscription_id"
        ],
        "type": "object",
        "x-ms-discriminator-value": "application_insights_linked_subscription"
      },
      "ExportConfigurationBlobStorageConnectionString": {
        "allOf": [
          {
            "allOf": [
              {
                "description": "Export configuration",
                "discriminator": {
                  "propertyName": "type"
                },
                "properties": {
                  "backfill": {
                    "description": "Field to determine if backfilling should occur. The default value is true. If set to false export starts from date and time of config creation.",
                    "type": "boolean"
                  },
                  "export_entities": {
                    "items": {
                      "enum": [
                        "crashes",
                        "errors",
                        "attachments",
                        "no_logs"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "ExportEntity"
                      }
                    },
                    "type": "array"
                  },
                  "resource_group": {
                    "description": "The resource group name on azure",
                    "type": "string"
                  },
                  "resource_name": {
                    "description": "The resource name on azure",
                    "type": "string"
                  },
                  "type": {
                    "description": "Type of export configuration",
                    "enum": [
                      "blob_storage_connection_string",
                      "application_insights_instrumentation_key",
                      "blob_storage_linked_subscription",
                      "application_insights_linked_subscription"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "type"
                ],
                "type": "object"
              }
            ],
            "description": "Configuration for export to Blob Storage with blob format",
            "properties": {
              "blob_path_format_kind": {
                "description": "The path to the blob when enum set to 'WithoutAppId' is 'year/month/day/hour/minute' and when set to 'WithAppId' is 'appId/year/month/day/hour/minute'",
                "enum": [
                  "WithoutAppId",
                  "WithAppId"
                ],
                "type": "string",
                "x-ms-enum": {
                  "modelAsString": false,
                  "name": "BlobPathFormatKind"
                }
              }
            },
            "type": "object",
            "x-ms-discriminator-value": "export_blob_configuration"
          }
        ],
        "description": "Configuration for export to Blob Storage with customer provided connection string",
        "properties": {
          "connection_string": {
            "description": "Connection string for blob storage account",
            "type": "string"
          }
        },
        "required": [
          "connection_string"
        ],
        "type": "object",
        "x-ms-discriminator-value": "blob_storage_connection_string"
      },
      "ExportConfigurationBlobStorageLinkedSubscription": {
        "allOf": [
          {
            "allOf": [
              {
                "description": "Export configuration",
                "discriminator": {
                  "propertyName": "type"
                },
                "properties": {
                  "backfill": {
                    "description": "Field to determine if backfilling should occur. The default value is true. If set to false export starts from date and time of config creation.",
                    "type": "boolean"
                  },
                  "export_entities": {
                    "items": {
                      "enum": [
                        "crashes",
                        "errors",
                        "attachments",
                        "no_logs"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "ExportEntity"
                      }
                    },
                    "type": "array"
                  },
                  "resource_group": {
                    "description": "The resource group name on azure",
                    "type": "string"
                  },
                  "resource_name": {
                    "description": "The resource name on azure",
                    "type": "string"
                  },
                  "type": {
                    "description": "Type of export configuration",
                    "enum": [
                      "blob_storage_connection_string",
                      "application_insights_instrumentation_key",
                      "blob_storage_linked_subscription",
                      "application_insights_linked_subscription"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "type"
                ],
                "type": "object"
              }
            ],
            "description": "Configuration for export to Blob Storage with blob format",
            "properties": {
              "blob_path_format_kind": {
                "description": "The path to the blob when enum set to 'WithoutAppId' is 'year/month/day/hour/minute' and when set to 'WithAppId' is 'appId/year/month/day/hour/minute'",
                "enum": [
                  "WithoutAppId",
                  "WithAppId"
                ],
                "type": "string",
                "x-ms-enum": {
                  "modelAsString": false,
                  "name": "BlobPathFormatKind"
                }
              }
            },
            "type": "object",
            "x-ms-discriminator-value": "export_blob_configuration"
          }
        ],
        "description": "Configuration for export to Blob Storage with customer linked subscription.",
        "properties": {
          "subscription_id": {
            "description": "Id of customer subscription linked in App Center",
            "type": "string"
          }
        },
        "required": [
          "subscription_id"
        ],
        "type": "object",
        "x-ms-discriminator-value": "blob_storage_linked_subscription"
      },
      "ExportConfigurationListResult": {
        "description": "List of export configurations",
        "properties": {
          "nextLink": {
            "type": "string"
          },
          "total": {
            "description": "the total count of exports",
            "format": "int64",
            "type": "integer"
          },
          "values": {
            "items": {
              "description": "Export configuration result",
              "properties": {
                "creation_time": {
                  "description": "Creation time in ISO 8601 format",
                  "type": "string"
                },
                "export_configuration": {
                  "description": "Export configuration",
                  "discriminator": {
                    "propertyName": "type"
                  },
                  "properties": {
                    "backfill": {
                      "description": "Field to determine if backfilling should occur. The default value is true. If set to false export starts from date and time of config creation.",
                      "type": "boolean"
                    },
                    "export_entities": {
                      "items": {
                        "enum": [
                          "crashes",
                          "errors",
                          "attachments",
                          "no_logs"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "ExportEntity"
                        }
                      },
                      "type": "array"
                    },
                    "resource_group": {
                      "description": "The resource group name on azure",
                      "type": "string"
                    },
                    "resource_name": {
                      "description": "The resource name on azure",
                      "type": "string"
                    },
                    "type": {
                      "description": "Type of export configuration",
                      "enum": [
                        "blob_storage_connection_string",
                        "application_insights_instrumentation_key",
                        "blob_storage_linked_subscription",
                        "application_insights_linked_subscription"
                      ],
                      "type": "string"
                    }
                  },
                  "required": [
                    "type"
                  ],
                  "type": "object"
                },
                "export_entities": {
                  "items": {
                    "enum": [
                      "crashes",
                      "errors",
                      "attachments",
                      "no_logs"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": false,
                      "name": "ExportEntity"
                    }
                  },
                  "type": "array"
                },
                "export_type": {
                  "description": "Target resource type of export configuration",
                  "enum": [
                    "BlobStorage",
                    "AppInsights"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "ExportType"
                  }
                },
                "id": {
                  "description": "Export configuration id",
                  "type": "string"
                },
                "last_run_time": {
                  "description": "Latest time in ISO 8601 format when export completed successfully",
                  "type": "string"
                },
                "resource_group": {
                  "description": "resource group for the storage account/App Insights resource",
                  "type": "string"
                },
                "resource_name": {
                  "description": "Storage accout or Appinsights resource name",
                  "type": "string"
                },
                "state": {
                  "description": "State of the export job",
                  "enum": [
                    "Enabled",
                    "Disabled",
                    "Pending",
                    "Deleted",
                    "Invalid"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "ExportState"
                  }
                },
                "state_info": {
                  "description": "Additional information about export configuration state",
                  "type": "string"
                }
              },
              "required": [
                "id",
                "export_type",
                "creation_time",
                "state"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "values"
        ],
        "type": "object"
      },
      "ExportConfigurationResult": {
        "description": "Export configuration result",
        "properties": {
          "creation_time": {
            "description": "Creation time in ISO 8601 format",
            "type": "string"
          },
          "export_configuration": {
            "description": "Export configuration",
            "discriminator": {
              "propertyName": "type"
            },
            "properties": {
              "backfill": {
                "description": "Field to determine if backfilling should occur. The default value is true. If set to false export starts from date and time of config creation.",
                "type": "boolean"
              },
              "export_entities": {
                "items": {
                  "enum": [
                    "crashes",
                    "errors",
                    "attachments",
                    "no_logs"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "ExportEntity"
                  }
                },
                "type": "array"
              },
              "resource_group": {
                "description": "The resource group name on azure",
                "type": "string"
              },
              "resource_name": {
                "description": "The resource name on azure",
                "type": "string"
              },
              "type": {
                "description": "Type of export configuration",
                "enum": [
                  "blob_storage_connection_string",
                  "application_insights_instrumentation_key",
                  "blob_storage_linked_subscription",
                  "application_insights_linked_subscription"
                ],
                "type": "string"
              }
            },
            "required": [
              "type"
            ],
            "type": "object"
          },
          "export_entities": {
            "items": {
              "enum": [
                "crashes",
                "errors",
                "attachments",
                "no_logs"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "ExportEntity"
              }
            },
            "type": "array"
          },
          "export_type": {
            "description": "Target resource type of export configuration",
            "enum": [
              "BlobStorage",
              "AppInsights"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": false,
              "name": "ExportType"
            }
          },
          "id": {
            "description": "Export configuration id",
            "type": "string"
          },
          "last_run_time": {
            "description": "Latest time in ISO 8601 format when export completed successfully",
            "type": "string"
          },
          "resource_group": {
            "description": "resource group for the storage account/App Insights resource",
            "type": "string"
          },
          "resource_name": {
            "description": "Storage accout or Appinsights resource name",
            "type": "string"
          },
          "state": {
            "description": "State of the export job",
            "enum": [
              "Enabled",
              "Disabled",
              "Pending",
              "Deleted",
              "Invalid"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": false,
              "name": "ExportState"
            }
          },
          "state_info": {
            "description": "Additional information about export configuration state",
            "type": "string"
          }
        },
        "required": [
          "id",
          "export_type",
          "creation_time",
          "state"
        ],
        "type": "object"
      },
      "ExternalRepositoryProvider": {
        "description": "Supported external providers of source control repositories",
        "enum": [
          "github"
        ],
        "type": "string"
      },
      "ExternalStoreRequest": {
        "description": "ExternalStoreRequest",
        "properties": {
          "intune_details": {
            "properties": {
              "app_category": {
                "properties": {
                  "name": {
                    "description": "display name for the app category",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "secret_json": {
                "properties": {
                  "id_token": {
                    "description": "the id token of user",
                    "type": "string"
                  },
                  "refresh_token": {
                    "description": "the refresh token for user",
                    "type": "string"
                  },
                  "refresh_token_expiry": {
                    "description": "the expiry of refresh token",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "target_audience": {
                "properties": {
                  "name": {
                    "description": "display name for the target audience/group",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "tenant_id": {
                "description": "tenant id of the intune store",
                "type": "string"
              }
            },
            "type": "object"
          },
          "name": {
            "description": "name of the store. In case of googleplay, and Apple store this is fixed to Production.",
            "type": "string"
          },
          "service_connection_id": {
            "description": "Id for the shared service connection. In case of Apple AppStore, this connection will be used to create and connect to the Apple AppStore in Mobile Center.",
            "type": "string"
          },
          "track": {
            "description": "track of the store. Can be production, alpha & beta for googleplay. Can be production, testflight-internal & testflight-external for Apple Store.",
            "enum": [
              "production",
              "alpha",
              "beta",
              "testflight-internal",
              "testflight-external"
            ],
            "type": "string"
          },
          "type": {
            "description": "store Type",
            "enum": [
              "googleplay",
              "apple",
              "intune"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ExternalStoreResponse": {
        "description": "ExternalStoreResponse",
        "properties": {
          "created_by": {
            "description": "The ID of the principal that created the store.",
            "type": "string"
          },
          "created_by_principal_type": {
            "description": "The type of the principal that created the store.",
            "type": "string"
          },
          "id": {
            "description": "Store id",
            "type": "string"
          },
          "intune_details": {
            "description": "Store details for intune",
            "properties": {
              "app_category": {
                "properties": {
                  "id": {
                    "description": "ID for the category.",
                    "type": "string"
                  },
                  "name": {
                    "description": "display name for the app category",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "target_audience": {
                "properties": {
                  "id": {
                    "description": "ID for the target audience/group.",
                    "type": "string"
                  },
                  "name": {
                    "description": "display name for the target audience/group",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "name": {
            "description": "Store Name",
            "type": "string"
          },
          "service_connection_id": {
            "description": "Id for the shared service connection. In case of Apple / GooglePlay stores, this connection will be used to connect to the Apple / Google stores in App Center.",
            "type": "string"
          },
          "track": {
            "description": "Store track",
            "enum": [
              "production",
              "alpha",
              "beta",
              "testflight-internal",
              "testflight-external"
            ],
            "type": "string"
          },
          "type": {
            "description": "Store Type",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ExternalUserRequest": {
        "properties": {
          "app_invitation": {
            "description": "The token of the app invitation which lead to signup",
            "type": "string"
          },
          "avatar_url": {
            "description": "The avatar URL of the user",
            "type": "string"
          },
          "display_name": {
            "description": "The full name of the user. Might for example be first and last name",
            "type": "string"
          },
          "email": {
            "description": "The email address of the user",
            "type": "string"
          },
          "name": {
            "description": "The unique name that is used to identify the user. If no explicit value is given, a default will be auto-generated from the `display_name` value",
            "type": "string"
          },
          "organization_invitation": {
            "description": "The token of the organization invitation which lead to signup",
            "type": "string"
          },
          "tester_invitation": {
            "description": "The token of the test invitation which lead to signup",
            "type": "string"
          }
        },
        "required": [
          "email"
        ],
        "type": "object"
      },
      "ExternallyHostedReleaseCreateRequest": {
        "description": "A request containing information for creating an externally hosted release.",
        "properties": {
          "build_number": {
            "description": "The build number of the uploaded binary",
            "type": "string"
          },
          "build_version": {
            "description": "The build version of the uploaded binary",
            "type": "string"
          },
          "external_download_url": {
            "description": "The external URL to the release's binary.",
            "type": "string"
          }
        },
        "required": [
          "build_version",
          "external_download_url"
        ],
        "type": "object"
      },
      "Failure": {
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "required": [
          "message"
        ],
        "type": "object"
      },
      "FeatureCreateRequest": {
        "properties": {
          "description": {
            "description": "The friendly name of the feature",
            "type": "string"
          },
          "display_name": {
            "description": "The full (friendly) name of the feature.",
            "type": "string"
          },
          "name": {
            "description": "The unique name of the feature",
            "type": "string"
          },
          "state": {
            "description": "The state of the feature",
            "type": "integer"
          }
        },
        "required": [
          "name",
          "display_name"
        ],
        "type": "object"
      },
      "FeatureFlagResponse": {
        "properties": {
          "is_enabled": {
            "description": "Wether the feature flag is enabled",
            "type": "boolean"
          }
        },
        "required": [
          "is_enabled"
        ],
        "type": "object"
      },
      "FeatureFlagsResponse": {
        "properties": {
          "feature_flags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "feature_flags"
        ],
        "type": "object"
      },
      "FeaturePatchRequest": {
        "properties": {
          "description": {
            "description": "The friendly name of the feature",
            "type": "string"
          },
          "display_name": {
            "description": "The full (friendly) name of the feature.",
            "type": "string"
          },
          "state": {
            "description": "The state of the feature",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "FeatureResponse": {
        "properties": {
          "created_at": {
            "description": "The creation date of the feature",
            "type": "string"
          },
          "description": {
            "description": "The description of the feature",
            "type": "string"
          },
          "display_name": {
            "description": "The friendly name of the feature",
            "type": "string"
          },
          "name": {
            "description": "The unique name of the feature",
            "type": "string"
          },
          "state": {
            "description": "The state (unset, enabled, disabled) of the feature",
            "type": "integer"
          },
          "updated_at": {
            "description": "The date the feature was last updated at",
            "type": "string"
          }
        },
        "required": [
          "name",
          "display_name",
          "state"
        ],
        "type": "object"
      },
      "FileAsset": {
        "properties": {
          "id": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "uploadDomain": {
            "type": "string"
          },
          "uploadWindowLocation": {
            "type": "string"
          },
          "urlEncodedToken": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "FileValidationDetails": {
        "description": "Additional details required for file validation",
        "properties": {
          "certificateUploadId": {
            "type": "string"
          },
          "p12password": {
            "type": "string"
          }
        },
        "required": [
          "p12password"
        ],
        "type": "object"
      },
      "FilterReleasesContainer": {
        "properties": {
          "releases": {
            "items": {
              "properties": {
                "release": {
                  "description": "Release Id.\n",
                  "format": "string",
                  "type": "string"
                }
              },
              "required": [
                "release"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "FilterVersionsContainer": {
        "properties": {
          "versions": {
            "items": {
              "properties": {
                "build": {
                  "description": "App build number.\n",
                  "format": "string",
                  "type": "string"
                },
                "version": {
                  "description": "App version.\n",
                  "format": "string",
                  "type": "string"
                }
              },
              "required": [
                "version",
                "build"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GDPRInvitationDetailResponse": {
        "properties": {
          "app": {
            "allOf": [
              {
                "properties": {
                  "description": {
                    "description": "The description of the app",
                    "type": "string"
                  },
                  "display_name": {
                    "description": "The display name of the app",
                    "type": "string"
                  },
                  "icon_source": {
                    "description": "The string representation of the source of the app's icon",
                    "type": "string"
                  },
                  "icon_url": {
                    "description": "The string representation of the URL pointing to the app's icon",
                    "type": "string"
                  },
                  "id": {
                    "description": "The unique ID (UUID) of the app",
                    "format": "uuid",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the app used in URLs",
                    "type": "string"
                  },
                  "os": {
                    "description": "The OS the app will be running on",
                    "enum": [
                      "Android",
                      "iOS",
                      "macOS",
                      "Tizen",
                      "tvOS",
                      "Windows",
                      "Linux",
                      "Custom"
                    ],
                    "type": "string"
                  },
                  "owner": {
                    "description": "The information about the app's owner",
                    "properties": {
                      "avatar_url": {
                        "description": "The avatar URL of the owner",
                        "type": "string"
                      },
                      "display_name": {
                        "description": "The owner's display name",
                        "type": "string"
                      },
                      "email": {
                        "description": "The owner's email address",
                        "type": "string"
                      },
                      "id": {
                        "description": "The unique id (UUID) of the owner",
                        "format": "uuid",
                        "type": "string"
                      },
                      "name": {
                        "description": "The unique name that used to identify the owner",
                        "type": "string"
                      },
                      "type": {
                        "description": "The owner type. Can either be 'org' or 'user'",
                        "enum": [
                          "org",
                          "user"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "display_name",
                      "name",
                      "type"
                    ],
                    "type": "object"
                  },
                  "release_type": {
                    "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
                    "type": "string"
                  }
                },
                "required": [
                  "id",
                  "display_name",
                  "name",
                  "os",
                  "owner"
                ],
                "type": "object"
              },
              {
                "properties": {
                  "app_secret": {
                    "description": "A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics",
                    "type": "string"
                  },
                  "azure_subscription": {
                    "properties": {
                      "is_billable": {
                        "description": "If the subscription can be used for billing",
                        "type": "boolean"
                      },
                      "is_billing": {
                        "description": "If the subscription is used for billing",
                        "type": "boolean"
                      },
                      "is_microsoft_internal": {
                        "description": "If the subscription is internal Microsoft subscription",
                        "type": "boolean"
                      },
                      "subscription_id": {
                        "description": "The azure subscription id",
                        "format": "uuid",
                        "type": "string"
                      },
                      "subscription_name": {
                        "description": "The name of the azure subscription",
                        "type": "string"
                      },
                      "tenant_id": {
                        "description": "The tenant id of the azure subscription belongs to",
                        "format": "uuid",
                        "type": "string"
                      }
                    },
                    "required": [
                      "subscription_id",
                      "tenant_id",
                      "subscription_name"
                    ],
                    "type": "object"
                  },
                  "created_at": {
                    "description": "The created date of this app",
                    "type": "string"
                  },
                  "member_permissions": {
                    "description": "The permissions of the calling user",
                    "items": {
                      "enum": [
                        "manager",
                        "developer",
                        "viewer",
                        "tester"
                      ],
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "origin": {
                    "description": "The creation origin of this app",
                    "enum": [
                      "appcenter",
                      "hockeyapp",
                      "codepush"
                    ],
                    "type": "string"
                  },
                  "platform": {
                    "description": "The platform of the app",
                    "enum": [
                      "Java",
                      "Objective-C-Swift",
                      "UWP",
                      "Cordova",
                      "React-Native",
                      "Unity",
                      "Electron",
                      "Xamarin",
                      "WPF",
                      "WinForms",
                      "Unknown",
                      "Custom"
                    ],
                    "type": "string"
                  },
                  "updated_at": {
                    "description": "The last updated date of this app",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            ],
            "required": [
              "app_secret",
              "platform",
              "origin"
            ]
          },
          "invitation_id": {
            "description": "The id of the invitation",
            "format": "uuid",
            "type": "string"
          },
          "organization": {
            "properties": {
              "avatar_url": {
                "description": "The URL to a user-uploaded Avatar image",
                "type": "string"
              },
              "created_at": {
                "description": "The creation date of this organization",
                "type": "string"
              },
              "display_name": {
                "description": "The display name of the organization",
                "type": "string"
              },
              "id": {
                "description": "The internal unique id (UUID) of the organization.",
                "format": "uuid",
                "type": "string"
              },
              "name": {
                "description": "The slug name of the organization",
                "type": "string"
              },
              "origin": {
                "description": "The creation origin of this organization",
                "enum": [
                  "appcenter",
                  "hockeyapp"
                ],
                "type": "string"
              },
              "updated_at": {
                "description": "The date the organization was last updated at",
                "type": "string"
              }
            },
            "required": [
              "id",
              "display_name",
              "name",
              "origin",
              "created_at",
              "updated_at"
            ],
            "type": "object"
          }
        },
        "required": [
          "invitation_id"
        ],
        "type": "object"
      },
      "GDPRPurgeVerifyRequest": {
        "properties": {
          "id": {
            "description": "deployment id",
            "type": "string"
          },
          "key": {
            "description": "deployment key",
            "type": "string"
          }
        },
        "required": [
          "id",
          "key"
        ],
        "type": "object"
      },
      "GDPRPurgeVerifyResponse": {
        "properties": {
          "success": {
            "description": "indicate whether GDPR purge operation succeeds or not",
            "type": "boolean"
          }
        },
        "required": [
          "success"
        ],
        "type": "object"
      },
      "GDPRValidationRequest": {
        "description": "A request containing a set of release ids to validate",
        "properties": {
          "hockeyapp_release_ids": {
            "description": "a list of release ids to validate (HA flow)",
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "release_ids": {
            "description": "a list of release ids to validate (AC flow)",
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "release_upload_ids": {
            "description": "a list of release uploads ids to validate",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "release_ids"
        ],
        "type": "object"
      },
      "GdprVerificationResult": {
        "description": "GDPR tests verification result",
        "properties": {
          "message": {
            "description": "Optional error message if the verification failed.",
            "type": "string"
          },
          "status": {
            "description": "Verification status. True means that the verification was successfull.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "GeneralDistributionGroupDetailsResponse": {
        "allOf": [
          {
            "properties": {
              "display_name": {
                "description": "The name of the distribution group",
                "type": "string"
              },
              "id": {
                "description": "The unique ID of the distribution group",
                "format": "uuid",
                "type": "string"
              },
              "is_public": {
                "description": "Whether the distribution group is public",
                "type": "boolean"
              },
              "name": {
                "description": "The name of the distribution group used in URLs",
                "type": "string"
              },
              "origin": {
                "description": "The creation origin of this distribution group",
                "enum": [
                  "appcenter",
                  "hockeyapp"
                ],
                "type": "string"
              }
            },
            "required": [
              "id",
              "name",
              "origin",
              "is_public"
            ],
            "type": "object"
          },
          {
            "properties": {
              "is_shared": {
                "description": "Whether the distribution group is shared group or not",
                "type": "boolean"
              },
              "owner_app_id": {
                "description": "If distribution group is owned by an app, this is the unique app ID",
                "format": "uuid",
                "type": "string"
              },
              "owner_org_id": {
                "description": "If distribution group is owned by an org, this is the unique org ID",
                "format": "uuid",
                "type": "string"
              }
            },
            "type": "object"
          }
        ],
        "required": [
          "is_shared"
        ]
      },
      "GenericLog": {
        "description": "Generic log.",
        "properties": {
          "account_id": {
            "description": "Account ID of the authenticated user.\n",
            "type": "string"
          },
          "auth_provider": {
            "description": "Auth service provider.\n",
            "type": "string"
          },
          "device": {
            "description": "Device characteristics.",
            "properties": {
              "app_build": {
                "description": "The app's build number, e.g. 42.\n",
                "type": "string"
              },
              "app_namespace": {
                "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                "type": "string"
              },
              "app_version": {
                "description": "Application version name, e.g. 1.1.0\n",
                "type": "string"
              },
              "carrier_code": {
                "description": "Carrier country code (for mobile devices).\n",
                "type": "string"
              },
              "carrier_country": {
                "description": "Carrier country.\n",
                "type": "string"
              },
              "carrier_name": {
                "description": "Carrier name (for mobile devices).\n",
                "type": "string"
              },
              "live_update_deployment_key": {
                "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                "type": "string"
              },
              "live_update_package_hash": {
                "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                "type": "string"
              },
              "live_update_release_label": {
                "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                "type": "string"
              },
              "locale": {
                "description": "Language code (example: en_US).\n",
                "type": "string"
              },
              "model": {
                "description": "Device model (example: iPad2,3).\n",
                "type": "string"
              },
              "oem_name": {
                "description": "Device manufacturer (example: HTC).\n",
                "type": "string"
              },
              "os_api_level": {
                "description": "API level when applicable like in Android (example: 15).\n",
                "type": "integer"
              },
              "os_build": {
                "description": "OS build code (example: LMY47X).\n",
                "type": "string"
              },
              "os_name": {
                "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                "type": "string"
              },
              "os_version": {
                "description": "OS version (example: 9.3.0).\n",
                "type": "string"
              },
              "screen_size": {
                "description": "Screen size of the device in pixels (example: 640x480).\n",
                "type": "string"
              },
              "sdk_name": {
                "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                "type": "string"
              },
              "sdk_version": {
                "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                "type": "string"
              },
              "time_zone_offset": {
                "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                "maximum": 840,
                "minimum": -840,
                "type": "integer"
              },
              "wrapper_runtime_version": {
                "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                "type": "string"
              },
              "wrapper_sdk_name": {
                "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                "type": "string"
              },
              "wrapper_sdk_version": {
                "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                "type": "string"
              }
            },
            "required": [
              "sdk_name",
              "sdk_version",
              "os_name",
              "os_version",
              "locale",
              "time_zone_offset",
              "app_version",
              "app_build"
            ],
            "type": "object"
          },
          "event_id": {
            "description": "Event ID.\n",
            "type": "string"
          },
          "event_name": {
            "description": "Event name.\n",
            "type": "string"
          },
          "install_id": {
            "description": "Install ID.\n",
            "format": "uuid",
            "type": "string"
          },
          "message_id": {
            "description": "Message ID.\n",
            "type": "string"
          },
          "properties": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "event specific properties.\n",
            "type": "object"
          },
          "session_id": {
            "description": "Session ID.\n",
            "format": "uuid",
            "type": "string"
          },
          "timestamp": {
            "description": "Log creation timestamp.\n",
            "format": "date-time",
            "type": "string"
          },
          "type": {
            "description": "Log type.\n",
            "enum": [
              "event",
              "page",
              "start_session",
              "error",
              "push_installation",
              "start_service",
              "custom_properties"
            ],
            "type": "string"
          }
        },
        "required": [
          "type",
          "timestamp",
          "install_id",
          "device"
        ],
        "type": "object"
      },
      "GenericLogContainer": {
        "properties": {
          "exceeded_max_limit": {
            "description": "indicates if the number of available logs are more than the max allowed return limit(100).",
            "type": "boolean"
          },
          "last_received_log_timestamp": {
            "description": "the timestamp of the last log received. This value can be used as the start time parameter in the consecutive API call.",
            "format": "date-time",
            "type": "string"
          },
          "logs": {
            "description": "the list of logs",
            "items": {
              "description": "Generic log.",
              "properties": {
                "account_id": {
                  "description": "Account ID of the authenticated user.\n",
                  "type": "string"
                },
                "auth_provider": {
                  "description": "Auth service provider.\n",
                  "type": "string"
                },
                "device": {
                  "description": "Device characteristics.",
                  "properties": {
                    "app_build": {
                      "description": "The app's build number, e.g. 42.\n",
                      "type": "string"
                    },
                    "app_namespace": {
                      "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                      "type": "string"
                    },
                    "app_version": {
                      "description": "Application version name, e.g. 1.1.0\n",
                      "type": "string"
                    },
                    "carrier_code": {
                      "description": "Carrier country code (for mobile devices).\n",
                      "type": "string"
                    },
                    "carrier_country": {
                      "description": "Carrier country.\n",
                      "type": "string"
                    },
                    "carrier_name": {
                      "description": "Carrier name (for mobile devices).\n",
                      "type": "string"
                    },
                    "live_update_deployment_key": {
                      "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                      "type": "string"
                    },
                    "live_update_package_hash": {
                      "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                      "type": "string"
                    },
                    "live_update_release_label": {
                      "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                      "type": "string"
                    },
                    "locale": {
                      "description": "Language code (example: en_US).\n",
                      "type": "string"
                    },
                    "model": {
                      "description": "Device model (example: iPad2,3).\n",
                      "type": "string"
                    },
                    "oem_name": {
                      "description": "Device manufacturer (example: HTC).\n",
                      "type": "string"
                    },
                    "os_api_level": {
                      "description": "API level when applicable like in Android (example: 15).\n",
                      "type": "integer"
                    },
                    "os_build": {
                      "description": "OS build code (example: LMY47X).\n",
                      "type": "string"
                    },
                    "os_name": {
                      "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                      "type": "string"
                    },
                    "os_version": {
                      "description": "OS version (example: 9.3.0).\n",
                      "type": "string"
                    },
                    "screen_size": {
                      "description": "Screen size of the device in pixels (example: 640x480).\n",
                      "type": "string"
                    },
                    "sdk_name": {
                      "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                      "type": "string"
                    },
                    "sdk_version": {
                      "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                      "type": "string"
                    },
                    "time_zone_offset": {
                      "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                      "maximum": 840,
                      "minimum": -840,
                      "type": "integer"
                    },
                    "wrapper_runtime_version": {
                      "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                      "type": "string"
                    },
                    "wrapper_sdk_name": {
                      "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                      "type": "string"
                    },
                    "wrapper_sdk_version": {
                      "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                      "type": "string"
                    }
                  },
                  "required": [
                    "sdk_name",
                    "sdk_version",
                    "os_name",
                    "os_version",
                    "locale",
                    "time_zone_offset",
                    "app_version",
                    "app_build"
                  ],
                  "type": "object"
                },
                "event_id": {
                  "description": "Event ID.\n",
                  "type": "string"
                },
                "event_name": {
                  "description": "Event name.\n",
                  "type": "string"
                },
                "install_id": {
                  "description": "Install ID.\n",
                  "format": "uuid",
                  "type": "string"
                },
                "message_id": {
                  "description": "Message ID.\n",
                  "type": "string"
                },
                "properties": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "event specific properties.\n",
                  "type": "object"
                },
                "session_id": {
                  "description": "Session ID.\n",
                  "format": "uuid",
                  "type": "string"
                },
                "timestamp": {
                  "description": "Log creation timestamp.\n",
                  "format": "date-time",
                  "type": "string"
                },
                "type": {
                  "description": "Log type.\n",
                  "enum": [
                    "event",
                    "page",
                    "start_session",
                    "error",
                    "push_installation",
                    "start_service",
                    "custom_properties"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "type",
                "timestamp",
                "install_id",
                "device"
              ],
              "type": "object"
            },
            "minItems": 0,
            "type": "array"
          }
        },
        "required": [
          "logs"
        ],
        "type": "object"
      },
      "GenericLogContainer_Diagnostics": {
        "properties": {
          "exceeded_max_limit": {
            "description": "indicates if the number of available logs are more than the max allowed return limit(100).",
            "type": "boolean"
          },
          "last_received_log_timestamp": {
            "description": "the timestamp of the last log received. This value can be used as the start time parameter in the consecutive API call.",
            "format": "date-time",
            "type": "string"
          },
          "logs": {
            "description": "the list of logs",
            "items": {
              "description": "Generic log.",
              "properties": {
                "device": {
                  "description": "Device characteristics.",
                  "properties": {
                    "app_build": {
                      "description": "The app's build number, e.g. 42.\n",
                      "type": "string"
                    },
                    "app_namespace": {
                      "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                      "type": "string"
                    },
                    "app_version": {
                      "description": "Application version name, e.g. 1.1.0\n",
                      "type": "string"
                    },
                    "carrier_code": {
                      "description": "Carrier country code (for mobile devices).\n",
                      "type": "string"
                    },
                    "carrier_country": {
                      "description": "Carrier country.\n",
                      "type": "string"
                    },
                    "carrier_name": {
                      "description": "Carrier name (for mobile devices).\n",
                      "type": "string"
                    },
                    "live_update_deployment_key": {
                      "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                      "type": "string"
                    },
                    "live_update_package_hash": {
                      "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                      "type": "string"
                    },
                    "live_update_release_label": {
                      "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                      "type": "string"
                    },
                    "locale": {
                      "description": "Language code (example: en_US).\n",
                      "type": "string"
                    },
                    "model": {
                      "description": "Device model (example: iPad2,3).\n",
                      "type": "string"
                    },
                    "oem_name": {
                      "description": "Device manufacturer (example: HTC).\n",
                      "type": "string"
                    },
                    "os_api_level": {
                      "description": "API level when applicable like in Android (example: 15).\n",
                      "type": "integer"
                    },
                    "os_build": {
                      "description": "OS build code (example: LMY47X).\n",
                      "type": "string"
                    },
                    "os_name": {
                      "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                      "type": "string"
                    },
                    "os_version": {
                      "description": "OS version (example: 9.3.0).\n",
                      "type": "string"
                    },
                    "screen_size": {
                      "description": "Screen size of the device in pixels (example: 640x480).\n",
                      "type": "string"
                    },
                    "sdk_name": {
                      "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                      "type": "string"
                    },
                    "sdk_version": {
                      "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                      "type": "string"
                    },
                    "time_zone_offset": {
                      "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                      "maximum": 840,
                      "minimum": -840,
                      "type": "integer"
                    },
                    "wrapper_runtime_version": {
                      "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                      "type": "string"
                    },
                    "wrapper_sdk_name": {
                      "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                      "type": "string"
                    },
                    "wrapper_sdk_version": {
                      "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                      "type": "string"
                    }
                  },
                  "required": [
                    "sdk_name",
                    "sdk_version",
                    "os_name",
                    "os_version",
                    "locale",
                    "time_zone_offset",
                    "app_version",
                    "app_build"
                  ],
                  "type": "object"
                },
                "event_id": {
                  "description": "Event ID.\n",
                  "type": "string"
                },
                "event_name": {
                  "description": "Event name.\n",
                  "type": "string"
                },
                "install_id": {
                  "description": "Install ID.\n",
                  "format": "uuid",
                  "type": "string"
                },
                "message_id": {
                  "description": "Message ID.\n",
                  "type": "string"
                },
                "properties": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "event specific properties.\n",
                  "type": "object"
                },
                "session_id": {
                  "description": "Session ID.\n",
                  "format": "uuid",
                  "type": "string"
                },
                "timestamp": {
                  "description": "Log creation timestamp.\n",
                  "format": "date-time",
                  "type": "string"
                },
                "type": {
                  "description": "Log type.\n",
                  "enum": [
                    "event",
                    "page",
                    "start_session",
                    "error",
                    "push_installation",
                    "start_service",
                    "custom_properties"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "type",
                "timestamp",
                "install_id",
                "device"
              ],
              "type": "object"
            },
            "minItems": 0,
            "type": "array"
          }
        },
        "required": [
          "logs"
        ],
        "type": "object"
      },
      "GenericLog_Diagnostics": {
        "description": "Generic log.",
        "properties": {
          "device": {
            "description": "Device characteristics.",
            "properties": {
              "app_build": {
                "description": "The app's build number, e.g. 42.\n",
                "type": "string"
              },
              "app_namespace": {
                "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                "type": "string"
              },
              "app_version": {
                "description": "Application version name, e.g. 1.1.0\n",
                "type": "string"
              },
              "carrier_code": {
                "description": "Carrier country code (for mobile devices).\n",
                "type": "string"
              },
              "carrier_country": {
                "description": "Carrier country.\n",
                "type": "string"
              },
              "carrier_name": {
                "description": "Carrier name (for mobile devices).\n",
                "type": "string"
              },
              "live_update_deployment_key": {
                "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                "type": "string"
              },
              "live_update_package_hash": {
                "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                "type": "string"
              },
              "live_update_release_label": {
                "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                "type": "string"
              },
              "locale": {
                "description": "Language code (example: en_US).\n",
                "type": "string"
              },
              "model": {
                "description": "Device model (example: iPad2,3).\n",
                "type": "string"
              },
              "oem_name": {
                "description": "Device manufacturer (example: HTC).\n",
                "type": "string"
              },
              "os_api_level": {
                "description": "API level when applicable like in Android (example: 15).\n",
                "type": "integer"
              },
              "os_build": {
                "description": "OS build code (example: LMY47X).\n",
                "type": "string"
              },
              "os_name": {
                "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                "type": "string"
              },
              "os_version": {
                "description": "OS version (example: 9.3.0).\n",
                "type": "string"
              },
              "screen_size": {
                "description": "Screen size of the device in pixels (example: 640x480).\n",
                "type": "string"
              },
              "sdk_name": {
                "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                "type": "string"
              },
              "sdk_version": {
                "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                "type": "string"
              },
              "time_zone_offset": {
                "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                "maximum": 840,
                "minimum": -840,
                "type": "integer"
              },
              "wrapper_runtime_version": {
                "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                "type": "string"
              },
              "wrapper_sdk_name": {
                "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                "type": "string"
              },
              "wrapper_sdk_version": {
                "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                "type": "string"
              }
            },
            "required": [
              "sdk_name",
              "sdk_version",
              "os_name",
              "os_version",
              "locale",
              "time_zone_offset",
              "app_version",
              "app_build"
            ],
            "type": "object"
          },
          "event_id": {
            "description": "Event ID.\n",
            "type": "string"
          },
          "event_name": {
            "description": "Event name.\n",
            "type": "string"
          },
          "install_id": {
            "description": "Install ID.\n",
            "format": "uuid",
            "type": "string"
          },
          "message_id": {
            "description": "Message ID.\n",
            "type": "string"
          },
          "properties": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "event specific properties.\n",
            "type": "object"
          },
          "session_id": {
            "description": "Session ID.\n",
            "format": "uuid",
            "type": "string"
          },
          "timestamp": {
            "description": "Log creation timestamp.\n",
            "format": "date-time",
            "type": "string"
          },
          "type": {
            "description": "Log type.\n",
            "enum": [
              "event",
              "page",
              "start_session",
              "error",
              "push_installation",
              "start_service",
              "custom_properties"
            ],
            "type": "string"
          }
        },
        "required": [
          "type",
          "timestamp",
          "install_id",
          "device"
        ],
        "type": "object"
      },
      "GetInAppUpdateTokenResponse": {
        "properties": {
          "token": {
            "description": "The api token generated will not be accessible again",
            "type": "string"
          }
        },
        "required": [
          "token"
        ],
        "type": "object"
      },
      "GetOrCreateRepositoryProviderMappingRequest": {
        "properties": {
          "external_account_name": {
            "description": "The account name given by the external provider. If provided, create an organization and the mapping. If not, create mapping with user.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GetReleaseStatusResponse": {
        "properties": {
          "error_details": {
            "description": "Details describing what went wrong processing the upload. Will only be set if status = 'error'.",
            "type": "string"
          },
          "id": {
            "description": "The ID for the upload.",
            "format": "uuid",
            "type": "string"
          },
          "release_distinct_id": {
            "description": "The distinct ID of the release. Will only be set when the status = 'readyToBePublished'.",
            "type": "number"
          },
          "release_url": {
            "description": "The URL of the release. Will only be set when the status = 'readyToBePublished'."
          },
          "upload_status": {
            "description": "The current upload status.",
            "enum": [
              "uploadStarted",
              "uploadFinished",
              "readyToBePublished",
              "malwareDetected",
              "error"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "upload_status"
        ],
        "type": "object"
      },
      "GetReleasesContainer": {
        "properties": {
          "releases": {
            "items": {
              "allOf": [
                {
                  "properties": {
                    "release": {
                      "description": "Release Id.\n",
                      "format": "string",
                      "type": "string"
                    }
                  },
                  "required": [
                    "release"
                  ],
                  "type": "object"
                }
              ],
              "properties": {
                "distribution_group": {
                  "description": "Distribution group Id.\n",
                  "format": "string",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "minItems": 1,
            "type": "array"
          }
        },
        "required": [
          "releases"
        ],
        "type": "object"
      },
      "GitHubAccount": {
        "description": "GitHub account information",
        "properties": {
          "accountType": {
            "description": "Type of GitHub account",
            "enum": [
              "User",
              "Organization"
            ],
            "type": "string"
          },
          "id": {
            "description": "Id of GitHub account",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GitHubAccountLite": {
        "description": "The GitHub Installation",
        "properties": {
          "id": {
            "description": "GitHub Account Id",
            "type": "string"
          },
          "login": {
            "description": "GitHub Account Login Name",
            "type": "string"
          },
          "type": {
            "description": "GitHub Account Type",
            "type": "string"
          },
          "url": {
            "description": "GitHub Account Url",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GitHubBillingAccount": {
        "description": "App Center account details from GitHub billing",
        "properties": {
          "display_name": {
            "description": "The account's display name",
            "type": "string"
          },
          "id": {
            "description": "The unique id (UUID) of the account",
            "type": "string"
          },
          "name": {
            "description": "The unique name that used to identify the owner",
            "type": "string"
          },
          "type": {
            "description": "The owner type. Can either be 'org' or 'user'",
            "enum": [
              "org",
              "user"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "display_name",
          "name",
          "type"
        ],
        "type": "object"
      },
      "GitHubBranchLite": {
        "description": "The lite version of GitHub branch",
        "properties": {
          "ref": {
            "description": "The repository name",
            "type": "string"
          },
          "repo": {
            "description": "The lite version of GitHub repository",
            "properties": {
              "id": {
                "description": "The repository id",
                "type": "number"
              }
            },
            "type": "object"
          },
          "sha": {
            "description": "The discription of repository",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GitHubInstallationLite": {
        "description": "The GitHub Installation",
        "properties": {
          "account": {
            "description": "The GitHub Installation",
            "properties": {
              "id": {
                "description": "GitHub Account Id",
                "type": "string"
              },
              "login": {
                "description": "GitHub Account Login Name",
                "type": "string"
              },
              "type": {
                "description": "GitHub Account Type",
                "type": "string"
              },
              "url": {
                "description": "GitHub Account Url",
                "type": "string"
              }
            },
            "type": "object"
          },
          "app_id": {
            "description": "GitHub Installation App Id",
            "type": "number"
          },
          "id": {
            "description": "GitHub Installation Id",
            "type": "number"
          }
        },
        "type": "object"
      },
      "GitHubInstallationRepositories": {
        "description": "A list of the repositories which is accessible by GitHub App Installation",
        "items": {
          "description": "The repository which is accessiable by GitHub App Installation",
          "properties": {
            "clone_url": {
              "description": "URL used to clone the repository",
              "type": "string"
            },
            "default_branch": {
              "description": "The default branch for the repo",
              "type": "string"
            },
            "description": {
              "description": "The discription of repository",
              "type": "string"
            },
            "fork": {
              "description": "Whether the repository is a fork",
              "type": "boolean"
            },
            "language": {
              "description": "The language in the repository",
              "type": "string"
            },
            "name": {
              "description": "The repository name",
              "type": "string"
            },
            "updated_at": {
              "description": "The repository updated time",
              "format": "dateTime",
              "type": "string"
            }
          },
          "type": "object"
        },
        "type": "array"
      },
      "GitHubInstallationRepository": {
        "description": "The repository which is accessiable by GitHub App Installation",
        "properties": {
          "clone_url": {
            "description": "URL used to clone the repository",
            "type": "string"
          },
          "default_branch": {
            "description": "The default branch for the repo",
            "type": "string"
          },
          "description": {
            "description": "The discription of repository",
            "type": "string"
          },
          "fork": {
            "description": "Whether the repository is a fork",
            "type": "boolean"
          },
          "language": {
            "description": "The language in the repository",
            "type": "string"
          },
          "name": {
            "description": "The repository name",
            "type": "string"
          },
          "updated_at": {
            "description": "The repository updated time",
            "format": "dateTime",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GitHubMarketplacePlan": {
        "description": "GitHub Marketplace plan",
        "properties": {
          "id": {
            "description": "Id of the GitHub plan",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GitHubMarketplacePurchase": {
        "description": "GitHub Marketplace purchase",
        "properties": {
          "account": {
            "description": "GitHub account information",
            "properties": {
              "accountType": {
                "description": "Type of GitHub account",
                "enum": [
                  "User",
                  "Organization"
                ],
                "type": "string"
              },
              "id": {
                "description": "Id of GitHub account",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "plan": {
            "description": "GitHub Marketplace plan",
            "properties": {
              "id": {
                "description": "Id of the GitHub plan",
                "type": "integer"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "GitHubPullRequestLite": {
        "description": "The lite version of GitHub pull request",
        "properties": {
          "base": {
            "description": "The lite version of GitHub branch",
            "properties": {
              "ref": {
                "description": "The repository name",
                "type": "string"
              },
              "repo": {
                "description": "The lite version of GitHub repository",
                "properties": {
                  "id": {
                    "description": "The repository id",
                    "type": "number"
                  }
                },
                "type": "object"
              },
              "sha": {
                "description": "The discription of repository",
                "type": "string"
              }
            },
            "type": "object"
          },
          "head": {
            "description": "The lite version of GitHub branch",
            "properties": {
              "ref": {
                "description": "The repository name",
                "type": "string"
              },
              "repo": {
                "description": "The lite version of GitHub repository",
                "properties": {
                  "id": {
                    "description": "The repository id",
                    "type": "number"
                  }
                },
                "type": "object"
              },
              "sha": {
                "description": "The discription of repository",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "GitHubRepositoryLite": {
        "description": "The lite version of GitHub repository",
        "properties": {
          "id": {
            "description": "The repository id",
            "type": "number"
          }
        },
        "type": "object"
      },
      "GlobalFeatureFlagsResponse": {
        "properties": {
          "value": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "The dictionary of global state values indexed by feature flag names",
            "type": "object"
          }
        },
        "required": [
          "value"
        ],
        "type": "object"
      },
      "GooglePlayConnectionNonSecretResponse": {
        "allOf": [
          {
            "description": "SharedConnectionResponse",
            "discriminator": {
              "propertyName": "serviceType"
            },
            "properties": {
              "credentialType": {
                "description": "the type of the credential",
                "enum": [
                  "credentials",
                  "certificate",
                  "key"
                ],
                "type": "string"
              },
              "displayName": {
                "description": "display name of shared connection",
                "type": "string"
              },
              "serviceType": {
                "description": "service type of shared connection can be apple|gitlab|googleplay|jira",
                "enum": [
                  "apple",
                  "jira",
                  "googleplay",
                  "gitlab"
                ],
                "type": "string"
              }
            },
            "required": [
              "displayName",
              "serviceType"
            ],
            "type": "object"
          }
        ],
        "description": "Google Play non-secret data",
        "discriminator": {
          "propertyName": "credentialType"
        },
        "x-ms-discriminator-value": "googleplay"
      },
      "GooglePlayConnectionSecretRequest": {
        "allOf": [
          {
            "description": "SharedConnectionRequest",
            "discriminator": {
              "propertyName": "serviceType"
            },
            "properties": {
              "credentialType": {
                "default": "credentials",
                "description": "credential type of the shared connection. Values can be credentials|certificate",
                "enum": [
                  "credentials",
                  "certificate",
                  "key"
                ],
                "type": "string"
              },
              "data": {
                "description": "shared connection details",
                "properties": {
                  "password": {
                    "description": "password to connect to shared connection.",
                    "type": "string"
                  },
                  "username": {
                    "description": "username to connect to shared connection.",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "displayName": {
                "description": "display name of shared connection",
                "type": "string"
              },
              "serviceType": {
                "description": "service type of shared connection can be apple|gitlab|googleplay|jira|applecertificate",
                "enum": [
                  "apple",
                  "jira",
                  "googleplay",
                  "gitlab"
                ],
                "type": "string"
              }
            },
            "required": [
              "serviceType"
            ],
            "type": "object"
          }
        ],
        "description": "Google Play connection secrets this should be the JSON file data which is provided by google play",
        "properties": {
          "data": {
            "description": "google secret details",
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object",
        "x-ms-discriminator-value": "googleplay"
      },
      "GooglePlayConnectionSecretResponse": {
        "allOf": [
          {
            "description": "SharedConnectionResponse",
            "discriminator": {
              "propertyName": "serviceType"
            },
            "properties": {
              "credentialType": {
                "description": "the type of the credential",
                "enum": [
                  "credentials",
                  "certificate",
                  "key"
                ],
                "type": "string"
              },
              "displayName": {
                "description": "display name of shared connection",
                "type": "string"
              },
              "serviceType": {
                "description": "service type of shared connection can be apple|gitlab|googleplay|jira",
                "enum": [
                  "apple",
                  "jira",
                  "googleplay",
                  "gitlab"
                ],
                "type": "string"
              }
            },
            "required": [
              "displayName",
              "serviceType"
            ],
            "type": "object"
          }
        ],
        "description": "Google Play connection secrets",
        "discriminator": {
          "propertyName": "serviceType"
        },
        "properties": {
          "data": {
            "description": "google play secret details",
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object",
        "x-ms-discriminator-value": "googleplay"
      },
      "GooglePlayCredentialNonSecretDetailsResponse": {
        "allOf": [
          {
            "allOf": [
              {
                "description": "SharedConnectionResponse",
                "discriminator": {
                  "propertyName": "serviceType"
                },
                "properties": {
                  "credentialType": {
                    "description": "the type of the credential",
                    "enum": [
                      "credentials",
                      "certificate",
                      "key"
                    ],
                    "type": "string"
                  },
                  "displayName": {
                    "description": "display name of shared connection",
                    "type": "string"
                  },
                  "serviceType": {
                    "description": "service type of shared connection can be apple|gitlab|googleplay|jira",
                    "enum": [
                      "apple",
                      "jira",
                      "googleplay",
                      "gitlab"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "displayName",
                  "serviceType"
                ],
                "type": "object"
              }
            ],
            "description": "Google Play non-secret data",
            "discriminator": {
              "propertyName": "credentialType"
            },
            "x-ms-discriminator-value": "googleplay"
          }
        ],
        "description": "Google Play credentials non-secret details",
        "properties": {
          "data": {
            "description": "Google Play credentials non-secret details",
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object",
        "x-ms-discriminator-value": "credentials"
      },
      "GrantAdminRoleRequest": {
        "properties": {
          "admin_role": {
            "description": "The new admin_role",
            "enum": [
              "superAdmin",
              "admin",
              "devOps",
              "customerSupport",
              "notAdmin"
            ],
            "type": "string"
          }
        },
        "required": [
          "admin_role"
        ],
        "type": "object"
      },
      "HandledError": {
        "properties": {
          "country": {
            "type": "string"
          },
          "deviceName": {
            "type": "string"
          },
          "errorId": {
            "type": "string"
          },
          "hasAttachments": {
            "type": "boolean"
          },
          "hasBreadcrumbs": {
            "type": "boolean"
          },
          "language": {
            "type": "string"
          },
          "osType": {
            "type": "string"
          },
          "osVersion": {
            "type": "string"
          },
          "timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "userId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "HandledErrorDetails": {
        "allOf": [
          {
            "properties": {
              "country": {
                "type": "string"
              },
              "deviceName": {
                "type": "string"
              },
              "errorId": {
                "type": "string"
              },
              "hasAttachments": {
                "type": "boolean"
              },
              "hasBreadcrumbs": {
                "type": "boolean"
              },
              "language": {
                "type": "string"
              },
              "osType": {
                "type": "string"
              },
              "osVersion": {
                "type": "string"
              },
              "timestamp": {
                "format": "date-time",
                "type": "string"
              },
              "userId": {
                "type": "string"
              }
            },
            "type": "object"
          }
        ],
        "properties": {
          "appLaunchTimestamp": {
            "description": "Timestamp when the app was launched, example: '2017-03-13T18:05:42Z'.\n",
            "format": "date-time",
            "type": "string"
          },
          "carrierName": {
            "description": "Carrier name (for mobile devices).\n",
            "type": "string"
          },
          "jailbreak": {
            "description": "Flag indicating if device is jailbroken\n",
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "properties": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "reasonFrames": {
            "items": {
              "properties": {
                "appCode": {
                  "description": "this line isn't from any framework",
                  "type": "boolean"
                },
                "classMethod": {
                  "description": "is a class method",
                  "type": "boolean"
                },
                "className": {
                  "description": "name of the class",
                  "type": "string"
                },
                "codeFormatted": {
                  "description": "Formatted frame string",
                  "type": "string"
                },
                "codeRaw": {
                  "description": "Unformatted Frame string",
                  "type": "string"
                },
                "exceptionType": {
                  "description": "Exception type.",
                  "type": "string"
                },
                "file": {
                  "description": "name of the file",
                  "type": "string"
                },
                "frameworkName": {
                  "description": "Name of the framework",
                  "type": "string"
                },
                "language": {
                  "description": "programming language of the frame",
                  "enum": [
                    "JavaScript",
                    "CSharp",
                    "Objective-C",
                    "Objective-Cpp",
                    "Cpp",
                    "C",
                    "Swift",
                    "Java",
                    "Unknown"
                  ],
                  "type": "string"
                },
                "line": {
                  "description": "line number",
                  "type": "integer"
                },
                "method": {
                  "description": "name of the method",
                  "type": "string"
                },
                "methodParams": {
                  "description": "parameters of the frames method",
                  "type": "string"
                },
                "osExceptionType": {
                  "description": "OS exception type. (aka. SIGNAL)",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "HandledErrorLog": {
        "allOf": [
          {
            "discriminator": {
              "propertyName": "type"
            },
            "properties": {
              "device": {
                "description": "Device characteristics.",
                "properties": {
                  "app_build": {
                    "description": "The app's build number, e.g. 42.\n",
                    "type": "string"
                  },
                  "app_namespace": {
                    "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                    "type": "string"
                  },
                  "app_version": {
                    "description": "Application version name, e.g. 1.1.0\n",
                    "type": "string"
                  },
                  "carrier_code": {
                    "description": "Carrier country code (for mobile devices).\n",
                    "type": "string"
                  },
                  "carrier_country": {
                    "description": "Carrier country.\n",
                    "type": "string"
                  },
                  "carrier_name": {
                    "description": "Carrier name (for mobile devices).\n",
                    "type": "string"
                  },
                  "live_update_deployment_key": {
                    "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                    "type": "string"
                  },
                  "live_update_package_hash": {
                    "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                    "type": "string"
                  },
                  "live_update_release_label": {
                    "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                    "type": "string"
                  },
                  "locale": {
                    "description": "Language code (example: en_US).\n",
                    "type": "string"
                  },
                  "model": {
                    "description": "Device model (example: iPad2,3).\n",
                    "type": "string"
                  },
                  "oem_name": {
                    "description": "Device manufacturer (example: HTC).\n",
                    "type": "string"
                  },
                  "os_api_level": {
                    "description": "API level when applicable like in Android (example: 15).\n",
                    "type": "integer"
                  },
                  "os_build": {
                    "description": "OS build code (example: LMY47X).\n",
                    "type": "string"
                  },
                  "os_name": {
                    "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                    "type": "string"
                  },
                  "os_version": {
                    "description": "OS version (example: 9.3.0).\n",
                    "type": "string"
                  },
                  "screen_size": {
                    "description": "Screen size of the device in pixels (example: 640x480).\n",
                    "type": "string"
                  },
                  "sdk_name": {
                    "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                    "type": "string"
                  },
                  "sdk_version": {
                    "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                    "type": "string"
                  },
                  "time_zone_offset": {
                    "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                    "maximum": 840,
                    "minimum": -840,
                    "type": "integer"
                  },
                  "wrapper_runtime_version": {
                    "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                    "type": "string"
                  },
                  "wrapper_sdk_name": {
                    "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                    "type": "string"
                  },
                  "wrapper_sdk_version": {
                    "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                    "type": "string"
                  }
                },
                "required": [
                  "sdk_name",
                  "sdk_version",
                  "os_name",
                  "os_version",
                  "locale",
                  "time_zone_offset",
                  "app_version",
                  "app_build"
                ],
                "type": "object"
              },
              "install_id": {
                "description": "Install ID.\n",
                "format": "uuid",
                "type": "string"
              },
              "timestamp": {
                "description": "Log creation timestamp.\n",
                "format": "date-time",
                "type": "string"
              },
              "type": {
                "description": "Log type.\n",
                "enum": [
                  "event",
                  "page",
                  "start_session",
                  "error",
                  "push_installation",
                  "start_service",
                  "custom_properties"
                ],
                "type": "string"
              }
            },
            "required": [
              "type",
              "timestamp",
              "install_id",
              "device"
            ],
            "type": "object"
          }
        ],
        "description": "Required explicit begin session log (a marker event for analytics service).",
        "properties": {
          "error_id": {
            "description": "Error ID.\n",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "error_id"
        ],
        "type": "object",
        "x-ms-discriminator-value": "handled_error"
      },
      "HandledErrorReasonFrame": {
        "properties": {
          "appCode": {
            "description": "this line isn't from any framework",
            "type": "boolean"
          },
          "classMethod": {
            "description": "is a class method",
            "type": "boolean"
          },
          "className": {
            "description": "name of the class",
            "type": "string"
          },
          "codeFormatted": {
            "description": "Formatted frame string",
            "type": "string"
          },
          "codeRaw": {
            "description": "Unformatted Frame string",
            "type": "string"
          },
          "exceptionType": {
            "description": "Exception type.",
            "type": "string"
          },
          "file": {
            "description": "name of the file",
            "type": "string"
          },
          "frameworkName": {
            "description": "Name of the framework",
            "type": "string"
          },
          "language": {
            "description": "programming language of the frame",
            "enum": [
              "JavaScript",
              "CSharp",
              "Objective-C",
              "Objective-Cpp",
              "Cpp",
              "C",
              "Swift",
              "Java",
              "Unknown"
            ],
            "type": "string"
          },
          "line": {
            "description": "line number",
            "type": "integer"
          },
          "method": {
            "description": "name of the method",
            "type": "string"
          },
          "methodParams": {
            "description": "parameters of the frames method",
            "type": "string"
          },
          "osExceptionType": {
            "description": "OS exception type. (aka. SIGNAL)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "HandledErrors": {
        "properties": {
          "errors": {
            "description": "Errors list.",
            "items": {
              "properties": {
                "country": {
                  "type": "string"
                },
                "deviceName": {
                  "type": "string"
                },
                "errorId": {
                  "type": "string"
                },
                "hasAttachments": {
                  "type": "boolean"
                },
                "hasBreadcrumbs": {
                  "type": "boolean"
                },
                "language": {
                  "type": "string"
                },
                "osType": {
                  "type": "string"
                },
                "osVersion": {
                  "type": "string"
                },
                "timestamp": {
                  "format": "date-time",
                  "type": "string"
                },
                "userId": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "nextLink": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "HanledErrorLog_Diagnostics": {
        "allOf": [
          {
            "discriminator": {
              "propertyName": "type"
            },
            "properties": {
              "device": {
                "description": "Device characteristics.",
                "properties": {
                  "app_build": {
                    "description": "The app's build number, e.g. 42.\n",
                    "type": "string"
                  },
                  "app_namespace": {
                    "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                    "type": "string"
                  },
                  "app_version": {
                    "description": "Application version name, e.g. 1.1.0\n",
                    "type": "string"
                  },
                  "carrier_code": {
                    "description": "Carrier country code (for mobile devices).\n",
                    "type": "string"
                  },
                  "carrier_country": {
                    "description": "Carrier country.\n",
                    "type": "string"
                  },
                  "carrier_name": {
                    "description": "Carrier name (for mobile devices).\n",
                    "type": "string"
                  },
                  "live_update_deployment_key": {
                    "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                    "type": "string"
                  },
                  "live_update_package_hash": {
                    "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                    "type": "string"
                  },
                  "live_update_release_label": {
                    "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                    "type": "string"
                  },
                  "locale": {
                    "description": "Language code (example: en_US).\n",
                    "type": "string"
                  },
                  "model": {
                    "description": "Device model (example: iPad2,3).\n",
                    "type": "string"
                  },
                  "oem_name": {
                    "description": "Device manufacturer (example: HTC).\n",
                    "type": "string"
                  },
                  "os_api_level": {
                    "description": "API level when applicable like in Android (example: 15).\n",
                    "type": "integer"
                  },
                  "os_build": {
                    "description": "OS build code (example: LMY47X).\n",
                    "type": "string"
                  },
                  "os_name": {
                    "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                    "type": "string"
                  },
                  "os_version": {
                    "description": "OS version (example: 9.3.0).\n",
                    "type": "string"
                  },
                  "screen_size": {
                    "description": "Screen size of the device in pixels (example: 640x480).\n",
                    "type": "string"
                  },
                  "sdk_name": {
                    "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                    "type": "string"
                  },
                  "sdk_version": {
                    "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                    "type": "string"
                  },
                  "time_zone_offset": {
                    "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                    "maximum": 840,
                    "minimum": -840,
                    "type": "integer"
                  },
                  "wrapper_runtime_version": {
                    "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                    "type": "string"
                  },
                  "wrapper_sdk_name": {
                    "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                    "type": "string"
                  },
                  "wrapper_sdk_version": {
                    "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                    "type": "string"
                  }
                },
                "required": [
                  "sdk_name",
                  "sdk_version",
                  "os_name",
                  "os_version",
                  "locale",
                  "time_zone_offset",
                  "app_version",
                  "app_build"
                ],
                "type": "object"
              },
              "install_id": {
                "description": "Install ID.\n",
                "format": "uuid",
                "type": "string"
              },
              "timestamp": {
                "description": "Log creation timestamp.\n",
                "format": "date-time",
                "type": "string"
              },
              "type": {
                "description": "Log type.\n",
                "enum": [
                  "event",
                  "page",
                  "start_session",
                  "error",
                  "push_installation",
                  "start_service",
                  "custom_properties"
                ],
                "type": "string"
              }
            },
            "required": [
              "type",
              "timestamp",
              "install_id",
              "device"
            ],
            "type": "object"
          }
        ],
        "description": "Required explicit begin session log (a marker event for analytics service).",
        "properties": {
          "error_id": {
            "description": "Error ID.\n",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "error_id"
        ],
        "type": "object",
        "x-ms-discriminator-value": "handled_error"
      },
      "HasBuildUploadedResponse": {
        "description": "The response for the build uploaded check.",
        "properties": {
          "has_build_uploaded": {
            "description": "true if a build has been uploaded, false otherwise",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "HasTestflightMetadataResponse": {
        "description": "The response for the testflight metadata check.",
        "properties": {
          "has_testflight_metadata": {
            "description": "true if the app has the testflight metadata, false otherwise",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "HockeyAppCompatibilityReleaseResponse": {
        "properties": {
          "appsize": {
            "type": "integer"
          },
          "bundle_identifier": {
            "type": "string"
          },
          "device_family": {
            "type": "string"
          },
          "external": {
            "type": "boolean"
          },
          "id": {
            "type": "integer"
          },
          "install_url": {
            "type": "string"
          },
          "mandatory": {
            "type": "boolean"
          },
          "minimum_os_version": {
            "type": "string"
          },
          "notes": {
            "type": "string"
          },
          "shortversion": {
            "type": "string"
          },
          "uploaded_at": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "IdentityProvidersListManagement": {
        "description": "The identity providers",
        "items": {
          "properties": {
            "created_at": {
              "description": "Creation date-time",
              "type": "string"
            },
            "provider_name": {
              "description": "The name of the identity provider type",
              "enum": [
                "github",
                "aad",
                "facebook",
                "google"
              ],
              "type": "string"
            },
            "provider_user_id": {
              "description": "The external user id",
              "type": "string"
            },
            "updated_at": {
              "description": "Last update date-time",
              "type": "string"
            },
            "user_id": {
              "description": "The account id (UUID)",
              "type": "string"
            }
          },
          "type": "object"
        },
        "type": "array"
      },
      "InternalBulkAppResponse": {
        "properties": {
          "app_name": {
            "description": "The name of the app",
            "type": "string"
          },
          "owner_display_name": {
            "description": "The display name of the owner",
            "type": "string"
          }
        },
        "type": "object"
      },
      "InternalUserRequest": {
        "properties": {
          "app_invitation": {
            "description": "The token of the app invitation which lead to signup",
            "type": "string"
          },
          "avatar_url": {
            "description": "The avatar URL of the user",
            "type": "string"
          },
          "display_name": {
            "description": "The full name of the user. Might for example be first and last name",
            "type": "string"
          },
          "email": {
            "description": "The email address of the user",
            "type": "string"
          },
          "name": {
            "description": "The unique name that is used to identify the user.",
            "type": "string"
          },
          "organization_invitation": {
            "description": "The token of the organization invitation which lead to signup",
            "type": "string"
          },
          "password": {
            "description": "The password of the user. Needs to be at least 8 characters long and contain at least one lower- and one uppercase letter.",
            "type": "string"
          },
          "portal_subdomain": {
            "description": "The sub-domain of the portal from which this request was made. Will be used to build the invitation link.",
            "enum": [
              "install."
            ],
            "type": "string"
          },
          "tester_invitation": {
            "description": "The token of the test invitation which lead to signup",
            "type": "string"
          }
        },
        "required": [
          "email",
          "name",
          "password"
        ],
        "type": "object"
      },
      "InternalUserSignupResponse": {
        "properties": {
          "display_name": {
            "description": "The full name of the user. Might for example be first and last name",
            "type": "string"
          },
          "email": {
            "description": "The email address of the user",
            "type": "string"
          },
          "external_provider": {
            "description": "The name of the external auth provider",
            "type": "string"
          },
          "external_user_id": {
            "description": "The user ID given by the external provider",
            "type": "string"
          },
          "id": {
            "description": "The unique id (UUID) of the user",
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "description": "The unique name that is used to identify the user.",
            "type": "string"
          },
          "status": {
            "description": "The current status of the user record after signup",
            "enum": [
              "Complete",
              "NeedsVerification"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "display_name",
          "email",
          "name"
        ],
        "type": "object"
      },
      "IntuneAppCategory": {
        "properties": {
          "name": {
            "description": "display name for the app category",
            "type": "string"
          }
        },
        "type": "object"
      },
      "IntuneAppCategoryResponse": {
        "properties": {
          "id": {
            "description": "ID for the category.",
            "type": "string"
          },
          "name": {
            "description": "display name for the app category",
            "type": "string"
          }
        },
        "type": "object"
      },
      "IntuneAppsRequest": {
        "description": "IntuneAppsRequest",
        "properties": {
          "created_month": {
            "description": "PartitionKey year-month",
            "type": "string"
          }
        },
        "type": "object"
      },
      "IntuneAppsResponse": {
        "description": "IntuneAppsResponse",
        "properties": {
          "app_id": {
            "description": "App id",
            "type": "string"
          },
          "created_month": {
            "description": "PartitionKey year-month",
            "type": "string"
          },
          "refreshStatus": {
            "description": "Refresh Status",
            "type": "string"
          }
        },
        "type": "object"
      },
      "IntuneCategories": {
        "properties": {
          "odata.context": {
            "description": "context",
            "type": "string"
          },
          "value": {
            "description": "categories for intune app",
            "items": {
              "properties": {
                "displayName": {
                  "description": "the display name for the category",
                  "type": "string"
                },
                "id": {
                  "description": "the id of the category",
                  "type": "string"
                },
                "lastModifiedDateTime": {
                  "description": "modified date for category",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "IntuneCategoryValue": {
        "properties": {
          "displayName": {
            "description": "the display name for the category",
            "type": "string"
          },
          "id": {
            "description": "the id of the category",
            "type": "string"
          },
          "lastModifiedDateTime": {
            "description": "modified date for category",
            "type": "string"
          }
        },
        "type": "object"
      },
      "IntuneGroup": {
        "properties": {
          "displayName": {
            "description": "the display name of the group",
            "type": "string"
          },
          "id": {
            "description": "the id of the Group",
            "type": "string"
          },
          "securityEnabled": {
            "description": "species if it is a security group",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "IntuneGroupValue": {
        "properties": {
          "displayName": {
            "description": "the display name of the group",
            "type": "string"
          },
          "id": {
            "description": "the id of the Group",
            "type": "string"
          }
        },
        "type": "object"
      },
      "IntuneGroups": {
        "properties": {
          "odata.context": {
            "description": "context",
            "type": "string"
          },
          "value": {
            "description": "categories for intune app",
            "items": {
              "properties": {
                "displayName": {
                  "description": "the display name of the group",
                  "type": "string"
                },
                "id": {
                  "description": "the id of the Group",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "IntuneSecretDetails": {
        "properties": {
          "id_token": {
            "description": "the id token of user",
            "type": "string"
          },
          "refresh_token": {
            "description": "the refresh token for user",
            "type": "string"
          },
          "refresh_token_expiry": {
            "description": "the expiry of refresh token",
            "type": "string"
          }
        },
        "type": "object"
      },
      "IntuneStoreRequest": {
        "properties": {
          "app_category": {
            "properties": {
              "name": {
                "description": "display name for the app category",
                "type": "string"
              }
            },
            "type": "object"
          },
          "secret_json": {
            "properties": {
              "id_token": {
                "description": "the id token of user",
                "type": "string"
              },
              "refresh_token": {
                "description": "the refresh token for user",
                "type": "string"
              },
              "refresh_token_expiry": {
                "description": "the expiry of refresh token",
                "type": "string"
              }
            },
            "type": "object"
          },
          "target_audience": {
            "properties": {
              "name": {
                "description": "display name for the target audience/group",
                "type": "string"
              }
            },
            "type": "object"
          },
          "tenant_id": {
            "description": "tenant id of the intune store",
            "type": "string"
          }
        },
        "type": "object"
      },
      "IntuneStoreResponse": {
        "properties": {
          "app_category": {
            "properties": {
              "id": {
                "description": "ID for the category.",
                "type": "string"
              },
              "name": {
                "description": "display name for the app category",
                "type": "string"
              }
            },
            "type": "object"
          },
          "target_audience": {
            "properties": {
              "id": {
                "description": "ID for the target audience/group.",
                "type": "string"
              },
              "name": {
                "description": "display name for the target audience/group",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "IntuneTargetAudience": {
        "properties": {
          "name": {
            "description": "display name for the target audience/group",
            "type": "string"
          }
        },
        "type": "object"
      },
      "IntuneTargetAudienceResponse": {
        "properties": {
          "id": {
            "description": "ID for the target audience/group.",
            "type": "string"
          },
          "name": {
            "description": "display name for the target audience/group",
            "type": "string"
          }
        },
        "type": "object"
      },
      "InvitationDetailResponse": {
        "properties": {
          "app": {
            "allOf": [
              {
                "properties": {
                  "description": {
                    "description": "The description of the app",
                    "type": "string"
                  },
                  "display_name": {
                    "description": "The display name of the app",
                    "type": "string"
                  },
                  "icon_source": {
                    "description": "The string representation of the source of the app's icon",
                    "type": "string"
                  },
                  "icon_url": {
                    "description": "The string representation of the URL pointing to the app's icon",
                    "type": "string"
                  },
                  "id": {
                    "description": "The unique ID (UUID) of the app",
                    "format": "uuid",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the app used in URLs",
                    "type": "string"
                  },
                  "os": {
                    "description": "The OS the app will be running on",
                    "enum": [
                      "Android",
                      "iOS",
                      "macOS",
                      "Tizen",
                      "tvOS",
                      "Windows",
                      "Linux",
                      "Custom"
                    ],
                    "type": "string"
                  },
                  "owner": {
                    "description": "The information about the app's owner",
                    "properties": {
                      "avatar_url": {
                        "description": "The avatar URL of the owner",
                        "type": "string"
                      },
                      "display_name": {
                        "description": "The owner's display name",
                        "type": "string"
                      },
                      "email": {
                        "description": "The owner's email address",
                        "type": "string"
                      },
                      "id": {
                        "description": "The unique id (UUID) of the owner",
                        "format": "uuid",
                        "type": "string"
                      },
                      "name": {
                        "description": "The unique name that used to identify the owner",
                        "type": "string"
                      },
                      "type": {
                        "description": "The owner type. Can either be 'org' or 'user'",
                        "enum": [
                          "org",
                          "user"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "display_name",
                      "name",
                      "type"
                    ],
                    "type": "object"
                  },
                  "release_type": {
                    "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
                    "type": "string"
                  }
                },
                "required": [
                  "id",
                  "display_name",
                  "name",
                  "os",
                  "owner"
                ],
                "type": "object"
              },
              {
                "properties": {
                  "app_secret": {
                    "description": "A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics",
                    "type": "string"
                  },
                  "azure_subscription": {
                    "properties": {
                      "is_billable": {
                        "description": "If the subscription can be used for billing",
                        "type": "boolean"
                      },
                      "is_billing": {
                        "description": "If the subscription is used for billing",
                        "type": "boolean"
                      },
                      "is_microsoft_internal": {
                        "description": "If the subscription is internal Microsoft subscription",
                        "type": "boolean"
                      },
                      "subscription_id": {
                        "description": "The azure subscription id",
                        "format": "uuid",
                        "type": "string"
                      },
                      "subscription_name": {
                        "description": "The name of the azure subscription",
                        "type": "string"
                      },
                      "tenant_id": {
                        "description": "The tenant id of the azure subscription belongs to",
                        "format": "uuid",
                        "type": "string"
                      }
                    },
                    "required": [
                      "subscription_id",
                      "tenant_id",
                      "subscription_name"
                    ],
                    "type": "object"
                  },
                  "created_at": {
                    "description": "The created date of this app",
                    "type": "string"
                  },
                  "member_permissions": {
                    "description": "The permissions of the calling user",
                    "items": {
                      "enum": [
                        "manager",
                        "developer",
                        "viewer",
                        "tester"
                      ],
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "origin": {
                    "description": "The creation origin of this app",
                    "enum": [
                      "appcenter",
                      "hockeyapp",
                      "codepush"
                    ],
                    "type": "string"
                  },
                  "platform": {
                    "description": "The platform of the app",
                    "enum": [
                      "Java",
                      "Objective-C-Swift",
                      "UWP",
                      "Cordova",
                      "React-Native",
                      "Unity",
                      "Electron",
                      "Xamarin",
                      "WPF",
                      "WinForms",
                      "Unknown",
                      "Custom"
                    ],
                    "type": "string"
                  },
                  "updated_at": {
                    "description": "The last updated date of this app",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            ],
            "required": [
              "app_secret",
              "platform",
              "origin"
            ]
          },
          "invitation_id": {
            "description": "The id of the invitation",
            "format": "uuid",
            "type": "string"
          },
          "invited_by": {
            "properties": {
              "avatar_url": {
                "description": "The avatar URL of the user",
                "type": "string"
              },
              "can_change_password": {
                "description": "User is required to send an old password in order to change the password.",
                "type": "boolean"
              },
              "display_name": {
                "description": "The full name of the user. Might for example be first and last name",
                "type": "string"
              },
              "email": {
                "description": "The email address of the user",
                "type": "string"
              },
              "id": {
                "description": "The unique id (UUID) of the user",
                "format": "uuid",
                "type": "string"
              },
              "name": {
                "description": "The unique name that is used to identify the user.",
                "type": "string"
              },
              "origin": {
                "description": "The creation origin of this user",
                "enum": [
                  "appcenter",
                  "hockeyapp",
                  "codepush"
                ],
                "type": "string"
              },
              "permissions": {
                "description": "The permissions the user has for the app",
                "items": {
                  "enum": [
                    "manager",
                    "developer",
                    "viewer",
                    "tester"
                  ],
                  "type": "string"
                },
                "type": "array"
              }
            },
            "required": [
              "id",
              "display_name",
              "email",
              "name",
              "origin"
            ],
            "type": "object"
          },
          "organization": {
            "properties": {
              "avatar_url": {
                "description": "The URL to a user-uploaded Avatar image",
                "type": "string"
              },
              "created_at": {
                "description": "The creation date of this organization",
                "type": "string"
              },
              "display_name": {
                "description": "The display name of the organization",
                "type": "string"
              },
              "id": {
                "description": "The internal unique id (UUID) of the organization.",
                "format": "uuid",
                "type": "string"
              },
              "name": {
                "description": "The slug name of the organization",
                "type": "string"
              },
              "origin": {
                "description": "The creation origin of this organization",
                "enum": [
                  "appcenter",
                  "hockeyapp"
                ],
                "type": "string"
              },
              "updated_at": {
                "description": "The date the organization was last updated at",
                "type": "string"
              }
            },
            "required": [
              "id",
              "display_name",
              "name",
              "origin",
              "created_at",
              "updated_at"
            ],
            "type": "object"
          }
        },
        "required": [
          "invited_by",
          "invitation_id"
        ],
        "type": "object"
      },
      "IosAppExtensionInfo": {
        "description": "App extension information",
        "properties": {
          "name": {
            "description": "App extension name",
            "type": "string"
          },
          "targetBundleIdentifier": {
            "description": "App extension bundle identifier",
            "type": "string"
          }
        },
        "required": [
          "name",
          "targetBundleIdentifier"
        ],
        "type": "object"
      },
      "ItunesAppsRequest": {
        "description": "Apple credentials with username, password or service_connection_id of the stored credentials is needed along with team_identifier.",
        "properties": {
          "cookie": {
            "description": "The 30-day session cookie for multi-factor authentication backed accounts.",
            "type": "string"
          },
          "password": {
            "description": "The password for the Apple Developer account.",
            "type": "string"
          },
          "service_connection_id": {
            "description": "The service_connection_id of the stored Apple credentials instead of username, password.",
            "type": "string"
          },
          "team_identifier": {
            "description": "Identifier of the team to use when logged in.",
            "type": "string"
          },
          "username": {
            "description": "The username for the Apple Developer account.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ItunesTeamsRequest": {
        "description": "Apple credentials with username, password or service_connection_id of the stored credentials is needed.",
        "properties": {
          "cookie": {
            "description": "The 30-day session cookie for multi-factor authentication backed accounts.",
            "type": "string"
          },
          "password": {
            "description": "The password for the Apple Developer account.",
            "type": "string"
          },
          "service_connection_id": {
            "description": "The service_connection_id of the stored Apple credentials instead of username, password.",
            "type": "string"
          },
          "username": {
            "description": "The username for the Apple Developer account.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ItunesTeamsResponse": {
        "description": "Itunes teams details .",
        "properties": {
          "teamId": {
            "description": "Itunes team id.",
            "type": "string"
          },
          "teamName": {
            "description": "Itunes Team Name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "JavaScriptBranchConfigurationProperties": {
        "description": "Build configuration when React Native, or other JavaScript tech, is part of the build steps",
        "properties": {
          "packageJsonPath": {
            "description": "Path to package.json file for the main project, e.g. \"package.json\" or \"myapp/package.json\"",
            "type": "string"
          },
          "reactNativeVersion": {
            "description": "Version of React Native from package.json files",
            "type": "string"
          },
          "runTests": {
            "description": "Whether to run Jest unit tests, via npm test, during the build",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "JavaScriptSolution": {
        "properties": {
          "packageJsonPath": {
            "description": "The path to the detected package.json",
            "type": "string"
          },
          "reactNativeVersion": {
            "description": "Version of React Native from package.json files",
            "type": "string"
          }
        },
        "required": [
          "packageJsonPath"
        ],
        "type": "object"
      },
      "JavaScriptToolset": {
        "properties": {
          "javascriptSolutions": {
            "description": "The React Native solutions detected",
            "items": {
              "properties": {
                "packageJsonPath": {
                  "description": "The path to the detected package.json",
                  "type": "string"
                },
                "reactNativeVersion": {
                  "description": "Version of React Native from package.json files",
                  "type": "string"
                }
              },
              "required": [
                "packageJsonPath"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "packageJsonPaths": {
            "description": "Paths for detected package.json files",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "packageJsonPaths"
        ],
        "type": "object"
      },
      "JiraConnectionNonSecretResponse": {
        "allOf": [
          {
            "description": "SharedConnectionResponse",
            "discriminator": {
              "propertyName": "serviceType"
            },
            "properties": {
              "credentialType": {
                "description": "the type of the credential",
                "enum": [
                  "credentials",
                  "certificate",
                  "key"
                ],
                "type": "string"
              },
              "displayName": {
                "description": "display name of shared connection",
                "type": "string"
              },
              "serviceType": {
                "description": "service type of shared connection can be apple|gitlab|googleplay|jira",
                "enum": [
                  "apple",
                  "jira",
                  "googleplay",
                  "gitlab"
                ],
                "type": "string"
              }
            },
            "required": [
              "displayName",
              "serviceType"
            ],
            "type": "object"
          }
        ],
        "description": "Jira non-secret data",
        "discriminator": {
          "propertyName": "credentialType"
        },
        "x-ms-discriminator-value": "jira"
      },
      "JiraConnectionSecretRequest": {
        "allOf": [
          {
            "description": "SharedConnectionRequest",
            "discriminator": {
              "propertyName": "serviceType"
            },
            "properties": {
              "credentialType": {
                "default": "credentials",
                "description": "credential type of the shared connection. Values can be credentials|certificate",
                "enum": [
                  "credentials",
                  "certificate",
                  "key"
                ],
                "type": "string"
              },
              "data": {
                "description": "shared connection details",
                "properties": {
                  "password": {
                    "description": "password to connect to shared connection.",
                    "type": "string"
                  },
                  "username": {
                    "description": "username to connect to shared connection.",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "displayName": {
                "description": "display name of shared connection",
                "type": "string"
              },
              "serviceType": {
                "description": "service type of shared connection can be apple|gitlab|googleplay|jira|applecertificate",
                "enum": [
                  "apple",
                  "jira",
                  "googleplay",
                  "gitlab"
                ],
                "type": "string"
              }
            },
            "required": [
              "serviceType"
            ],
            "type": "object"
          }
        ],
        "description": "Jira connection secrets",
        "properties": {
          "data": {
            "description": "jira secret details",
            "properties": {
              "baseUrl": {
                "description": "baseUrl to connect to jira instance",
                "type": "string"
              },
              "password": {
                "description": "password to connect to jira instance",
                "type": "string"
              },
              "username": {
                "description": "username to connect to jira instance",
                "type": "string"
              }
            },
            "required": [
              "baseUrl",
              "username",
              "password"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object",
        "x-ms-discriminator-value": "jira"
      },
      "JiraConnectionSecretResponse": {
        "allOf": [
          {
            "description": "SharedConnectionResponse",
            "discriminator": {
              "propertyName": "serviceType"
            },
            "properties": {
              "credentialType": {
                "description": "the type of the credential",
                "enum": [
                  "credentials",
                  "certificate",
                  "key"
                ],
                "type": "string"
              },
              "displayName": {
                "description": "display name of shared connection",
                "type": "string"
              },
              "serviceType": {
                "description": "service type of shared connection can be apple|gitlab|googleplay|jira",
                "enum": [
                  "apple",
                  "jira",
                  "googleplay",
                  "gitlab"
                ],
                "type": "string"
              }
            },
            "required": [
              "displayName",
              "serviceType"
            ],
            "type": "object"
          }
        ],
        "description": "Jira connection secrets",
        "discriminator": {
          "propertyName": "serviceType"
        },
        "properties": {
          "data": {
            "description": "jira secret details",
            "properties": {
              "baseUrl": {
                "description": "baseUrl to connect to jira instance",
                "type": "string"
              },
              "username": {
                "description": "username to connect to jira instance",
                "type": "string"
              }
            },
            "required": [
              "baseUrl",
              "username"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object",
        "x-ms-discriminator-value": "jira"
      },
      "JiraCredentialNonSecretDetailsResponse": {
        "allOf": [
          {
            "allOf": [
              {
                "description": "SharedConnectionResponse",
                "discriminator": {
                  "propertyName": "serviceType"
                },
                "properties": {
                  "credentialType": {
                    "description": "the type of the credential",
                    "enum": [
                      "credentials",
                      "certificate",
                      "key"
                    ],
                    "type": "string"
                  },
                  "displayName": {
                    "description": "display name of shared connection",
                    "type": "string"
                  },
                  "serviceType": {
                    "description": "service type of shared connection can be apple|gitlab|googleplay|jira",
                    "enum": [
                      "apple",
                      "jira",
                      "googleplay",
                      "gitlab"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "displayName",
                  "serviceType"
                ],
                "type": "object"
              }
            ],
            "description": "Google Play non-secret data",
            "discriminator": {
              "propertyName": "credentialType"
            },
            "x-ms-discriminator-value": "googleplay"
          }
        ],
        "description": "Jira credentials non-secret details",
        "properties": {
          "data": {
            "description": "Jira credentials non-secret details",
            "properties": {
              "baseUrl": {
                "description": "baseUrl to connect to jira instance",
                "type": "string"
              },
              "username": {
                "description": "username to connect to jira instance",
                "type": "string"
              }
            },
            "required": [
              "baseUrl",
              "username"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object",
        "x-ms-discriminator-value": "credentials"
      },
      "JiraSecretDetails": {
        "description": "Jira secret details",
        "properties": {
          "baseUrl": {
            "description": "baseUrl to connect to jira instance",
            "type": "string"
          },
          "password": {
            "description": "password to connect to jira instance",
            "type": "string"
          },
          "username": {
            "description": "username to connect to jira instance",
            "type": "string"
          }
        },
        "required": [
          "baseUrl",
          "username",
          "password"
        ],
        "type": "object"
      },
      "JiraSecretDetailsResponse": {
        "description": "Jira secret details",
        "properties": {
          "baseUrl": {
            "description": "baseUrl to connect to jira instance",
            "type": "string"
          },
          "username": {
            "description": "username to connect to jira instance",
            "type": "string"
          }
        },
        "required": [
          "baseUrl",
          "username"
        ],
        "type": "object"
      },
      "Language": {
        "properties": {
          "count": {
            "description": "Count current of language.",
            "format": "int64",
            "type": "integer"
          },
          "language_name": {
            "description": "Language's name.",
            "type": "string"
          },
          "previous_count": {
            "description": "Count of previous lanugage.",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Languages": {
        "properties": {
          "languages": {
            "items": {
              "properties": {
                "count": {
                  "description": "Count current of language.",
                  "format": "int64",
                  "type": "integer"
                },
                "language_name": {
                  "description": "Language's name.",
                  "type": "string"
                },
                "previous_count": {
                  "description": "Count of previous lanugage.",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "total": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "LegacyAccount": {
        "properties": {
          "email": {
            "description": "The calling user's email.",
            "type": "string"
          },
          "linkedProviders": {
            "description": "Array of linked authentication providers associated with the account.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "description": "The account name of the calling user.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LegacyAccountResponse": {
        "properties": {
          "account": {
            "additionalProperties": {
              "properties": {
                "email": {
                  "description": "The calling user's email.",
                  "type": "string"
                },
                "linkedProviders": {
                  "description": "Array of linked authentication providers associated with the account.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "name": {
                  "description": "The account name of the calling user.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Object containing the account information.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "LegacyApp": {
        "properties": {
          "collaborators": {
            "additionalProperties": {
              "properties": {
                "isCurrentAccount": {
                  "description": "Is current collaborator the same as current account.",
                  "type": "boolean"
                },
                "permission": {
                  "description": "Which permission does current account has.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "object"
          },
          "deployments": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "description": "The app name.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LegacyAppListResponse": {
        "properties": {
          "apps": {
            "items": {
              "properties": {
                "collaborators": {
                  "additionalProperties": {
                    "properties": {
                      "isCurrentAccount": {
                        "description": "Is current collaborator the same as current account.",
                        "type": "boolean"
                      },
                      "permission": {
                        "description": "Which permission does current account has.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "object"
                },
                "deployments": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "name": {
                  "description": "The app name.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "LegacyAppResponse": {
        "properties": {
          "app": {
            "properties": {
              "collaborators": {
                "additionalProperties": {
                  "properties": {
                    "isCurrentAccount": {
                      "description": "Is current collaborator the same as current account.",
                      "type": "boolean"
                    },
                    "permission": {
                      "description": "Which permission does current account has.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "object"
              },
              "deployments": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "name": {
                "description": "The app name.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "LegacyAuthenticationResponse": {
        "properties": {
          "authenticated": {
            "description": "The authentication status of the user.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "LegacyCodePushApp": {
        "properties": {
          "manuallyProvisionDeployments": {
            "description": "Whether the user provided their own deployments. Not currently in use.",
            "type": "boolean"
          },
          "name": {
            "description": "The app name.",
            "type": "string"
          },
          "os": {
            "description": "The app os.",
            "type": "string"
          },
          "platform": {
            "description": "The app platform.",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "LegacyCodePushRelease": {
        "properties": {
          "appVersion": {
            "description": "The version of the release",
            "type": "string"
          },
          "blobUrl": {
            "description": "Location (URL) of release package",
            "type": "string"
          },
          "diffPackageMap": {
            "description": "Object containing URL and size of changed package hashes contained in the release",
            "type": "object"
          },
          "isDisabled": {
            "description": "Flag used to determine if release is disabled",
            "type": "boolean"
          },
          "isMandatory": {
            "description": "Flag used to determine if release is mandatory",
            "type": "boolean"
          },
          "label": {
            "description": "Release label (aka release name)",
            "type": "string"
          },
          "manifestBlobUrl": {
            "description": "The URL location of the package's manifest file.",
            "type": "string"
          },
          "releaseMethod": {
            "description": "Method used to deploy release",
            "type": "string"
          },
          "releasedByUserId": {
            "description": "User ID that triggered most recent release",
            "type": "string"
          },
          "rollout": {
            "description": "Percentage (out of 100) that release is deployed to",
            "type": "integer"
          },
          "size": {
            "description": "Size of release package",
            "type": "integer"
          },
          "uploadTime": {
            "description": "Release upload time as epoch Unix timestamp",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "LegacyCodePushReleaseInfo": {
        "properties": {
          "appVersion": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "isDisabled": {
            "type": "boolean"
          },
          "isMandatory": {
            "type": "boolean"
          },
          "rollout": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "LegacyCodePushReleaseModification": {
        "properties": {
          "packageInfo": {
            "description": "The release package information",
            "type": "object"
          }
        },
        "required": [
          "packageInfo"
        ],
        "type": "object"
      },
      "LegacyCodePushReleaseResponse": {
        "properties": {
          "package": {
            "properties": {
              "appVersion": {
                "description": "The version of the release",
                "type": "string"
              },
              "blobUrl": {
                "description": "Location (URL) of release package",
                "type": "string"
              },
              "diffPackageMap": {
                "description": "Object containing URL and size of changed package hashes contained in the release",
                "type": "object"
              },
              "isDisabled": {
                "description": "Flag used to determine if release is disabled",
                "type": "boolean"
              },
              "isMandatory": {
                "description": "Flag used to determine if release is mandatory",
                "type": "boolean"
              },
              "label": {
                "description": "Release label (aka release name)",
                "type": "string"
              },
              "manifestBlobUrl": {
                "description": "The URL location of the package's manifest file.",
                "type": "string"
              },
              "releaseMethod": {
                "description": "Method used to deploy release",
                "type": "string"
              },
              "releasedByUserId": {
                "description": "User ID that triggered most recent release",
                "type": "string"
              },
              "rollout": {
                "description": "Percentage (out of 100) that release is deployed to",
                "type": "integer"
              },
              "size": {
                "description": "Size of release package",
                "type": "integer"
              },
              "uploadTime": {
                "description": "Release upload time as epoch Unix timestamp",
                "type": "integer"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "package"
        ],
        "type": "object"
      },
      "LegacyCodePushStatusMetricMetadata": {
        "properties": {
          "appVersion": {
            "type": "string"
          },
          "clientUniqueId": {
            "type": "string"
          },
          "deploymentKey": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "previousDeploymentKey": {
            "type": "string"
          },
          "previousLabelOrAppVersion": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "LegacyCollaborator": {
        "properties": {
          "isCurrentAccount": {
            "description": "Is current collaborator the same as current account.",
            "type": "boolean"
          },
          "permission": {
            "description": "Which permission does current account has.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LegacyCollaborators": {
        "properties": {
          "collaborators": {
            "additionalProperties": {
              "properties": {
                "isCurrentAccount": {
                  "description": "Is current collaborator the same as current account.",
                  "type": "boolean"
                },
                "permission": {
                  "description": "Which permission does current account has.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "LegacyDeployment": {
        "properties": {
          "createdTime": {
            "description": "Time at which the deployment was created as a Unix timestamp.",
            "type": "integer"
          },
          "id": {
            "description": "The ID of the deployment (internal use only).",
            "type": "string"
          },
          "key": {
            "description": "Deployment key (aka Deployment Id)",
            "type": "string"
          },
          "name": {
            "description": "Updated deployment name",
            "type": "string"
          },
          "package": {
            "properties": {
              "appVersion": {
                "description": "The version of the release",
                "type": "string"
              },
              "blobUrl": {
                "description": "Location (URL) of release package",
                "type": "string"
              },
              "diffPackageMap": {
                "description": "Object containing URL and size of changed package hashes contained in the release",
                "type": "object"
              },
              "isDisabled": {
                "description": "Flag used to determine if release is disabled",
                "type": "boolean"
              },
              "isMandatory": {
                "description": "Flag used to determine if release is mandatory",
                "type": "boolean"
              },
              "label": {
                "description": "Release label (aka release name)",
                "type": "string"
              },
              "manifestBlobUrl": {
                "description": "The URL location of the package's manifest file.",
                "type": "string"
              },
              "releaseMethod": {
                "description": "Method used to deploy release",
                "type": "string"
              },
              "releasedByUserId": {
                "description": "User ID that triggered most recent release",
                "type": "string"
              },
              "rollout": {
                "description": "Percentage (out of 100) that release is deployed to",
                "type": "integer"
              },
              "size": {
                "description": "Size of release package",
                "type": "integer"
              },
              "uploadTime": {
                "description": "Release upload time as epoch Unix timestamp",
                "type": "integer"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "LegacyDeploymentHistory": {
        "description": "Information about a specific release.",
        "properties": {
          "allOf": {
            "properties": {
              "appVersion": {
                "description": "The version of the release",
                "type": "string"
              },
              "blobUrl": {
                "description": "Location (URL) of release package",
                "type": "string"
              },
              "diffPackageMap": {
                "description": "Object containing URL and size of changed package hashes contained in the release",
                "type": "object"
              },
              "isDisabled": {
                "description": "Flag used to determine if release is disabled",
                "type": "boolean"
              },
              "isMandatory": {
                "description": "Flag used to determine if release is mandatory",
                "type": "boolean"
              },
              "label": {
                "description": "Release label (aka release name)",
                "type": "string"
              },
              "manifestBlobUrl": {
                "description": "The URL location of the package's manifest file.",
                "type": "string"
              },
              "releaseMethod": {
                "description": "Method used to deploy release",
                "type": "string"
              },
              "releasedByUserId": {
                "description": "User ID that triggered most recent release",
                "type": "string"
              },
              "rollout": {
                "description": "Percentage (out of 100) that release is deployed to",
                "type": "integer"
              },
              "size": {
                "description": "Size of release package",
                "type": "integer"
              },
              "uploadTime": {
                "description": "Release upload time as epoch Unix timestamp",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "description": {
            "description": "The description of the release.",
            "type": "string"
          },
          "originalDeployment": {
            "description": "The original deployment of the release, if it's ever been promoted.",
            "type": "string"
          },
          "originalLabel": {
            "description": "The original label of the release, if it's ever been updated.",
            "type": "string"
          },
          "packageHash": {
            "description": "The package's hash value (internal use).",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LegacyDeploymentHistoryResponse": {
        "properties": {
          "history": {
            "description": "Array containing the deployment's package history.",
            "items": {
              "description": "Information about a specific release.",
              "properties": {
                "allOf": {
                  "properties": {
                    "appVersion": {
                      "description": "The version of the release",
                      "type": "string"
                    },
                    "blobUrl": {
                      "description": "Location (URL) of release package",
                      "type": "string"
                    },
                    "diffPackageMap": {
                      "description": "Object containing URL and size of changed package hashes contained in the release",
                      "type": "object"
                    },
                    "isDisabled": {
                      "description": "Flag used to determine if release is disabled",
                      "type": "boolean"
                    },
                    "isMandatory": {
                      "description": "Flag used to determine if release is mandatory",
                      "type": "boolean"
                    },
                    "label": {
                      "description": "Release label (aka release name)",
                      "type": "string"
                    },
                    "manifestBlobUrl": {
                      "description": "The URL location of the package's manifest file.",
                      "type": "string"
                    },
                    "releaseMethod": {
                      "description": "Method used to deploy release",
                      "type": "string"
                    },
                    "releasedByUserId": {
                      "description": "User ID that triggered most recent release",
                      "type": "string"
                    },
                    "rollout": {
                      "description": "Percentage (out of 100) that release is deployed to",
                      "type": "integer"
                    },
                    "size": {
                      "description": "Size of release package",
                      "type": "integer"
                    },
                    "uploadTime": {
                      "description": "Release upload time as epoch Unix timestamp",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "description": {
                  "description": "The description of the release.",
                  "type": "string"
                },
                "originalDeployment": {
                  "description": "The original deployment of the release, if it's ever been promoted.",
                  "type": "string"
                },
                "originalLabel": {
                  "description": "The original label of the release, if it's ever been updated.",
                  "type": "string"
                },
                "packageHash": {
                  "description": "The package's hash value (internal use).",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "LegacyDeploymentMetric": {
        "properties": {
          "active": {
            "description": "The number of devices that have this release installed currently",
            "type": "integer"
          },
          "downloaded": {
            "description": "The number of times this release has been downloaded",
            "type": "integer"
          },
          "failed": {
            "description": "The number of times this release has failed to be installed on a device",
            "type": "integer"
          },
          "installed": {
            "description": "The number of times this release has been installed on a device",
            "type": "integer"
          }
        },
        "required": [
          "active"
        ],
        "type": "object"
      },
      "LegacyDeploymentMetricsResponse": {
        "properties": {
          "metrics": {
            "additionalProperties": {
              "properties": {
                "active": {
                  "description": "The number of devices that have this release installed currently",
                  "type": "integer"
                },
                "downloaded": {
                  "description": "The number of times this release has been downloaded",
                  "type": "integer"
                },
                "failed": {
                  "description": "The number of times this release has failed to be installed on a device",
                  "type": "integer"
                },
                "installed": {
                  "description": "The number of times this release has been installed on a device",
                  "type": "integer"
                }
              },
              "required": [
                "active"
              ],
              "type": "object"
            },
            "description": "Object containing a property named after each release label, which contains an object that contains that release's metrics.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "LegacyDeploymentResponse": {
        "properties": {
          "deployment": {
            "additionalProperties": {
              "properties": {
                "createdTime": {
                  "description": "Time at which the deployment was created as a Unix timestamp.",
                  "type": "integer"
                },
                "id": {
                  "description": "The ID of the deployment (internal use only).",
                  "type": "string"
                },
                "key": {
                  "description": "Deployment key (aka Deployment Id)",
                  "type": "string"
                },
                "name": {
                  "description": "Updated deployment name",
                  "type": "string"
                },
                "package": {
                  "properties": {
                    "appVersion": {
                      "description": "The version of the release",
                      "type": "string"
                    },
                    "blobUrl": {
                      "description": "Location (URL) of release package",
                      "type": "string"
                    },
                    "diffPackageMap": {
                      "description": "Object containing URL and size of changed package hashes contained in the release",
                      "type": "object"
                    },
                    "isDisabled": {
                      "description": "Flag used to determine if release is disabled",
                      "type": "boolean"
                    },
                    "isMandatory": {
                      "description": "Flag used to determine if release is mandatory",
                      "type": "boolean"
                    },
                    "label": {
                      "description": "Release label (aka release name)",
                      "type": "string"
                    },
                    "manifestBlobUrl": {
                      "description": "The URL location of the package's manifest file.",
                      "type": "string"
                    },
                    "releaseMethod": {
                      "description": "Method used to deploy release",
                      "type": "string"
                    },
                    "releasedByUserId": {
                      "description": "User ID that triggered most recent release",
                      "type": "string"
                    },
                    "rollout": {
                      "description": "Percentage (out of 100) that release is deployed to",
                      "type": "integer"
                    },
                    "size": {
                      "description": "Size of release package",
                      "type": "integer"
                    },
                    "uploadTime": {
                      "description": "Release upload time as epoch Unix timestamp",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              },
              "required": [
                "name"
              ],
              "type": "object"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "LegacyDeploymentsResponse": {
        "properties": {
          "deployments": {
            "items": {
              "properties": {
                "createdTime": {
                  "description": "Time at which the deployment was created as a Unix timestamp.",
                  "type": "integer"
                },
                "id": {
                  "description": "The ID of the deployment (internal use only).",
                  "type": "string"
                },
                "key": {
                  "description": "Deployment key (aka Deployment Id)",
                  "type": "string"
                },
                "name": {
                  "description": "Updated deployment name",
                  "type": "string"
                },
                "package": {
                  "properties": {
                    "appVersion": {
                      "description": "The version of the release",
                      "type": "string"
                    },
                    "blobUrl": {
                      "description": "Location (URL) of release package",
                      "type": "string"
                    },
                    "diffPackageMap": {
                      "description": "Object containing URL and size of changed package hashes contained in the release",
                      "type": "object"
                    },
                    "isDisabled": {
                      "description": "Flag used to determine if release is disabled",
                      "type": "boolean"
                    },
                    "isMandatory": {
                      "description": "Flag used to determine if release is mandatory",
                      "type": "boolean"
                    },
                    "label": {
                      "description": "Release label (aka release name)",
                      "type": "string"
                    },
                    "manifestBlobUrl": {
                      "description": "The URL location of the package's manifest file.",
                      "type": "string"
                    },
                    "releaseMethod": {
                      "description": "Method used to deploy release",
                      "type": "string"
                    },
                    "releasedByUserId": {
                      "description": "User ID that triggered most recent release",
                      "type": "string"
                    },
                    "rollout": {
                      "description": "Percentage (out of 100) that release is deployed to",
                      "type": "integer"
                    },
                    "size": {
                      "description": "Size of release package",
                      "type": "integer"
                    },
                    "uploadTime": {
                      "description": "Release upload time as epoch Unix timestamp",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              },
              "required": [
                "name"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "LegacyUpdateCheckResponse": {
        "properties": {
          "updateInfo": {
            "allOf": [
              {
                "properties": {
                  "appVersion": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "isDisabled": {
                    "type": "boolean"
                  },
                  "isMandatory": {
                    "type": "boolean"
                  },
                  "rollout": {
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              {
                "properties": {
                  "downloadURL": {
                    "type": "string"
                  },
                  "isAvailable": {
                    "type": "boolean"
                  },
                  "label": {
                    "type": "string"
                  },
                  "packageHash": {
                    "type": "string"
                  },
                  "packageSize": {
                    "type": "number"
                  },
                  "shouldRunBinaryVersion": {
                    "type": "boolean"
                  },
                  "updateAppVersion": {
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            ],
            "required": [
              "isAvailable"
            ]
          }
        },
        "required": [
          "updateInfo"
        ],
        "type": "object"
      },
      "LegacyUpdateInfoData": {
        "allOf": [
          {
            "properties": {
              "appVersion": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "isDisabled": {
                "type": "boolean"
              },
              "isMandatory": {
                "type": "boolean"
              },
              "rollout": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          {
            "properties": {
              "downloadURL": {
                "type": "string"
              },
              "isAvailable": {
                "type": "boolean"
              },
              "label": {
                "type": "string"
              },
              "packageHash": {
                "type": "string"
              },
              "packageSize": {
                "type": "number"
              },
              "shouldRunBinaryVersion": {
                "type": "boolean"
              },
              "updateAppVersion": {
                "type": "boolean"
              }
            },
            "type": "object"
          }
        ],
        "required": [
          "isAvailable"
        ]
      },
      "LinkAADtoUserRequest": {
        "properties": {
          "aad_tenant_ids": {
            "description": "An array of AAD tenant data needed to link the user to the tenants",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "role": {
            "description": "The role of the user to be added",
            "enum": [
              "admin",
              "collaborator",
              "member"
            ],
            "type": "string"
          }
        },
        "required": [
          "aad_tenant_ids"
        ],
        "type": "object"
      },
      "Log": {
        "discriminator": {
          "propertyName": "type"
        },
        "properties": {
          "device": {
            "description": "Device characteristics.",
            "properties": {
              "app_build": {
                "description": "The app's build number, e.g. 42.\n",
                "type": "string"
              },
              "app_namespace": {
                "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                "type": "string"
              },
              "app_version": {
                "description": "Application version name, e.g. 1.1.0\n",
                "type": "string"
              },
              "carrier_code": {
                "description": "Carrier country code (for mobile devices).\n",
                "type": "string"
              },
              "carrier_country": {
                "description": "Carrier country.\n",
                "type": "string"
              },
              "carrier_name": {
                "description": "Carrier name (for mobile devices).\n",
                "type": "string"
              },
              "live_update_deployment_key": {
                "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                "type": "string"
              },
              "live_update_package_hash": {
                "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                "type": "string"
              },
              "live_update_release_label": {
                "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                "type": "string"
              },
              "locale": {
                "description": "Language code (example: en_US).\n",
                "type": "string"
              },
              "model": {
                "description": "Device model (example: iPad2,3).\n",
                "type": "string"
              },
              "oem_name": {
                "description": "Device manufacturer (example: HTC).\n",
                "type": "string"
              },
              "os_api_level": {
                "description": "API level when applicable like in Android (example: 15).\n",
                "type": "integer"
              },
              "os_build": {
                "description": "OS build code (example: LMY47X).\n",
                "type": "string"
              },
              "os_name": {
                "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                "type": "string"
              },
              "os_version": {
                "description": "OS version (example: 9.3.0).\n",
                "type": "string"
              },
              "screen_size": {
                "description": "Screen size of the device in pixels (example: 640x480).\n",
                "type": "string"
              },
              "sdk_name": {
                "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                "type": "string"
              },
              "sdk_version": {
                "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                "type": "string"
              },
              "time_zone_offset": {
                "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                "maximum": 840,
                "minimum": -840,
                "type": "integer"
              },
              "wrapper_runtime_version": {
                "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                "type": "string"
              },
              "wrapper_sdk_name": {
                "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                "type": "string"
              },
              "wrapper_sdk_version": {
                "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                "type": "string"
              }
            },
            "required": [
              "sdk_name",
              "sdk_version",
              "os_name",
              "os_version",
              "locale",
              "time_zone_offset",
              "app_version",
              "app_build"
            ],
            "type": "object"
          },
          "install_id": {
            "description": "Install ID.\n",
            "format": "uuid",
            "type": "string"
          },
          "timestamp": {
            "description": "Log creation timestamp.\n",
            "format": "date-time",
            "type": "string"
          },
          "type": {
            "description": "Log type.\n",
            "enum": [
              "event",
              "page",
              "start_session",
              "error",
              "push_installation",
              "start_service",
              "custom_properties"
            ],
            "type": "string"
          }
        },
        "required": [
          "type",
          "timestamp",
          "install_id",
          "device"
        ],
        "type": "object"
      },
      "LogContainer": {
        "properties": {
          "exceeded_max_limit": {
            "description": "indicates if the number of available logs are more than the max allowed return limit(100).",
            "type": "boolean"
          },
          "last_received_log_timestamp": {
            "description": "the timestamp of the last log received. This value can be used as the start time parameter in the consecutive API call.",
            "format": "date-time",
            "type": "string"
          },
          "logs": {
            "description": "the list of logs",
            "items": {
              "discriminator": {
                "propertyName": "type"
              },
              "properties": {
                "device": {
                  "description": "Device characteristics.",
                  "properties": {
                    "app_build": {
                      "description": "The app's build number, e.g. 42.\n",
                      "type": "string"
                    },
                    "app_namespace": {
                      "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                      "type": "string"
                    },
                    "app_version": {
                      "description": "Application version name, e.g. 1.1.0\n",
                      "type": "string"
                    },
                    "carrier_code": {
                      "description": "Carrier country code (for mobile devices).\n",
                      "type": "string"
                    },
                    "carrier_country": {
                      "description": "Carrier country.\n",
                      "type": "string"
                    },
                    "carrier_name": {
                      "description": "Carrier name (for mobile devices).\n",
                      "type": "string"
                    },
                    "live_update_deployment_key": {
                      "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                      "type": "string"
                    },
                    "live_update_package_hash": {
                      "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                      "type": "string"
                    },
                    "live_update_release_label": {
                      "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                      "type": "string"
                    },
                    "locale": {
                      "description": "Language code (example: en_US).\n",
                      "type": "string"
                    },
                    "model": {
                      "description": "Device model (example: iPad2,3).\n",
                      "type": "string"
                    },
                    "oem_name": {
                      "description": "Device manufacturer (example: HTC).\n",
                      "type": "string"
                    },
                    "os_api_level": {
                      "description": "API level when applicable like in Android (example: 15).\n",
                      "type": "integer"
                    },
                    "os_build": {
                      "description": "OS build code (example: LMY47X).\n",
                      "type": "string"
                    },
                    "os_name": {
                      "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                      "type": "string"
                    },
                    "os_version": {
                      "description": "OS version (example: 9.3.0).\n",
                      "type": "string"
                    },
                    "screen_size": {
                      "description": "Screen size of the device in pixels (example: 640x480).\n",
                      "type": "string"
                    },
                    "sdk_name": {
                      "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                      "type": "string"
                    },
                    "sdk_version": {
                      "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                      "type": "string"
                    },
                    "time_zone_offset": {
                      "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                      "maximum": 840,
                      "minimum": -840,
                      "type": "integer"
                    },
                    "wrapper_runtime_version": {
                      "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                      "type": "string"
                    },
                    "wrapper_sdk_name": {
                      "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                      "type": "string"
                    },
                    "wrapper_sdk_version": {
                      "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                      "type": "string"
                    }
                  },
                  "required": [
                    "sdk_name",
                    "sdk_version",
                    "os_name",
                    "os_version",
                    "locale",
                    "time_zone_offset",
                    "app_version",
                    "app_build"
                  ],
                  "type": "object"
                },
                "install_id": {
                  "description": "Install ID.\n",
                  "format": "uuid",
                  "type": "string"
                },
                "timestamp": {
                  "description": "Log creation timestamp.\n",
                  "format": "date-time",
                  "type": "string"
                },
                "type": {
                  "description": "Log type.\n",
                  "enum": [
                    "event",
                    "page",
                    "start_session",
                    "error",
                    "push_installation",
                    "start_service",
                    "custom_properties"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "type",
                "timestamp",
                "install_id",
                "device"
              ],
              "type": "object"
            },
            "minItems": 0,
            "type": "array"
          }
        },
        "required": [
          "logs"
        ],
        "type": "object"
      },
      "LogFlowBooleanProperty": {
        "allOf": [
          {
            "discriminator": {
              "propertyName": "type"
            },
            "properties": {
              "name": {
                "maxLength": 128,
                "pattern": "^[a-zA-Z][a-zA-Z0-9\\-_]*$",
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            },
            "required": [
              "type",
              "name"
            ],
            "type": "object"
          }
        ],
        "description": "Boolean property.",
        "properties": {
          "value": {
            "description": "Boolean property value.",
            "type": "boolean"
          }
        },
        "required": [
          "value"
        ],
        "type": "object",
        "x-ms-discriminator-value": "boolean"
      },
      "LogFlowClearProperty": {
        "allOf": [
          {
            "discriminator": {
              "propertyName": "type"
            },
            "properties": {
              "name": {
                "maxLength": 128,
                "pattern": "^[a-zA-Z][a-zA-Z0-9\\-_]*$",
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            },
            "required": [
              "type",
              "name"
            ],
            "type": "object"
          }
        ],
        "description": "Clear an existing property.",
        "type": "object",
        "x-ms-discriminator-value": "clear"
      },
      "LogFlowCustomProperty": {
        "discriminator": {
          "propertyName": "type"
        },
        "properties": {
          "name": {
            "maxLength": 128,
            "pattern": "^[a-zA-Z][a-zA-Z0-9\\-_]*$",
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "name"
        ],
        "type": "object"
      },
      "LogFlowCustomPropertyLog": {
        "allOf": [
          {
            "discriminator": {
              "propertyName": "type"
            },
            "properties": {
              "device": {
                "description": "Device characteristics.",
                "properties": {
                  "app_build": {
                    "description": "The app's build number, e.g. 42.\n",
                    "type": "string"
                  },
                  "app_namespace": {
                    "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                    "type": "string"
                  },
                  "app_version": {
                    "description": "Application version name, e.g. 1.1.0\n",
                    "type": "string"
                  },
                  "carrier_code": {
                    "description": "Carrier country code (for mobile devices).\n",
                    "type": "string"
                  },
                  "carrier_country": {
                    "description": "Carrier country.\n",
                    "type": "string"
                  },
                  "carrier_name": {
                    "description": "Carrier name (for mobile devices).\n",
                    "type": "string"
                  },
                  "live_update_deployment_key": {
                    "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                    "type": "string"
                  },
                  "live_update_package_hash": {
                    "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                    "type": "string"
                  },
                  "live_update_release_label": {
                    "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                    "type": "string"
                  },
                  "locale": {
                    "description": "Language code (example: en_US).\n",
                    "type": "string"
                  },
                  "model": {
                    "description": "Device model (example: iPad2,3).\n",
                    "type": "string"
                  },
                  "oem_name": {
                    "description": "Device manufacturer (example: HTC).\n",
                    "type": "string"
                  },
                  "os_api_level": {
                    "description": "API level when applicable like in Android (example: 15).\n",
                    "type": "integer"
                  },
                  "os_build": {
                    "description": "OS build code (example: LMY47X).\n",
                    "type": "string"
                  },
                  "os_name": {
                    "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                    "type": "string"
                  },
                  "os_version": {
                    "description": "OS version (example: 9.3.0).\n",
                    "type": "string"
                  },
                  "screen_size": {
                    "description": "Screen size of the device in pixels (example: 640x480).\n",
                    "type": "string"
                  },
                  "sdk_name": {
                    "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                    "type": "string"
                  },
                  "sdk_version": {
                    "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                    "type": "string"
                  },
                  "time_zone_offset": {
                    "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                    "maximum": 840,
                    "minimum": -840,
                    "type": "integer"
                  },
                  "wrapper_runtime_version": {
                    "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                    "type": "string"
                  },
                  "wrapper_sdk_name": {
                    "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                    "type": "string"
                  },
                  "wrapper_sdk_version": {
                    "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                    "type": "string"
                  }
                },
                "required": [
                  "sdk_name",
                  "sdk_version",
                  "os_name",
                  "os_version",
                  "locale",
                  "time_zone_offset",
                  "app_version",
                  "app_build"
                ],
                "type": "object"
              },
              "install_id": {
                "description": "Install ID.\n",
                "format": "uuid",
                "type": "string"
              },
              "timestamp": {
                "description": "Log creation timestamp.\n",
                "format": "date-time",
                "type": "string"
              },
              "type": {
                "description": "Log type.\n",
                "enum": [
                  "event",
                  "page",
                  "start_session",
                  "error",
                  "start_service",
                  "custom_properties"
                ],
                "type": "string"
              }
            },
            "required": [
              "type",
              "timestamp",
              "install_id",
              "device"
            ],
            "type": "object"
          }
        ],
        "description": "Set or remove custom properties.",
        "properties": {
          "properties": {
            "description": "Custom property changes.",
            "items": {
              "discriminator": {
                "propertyName": "type"
              },
              "properties": {
                "name": {
                  "maxLength": 128,
                  "pattern": "^[a-zA-Z][a-zA-Z0-9\\-_]*$",
                  "type": "string"
                },
                "type": {
                  "type": "string"
                }
              },
              "required": [
                "type",
                "name"
              ],
              "type": "object"
            },
            "maxItems": 60,
            "minItems": 1,
            "type": "array"
          }
        },
        "type": "object",
        "x-ms-discriminator-value": "custom_properties"
      },
      "LogFlowDateTimeProperty": {
        "allOf": [
          {
            "discriminator": {
              "propertyName": "type"
            },
            "properties": {
              "name": {
                "maxLength": 128,
                "pattern": "^[a-zA-Z][a-zA-Z0-9\\-_]*$",
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            },
            "required": [
              "type",
              "name"
            ],
            "type": "object"
          }
        ],
        "description": "Date and time property.",
        "properties": {
          "value": {
            "description": "Date time property value.",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "value"
        ],
        "type": "object",
        "x-ms-discriminator-value": "date_time"
      },
      "LogFlowDevice": {
        "description": "Device characteristics.",
        "properties": {
          "app_build": {
            "description": "The app's build number, e.g. 42.\n",
            "type": "string"
          },
          "app_namespace": {
            "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
            "type": "string"
          },
          "app_version": {
            "description": "Application version name, e.g. 1.1.0\n",
            "type": "string"
          },
          "carrier_code": {
            "description": "Carrier country code (for mobile devices).\n",
            "type": "string"
          },
          "carrier_country": {
            "description": "Carrier country.\n",
            "type": "string"
          },
          "carrier_name": {
            "description": "Carrier name (for mobile devices).\n",
            "type": "string"
          },
          "live_update_deployment_key": {
            "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
            "type": "string"
          },
          "live_update_package_hash": {
            "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
            "type": "string"
          },
          "live_update_release_label": {
            "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
            "type": "string"
          },
          "locale": {
            "description": "Language code (example: en_US).\n",
            "type": "string"
          },
          "model": {
            "description": "Device model (example: iPad2,3).\n",
            "type": "string"
          },
          "oem_name": {
            "description": "Device manufacturer (example: HTC).\n",
            "type": "string"
          },
          "os_api_level": {
            "description": "API level when applicable like in Android (example: 15).\n",
            "type": "integer"
          },
          "os_build": {
            "description": "OS build code (example: LMY47X).\n",
            "type": "string"
          },
          "os_name": {
            "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
            "type": "string"
          },
          "os_version": {
            "description": "OS version (example: 9.3.0).\n",
            "type": "string"
          },
          "screen_size": {
            "description": "Screen size of the device in pixels (example: 640x480).\n",
            "type": "string"
          },
          "sdk_name": {
            "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
            "type": "string"
          },
          "sdk_version": {
            "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
            "type": "string"
          },
          "time_zone_offset": {
            "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
            "maximum": 840,
            "minimum": -840,
            "type": "integer"
          },
          "wrapper_runtime_version": {
            "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
            "type": "string"
          },
          "wrapper_sdk_name": {
            "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
            "type": "string"
          },
          "wrapper_sdk_version": {
            "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
            "type": "string"
          }
        },
        "required": [
          "sdk_name",
          "sdk_version",
          "os_name",
          "os_version",
          "locale",
          "time_zone_offset",
          "app_version",
          "app_build"
        ],
        "type": "object"
      },
      "LogFlowErrorLog": {
        "allOf": [
          {
            "discriminator": {
              "propertyName": "type"
            },
            "properties": {
              "device": {
                "description": "Device characteristics.",
                "properties": {
                  "app_build": {
                    "description": "The app's build number, e.g. 42.\n",
                    "type": "string"
                  },
                  "app_namespace": {
                    "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                    "type": "string"
                  },
                  "app_version": {
                    "description": "Application version name, e.g. 1.1.0\n",
                    "type": "string"
                  },
                  "carrier_code": {
                    "description": "Carrier country code (for mobile devices).\n",
                    "type": "string"
                  },
                  "carrier_country": {
                    "description": "Carrier country.\n",
                    "type": "string"
                  },
                  "carrier_name": {
                    "description": "Carrier name (for mobile devices).\n",
                    "type": "string"
                  },
                  "live_update_deployment_key": {
                    "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                    "type": "string"
                  },
                  "live_update_package_hash": {
                    "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                    "type": "string"
                  },
                  "live_update_release_label": {
                    "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                    "type": "string"
                  },
                  "locale": {
                    "description": "Language code (example: en_US).\n",
                    "type": "string"
                  },
                  "model": {
                    "description": "Device model (example: iPad2,3).\n",
                    "type": "string"
                  },
                  "oem_name": {
                    "description": "Device manufacturer (example: HTC).\n",
                    "type": "string"
                  },
                  "os_api_level": {
                    "description": "API level when applicable like in Android (example: 15).\n",
                    "type": "integer"
                  },
                  "os_build": {
                    "description": "OS build code (example: LMY47X).\n",
                    "type": "string"
                  },
                  "os_name": {
                    "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                    "type": "string"
                  },
                  "os_version": {
                    "description": "OS version (example: 9.3.0).\n",
                    "type": "string"
                  },
                  "screen_size": {
                    "description": "Screen size of the device in pixels (example: 640x480).\n",
                    "type": "string"
                  },
                  "sdk_name": {
                    "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                    "type": "string"
                  },
                  "sdk_version": {
                    "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                    "type": "string"
                  },
                  "time_zone_offset": {
                    "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                    "maximum": 840,
                    "minimum": -840,
                    "type": "integer"
                  },
                  "wrapper_runtime_version": {
                    "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                    "type": "string"
                  },
                  "wrapper_sdk_name": {
                    "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                    "type": "string"
                  },
                  "wrapper_sdk_version": {
                    "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                    "type": "string"
                  }
                },
                "required": [
                  "sdk_name",
                  "sdk_version",
                  "os_name",
                  "os_version",
                  "locale",
                  "time_zone_offset",
                  "app_version",
                  "app_build"
                ],
                "type": "object"
              },
              "install_id": {
                "description": "Install ID.\n",
                "format": "uuid",
                "type": "string"
              },
              "timestamp": {
                "description": "Log creation timestamp.\n",
                "format": "date-time",
                "type": "string"
              },
              "type": {
                "description": "Log type.\n",
                "enum": [
                  "event",
                  "page",
                  "start_session",
                  "error",
                  "start_service",
                  "custom_properties"
                ],
                "type": "string"
              }
            },
            "required": [
              "type",
              "timestamp",
              "install_id",
              "device"
            ],
            "type": "object"
          }
        ],
        "description": "Error log.",
        "properties": {
          "app_launch_toffset": {
            "description": "Corresponds to the number of milliseconds elapsed between the time the error occurred and the app was launched.\n",
            "format": "int64",
            "type": "integer"
          },
          "id": {
            "description": "Error identifier.",
            "format": "uuid",
            "type": "string"
          },
          "session_id": {
            "description": "Session ID.\n",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "session_id",
          "id"
        ],
        "type": "object",
        "x-ms-discriminator-value": "error"
      },
      "LogFlowEventLog": {
        "allOf": [
          {
            "allOf": [
              {
                "discriminator": {
                  "propertyName": "type"
                },
                "properties": {
                  "device": {
                    "description": "Device characteristics.",
                    "properties": {
                      "app_build": {
                        "description": "The app's build number, e.g. 42.\n",
                        "type": "string"
                      },
                      "app_namespace": {
                        "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                        "type": "string"
                      },
                      "app_version": {
                        "description": "Application version name, e.g. 1.1.0\n",
                        "type": "string"
                      },
                      "carrier_code": {
                        "description": "Carrier country code (for mobile devices).\n",
                        "type": "string"
                      },
                      "carrier_country": {
                        "description": "Carrier country.\n",
                        "type": "string"
                      },
                      "carrier_name": {
                        "description": "Carrier name (for mobile devices).\n",
                        "type": "string"
                      },
                      "live_update_deployment_key": {
                        "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                        "type": "string"
                      },
                      "live_update_package_hash": {
                        "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                        "type": "string"
                      },
                      "live_update_release_label": {
                        "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                        "type": "string"
                      },
                      "locale": {
                        "description": "Language code (example: en_US).\n",
                        "type": "string"
                      },
                      "model": {
                        "description": "Device model (example: iPad2,3).\n",
                        "type": "string"
                      },
                      "oem_name": {
                        "description": "Device manufacturer (example: HTC).\n",
                        "type": "string"
                      },
                      "os_api_level": {
                        "description": "API level when applicable like in Android (example: 15).\n",
                        "type": "integer"
                      },
                      "os_build": {
                        "description": "OS build code (example: LMY47X).\n",
                        "type": "string"
                      },
                      "os_name": {
                        "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                        "type": "string"
                      },
                      "os_version": {
                        "description": "OS version (example: 9.3.0).\n",
                        "type": "string"
                      },
                      "screen_size": {
                        "description": "Screen size of the device in pixels (example: 640x480).\n",
                        "type": "string"
                      },
                      "sdk_name": {
                        "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                        "type": "string"
                      },
                      "sdk_version": {
                        "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                        "type": "string"
                      },
                      "time_zone_offset": {
                        "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                        "maximum": 840,
                        "minimum": -840,
                        "type": "integer"
                      },
                      "wrapper_runtime_version": {
                        "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                        "type": "string"
                      },
                      "wrapper_sdk_name": {
                        "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                        "type": "string"
                      },
                      "wrapper_sdk_version": {
                        "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                        "type": "string"
                      }
                    },
                    "required": [
                      "sdk_name",
                      "sdk_version",
                      "os_name",
                      "os_version",
                      "locale",
                      "time_zone_offset",
                      "app_version",
                      "app_build"
                    ],
                    "type": "object"
                  },
                  "install_id": {
                    "description": "Install ID.\n",
                    "format": "uuid",
                    "type": "string"
                  },
                  "timestamp": {
                    "description": "Log creation timestamp.\n",
                    "format": "date-time",
                    "type": "string"
                  },
                  "type": {
                    "description": "Log type.\n",
                    "enum": [
                      "event",
                      "page",
                      "start_session",
                      "error",
                      "start_service",
                      "custom_properties"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "type",
                  "timestamp",
                  "install_id",
                  "device"
                ],
                "type": "object"
              }
            ],
            "properties": {
              "properties": {
                "additionalProperties": {
                  "type": "string"
                },
                "description": "Additional key/value pair parameters.\n",
                "type": "object"
              }
            },
            "type": "object"
          }
        ],
        "description": "Event log.",
        "properties": {
          "id": {
            "description": "Unique identifier for this event.\n",
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "description": "Name of the event.\n",
            "type": "string"
          },
          "session_id": {
            "description": "Session ID.\n",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "session_id"
        ],
        "type": "object",
        "x-ms-discriminator-value": "event"
      },
      "LogFlowGenericLog": {
        "description": "Generic log.",
        "properties": {
          "account_id": {
            "description": "Account ID of the authenticated user.\n",
            "type": "string"
          },
          "auth_provider": {
            "description": "Auth service provider.\n",
            "type": "string"
          },
          "device": {
            "description": "Device characteristics.",
            "properties": {
              "app_build": {
                "description": "The app's build number, e.g. 42.\n",
                "type": "string"
              },
              "app_namespace": {
                "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                "type": "string"
              },
              "app_version": {
                "description": "Application version name, e.g. 1.1.0\n",
                "type": "string"
              },
              "carrier_code": {
                "description": "Carrier country code (for mobile devices).\n",
                "type": "string"
              },
              "carrier_country": {
                "description": "Carrier country.\n",
                "type": "string"
              },
              "carrier_name": {
                "description": "Carrier name (for mobile devices).\n",
                "type": "string"
              },
              "live_update_deployment_key": {
                "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                "type": "string"
              },
              "live_update_package_hash": {
                "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                "type": "string"
              },
              "live_update_release_label": {
                "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                "type": "string"
              },
              "locale": {
                "description": "Language code (example: en_US).\n",
                "type": "string"
              },
              "model": {
                "description": "Device model (example: iPad2,3).\n",
                "type": "string"
              },
              "oem_name": {
                "description": "Device manufacturer (example: HTC).\n",
                "type": "string"
              },
              "os_api_level": {
                "description": "API level when applicable like in Android (example: 15).\n",
                "type": "integer"
              },
              "os_build": {
                "description": "OS build code (example: LMY47X).\n",
                "type": "string"
              },
              "os_name": {
                "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                "type": "string"
              },
              "os_version": {
                "description": "OS version (example: 9.3.0).\n",
                "type": "string"
              },
              "screen_size": {
                "description": "Screen size of the device in pixels (example: 640x480).\n",
                "type": "string"
              },
              "sdk_name": {
                "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                "type": "string"
              },
              "sdk_version": {
                "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                "type": "string"
              },
              "time_zone_offset": {
                "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                "maximum": 840,
                "minimum": -840,
                "type": "integer"
              },
              "wrapper_runtime_version": {
                "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                "type": "string"
              },
              "wrapper_sdk_name": {
                "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                "type": "string"
              },
              "wrapper_sdk_version": {
                "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                "type": "string"
              }
            },
            "required": [
              "sdk_name",
              "sdk_version",
              "os_name",
              "os_version",
              "locale",
              "time_zone_offset",
              "app_version",
              "app_build"
            ],
            "type": "object"
          },
          "event_id": {
            "description": "Event ID.\n",
            "type": "string"
          },
          "event_name": {
            "description": "Event name.\n",
            "type": "string"
          },
          "install_id": {
            "description": "Install ID.\n",
            "format": "uuid",
            "type": "string"
          },
          "message_id": {
            "description": "Message ID.\n",
            "type": "string"
          },
          "properties": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "event specific properties.\n",
            "type": "object"
          },
          "session_id": {
            "description": "Session ID.\n",
            "format": "uuid",
            "type": "string"
          },
          "timestamp": {
            "description": "Log creation timestamp.\n",
            "format": "date-time",
            "type": "string"
          },
          "type": {
            "description": "Log type.\n",
            "enum": [
              "event",
              "page",
              "start_session",
              "error",
              "start_service",
              "custom_properties"
            ],
            "type": "string"
          }
        },
        "required": [
          "type",
          "timestamp",
          "install_id",
          "device"
        ],
        "type": "object"
      },
      "LogFlowGenericLogContainer": {
        "properties": {
          "exceeded_max_limit": {
            "description": "indicates if the number of available logs are more than the max allowed return limit(100).",
            "type": "boolean"
          },
          "last_received_log_timestamp": {
            "description": "the timestamp of the last log received. This value can be used as the start time parameter in the consecutive API call.",
            "format": "date-time",
            "type": "string"
          },
          "logs": {
            "description": "the list of logs",
            "items": {
              "description": "Generic log.",
              "properties": {
                "account_id": {
                  "description": "Account ID of the authenticated user.\n",
                  "type": "string"
                },
                "auth_provider": {
                  "description": "Auth service provider.\n",
                  "type": "string"
                },
                "device": {
                  "description": "Device characteristics.",
                  "properties": {
                    "app_build": {
                      "description": "The app's build number, e.g. 42.\n",
                      "type": "string"
                    },
                    "app_namespace": {
                      "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                      "type": "string"
                    },
                    "app_version": {
                      "description": "Application version name, e.g. 1.1.0\n",
                      "type": "string"
                    },
                    "carrier_code": {
                      "description": "Carrier country code (for mobile devices).\n",
                      "type": "string"
                    },
                    "carrier_country": {
                      "description": "Carrier country.\n",
                      "type": "string"
                    },
                    "carrier_name": {
                      "description": "Carrier name (for mobile devices).\n",
                      "type": "string"
                    },
                    "live_update_deployment_key": {
                      "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                      "type": "string"
                    },
                    "live_update_package_hash": {
                      "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                      "type": "string"
                    },
                    "live_update_release_label": {
                      "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                      "type": "string"
                    },
                    "locale": {
                      "description": "Language code (example: en_US).\n",
                      "type": "string"
                    },
                    "model": {
                      "description": "Device model (example: iPad2,3).\n",
                      "type": "string"
                    },
                    "oem_name": {
                      "description": "Device manufacturer (example: HTC).\n",
                      "type": "string"
                    },
                    "os_api_level": {
                      "description": "API level when applicable like in Android (example: 15).\n",
                      "type": "integer"
                    },
                    "os_build": {
                      "description": "OS build code (example: LMY47X).\n",
                      "type": "string"
                    },
                    "os_name": {
                      "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                      "type": "string"
                    },
                    "os_version": {
                      "description": "OS version (example: 9.3.0).\n",
                      "type": "string"
                    },
                    "screen_size": {
                      "description": "Screen size of the device in pixels (example: 640x480).\n",
                      "type": "string"
                    },
                    "sdk_name": {
                      "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                      "type": "string"
                    },
                    "sdk_version": {
                      "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                      "type": "string"
                    },
                    "time_zone_offset": {
                      "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                      "maximum": 840,
                      "minimum": -840,
                      "type": "integer"
                    },
                    "wrapper_runtime_version": {
                      "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                      "type": "string"
                    },
                    "wrapper_sdk_name": {
                      "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                      "type": "string"
                    },
                    "wrapper_sdk_version": {
                      "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                      "type": "string"
                    }
                  },
                  "required": [
                    "sdk_name",
                    "sdk_version",
                    "os_name",
                    "os_version",
                    "locale",
                    "time_zone_offset",
                    "app_version",
                    "app_build"
                  ],
                  "type": "object"
                },
                "event_id": {
                  "description": "Event ID.\n",
                  "type": "string"
                },
                "event_name": {
                  "description": "Event name.\n",
                  "type": "string"
                },
                "install_id": {
                  "description": "Install ID.\n",
                  "format": "uuid",
                  "type": "string"
                },
                "message_id": {
                  "description": "Message ID.\n",
                  "type": "string"
                },
                "properties": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "event specific properties.\n",
                  "type": "object"
                },
                "session_id": {
                  "description": "Session ID.\n",
                  "format": "uuid",
                  "type": "string"
                },
                "timestamp": {
                  "description": "Log creation timestamp.\n",
                  "format": "date-time",
                  "type": "string"
                },
                "type": {
                  "description": "Log type.\n",
                  "enum": [
                    "event",
                    "page",
                    "start_session",
                    "error",
                    "start_service",
                    "custom_properties"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "type",
                "timestamp",
                "install_id",
                "device"
              ],
              "type": "object"
            },
            "minItems": 0,
            "type": "array"
          }
        },
        "required": [
          "logs"
        ],
        "type": "object"
      },
      "LogFlowLog": {
        "discriminator": {
          "propertyName": "type"
        },
        "properties": {
          "device": {
            "description": "Device characteristics.",
            "properties": {
              "app_build": {
                "description": "The app's build number, e.g. 42.\n",
                "type": "string"
              },
              "app_namespace": {
                "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                "type": "string"
              },
              "app_version": {
                "description": "Application version name, e.g. 1.1.0\n",
                "type": "string"
              },
              "carrier_code": {
                "description": "Carrier country code (for mobile devices).\n",
                "type": "string"
              },
              "carrier_country": {
                "description": "Carrier country.\n",
                "type": "string"
              },
              "carrier_name": {
                "description": "Carrier name (for mobile devices).\n",
                "type": "string"
              },
              "live_update_deployment_key": {
                "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                "type": "string"
              },
              "live_update_package_hash": {
                "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                "type": "string"
              },
              "live_update_release_label": {
                "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                "type": "string"
              },
              "locale": {
                "description": "Language code (example: en_US).\n",
                "type": "string"
              },
              "model": {
                "description": "Device model (example: iPad2,3).\n",
                "type": "string"
              },
              "oem_name": {
                "description": "Device manufacturer (example: HTC).\n",
                "type": "string"
              },
              "os_api_level": {
                "description": "API level when applicable like in Android (example: 15).\n",
                "type": "integer"
              },
              "os_build": {
                "description": "OS build code (example: LMY47X).\n",
                "type": "string"
              },
              "os_name": {
                "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                "type": "string"
              },
              "os_version": {
                "description": "OS version (example: 9.3.0).\n",
                "type": "string"
              },
              "screen_size": {
                "description": "Screen size of the device in pixels (example: 640x480).\n",
                "type": "string"
              },
              "sdk_name": {
                "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                "type": "string"
              },
              "sdk_version": {
                "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                "type": "string"
              },
              "time_zone_offset": {
                "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                "maximum": 840,
                "minimum": -840,
                "type": "integer"
              },
              "wrapper_runtime_version": {
                "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                "type": "string"
              },
              "wrapper_sdk_name": {
                "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                "type": "string"
              },
              "wrapper_sdk_version": {
                "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                "type": "string"
              }
            },
            "required": [
              "sdk_name",
              "sdk_version",
              "os_name",
              "os_version",
              "locale",
              "time_zone_offset",
              "app_version",
              "app_build"
            ],
            "type": "object"
          },
          "install_id": {
            "description": "Install ID.\n",
            "format": "uuid",
            "type": "string"
          },
          "timestamp": {
            "description": "Log creation timestamp.\n",
            "format": "date-time",
            "type": "string"
          },
          "type": {
            "description": "Log type.\n",
            "enum": [
              "event",
              "page",
              "start_session",
              "error",
              "start_service",
              "custom_properties"
            ],
            "type": "string"
          }
        },
        "required": [
          "type",
          "timestamp",
          "install_id",
          "device"
        ],
        "type": "object"
      },
      "LogFlowLogContainer": {
        "properties": {
          "exceeded_max_limit": {
            "description": "indicates if the number of available logs are more than the max allowed return limit(100).",
            "type": "boolean"
          },
          "last_received_log_timestamp": {
            "description": "the timestamp of the last log received. This value can be used as the start time parameter in the consecutive API call.",
            "format": "date-time",
            "type": "string"
          },
          "logs": {
            "description": "the list of logs",
            "items": {
              "discriminator": {
                "propertyName": "type"
              },
              "properties": {
                "device": {
                  "description": "Device characteristics.",
                  "properties": {
                    "app_build": {
                      "description": "The app's build number, e.g. 42.\n",
                      "type": "string"
                    },
                    "app_namespace": {
                      "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                      "type": "string"
                    },
                    "app_version": {
                      "description": "Application version name, e.g. 1.1.0\n",
                      "type": "string"
                    },
                    "carrier_code": {
                      "description": "Carrier country code (for mobile devices).\n",
                      "type": "string"
                    },
                    "carrier_country": {
                      "description": "Carrier country.\n",
                      "type": "string"
                    },
                    "carrier_name": {
                      "description": "Carrier name (for mobile devices).\n",
                      "type": "string"
                    },
                    "live_update_deployment_key": {
                      "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                      "type": "string"
                    },
                    "live_update_package_hash": {
                      "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                      "type": "string"
                    },
                    "live_update_release_label": {
                      "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                      "type": "string"
                    },
                    "locale": {
                      "description": "Language code (example: en_US).\n",
                      "type": "string"
                    },
                    "model": {
                      "description": "Device model (example: iPad2,3).\n",
                      "type": "string"
                    },
                    "oem_name": {
                      "description": "Device manufacturer (example: HTC).\n",
                      "type": "string"
                    },
                    "os_api_level": {
                      "description": "API level when applicable like in Android (example: 15).\n",
                      "type": "integer"
                    },
                    "os_build": {
                      "description": "OS build code (example: LMY47X).\n",
                      "type": "string"
                    },
                    "os_name": {
                      "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                      "type": "string"
                    },
                    "os_version": {
                      "description": "OS version (example: 9.3.0).\n",
                      "type": "string"
                    },
                    "screen_size": {
                      "description": "Screen size of the device in pixels (example: 640x480).\n",
                      "type": "string"
                    },
                    "sdk_name": {
                      "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                      "type": "string"
                    },
                    "sdk_version": {
                      "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                      "type": "string"
                    },
                    "time_zone_offset": {
                      "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                      "maximum": 840,
                      "minimum": -840,
                      "type": "integer"
                    },
                    "wrapper_runtime_version": {
                      "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                      "type": "string"
                    },
                    "wrapper_sdk_name": {
                      "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                      "type": "string"
                    },
                    "wrapper_sdk_version": {
                      "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                      "type": "string"
                    }
                  },
                  "required": [
                    "sdk_name",
                    "sdk_version",
                    "os_name",
                    "os_version",
                    "locale",
                    "time_zone_offset",
                    "app_version",
                    "app_build"
                  ],
                  "type": "object"
                },
                "install_id": {
                  "description": "Install ID.\n",
                  "format": "uuid",
                  "type": "string"
                },
                "timestamp": {
                  "description": "Log creation timestamp.\n",
                  "format": "date-time",
                  "type": "string"
                },
                "type": {
                  "description": "Log type.\n",
                  "enum": [
                    "event",
                    "page",
                    "start_session",
                    "error",
                    "start_service",
                    "custom_properties"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "type",
                "timestamp",
                "install_id",
                "device"
              ],
              "type": "object"
            },
            "minItems": 0,
            "type": "array"
          }
        },
        "required": [
          "logs"
        ],
        "type": "object"
      },
      "LogFlowLogWithProperties": {
        "allOf": [
          {
            "discriminator": {
              "propertyName": "type"
            },
            "properties": {
              "device": {
                "description": "Device characteristics.",
                "properties": {
                  "app_build": {
                    "description": "The app's build number, e.g. 42.\n",
                    "type": "string"
                  },
                  "app_namespace": {
                    "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                    "type": "string"
                  },
                  "app_version": {
                    "description": "Application version name, e.g. 1.1.0\n",
                    "type": "string"
                  },
                  "carrier_code": {
                    "description": "Carrier country code (for mobile devices).\n",
                    "type": "string"
                  },
                  "carrier_country": {
                    "description": "Carrier country.\n",
                    "type": "string"
                  },
                  "carrier_name": {
                    "description": "Carrier name (for mobile devices).\n",
                    "type": "string"
                  },
                  "live_update_deployment_key": {
                    "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                    "type": "string"
                  },
                  "live_update_package_hash": {
                    "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                    "type": "string"
                  },
                  "live_update_release_label": {
                    "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                    "type": "string"
                  },
                  "locale": {
                    "description": "Language code (example: en_US).\n",
                    "type": "string"
                  },
                  "model": {
                    "description": "Device model (example: iPad2,3).\n",
                    "type": "string"
                  },
                  "oem_name": {
                    "description": "Device manufacturer (example: HTC).\n",
                    "type": "string"
                  },
                  "os_api_level": {
                    "description": "API level when applicable like in Android (example: 15).\n",
                    "type": "integer"
                  },
                  "os_build": {
                    "description": "OS build code (example: LMY47X).\n",
                    "type": "string"
                  },
                  "os_name": {
                    "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                    "type": "string"
                  },
                  "os_version": {
                    "description": "OS version (example: 9.3.0).\n",
                    "type": "string"
                  },
                  "screen_size": {
                    "description": "Screen size of the device in pixels (example: 640x480).\n",
                    "type": "string"
                  },
                  "sdk_name": {
                    "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                    "type": "string"
                  },
                  "sdk_version": {
                    "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                    "type": "string"
                  },
                  "time_zone_offset": {
                    "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                    "maximum": 840,
                    "minimum": -840,
                    "type": "integer"
                  },
                  "wrapper_runtime_version": {
                    "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                    "type": "string"
                  },
                  "wrapper_sdk_name": {
                    "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                    "type": "string"
                  },
                  "wrapper_sdk_version": {
                    "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                    "type": "string"
                  }
                },
                "required": [
                  "sdk_name",
                  "sdk_version",
                  "os_name",
                  "os_version",
                  "locale",
                  "time_zone_offset",
                  "app_version",
                  "app_build"
                ],
                "type": "object"
              },
              "install_id": {
                "description": "Install ID.\n",
                "format": "uuid",
                "type": "string"
              },
              "timestamp": {
                "description": "Log creation timestamp.\n",
                "format": "date-time",
                "type": "string"
              },
              "type": {
                "description": "Log type.\n",
                "enum": [
                  "event",
                  "page",
                  "start_session",
                  "error",
                  "start_service",
                  "custom_properties"
                ],
                "type": "string"
              }
            },
            "required": [
              "type",
              "timestamp",
              "install_id",
              "device"
            ],
            "type": "object"
          }
        ],
        "properties": {
          "properties": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Additional key/value pair parameters.\n",
            "type": "object"
          }
        },
        "type": "object"
      },
      "LogFlowNumberProperty": {
        "allOf": [
          {
            "discriminator": {
              "propertyName": "type"
            },
            "properties": {
              "name": {
                "maxLength": 128,
                "pattern": "^[a-zA-Z][a-zA-Z0-9\\-_]*$",
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            },
            "required": [
              "type",
              "name"
            ],
            "type": "object"
          }
        ],
        "description": "Number property.",
        "properties": {
          "value": {
            "description": "Number property value.",
            "type": "number"
          }
        },
        "required": [
          "value"
        ],
        "type": "object",
        "x-ms-discriminator-value": "number"
      },
      "LogFlowPageLog": {
        "allOf": [
          {
            "allOf": [
              {
                "discriminator": {
                  "propertyName": "type"
                },
                "properties": {
                  "device": {
                    "description": "Device characteristics.",
                    "properties": {
                      "app_build": {
                        "description": "The app's build number, e.g. 42.\n",
                        "type": "string"
                      },
                      "app_namespace": {
                        "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                        "type": "string"
                      },
                      "app_version": {
                        "description": "Application version name, e.g. 1.1.0\n",
                        "type": "string"
                      },
                      "carrier_code": {
                        "description": "Carrier country code (for mobile devices).\n",
                        "type": "string"
                      },
                      "carrier_country": {
                        "description": "Carrier country.\n",
                        "type": "string"
                      },
                      "carrier_name": {
                        "description": "Carrier name (for mobile devices).\n",
                        "type": "string"
                      },
                      "live_update_deployment_key": {
                        "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                        "type": "string"
                      },
                      "live_update_package_hash": {
                        "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                        "type": "string"
                      },
                      "live_update_release_label": {
                        "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                        "type": "string"
                      },
                      "locale": {
                        "description": "Language code (example: en_US).\n",
                        "type": "string"
                      },
                      "model": {
                        "description": "Device model (example: iPad2,3).\n",
                        "type": "string"
                      },
                      "oem_name": {
                        "description": "Device manufacturer (example: HTC).\n",
                        "type": "string"
                      },
                      "os_api_level": {
                        "description": "API level when applicable like in Android (example: 15).\n",
                        "type": "integer"
                      },
                      "os_build": {
                        "description": "OS build code (example: LMY47X).\n",
                        "type": "string"
                      },
                      "os_name": {
                        "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                        "type": "string"
                      },
                      "os_version": {
                        "description": "OS version (example: 9.3.0).\n",
                        "type": "string"
                      },
                      "screen_size": {
                        "description": "Screen size of the device in pixels (example: 640x480).\n",
                        "type": "string"
                      },
                      "sdk_name": {
                        "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                        "type": "string"
                      },
                      "sdk_version": {
                        "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                        "type": "string"
                      },
                      "time_zone_offset": {
                        "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                        "maximum": 840,
                        "minimum": -840,
                        "type": "integer"
                      },
                      "wrapper_runtime_version": {
                        "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                        "type": "string"
                      },
                      "wrapper_sdk_name": {
                        "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                        "type": "string"
                      },
                      "wrapper_sdk_version": {
                        "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                        "type": "string"
                      }
                    },
                    "required": [
                      "sdk_name",
                      "sdk_version",
                      "os_name",
                      "os_version",
                      "locale",
                      "time_zone_offset",
                      "app_version",
                      "app_build"
                    ],
                    "type": "object"
                  },
                  "install_id": {
                    "description": "Install ID.\n",
                    "format": "uuid",
                    "type": "string"
                  },
                  "timestamp": {
                    "description": "Log creation timestamp.\n",
                    "format": "date-time",
                    "type": "string"
                  },
                  "type": {
                    "description": "Log type.\n",
                    "enum": [
                      "event",
                      "page",
                      "start_session",
                      "error",
                      "start_service",
                      "custom_properties"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "type",
                  "timestamp",
                  "install_id",
                  "device"
                ],
                "type": "object"
              }
            ],
            "properties": {
              "properties": {
                "additionalProperties": {
                  "type": "string"
                },
                "description": "Additional key/value pair parameters.\n",
                "type": "object"
              }
            },
            "type": "object"
          }
        ],
        "description": "Page view log (as in screens or activities).",
        "properties": {
          "name": {
            "description": "Name of the page.\n",
            "type": "string"
          },
          "session_id": {
            "description": "Session ID.\n",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "name",
          "session_id"
        ],
        "type": "object",
        "x-ms-discriminator-value": "page"
      },
      "LogFlowStartServiceLog": {
        "allOf": [
          {
            "discriminator": {
              "propertyName": "type"
            },
            "properties": {
              "device": {
                "description": "Device characteristics.",
                "properties": {
                  "app_build": {
                    "description": "The app's build number, e.g. 42.\n",
                    "type": "string"
                  },
                  "app_namespace": {
                    "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                    "type": "string"
                  },
                  "app_version": {
                    "description": "Application version name, e.g. 1.1.0\n",
                    "type": "string"
                  },
                  "carrier_code": {
                    "description": "Carrier country code (for mobile devices).\n",
                    "type": "string"
                  },
                  "carrier_country": {
                    "description": "Carrier country.\n",
                    "type": "string"
                  },
                  "carrier_name": {
                    "description": "Carrier name (for mobile devices).\n",
                    "type": "string"
                  },
                  "live_update_deployment_key": {
                    "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                    "type": "string"
                  },
                  "live_update_package_hash": {
                    "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                    "type": "string"
                  },
                  "live_update_release_label": {
                    "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                    "type": "string"
                  },
                  "locale": {
                    "description": "Language code (example: en_US).\n",
                    "type": "string"
                  },
                  "model": {
                    "description": "Device model (example: iPad2,3).\n",
                    "type": "string"
                  },
                  "oem_name": {
                    "description": "Device manufacturer (example: HTC).\n",
                    "type": "string"
                  },
                  "os_api_level": {
                    "description": "API level when applicable like in Android (example: 15).\n",
                    "type": "integer"
                  },
                  "os_build": {
                    "description": "OS build code (example: LMY47X).\n",
                    "type": "string"
                  },
                  "os_name": {
                    "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                    "type": "string"
                  },
                  "os_version": {
                    "description": "OS version (example: 9.3.0).\n",
                    "type": "string"
                  },
                  "screen_size": {
                    "description": "Screen size of the device in pixels (example: 640x480).\n",
                    "type": "string"
                  },
                  "sdk_name": {
                    "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                    "type": "string"
                  },
                  "sdk_version": {
                    "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                    "type": "string"
                  },
                  "time_zone_offset": {
                    "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                    "maximum": 840,
                    "minimum": -840,
                    "type": "integer"
                  },
                  "wrapper_runtime_version": {
                    "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                    "type": "string"
                  },
                  "wrapper_sdk_name": {
                    "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                    "type": "string"
                  },
                  "wrapper_sdk_version": {
                    "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                    "type": "string"
                  }
                },
                "required": [
                  "sdk_name",
                  "sdk_version",
                  "os_name",
                  "os_version",
                  "locale",
                  "time_zone_offset",
                  "app_version",
                  "app_build"
                ],
                "type": "object"
              },
              "install_id": {
                "description": "Install ID.\n",
                "format": "uuid",
                "type": "string"
              },
              "timestamp": {
                "description": "Log creation timestamp.\n",
                "format": "date-time",
                "type": "string"
              },
              "type": {
                "description": "Log type.\n",
                "enum": [
                  "event",
                  "page",
                  "start_session",
                  "error",
                  "start_service",
                  "custom_properties"
                ],
                "type": "string"
              }
            },
            "required": [
              "type",
              "timestamp",
              "install_id",
              "device"
            ],
            "type": "object"
          }
        ],
        "description": "Describe a AppCenter.Start API call from the SDK.",
        "properties": {
          "services": {
            "description": "The list of services of the AppCenter Start API call.",
            "items": {
              "type": "string"
            },
            "minItems": 1,
            "type": "array"
          }
        },
        "type": "object",
        "x-ms-discriminator-value": "start_service"
      },
      "LogFlowStartSessionLog": {
        "allOf": [
          {
            "discriminator": {
              "propertyName": "type"
            },
            "properties": {
              "device": {
                "description": "Device characteristics.",
                "properties": {
                  "app_build": {
                    "description": "The app's build number, e.g. 42.\n",
                    "type": "string"
                  },
                  "app_namespace": {
                    "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                    "type": "string"
                  },
                  "app_version": {
                    "description": "Application version name, e.g. 1.1.0\n",
                    "type": "string"
                  },
                  "carrier_code": {
                    "description": "Carrier country code (for mobile devices).\n",
                    "type": "string"
                  },
                  "carrier_country": {
                    "description": "Carrier country.\n",
                    "type": "string"
                  },
                  "carrier_name": {
                    "description": "Carrier name (for mobile devices).\n",
                    "type": "string"
                  },
                  "live_update_deployment_key": {
                    "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                    "type": "string"
                  },
                  "live_update_package_hash": {
                    "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                    "type": "string"
                  },
                  "live_update_release_label": {
                    "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                    "type": "string"
                  },
                  "locale": {
                    "description": "Language code (example: en_US).\n",
                    "type": "string"
                  },
                  "model": {
                    "description": "Device model (example: iPad2,3).\n",
                    "type": "string"
                  },
                  "oem_name": {
                    "description": "Device manufacturer (example: HTC).\n",
                    "type": "string"
                  },
                  "os_api_level": {
                    "description": "API level when applicable like in Android (example: 15).\n",
                    "type": "integer"
                  },
                  "os_build": {
                    "description": "OS build code (example: LMY47X).\n",
                    "type": "string"
                  },
                  "os_name": {
                    "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                    "type": "string"
                  },
                  "os_version": {
                    "description": "OS version (example: 9.3.0).\n",
                    "type": "string"
                  },
                  "screen_size": {
                    "description": "Screen size of the device in pixels (example: 640x480).\n",
                    "type": "string"
                  },
                  "sdk_name": {
                    "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                    "type": "string"
                  },
                  "sdk_version": {
                    "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                    "type": "string"
                  },
                  "time_zone_offset": {
                    "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                    "maximum": 840,
                    "minimum": -840,
                    "type": "integer"
                  },
                  "wrapper_runtime_version": {
                    "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                    "type": "string"
                  },
                  "wrapper_sdk_name": {
                    "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                    "type": "string"
                  },
                  "wrapper_sdk_version": {
                    "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                    "type": "string"
                  }
                },
                "required": [
                  "sdk_name",
                  "sdk_version",
                  "os_name",
                  "os_version",
                  "locale",
                  "time_zone_offset",
                  "app_version",
                  "app_build"
                ],
                "type": "object"
              },
              "install_id": {
                "description": "Install ID.\n",
                "format": "uuid",
                "type": "string"
              },
              "timestamp": {
                "description": "Log creation timestamp.\n",
                "format": "date-time",
                "type": "string"
              },
              "type": {
                "description": "Log type.\n",
                "enum": [
                  "event",
                  "page",
                  "start_session",
                  "error",
                  "start_service",
                  "custom_properties"
                ],
                "type": "string"
              }
            },
            "required": [
              "type",
              "timestamp",
              "install_id",
              "device"
            ],
            "type": "object"
          }
        ],
        "description": "Required explicit begin session log (a marker event for analytics service).",
        "properties": {
          "session_id": {
            "description": "Session ID.\n",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "session_id"
        ],
        "type": "object",
        "x-ms-discriminator-value": "start_session"
      },
      "LogFlowStringProperty": {
        "allOf": [
          {
            "discriminator": {
              "propertyName": "type"
            },
            "properties": {
              "name": {
                "maxLength": 128,
                "pattern": "^[a-zA-Z][a-zA-Z0-9\\-_]*$",
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            },
            "required": [
              "type",
              "name"
            ],
            "type": "object"
          }
        ],
        "description": "String property.",
        "properties": {
          "value": {
            "description": "String property value.",
            "maxLength": 128,
            "type": "string"
          }
        },
        "required": [
          "value"
        ],
        "type": "object",
        "x-ms-discriminator-value": "string"
      },
      "LogTraceDefinition": {
        "properties": {
          "app_secret": {
            "type": "string"
          },
          "expiration": {
            "format": "date-time",
            "type": "string"
          },
          "install_id": {
            "type": "string"
          }
        },
        "required": [
          "app_secret"
        ],
        "type": "object"
      },
      "LogWithProperties": {
        "allOf": [
          {
            "discriminator": {
              "propertyName": "type"
            },
            "properties": {
              "device": {
                "description": "Device characteristics.",
                "properties": {
                  "app_build": {
                    "description": "The app's build number, e.g. 42.\n",
                    "type": "string"
                  },
                  "app_namespace": {
                    "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                    "type": "string"
                  },
                  "app_version": {
                    "description": "Application version name, e.g. 1.1.0\n",
                    "type": "string"
                  },
                  "carrier_code": {
                    "description": "Carrier country code (for mobile devices).\n",
                    "type": "string"
                  },
                  "carrier_country": {
                    "description": "Carrier country.\n",
                    "type": "string"
                  },
                  "carrier_name": {
                    "description": "Carrier name (for mobile devices).\n",
                    "type": "string"
                  },
                  "live_update_deployment_key": {
                    "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                    "type": "string"
                  },
                  "live_update_package_hash": {
                    "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                    "type": "string"
                  },
                  "live_update_release_label": {
                    "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                    "type": "string"
                  },
                  "locale": {
                    "description": "Language code (example: en_US).\n",
                    "type": "string"
                  },
                  "model": {
                    "description": "Device model (example: iPad2,3).\n",
                    "type": "string"
                  },
                  "oem_name": {
                    "description": "Device manufacturer (example: HTC).\n",
                    "type": "string"
                  },
                  "os_api_level": {
                    "description": "API level when applicable like in Android (example: 15).\n",
                    "type": "integer"
                  },
                  "os_build": {
                    "description": "OS build code (example: LMY47X).\n",
                    "type": "string"
                  },
                  "os_name": {
                    "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                    "type": "string"
                  },
                  "os_version": {
                    "description": "OS version (example: 9.3.0).\n",
                    "type": "string"
                  },
                  "screen_size": {
                    "description": "Screen size of the device in pixels (example: 640x480).\n",
                    "type": "string"
                  },
                  "sdk_name": {
                    "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                    "type": "string"
                  },
                  "sdk_version": {
                    "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                    "type": "string"
                  },
                  "time_zone_offset": {
                    "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                    "maximum": 840,
                    "minimum": -840,
                    "type": "integer"
                  },
                  "wrapper_runtime_version": {
                    "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                    "type": "string"
                  },
                  "wrapper_sdk_name": {
                    "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                    "type": "string"
                  },
                  "wrapper_sdk_version": {
                    "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                    "type": "string"
                  }
                },
                "required": [
                  "sdk_name",
                  "sdk_version",
                  "os_name",
                  "os_version",
                  "locale",
                  "time_zone_offset",
                  "app_version",
                  "app_build"
                ],
                "type": "object"
              },
              "install_id": {
                "description": "Install ID.\n",
                "format": "uuid",
                "type": "string"
              },
              "timestamp": {
                "description": "Log creation timestamp.\n",
                "format": "date-time",
                "type": "string"
              },
              "type": {
                "description": "Log type.\n",
                "enum": [
                  "event",
                  "page",
                  "start_session",
                  "error",
                  "push_installation",
                  "start_service",
                  "custom_properties"
                ],
                "type": "string"
              }
            },
            "required": [
              "type",
              "timestamp",
              "install_id",
              "device"
            ],
            "type": "object"
          }
        ],
        "properties": {
          "properties": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Additional key/value pair parameters.\n",
            "type": "object"
          }
        },
        "type": "object"
      },
      "LogWithProperties_Diagnostics": {
        "allOf": [
          {
            "discriminator": {
              "propertyName": "type"
            },
            "properties": {
              "device": {
                "description": "Device characteristics.",
                "properties": {
                  "app_build": {
                    "description": "The app's build number, e.g. 42.\n",
                    "type": "string"
                  },
                  "app_namespace": {
                    "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                    "type": "string"
                  },
                  "app_version": {
                    "description": "Application version name, e.g. 1.1.0\n",
                    "type": "string"
                  },
                  "carrier_code": {
                    "description": "Carrier country code (for mobile devices).\n",
                    "type": "string"
                  },
                  "carrier_country": {
                    "description": "Carrier country.\n",
                    "type": "string"
                  },
                  "carrier_name": {
                    "description": "Carrier name (for mobile devices).\n",
                    "type": "string"
                  },
                  "live_update_deployment_key": {
                    "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                    "type": "string"
                  },
                  "live_update_package_hash": {
                    "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                    "type": "string"
                  },
                  "live_update_release_label": {
                    "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                    "type": "string"
                  },
                  "locale": {
                    "description": "Language code (example: en_US).\n",
                    "type": "string"
                  },
                  "model": {
                    "description": "Device model (example: iPad2,3).\n",
                    "type": "string"
                  },
                  "oem_name": {
                    "description": "Device manufacturer (example: HTC).\n",
                    "type": "string"
                  },
                  "os_api_level": {
                    "description": "API level when applicable like in Android (example: 15).\n",
                    "type": "integer"
                  },
                  "os_build": {
                    "description": "OS build code (example: LMY47X).\n",
                    "type": "string"
                  },
                  "os_name": {
                    "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                    "type": "string"
                  },
                  "os_version": {
                    "description": "OS version (example: 9.3.0).\n",
                    "type": "string"
                  },
                  "screen_size": {
                    "description": "Screen size of the device in pixels (example: 640x480).\n",
                    "type": "string"
                  },
                  "sdk_name": {
                    "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                    "type": "string"
                  },
                  "sdk_version": {
                    "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                    "type": "string"
                  },
                  "time_zone_offset": {
                    "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                    "maximum": 840,
                    "minimum": -840,
                    "type": "integer"
                  },
                  "wrapper_runtime_version": {
                    "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                    "type": "string"
                  },
                  "wrapper_sdk_name": {
                    "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                    "type": "string"
                  },
                  "wrapper_sdk_version": {
                    "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                    "type": "string"
                  }
                },
                "required": [
                  "sdk_name",
                  "sdk_version",
                  "os_name",
                  "os_version",
                  "locale",
                  "time_zone_offset",
                  "app_version",
                  "app_build"
                ],
                "type": "object"
              },
              "install_id": {
                "description": "Install ID.\n",
                "format": "uuid",
                "type": "string"
              },
              "timestamp": {
                "description": "Log creation timestamp.\n",
                "format": "date-time",
                "type": "string"
              },
              "type": {
                "description": "Log type.\n",
                "enum": [
                  "event",
                  "page",
                  "start_session",
                  "error",
                  "push_installation",
                  "start_service",
                  "custom_properties"
                ],
                "type": "string"
              }
            },
            "required": [
              "type",
              "timestamp",
              "install_id",
              "device"
            ],
            "type": "object"
          }
        ],
        "properties": {
          "properties": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Additional key/value pair parameters.\n",
            "type": "object"
          }
        },
        "type": "object"
      },
      "Log_Diagnostics": {
        "discriminator": {
          "propertyName": "type"
        },
        "properties": {
          "device": {
            "description": "Device characteristics.",
            "properties": {
              "app_build": {
                "description": "The app's build number, e.g. 42.\n",
                "type": "string"
              },
              "app_namespace": {
                "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                "type": "string"
              },
              "app_version": {
                "description": "Application version name, e.g. 1.1.0\n",
                "type": "string"
              },
              "carrier_code": {
                "description": "Carrier country code (for mobile devices).\n",
                "type": "string"
              },
              "carrier_country": {
                "description": "Carrier country.\n",
                "type": "string"
              },
              "carrier_name": {
                "description": "Carrier name (for mobile devices).\n",
                "type": "string"
              },
              "live_update_deployment_key": {
                "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                "type": "string"
              },
              "live_update_package_hash": {
                "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                "type": "string"
              },
              "live_update_release_label": {
                "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                "type": "string"
              },
              "locale": {
                "description": "Language code (example: en_US).\n",
                "type": "string"
              },
              "model": {
                "description": "Device model (example: iPad2,3).\n",
                "type": "string"
              },
              "oem_name": {
                "description": "Device manufacturer (example: HTC).\n",
                "type": "string"
              },
              "os_api_level": {
                "description": "API level when applicable like in Android (example: 15).\n",
                "type": "integer"
              },
              "os_build": {
                "description": "OS build code (example: LMY47X).\n",
                "type": "string"
              },
              "os_name": {
                "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                "type": "string"
              },
              "os_version": {
                "description": "OS version (example: 9.3.0).\n",
                "type": "string"
              },
              "screen_size": {
                "description": "Screen size of the device in pixels (example: 640x480).\n",
                "type": "string"
              },
              "sdk_name": {
                "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                "type": "string"
              },
              "sdk_version": {
                "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                "type": "string"
              },
              "time_zone_offset": {
                "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                "maximum": 840,
                "minimum": -840,
                "type": "integer"
              },
              "wrapper_runtime_version": {
                "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                "type": "string"
              },
              "wrapper_sdk_name": {
                "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                "type": "string"
              },
              "wrapper_sdk_version": {
                "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                "type": "string"
              }
            },
            "required": [
              "sdk_name",
              "sdk_version",
              "os_name",
              "os_version",
              "locale",
              "time_zone_offset",
              "app_version",
              "app_build"
            ],
            "type": "object"
          },
          "install_id": {
            "description": "Install ID.\n",
            "format": "uuid",
            "type": "string"
          },
          "timestamp": {
            "description": "Log creation timestamp.\n",
            "format": "date-time",
            "type": "string"
          },
          "type": {
            "description": "Log type.\n",
            "enum": [
              "event",
              "page",
              "start_session",
              "error",
              "push_installation",
              "start_service",
              "custom_properties"
            ],
            "type": "string"
          }
        },
        "required": [
          "type",
          "timestamp",
          "install_id",
          "device"
        ],
        "type": "object"
      },
      "MSAUser": {
        "description": "an MSA user's hex CID",
        "properties": {
          "hexcid": {
            "description": "the user's CID",
            "type": "string"
          }
        },
        "required": [
          "hexcid"
        ],
        "type": "object"
      },
      "MalwareScanResultPayload": {
        "description": "Malware scan result from Malware Scan service",
        "properties": {
          "requestId": {
            "description": "Scan request identifier",
            "format": "uuid",
            "type": "string"
          },
          "result": {
            "description": "Scan result",
            "enum": [
              "clean",
              "infected",
              "error"
            ],
            "type": "string"
          }
        },
        "required": [
          "requestId",
          "result"
        ],
        "type": "object"
      },
      "ManagementReleaseDetailsResponse": {
        "description": "Details of an uploaded release",
        "properties": {
          "buildVersion": {
            "description": "The release's buildVersion.<br>\nFor iOS: CFBundleVersion from info.plist.<br>\nFor Android: android:versionCode from AppManifest.xml.\n",
            "type": "string"
          },
          "createdAt": {
            "description": "UTC time the release was created in ISO 8601 format.",
            "type": "string"
          },
          "deletedAt": {
            "description": "UTC time the release was created in ISO 8601 format.",
            "type": "string"
          },
          "distinctId": {
            "description": "ID identifying this unique release.",
            "type": "integer"
          },
          "enabled": {
            "description": "This value determines the whether a release currently is enabled or disabled.",
            "type": "boolean"
          },
          "origin": {
            "description": "The release's origin",
            "enum": [
              "hockeyapp",
              "appcenter"
            ],
            "type": "string"
          },
          "sortVersion": {
            "description": "The release's sortVersion.",
            "type": "string"
          },
          "version": {
            "description": "The release's short version.<br>\nFor iOS: CFBundleShortVersionString from info.plist.<br>\nFor Android: android:versionName from AppManifest.xml.\n",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MemberDevicesInfoResponse": {
        "description": "The information for a single distribution group member and their ios device",
        "properties": {
          "avatar_url": {
            "description": "The avatar URL of the user",
            "type": "string"
          },
          "can_change_password": {
            "description": "User is required to send an old password in order to change the password.",
            "type": "boolean"
          },
          "device_name": {
            "description": "The device description, in the format \"iPhone 7 Plus (A1784)\"",
            "type": "string"
          },
          "display_name": {
            "description": "The full name of the user. Might for example be first and last name",
            "type": "string"
          },
          "email": {
            "description": "The email address of the user",
            "type": "string"
          },
          "full_device_name": {
            "description": "A combination of the device model name and the owner name.",
            "type": "string"
          },
          "id": {
            "description": "The unique id (UUID) of the user",
            "format": "uuid",
            "type": "string"
          },
          "imei": {
            "description": "The device's International Mobile Equipment Identity number. Always empty or undefined at present.",
            "type": "string"
          },
          "invite_pending": {
            "description": "Whether the has accepted the invite. Available when an invite is pending, and the value will be \"true\".",
            "type": "boolean"
          },
          "model": {
            "description": "The model identifier of the device, in the format iDeviceM,N",
            "type": "string"
          },
          "name": {
            "description": "The unique name that is used to identify the user.",
            "type": "string"
          },
          "os_build": {
            "description": "The last known OS version running on the device",
            "type": "string"
          },
          "os_version": {
            "description": "The last known OS version running on the device",
            "type": "string"
          },
          "owner_id": {
            "description": "The user ID of the device owner.",
            "type": "string"
          },
          "registered_at": {
            "description": "Timestamp of when the device was registered in ISO format.",
            "type": "string"
          },
          "serial": {
            "description": "The device's serial number. Always empty or undefined at present.",
            "type": "string"
          },
          "status": {
            "description": "The provisioning status of the device.",
            "type": "string"
          },
          "udid": {
            "description": "The Unique Device IDentifier of the device",
            "type": "string"
          }
        },
        "required": [
          "id",
          "email",
          "udid",
          "model",
          "device_name",
          "os_build",
          "os_version",
          "status"
        ],
        "type": "object"
      },
      "MessageEnvelope": {
        "description": "Envelope for messages sent to actors",
        "properties": {
          "message": {
            "description": "Body of the message",
            "type": "object"
          },
          "messageId": {
            "description": "Unique id of the message",
            "type": "string"
          },
          "messageType": {
            "description": "Type of the message",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MetricsValues": {
        "additionalProperties": {
          "type": "number"
        },
        "description": "A collection of named numeric values",
        "type": "object"
      },
      "MetricsValuesByApp": {
        "additionalProperties": {
          "additionalProperties": {
            "type": "number"
          },
          "description": "A collection of named numeric values",
          "type": "object"
        },
        "description": "A collection of  named numeric values grouped by app",
        "type": "object"
      },
      "Model": {
        "properties": {
          "count": {
            "description": "Count current of model.",
            "format": "int64",
            "type": "integer"
          },
          "model_name": {
            "description": "Model's name.",
            "type": "string"
          },
          "previous_count": {
            "description": "Count of previous model.",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Module": {
        "additionalProperties": {
          "type": "boolean"
        },
        "type": "object"
      },
      "Modules": {
        "properties": {
          "modules": {
            "additionalProperties": {
              "additionalProperties": {
                "type": "boolean"
              },
              "type": "object"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "NativeCrashLog": {
        "type": "string"
      },
      "NewAppReleaseAlertingEvent": {
        "allOf": [
          {
            "description": "Alerting event",
            "properties": {
              "event_id": {
                "description": "A unique identifier for this event instance. Useful for deduplication",
                "type": "string"
              },
              "event_timestamp": {
                "description": "ISO 8601 date time when event was generated",
                "type": "string"
              },
              "properties": {
                "description": "Obsolete. Use emailProperties.",
                "type": "object"
              }
            },
            "required": [
              "event_id",
              "event_timestamp"
            ],
            "type": "object"
          },
          {
            "properties": {
              "app_release_properties": {
                "description": "Properties of new application release",
                "properties": {
                  "app_display_name": {
                    "type": "string"
                  },
                  "app_name": {
                    "type": "string"
                  },
                  "bundle_identifier": {
                    "type": "string"
                  },
                  "distribution_group_id": {
                    "type": "string"
                  },
                  "fingerprint": {
                    "type": "string"
                  },
                  "icon_link": {
                    "type": "string"
                  },
                  "install_link": {
                    "type": "string"
                  },
                  "installable": {
                    "type": "boolean"
                  },
                  "mandatory_update": {
                    "type": "boolean"
                  },
                  "min_os": {
                    "type": "string"
                  },
                  "platform": {
                    "type": "string"
                  },
                  "provisioning_profile_name": {
                    "type": "string"
                  },
                  "provisioning_profile_type": {
                    "type": "string"
                  },
                  "release_id": {
                    "type": "string"
                  },
                  "release_notes": {
                    "type": "string"
                  },
                  "short_version": {
                    "type": "string"
                  },
                  "size": {
                    "type": "integer"
                  },
                  "uploaded_at": {
                    "description": "Date and time in ISO 8601 format",
                    "type": "string"
                  },
                  "version": {
                    "type": "string"
                  }
                },
                "required": [
                  "app_name",
                  "app_display_name",
                  "release_id",
                  "platform",
                  "uploaded_at",
                  "version",
                  "short_version",
                  "size",
                  "bundle_identifier",
                  "install_link"
                ],
                "type": "object"
              },
              "disable_webhook": {
                "description": "indicate whether notify via webhook or not",
                "type": "boolean"
              },
              "user_ids": {
                "description": "List of users who need to receive an email notification. If this is not null, then only sending emails will be triggered even if the event requires calling webhooks or doing other actions.",
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ],
        "description": "New app release alerting event"
      },
      "NewCrashGroupAlertingEvent": {
        "allOf": [
          {
            "description": "Alerting event",
            "properties": {
              "event_id": {
                "description": "A unique identifier for this event instance. Useful for deduplication",
                "type": "string"
              },
              "event_timestamp": {
                "description": "ISO 8601 date time when event was generated",
                "type": "string"
              },
              "properties": {
                "description": "Obsolete. Use emailProperties.",
                "type": "object"
              }
            },
            "required": [
              "event_id",
              "event_timestamp"
            ],
            "type": "object"
          },
          {
            "properties": {
              "crash_group_properties": {
                "description": "Properties of new crash group",
                "properties": {
                  "app_display_name": {
                    "type": "string"
                  },
                  "app_platform": {
                    "type": "string"
                  },
                  "app_version": {
                    "type": "string"
                  },
                  "id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "reason": {
                    "type": "string"
                  },
                  "stack_trace": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "url": {
                    "type": "string"
                  }
                },
                "required": [
                  "id",
                  "name",
                  "reason",
                  "url",
                  "app_display_name",
                  "app_platform",
                  "app_version",
                  "stack_trace"
                ],
                "type": "object"
              }
            },
            "type": "object"
          }
        ],
        "description": "New crash group alerting event"
      },
      "NodeVersion": {
        "description": "The Node version",
        "properties": {
          "current": {
            "description": "If the Node version is default for AppCenter",
            "type": "boolean"
          },
          "name": {
            "description": "The version name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "NodeVersions": {
        "description": "A list of Node versions",
        "items": {
          "description": "The Node version",
          "properties": {
            "current": {
              "description": "If the Node version is default for AppCenter",
              "type": "boolean"
            },
            "name": {
              "description": "The version name",
              "type": "string"
            }
          },
          "type": "object"
        },
        "type": "array"
      },
      "NotifyReleasesContainer": {
        "properties": {
          "releases": {
            "items": {
              "allOf": [
                {
                  "allOf": [
                    {
                      "properties": {
                        "release": {
                          "description": "Release Id.\n",
                          "format": "string",
                          "type": "string"
                        }
                      },
                      "required": [
                        "release"
                      ],
                      "type": "object"
                    }
                  ],
                  "properties": {
                    "distribution_group": {
                      "description": "Distribution group Id.\n",
                      "format": "string",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              ],
              "properties": {
                "user_id": {
                  "description": "Unique user Id.  Will generate a new user Id if not provided.\n",
                  "format": "uuid",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "minItems": 1,
            "type": "array"
          }
        },
        "required": [
          "releases"
        ],
        "type": "object"
      },
      "NumberProperty": {
        "allOf": [
          {
            "discriminator": {
              "propertyName": "type"
            },
            "properties": {
              "name": {
                "maxLength": 128,
                "pattern": "^[a-zA-Z][a-zA-Z0-9\\-_]*$",
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            },
            "required": [
              "type",
              "name"
            ],
            "type": "object"
          }
        ],
        "description": "Number property.",
        "properties": {
          "value": {
            "description": "Number property value.",
            "type": "number"
          }
        },
        "required": [
          "value"
        ],
        "type": "object",
        "x-ms-discriminator-value": "number"
      },
      "NumberProperty_Diagnostics": {
        "allOf": [
          {
            "discriminator": {
              "propertyName": "type"
            },
            "properties": {
              "name": {
                "maxLength": 128,
                "pattern": "^[a-zA-Z][a-zA-Z0-9\\-_]*$",
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            },
            "required": [
              "type",
              "name"
            ],
            "type": "object"
          }
        ],
        "description": "Number property.",
        "properties": {
          "value": {
            "description": "Number property value.",
            "type": "number"
          }
        },
        "required": [
          "value"
        ],
        "type": "object",
        "x-ms-discriminator-value": "number"
      },
      "OS": {
        "properties": {
          "count": {
            "description": "Count current of OS.",
            "format": "int64",
            "type": "integer"
          },
          "os_name": {
            "description": "OS name.",
            "type": "string"
          },
          "previous_count": {
            "description": "Count of previous OS.",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "OSes": {
        "properties": {
          "oses": {
            "items": {
              "properties": {
                "count": {
                  "description": "Count current of OS.",
                  "format": "int64",
                  "type": "integer"
                },
                "os_name": {
                  "description": "OS name.",
                  "type": "string"
                },
                "previous_count": {
                  "description": "Count of previous OS.",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "total": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "OperationStatus": {
        "description": "Operation status",
        "enum": [
          "None",
          "Created",
          "Queued",
          "InProgress",
          "Completed",
          "Failed"
        ],
        "type": "string",
        "x-ms-enum": {
          "modelAsString": false,
          "name": "OperationStatus"
        }
      },
      "OptimizelyUserMetaDataRequest": {
        "properties": {
          "metadata": {
            "type": "object"
          }
        },
        "type": "object"
      },
      "OptimizelyUserMetaDataResponse": {
        "properties": {
          "metadata": {
            "type": "object"
          },
          "userId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "OrgComplianceSettingsRequest": {
        "description": "org settings Request",
        "properties": {
          "certificate_connection_id": {
            "description": "certificate connection id to wrap and resign the app after wrapping",
            "type": "string"
          }
        },
        "required": [
          "certificate_connection_id"
        ],
        "type": "object"
      },
      "OrgComplianceSettingsResponse": {
        "description": "org settings response",
        "properties": {
          "certificate_connection_id": {
            "description": "certificate connection id to wrap and resign the app after wrapping",
            "type": "string"
          },
          "id": {
            "description": "The internal unique id (UUID) of the organization compliance setting",
            "type": "string"
          },
          "is_mam_enabled": {
            "description": "flag to tell if mam warpping is enabled on the Org",
            "type": "boolean"
          },
          "org_id": {
            "description": "The internal unique id (UUID) of the organization.",
            "type": "string"
          }
        },
        "required": [
          "certificate_connection_id",
          "org_id",
          "id"
        ],
        "type": "object"
      },
      "OrgDistributionGroupAppResponse": {
        "allOf": [
          {
            "properties": {
              "description": {
                "description": "The description of the app",
                "type": "string"
              },
              "display_name": {
                "description": "The display name of the app",
                "type": "string"
              },
              "icon_source": {
                "description": "The string representation of the source of the app's icon",
                "type": "string"
              },
              "icon_url": {
                "description": "The string representation of the URL pointing to the app's icon",
                "type": "string"
              },
              "id": {
                "description": "The unique ID (UUID) of the app",
                "format": "uuid",
                "type": "string"
              },
              "name": {
                "description": "The name of the app used in URLs",
                "type": "string"
              },
              "os": {
                "description": "The OS the app will be running on",
                "enum": [
                  "Android",
                  "iOS",
                  "macOS",
                  "Tizen",
                  "tvOS",
                  "Windows",
                  "Linux",
                  "Custom"
                ],
                "type": "string"
              },
              "owner": {
                "description": "The information about the app's owner",
                "properties": {
                  "avatar_url": {
                    "description": "The avatar URL of the owner",
                    "type": "string"
                  },
                  "display_name": {
                    "description": "The owner's display name",
                    "type": "string"
                  },
                  "email": {
                    "description": "The owner's email address",
                    "type": "string"
                  },
                  "id": {
                    "description": "The unique id (UUID) of the owner",
                    "format": "uuid",
                    "type": "string"
                  },
                  "name": {
                    "description": "The unique name that used to identify the owner",
                    "type": "string"
                  },
                  "type": {
                    "description": "The owner type. Can either be 'org' or 'user'",
                    "enum": [
                      "org",
                      "user"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "id",
                  "display_name",
                  "name",
                  "type"
                ],
                "type": "object"
              },
              "release_type": {
                "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
                "type": "string"
              }
            },
            "required": [
              "id",
              "display_name",
              "name",
              "os",
              "owner"
            ],
            "type": "object"
          },
          {
            "properties": {
              "origin": {
                "description": "The creation origin of this app",
                "type": "string"
              },
              "platform": {
                "description": "The platform of the app",
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "OrgDistributionGroupDetailsResponse": {
        "allOf": [
          {
            "properties": {
              "display_name": {
                "description": "The name of the distribution group",
                "type": "string"
              },
              "id": {
                "description": "The unique ID of the distribution group",
                "format": "uuid",
                "type": "string"
              },
              "is_public": {
                "description": "Whether the distribution group is public",
                "type": "boolean"
              },
              "name": {
                "description": "The name of the distribution group used in URLs",
                "type": "string"
              },
              "origin": {
                "description": "The creation origin of this distribution group",
                "enum": [
                  "appcenter",
                  "hockeyapp"
                ],
                "type": "string"
              }
            },
            "required": [
              "id",
              "name",
              "origin",
              "is_public"
            ],
            "type": "object"
          },
          {
            "properties": {
              "apps": {
                "description": "The apps associated with the distribution group",
                "items": {
                  "allOf": [
                    {
                      "properties": {
                        "description": {
                          "description": "The description of the app",
                          "type": "string"
                        },
                        "display_name": {
                          "description": "The display name of the app",
                          "type": "string"
                        },
                        "icon_source": {
                          "description": "The string representation of the source of the app's icon",
                          "type": "string"
                        },
                        "icon_url": {
                          "description": "The string representation of the URL pointing to the app's icon",
                          "type": "string"
                        },
                        "id": {
                          "description": "The unique ID (UUID) of the app",
                          "format": "uuid",
                          "type": "string"
                        },
                        "name": {
                          "description": "The name of the app used in URLs",
                          "type": "string"
                        },
                        "os": {
                          "description": "The OS the app will be running on",
                          "enum": [
                            "Android",
                            "iOS",
                            "macOS",
                            "Tizen",
                            "tvOS",
                            "Windows",
                            "Linux",
                            "Custom"
                          ],
                          "type": "string"
                        },
                        "owner": {
                          "description": "The information about the app's owner",
                          "properties": {
                            "avatar_url": {
                              "description": "The avatar URL of the owner",
                              "type": "string"
                            },
                            "display_name": {
                              "description": "The owner's display name",
                              "type": "string"
                            },
                            "email": {
                              "description": "The owner's email address",
                              "type": "string"
                            },
                            "id": {
                              "description": "The unique id (UUID) of the owner",
                              "format": "uuid",
                              "type": "string"
                            },
                            "name": {
                              "description": "The unique name that used to identify the owner",
                              "type": "string"
                            },
                            "type": {
                              "description": "The owner type. Can either be 'org' or 'user'",
                              "enum": [
                                "org",
                                "user"
                              ],
                              "type": "string"
                            }
                          },
                          "required": [
                            "id",
                            "display_name",
                            "name",
                            "type"
                          ],
                          "type": "object"
                        },
                        "release_type": {
                          "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
                          "type": "string"
                        }
                      },
                      "required": [
                        "id",
                        "display_name",
                        "name",
                        "os",
                        "owner"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "app_secret": {
                          "description": "A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics",
                          "type": "string"
                        },
                        "azure_subscription": {
                          "properties": {
                            "is_billable": {
                              "description": "If the subscription can be used for billing",
                              "type": "boolean"
                            },
                            "is_billing": {
                              "description": "If the subscription is used for billing",
                              "type": "boolean"
                            },
                            "is_microsoft_internal": {
                              "description": "If the subscription is internal Microsoft subscription",
                              "type": "boolean"
                            },
                            "subscription_id": {
                              "description": "The azure subscription id",
                              "format": "uuid",
                              "type": "string"
                            },
                            "subscription_name": {
                              "description": "The name of the azure subscription",
                              "type": "string"
                            },
                            "tenant_id": {
                              "description": "The tenant id of the azure subscription belongs to",
                              "format": "uuid",
                              "type": "string"
                            }
                          },
                          "required": [
                            "subscription_id",
                            "tenant_id",
                            "subscription_name"
                          ],
                          "type": "object"
                        },
                        "created_at": {
                          "description": "The created date of this app",
                          "type": "string"
                        },
                        "member_permissions": {
                          "description": "The permissions of the calling user",
                          "items": {
                            "enum": [
                              "manager",
                              "developer",
                              "viewer",
                              "tester"
                            ],
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "origin": {
                          "description": "The creation origin of this app",
                          "enum": [
                            "appcenter",
                            "hockeyapp",
                            "codepush"
                          ],
                          "type": "string"
                        },
                        "platform": {
                          "description": "The platform of the app",
                          "enum": [
                            "Java",
                            "Objective-C-Swift",
                            "UWP",
                            "Cordova",
                            "React-Native",
                            "Unity",
                            "Electron",
                            "Xamarin",
                            "WPF",
                            "WinForms",
                            "Unknown",
                            "Custom"
                          ],
                          "type": "string"
                        },
                        "updated_at": {
                          "description": "The last updated date of this app",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "required": [
                    "app_secret",
                    "platform",
                    "origin"
                  ]
                },
                "type": "array"
              },
              "total_apps_count": {
                "description": "The count of apps associated with this distribution group",
                "type": "number"
              },
              "total_users_count": {
                "description": "The count of users in the distribution group",
                "type": "number"
              }
            },
            "type": "object"
          }
        ],
        "required": [
          "apps",
          "total_users_count",
          "total_apps_count"
        ]
      },
      "OrgNameAvailabilityResponse": {
        "properties": {
          "available": {
            "description": "The availability status of the requested org name",
            "type": "boolean"
          },
          "name": {
            "description": "The generated org name",
            "type": "string"
          }
        },
        "required": [
          "available",
          "name"
        ],
        "type": "object"
      },
      "OrgUserPermissionResponse": {
        "properties": {
          "orgId": {
            "description": "The unique id (UUID) of the org",
            "format": "uuid",
            "type": "string"
          },
          "userRole": {
            "description": "The user role for the org",
            "enum": [
              "admin",
              "collaborator"
            ],
            "type": "string"
          }
        },
        "required": [
          "orgId",
          "userRole"
        ],
        "type": "object"
      },
      "OrganizationAadGroupPatchRequest": {
        "properties": {
          "role": {
            "description": "The user's role in the organizatiion",
            "enum": [
              "admin",
              "collaborator",
              "member"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "OrganizationInvitationDetailResponse": {
        "properties": {
          "email": {
            "description": "The email address of the invited user",
            "type": "string"
          },
          "id": {
            "description": "The unique ID (UUID) of the invitation",
            "format": "uuid",
            "type": "string"
          },
          "invited_by": {
            "properties": {
              "avatar_url": {
                "description": "The avatar URL of the user",
                "type": "string"
              },
              "can_change_password": {
                "description": "User is required to send an old password in order to change the password.",
                "type": "boolean"
              },
              "display_name": {
                "description": "The full name of the user. Might for example be first and last name",
                "type": "string"
              },
              "email": {
                "description": "The email address of the user",
                "type": "string"
              },
              "id": {
                "description": "The unique id (UUID) of the user",
                "format": "uuid",
                "type": "string"
              },
              "name": {
                "description": "The unique name that is used to identify the user.",
                "type": "string"
              },
              "origin": {
                "description": "The creation origin of this user",
                "enum": [
                  "appcenter",
                  "hockeyapp",
                  "codepush"
                ],
                "type": "string"
              },
              "permissions": {
                "description": "The permissions the user has for the app",
                "items": {
                  "enum": [
                    "manager",
                    "developer",
                    "viewer",
                    "tester"
                  ],
                  "type": "string"
                },
                "type": "array"
              }
            },
            "required": [
              "id",
              "display_name",
              "email",
              "name",
              "origin"
            ],
            "type": "object"
          },
          "is_existing_user": {
            "description": "Indicates whether the invited user already exists",
            "type": "boolean"
          },
          "organization": {
            "properties": {
              "avatar_url": {
                "description": "The URL to a user-uploaded Avatar image",
                "type": "string"
              },
              "created_at": {
                "description": "The creation date of this organization",
                "type": "string"
              },
              "display_name": {
                "description": "The display name of the organization",
                "type": "string"
              },
              "id": {
                "description": "The internal unique id (UUID) of the organization.",
                "format": "uuid",
                "type": "string"
              },
              "name": {
                "description": "The slug name of the organization",
                "type": "string"
              },
              "origin": {
                "description": "The creation origin of this organization",
                "enum": [
                  "appcenter",
                  "hockeyapp"
                ],
                "type": "string"
              },
              "updated_at": {
                "description": "The date the organization was last updated at",
                "type": "string"
              }
            },
            "required": [
              "id",
              "display_name",
              "name",
              "origin",
              "created_at",
              "updated_at"
            ],
            "type": "object"
          },
          "role": {
            "description": "The role assigned to the invited user",
            "type": "string"
          }
        },
        "required": [
          "id",
          "email",
          "is_existing_user",
          "invited_by",
          "organization"
        ],
        "type": "object"
      },
      "OrganizationInvitationSimpleDetailResponse": {
        "properties": {
          "email": {
            "description": "The email address of the invited user",
            "type": "string"
          },
          "id": {
            "description": "The unique ID (UUID) of the invitation",
            "format": "uuid",
            "type": "string"
          },
          "role": {
            "description": "The role assigned to the invited user",
            "type": "string"
          }
        },
        "required": [
          "id",
          "email",
          "role"
        ],
        "type": "object"
      },
      "OrganizationPatchRequest": {
        "properties": {
          "display_name": {
            "description": "The full (friendly) name of the organization.",
            "type": "string"
          },
          "name": {
            "description": "The name of the organization used in URLs",
            "type": "string"
          }
        },
        "type": "object"
      },
      "OrganizationRequest": {
        "properties": {
          "display_name": {
            "description": "The display name of the organization",
            "type": "string"
          },
          "name": {
            "description": "The name of the organization used in URLs",
            "type": "string"
          }
        },
        "type": "object"
      },
      "OrganizationResponse": {
        "properties": {
          "avatar_url": {
            "description": "The URL to a user-uploaded Avatar image",
            "type": "string"
          },
          "created_at": {
            "description": "The creation date of this organization",
            "type": "string"
          },
          "display_name": {
            "description": "The display name of the organization",
            "type": "string"
          },
          "id": {
            "description": "The internal unique id (UUID) of the organization.",
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "description": "The slug name of the organization",
            "type": "string"
          },
          "origin": {
            "description": "The creation origin of this organization",
            "enum": [
              "appcenter",
              "hockeyapp"
            ],
            "type": "string"
          },
          "updated_at": {
            "description": "The date the organization was last updated at",
            "type": "string"
          }
        },
        "required": [
          "id",
          "display_name",
          "name",
          "origin",
          "created_at",
          "updated_at"
        ],
        "type": "object"
      },
      "OrganizationResponseInternal": {
        "allOf": [
          {
            "properties": {
              "avatar_url": {
                "description": "The URL to a user-uploaded Avatar image",
                "type": "string"
              },
              "created_at": {
                "description": "The creation date of this organization",
                "type": "string"
              },
              "display_name": {
                "description": "The display name of the organization",
                "type": "string"
              },
              "id": {
                "description": "The internal unique id (UUID) of the organization.",
                "format": "uuid",
                "type": "string"
              },
              "name": {
                "description": "The slug name of the organization",
                "type": "string"
              },
              "origin": {
                "description": "The creation origin of this organization",
                "enum": [
                  "appcenter",
                  "hockeyapp"
                ],
                "type": "string"
              },
              "updated_at": {
                "description": "The date the organization was last updated at",
                "type": "string"
              }
            },
            "required": [
              "id",
              "display_name",
              "name",
              "origin",
              "created_at",
              "updated_at"
            ],
            "type": "object"
          },
          {
            "properties": {
              "feature_flags": {
                "description": "The feature flags that are enabled for this organization",
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "OrganizationResponseManagement": {
        "allOf": [
          {
            "allOf": [
              {
                "properties": {
                  "avatar_url": {
                    "description": "The URL to a user-uploaded Avatar image",
                    "type": "string"
                  },
                  "created_at": {
                    "description": "The creation date of this organization",
                    "type": "string"
                  },
                  "display_name": {
                    "description": "The display name of the organization",
                    "type": "string"
                  },
                  "id": {
                    "description": "The internal unique id (UUID) of the organization.",
                    "format": "uuid",
                    "type": "string"
                  },
                  "name": {
                    "description": "The slug name of the organization",
                    "type": "string"
                  },
                  "origin": {
                    "description": "The creation origin of this organization",
                    "enum": [
                      "appcenter",
                      "hockeyapp"
                    ],
                    "type": "string"
                  },
                  "updated_at": {
                    "description": "The date the organization was last updated at",
                    "type": "string"
                  }
                },
                "required": [
                  "id",
                  "display_name",
                  "name",
                  "origin",
                  "created_at",
                  "updated_at"
                ],
                "type": "object"
              },
              {
                "properties": {
                  "feature_flags": {
                    "description": "The feature flags that are enabled for this organization",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            ]
          },
          {
            "properties": {
              "created_at": {
                "description": "The date when the organization was created",
                "type": "string"
              },
              "email": {
                "description": "The organization email, if the app was synced from HockeyApp",
                "type": "string"
              },
              "updated_at": {
                "description": "The date when the organization was updated",
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "OrganizationUserPatchRequest": {
        "properties": {
          "role": {
            "description": "The user's role in the organizatiion",
            "enum": [
              "admin",
              "collaborator",
              "member"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "OrganizationUserResponse": {
        "properties": {
          "display_name": {
            "description": "The full name of the user. Might for example be first and last name",
            "type": "string"
          },
          "email": {
            "description": "The email address of the user",
            "type": "string"
          },
          "joined_at": {
            "description": "The date when the user joined the organization",
            "type": "string"
          },
          "name": {
            "description": "The unique name that is used to identify the user.",
            "type": "string"
          },
          "role": {
            "description": "The role the user has within the organization",
            "type": "string"
          }
        },
        "required": [
          "display_name",
          "email",
          "joined_at",
          "name",
          "role"
        ],
        "type": "object"
      },
      "Owner": {
        "description": "The information about the app's owner",
        "properties": {
          "avatar_url": {
            "description": "The avatar URL of the owner",
            "type": "string"
          },
          "display_name": {
            "description": "The owner's display name",
            "type": "string"
          },
          "email": {
            "description": "The owner's email address",
            "type": "string"
          },
          "id": {
            "description": "The unique id (UUID) of the owner",
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "description": "The unique name that used to identify the owner",
            "type": "string"
          },
          "type": {
            "description": "The owner type. Can either be 'org' or 'user'",
            "enum": [
              "org",
              "user"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "display_name",
          "name",
          "type"
        ],
        "type": "object"
      },
      "PackageHashToBlobInfoMap": {
        "additionalProperties": {
          "properties": {
            "size": {
              "type": "number"
            },
            "url": {
              "type": "string"
            }
          },
          "required": [
            "size",
            "url"
          ],
          "type": "object"
        },
        "type": "object"
      },
      "PageLog": {
        "allOf": [
          {
            "allOf": [
              {
                "discriminator": {
                  "propertyName": "type"
                },
                "properties": {
                  "device": {
                    "description": "Device characteristics.",
                    "properties": {
                      "app_build": {
                        "description": "The app's build number, e.g. 42.\n",
                        "type": "string"
                      },
                      "app_namespace": {
                        "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                        "type": "string"
                      },
                      "app_version": {
                        "description": "Application version name, e.g. 1.1.0\n",
                        "type": "string"
                      },
                      "carrier_code": {
                        "description": "Carrier country code (for mobile devices).\n",
                        "type": "string"
                      },
                      "carrier_country": {
                        "description": "Carrier country.\n",
                        "type": "string"
                      },
                      "carrier_name": {
                        "description": "Carrier name (for mobile devices).\n",
                        "type": "string"
                      },
                      "live_update_deployment_key": {
                        "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                        "type": "string"
                      },
                      "live_update_package_hash": {
                        "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                        "type": "string"
                      },
                      "live_update_release_label": {
                        "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                        "type": "string"
                      },
                      "locale": {
                        "description": "Language code (example: en_US).\n",
                        "type": "string"
                      },
                      "model": {
                        "description": "Device model (example: iPad2,3).\n",
                        "type": "string"
                      },
                      "oem_name": {
                        "description": "Device manufacturer (example: HTC).\n",
                        "type": "string"
                      },
                      "os_api_level": {
                        "description": "API level when applicable like in Android (example: 15).\n",
                        "type": "integer"
                      },
                      "os_build": {
                        "description": "OS build code (example: LMY47X).\n",
                        "type": "string"
                      },
                      "os_name": {
                        "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                        "type": "string"
                      },
                      "os_version": {
                        "description": "OS version (example: 9.3.0).\n",
                        "type": "string"
                      },
                      "screen_size": {
                        "description": "Screen size of the device in pixels (example: 640x480).\n",
                        "type": "string"
                      },
                      "sdk_name": {
                        "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                        "type": "string"
                      },
                      "sdk_version": {
                        "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                        "type": "string"
                      },
                      "time_zone_offset": {
                        "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                        "maximum": 840,
                        "minimum": -840,
                        "type": "integer"
                      },
                      "wrapper_runtime_version": {
                        "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                        "type": "string"
                      },
                      "wrapper_sdk_name": {
                        "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                        "type": "string"
                      },
                      "wrapper_sdk_version": {
                        "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                        "type": "string"
                      }
                    },
                    "required": [
                      "sdk_name",
                      "sdk_version",
                      "os_name",
                      "os_version",
                      "locale",
                      "time_zone_offset",
                      "app_version",
                      "app_build"
                    ],
                    "type": "object"
                  },
                  "install_id": {
                    "description": "Install ID.\n",
                    "format": "uuid",
                    "type": "string"
                  },
                  "timestamp": {
                    "description": "Log creation timestamp.\n",
                    "format": "date-time",
                    "type": "string"
                  },
                  "type": {
                    "description": "Log type.\n",
                    "enum": [
                      "event",
                      "page",
                      "start_session",
                      "error",
                      "push_installation",
                      "start_service",
                      "custom_properties"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "type",
                  "timestamp",
                  "install_id",
                  "device"
                ],
                "type": "object"
              }
            ],
            "properties": {
              "properties": {
                "additionalProperties": {
                  "type": "string"
                },
                "description": "Additional key/value pair parameters.\n",
                "type": "object"
              }
            },
            "type": "object"
          }
        ],
        "description": "Page view log (as in screens or activities).",
        "properties": {
          "name": {
            "description": "Name of the page.\n",
            "type": "string"
          },
          "session_id": {
            "description": "Session ID.\n",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "name",
          "session_id"
        ],
        "type": "object",
        "x-ms-discriminator-value": "page"
      },
      "PageLog_Diagnostics": {
        "allOf": [
          {
            "allOf": [
              {
                "discriminator": {
                  "propertyName": "type"
                },
                "properties": {
                  "device": {
                    "description": "Device characteristics.",
                    "properties": {
                      "app_build": {
                        "description": "The app's build number, e.g. 42.\n",
                        "type": "string"
                      },
                      "app_namespace": {
                        "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                        "type": "string"
                      },
                      "app_version": {
                        "description": "Application version name, e.g. 1.1.0\n",
                        "type": "string"
                      },
                      "carrier_code": {
                        "description": "Carrier country code (for mobile devices).\n",
                        "type": "string"
                      },
                      "carrier_country": {
                        "description": "Carrier country.\n",
                        "type": "string"
                      },
                      "carrier_name": {
                        "description": "Carrier name (for mobile devices).\n",
                        "type": "string"
                      },
                      "live_update_deployment_key": {
                        "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                        "type": "string"
                      },
                      "live_update_package_hash": {
                        "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                        "type": "string"
                      },
                      "live_update_release_label": {
                        "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                        "type": "string"
                      },
                      "locale": {
                        "description": "Language code (example: en_US).\n",
                        "type": "string"
                      },
                      "model": {
                        "description": "Device model (example: iPad2,3).\n",
                        "type": "string"
                      },
                      "oem_name": {
                        "description": "Device manufacturer (example: HTC).\n",
                        "type": "string"
                      },
                      "os_api_level": {
                        "description": "API level when applicable like in Android (example: 15).\n",
                        "type": "integer"
                      },
                      "os_build": {
                        "description": "OS build code (example: LMY47X).\n",
                        "type": "string"
                      },
                      "os_name": {
                        "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                        "type": "string"
                      },
                      "os_version": {
                        "description": "OS version (example: 9.3.0).\n",
                        "type": "string"
                      },
                      "screen_size": {
                        "description": "Screen size of the device in pixels (example: 640x480).\n",
                        "type": "string"
                      },
                      "sdk_name": {
                        "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                        "type": "string"
                      },
                      "sdk_version": {
                        "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                        "type": "string"
                      },
                      "time_zone_offset": {
                        "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                        "maximum": 840,
                        "minimum": -840,
                        "type": "integer"
                      },
                      "wrapper_runtime_version": {
                        "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                        "type": "string"
                      },
                      "wrapper_sdk_name": {
                        "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                        "type": "string"
                      },
                      "wrapper_sdk_version": {
                        "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                        "type": "string"
                      }
                    },
                    "required": [
                      "sdk_name",
                      "sdk_version",
                      "os_name",
                      "os_version",
                      "locale",
                      "time_zone_offset",
                      "app_version",
                      "app_build"
                    ],
                    "type": "object"
                  },
                  "install_id": {
                    "description": "Install ID.\n",
                    "format": "uuid",
                    "type": "string"
                  },
                  "timestamp": {
                    "description": "Log creation timestamp.\n",
                    "format": "date-time",
                    "type": "string"
                  },
                  "type": {
                    "description": "Log type.\n",
                    "enum": [
                      "event",
                      "page",
                      "start_session",
                      "error",
                      "push_installation",
                      "start_service",
                      "custom_properties"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "type",
                  "timestamp",
                  "install_id",
                  "device"
                ],
                "type": "object"
              }
            ],
            "properties": {
              "properties": {
                "additionalProperties": {
                  "type": "string"
                },
                "description": "Additional key/value pair parameters.\n",
                "type": "object"
              }
            },
            "type": "object"
          }
        ],
        "description": "Page view log (as in screens or activities).",
        "properties": {
          "name": {
            "description": "Name of the page.\n",
            "type": "string"
          },
          "session_id": {
            "description": "Session ID.\n",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "name",
          "session_id"
        ],
        "type": "object",
        "x-ms-discriminator-value": "page"
      },
      "PasswordUpdateRequest": {
        "properties": {
          "new_password": {
            "description": "The new password that will be set for the user. Needs to be at least 8 characters long and contain at least one lower- and one uppercase letter.",
            "type": "string"
          },
          "old_password": {
            "description": "The old password, if needed.",
            "type": "string"
          }
        },
        "required": [
          "new_password"
        ],
        "type": "object"
      },
      "PatchReleaseAssetIdRequest": {
        "description": "Patch the asset id of a release request body",
        "properties": {
          "ipa_uuids": {
            "description": "The ipa UUIDs for this release, as a serialized JSON array",
            "type": "string"
          },
          "package_asset_id": {
            "description": "The release new package id in ACFUS",
            "format": "uuid",
            "type": "string"
          },
          "upload_id": {
            "description": "The release upload id used to upload the release",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "package_asset_id",
          "upload_id"
        ],
        "type": "object"
      },
      "PatchReleaseRequest": {
        "properties": {
          "dest_publish_id": {
            "description": "Destination Publish Id",
            "type": "string"
          },
          "error_contextId": {
            "description": "contextId for failed error message",
            "type": "string"
          },
          "error_details": {
            "description": "failure error details from store",
            "type": "string"
          },
          "is_wrapper_request": {
            "description": "request is for wrapping or not",
            "type": "boolean"
          },
          "status": {
            "description": "updated status of release",
            "type": "string"
          },
          "wrap_package_url": {
            "description": "package url for wrapping request",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PatchReleaseUploadStatusRequest": {
        "properties": {
          "upload_status": {
            "description": "The new status of the release upload",
            "enum": [
              "uploadFinished",
              "uploadCanceled"
            ],
            "type": "string"
          }
        },
        "required": [
          "upload_status"
        ],
        "type": "object"
      },
      "PatchReleaseUploadStatusResponse": {
        "properties": {
          "id": {
            "description": "The ID for the upload.",
            "format": "uuid",
            "type": "string"
          },
          "upload_status": {
            "description": "The current upload status.",
            "enum": [
              "uploadStarted",
              "uploadFinished",
              "uploadCanceled",
              "readyToBePublished",
              "malwareDetected",
              "error"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "upload_status"
        ],
        "type": "object"
      },
      "PatchRepoInfo": {
        "properties": {
          "external_user_id": {
            "description": "The external user ID",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Place": {
        "description": "The place code and the count.",
        "properties": {
          "code": {
            "description": "The place code.",
            "type": "string"
          },
          "count": {
            "description": "The count of the this place.",
            "format": "int64",
            "type": "integer"
          },
          "previous_count": {
            "description": "The count of previous time range of the place.",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Places": {
        "description": "Places and count during the time range in descending order.",
        "properties": {
          "places": {
            "items": {
              "description": "The place code and the count.",
              "properties": {
                "code": {
                  "description": "The place code.",
                  "type": "string"
                },
                "count": {
                  "description": "The count of the this place.",
                  "format": "int64",
                  "type": "integer"
                },
                "previous_count": {
                  "description": "The count of previous time range of the place.",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "total": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "PostCreateReleaseUploadRequest": {
        "properties": {
          "build_number": {
            "description": "User defined build number",
            "type": "string"
          },
          "build_version": {
            "description": "User defined build version",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PostExternalDownloadUrl": {
        "description": "Set the download URL of an external build",
        "properties": {
          "download_url": {
            "description": "The new download URL",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PostPlaceholderReleaseUploadForDeleteRequest": {
        "description": "Set additional details for the placeholder ReleaseUpload that will be scheduled for delete.",
        "properties": {
          "error_details": {
            "description": "Additional details to identify why the placeholder ReleaseUpload is being created.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PostRepositoryProviderMappingRequest": {
        "properties": {
          "account_id": {
            "description": "App Center account id to link to this provider and external id",
            "format": "uuid",
            "type": "string"
          },
          "external_account_id": {
            "description": "Id of user in the external provider service",
            "type": "string"
          },
          "provider": {
            "description": "Supported external providers of source control repositories",
            "enum": [
              "github"
            ],
            "type": "string"
          }
        },
        "required": [
          "external_account_id",
          "provider",
          "account_id"
        ],
        "type": "object"
      },
      "PostRestoreAppRequest": {
        "properties": {
          "responsibleAdminId": {
            "description": "The internal unique id (UUID) of the account of the user, who makes the request.",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "responsibleAdminId"
        ],
        "type": "object"
      },
      "PrivateAppleCertificateSecretResponse": {
        "allOf": [
          {
            "allOf": [
              {
                "description": "PrivateSharedConnectionResponse",
                "discriminator": {
                  "propertyName": "serviceType"
                },
                "properties": {
                  "displayName": {
                    "description": "display name of shared connection",
                    "type": "string"
                  },
                  "id": {
                    "description": "id of the shared connection",
                    "type": "string"
                  },
                  "is2FA": {
                    "description": "if the account is a 2FA account or not",
                    "type": "boolean"
                  },
                  "isValid": {
                    "description": "whether the credentials are valid or not",
                    "type": "boolean"
                  },
                  "serviceType": {
                    "description": "service type of shared connection can be apple|gitlab|googleplay|jira|applecertificate",
                    "enum": [
                      "apple",
                      "jira",
                      "googleplay",
                      "gitlab"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "id",
                  "serviceType"
                ],
                "type": "object"
              }
            ],
            "description": "private Apple connection secrets response",
            "discriminator": {
              "propertyName": "credentialType"
            },
            "x-ms-discriminator-value": "apple"
          }
        ],
        "description": "private Apple connection secrets response",
        "properties": {
          "data": {
            "description": "apple secret details",
            "properties": {
              "base64Certificate": {
                "description": "The certificate contents in base 64 encoded string",
                "type": "string"
              },
              "certificateValidityEndDate": {
                "description": "The date-time till which the certificate is valid",
                "type": "string"
              },
              "certificateValidityStartDate": {
                "description": "The date-time from which the certificate is valid",
                "type": "string"
              },
              "displayName": {
                "description": "The display name (CN) of the certificate",
                "type": "string"
              },
              "password": {
                "description": "The password for the certificate",
                "type": "string"
              }
            },
            "required": [
              "base64Certificate",
              "password",
              "displayName",
              "certificateValidityStartDate",
              "certificateValidityEndDate"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object",
        "x-ms-discriminator-value": "certificate"
      },
      "PrivateAppleCredentialsSecretResponse": {
        "allOf": [
          {
            "allOf": [
              {
                "description": "PrivateSharedConnectionResponse",
                "discriminator": {
                  "propertyName": "serviceType"
                },
                "properties": {
                  "displayName": {
                    "description": "display name of shared connection",
                    "type": "string"
                  },
                  "id": {
                    "description": "id of the shared connection",
                    "type": "string"
                  },
                  "is2FA": {
                    "description": "if the account is a 2FA account or not",
                    "type": "boolean"
                  },
                  "isValid": {
                    "description": "whether the credentials are valid or not",
                    "type": "boolean"
                  },
                  "serviceType": {
                    "description": "service type of shared connection can be apple|gitlab|googleplay|jira|applecertificate",
                    "enum": [
                      "apple",
                      "jira",
                      "googleplay",
                      "gitlab"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "id",
                  "serviceType"
                ],
                "type": "object"
              }
            ],
            "description": "private Apple connection secrets response",
            "discriminator": {
              "propertyName": "credentialType"
            },
            "x-ms-discriminator-value": "apple"
          }
        ],
        "description": "private Apple connection secrets response",
        "discriminator": {
          "propertyName": "serviceType"
        },
        "properties": {
          "data": {
            "description": "apple secret details",
            "properties": {
              "authCode": {
                "description": "6 digit auth code",
                "maxLength": 6,
                "minLength": 6,
                "type": "string"
              },
              "password": {
                "description": "password to connect to apple store.",
                "type": "string"
              },
              "username": {
                "description": "username to connect to apple store.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object",
        "x-ms-discriminator-value": "certificate"
      },
      "PrivateAppleSecretResponse": {
        "allOf": [
          {
            "description": "PrivateSharedConnectionResponse",
            "discriminator": {
              "propertyName": "serviceType"
            },
            "properties": {
              "displayName": {
                "description": "display name of shared connection",
                "type": "string"
              },
              "id": {
                "description": "id of the shared connection",
                "type": "string"
              },
              "is2FA": {
                "description": "if the account is a 2FA account or not",
                "type": "boolean"
              },
              "isValid": {
                "description": "whether the credentials are valid or not",
                "type": "boolean"
              },
              "serviceType": {
                "description": "service type of shared connection can be apple|gitlab|googleplay|jira|applecertificate",
                "enum": [
                  "apple",
                  "jira",
                  "googleplay",
                  "gitlab"
                ],
                "type": "string"
              }
            },
            "required": [
              "id",
              "serviceType"
            ],
            "type": "object"
          }
        ],
        "description": "private Apple connection secrets response",
        "discriminator": {
          "propertyName": "credentialType"
        },
        "x-ms-discriminator-value": "apple"
      },
      "PrivateBasicReleaseDetailsResponse": {
        "description": "Basic information on a release for private apis",
        "properties": {
          "destination_type": {
            "description": "The destination type.<br>\n<b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br>\n<b>store</b>: The release distributed to external stores and distribution_stores details will be returned. <br>\n",
            "enum": [
              "group",
              "store",
              "tester"
            ],
            "type": "string"
          },
          "distribution_group_id": {
            "description": "the destination id of release where it is distributed.",
            "type": "string"
          },
          "id": {
            "description": "ID identifying this unique release.",
            "type": "integer"
          },
          "is_external_build": {
            "description": "This value determines if a release is external or not.",
            "type": "boolean"
          },
          "is_latest": {
            "description": "Indicates if this is the latest release in the group.",
            "type": "boolean"
          },
          "mandatory_update": {
            "description": "A boolean which determines whether the release is a mandatory update or not.",
            "type": "boolean"
          },
          "origin": {
            "description": "The release's origin",
            "enum": [
              "hockeyapp",
              "appcenter"
            ],
            "type": "string"
          },
          "publishing_status": {
            "description": "the publishing status of the distributed release",
            "type": "string"
          },
          "short_version": {
            "description": "The release's short version.<br>\nFor iOS: CFBundleShortVersionString from info.plist.<br>\nFor Android: android:versionName from AppManifest.xml.\n",
            "type": "string"
          },
          "uploaded_at": {
            "description": "UTC time in ISO 8601 format of the uploaded time.",
            "type": "string"
          },
          "version": {
            "description": "The release's version.<br>\nFor iOS: CFBundleVersion from info.plist.<br>\nFor Android: android:versionCode from AppManifest.xml.\n",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PrivateCreateStoreRequest": {
        "description": "create the store through private API. Used by UI.",
        "properties": {
          "intune_details": {
            "properties": {
              "app_category": {
                "properties": {
                  "name": {
                    "description": "display name for the app category",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "target_audience": {
                "properties": {
                  "name": {
                    "description": "display name for the target audience/group",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "tenant_id": {
                "description": "tenant id of the intune store",
                "type": "string"
              }
            },
            "type": "object"
          },
          "name": {
            "description": "name of the store.",
            "type": "string"
          },
          "type": {
            "description": "store Type",
            "enum": [
              "intune"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "PrivateGooglePlayConnectionSecretResponse": {
        "allOf": [
          {
            "description": "PrivateSharedConnectionResponse",
            "discriminator": {
              "propertyName": "serviceType"
            },
            "properties": {
              "displayName": {
                "description": "display name of shared connection",
                "type": "string"
              },
              "id": {
                "description": "id of the shared connection",
                "type": "string"
              },
              "is2FA": {
                "description": "if the account is a 2FA account or not",
                "type": "boolean"
              },
              "isValid": {
                "description": "whether the credentials are valid or not",
                "type": "boolean"
              },
              "serviceType": {
                "description": "service type of shared connection can be apple|gitlab|googleplay|jira|applecertificate",
                "enum": [
                  "apple",
                  "jira",
                  "googleplay",
                  "gitlab"
                ],
                "type": "string"
              }
            },
            "required": [
              "id",
              "serviceType"
            ],
            "type": "object"
          }
        ],
        "description": "private google connection secrets response",
        "discriminator": {
          "propertyName": "serviceType"
        },
        "properties": {
          "data": {
            "description": "google secret details",
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object",
        "x-ms-discriminator-value": "googleplay"
      },
      "PrivateIntuneStoreRequest": {
        "properties": {
          "app_category": {
            "properties": {
              "name": {
                "description": "display name for the app category",
                "type": "string"
              }
            },
            "type": "object"
          },
          "target_audience": {
            "properties": {
              "name": {
                "description": "display name for the target audience/group",
                "type": "string"
              }
            },
            "type": "object"
          },
          "tenant_id": {
            "description": "tenant id of the intune store",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PrivateJiraConnectionSecretResponse": {
        "allOf": [
          {
            "description": "PrivateSharedConnectionResponse",
            "discriminator": {
              "propertyName": "serviceType"
            },
            "properties": {
              "displayName": {
                "description": "display name of shared connection",
                "type": "string"
              },
              "id": {
                "description": "id of the shared connection",
                "type": "string"
              },
              "is2FA": {
                "description": "if the account is a 2FA account or not",
                "type": "boolean"
              },
              "isValid": {
                "description": "whether the credentials are valid or not",
                "type": "boolean"
              },
              "serviceType": {
                "description": "service type of shared connection can be apple|gitlab|googleplay|jira|applecertificate",
                "enum": [
                  "apple",
                  "jira",
                  "googleplay",
                  "gitlab"
                ],
                "type": "string"
              }
            },
            "required": [
              "id",
              "serviceType"
            ],
            "type": "object"
          }
        ],
        "description": "private Jira connection secrets response",
        "discriminator": {
          "propertyName": "serviceType"
        },
        "properties": {
          "data": {
            "description": "jira secret details",
            "properties": {
              "baseUrl": {
                "description": "baseUrl to connect to jira instance",
                "type": "string"
              },
              "password": {
                "description": "password to connect to jira instance",
                "type": "string"
              },
              "username": {
                "description": "username to connect to jira instance",
                "type": "string"
              }
            },
            "required": [
              "baseUrl",
              "username",
              "password"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object",
        "x-ms-discriminator-value": "jira"
      },
      "PrivateReleaseDetailsResponse": {
        "description": "Details of an uploaded release",
        "properties": {
          "android_min_api_level": {
            "description": "The release's minimum required Android API level.",
            "type": "string"
          },
          "app_display_name": {
            "description": "The app's display name.",
            "type": "string"
          },
          "app_icon_url": {
            "description": "A URL to the app's icon.",
            "type": "string"
          },
          "app_name": {
            "description": "The app's name (extracted from the uploaded release).",
            "type": "string"
          },
          "bundle_identifier": {
            "description": "The identifier of the apps bundle.",
            "type": "string"
          },
          "destination_type": {
            "description": "The destination type.<br>\n<b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br>\n<b>store</b>: The release distributed to external stores and distribution_stores details will be returned. <br>\n",
            "enum": [
              "group",
              "store",
              "tester"
            ],
            "type": "string"
          },
          "device_family": {
            "description": "The release's device family.",
            "type": "string"
          },
          "distribution_group_id": {
            "description": "the destination where release is distributed",
            "type": "string"
          },
          "download_url": {
            "description": "The URL that hosts the binary for this release.",
            "type": "string"
          },
          "fingerprint": {
            "description": "MD5 checksum of the release binary.",
            "type": "string"
          },
          "id": {
            "description": "ID identifying this unique release.",
            "type": "integer"
          },
          "install_url": {
            "description": "The href required to install a release on a mobile device. On iOS devices will be prefixed with `itms-services://?action=download-manifest&url=`",
            "type": "string"
          },
          "is_external_build": {
            "description": "This value determines if a release is external or not.",
            "type": "boolean"
          },
          "is_provisioning_profile_syncing": {
            "description": "A flag that determines whether the release's provisioning profile is still extracted or not.",
            "type": "boolean"
          },
          "min_os": {
            "description": "The release's minimum required operating system.",
            "type": "string"
          },
          "origin": {
            "description": "The release's origin",
            "enum": [
              "hockeyapp",
              "appcenter"
            ],
            "type": "string"
          },
          "provisioning_profile_name": {
            "description": "The release's provisioning profile name.",
            "type": "string"
          },
          "provisioning_profile_type": {
            "description": "The type of the provisioning profile for the requested app version.",
            "enum": [
              "adhoc",
              "enterprise",
              "other"
            ],
            "type": "string"
          },
          "publishing_status": {
            "description": "the publishing status of the distributed release",
            "type": "string"
          },
          "release_notes": {
            "description": "The release's release notes.",
            "type": "string"
          },
          "secondary_download_url": {
            "description": "The URL that hosts the secondary binary for this release, such as the apk file for aab releases.",
            "type": "string"
          },
          "short_version": {
            "description": "The release's short version.<br>\nFor iOS: CFBundleShortVersionString from info.plist.\nFor Android: android:versionName from AppManifest.xml.\n",
            "type": "string"
          },
          "size": {
            "description": "The release's size in bytes.",
            "type": "integer"
          },
          "status": {
            "description": "OBSOLETE. Will be removed in next version. The availability concept is now replaced with distributed. Any 'available' release will be associated with the default distribution group of an app.</br>\nThe release state.<br>\n<b>available</b>: The uploaded release has been distributed.<br>\n<b>unavailable</b>: The uploaded release is not visible to the user. <br>\n",
            "enum": [
              "available",
              "unavailable"
            ],
            "type": "string"
          },
          "uploaded_at": {
            "description": "UTC time in ISO 8601 format of the uploaded time.",
            "type": "string"
          },
          "version": {
            "description": "The release's version.<br>\nFor iOS: CFBundleVersion from info.plist.\nFor Android: android:versionCode from AppManifest.xml.\n",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PrivateReleaseUpdateRequest": {
        "description": "A request containing information for updating a release.",
        "properties": {
          "publishing_status": {
            "description": "The store publishing status.",
            "enum": [
              "failed",
              "processing",
              "submitted",
              "timeout"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "PrivateSharedConnectionResponse": {
        "description": "PrivateSharedConnectionResponse",
        "discriminator": {
          "propertyName": "serviceType"
        },
        "properties": {
          "displayName": {
            "description": "display name of shared connection",
            "type": "string"
          },
          "id": {
            "description": "id of the shared connection",
            "type": "string"
          },
          "is2FA": {
            "description": "if the account is a 2FA account or not",
            "type": "boolean"
          },
          "isValid": {
            "description": "whether the credentials are valid or not",
            "type": "boolean"
          },
          "serviceType": {
            "description": "service type of shared connection can be apple|gitlab|googleplay|jira|applecertificate",
            "enum": [
              "apple",
              "jira",
              "googleplay",
              "gitlab"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "serviceType"
        ],
        "type": "object"
      },
      "PrivateUpdateUploadDetails": {
        "description": "Details of the upload to patch",
        "properties": {
          "error_message": {
            "description": "Message of the error",
            "type": "string"
          },
          "status": {
            "enum": [
              "uploadStarted",
              "uploadFinished",
              "readyToBePublished",
              "malwareDetected",
              "error"
            ],
            "type": "string"
          }
        },
        "required": [
          "status",
          "error_message"
        ],
        "type": "object"
      },
      "ProvisioningProfile": {
        "description": "An object containing information about an iOS provisioning profile.",
        "properties": {
          "application_identifier": {
            "description": "The application identifier.",
            "type": "string"
          },
          "expired_at": {
            "description": "The profile's expiration date in RFC 3339 format, i.e. 2017-07-21T17:32:28Z",
            "type": "string"
          },
          "name": {
            "description": "The name of the provisioning profile.",
            "type": "string"
          },
          "profile_type": {
            "enum": [
              "adhoc",
              "enterprise",
              "other"
            ],
            "type": "string"
          },
          "team_identifier": {
            "description": "The team identifier.",
            "type": "string"
          },
          "udids": {
            "items": {
              "description": "A UDID of a provisioned device.",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "name",
          "application_identifier",
          "team_identifier",
          "profile_type",
          "expired_at"
        ],
        "type": "object"
      },
      "ProvisioningProfileFile": {
        "description": "Provisioning profile fetch and store information",
        "properties": {
          "fileId": {
            "description": "File id from secure file storage",
            "type": "string"
          },
          "fileName": {
            "description": "Name of uploaded provisioning profile",
            "type": "string"
          },
          "targetBundleIdentifier": {
            "description": "Target the provisioning profile is used to sign",
            "type": "string"
          },
          "uploadId": {
            "description": "Upload id to App Center File Upload Store",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProvisioningProfileMigration": {
        "description": "Describes the migration schema for a provisioning profile defined in HockeyApp.",
        "properties": {
          "bundle_id": {
            "description": "The bundle/application identifier.",
            "type": "string"
          },
          "expired_at": {
            "description": "The provisioning profile's expiration date in RFC 3339 format, i.e. 2017-07-21T17:32:28Z.",
            "type": "string"
          },
          "is_appex": {
            "description": "A boolean value that indicates whether the provisioning profile represents an app extension.",
            "type": "boolean"
          },
          "name": {
            "description": "The name of the provisioning profile.",
            "type": "string"
          },
          "team_identifier": {
            "description": "The team identifier.",
            "type": "string"
          },
          "type": {
            "description": "The type of provisoning profile.",
            "enum": [
              0,
              1,
              2
            ],
            "type": "integer"
          },
          "udids": {
            "description": "A list of UDIDs of provisioned devices.",
            "items": {
              "description": "A UDID of a provisioned device.",
              "type": "string"
            },
            "type": "array"
          },
          "url": {
            "description": "A provisioning profile URL that indicates where to download it from.",
            "type": "string"
          }
        },
        "required": [
          "name",
          "bundle_id",
          "team_identifier",
          "type",
          "is_appex"
        ],
        "type": "object"
      },
      "ProvisioningProfileResponse": {
        "description": "A response containing information about an iOS provisioning profile.",
        "properties": {
          "appex_profiles": {
            "description": "Array of provisioning profiles for any app extensions",
            "items": {
              "$ref": "#/components/schemas/ProvisioningProfileResponse"
            },
            "type": "array"
          },
          "provisioning_bundle_id": {
            "description": "The bundle identifier associated with the profile.",
            "type": "string"
          },
          "provisioning_profile_name": {
            "description": "The name of the provisioning profile.",
            "type": "string"
          },
          "provisioning_profile_type": {
            "enum": [
              "adhoc",
              "enterprise",
              "other"
            ],
            "type": "string"
          },
          "team_identifier": {
            "description": "The team identifier.",
            "type": "string"
          },
          "udids": {
            "items": {
              "description": "A UDID of a provisioned device.",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "provisioning_profile_type"
        ],
        "type": "object"
      },
      "PublicDistributionGroupsResponse": {
        "properties": {
          "id": {
            "description": "The id of the distribution group",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "PublishDevicesRequest": {
        "description": "The publising information.",
        "properties": {
          "account_service_connection_id": {
            "description": "The service_connection_id of the stored Apple credentials instead of username, password.",
            "type": "string"
          },
          "devices": {
            "description": "Array of device UDID's to be published to the Apple Developer account.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "password": {
            "description": "The password for the Apple Developer account to publish the devices to.",
            "type": "string"
          },
          "publish_all_devices": {
            "description": "When set to true, all unprovisioned devices will be published to the Apple Developer account.  When false, only the provided devices will be published to the Apple Developer account.",
            "type": "boolean"
          },
          "username": {
            "description": "The username for the Apple Developer account to publish the devices to.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PublishDevicesResponse": {
        "description": "The information for a single iOS device",
        "properties": {
          "profile_file_name": {
            "description": "The file name for the provisioning profile.",
            "type": "string"
          },
          "profiles_zip_base64": {
            "description": "The updated provisioning profiles zip base64 encoded.",
            "type": "string"
          }
        },
        "required": [
          "profiles_zip_base64"
        ],
        "type": "object"
      },
      "RawCrashLog": {
        "type": "object"
      },
      "ReasonStackFrame": {
        "description": "frame belonging to the reason of the crash",
        "properties": {
          "app_code": {
            "description": "this line isn't from any framework",
            "type": "boolean"
          },
          "class_method": {
            "description": "is a class method",
            "type": "boolean"
          },
          "class_name": {
            "description": "name of the class",
            "type": "string"
          },
          "code_formatted": {
            "description": "Formatted frame string",
            "type": "string"
          },
          "code_raw": {
            "description": "Unformatted Frame string",
            "type": "string"
          },
          "exception_type": {
            "description": "Exception type.",
            "type": "string"
          },
          "file": {
            "description": "name of the file",
            "type": "string"
          },
          "framework_name": {
            "description": "Name of the framework",
            "type": "string"
          },
          "language": {
            "description": "programming language of the frame",
            "enum": [
              "JavaScript",
              "CSharp",
              "Objective-C",
              "Objective-Cpp",
              "Cpp",
              "C",
              "Swift",
              "Java",
              "Unknown"
            ],
            "type": "string"
          },
          "line": {
            "description": "line number",
            "type": "integer"
          },
          "method": {
            "description": "name of the method",
            "type": "string"
          },
          "method_params": {
            "description": "parameters of the frames method",
            "type": "string"
          },
          "os_exception_type": {
            "description": "OS exception type. (aka. SIGNAL)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Release": {
        "properties": {
          "release": {
            "description": "Release Id.\n",
            "format": "string",
            "type": "string"
          }
        },
        "required": [
          "release"
        ],
        "type": "object"
      },
      "ReleaseCount": {
        "properties": {
          "distribution_group": {
            "description": "Distribution group queried.\n",
            "format": "string",
            "type": "string"
          },
          "release_id": {
            "format": "string",
            "type": "string"
          },
          "total_count": {
            "description": "Total count of downloads.\n",
            "format": "int64",
            "type": "integer"
          },
          "unique_count": {
            "description": "Count of unique downloads against user id.\n",
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "release_id",
          "unique_count",
          "total_count"
        ],
        "type": "object"
      },
      "ReleaseCounts": {
        "properties": {
          "counts": {
            "items": {
              "properties": {
                "distribution_group": {
                  "description": "Distribution group queried.\n",
                  "format": "string",
                  "type": "string"
                },
                "release_id": {
                  "format": "string",
                  "type": "string"
                },
                "total_count": {
                  "description": "Total count of downloads.\n",
                  "format": "int64",
                  "type": "integer"
                },
                "unique_count": {
                  "description": "Count of unique downloads against user id.\n",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "required": [
                "release_id",
                "unique_count",
                "total_count"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "total": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "counts"
        ],
        "type": "object"
      },
      "ReleaseCreateRequest": {
        "description": "A request containing information for creating a release.",
        "properties": {
          "appex_provisioning_profiles": {
            "description": "iOS app extension provisioning profiles included in the release.",
            "items": {
              "description": "An object containing information about an iOS provisioning profile.",
              "properties": {
                "application_identifier": {
                  "description": "The application identifier.",
                  "type": "string"
                },
                "expired_at": {
                  "description": "The profile's expiration date in RFC 3339 format, i.e. 2017-07-21T17:32:28Z",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the provisioning profile.",
                  "type": "string"
                },
                "profile_type": {
                  "enum": [
                    "adhoc",
                    "enterprise",
                    "other"
                  ],
                  "type": "string"
                },
                "team_identifier": {
                  "description": "The team identifier.",
                  "type": "string"
                },
                "udids": {
                  "items": {
                    "description": "A UDID of a provisioned device.",
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "required": [
                "name",
                "application_identifier",
                "team_identifier",
                "profile_type",
                "expired_at"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "build_version": {
            "description": "The release's short version.<br>\nFor iOS: CFBundleShortVersionString from info.plist.<br>\nFor Android: android:versionName from AppManifest.xml.\n",
            "type": "string"
          },
          "device_family": {
            "description": "The release's device family.",
            "type": "string"
          },
          "file_extension": {
            "description": "The file extension of the asset. Does not include the initial period.",
            "type": "string"
          },
          "fingerprint": {
            "description": "MD5 checksum of the release binary.",
            "type": "string"
          },
          "icon_asset_id": {
            "description": "The assetId associated with the icon uploaded to app center file upload service.",
            "type": "string"
          },
          "ipa_uuids": {
            "description": "A list of UUIDs for architectures for an iOS app.",
            "items": {
              "description": "An object containing a UUID for an architecture for an iOS app.",
              "properties": {
                "architecture": {
                  "description": "The architecture that the UUID belongs to, i.e. armv7 or arm64.",
                  "type": "string"
                },
                "uuid": {
                  "description": "The unique identifier.",
                  "format": "uuid",
                  "type": "string"
                }
              },
              "required": [
                "architecture",
                "uuid"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "languages": {
            "description": "The languages supported by the release. Limited to 510 characters in a serialized array.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "minimum_os_version": {
            "description": "The release's minimum required operating system.",
            "type": "string"
          },
          "package_url": {
            "description": "The URL to the release's binary.",
            "type": "string"
          },
          "provision": {
            "description": "An object containing information about an iOS provisioning profile.",
            "properties": {
              "application_identifier": {
                "description": "The application identifier.",
                "type": "string"
              },
              "expired_at": {
                "description": "The profile's expiration date in RFC 3339 format, i.e. 2017-07-21T17:32:28Z",
                "type": "string"
              },
              "name": {
                "description": "The name of the provisioning profile.",
                "type": "string"
              },
              "profile_type": {
                "enum": [
                  "adhoc",
                  "enterprise",
                  "other"
                ],
                "type": "string"
              },
              "team_identifier": {
                "description": "The team identifier.",
                "type": "string"
              },
              "udids": {
                "items": {
                  "description": "A UDID of a provisioned device.",
                  "type": "string"
                },
                "type": "array"
              }
            },
            "required": [
              "name",
              "application_identifier",
              "team_identifier",
              "profile_type",
              "expired_at"
            ],
            "type": "object"
          },
          "proxy_flow": {
            "description": "If true this release was uploaded to the AKS upload proxy",
            "type": "boolean"
          },
          "size": {
            "description": "The release's size in bytes.",
            "type": "integer"
          },
          "unique_identifier": {
            "description": "The identifier of the app's bundle.",
            "type": "string"
          },
          "upload_id": {
            "description": "The upload id associated with the release, to map to the releases upload table.",
            "type": "string"
          },
          "version": {
            "description": "The release's version.<br>\nFor iOS: CFBundleVersion from info.plist.<br>\nFor Android: android:versionCode from AppManifest.xml.\n",
            "type": "string"
          }
        },
        "required": [
          "fingerprint",
          "size",
          "upload_id"
        ],
        "type": "object"
      },
      "ReleaseDailySessions": {
        "properties": {
          "avgSessionsPerDay": {
            "format": "double",
            "type": "number"
          },
          "sessions": {
            "description": "Sessions per day.",
            "items": {
              "properties": {
                "count": {
                  "format": "int64",
                  "type": "integer"
                },
                "datetime": {
                  "description": "The ISO 8601 datetime.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "totalSessionCounts": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ReleaseDestinationRequest": {
        "allOf": [
          {
            "properties": {
              "id": {
                "description": "Unique id of the release destination",
                "format": "uuid",
                "type": "string"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          {
            "properties": {
              "mandatory_update": {
                "description": "Flag to mark the release for the provided destinations as mandatory",
                "type": "boolean"
              },
              "notify_testers": {
                "default": true,
                "description": "Flag to enable or disable notifications to testers",
                "type": "boolean"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "ReleaseDestinationResponse": {
        "allOf": [
          {
            "properties": {
              "id": {
                "description": "Unique id for the release destination",
                "type": "string"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          {
            "properties": {
              "mandatory_update": {
                "description": "Flag to mark the release for the provided destinations as mandatory",
                "type": "boolean"
              },
              "provisioning_status_url": {
                "description": "The url to check provisioning status.",
                "type": "string"
              }
            },
            "required": [
              "mandatory_update"
            ],
            "type": "object"
          }
        ],
        "type": "object"
      },
      "ReleaseDetailsResponse": {
        "description": "Details of an uploaded release",
        "properties": {
          "android_min_api_level": {
            "description": "The release's minimum required Android API level.",
            "type": "string"
          },
          "app_display_name": {
            "description": "The app's display name.",
            "type": "string"
          },
          "app_icon_url": {
            "description": "A URL to the app's icon.",
            "type": "string"
          },
          "app_name": {
            "description": "The app's name (extracted from the uploaded release).",
            "type": "string"
          },
          "app_os": {
            "description": "The app's OS.",
            "type": "string"
          },
          "build": {
            "description": "Contains metadata about the build that produced the release being uploaded",
            "properties": {
              "branch_name": {
                "description": "The branch name of the build producing the release",
                "type": "string"
              },
              "commit_hash": {
                "description": "The commit hash of the build producing the release",
                "type": "string"
              },
              "commit_message": {
                "description": "The commit message of the build producing the release",
                "type": "string"
              }
            },
            "type": "object"
          },
          "bundle_identifier": {
            "description": "The identifier of the apps bundle.",
            "type": "string"
          },
          "can_resign": {
            "description": "In calls that allow passing `udid` in the query string, this value determines if a release can be re-signed. When true, after a re-sign, the tester will be able to install the release from his registered devices. Will not be returned for non-iOS platforms.",
            "type": "boolean"
          },
          "destination_type": {
            "description": "OBSOLETE. Will be removed in next version. The destination type.<br>\n<b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br>\n<b>store</b>: The release distributed to external stores and distribution_stores details will be returned.<br>\n<b>tester</b>: The release distributed testers details will be returned.<br>\n",
            "enum": [
              "group",
              "store",
              "tester"
            ],
            "type": "string"
          },
          "destinations": {
            "description": "A list of distribution groups or stores.",
            "items": {
              "allOf": [
                {
                  "allOf": [
                    {
                      "properties": {
                        "id": {
                          "description": "ID identifying a unique distribution group.",
                          "type": "string"
                        },
                        "name": {
                          "description": "A name identifying a unique distribution group.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "id"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "is_latest": {
                          "description": "Is the containing release the latest one in this distribution group.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    }
                  ]
                },
                {
                  "allOf": [
                    {
                      "properties": {
                        "id": {
                          "description": "ID identifying a unique distribution store.",
                          "type": "string"
                        },
                        "name": {
                          "description": "A name identifying a unique distribution store.",
                          "type": "string"
                        },
                        "publishing_status": {
                          "description": "publishing status of the release in the store.",
                          "type": "string"
                        },
                        "type": {
                          "description": "type of the distribution store currently stores type can be intune, googleplay or windows.",
                          "enum": [
                            "intune",
                            "googleplay",
                            "apple",
                            "none"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "id"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "is_latest": {
                          "description": "Is the containing release the latest one in this distribution store.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    }
                  ]
                },
                {
                  "description": "A unique identifier for a destination. A destination can be identified by an ID (guid) or by a name. DestinationId encapsulates both options. A destination can be either a distribution group or a store.",
                  "properties": {
                    "id": {
                      "description": "Id of a distribution group / store. The release will be associated with this distribution group / store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of a distribution group / distribution store. The release will be associated with this distribution group or store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                {
                  "properties": {
                    "destination_type": {
                      "description": "Destination can be either store or group.",
                      "enum": [
                        "group",
                        "store",
                        "tester"
                      ],
                      "type": "string"
                    },
                    "display_name": {
                      "description": "Display name for the group or tester",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              ]
            },
            "type": "array"
          },
          "device_family": {
            "description": "The release's device family.",
            "type": "string"
          },
          "distribution_groups": {
            "description": "OBSOLETE. Will be removed in next version. A list of distribution groups that are associated with this release.",
            "items": {
              "properties": {
                "id": {
                  "description": "ID identifying a unique distribution group.",
                  "type": "string"
                },
                "name": {
                  "description": "A name identifying a unique distribution group.",
                  "type": "string"
                }
              },
              "required": [
                "id"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "distribution_stores": {
            "description": "OBSOLETE. Will be removed in next version. A list of distribution stores that are associated with this release.",
            "items": {
              "properties": {
                "id": {
                  "description": "ID identifying a unique distribution store.",
                  "type": "string"
                },
                "name": {
                  "description": "A name identifying a unique distribution store.",
                  "type": "string"
                },
                "publishing_status": {
                  "description": "publishing status of the release in the store.",
                  "type": "string"
                },
                "type": {
                  "description": "type of the distribution store currently stores type can be intune, googleplay or windows.",
                  "enum": [
                    "intune",
                    "googleplay",
                    "apple",
                    "none"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "id"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "download_url": {
            "description": "The URL that hosts the binary for this release.",
            "type": "string"
          },
          "enabled": {
            "description": "This value determines the whether a release currently is enabled or disabled.",
            "type": "boolean"
          },
          "fingerprint": {
            "description": "MD5 checksum of the release binary.",
            "type": "string"
          },
          "id": {
            "description": "ID identifying this unique release.",
            "type": "integer"
          },
          "install_url": {
            "description": "The href required to install a release on a mobile device. On iOS devices will be prefixed with `itms-services://?action=download-manifest&url=`",
            "type": "string"
          },
          "is_external_build": {
            "description": "This value determines if a release is external or not.",
            "type": "boolean"
          },
          "is_provisioning_profile_syncing": {
            "description": "A flag that determines whether the release's provisioning profile is still extracted or not.",
            "type": "boolean"
          },
          "is_udid_provisioned": {
            "description": "In calls that allow passing `udid` in the query string, this value will hold the provisioning status of that UDID in this release. Will be ignored for non-iOS platforms.",
            "type": "boolean"
          },
          "min_os": {
            "description": "The release's minimum required operating system.",
            "type": "string"
          },
          "origin": {
            "description": "The release's origin",
            "enum": [
              "hockeyapp",
              "appcenter"
            ],
            "type": "string"
          },
          "package_hashes": {
            "description": "Hashes for the packages.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "provisioning_profile_expiry_date": {
            "description": "expiration date of provisioning profile in UTC format.",
            "type": "string"
          },
          "provisioning_profile_name": {
            "description": "The release's provisioning profile name.",
            "type": "string"
          },
          "provisioning_profile_type": {
            "description": "The type of the provisioning profile for the requested app version.",
            "enum": [
              "adhoc",
              "enterprise",
              "other"
            ],
            "type": "string"
          },
          "release_notes": {
            "description": "The release's release notes.",
            "type": "string"
          },
          "secondary_download_url": {
            "description": "The URL that hosts the secondary binary for this release, such as the apk file for aab releases.",
            "type": "string"
          },
          "short_version": {
            "description": "The release's short version.<br>\nFor iOS: CFBundleShortVersionString from info.plist.\nFor Android: android:versionName from AppManifest.xml.\n",
            "type": "string"
          },
          "size": {
            "description": "The release's size in bytes.",
            "type": "integer"
          },
          "status": {
            "description": "Status of the release.",
            "type": "string"
          },
          "uploaded_at": {
            "description": "UTC time in ISO 8601 format of the uploaded time.",
            "type": "string"
          },
          "version": {
            "description": "The release's version.<br>\nFor iOS: CFBundleVersion from info.plist.\nFor Android: android:versionCode from AppManifest.xml.\n",
            "type": "string"
          }
        },
        "required": [
          "id",
          "app_name",
          "app_display_name",
          "uploaded_at",
          "version",
          "short_version",
          "app_icon_url",
          "enabled"
        ],
        "type": "object"
      },
      "ReleaseDetailsUpdateRequest": {
        "description": "A request containing information for updating details of a release",
        "properties": {
          "build": {
            "description": "Contains metadata about the build that produced the release being uploaded",
            "properties": {
              "branch_name": {
                "description": "The branch name of the build producing the release",
                "type": "string"
              },
              "commit_hash": {
                "description": "The commit hash of the build producing the release",
                "type": "string"
              },
              "commit_message": {
                "description": "The commit message of the build producing the release",
                "type": "string"
              }
            },
            "type": "object"
          },
          "enabled": {
            "description": "Toggle this release to be enable distribute/download or not.",
            "type": "boolean"
          },
          "release_notes": {
            "description": "Release notes for this release.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ReleaseDetailsUpdateResponse": {
        "description": "Response for updating release details",
        "properties": {
          "release_notes": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ReleaseExternalUrlUpdateResponse": {
        "description": "Response for updating release external url",
        "properties": {
          "external_download_url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ReleaseMetadata": {
        "description": "An object containing all the release metadata.",
        "properties": {
          "dsa_signature": {
            "description": "dsa signature of the release for the sparkle feed.",
            "type": "string"
          },
          "ed_signature": {
            "description": "edDSA signature of the release for the sparkle feed.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ReleaseProvisionResponse": {
        "description": "Response for provisioning a release",
        "properties": {
          "status_url": {
            "description": "The url to check provisioning status.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ReleasePublishErrorResponse": {
        "description": "ReleasePublishErrorResponse",
        "properties": {
          "is_log_available": {
            "description": "boolean property to tell if logs are available for download",
            "type": "boolean"
          },
          "message": {
            "description": "error Details",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ReleaseRealTimeStatusResponse": {
        "description": "status of the app from store",
        "properties": {
          "app_id": {
            "description": "app id",
            "type": "string"
          },
          "release_id": {
            "description": "release id",
            "type": "string"
          },
          "status": {
            "description": "Status Data from store",
            "properties": {
              "status": {
                "description": "status from store",
                "type": "string"
              },
              "storetype": {
                "description": "store type",
                "type": "string"
              },
              "track": {
                "description": "track information from store",
                "type": "string"
              },
              "version": {
                "description": "version of the app from store",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "ReleaseStoreDestinationRequest": {
        "properties": {
          "id": {
            "description": "Unique id of the release destination",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "ReleaseStoreDestinationResponse": {
        "properties": {
          "id": {
            "description": "Unique id for the release destination",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "ReleaseTesterDestinationRequest": {
        "properties": {
          "email": {
            "description": "Tester's email address",
            "type": "string"
          },
          "mandatory_update": {
            "description": "Flag to mark the release for the provided destinations as mandatory",
            "type": "boolean"
          },
          "notify_testers": {
            "default": true,
            "description": "Flag to enable or disable notifications to testers",
            "type": "boolean"
          }
        },
        "required": [
          "email"
        ],
        "type": "object"
      },
      "ReleaseUpdateError": {
        "allOf": [
          {
            "properties": {
              "code": {
                "enum": [
                  "BadRequest",
                  "Conflict",
                  "NotAcceptable",
                  "NotFound",
                  "InternalServerError",
                  "Unauthorized",
                  "TooManyRequests"
                ],
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "required": [
              "code",
              "message"
            ],
            "type": "object"
          },
          {
            "properties": {
              "destinations": {
                "items": {
                  "properties": {
                    "code": {
                      "description": "Error Codes:<br>\n<b>invalid_store_secrets</b>: While distributing to store, secrets provided for store are not valid.<br>\n<b>store_release_bad_request</b>: Proper package release details for the store is not provided.<br>\n<b>store_release_unauthorized</b>: User is not authorized to publish to store due to invalid developer credentials.<br>\n<b>store_release_forbidden</b>: Publish to store is forbidden due to conflicts/errors in the release version and already existing version in the store.<br>\n<b>store_release_promotion</b>: Release already distributed, promoting a release is not supported.<br>\n<b>store_track_deactivated</b>: One or more tracks would be deactivated with this release. This is not supported yet.<br>\n<b>store_release_not_found</b>: App with the given package name is not found in the store.<br>\n<b>store_release_not_available</b>: The release is not available.<br>\n<b>internal_server_error</b>: Failed to distribute to a destination due to an internal server error.\n",
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "mandatory_update": {
                "type": "boolean"
              },
              "release_notes": {
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "ReleaseUpdateRequest": {
        "description": "A request containing information for updating a release.",
        "properties": {
          "build": {
            "description": "Contains metadata about the build that produced the release being uploaded",
            "properties": {
              "branch_name": {
                "description": "The branch name of the build producing the release",
                "type": "string"
              },
              "commit_hash": {
                "description": "The commit hash of the build producing the release",
                "type": "string"
              },
              "commit_message": {
                "description": "The commit message of the build producing the release",
                "type": "string"
              }
            },
            "type": "object"
          },
          "destination_id": {
            "description": "OBSOLETE. Will be removed in future releases - use destinations instead. Id of a destination. The release will be associated with this destination. If the destination doesn't exist a 400 is returned. If both destination name and id are passed, the id is taking precedence.",
            "type": "string"
          },
          "destination_name": {
            "description": "OBSOLETE. Will be removed in future releases - use destinations instead. Name of a destination. The release will be associated with this destination. If the destination doesn't exist a 400 is returned. If both distribution group name and id are passed, the id is taking precedence.",
            "type": "string"
          },
          "destination_type": {
            "description": "Not used anymore.",
            "type": "string"
          },
          "destinations": {
            "description": "Distribute this release under the following list of destinations (store groups or distribution groups).",
            "items": {
              "description": "A unique identifier for a destination. A destination can be identified by an ID (guid) or by a name. DestinationId encapsulates both options. A destination can be either a distribution group or a store.",
              "properties": {
                "id": {
                  "description": "Id of a distribution group / store. The release will be associated with this distribution group / store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.",
                  "type": "string"
                },
                "name": {
                  "description": "Name of a distribution group / distribution store. The release will be associated with this distribution group or store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "distribution_group_id": {
            "description": "OBSOLETE. Will be removed in future releases - use destinations instead. Id of a distribution group. The release will be associated with this distribution group. If the distribution group doesn't exist a 400 is returned. If both distribution group name and id are passed, the id is taking precedence.",
            "type": "string"
          },
          "distribution_group_name": {
            "description": "OBSOLETE. Will be removed in future releases - use destinations instead. Name of a distribution group. The release will be associated with this distribution group. If the distribution group doesn't exist a 400 is returned. If both distribution group name and id are passed, the id is taking precedence.",
            "type": "string"
          },
          "mandatory_update": {
            "description": "A boolean which determines whether this version should be a mandatory update or not.",
            "type": "boolean"
          },
          "metadata": {
            "description": "An object containing all the release metadata.",
            "properties": {
              "dsa_signature": {
                "description": "dsa signature of the release for the sparkle feed.",
                "type": "string"
              },
              "ed_signature": {
                "description": "edDSA signature of the release for the sparkle feed.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "notify_testers": {
            "default": true,
            "description": "A boolean which determines whether to notify testers of a new release, default to true.",
            "type": "boolean"
          },
          "release_notes": {
            "description": "Release notes for this release.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ReleaseUpdateResponse": {
        "description": "Response for updating a release",
        "properties": {
          "destinations": {
            "items": {
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "enabled": {
            "type": "boolean"
          },
          "mandatory_update": {
            "type": "boolean"
          },
          "provisioning_status_url": {
            "type": "string"
          },
          "release_notes": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ReleaseWithDistributionGroup": {
        "allOf": [
          {
            "properties": {
              "release": {
                "description": "Release Id.\n",
                "format": "string",
                "type": "string"
              }
            },
            "required": [
              "release"
            ],
            "type": "object"
          }
        ],
        "properties": {
          "distribution_group": {
            "description": "Distribution group Id.\n",
            "format": "string",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ReleaseWithDistributionGroupAndUserId": {
        "allOf": [
          {
            "allOf": [
              {
                "properties": {
                  "release": {
                    "description": "Release Id.\n",
                    "format": "string",
                    "type": "string"
                  }
                },
                "required": [
                  "release"
                ],
                "type": "object"
              }
            ],
            "properties": {
              "distribution_group": {
                "description": "Distribution group Id.\n",
                "format": "string",
                "type": "string"
              }
            },
            "type": "object"
          }
        ],
        "properties": {
          "user_id": {
            "description": "Unique user Id.  Will generate a new user Id if not provided.\n",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RepoConfig": {
        "allOf": [
          {
            "allOf": [
              {
                "properties": {
                  "external_user_id": {
                    "description": "The external user id from the repository provider. Required for GitLab.com repositories",
                    "type": "string"
                  },
                  "repo_id": {
                    "description": "The repository id from the repository provider. Required for repositories connected from GitHub App and GitLab.com",
                    "type": "string"
                  },
                  "repo_url": {
                    "description": "The repository's git url, must be a HTTPS URL",
                    "example": "https://github.com/foo/bar.git",
                    "type": "string"
                  },
                  "service_connection_id": {
                    "description": "The id of the service connection (private). Required for GitLab self-hosted repositories",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            ],
            "properties": {
              "installation_id": {
                "description": "The GitHub App Installation id. Required for repositories connected from GitHub App",
                "type": "string"
              }
            },
            "required": [
              "repo_url"
            ],
            "type": "object"
          }
        ],
        "properties": {
          "id": {
            "description": "Repository configuration identifier",
            "type": "string"
          },
          "state": {
            "description": "State of the configuration",
            "enum": [
              "unauthorized",
              "inactive",
              "active"
            ],
            "type": "string"
          },
          "type": {
            "description": "Type of repository",
            "type": "string"
          },
          "user_email": {
            "description": "Email of the user who linked the repository",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type",
          "state",
          "repo_url"
        ],
        "type": "object"
      },
      "RepoConfigCommon": {
        "properties": {
          "external_user_id": {
            "description": "The external user id from the repository provider. Required for GitLab.com repositories",
            "type": "string"
          },
          "repo_id": {
            "description": "The repository id from the repository provider. Required for repositories connected from GitHub App and GitLab.com",
            "type": "string"
          },
          "repo_url": {
            "description": "The repository's git url, must be a HTTPS URL",
            "example": "https://github.com/foo/bar.git",
            "type": "string"
          },
          "service_connection_id": {
            "description": "The id of the service connection (private). Required for GitLab self-hosted repositories",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RepoConfigPostRequest": {
        "allOf": [
          {
            "properties": {
              "external_user_id": {
                "description": "The external user id from the repository provider. Required for GitLab.com repositories",
                "type": "string"
              },
              "repo_id": {
                "description": "The repository id from the repository provider. Required for repositories connected from GitHub App and GitLab.com",
                "type": "string"
              },
              "repo_url": {
                "description": "The repository's git url, must be a HTTPS URL",
                "example": "https://github.com/foo/bar.git",
                "type": "string"
              },
              "service_connection_id": {
                "description": "The id of the service connection (private). Required for GitLab self-hosted repositories",
                "type": "string"
              }
            },
            "type": "object"
          }
        ],
        "properties": {
          "installation_id": {
            "description": "The GitHub App Installation id. Required for repositories connected from GitHub App",
            "type": "string"
          }
        },
        "required": [
          "repo_url"
        ],
        "type": "object"
      },
      "RepoConfigs": {
        "description": "A list of repo configurations",
        "items": {
          "allOf": [
            {
              "allOf": [
                {
                  "properties": {
                    "external_user_id": {
                      "description": "The external user id from the repository provider. Required for GitLab.com repositories",
                      "type": "string"
                    },
                    "repo_id": {
                      "description": "The repository id from the repository provider. Required for repositories connected from GitHub App and GitLab.com",
                      "type": "string"
                    },
                    "repo_url": {
                      "description": "The repository's git url, must be a HTTPS URL",
                      "example": "https://github.com/foo/bar.git",
                      "type": "string"
                    },
                    "service_connection_id": {
                      "description": "The id of the service connection (private). Required for GitLab self-hosted repositories",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              ],
              "properties": {
                "installation_id": {
                  "description": "The GitHub App Installation id. Required for repositories connected from GitHub App",
                  "type": "string"
                }
              },
              "required": [
                "repo_url"
              ],
              "type": "object"
            }
          ],
          "properties": {
            "id": {
              "description": "Repository configuration identifier",
              "type": "string"
            },
            "state": {
              "description": "State of the configuration",
              "enum": [
                "unauthorized",
                "inactive",
                "active"
              ],
              "type": "string"
            },
            "type": {
              "description": "Type of repository",
              "type": "string"
            },
            "user_email": {
              "description": "Email of the user who linked the repository",
              "type": "string"
            }
          },
          "required": [
            "id",
            "type",
            "state",
            "repo_url"
          ],
          "type": "object"
        },
        "type": "array"
      },
      "RepoInfo": {
        "properties": {
          "external_user_id": {
            "description": "The external user ID",
            "type": "string"
          },
          "repo_url": {
            "description": "The repository url",
            "type": "string"
          }
        },
        "required": [
          "repo_url"
        ],
        "type": "object"
      },
      "RequestType": {
        "description": "Request type",
        "enum": [
          "Unsupported",
          "Delete",
          "Purge",
          "UndoDelete",
          "Scheduled",
          "AppDelete",
          "AppPurge",
          "AppUndoDelete",
          "Export",
          "CustomerAccountDelete",
          "CustomerAccountExport",
          "CustomerUserDelete",
          "CustomerUserExport"
        ],
        "type": "string",
        "x-ms-enum": {
          "modelAsString": false,
          "name": "RequestType"
        }
      },
      "ResendVerificationRequest": {
        "properties": {
          "name": {
            "description": "The email or name of the user to resend verification",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "ResetPasswordUsingTokenRequest": {
        "properties": {
          "new_password": {
            "description": "The new password. Needs to be at least 8 characters long and contain at least one lower- and one uppercase letter.",
            "type": "string"
          },
          "token": {
            "description": "The reset password token that was sent to the user",
            "type": "string"
          }
        },
        "required": [
          "token",
          "new_password"
        ],
        "type": "object"
      },
      "ResignAttemptResponse": {
        "description": "URL that can be used to check the status of the update devices operation and the updated profiles.",
        "properties": {
          "appId": {
            "description": "App ID that the resign operation is being performed against.",
            "type": "string"
          },
          "contextId": {
            "description": "Context ID for the resigning operation.",
            "type": "string"
          },
          "destinations": {
            "description": "List of destinations that the resign operation is being performed against.",
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "errorCode": {
            "description": "Error code associated with the exception.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Error message associated with the exception.",
            "type": "string"
          },
          "originalReleaseId": {
            "description": "ID of the release which is being resigned.",
            "type": "number"
          },
          "resignId": {
            "description": "ID of the resign operation.",
            "type": "string"
          },
          "startTime": {
            "description": "The time that the resign operation was started.",
            "type": "number"
          },
          "status": {
            "description": "The status of the resigning operation.",
            "type": "string"
          },
          "userId": {
            "description": "ID of the user performing the resign operaiton.",
            "type": "string"
          }
        },
        "required": [
          "status",
          "appId",
          "originalReleaseId",
          "userId",
          "contextId",
          "resignId",
          "startTime"
        ],
        "type": "object"
      },
      "ResignInfo": {
        "description": "The information for a resign attempt.",
        "properties": {
          "certificate_expiration": {
            "description": "The expiration date of the certificate used for the resign attempt",
            "type": "string"
          },
          "certificate_name": {
            "description": "The name of the certificate used for the resign attempt",
            "type": "string"
          },
          "group_name": {
            "description": "The group name of the resign attempt",
            "type": "string"
          },
          "profile_name": {
            "description": "The provisioning profile name of group for the given resign attempt",
            "type": "string"
          },
          "profile_type": {
            "description": "The provisioning profile type of group for the given resign attempt",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ResignStatus": {
        "description": "The status of the resign operation.",
        "properties": {
          "error_code": {
            "description": "Error code for any error that occured during the resigning operation.",
            "type": "string"
          },
          "error_message": {
            "description": "Error message for any error that occured during the resigning operation.",
            "type": "string"
          },
          "status": {
            "description": "The status of the resign",
            "type": "string"
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "RetentionSettings": {
        "properties": {
          "retention_in_days": {
            "enum": [
              28,
              90
            ],
            "type": "integer"
          }
        },
        "required": [
          "retention_in_days"
        ],
        "type": "object"
      },
      "SecretDetails": {
        "properties": {
          "id_token": {
            "description": "the id token of user",
            "type": "string"
          },
          "refresh_token": {
            "description": "the refresh token for user",
            "type": "string"
          },
          "refresh_token_expiry": {
            "description": "the expiry of refresh token",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SendNotificationRequest": {
        "properties": {
          "userIds": {
            "description": "user list to send email notification",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "userIds"
        ],
        "type": "object"
      },
      "ServiceBillingPlans": {
        "description": "Billing Plans for a single service",
        "properties": {
          "canSelectTrialPlan": {
            "description": "Can customer select trial plan for that service (if it exists)?",
            "type": "boolean"
          },
          "currentBillingPeriod": {
            "description": "Billing plans for a given period",
            "properties": {
              "byAccount": {
                "description": "Selection of a billing plan",
                "properties": {
                  "count": {
                    "description": "Number of instances of the billing plan.",
                    "type": "integer"
                  },
                  "plan": {
                    "description": "Billing Plan",
                    "properties": {
                      "attributes": {
                        "additionalProperties": {
                          "type": "object"
                        },
                        "description": "Collection of attribute values.",
                        "type": "object"
                      },
                      "id": {
                        "description": "The Billing Plan ID",
                        "type": "string"
                      },
                      "limits": {
                        "additionalProperties": {
                          "type": "number"
                        },
                        "description": "A collection of named numeric values",
                        "type": "object"
                      },
                      "parentId": {
                        "type": "string"
                      },
                      "paymentSource": {
                        "description": "Service that receives payments for this billing plan.",
                        "enum": [
                          "None",
                          "AppCenter",
                          "GitHub",
                          "Xtc"
                        ],
                        "type": "string"
                      },
                      "price": {
                        "description": "Price of the Billing Plan",
                        "type": "number"
                      },
                      "service": {
                        "description": "Name of the service that the plan applies to.",
                        "enum": [
                          "Build",
                          "Test"
                        ],
                        "type": "string"
                      },
                      "version": {
                        "description": "Version of the Billing Plan schema",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "endTime": {
                "description": "Exclusive end of the period.",
                "format": "dateTime",
                "type": "string"
              },
              "startTime": {
                "description": "Inclusive start of the period",
                "format": "dateTime",
                "type": "string"
              }
            },
            "type": "object"
          },
          "lastTrialPlanExpirationTime": {
            "description": "Expiration time of the last selected trial plan. Will be null if trial plan was not used.",
            "format": "dateTime",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ServiceBusStatusResponse": {
        "properties": {
          "status": {
            "type": "string"
          },
          "subscriptions": {
            "items": {
              "properties": {
                "message_count": {
                  "description": "The number of messages in the subscription",
                  "type": "number"
                },
                "name": {
                  "description": "The name of the subsciption (prefixed with the topic name)",
                  "type": "string"
                }
              },
              "required": [
                "name",
                "message_count"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ServiceResourceUsage": {
        "description": "Resource usage for a single Mobile Center service",
        "properties": {
          "currentUsagePeriod": {
            "description": "Usage for a single period",
            "properties": {
              "byAccount": {
                "additionalProperties": {
                  "type": "number"
                },
                "description": "A collection of named numeric values",
                "type": "object"
              },
              "byApp": {
                "additionalProperties": {
                  "additionalProperties": {
                    "type": "number"
                  },
                  "description": "A collection of named numeric values",
                  "type": "object"
                },
                "description": "A collection of  named numeric values grouped by app",
                "type": "object"
              },
              "endTime": {
                "description": "Exclusive end time of the usage period.",
                "format": "dateTime",
                "type": "string"
              },
              "startTime": {
                "description": "Inclusive start time of the usage period",
                "format": "dateTime",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "SessionCounts": {
        "items": {
          "properties": {
            "count": {
              "description": "Count of the object.",
              "format": "int64",
              "type": "integer"
            },
            "datetime": {
              "description": "The ISO 8601 datetime.",
              "type": "string"
            }
          },
          "type": "object"
        },
        "type": "array"
      },
      "SessionDurationsDistribution": {
        "properties": {
          "average_duration": {
            "description": "The average session duration for current time range.",
            "type": "string"
          },
          "distribution": {
            "description": "The count of sessions in these buckets.",
            "items": {
              "properties": {
                "bucket": {
                  "description": "The bucket name.",
                  "type": "string"
                },
                "count": {
                  "description": "The count of sessions in current bucket.",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "previous_average_duration": {
            "description": "The previous average session duration for previous time range.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SessionsPerDevice": {
        "properties": {
          "average_sessions_per_user": {
            "description": "Average seesion per user.",
            "format": "double",
            "type": "number"
          },
          "previous_average_sessions_per_user": {
            "description": "Previous average session per user.",
            "format": "double",
            "type": "number"
          },
          "previous_total_count": {
            "description": "Previous total count.",
            "format": "int64",
            "type": "integer"
          },
          "sessions_per_user": {
            "description": "The session count for each interval per device.",
            "items": {
              "properties": {
                "count": {
                  "description": "Count.",
                  "format": "double",
                  "type": "number"
                },
                "datetime": {
                  "description": "The ISO 8601 datetime.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "total_count": {
            "description": "Total session per device count.",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "SharedConnectionDetails": {
        "description": "shared connection details",
        "properties": {
          "password": {
            "description": "password to connect to shared connection.",
            "type": "string"
          },
          "username": {
            "description": "username to connect to shared connection.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SharedConnectionPatchRequest": {
        "description": "Shared connection patch request",
        "properties": {
          "data": {
            "description": "Represents the data for connecting to service",
            "type": "object"
          },
          "displayName": {
            "description": "Display name of the shared connection",
            "type": "string"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "SharedConnectionRequest": {
        "description": "SharedConnectionRequest",
        "discriminator": {
          "propertyName": "serviceType"
        },
        "properties": {
          "credentialType": {
            "default": "credentials",
            "description": "credential type of the shared connection. Values can be credentials|certificate",
            "enum": [
              "credentials",
              "certificate",
              "key"
            ],
            "type": "string"
          },
          "data": {
            "description": "shared connection details",
            "properties": {
              "password": {
                "description": "password to connect to shared connection.",
                "type": "string"
              },
              "username": {
                "description": "username to connect to shared connection.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "displayName": {
            "description": "display name of shared connection",
            "type": "string"
          },
          "serviceType": {
            "description": "service type of shared connection can be apple|gitlab|googleplay|jira|applecertificate",
            "enum": [
              "apple",
              "jira",
              "googleplay",
              "gitlab"
            ],
            "type": "string"
          }
        },
        "required": [
          "serviceType"
        ],
        "type": "object"
      },
      "SharedConnectionResponse": {
        "description": "SharedConnectionResponse",
        "discriminator": {
          "propertyName": "serviceType"
        },
        "properties": {
          "credentialType": {
            "description": "the type of the credential",
            "enum": [
              "credentials",
              "certificate",
              "key"
            ],
            "type": "string"
          },
          "displayName": {
            "description": "display name of shared connection",
            "type": "string"
          },
          "serviceType": {
            "description": "service type of shared connection can be apple|gitlab|googleplay|jira",
            "enum": [
              "apple",
              "jira",
              "googleplay",
              "gitlab"
            ],
            "type": "string"
          }
        },
        "required": [
          "displayName",
          "serviceType"
        ],
        "type": "object"
      },
      "SigningConfig": {
        "properties": {
          "hasStoreFile": {
            "description": "Indicates if storeFile is specified in the signing configuration",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SkipValidationRequest": {
        "description": "Wheither or not to skip the validation for this release",
        "properties": {
          "skip_validation": {
            "description": "true if we want to skip the validation, false otherwise",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SourceRepositories": {
        "description": "A list of source repositories",
        "items": {
          "description": "The source repository",
          "properties": {
            "clone_url": {
              "description": "URL used to clone the repository",
              "type": "string"
            },
            "name": {
              "description": "The repository name",
              "type": "string"
            }
          },
          "type": "object"
        },
        "type": "array"
      },
      "SourceRepository": {
        "description": "The source repository",
        "properties": {
          "clone_url": {
            "description": "URL used to clone the repository",
            "type": "string"
          },
          "name": {
            "description": "The repository name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "StackFrame": {
        "description": "a single frame of a stack trace",
        "properties": {
          "address": {
            "description": "address of the frame",
            "type": "string"
          },
          "app_code": {
            "description": "this line isn't from any framework",
            "type": "boolean"
          },
          "class_method": {
            "description": "is a class method",
            "type": "boolean"
          },
          "class_name": {
            "description": "name of the class",
            "type": "string"
          },
          "code_formatted": {
            "description": "Formatted frame string",
            "type": "string"
          },
          "code_raw": {
            "description": "Raw frame string",
            "type": "string"
          },
          "file": {
            "description": "name of the file",
            "type": "string"
          },
          "framework_name": {
            "description": "Name of the framework",
            "type": "string"
          },
          "language": {
            "description": "programming language of the frame",
            "enum": [
              "JavaScript",
              "CSharp",
              "Objective-C",
              "Objective-Cpp",
              "Cpp",
              "C",
              "Swift",
              "Java",
              "Unknown"
            ],
            "type": "string"
          },
          "line": {
            "description": "line number",
            "type": "integer"
          },
          "method": {
            "description": "name of the method",
            "type": "string"
          },
          "method_params": {
            "description": "parameters of the frames method",
            "type": "string"
          },
          "relevant": {
            "description": "frame should be shown always",
            "type": "boolean"
          }
        },
        "required": [
          "code_raw",
          "code_formatted",
          "app_code"
        ],
        "type": "object"
      },
      "Stacktrace": {
        "description": "a stacktrace in a processed and prettyfied way",
        "properties": {
          "exception": {
            "$ref": "#/components/schemas/Exception"
          },
          "reason": {
            "type": "string"
          },
          "threads": {
            "items": {
              "$ref": "#/components/schemas/Thread"
            },
            "type": "array"
          },
          "title": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "StartServiceLog": {
        "allOf": [
          {
            "discriminator": {
              "propertyName": "type"
            },
            "properties": {
              "device": {
                "description": "Device characteristics.",
                "properties": {
                  "app_build": {
                    "description": "The app's build number, e.g. 42.\n",
                    "type": "string"
                  },
                  "app_namespace": {
                    "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                    "type": "string"
                  },
                  "app_version": {
                    "description": "Application version name, e.g. 1.1.0\n",
                    "type": "string"
                  },
                  "carrier_code": {
                    "description": "Carrier country code (for mobile devices).\n",
                    "type": "string"
                  },
                  "carrier_country": {
                    "description": "Carrier country.\n",
                    "type": "string"
                  },
                  "carrier_name": {
                    "description": "Carrier name (for mobile devices).\n",
                    "type": "string"
                  },
                  "live_update_deployment_key": {
                    "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                    "type": "string"
                  },
                  "live_update_package_hash": {
                    "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                    "type": "string"
                  },
                  "live_update_release_label": {
                    "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                    "type": "string"
                  },
                  "locale": {
                    "description": "Language code (example: en_US).\n",
                    "type": "string"
                  },
                  "model": {
                    "description": "Device model (example: iPad2,3).\n",
                    "type": "string"
                  },
                  "oem_name": {
                    "description": "Device manufacturer (example: HTC).\n",
                    "type": "string"
                  },
                  "os_api_level": {
                    "description": "API level when applicable like in Android (example: 15).\n",
                    "type": "integer"
                  },
                  "os_build": {
                    "description": "OS build code (example: LMY47X).\n",
                    "type": "string"
                  },
                  "os_name": {
                    "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                    "type": "string"
                  },
                  "os_version": {
                    "description": "OS version (example: 9.3.0).\n",
                    "type": "string"
                  },
                  "screen_size": {
                    "description": "Screen size of the device in pixels (example: 640x480).\n",
                    "type": "string"
                  },
                  "sdk_name": {
                    "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                    "type": "string"
                  },
                  "sdk_version": {
                    "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                    "type": "string"
                  },
                  "time_zone_offset": {
                    "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                    "maximum": 840,
                    "minimum": -840,
                    "type": "integer"
                  },
                  "wrapper_runtime_version": {
                    "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                    "type": "string"
                  },
                  "wrapper_sdk_name": {
                    "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                    "type": "string"
                  },
                  "wrapper_sdk_version": {
                    "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                    "type": "string"
                  }
                },
                "required": [
                  "sdk_name",
                  "sdk_version",
                  "os_name",
                  "os_version",
                  "locale",
                  "time_zone_offset",
                  "app_version",
                  "app_build"
                ],
                "type": "object"
              },
              "install_id": {
                "description": "Install ID.\n",
                "format": "uuid",
                "type": "string"
              },
              "timestamp": {
                "description": "Log creation timestamp.\n",
                "format": "date-time",
                "type": "string"
              },
              "type": {
                "description": "Log type.\n",
                "enum": [
                  "event",
                  "page",
                  "start_session",
                  "error",
                  "push_installation",
                  "start_service",
                  "custom_properties"
                ],
                "type": "string"
              }
            },
            "required": [
              "type",
              "timestamp",
              "install_id",
              "device"
            ],
            "type": "object"
          }
        ],
        "description": "Describe a AppCenter.Start API call from the SDK.",
        "properties": {
          "services": {
            "description": "The list of services of the AppCenter Start API call.",
            "items": {
              "type": "string"
            },
            "minItems": 1,
            "type": "array"
          }
        },
        "type": "object",
        "x-ms-discriminator-value": "start_service"
      },
      "StartServiceLog_Diagnostics": {
        "allOf": [
          {
            "discriminator": {
              "propertyName": "type"
            },
            "properties": {
              "device": {
                "description": "Device characteristics.",
                "properties": {
                  "app_build": {
                    "description": "The app's build number, e.g. 42.\n",
                    "type": "string"
                  },
                  "app_namespace": {
                    "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                    "type": "string"
                  },
                  "app_version": {
                    "description": "Application version name, e.g. 1.1.0\n",
                    "type": "string"
                  },
                  "carrier_code": {
                    "description": "Carrier country code (for mobile devices).\n",
                    "type": "string"
                  },
                  "carrier_country": {
                    "description": "Carrier country.\n",
                    "type": "string"
                  },
                  "carrier_name": {
                    "description": "Carrier name (for mobile devices).\n",
                    "type": "string"
                  },
                  "live_update_deployment_key": {
                    "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                    "type": "string"
                  },
                  "live_update_package_hash": {
                    "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                    "type": "string"
                  },
                  "live_update_release_label": {
                    "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                    "type": "string"
                  },
                  "locale": {
                    "description": "Language code (example: en_US).\n",
                    "type": "string"
                  },
                  "model": {
                    "description": "Device model (example: iPad2,3).\n",
                    "type": "string"
                  },
                  "oem_name": {
                    "description": "Device manufacturer (example: HTC).\n",
                    "type": "string"
                  },
                  "os_api_level": {
                    "description": "API level when applicable like in Android (example: 15).\n",
                    "type": "integer"
                  },
                  "os_build": {
                    "description": "OS build code (example: LMY47X).\n",
                    "type": "string"
                  },
                  "os_name": {
                    "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                    "type": "string"
                  },
                  "os_version": {
                    "description": "OS version (example: 9.3.0).\n",
                    "type": "string"
                  },
                  "screen_size": {
                    "description": "Screen size of the device in pixels (example: 640x480).\n",
                    "type": "string"
                  },
                  "sdk_name": {
                    "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                    "type": "string"
                  },
                  "sdk_version": {
                    "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                    "type": "string"
                  },
                  "time_zone_offset": {
                    "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                    "maximum": 840,
                    "minimum": -840,
                    "type": "integer"
                  },
                  "wrapper_runtime_version": {
                    "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                    "type": "string"
                  },
                  "wrapper_sdk_name": {
                    "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                    "type": "string"
                  },
                  "wrapper_sdk_version": {
                    "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                    "type": "string"
                  }
                },
                "required": [
                  "sdk_name",
                  "sdk_version",
                  "os_name",
                  "os_version",
                  "locale",
                  "time_zone_offset",
                  "app_version",
                  "app_build"
                ],
                "type": "object"
              },
              "install_id": {
                "description": "Install ID.\n",
                "format": "uuid",
                "type": "string"
              },
              "timestamp": {
                "description": "Log creation timestamp.\n",
                "format": "date-time",
                "type": "string"
              },
              "type": {
                "description": "Log type.\n",
                "enum": [
                  "event",
                  "page",
                  "start_session",
                  "error",
                  "push_installation",
                  "start_service",
                  "custom_properties"
                ],
                "type": "string"
              }
            },
            "required": [
              "type",
              "timestamp",
              "install_id",
              "device"
            ],
            "type": "object"
          }
        ],
        "description": "Describe a AppCenter.Start API call from the SDK.",
        "properties": {
          "services": {
            "description": "The list of services of the AppCenter Start API call.",
            "items": {
              "type": "string"
            },
            "minItems": 1,
            "type": "array"
          }
        },
        "type": "object",
        "x-ms-discriminator-value": "start_service"
      },
      "StartSessionLog": {
        "allOf": [
          {
            "discriminator": {
              "propertyName": "type"
            },
            "properties": {
              "device": {
                "description": "Device characteristics.",
                "properties": {
                  "app_build": {
                    "description": "The app's build number, e.g. 42.\n",
                    "type": "string"
                  },
                  "app_namespace": {
                    "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                    "type": "string"
                  },
                  "app_version": {
                    "description": "Application version name, e.g. 1.1.0\n",
                    "type": "string"
                  },
                  "carrier_code": {
                    "description": "Carrier country code (for mobile devices).\n",
                    "type": "string"
                  },
                  "carrier_country": {
                    "description": "Carrier country.\n",
                    "type": "string"
                  },
                  "carrier_name": {
                    "description": "Carrier name (for mobile devices).\n",
                    "type": "string"
                  },
                  "live_update_deployment_key": {
                    "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                    "type": "string"
                  },
                  "live_update_package_hash": {
                    "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                    "type": "string"
                  },
                  "live_update_release_label": {
                    "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                    "type": "string"
                  },
                  "locale": {
                    "description": "Language code (example: en_US).\n",
                    "type": "string"
                  },
                  "model": {
                    "description": "Device model (example: iPad2,3).\n",
                    "type": "string"
                  },
                  "oem_name": {
                    "description": "Device manufacturer (example: HTC).\n",
                    "type": "string"
                  },
                  "os_api_level": {
                    "description": "API level when applicable like in Android (example: 15).\n",
                    "type": "integer"
                  },
                  "os_build": {
                    "description": "OS build code (example: LMY47X).\n",
                    "type": "string"
                  },
                  "os_name": {
                    "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                    "type": "string"
                  },
                  "os_version": {
                    "description": "OS version (example: 9.3.0).\n",
                    "type": "string"
                  },
                  "screen_size": {
                    "description": "Screen size of the device in pixels (example: 640x480).\n",
                    "type": "string"
                  },
                  "sdk_name": {
                    "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                    "type": "string"
                  },
                  "sdk_version": {
                    "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                    "type": "string"
                  },
                  "time_zone_offset": {
                    "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                    "maximum": 840,
                    "minimum": -840,
                    "type": "integer"
                  },
                  "wrapper_runtime_version": {
                    "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                    "type": "string"
                  },
                  "wrapper_sdk_name": {
                    "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                    "type": "string"
                  },
                  "wrapper_sdk_version": {
                    "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                    "type": "string"
                  }
                },
                "required": [
                  "sdk_name",
                  "sdk_version",
                  "os_name",
                  "os_version",
                  "locale",
                  "time_zone_offset",
                  "app_version",
                  "app_build"
                ],
                "type": "object"
              },
              "install_id": {
                "description": "Install ID.\n",
                "format": "uuid",
                "type": "string"
              },
              "timestamp": {
                "description": "Log creation timestamp.\n",
                "format": "date-time",
                "type": "string"
              },
              "type": {
                "description": "Log type.\n",
                "enum": [
                  "event",
                  "page",
                  "start_session",
                  "error",
                  "push_installation",
                  "start_service",
                  "custom_properties"
                ],
                "type": "string"
              }
            },
            "required": [
              "type",
              "timestamp",
              "install_id",
              "device"
            ],
            "type": "object"
          }
        ],
        "description": "Required explicit begin session log (a marker event for analytics service).",
        "properties": {
          "session_id": {
            "description": "Session ID.\n",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "session_id"
        ],
        "type": "object",
        "x-ms-discriminator-value": "start_session"
      },
      "StartSessionLog_Diagnostics": {
        "allOf": [
          {
            "discriminator": {
              "propertyName": "type"
            },
            "properties": {
              "device": {
                "description": "Device characteristics.",
                "properties": {
                  "app_build": {
                    "description": "The app's build number, e.g. 42.\n",
                    "type": "string"
                  },
                  "app_namespace": {
                    "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                    "type": "string"
                  },
                  "app_version": {
                    "description": "Application version name, e.g. 1.1.0\n",
                    "type": "string"
                  },
                  "carrier_code": {
                    "description": "Carrier country code (for mobile devices).\n",
                    "type": "string"
                  },
                  "carrier_country": {
                    "description": "Carrier country.\n",
                    "type": "string"
                  },
                  "carrier_name": {
                    "description": "Carrier name (for mobile devices).\n",
                    "type": "string"
                  },
                  "live_update_deployment_key": {
                    "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                    "type": "string"
                  },
                  "live_update_package_hash": {
                    "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                    "type": "string"
                  },
                  "live_update_release_label": {
                    "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                    "type": "string"
                  },
                  "locale": {
                    "description": "Language code (example: en_US).\n",
                    "type": "string"
                  },
                  "model": {
                    "description": "Device model (example: iPad2,3).\n",
                    "type": "string"
                  },
                  "oem_name": {
                    "description": "Device manufacturer (example: HTC).\n",
                    "type": "string"
                  },
                  "os_api_level": {
                    "description": "API level when applicable like in Android (example: 15).\n",
                    "type": "integer"
                  },
                  "os_build": {
                    "description": "OS build code (example: LMY47X).\n",
                    "type": "string"
                  },
                  "os_name": {
                    "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                    "type": "string"
                  },
                  "os_version": {
                    "description": "OS version (example: 9.3.0).\n",
                    "type": "string"
                  },
                  "screen_size": {
                    "description": "Screen size of the device in pixels (example: 640x480).\n",
                    "type": "string"
                  },
                  "sdk_name": {
                    "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                    "type": "string"
                  },
                  "sdk_version": {
                    "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                    "type": "string"
                  },
                  "time_zone_offset": {
                    "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                    "maximum": 840,
                    "minimum": -840,
                    "type": "integer"
                  },
                  "wrapper_runtime_version": {
                    "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                    "type": "string"
                  },
                  "wrapper_sdk_name": {
                    "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                    "type": "string"
                  },
                  "wrapper_sdk_version": {
                    "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                    "type": "string"
                  }
                },
                "required": [
                  "sdk_name",
                  "sdk_version",
                  "os_name",
                  "os_version",
                  "locale",
                  "time_zone_offset",
                  "app_version",
                  "app_build"
                ],
                "type": "object"
              },
              "install_id": {
                "description": "Install ID.\n",
                "format": "uuid",
                "type": "string"
              },
              "timestamp": {
                "description": "Log creation timestamp.\n",
                "format": "date-time",
                "type": "string"
              },
              "type": {
                "description": "Log type.\n",
                "enum": [
                  "event",
                  "page",
                  "start_session",
                  "error",
                  "push_installation",
                  "start_service",
                  "custom_properties"
                ],
                "type": "string"
              }
            },
            "required": [
              "type",
              "timestamp",
              "install_id",
              "device"
            ],
            "type": "object"
          }
        ],
        "description": "Required explicit begin session log (a marker event for analytics service).",
        "properties": {
          "session_id": {
            "description": "Session ID.\n",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "session_id"
        ],
        "type": "object",
        "x-ms-discriminator-value": "start_session"
      },
      "Status": {
        "properties": {
          "status": {
            "type": "string"
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "StatusData": {
        "description": "Status Data from store",
        "properties": {
          "status": {
            "description": "status from store",
            "type": "string"
          },
          "storetype": {
            "description": "store type",
            "type": "string"
          },
          "track": {
            "description": "track information from store",
            "type": "string"
          },
          "version": {
            "description": "version of the app from store",
            "type": "string"
          }
        },
        "type": "object"
      },
      "StatusResponse": {
        "properties": {
          "status": {
            "type": "string"
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "StepReport": {
        "properties": {
          "deviceScreenshots": {
            "items": {
              "properties": {
                "appium_log_file": {
                  "type": "string"
                },
                "crash_data": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "device_snapshot_id": {
                  "type": "string"
                },
                "id": {
                  "type": "string"
                },
                "log_file": {
                  "type": "string"
                },
                "raw_crash_data": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "screenshot": {
                  "properties": {
                    "landscape": {
                      "type": "boolean"
                    },
                    "rotation": {
                      "type": "number"
                    },
                    "urls": {
                      "properties": {
                        "large": {
                          "type": "string"
                        },
                        "medium": {
                          "type": "string"
                        },
                        "original": {
                          "type": "string"
                        },
                        "small": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "original",
                        "small",
                        "medium",
                        "large"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "urls",
                    "rotation",
                    "landscape"
                  ],
                  "type": "object"
                },
                "stacktrace": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "status": {
                  "type": "string"
                },
                "title": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "finishedSnapshots": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "finishedSnapshots",
          "deviceScreenshots"
        ],
        "type": "object"
      },
      "StoreDestinationDetails": {
        "properties": {
          "appId": {
            "description": "app id of application.",
            "type": "string"
          },
          "dest_publish_id": {
            "description": "destination ID identifying a unique id in distribution store.",
            "type": "string"
          },
          "store_type": {
            "description": "type of store.",
            "enum": [
              "intune"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "StoreNotification": {
        "properties": {
          "service": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "valid_until": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "StorePatchRequest": {
        "properties": {
          "service_connection_id": {
            "description": "Service connection id to updated.",
            "type": "string"
          }
        },
        "required": [
          "service_connection_id"
        ],
        "type": "object"
      },
      "StoreSecretResponse": {
        "description": "StoreSecretResponse",
        "properties": {
          "id": {
            "description": "Store id",
            "type": "string"
          },
          "name": {
            "description": "Store Name",
            "type": "string"
          },
          "secret": {
            "description": "Secret Json",
            "type": "string"
          },
          "tenant_id": {
            "description": "Tenant Id for Intune",
            "type": "string"
          },
          "type": {
            "description": "Store Type",
            "type": "string"
          }
        },
        "type": "object"
      },
      "StoresBasicDetails": {
        "properties": {
          "id": {
            "description": "ID identifying a unique distribution store.",
            "type": "string"
          },
          "name": {
            "description": "A name identifying a unique distribution store.",
            "type": "string"
          },
          "publishing_status": {
            "description": "publishing status of the release in the store.",
            "type": "string"
          },
          "type": {
            "description": "type of the distribution store currently stores type can be intune or googleplay.",
            "enum": [
              "intune",
              "googleplay"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "StoresBasicReleaseDetails": {
        "description": "Basic information on a release",
        "properties": {
          "destination_type": {
            "description": "Destination for this release.",
            "enum": [
              "group",
              "store",
              "tester"
            ],
            "type": "string"
          },
          "distribution_stores": {
            "description": "a list of distribution stores that are associated with this release.",
            "items": {
              "properties": {
                "id": {
                  "description": "ID identifying a unique distribution store.",
                  "type": "string"
                },
                "is_latest": {
                  "description": "Is the containing release the latest one in this distribution store.",
                  "type": "boolean"
                },
                "name": {
                  "description": "A name identifying a unique distribution store.",
                  "type": "string"
                },
                "publishing_status": {
                  "description": "A status identifying the status of release in the distribution store.",
                  "type": "string"
                },
                "type": {
                  "description": "A type identifying the type of distribution store.",
                  "enum": [
                    "googleplay",
                    "intune",
                    "apple"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "id": {
            "description": "ID identifying this unique release.",
            "type": "number"
          },
          "short_version": {
            "description": "The release's short version.\nFor iOS: CFBundleShortVersionString from info.plist.\nFor Android: android:versionName from AppManifest.xml.\n",
            "type": "string"
          },
          "uploaded_at": {
            "description": "UTC time in ISO 8601 format of the uploaded time.",
            "type": "string"
          },
          "version": {
            "description": "The release's version.\nFor iOS: CFBundleVersion from info.plist.\nFor Android: android:versionCode from AppManifest.xml.\n",
            "type": "string"
          }
        },
        "type": "object"
      },
      "StoresDetails": {
        "properties": {
          "id": {
            "description": "ID identifying a unique distribution store.",
            "type": "string"
          },
          "is_latest": {
            "description": "Is the containing release the latest one in this distribution store.",
            "type": "boolean"
          },
          "name": {
            "description": "A name identifying a unique distribution store.",
            "type": "string"
          },
          "publishing_status": {
            "description": "A status identifying the status of release in the distribution store.",
            "type": "string"
          },
          "type": {
            "description": "A type identifying the type of distribution store.",
            "enum": [
              "googleplay",
              "intune",
              "apple"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "StoresReleaseDetails": {
        "description": "Details of an uploaded release",
        "properties": {
          "android_min_api_level": {
            "description": "The release's minimum required Android API level.",
            "type": "string"
          },
          "app_display_name": {
            "description": "The app's display name.",
            "type": "string"
          },
          "app_name": {
            "description": "The app's name (extracted from the uploaded release).",
            "type": "string"
          },
          "bundle_identifier": {
            "description": "The identifier of the apps bundle.",
            "type": "string"
          },
          "distribution_stores": {
            "description": "a list of distribution stores that are associated with this release.",
            "items": {
              "properties": {
                "id": {
                  "description": "ID identifying a unique distribution store.",
                  "type": "string"
                },
                "name": {
                  "description": "A name identifying a unique distribution store.",
                  "type": "string"
                },
                "publishing_status": {
                  "description": "publishing status of the release in the store.",
                  "type": "string"
                },
                "type": {
                  "description": "type of the distribution store currently stores type can be intune or googleplay.",
                  "enum": [
                    "intune",
                    "googleplay"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "download_url": {
            "description": "The URL that hosts the binary for this release.",
            "type": "string"
          },
          "fingerprint": {
            "description": "MD5 checksum of the release binary.",
            "type": "string"
          },
          "id": {
            "description": "ID identifying this unique release.",
            "type": "number"
          },
          "install_url": {
            "description": "The href required to install a release on a mobile device. On iOS devices will be prefixed with `itms-services://?action=download-manifest&url=`",
            "enum": [
              "group",
              "store"
            ],
            "type": "string"
          },
          "min_os": {
            "description": "The release's minimum required operating system.",
            "type": "string"
          },
          "release_notes": {
            "description": "The release's release notes.",
            "type": "string"
          },
          "short_version": {
            "description": "The release's short version.<br>\nFor iOS: CFBundleShortVersionString from info.plist.\nFor Android: android:versionName from AppManifest.xml.\n",
            "type": "string"
          },
          "size": {
            "description": "The release's size in bytes.",
            "type": "number"
          },
          "status": {
            "description": "OBSOLETE. Will be removed in next version. The availability concept is now replaced with distributed. Any 'available' release will be associated with the default distribution group of an app.</br>\nThe release state.<br>\n<b>available</b>: The uploaded release has been distributed.<br>\n<b>unavailable</b>: The uploaded release is not visible to the user. <br>\n",
            "enum": [
              "available",
              "unavailable"
            ],
            "type": "string"
          },
          "uploaded_at": {
            "description": "UTC time in ISO 8601 format of the uploaded time.",
            "type": "string"
          },
          "version": {
            "description": "The release's version.<br>\nFor iOS: CFBundleVersion from info.plist.\nFor Android: android:versionCode from AppManifest.xml.\n",
            "type": "string"
          }
        },
        "type": "object"
      },
      "StringProperty": {
        "allOf": [
          {
            "discriminator": {
              "propertyName": "type"
            },
            "properties": {
              "name": {
                "maxLength": 128,
                "pattern": "^[a-zA-Z][a-zA-Z0-9\\-_]*$",
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            },
            "required": [
              "type",
              "name"
            ],
            "type": "object"
          }
        ],
        "description": "String property.",
        "properties": {
          "value": {
            "description": "String property value.",
            "maxLength": 128,
            "type": "string"
          }
        },
        "required": [
          "value"
        ],
        "type": "object",
        "x-ms-discriminator-value": "string"
      },
      "StringProperty_Diagnostics": {
        "allOf": [
          {
            "discriminator": {
              "propertyName": "type"
            },
            "properties": {
              "name": {
                "maxLength": 128,
                "pattern": "^[a-zA-Z][a-zA-Z0-9\\-_]*$",
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            },
            "required": [
              "type",
              "name"
            ],
            "type": "object"
          }
        ],
        "description": "String property.",
        "properties": {
          "value": {
            "description": "String property value.",
            "maxLength": 128,
            "type": "string"
          }
        },
        "required": [
          "value"
        ],
        "type": "object",
        "x-ms-discriminator-value": "string"
      },
      "SubmitDsrOperationRequest": {
        "properties": {
          "accountId": {
            "type": "string"
          },
          "appId": {
            "type": "string"
          },
          "operationId": {
            "description": "The DSR operation ID provided by the GDPR coordinator. Used for tracking only.",
            "type": "string"
          },
          "request": {
            "enum": [
              "Delete",
              "Purge",
              "UndoDelete",
              "Export"
            ],
            "type": "string"
          },
          "requestId": {
            "description": "Request ID provided by the GDPR coordinator. Used for tracking.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SubmitDsrOperationResponse": {
        "properties": {
          "status": {
            "description": "The status of the DSR operation",
            "enum": [
              "NotStarted",
              "InProgress",
              "Completed",
              "Failure"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Subscription": {
        "description": "Subscription information",
        "properties": {
          "active": {
            "description": "Is the subscription currently active?",
            "type": "boolean"
          },
          "concurrentDevicesLimit": {
            "description": "Customer limits on concurrent devices",
            "type": "integer"
          },
          "daysLeft": {
            "description": "The number of days left in the subscription",
            "type": "number"
          },
          "endsAt": {
            "description": "The date the subscription will end or ended",
            "format": "dateTime",
            "type": "string"
          },
          "id": {
            "description": "Id of the subscription",
            "format": "uuid",
            "type": "string"
          },
          "runningDevices": {
            "description": "Current device concurrency utilization",
            "type": "integer"
          },
          "startsAt": {
            "description": "The date the subscription began",
            "format": "dateTime",
            "type": "string"
          },
          "tier": {
            "properties": {
              "name": {
                "description": "The name of the tier",
                "type": "string"
              }
            },
            "title": "Subscription Tier",
            "type": "object"
          }
        },
        "title": "Subscription",
        "type": "object"
      },
      "SubscriptionMetrics": {
        "properties": {
          "message_count": {
            "description": "The number of messages in the subscription",
            "type": "number"
          },
          "name": {
            "description": "The name of the subsciption (prefixed with the topic name)",
            "type": "string"
          }
        },
        "required": [
          "name",
          "message_count"
        ],
        "type": "object"
      },
      "SuccessResponse": {
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "required": [
          "message"
        ],
        "type": "object"
      },
      "Symbol": {
        "properties": {
          "alternate_symbol_ids": {
            "description": "The other symbols in the same file",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "app_id": {
            "description": "The application that this symbol belongs to",
            "type": "string"
          },
          "build": {
            "description": "The build number. Optional for Apple. Required for Android.",
            "type": "string"
          },
          "origin": {
            "description": "The origin of the symbol file",
            "enum": [
              "System",
              "User"
            ],
            "type": "string"
          },
          "platform": {
            "description": "The platform that this symbol is associated with",
            "type": "string"
          },
          "status": {
            "description": "Whether the symbol is ignored.",
            "enum": [
              "available",
              "ignored"
            ],
            "type": "string"
          },
          "symbol_id": {
            "description": "The unique id for this symbol (uuid)",
            "type": "string"
          },
          "symbol_upload_id": {
            "description": "The id of the symbol upload this symbol belongs to.",
            "type": "string"
          },
          "type": {
            "description": "The type of the symbol for the current symbol upload",
            "enum": [
              "Apple",
              "JavaScript",
              "Breakpad",
              "AndroidProguard",
              "UWP"
            ],
            "type": "string"
          },
          "url": {
            "description": "The path name of the symbol file in blob storage",
            "type": "string"
          },
          "version": {
            "description": "The version number. Optional for Apple. Required for Android.",
            "type": "string"
          }
        },
        "required": [
          "symbol_id",
          "platform",
          "type",
          "app_id",
          "url",
          "origin",
          "alternate_symbol_ids",
          "status",
          "symbol_upload_id"
        ],
        "type": "object"
      },
      "SymbolLocation": {
        "description": "Location for downloading symbol",
        "properties": {
          "uri": {
            "type": "string"
          }
        },
        "required": [
          "uri"
        ],
        "type": "object"
      },
      "SymbolStatusResponse": {
        "description": "A response containing information pertaining to a symbol status",
        "properties": {
          "app_id": {
            "description": "The application that this symbol belongs to",
            "type": "string"
          },
          "status": {
            "description": "Whether the symbol is ignored.",
            "enum": [
              "available",
              "ignored",
              "missing"
            ],
            "type": "string"
          },
          "symbol_id": {
            "description": "The unique id for this symbol (uuid)",
            "type": "string"
          }
        },
        "required": [
          "symbol_id",
          "app_id",
          "status"
        ],
        "type": "object"
      },
      "SymbolUpload": {
        "description": "A single symbol upload entity",
        "properties": {
          "app_id": {
            "description": "The application that this symbol upload belongs to",
            "type": "string"
          },
          "file_name": {
            "description": "The file name for the symbol upload",
            "type": "string"
          },
          "file_size": {
            "description": "The size of the file in Mebibytes. This may be 0 until the status is indexed",
            "type": "number"
          },
          "origin": {
            "description": "The origin of the symbol upload",
            "enum": [
              "User",
              "System"
            ],
            "type": "string"
          },
          "status": {
            "description": "The current status for the symbol upload",
            "enum": [
              "created",
              "committed",
              "aborted",
              "processing",
              "indexed",
              "failed"
            ],
            "type": "string"
          },
          "symbol_type": {
            "description": "The type of the symbol for the current symbol upload",
            "enum": [
              "Apple",
              "JavaScript",
              "Breakpad",
              "AndroidProguard",
              "UWP"
            ],
            "type": "string"
          },
          "symbol_upload_id": {
            "description": "The id for the current symbol upload",
            "type": "string"
          },
          "symbols_uploaded": {
            "description": "The symbols found in the upload. This may be empty until the status is indexed",
            "items": {
              "properties": {
                "platform": {
                  "description": "The platform the symbol is associated with",
                  "type": "string"
                },
                "symbol_id": {
                  "description": "The symbol id of the symbol binary",
                  "type": "string"
                }
              },
              "required": [
                "symbol_id",
                "platform"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "timestamp": {
            "description": "When the symbol upload was committed, or last transaction time if not committed",
            "format": "date-time",
            "type": "string"
          },
          "user": {
            "description": "User information of the one who intitiated the symbol upload",
            "properties": {
              "display_name": {
                "description": "The full name of the user. Might for example be first and last name",
                "type": "string"
              },
              "email": {
                "description": "The email of the user",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "symbol_upload_id",
          "app_id",
          "status",
          "symbol_type"
        ],
        "type": "object"
      },
      "SymbolUploadBeginRequest": {
        "description": "A request containing information pertaining to starting a symbol upload process",
        "properties": {
          "build": {
            "description": "The build number. Optional for Apple. Required for Android.",
            "type": "string"
          },
          "client_callback": {
            "description": "The callback URL that the client can optionally provide to get status updates for the current symbol upload",
            "type": "string"
          },
          "file_name": {
            "description": "The file name for the symbol upload",
            "type": "string"
          },
          "symbol_type": {
            "description": "The type of the symbol for the current symbol upload",
            "enum": [
              "Apple",
              "JavaScript",
              "Breakpad",
              "AndroidProguard",
              "UWP"
            ],
            "type": "string"
          },
          "version": {
            "description": "The version number. Optional for Apple. Required for Android.",
            "type": "string"
          }
        },
        "required": [
          "symbol_type"
        ],
        "type": "object"
      },
      "SymbolUploadBeginResponse": {
        "description": "A response containing information pertaining to starting a symbol upload process",
        "properties": {
          "expiration_date": {
            "description": "Describes how long the upload_url is valid",
            "format": "date-time",
            "type": "string"
          },
          "symbol_upload_id": {
            "description": "The id for the current upload",
            "type": "string"
          },
          "upload_url": {
            "description": "The URL where the client needs to upload the symbol blob to",
            "type": "string"
          }
        },
        "required": [
          "symbol_upload_id",
          "upload_url",
          "expiration_date"
        ],
        "type": "object"
      },
      "SymbolUploadEndRequest": {
        "description": "A request containing information pertaining to completing a symbol upload process",
        "properties": {
          "status": {
            "description": "The desired operation for the symbol upload",
            "enum": [
              "committed",
              "aborted"
            ],
            "type": "string"
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "SymbolUploadLocation": {
        "description": "Location for downloading symbol upload",
        "properties": {
          "uri": {
            "type": "string"
          }
        },
        "required": [
          "uri"
        ],
        "type": "object"
      },
      "SymbolUploadUserInfo": {
        "properties": {
          "display_name": {
            "description": "The full name of the user. Might for example be first and last name",
            "type": "string"
          },
          "email": {
            "description": "The email of the user",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SymbolUploads": {
        "description": "A set of symbol upload entities",
        "items": {
          "description": "A single symbol upload entity",
          "properties": {
            "app_id": {
              "description": "The application that this symbol upload belongs to",
              "type": "string"
            },
            "file_name": {
              "description": "The file name for the symbol upload",
              "type": "string"
            },
            "file_size": {
              "description": "The size of the file in Mebibytes. This may be 0 until the status is indexed",
              "type": "number"
            },
            "origin": {
              "description": "The origin of the symbol upload",
              "enum": [
                "User",
                "System"
              ],
              "type": "string"
            },
            "status": {
              "description": "The current status for the symbol upload",
              "enum": [
                "created",
                "committed",
                "aborted",
                "processing",
                "indexed",
                "failed"
              ],
              "type": "string"
            },
            "symbol_type": {
              "description": "The type of the symbol for the current symbol upload",
              "enum": [
                "Apple",
                "JavaScript",
                "Breakpad",
                "AndroidProguard",
                "UWP"
              ],
              "type": "string"
            },
            "symbol_upload_id": {
              "description": "The id for the current symbol upload",
              "type": "string"
            },
            "symbols_uploaded": {
              "description": "The symbols found in the upload. This may be empty until the status is indexed",
              "items": {
                "properties": {
                  "platform": {
                    "description": "The platform the symbol is associated with",
                    "type": "string"
                  },
                  "symbol_id": {
                    "description": "The symbol id of the symbol binary",
                    "type": "string"
                  }
                },
                "required": [
                  "symbol_id",
                  "platform"
                ],
                "type": "object"
              },
              "type": "array"
            },
            "timestamp": {
              "description": "When the symbol upload was committed, or last transaction time if not committed",
              "format": "date-time",
              "type": "string"
            },
            "user": {
              "description": "User information of the one who intitiated the symbol upload",
              "properties": {
                "display_name": {
                  "description": "The full name of the user. Might for example be first and last name",
                  "type": "string"
                },
                "email": {
                  "description": "The email of the user",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "required": [
            "symbol_upload_id",
            "app_id",
            "status",
            "symbol_type"
          ],
          "type": "object"
        },
        "type": "array"
      },
      "Symbols": {
        "description": "A response containing the list of symbols matching the specified filter (if any was provided)",
        "items": {
          "properties": {
            "alternate_symbol_ids": {
              "description": "The other symbols in the same file",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "app_id": {
              "description": "The application that this symbol belongs to",
              "type": "string"
            },
            "build": {
              "description": "The build number. Optional for Apple. Required for Android.",
              "type": "string"
            },
            "origin": {
              "description": "The origin of the symbol file",
              "enum": [
                "System",
                "User"
              ],
              "type": "string"
            },
            "platform": {
              "description": "The platform that this symbol is associated with",
              "type": "string"
            },
            "status": {
              "description": "Whether the symbol is ignored.",
              "enum": [
                "available",
                "ignored"
              ],
              "type": "string"
            },
            "symbol_id": {
              "description": "The unique id for this symbol (uuid)",
              "type": "string"
            },
            "symbol_upload_id": {
              "description": "The id of the symbol upload this symbol belongs to.",
              "type": "string"
            },
            "type": {
              "description": "The type of the symbol for the current symbol upload",
              "enum": [
                "Apple",
                "JavaScript",
                "Breakpad",
                "AndroidProguard",
                "UWP"
              ],
              "type": "string"
            },
            "url": {
              "description": "The path name of the symbol file in blob storage",
              "type": "string"
            },
            "version": {
              "description": "The version number. Optional for Apple. Required for Android.",
              "type": "string"
            }
          },
          "required": [
            "symbol_id",
            "platform",
            "type",
            "app_id",
            "url",
            "origin",
            "alternate_symbol_ids",
            "status",
            "symbol_upload_id"
          ],
          "type": "object"
        },
        "type": "array"
      },
      "SystemVersionNameGroup": {
        "description": "A response represents information about symbol name group",
        "properties": {
          "name": {
            "description": "Name of version group",
            "type": "string"
          },
          "versions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SystemVersionNameGroups": {
        "description": "A list of symbol name group entities",
        "items": {
          "description": "A response represents information about symbol name group",
          "properties": {
            "name": {
              "description": "Name of version group",
              "type": "string"
            },
            "versions": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "type": "array"
      },
      "TeamAppResponse": {
        "allOf": [
          {
            "properties": {
              "description": {
                "description": "The description of the team",
                "type": "string"
              },
              "display_name": {
                "description": "The display name of the team",
                "type": "string"
              },
              "id": {
                "description": "The internal unique id (UUID) of the team.",
                "format": "uuid",
                "type": "string"
              },
              "name": {
                "description": "The name of the team",
                "type": "string"
              }
            },
            "required": [
              "id",
              "name",
              "display_name"
            ],
            "type": "object"
          },
          {
            "properties": {
              "permissions": {
                "description": "The permissions the team has for the app",
                "items": {
                  "enum": [
                    "manager",
                    "developer",
                    "viewer",
                    "tester"
                  ],
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "TeamAppUpdateRequest": {
        "properties": {
          "permissions": {
            "description": "The permissions all members of the team have on the app",
            "items": {
              "enum": [
                "manager",
                "developer",
                "viewer"
              ],
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "permissions"
        ],
        "type": "object"
      },
      "TeamRequest": {
        "properties": {
          "description": {
            "description": "The description of the team",
            "type": "string"
          },
          "display_name": {
            "description": "The display name of the team",
            "type": "string"
          },
          "name": {
            "description": "The name of the team",
            "type": "string"
          }
        },
        "required": [
          "display_name"
        ],
        "type": "object"
      },
      "TeamResponse": {
        "properties": {
          "description": {
            "description": "The description of the team",
            "type": "string"
          },
          "display_name": {
            "description": "The display name of the team",
            "type": "string"
          },
          "id": {
            "description": "The internal unique id (UUID) of the team.",
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "description": "The name of the team",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "display_name"
        ],
        "type": "object"
      },
      "TeamUpdateRequest": {
        "properties": {
          "display_name": {
            "description": "The new display name of the team",
            "type": "string"
          }
        },
        "required": [
          "display_name"
        ],
        "type": "object"
      },
      "TeamUserResponse": {
        "properties": {
          "display_name": {
            "description": "The full name of the user. Might for example be first and last name",
            "type": "string"
          },
          "email": {
            "description": "The email address of the user",
            "type": "string"
          },
          "name": {
            "description": "The unique name that is used to identify the user.",
            "type": "string"
          },
          "role": {
            "description": "The role of the user has within the team",
            "enum": [
              "maintainer",
              "collaborator"
            ]
          }
        },
        "required": [
          "email",
          "display_name",
          "name",
          "role"
        ],
        "type": "object"
      },
      "TestCloudErrorDetails": {
        "description": "Details of a failed operation",
        "properties": {
          "message": {
            "description": "Human-readable message that describes the error",
            "type": "string"
          },
          "status": {
            "description": "Status of the operation",
            "type": "string"
          }
        },
        "required": [
          "status",
          "message"
        ],
        "title": "Test Cloud Error Details",
        "type": "object"
      },
      "TestCloudFileHash": {
        "description": "Hash, type, path and byte range of a file that is required in test run",
        "properties": {
          "checksum": {
            "description": "SHA256 hash of the file",
            "type": "string"
          },
          "fileType": {
            "description": "Type of the file",
            "enum": [
              "dsym-file",
              "app-file",
              "test-file"
            ],
            "type": "string"
          },
          "relativePath": {
            "description": "Relative path of the file",
            "type": "string"
          }
        },
        "required": [
          "fileType",
          "checksum",
          "relativePath"
        ],
        "title": "Test Cloud File Hash",
        "type": "object"
      },
      "TestCloudFileHashDeprecated": {
        "description": "Hash, type, path and byte range of a file that is required in test run",
        "properties": {
          "byte_range": {
            "description": "Range of bytes required to verify ownership of the file",
            "type": "string"
          },
          "checksum": {
            "description": "SHA256 hash of the file",
            "type": "string"
          },
          "file_type": {
            "description": "Type of the file",
            "enum": [
              "dsym-file",
              "app-file",
              "test-file"
            ],
            "type": "string"
          },
          "relative_path": {
            "description": "Relative path of the file",
            "type": "string"
          }
        },
        "required": [
          "file_type",
          "checksum",
          "relative_path"
        ],
        "title": "Test Cloud File Hash",
        "type": "object"
      },
      "TestCloudFileHashResponse": {
        "description": "Response message for single uploaded file hash",
        "properties": {
          "checksum": {
            "description": "SHA256 hash of the file",
            "type": "string"
          },
          "fileType": {
            "description": "Type of the file",
            "enum": [
              "dsym-file",
              "app-file",
              "test-file"
            ],
            "type": "string"
          },
          "relativePath": {
            "description": "Relative path of the file",
            "type": "string"
          },
          "uploadStatus": {
            "description": "Status of the upload",
            "properties": {
              "location": {
                "description": "URI that should be used to make POST request if file with given hash doesn't exist. This is set when status_code is equal to 412",
                "type": "string"
              },
              "statusCode": {
                "description": "HTTP status code that represent result of upload",
                "type": "number"
              }
            },
            "required": [
              "statusCode"
            ],
            "title": "Test Cloud Hash Upload Status",
            "type": "object"
          }
        },
        "required": [
          "fileType",
          "checksum",
          "uploadStatus"
        ],
        "title": "Test Cloud File Hash Response",
        "type": "object"
      },
      "TestCloudHashUploadStatus": {
        "description": "Result of uploading a single file hash",
        "properties": {
          "location": {
            "description": "URI that should be used to make POST request if file with given hash doesn't exist. This is set when status_code is equal to 412",
            "type": "string"
          },
          "statusCode": {
            "description": "HTTP status code that represent result of upload",
            "type": "number"
          }
        },
        "required": [
          "statusCode"
        ],
        "title": "Test Cloud Hash Upload Status",
        "type": "object"
      },
      "TestCloudProject": {
        "properties": {
          "frameworkProperties": {
            "properties": {
              "configurations": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "frameworkType": {
            "enum": [
              "Appium",
              "Calabash",
              "Espresso",
              "UITest",
              "Generated"
            ],
            "type": "string"
          },
          "path": {
            "description": "The path to the TestCloud project",
            "type": "string"
          }
        },
        "required": [
          "path",
          "frameworkType"
        ],
        "type": "object"
      },
      "TestCloudProjectFrameworkProperties": {
        "properties": {
          "configurations": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TestCloudStartTestRunOptions": {
        "description": "Options required to start the test run",
        "properties": {
          "device_selection": {
            "description": "Device selection string.",
            "type": "string"
          },
          "language": {
            "description": "Language that should be used to run tests.",
            "type": "string"
          },
          "locale": {
            "description": "Locale that should be used to run tests.",
            "type": "string"
          },
          "test_framework": {
            "description": "Test framework used by tests.",
            "type": "string"
          },
          "test_parameters": {
            "description": "A JSON dictionary with additional test parameters",
            "type": "object"
          },
          "test_series": {
            "description": "Name of the test series.",
            "type": "string"
          }
        },
        "required": [
          "test_framework",
          "device_selection"
        ],
        "title": "Test Cloud Start Test Run Options",
        "type": "object"
      },
      "TestCloudStartTestRunResult": {
        "description": "Result of starting a test run",
        "properties": {
          "accepted_devices": {
            "description": "List with names of accepted devices",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "rejected_devices": {
            "description": "List with names and descriptions of rejected devices",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "title": "Test Cloud Test Run Start Result",
        "type": "object"
      },
      "TestCloudToolset": {
        "properties": {
          "projects": {
            "description": "The TestCloud projects detected",
            "items": {
              "properties": {
                "frameworkProperties": {
                  "properties": {
                    "configurations": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "frameworkType": {
                  "enum": [
                    "Appium",
                    "Calabash",
                    "Espresso",
                    "UITest",
                    "Generated"
                  ],
                  "type": "string"
                },
                "path": {
                  "description": "The path to the TestCloud project",
                  "type": "string"
                }
              },
              "required": [
                "path",
                "frameworkType"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "projects"
        ],
        "type": "object"
      },
      "TestGDPRAccount": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TestGDPRApp": {
        "properties": {
          "hash_files_url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TestGDPRFeatureFlag": {
        "properties": {
          "name": {
            "type": "string"
          },
          "target_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TestGDPRFileSetFile": {
        "properties": {
          "app_upload_id": {
            "format": "uuid",
            "type": "string"
          },
          "hash_file_id": {
            "format": "uuid",
            "type": "string"
          },
          "hash_file_url": {
            "type": "string"
          },
          "path": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TestGDPRHashFile": {
        "properties": {
          "filename": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TestGDPRPipelineTest": {
        "properties": {
          "app_upload_id": {
            "format": "uuid",
            "type": "string"
          },
          "test_parameters": {
            "type": "object"
          }
        },
        "type": "object"
      },
      "TestGDPRResourceList": {
        "properties": {
          "resources": {
            "items": {
              "properties": {
                "path": {
                  "format": "URL",
                  "type": "string"
                },
                "rel": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TestGDPRTestRun": {
        "properties": {
          "app_hash_file_id": {
            "format": "uuid",
            "type": "string"
          },
          "app_hash_file_url": {
            "type": "string"
          },
          "app_icon_url": {
            "type": "string"
          },
          "dsym_hash_file_id": {
            "format": "uuid",
            "type": "string"
          },
          "dsym_hash_file_url": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "locale": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TestReport": {
        "properties": {
          "app_upload_id": {
            "type": "string"
          },
          "date": {
            "type": "string"
          },
          "date_finished": {
            "type": "string"
          },
          "device_logs": {
            "items": {
              "properties": {
                "appium_log": {
                  "type": "string"
                },
                "device_log": {
                  "type": "string"
                },
                "device_snapshot_id": {
                  "type": "string"
                },
                "test_log": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "errorMessage": {
            "type": "string"
          },
          "features": {
            "items": {
              "properties": {
                "failed": {
                  "type": "number"
                },
                "name": {
                  "type": "string"
                },
                "peakDuration": {
                  "type": "number"
                },
                "peakMemory": {
                  "type": "number"
                },
                "skipped": {
                  "type": "number"
                },
                "tests": {
                  "items": {
                    "properties": {
                      "peakDuration": {
                        "type": "number"
                      },
                      "peakMemory": {
                        "type": "number"
                      },
                      "runs": {
                        "items": {
                          "properties": {
                            "failed": {
                              "type": "number"
                            },
                            "id": {
                              "type": "string"
                            },
                            "number": {
                              "type": "number"
                            },
                            "report_url": {
                              "type": "string"
                            },
                            "skipped": {
                              "type": "number"
                            },
                            "steps": {
                              "items": {
                                "properties": {
                                  "failed": {
                                    "type": "number"
                                  },
                                  "id": {
                                    "type": "string"
                                  },
                                  "skipped": {
                                    "type": "number"
                                  },
                                  "stepExecutions": {
                                    "items": {
                                      "properties": {
                                        "device_snapshot_id": {
                                          "type": "string"
                                        },
                                        "status": {
                                          "type": "string"
                                        },
                                        "timestamp": {
                                          "type": "number"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "type": "array"
                                  },
                                  "stepName": {
                                    "type": "string"
                                  },
                                  "step_report_url": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "testName": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "finished_device_snapshots": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "platform": {
            "type": "string"
          },
          "revision": {
            "type": "number"
          },
          "schema_version": {
            "type": "number"
          },
          "snapshot_fatal_errors": {
            "items": {
              "properties": {
                "device_snapshot_id": {
                  "type": "string"
                },
                "error_message": {
                  "type": "string"
                },
                "error_title": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "stats": {
            "properties": {
              "artifacts": {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              "devices": {
                "type": "number"
              },
              "devices_failed": {
                "type": "number"
              },
              "devices_finished": {
                "type": "number"
              },
              "devices_not_runned": {
                "type": "number"
              },
              "devices_skipped": {
                "type": "number"
              },
              "failed": {
                "type": "number"
              },
              "filesize": {
                "type": "number"
              },
              "os": {
                "type": "number"
              },
              "passed": {
                "type": "number"
              },
              "skipped": {
                "type": "number"
              },
              "step_count": {
                "type": "number"
              },
              "total": {
                "type": "number"
              },
              "totalDeviceMinutes": {
                "type": "number"
              }
            },
            "required": [
              "os",
              "devices",
              "filesize",
              "totalDeviceMinutes",
              "devices_not_runned",
              "failed",
              "skipped",
              "passed",
              "total",
              "devices_finished",
              "devices_failed",
              "devices_skipped",
              "step_count"
            ],
            "type": "object"
          },
          "testType": {
            "type": "string"
          }
        },
        "required": [
          "app_upload_id",
          "date",
          "testType",
          "platform",
          "stats",
          "id",
          "schema_version",
          "revision",
          "features",
          "finished_device_snapshots",
          "device_logs",
          "date_finished"
        ],
        "type": "object"
      },
      "TestRun": {
        "description": "Summary single test run on Xamarin Test Cloud",
        "properties": {
          "appVersion": {
            "description": "The compiled version of the app binary",
            "type": "string"
          },
          "date": {
            "description": "The date and time the test was uploaded",
            "type": "string"
          },
          "description": {
            "description": "Human readable explanation of the current test status",
            "type": "string"
          },
          "id": {
            "description": "The unique id of the test upload",
            "format": "uuid",
            "type": "string"
          },
          "platform": {
            "description": "The device platform targeted by the test. Possible values are 'ios' or 'android'",
            "type": "string"
          },
          "resultStatus": {
            "description": "The passed/failed state",
            "type": "string"
          },
          "runStatus": {
            "description": "The current status of the test run, in relation to the various phases",
            "type": "string"
          },
          "state": {
            "description": "Deprecated. Use runStatus instead.",
            "type": "string"
          },
          "stats": {
            "description": "Summary single test run on Xamarin Test Cloud",
            "properties": {
              "devices": {
                "description": "Number of devices running the test",
                "type": "number"
              },
              "devicesFailed": {
                "description": "Number of failed devices",
                "type": "number"
              },
              "devicesFinished": {
                "description": "Number of finished devices",
                "type": "number"
              },
              "failed": {
                "description": "Number of failed tests",
                "type": "number"
              },
              "passed": {
                "description": "Number of passed tests",
                "type": "number"
              },
              "peakMemory": {
                "description": "The max amount of MB used during the test run",
                "type": "number"
              },
              "skipped": {
                "description": "Number of skipped tests",
                "type": "number"
              },
              "total": {
                "description": "Number of tests in total",
                "type": "number"
              },
              "totalDeviceMinutes": {
                "description": "The number of minutes of device time the test has been runnign",
                "type": "number"
              }
            },
            "title": "Test Run Statistics",
            "type": "object"
          },
          "status": {
            "description": "Deprecated. Use resultStatus instead.",
            "type": "string"
          },
          "testSeries": {
            "description": "The name of the test series with which this test upload is associated",
            "type": "string"
          },
          "testType": {
            "description": "The name of the test framework used to run this test",
            "type": "string"
          }
        },
        "title": "Test Run",
        "type": "object"
      },
      "TestRunState": {
        "description": "Current status of a test run",
        "properties": {
          "exit_code": {
            "description": "The exit code that the client should use when exiting. Used for indicating status to the caller of the client.\n0: test run completes with no failing tests\n1: test run completes with at least one failing test\n2: test run failed to complete. Status for test run is unknown\n",
            "type": "integer"
          },
          "message": {
            "description": "Multi-line message that describes the status",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "wait_time": {
            "description": "Time (in seconds) that the client should wait for before checking the status again",
            "type": "integer"
          }
        },
        "title": "Test Run State",
        "type": "object"
      },
      "TestRunStatistics": {
        "description": "Summary single test run on Xamarin Test Cloud",
        "properties": {
          "devices": {
            "description": "Number of devices running the test",
            "type": "number"
          },
          "devicesFailed": {
            "description": "Number of failed devices",
            "type": "number"
          },
          "devicesFinished": {
            "description": "Number of finished devices",
            "type": "number"
          },
          "failed": {
            "description": "Number of failed tests",
            "type": "number"
          },
          "passed": {
            "description": "Number of passed tests",
            "type": "number"
          },
          "peakMemory": {
            "description": "The max amount of MB used during the test run",
            "type": "number"
          },
          "skipped": {
            "description": "Number of skipped tests",
            "type": "number"
          },
          "total": {
            "description": "Number of tests in total",
            "type": "number"
          },
          "totalDeviceMinutes": {
            "description": "The number of minutes of device time the test has been runnign",
            "type": "number"
          }
        },
        "title": "Test Run Statistics",
        "type": "object"
      },
      "TestRunSummary": {
        "description": "Most important information about a test run.",
        "properties": {
          "completed": {
            "description": "Tells whether the test run has completed",
            "type": "boolean"
          },
          "date": {
            "description": "Date of the test run.",
            "format": "dateTime",
            "type": "string"
          },
          "failed": {
            "description": "Number of failed tests",
            "type": "number"
          },
          "passed": {
            "description": "Number of passed tests",
            "type": "number"
          },
          "statusDescription": {
            "description": "Human-readable status of the test run.",
            "type": "string"
          }
        },
        "title": "Test Run Summary",
        "type": "object"
      },
      "TestSeries": {
        "description": "Summary of a single test series",
        "properties": {
          "mostRecentActivity": {
            "description": "Date of the latest test run that used this test series",
            "format": "dateTime",
            "type": "string"
          },
          "name": {
            "description": "Name of the test series",
            "type": "string"
          },
          "slug": {
            "description": "Unique, human-readable identifier of the test series",
            "type": "string"
          },
          "testRuns": {
            "description": "Most recent test runs",
            "items": {
              "description": "Most important information about a test run.",
              "properties": {
                "completed": {
                  "description": "Tells whether the test run has completed",
                  "type": "boolean"
                },
                "date": {
                  "description": "Date of the test run.",
                  "format": "dateTime",
                  "type": "string"
                },
                "failed": {
                  "description": "Number of failed tests",
                  "type": "number"
                },
                "passed": {
                  "description": "Number of passed tests",
                  "type": "number"
                },
                "statusDescription": {
                  "description": "Human-readable status of the test run.",
                  "type": "string"
                }
              },
              "title": "Test Run Summary",
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "slug",
          "name"
        ],
        "title": "Test Series",
        "type": "object"
      },
      "TestSeriesName": {
        "properties": {
          "name": {
            "description": "Name of the new test series",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "title": "Name of the test series",
        "type": "object"
      },
      "TesterAppRelease": {
        "allOf": [
          {
            "description": "Response for getting a list of releases in a distribution group",
            "properties": {
              "enabled": {
                "description": "This value determines the whether a release currently is enabled or disabled.",
                "type": "boolean"
              },
              "id": {
                "description": "ID identifying this unique release.",
                "type": "integer"
              },
              "is_external_build": {
                "description": "This value determines if a release is external or not.",
                "type": "boolean"
              },
              "mandatory_update": {
                "description": "A boolean which determines whether the release is a mandatory update or not.",
                "type": "boolean"
              },
              "origin": {
                "description": "The release's origin",
                "enum": [
                  "hockeyapp",
                  "appcenter"
                ],
                "type": "string"
              },
              "short_version": {
                "description": "The release's short version.<br>\nFor iOS: CFBundleShortVersionString from info.plist.<br>\nFor Android: android:versionName from AppManifest.xml.\n",
                "type": "string"
              },
              "uploaded_at": {
                "description": "UTC time in ISO 8601 format of the uploaded time.",
                "type": "string"
              },
              "version": {
                "description": "The release's version.<br>\nFor iOS: CFBundleVersion from info.plist.<br>\nFor Android: android:versionCode from AppManifest.xml.\n",
                "type": "string"
              }
            },
            "required": [
              "id",
              "version",
              "enabled",
              "uploaded_at",
              "short_version",
              "mandatory_update"
            ],
            "type": "object"
          },
          {
            "properties": {
              "install_url": {
                "description": "The href required to install a release on a mobile device. On iOS devices will be prefixed with `itms-services://?action=download-manifest&url=`",
                "type": "string"
              },
              "release_notes": {
                "description": "The release's release notes.",
                "type": "string"
              },
              "size": {
                "description": "The release's size in bytes.",
                "type": "integer"
              }
            },
            "required": [
              "size"
            ],
            "type": "object"
          }
        ]
      },
      "TesterAppResponse": {
        "allOf": [
          {
            "properties": {
              "description": {
                "description": "The description of the app",
                "type": "string"
              },
              "display_name": {
                "description": "The display name of the app",
                "type": "string"
              },
              "icon_source": {
                "description": "The string representation of the source of the app's icon",
                "type": "string"
              },
              "icon_url": {
                "description": "The string representation of the URL pointing to the app's icon",
                "type": "string"
              },
              "id": {
                "description": "The unique ID (UUID) of the app",
                "format": "uuid",
                "type": "string"
              },
              "name": {
                "description": "The name of the app used in URLs",
                "type": "string"
              },
              "os": {
                "description": "The OS the app will be running on",
                "enum": [
                  "Android",
                  "iOS",
                  "macOS",
                  "Tizen",
                  "tvOS",
                  "Windows",
                  "Linux",
                  "Custom"
                ],
                "type": "string"
              },
              "owner": {
                "description": "The information about the app's owner",
                "properties": {
                  "avatar_url": {
                    "description": "The avatar URL of the owner",
                    "type": "string"
                  },
                  "display_name": {
                    "description": "The owner's display name",
                    "type": "string"
                  },
                  "email": {
                    "description": "The owner's email address",
                    "type": "string"
                  },
                  "id": {
                    "description": "The unique id (UUID) of the owner",
                    "format": "uuid",
                    "type": "string"
                  },
                  "name": {
                    "description": "The unique name that used to identify the owner",
                    "type": "string"
                  },
                  "type": {
                    "description": "The owner type. Can either be 'org' or 'user'",
                    "enum": [
                      "org",
                      "user"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "id",
                  "display_name",
                  "name",
                  "type"
                ],
                "type": "object"
              },
              "release_type": {
                "description": "A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase",
                "type": "string"
              }
            },
            "required": [
              "id",
              "display_name",
              "name",
              "os",
              "owner"
            ],
            "type": "object"
          },
          {
            "properties": {
              "microsoft_internal": {
                "description": "it indicates if the app is microsoft internal",
                "type": "boolean"
              },
              "permissions": {
                "description": "The permissions associated with the app",
                "items": {
                  "enum": [
                    "can_remove_from_app"
                  ],
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "TesterAppWithReleaseResponse": {
        "properties": {
          "description": {
            "description": "The description of the app",
            "type": "string"
          },
          "display_name": {
            "description": "The app's display name.",
            "type": "string"
          },
          "icon_url": {
            "description": "A URL to the app's icon.",
            "type": "string"
          },
          "id": {
            "description": "The unique ID (UUID) of the app",
            "type": "string"
          },
          "name": {
            "description": "The app's name.",
            "type": "string"
          },
          "os": {
            "description": "The app's os.",
            "type": "string"
          },
          "owner": {
            "description": "The information about the app's owner",
            "properties": {
              "avatar_url": {
                "description": "The avatar URL of the owner",
                "type": "string"
              },
              "display_name": {
                "description": "The owner's display name",
                "type": "string"
              },
              "email": {
                "description": "The owner's email address",
                "type": "string"
              },
              "id": {
                "description": "The unique id (UUID) of the owner",
                "type": "string"
              },
              "name": {
                "description": "The unique name that used to identify the owner",
                "type": "string"
              },
              "type": {
                "description": "The owner type. Can either be 'org' or 'user'",
                "enum": [
                  "org",
                  "user"
                ],
                "type": "string"
              }
            },
            "type": "object"
          },
          "release": {
            "allOf": [
              {
                "description": "Response for getting a list of releases in a distribution group",
                "properties": {
                  "enabled": {
                    "description": "This value determines the whether a release currently is enabled or disabled.",
                    "type": "boolean"
                  },
                  "id": {
                    "description": "ID identifying this unique release.",
                    "type": "integer"
                  },
                  "is_external_build": {
                    "description": "This value determines if a release is external or not.",
                    "type": "boolean"
                  },
                  "mandatory_update": {
                    "description": "A boolean which determines whether the release is a mandatory update or not.",
                    "type": "boolean"
                  },
                  "origin": {
                    "description": "The release's origin",
                    "enum": [
                      "hockeyapp",
                      "appcenter"
                    ],
                    "type": "string"
                  },
                  "short_version": {
                    "description": "The release's short version.<br>\nFor iOS: CFBundleShortVersionString from info.plist.<br>\nFor Android: android:versionName from AppManifest.xml.\n",
                    "type": "string"
                  },
                  "uploaded_at": {
                    "description": "UTC time in ISO 8601 format of the uploaded time.",
                    "type": "string"
                  },
                  "version": {
                    "description": "The release's version.<br>\nFor iOS: CFBundleVersion from info.plist.<br>\nFor Android: android:versionCode from AppManifest.xml.\n",
                    "type": "string"
                  }
                },
                "required": [
                  "id",
                  "version",
                  "enabled",
                  "uploaded_at",
                  "short_version",
                  "mandatory_update"
                ],
                "type": "object"
              },
              {
                "properties": {
                  "install_url": {
                    "description": "The href required to install a release on a mobile device. On iOS devices will be prefixed with `itms-services://?action=download-manifest&url=`",
                    "type": "string"
                  },
                  "release_notes": {
                    "description": "The release's release notes.",
                    "type": "string"
                  },
                  "size": {
                    "description": "The release's size in bytes.",
                    "type": "integer"
                  }
                },
                "required": [
                  "size"
                ],
                "type": "object"
              }
            ]
          }
        },
        "type": "object"
      },
      "Thread": {
        "description": "a thread representation",
        "properties": {
          "crashed": {
            "description": "True if this thread crashed",
            "type": "boolean"
          },
          "exception": {
            "$ref": "#/components/schemas/Exception",
            "description": "potential additional exception happened in that thread (Last Exception Backtrace)"
          },
          "frames": {
            "description": "frames of that thread",
            "items": {
              "description": "a single frame of a stack trace",
              "properties": {
                "address": {
                  "description": "address of the frame",
                  "type": "string"
                },
                "app_code": {
                  "description": "this line isn't from any framework",
                  "type": "boolean"
                },
                "class_method": {
                  "description": "is a class method",
                  "type": "boolean"
                },
                "class_name": {
                  "description": "name of the class",
                  "type": "string"
                },
                "code_formatted": {
                  "description": "Formatted frame string",
                  "type": "string"
                },
                "code_raw": {
                  "description": "Raw frame string",
                  "type": "string"
                },
                "file": {
                  "description": "name of the file",
                  "type": "string"
                },
                "framework_name": {
                  "description": "Name of the framework",
                  "type": "string"
                },
                "language": {
                  "description": "programming language of the frame",
                  "enum": [
                    "JavaScript",
                    "CSharp",
                    "Objective-C",
                    "Objective-Cpp",
                    "Cpp",
                    "C",
                    "Swift",
                    "Java",
                    "Unknown"
                  ],
                  "type": "string"
                },
                "line": {
                  "description": "line number",
                  "type": "integer"
                },
                "method": {
                  "description": "name of the method",
                  "type": "string"
                },
                "method_params": {
                  "description": "parameters of the frames method",
                  "type": "string"
                },
                "relevant": {
                  "description": "frame should be shown always",
                  "type": "boolean"
                }
              },
              "required": [
                "code_raw",
                "code_formatted",
                "app_code"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "platform": {
            "description": "SDK/Platform this thread is beeing generated from",
            "enum": [
              "ios",
              "android",
              "xamarin",
              "react-native",
              "ndk",
              "unity",
              "other"
            ],
            "type": "string"
          },
          "relevant": {
            "description": "Shows if a thread is relevant or not. Is false if all frames are non relevant, otherwise true",
            "type": "boolean"
          },
          "title": {
            "description": "name of the thread",
            "type": "string"
          }
        },
        "required": [
          "title",
          "frames"
        ],
        "type": "object"
      },
      "Tier": {
        "properties": {
          "name": {
            "description": "The name of the tier",
            "type": "string"
          }
        },
        "title": "Subscription Tier",
        "type": "object"
      },
      "TokenQueryResult": {
        "description": "Token query result.",
        "properties": {
          "tokens": {
            "description": "List of tokens.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ToolsetProject": {
        "description": "Abstract platform project",
        "properties": {
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ToolsetProjects": {
        "description": "A collection of projects for each type of toolset",
        "properties": {
          "android": {
            "properties": {
              "androidModules": {
                "description": "Android Gradle modules",
                "items": {
                  "properties": {
                    "buildConfigurations": {
                      "description": "The detected build configurations of the Android module",
                      "items": {
                        "properties": {
                          "name": {
                            "description": "Name of build configuration (the same as a build type name)",
                            "type": "string"
                          },
                          "signingConfig": {
                            "description": "Android signing config. Null if not specified",
                            "properties": {
                              "hasStoreFile": {
                                "description": "Indicates if storeFile is specified in the signing configuration",
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "buildTypes": {
                      "description": "The detected build types of the Android module",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "buildVariants": {
                      "description": "The detected build variants of the Android module (matrix of product flavor + build type (debug|release))",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "hasBundle": {
                      "description": "Module contains bundle settings",
                      "type": "boolean"
                    },
                    "isRoot": {
                      "description": "Whether the module is at the root level of the project",
                      "type": "boolean"
                    },
                    "name": {
                      "description": "Name of the Android module",
                      "type": "string"
                    },
                    "productFlavors": {
                      "description": "The product flavors of the Android module",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "name"
                  ],
                  "type": "object"
                },
                "type": "array"
              },
              "gradleWrapperPath": {
                "description": "The path of the Gradle wrapper",
                "type": "string"
              }
            },
            "required": [
              "androidModules"
            ],
            "type": "object"
          },
          "buildscripts": {
            "additionalProperties": {
              "description": "Abstract platform project",
              "properties": {
                "name": {
                  "type": "string"
                },
                "path": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "A collection of detected pre/post buildscripts for current platform toolset"
          },
          "commit": {
            "description": "The commit hash of the analyzed commit",
            "type": "string"
          },
          "javascript": {
            "properties": {
              "javascriptSolutions": {
                "description": "The React Native solutions detected",
                "items": {
                  "properties": {
                    "packageJsonPath": {
                      "description": "The path to the detected package.json",
                      "type": "string"
                    },
                    "reactNativeVersion": {
                      "description": "Version of React Native from package.json files",
                      "type": "string"
                    }
                  },
                  "required": [
                    "packageJsonPath"
                  ],
                  "type": "object"
                },
                "type": "array"
              },
              "packageJsonPaths": {
                "description": "Paths for detected package.json files",
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "required": [
              "packageJsonPaths"
            ],
            "type": "object"
          },
          "testcloud": {
            "properties": {
              "projects": {
                "description": "The TestCloud projects detected",
                "items": {
                  "properties": {
                    "frameworkProperties": {
                      "properties": {
                        "configurations": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "frameworkType": {
                      "enum": [
                        "Appium",
                        "Calabash",
                        "Espresso",
                        "UITest",
                        "Generated"
                      ],
                      "type": "string"
                    },
                    "path": {
                      "description": "The path to the TestCloud project",
                      "type": "string"
                    }
                  },
                  "required": [
                    "path",
                    "frameworkType"
                  ],
                  "type": "object"
                },
                "type": "array"
              }
            },
            "required": [
              "projects"
            ],
            "type": "object"
          },
          "uwp": {
            "properties": {
              "uwpSolutions": {
                "description": "The UWP solutions detected",
                "items": {
                  "properties": {
                    "configurations": {
                      "description": "The possible configurations detected for the UWP solution",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "path": {
                      "description": "The path to the UWP solution",
                      "type": "string"
                    }
                  },
                  "required": [
                    "path",
                    "configurations"
                  ],
                  "type": "object"
                },
                "type": "array"
              }
            },
            "required": [
              "uwpSolutions"
            ],
            "type": "object"
          },
          "xamarin": {
            "properties": {
              "xamarinSolutions": {
                "description": "Xamarin solutions for the toolset",
                "items": {
                  "properties": {
                    "configurations": {
                      "description": "Solution configurations",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "defaultConfiguration": {
                      "description": "Solution default configuration",
                      "type": "string"
                    },
                    "path": {
                      "description": "Path to solution",
                      "type": "string"
                    }
                  },
                  "required": [
                    "path",
                    "configurations"
                  ],
                  "type": "object"
                },
                "type": "array"
              }
            },
            "required": [
              "xamarinSolutions"
            ],
            "type": "object"
          },
          "xcode": {
            "properties": {
              "xcodeSchemeContainers": {
                "description": "The Xcode scheme containers",
                "items": {
                  "properties": {
                    "appExtensionTargets": {
                      "description": "Information regarding project app extensions, if present",
                      "items": {
                        "description": "App extension information",
                        "properties": {
                          "name": {
                            "description": "App extension name",
                            "type": "string"
                          },
                          "targetBundleIdentifier": {
                            "description": "App extension bundle identifier",
                            "type": "string"
                          }
                        },
                        "required": [
                          "name",
                          "targetBundleIdentifier"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "cartfilePath": {
                      "description": "Path to Carthage file, if present",
                      "type": "string"
                    },
                    "path": {
                      "description": "Path to project",
                      "type": "string"
                    },
                    "podfilePath": {
                      "description": "Path to CocoaPods file, if present",
                      "type": "string"
                    },
                    "sharedSchemes": {
                      "description": "Project schemes",
                      "items": {
                        "properties": {
                          "archiveConfiguration": {
                            "description": "Build configuration set in Archive action",
                            "type": "string"
                          },
                          "archiveProject": {
                            "properties": {
                              "archiveTargetId": {
                                "description": "The Id of the target to archive",
                                "type": "string"
                              },
                              "projectName": {
                                "description": "The project to archive container name",
                                "type": "string"
                              },
                              "projectPath": {
                                "description": "Full path of the target project",
                                "type": "string"
                              }
                            },
                            "required": [
                              "archiveTargetId",
                              "projectName"
                            ],
                            "type": "object"
                          },
                          "hasTestAction": {
                            "description": "Does scheme have a test action?",
                            "type": "boolean"
                          },
                          "name": {
                            "description": "Scheme name",
                            "type": "string"
                          }
                        },
                        "required": [
                          "name",
                          "hasTestAction"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "workspaceProjectPaths": {
                      "description": "Related projects paths for xcworkspace",
                      "type": "string"
                    },
                    "xcodeProjectSha": {
                      "description": "repo object Id of the pbxproject",
                      "type": "string"
                    }
                  },
                  "required": [
                    "path",
                    "sharedSchemes"
                  ],
                  "type": "object"
                },
                "type": "array"
              }
            },
            "required": [
              "xcodeSchemeContainers"
            ],
            "type": "object"
          }
        },
        "type": "object"
      },
      "Toolsets": {
        "description": "Set of toolsets available for app",
        "properties": {
          "node": {
            "description": "A list of Node versions",
            "items": {
              "description": "The Node version",
              "properties": {
                "current": {
                  "description": "If the Node version is default for AppCenter",
                  "type": "boolean"
                },
                "name": {
                  "description": "The version name",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "xamarin": {
            "description": "A list of Xamarin SDK bundles",
            "items": {
              "description": "The Xamarin SDK bundle",
              "properties": {
                "current": {
                  "description": "If the SDK is latest stable",
                  "type": "boolean"
                },
                "monoVersion": {
                  "description": "The Mono version",
                  "type": "string"
                },
                "sdkBundle": {
                  "description": "The Xamarin SDK version",
                  "type": "string"
                },
                "stable": {
                  "description": "If the SDK is stable",
                  "type": "boolean"
                },
                "xcodeVersions": {
                  "description": "Specific for iOS SDK. A list of Xcode versions supported by current SDK version",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "xcode": {
            "description": "A list of Xcode versions",
            "items": {
              "description": "The Xcode version",
              "properties": {
                "current": {
                  "description": "If the Xcode is latest stable",
                  "type": "boolean"
                },
                "name": {
                  "description": "The version name",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TransferAppAdminRequest": {
        "properties": {
          "issue_id": {
            "description": "The id of the related Intercom issue.",
            "type": "string"
          },
          "new_owner_id": {
            "description": "The internal unique id (UUID) of the user/org.",
            "format": "uuid",
            "type": "string"
          },
          "responsible_admin_id": {
            "description": "The id of the user who started transfer process.",
            "format": "uuid",
            "type": "string"
          },
          "transfer_reason": {
            "description": "The explanation for starting transfer process.",
            "type": "string"
          }
        },
        "required": [
          "new_owner_id",
          "issue_id",
          "transfer_reason",
          "responsible_admin_id"
        ],
        "type": "object"
      },
      "TransferRepoOwnerRequest": {
        "properties": {
          "issue_id": {
            "description": "The id of the related Intercom issue.",
            "type": "string"
          },
          "new_owner_id": {
            "description": "The internal unique id (UUID) of the user.",
            "format": "uuid",
            "type": "string"
          },
          "repository_url": {
            "description": "The url of repository to have its ownership transferred.",
            "type": "string"
          },
          "responsible_admin_id": {
            "description": "The id of the user who started transfer process.",
            "format": "uuid",
            "type": "string"
          },
          "transfer_reason": {
            "description": "The explanation for starting transfer process.",
            "type": "string"
          }
        },
        "required": [
          "new_owner_id",
          "issue_id",
          "transfer_reason",
          "responsible_admin_id",
          "repository_url"
        ],
        "type": "object"
      },
      "UWPSolution": {
        "properties": {
          "configurations": {
            "description": "The possible configurations detected for the UWP solution",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "path": {
            "description": "The path to the UWP solution",
            "type": "string"
          }
        },
        "required": [
          "path",
          "configurations"
        ],
        "type": "object"
      },
      "UWPToolset": {
        "properties": {
          "uwpSolutions": {
            "description": "The UWP solutions detected",
            "items": {
              "properties": {
                "configurations": {
                  "description": "The possible configurations detected for the UWP solution",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "path": {
                  "description": "The path to the UWP solution",
                  "type": "string"
                }
              },
              "required": [
                "path",
                "configurations"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "uwpSolutions"
        ],
        "type": "object"
      },
      "UnhandledErrorLog": {
        "allOf": [
          {
            "discriminator": {
              "propertyName": "type"
            },
            "properties": {
              "device": {
                "description": "Device characteristics.",
                "properties": {
                  "app_build": {
                    "description": "The app's build number, e.g. 42.\n",
                    "type": "string"
                  },
                  "app_namespace": {
                    "description": "The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.\n",
                    "type": "string"
                  },
                  "app_version": {
                    "description": "Application version name, e.g. 1.1.0\n",
                    "type": "string"
                  },
                  "carrier_code": {
                    "description": "Carrier country code (for mobile devices).\n",
                    "type": "string"
                  },
                  "carrier_country": {
                    "description": "Carrier country.\n",
                    "type": "string"
                  },
                  "carrier_name": {
                    "description": "Carrier name (for mobile devices).\n",
                    "type": "string"
                  },
                  "live_update_deployment_key": {
                    "description": "Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.\n",
                    "type": "string"
                  },
                  "live_update_package_hash": {
                    "description": "Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.\n",
                    "type": "string"
                  },
                  "live_update_release_label": {
                    "description": "Label that is used to identify application code 'version' released via Live Update beacon running on device\n",
                    "type": "string"
                  },
                  "locale": {
                    "description": "Language code (example: en_US).\n",
                    "type": "string"
                  },
                  "model": {
                    "description": "Device model (example: iPad2,3).\n",
                    "type": "string"
                  },
                  "oem_name": {
                    "description": "Device manufacturer (example: HTC).\n",
                    "type": "string"
                  },
                  "os_api_level": {
                    "description": "API level when applicable like in Android (example: 15).\n",
                    "type": "integer"
                  },
                  "os_build": {
                    "description": "OS build code (example: LMY47X).\n",
                    "type": "string"
                  },
                  "os_name": {
                    "description": "OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.\n",
                    "type": "string"
                  },
                  "os_version": {
                    "description": "OS version (example: 9.3.0).\n",
                    "type": "string"
                  },
                  "screen_size": {
                    "description": "Screen size of the device in pixels (example: 640x480).\n",
                    "type": "string"
                  },
                  "sdk_name": {
                    "description": "Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\".\n",
                    "type": "string"
                  },
                  "sdk_version": {
                    "description": "Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\".\n",
                    "type": "string"
                  },
                  "time_zone_offset": {
                    "description": "The offset in minutes from UTC for the device time zone, including daylight savings time.\n",
                    "maximum": 840,
                    "minimum": -840,
                    "type": "integer"
                  },
                  "wrapper_runtime_version": {
                    "description": "Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.\n",
                    "type": "string"
                  },
                  "wrapper_sdk_name": {
                    "description": "Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\".\n",
                    "type": "string"
                  },
                  "wrapper_sdk_version": {
                    "description": "Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.\n",
                    "type": "string"
                  }
                },
                "required": [
                  "sdk_name",
                  "sdk_version",
                  "os_name",
                  "os_version",
                  "locale",
                  "time_zone_offset",
                  "app_version",
                  "app_build"
                ],
                "type": "object"
              },
              "install_id": {
                "description": "Install ID.\n",
                "format": "uuid",
                "type": "string"
              },
              "timestamp": {
                "description": "Log creation timestamp.\n",
                "format": "date-time",
                "type": "string"
              },
              "type": {
                "description": "Log type.\n",
                "enum": [
                  "event",
                  "page",
                  "start_session",
                  "error",
                  "push_installation",
                  "start_service",
                  "custom_properties"
                ],
                "type": "string"
              }
            },
            "required": [
              "type",
              "timestamp",
              "install_id",
              "device"
            ],
            "type": "object"
          }
        ],
        "description": "Required explicit begin session log (a marker event for analytics service).",
        "properties": {
          "error_id": {
            "description": "Error ID.\n",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "error_id"
        ],
        "type": "object",
        "x-ms-discriminator-value": "unhandled_error"
      },
      "UpdateCheckResponse": {
        "properties": {
          "update_info": {
            "allOf": [
              {
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "is_disabled": {
                    "type": "boolean"
                  },
                  "is_mandatory": {
                    "type": "boolean"
                  },
                  "rollout": {
                    "maximum": 100,
                    "minimum": 1,
                    "type": "integer"
                  },
                  "target_binary_range": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "properties": {
                  "download_url": {
                    "type": "string"
                  },
                  "is_available": {
                    "type": "boolean"
                  },
                  "label": {
                    "type": "string"
                  },
                  "package_hash": {
                    "type": "string"
                  },
                  "package_size": {
                    "type": "number"
                  },
                  "should_run_binary_version": {
                    "type": "boolean"
                  },
                  "update_app_version": {
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            ],
            "required": [
              "is_available"
            ]
          }
        },
        "required": [
          "update_info"
        ],
        "type": "object"
      },
      "UpdateDevicesRequest": {
        "description": "Information required to publish devices to the Apple Developer account and resign the application.",
        "properties": {
          "account_service_connection_id": {
            "description": "The service_connection_id of the stored Apple credentials instead of username, password.",
            "type": "string"
          },
          "destinations": {
            "description": "Array of distribution groups that the devices should be provisioned from.",
            "items": {
              "properties": {
                "name": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "devices": {
            "description": "Array of device UDID's to be published to the Apple Developer account.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "p12_base64": {
            "description": "The certificate to use for resigning the application with the updated provisioning profiles.",
            "type": "string"
          },
          "p12_password": {
            "description": "The password certificate if one is needed.",
            "type": "string"
          },
          "p12_service_connection_id": {
            "description": "The service_connection_id of the stored Apple certificate instead of p12_base64 value.",
            "type": "string"
          },
          "password": {
            "description": "The password for the Apple Developer account to publish the devices to.",
            "type": "string"
          },
          "publish_all_devices": {
            "description": "When set to true, all unprovisioned devices will be published to the Apple Developer account.  When false, only the provided devices will be published to the Apple Developer account.",
            "type": "boolean"
          },
          "release_id": {
            "description": "When provided, will update the provided release with the new set of devices. By default the latest release of the distribution group is used when this property is omitted. If `release_id` is passed in the path, there is no need to pass in the body as well.",
            "type": "number"
          },
          "username": {
            "description": "The username for the Apple Developer account to publish the devices to.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpdateDevicesResponse": {
        "description": "URL that can be used to check the status of the update devices operation and the updated profiles.",
        "properties": {
          "status_url": {
            "description": "URL that can be used to check the status of the update devices operation.",
            "type": "string"
          }
        },
        "required": [
          "status_url"
        ],
        "type": "object"
      },
      "UpdateExternalUrlRequest": {
        "description": "A request containing information for creating an externally hosted release.",
        "properties": {
          "external_download_url": {
            "description": "The external URL to the release's binary.",
            "type": "string"
          }
        },
        "required": [
          "external_download_url"
        ],
        "type": "object"
      },
      "UpdateIdentityProvidersRequest": {
        "description": "Identity providers changes",
        "type": "object"
      },
      "UpdateInfoData": {
        "allOf": [
          {
            "properties": {
              "description": {
                "type": "string"
              },
              "is_disabled": {
                "type": "boolean"
              },
              "is_mandatory": {
                "type": "boolean"
              },
              "rollout": {
                "maximum": 100,
                "minimum": 1,
                "type": "integer"
              },
              "target_binary_range": {
                "type": "string"
              }
            },
            "type": "object"
          },
          {
            "properties": {
              "download_url": {
                "type": "string"
              },
              "is_available": {
                "type": "boolean"
              },
              "label": {
                "type": "string"
              },
              "package_hash": {
                "type": "string"
              },
              "package_size": {
                "type": "number"
              },
              "should_run_binary_version": {
                "type": "boolean"
              },
              "update_app_version": {
                "type": "boolean"
              }
            },
            "type": "object"
          }
        ],
        "required": [
          "is_available"
        ]
      },
      "UpdateResignStatusRequest": {
        "description": "Updates the status of the resign request",
        "properties": {
          "error_code": {
            "description": "Error code if an error occured in the resigning operation.",
            "type": "string"
          },
          "error_message": {
            "description": "Error message if an error occured in the resigning operation.",
            "type": "string"
          },
          "releaseMetadata": {
            "description": "releaseMetadata from ios resigner extractor",
            "type": "object"
          },
          "status": {
            "description": "The updated status for the resigning request.",
            "type": "string"
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "UpdateResignStatusResponse": {
        "description": "URL that can be used to check the status of the update devices operation and the updated profiles.",
        "properties": {
          "profiles_zip_base64": {
            "description": "A zip of the updated provisioning profiles. Base64 encoded.",
            "type": "string"
          },
          "status": {
            "description": "The status.",
            "type": "string"
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "UploadedSymbolInfo": {
        "properties": {
          "platform": {
            "description": "The platform the symbol is associated with",
            "type": "string"
          },
          "symbol_id": {
            "description": "The symbol id of the symbol binary",
            "type": "string"
          }
        },
        "required": [
          "symbol_id",
          "platform"
        ],
        "type": "object"
      },
      "UsagePeriod": {
        "description": "Usage for a single period",
        "properties": {
          "byAccount": {
            "additionalProperties": {
              "type": "number"
            },
            "description": "A collection of named numeric values",
            "type": "object"
          },
          "byApp": {
            "additionalProperties": {
              "additionalProperties": {
                "type": "number"
              },
              "description": "A collection of named numeric values",
              "type": "object"
            },
            "description": "A collection of  named numeric values grouped by app",
            "type": "object"
          },
          "endTime": {
            "description": "Exclusive end time of the usage period.",
            "format": "dateTime",
            "type": "string"
          },
          "startTime": {
            "description": "Inclusive start time of the usage period",
            "format": "dateTime",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UsageRecordStatus": {
        "description": "Status of the usage record creation",
        "properties": {
          "expectedLatestBuildExists": {
            "description": "Is the age of the most recent Build service usage record within expected limits",
            "type": "boolean"
          },
          "expectedLatestTestExists": {
            "description": "Is the age of the most recent Test service usage record within expected limits",
            "type": "boolean"
          },
          "latestBuildUsageRecordTime": {
            "description": "The time of the most recent Build service usage record",
            "format": "dateTime",
            "type": "string"
          },
          "latestTestUsageRecordTime": {
            "description": "The time of the most recent Test service usage record",
            "format": "dateTime",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserAppPermissionsUpdateRequest": {
        "properties": {
          "permissions": {
            "description": "The permissions the user has for the app",
            "items": {
              "enum": [
                "manager",
                "developer",
                "viewer"
              ],
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "permissions"
        ],
        "type": "object"
      },
      "UserAuthResponse": {
        "properties": {
          "display_name": {
            "description": "The full name of the user. Might for example be first and last name",
            "type": "string"
          },
          "email": {
            "description": "The email address of the user",
            "type": "string"
          },
          "external_provider": {
            "description": "The name of the external auth provider",
            "type": "string"
          },
          "external_user_id": {
            "description": "The user ID given by the external provider",
            "type": "string"
          },
          "id": {
            "description": "The unique id (UUID) of the user",
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "description": "The unique name that is used to identify the user",
            "type": "string"
          },
          "origin": {
            "description": "The creation origin of this user",
            "enum": [
              "appcenter",
              "hockeyapp",
              "codepush"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "display_name",
          "email",
          "name",
          "origin"
        ],
        "type": "object"
      },
      "UserDataResponse": {
        "properties": {
          "avatar_url": {
            "description": "The url at which the user's avatar can be reached",
            "type": "string"
          },
          "display_name": {
            "description": "The display name of the user",
            "type": "string"
          },
          "id": {
            "description": "The unique id (UUID) of the user",
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "description": "The name of the user",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserEmailOrgRoleRequest": {
        "properties": {
          "role": {
            "description": "The user's role",
            "enum": [
              "admin",
              "collaborator",
              "member"
            ],
            "type": "string"
          },
          "user_email": {
            "description": "The user's email address",
            "type": "string"
          }
        },
        "required": [
          "user_email"
        ],
        "type": "object"
      },
      "UserEmailRequest": {
        "properties": {
          "user_email": {
            "description": "The user's email address",
            "type": "string"
          }
        },
        "required": [
          "user_email"
        ],
        "type": "object"
      },
      "UserInteractionMetricsResponse": {
        "description": "Response for retrieving user interaction metrics.",
        "properties": {
          "has_more_than_1_release": {
            "description": "check if the user's whole apps has more than 1 releases.",
            "type": "boolean"
          },
          "less_than_100_apps": {
            "description": "check if the user has less than 100 apps.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "UserInvitationPermissionsUpdateRequest": {
        "properties": {
          "permissions": {
            "description": "The permissions the user has for the app in the invitation",
            "items": {
              "enum": [
                "manager",
                "developer",
                "viewer"
              ],
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "permissions"
        ],
        "type": "object"
      },
      "UserLiteProfileResponse": {
        "properties": {
          "display_name": {
            "description": "The full name of the user. Might for example be first and last name",
            "type": "string"
          },
          "email": {
            "description": "The email address of the user",
            "type": "string"
          },
          "id": {
            "description": "The unique id (UUID) of the user",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "id",
          "display_name",
          "email"
        ],
        "type": "object"
      },
      "UserNameAvailabilityResponse": {
        "properties": {
          "available": {
            "description": "The availability status of the requested user name",
            "type": "boolean"
          },
          "name": {
            "description": "The requested user name",
            "type": "string"
          }
        },
        "required": [
          "available",
          "name"
        ],
        "type": "object"
      },
      "UserNameUpdateRequest": {
        "properties": {
          "name": {
            "description": "The new, unique name that is used to identify.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserProfileAdminResponse": {
        "allOf": [
          {
            "properties": {
              "avatar_url": {
                "description": "The avatar URL of the user",
                "type": "string"
              },
              "can_change_password": {
                "description": "User is required to send an old password in order to change the password.",
                "type": "boolean"
              },
              "display_name": {
                "description": "The full name of the user. Might for example be first and last name",
                "type": "string"
              },
              "email": {
                "description": "The email address of the user",
                "type": "string"
              },
              "id": {
                "description": "The unique id (UUID) of the user",
                "format": "uuid",
                "type": "string"
              },
              "name": {
                "description": "The unique name that is used to identify the user.",
                "type": "string"
              },
              "origin": {
                "description": "The creation origin of this user",
                "enum": [
                  "appcenter",
                  "hockeyapp",
                  "codepush"
                ],
                "type": "string"
              },
              "permissions": {
                "description": "The permissions the user has for the app",
                "items": {
                  "enum": [
                    "manager",
                    "developer",
                    "viewer",
                    "tester"
                  ],
                  "type": "string"
                },
                "type": "array"
              }
            },
            "required": [
              "id",
              "display_name",
              "email",
              "name",
              "origin"
            ],
            "type": "object"
          },
          {
            "properties": {
              "role": {
                "description": "The user's role in the organization",
                "enum": [
                  "admin",
                  "collaborator",
                  "member"
                ],
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "UserProfileResponse": {
        "properties": {
          "avatar_url": {
            "description": "The avatar URL of the user",
            "type": "string"
          },
          "can_change_password": {
            "description": "User is required to send an old password in order to change the password.",
            "type": "boolean"
          },
          "display_name": {
            "description": "The full name of the user. Might for example be first and last name",
            "type": "string"
          },
          "email": {
            "description": "The email address of the user",
            "type": "string"
          },
          "id": {
            "description": "The unique id (UUID) of the user",
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "description": "The unique name that is used to identify the user.",
            "type": "string"
          },
          "origin": {
            "description": "The creation origin of this user",
            "enum": [
              "appcenter",
              "hockeyapp",
              "codepush"
            ],
            "type": "string"
          },
          "permissions": {
            "description": "The permissions the user has for the app",
            "items": {
              "enum": [
                "manager",
                "developer",
                "viewer",
                "tester"
              ],
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "id",
          "display_name",
          "email",
          "name",
          "origin"
        ],
        "type": "object"
      },
      "UserProfileResponseInternal": {
        "allOf": [
          {
            "properties": {
              "avatar_url": {
                "description": "The avatar URL of the user",
                "type": "string"
              },
              "can_change_password": {
                "description": "User is required to send an old password in order to change the password.",
                "type": "boolean"
              },
              "display_name": {
                "description": "The full name of the user. Might for example be first and last name",
                "type": "string"
              },
              "email": {
                "description": "The email address of the user",
                "type": "string"
              },
              "id": {
                "description": "The unique id (UUID) of the user",
                "format": "uuid",
                "type": "string"
              },
              "name": {
                "description": "The unique name that is used to identify the user.",
                "type": "string"
              },
              "origin": {
                "description": "The creation origin of this user",
                "enum": [
                  "appcenter",
                  "hockeyapp",
                  "codepush"
                ],
                "type": "string"
              },
              "permissions": {
                "description": "The permissions the user has for the app",
                "items": {
                  "enum": [
                    "manager",
                    "developer",
                    "viewer",
                    "tester"
                  ],
                  "type": "string"
                },
                "type": "array"
              }
            },
            "required": [
              "id",
              "display_name",
              "email",
              "name",
              "origin"
            ],
            "type": "object"
          },
          {
            "properties": {
              "admin_role": {
                "description": "The new admin_role",
                "enum": [
                  "superAdmin",
                  "admin",
                  "devOps",
                  "customerSupport",
                  "notAdmin"
                ],
                "type": "string"
              },
              "feature_flags": {
                "description": "The feature flags that are enabled for this app",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "settings": {
                "description": "The user's settings",
                "properties": {
                  "marketing_opt_in": {
                    "description": "The marketing opt-in setting",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        ]
      },
      "UserProfileResponseManagement": {
        "allOf": [
          {
            "allOf": [
              {
                "properties": {
                  "avatar_url": {
                    "description": "The avatar URL of the user",
                    "type": "string"
                  },
                  "can_change_password": {
                    "description": "User is required to send an old password in order to change the password.",
                    "type": "boolean"
                  },
                  "display_name": {
                    "description": "The full name of the user. Might for example be first and last name",
                    "type": "string"
                  },
                  "email": {
                    "description": "The email address of the user",
                    "type": "string"
                  },
                  "id": {
                    "description": "The unique id (UUID) of the user",
                    "format": "uuid",
                    "type": "string"
                  },
                  "name": {
                    "description": "The unique name that is used to identify the user.",
                    "type": "string"
                  },
                  "origin": {
                    "description": "The creation origin of this user",
                    "enum": [
                      "appcenter",
                      "hockeyapp",
                      "codepush"
                    ],
                    "type": "string"
                  },
                  "permissions": {
                    "description": "The permissions the user has for the app",
                    "items": {
                      "enum": [
                        "manager",
                        "developer",
                        "viewer",
                        "tester"
                      ],
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "id",
                  "display_name",
                  "email",
                  "name",
                  "origin"
                ],
                "type": "object"
              },
              {
                "properties": {
                  "admin_role": {
                    "description": "The new admin_role",
                    "enum": [
                      "superAdmin",
                      "admin",
                      "devOps",
                      "customerSupport",
                      "notAdmin"
                    ],
                    "type": "string"
                  },
                  "feature_flags": {
                    "description": "The feature flags that are enabled for this app",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "settings": {
                    "description": "The user's settings",
                    "properties": {
                      "marketing_opt_in": {
                        "description": "The marketing opt-in setting",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          },
          {
            "properties": {
              "identity_providers": {
                "description": "The identity providers associated with the user's account",
                "items": {
                  "properties": {
                    "origin": {
                      "description": "Whether the identity provider originated in HockeyApp or App Center",
                      "type": "string"
                    },
                    "provider_name": {
                      "description": "The name of the identity provider type",
                      "enum": [
                        "github",
                        "aad",
                        "facebook",
                        "google"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "updated_at": {
                "description": "The date when the app was last updated",
                "type": "string"
              },
              "verified": {
                "description": "A boolean flag that indicates if the user is already verified",
                "type": "boolean"
              }
            },
            "type": "object"
          }
        ]
      },
      "UserProfileResponsev2": {
        "properties": {
          "admin_role": {
            "description": "The new admin_role",
            "enum": [
              "superAdmin",
              "admin",
              "devOps",
              "customerSupport",
              "notAdmin"
            ],
            "type": "string"
          },
          "avatar_url": {
            "description": "The avatar URL of the user",
            "type": "string"
          },
          "can_change_password": {
            "description": "User is required to send an old password in order to change the password.",
            "type": "boolean"
          },
          "created_at": {
            "description": "The created date of the user",
            "type": "string"
          },
          "display_name": {
            "description": "The full name of the user. Might for example be first and last name",
            "type": "string"
          },
          "email": {
            "description": "The email address of the user",
            "type": "string"
          },
          "feature_flags": {
            "description": "The feature flags that are enabled for this user",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "description": "The unique id (UUID) of the user",
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "description": "The unique name that is used to identify the user.",
            "type": "string"
          },
          "next_nps_survey_date": {
            "description": "The date in the future when the user should be checked again for NPS eligibility",
            "type": "string"
          },
          "origin": {
            "description": "The creation origin of this user",
            "enum": [
              "appcenter",
              "hockeyapp",
              "codepush"
            ],
            "type": "string"
          },
          "session_hash": {
            "description": "The session hash of the user",
            "type": "string"
          },
          "settings": {
            "description": "The user's settings",
            "type": "object"
          }
        },
        "required": [
          "id",
          "display_name",
          "email",
          "name",
          "origin"
        ],
        "type": "object"
      },
      "UserSettingRequest": {
        "properties": {
          "value": {
            "description": "The setting value",
            "type": "string"
          }
        },
        "required": [
          "value"
        ],
        "type": "object"
      },
      "UserSettingResponse": {
        "description": "A user's setting",
        "properties": {
          "marketing_opt_in": {
            "description": "The marketing opt-in setting",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserUpdateRequest": {
        "properties": {
          "display_name": {
            "description": "The full name of the user. Might for example be first and last name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserUpdateRequestInternal": {
        "properties": {
          "display_name": {
            "description": "The full name of the user. Might for example be first and last name",
            "type": "string"
          },
          "email": {
            "description": "The email address for this user",
            "type": "string"
          },
          "name": {
            "description": "The new, unique name that is used to identify.",
            "type": "string"
          },
          "next_nps_survey_date": {
            "description": "The date in the future when the user should be checked again for NPS eligibility",
            "type": "string"
          }
        },
        "type": "object"
      },
      "VSTSAccount": {
        "description": "VSTS account with projects list and user info",
        "properties": {
          "accountId": {
            "description": "Account id",
            "type": "string"
          },
          "accountName": {
            "description": "Account name",
            "type": "string"
          },
          "accountStatus": {
            "description": "Account status",
            "type": "string"
          },
          "accountType": {
            "description": "Account type",
            "type": "string"
          },
          "accountUri": {
            "description": "Account uri",
            "type": "string"
          },
          "projects": {
            "description": "Account projects",
            "items": {
              "description": "VSTS project",
              "properties": {
                "description": {
                  "description": "Project description",
                  "type": "string"
                },
                "id": {
                  "description": "Project id",
                  "type": "string"
                },
                "name": {
                  "description": "Project name",
                  "type": "string"
                },
                "state": {
                  "description": "Project state",
                  "type": "string"
                },
                "url": {
                  "description": "Project URL",
                  "type": "string"
                },
                "visibility": {
                  "description": "Project visibility",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "user": {
            "description": "VSTS user profile",
            "properties": {
              "displayName": {
                "description": "Profile display name",
                "type": "string"
              },
              "emailAddress": {
                "description": "Profile email",
                "type": "string"
              },
              "id": {
                "description": "Profile id",
                "type": "string"
              },
              "publicAlias": {
                "description": "Profile alias",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "VSTSAccounts": {
        "description": "A list of VSTS accounts with projects",
        "items": {
          "description": "VSTS account with projects list and user info",
          "properties": {
            "accountId": {
              "description": "Account id",
              "type": "string"
            },
            "accountName": {
              "description": "Account name",
              "type": "string"
            },
            "accountStatus": {
              "description": "Account status",
              "type": "string"
            },
            "accountType": {
              "description": "Account type",
              "type": "string"
            },
            "accountUri": {
              "description": "Account uri",
              "type": "string"
            },
            "projects": {
              "description": "Account projects",
              "items": {
                "description": "VSTS project",
                "properties": {
                  "description": {
                    "description": "Project description",
                    "type": "string"
                  },
                  "id": {
                    "description": "Project id",
                    "type": "string"
                  },
                  "name": {
                    "description": "Project name",
                    "type": "string"
                  },
                  "state": {
                    "description": "Project state",
                    "type": "string"
                  },
                  "url": {
                    "description": "Project URL",
                    "type": "string"
                  },
                  "visibility": {
                    "description": "Project visibility",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "user": {
              "description": "VSTS user profile",
              "properties": {
                "displayName": {
                  "description": "Profile display name",
                  "type": "string"
                },
                "emailAddress": {
                  "description": "Profile email",
                  "type": "string"
                },
                "id": {
                  "description": "Profile id",
                  "type": "string"
                },
                "publicAlias": {
                  "description": "Profile alias",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "type": "array"
      },
      "VSTSProfile": {
        "description": "VSTS user profile",
        "properties": {
          "displayName": {
            "description": "Profile display name",
            "type": "string"
          },
          "emailAddress": {
            "description": "Profile email",
            "type": "string"
          },
          "id": {
            "description": "Profile id",
            "type": "string"
          },
          "publicAlias": {
            "description": "Profile alias",
            "type": "string"
          }
        },
        "type": "object"
      },
      "VSTSProject": {
        "description": "VSTS project",
        "properties": {
          "description": {
            "description": "Project description",
            "type": "string"
          },
          "id": {
            "description": "Project id",
            "type": "string"
          },
          "name": {
            "description": "Project name",
            "type": "string"
          },
          "state": {
            "description": "Project state",
            "type": "string"
          },
          "url": {
            "description": "Project URL",
            "type": "string"
          },
          "visibility": {
            "description": "Project visibility",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ValidatedApiTokenResponse": {
        "properties": {
          "claims": {
            "description": "Collection of attributes that describe the principal of the specified API Token",
            "items": {
              "properties": {
                "claim_type": {
                  "enum": [
                    "user_email",
                    "user_origin",
                    "app_owner_name",
                    "app_name",
                    "app_origin",
                    "app_os",
                    "app_platform",
                    "app_secret"
                  ],
                  "type": "string"
                },
                "claim_value": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "principal_id": {
            "description": "The ID of the owner of the API Token (user_id or app_id)",
            "format": "uuid",
            "type": "string"
          },
          "principal_type": {
            "description": "Indicates the type of the principal (app or user)",
            "enum": [
              "app",
              "user"
            ],
            "type": "string"
          },
          "token_id": {
            "description": "The token's unique id (UUID)",
            "format": "uuid",
            "type": "string"
          },
          "token_scope": {
            "description": "The token's scope. A list of allowed roles.",
            "items": {
              "enum": [
                "all",
                "in_app_update",
                "viewer"
              ],
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "token_id",
          "token_scope",
          "principal_id",
          "principal_type",
          "claims"
        ],
        "type": "object"
      },
      "ValidationErrorResponse": {
        "properties": {
          "code": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "code",
          "message"
        ],
        "type": "object"
      },
      "ValidationResponse": {
        "description": "The response which contains the validation data that the connection is valid.",
        "properties": {
          "app_id": {
            "description": "app id",
            "type": "string"
          },
          "status": {
            "description": "Status Data from store",
            "properties": {
              "status": {
                "description": "status from store",
                "type": "string"
              },
              "storetype": {
                "description": "store type",
                "type": "string"
              },
              "track": {
                "description": "track information from store",
                "type": "string"
              },
              "version": {
                "description": "version of the app from store",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "Version": {
        "properties": {
          "count": {
            "description": "Version count.",
            "format": "int64",
            "type": "integer"
          },
          "previous_count": {
            "description": "The count of previous time range of the version.",
            "format": "int64",
            "type": "integer"
          },
          "version": {
            "description": "Version.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Version_Diagnostics": {
        "properties": {
          "count": {
            "description": "version count",
            "format": "int64",
            "type": "integer"
          },
          "previous_count": {
            "description": "the count of previous time range of the version",
            "format": "int64",
            "type": "integer"
          },
          "version": {
            "description": "version",
            "type": "string"
          }
        },
        "type": "object"
      },
      "VersionedBillingPlan": {
        "description": "Billing Plan with a version",
        "properties": {
          "document": {
            "description": "Billing Plan",
            "properties": {
              "attributes": {
                "additionalProperties": {
                  "type": "object"
                },
                "description": "Collection of attribute values.",
                "type": "object"
              },
              "id": {
                "description": "The Billing Plan ID",
                "type": "string"
              },
              "limits": {
                "additionalProperties": {
                  "type": "number"
                },
                "description": "A collection of named numeric values",
                "type": "object"
              },
              "parentId": {
                "type": "string"
              },
              "paymentSource": {
                "description": "Service that receives payments for this billing plan.",
                "enum": [
                  "None",
                  "AppCenter",
                  "GitHub",
                  "Xtc"
                ],
                "type": "string"
              },
              "price": {
                "description": "Price of the Billing Plan",
                "type": "number"
              },
              "service": {
                "description": "Name of the service that the plan applies to.",
                "enum": [
                  "Build",
                  "Test"
                ],
                "type": "string"
              },
              "version": {
                "description": "Version of the Billing Plan schema",
                "type": "string"
              }
            },
            "type": "object"
          },
          "etag": {
            "description": "The version of the object",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Versions": {
        "properties": {
          "total": {
            "description": "The total count of versions.",
            "format": "int64",
            "type": "integer"
          },
          "versions": {
            "description": "List of version count.",
            "items": {
              "properties": {
                "count": {
                  "description": "Version count.",
                  "format": "int64",
                  "type": "integer"
                },
                "previous_count": {
                  "description": "The count of previous time range of the version.",
                  "format": "int64",
                  "type": "integer"
                },
                "version": {
                  "description": "Version.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Versions_Diagnostics": {
        "properties": {
          "total": {
            "description": "the total count of versions",
            "format": "int64",
            "type": "integer"
          },
          "versions": {
            "description": "list of version count",
            "items": {
              "properties": {
                "count": {
                  "description": "version count",
                  "format": "int64",
                  "type": "integer"
                },
                "previous_count": {
                  "description": "the count of previous time range of the version",
                  "format": "int64",
                  "type": "integer"
                },
                "version": {
                  "description": "version",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "WebSocketContainer": {
        "description": "A websocket reference",
        "properties": {
          "url": {
            "description": "WebSocket URL",
            "type": "string"
          }
        },
        "required": [
          "url"
        ],
        "type": "object"
      },
      "XamarinBranchConfigurationProperties": {
        "description": "Build configuration for Xamarin projects",
        "properties": {
          "args": {
            "type": "string"
          },
          "configuration": {
            "type": "string"
          },
          "isSimBuild": {
            "type": "boolean"
          },
          "monoVersion": {
            "type": "string"
          },
          "p12File": {
            "type": "string"
          },
          "p12Pwd": {
            "type": "string"
          },
          "provProfile": {
            "type": "string"
          },
          "sdkBundle": {
            "type": "string"
          },
          "slnPath": {
            "type": "string"
          },
          "symlink": {
            "description": "Symlink of the SDK Bundle and Mono installation.\nThe build will use the associated Mono bundled with related Xamarin SDK. If both symlink and monoVersion or sdkBundle are passed, the symlink is taking precedence. If non-existing symlink is passed, the current stable Mono version will be configured for building.\n",
            "type": "string"
          }
        },
        "type": "object"
      },
      "XamarinSDKBundle": {
        "description": "The Xamarin SDK bundle",
        "properties": {
          "current": {
            "description": "If the SDK is latest stable",
            "type": "boolean"
          },
          "monoVersion": {
            "description": "The Mono version",
            "type": "string"
          },
          "sdkBundle": {
            "description": "The Xamarin SDK version",
            "type": "string"
          },
          "stable": {
            "description": "If the SDK is stable",
            "type": "boolean"
          },
          "xcodeVersions": {
            "description": "Specific for iOS SDK. A list of Xcode versions supported by current SDK version",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "XamarinSDKBundles": {
        "description": "A list of Xamarin SDK bundles",
        "items": {
          "description": "The Xamarin SDK bundle",
          "properties": {
            "current": {
              "description": "If the SDK is latest stable",
              "type": "boolean"
            },
            "monoVersion": {
              "description": "The Mono version",
              "type": "string"
            },
            "sdkBundle": {
              "description": "The Xamarin SDK version",
              "type": "string"
            },
            "stable": {
              "description": "If the SDK is stable",
              "type": "boolean"
            },
            "xcodeVersions": {
              "description": "Specific for iOS SDK. A list of Xcode versions supported by current SDK version",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "type": "array"
      },
      "XamarinSolution": {
        "properties": {
          "configurations": {
            "description": "Solution configurations",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "defaultConfiguration": {
            "description": "Solution default configuration",
            "type": "string"
          },
          "path": {
            "description": "Path to solution",
            "type": "string"
          }
        },
        "required": [
          "path",
          "configurations"
        ],
        "type": "object"
      },
      "XamarinToolset": {
        "properties": {
          "xamarinSolutions": {
            "description": "Xamarin solutions for the toolset",
            "items": {
              "properties": {
                "configurations": {
                  "description": "Solution configurations",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "defaultConfiguration": {
                  "description": "Solution default configuration",
                  "type": "string"
                },
                "path": {
                  "description": "Path to solution",
                  "type": "string"
                }
              },
              "required": [
                "path",
                "configurations"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "xamarinSolutions"
        ],
        "type": "object"
      },
      "XcodeArchiveProject": {
        "properties": {
          "archiveTargetId": {
            "description": "The Id of the target to archive",
            "type": "string"
          },
          "projectName": {
            "description": "The project to archive container name",
            "type": "string"
          },
          "projectPath": {
            "description": "Full path of the target project",
            "type": "string"
          }
        },
        "required": [
          "archiveTargetId",
          "projectName"
        ],
        "type": "object"
      },
      "XcodeBranchConfigurationProperties": {
        "description": "Build configuration when Xcode is part of the build steps",
        "properties": {
          "appExtensionProvisioningProfileFiles": {
            "items": {
              "description": "Provisioning profile fetch and store information",
              "properties": {
                "fileId": {
                  "description": "File id from secure file storage",
                  "type": "string"
                },
                "fileName": {
                  "description": "Name of uploaded provisioning profile",
                  "type": "string"
                },
                "targetBundleIdentifier": {
                  "description": "Target the provisioning profile is used to sign",
                  "type": "string"
                },
                "uploadId": {
                  "description": "Upload id to App Center File Upload Store",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "archiveConfiguration": {
            "description": "The build configuration of the target to archive",
            "type": "string"
          },
          "automaticSigning": {
            "type": "boolean"
          },
          "cartfilePath": {
            "description": "Path to Carthage file, if present",
            "type": "string"
          },
          "certificateEncoded": {
            "type": "string"
          },
          "certificateFileId": {
            "type": "string"
          },
          "certificateFilename": {
            "type": "string"
          },
          "certificatePassword": {
            "type": "string"
          },
          "certificateUploadId": {
            "type": "string"
          },
          "forceLegacyBuildSystem": {
            "description": "Setting this to true forces the build to use Xcode legacy build system. Otherwise, the setting from workspace settings is used.\nBy default new build system is used if workspace setting is not committed to the repository. Only used for iOS React Native app, with Xcode 10.\n",
            "type": "boolean"
          },
          "podfilePath": {
            "description": "Path to CococaPods file, if present",
            "type": "string"
          },
          "projectOrWorkspacePath": {
            "description": "Xcode project/workspace path",
            "type": "string"
          },
          "provisioningProfileEncoded": {
            "type": "string"
          },
          "provisioningProfileFileId": {
            "type": "string"
          },
          "provisioningProfileFilename": {
            "type": "string"
          },
          "provisioningProfileUploadId": {
            "type": "string"
          },
          "scheme": {
            "type": "string"
          },
          "targetToArchive": {
            "description": "The target id of the selected scheme to archive",
            "type": "string"
          },
          "teamId": {
            "type": "string"
          },
          "xcodeProjectSha": {
            "description": "The selected pbxproject hash to the repositroy",
            "type": "string"
          },
          "xcodeVersion": {
            "description": "Xcode version used to build. Available versions can be found in \"/xcode_versions\" API. Default is latest stable version, at the time when the configuration is set.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "XcodeScheme": {
        "properties": {
          "archiveConfiguration": {
            "description": "Build configuration set in Archive action",
            "type": "string"
          },
          "archiveProject": {
            "properties": {
              "archiveTargetId": {
                "description": "The Id of the target to archive",
                "type": "string"
              },
              "projectName": {
                "description": "The project to archive container name",
                "type": "string"
              },
              "projectPath": {
                "description": "Full path of the target project",
                "type": "string"
              }
            },
            "required": [
              "archiveTargetId",
              "projectName"
            ],
            "type": "object"
          },
          "hasTestAction": {
            "description": "Does scheme have a test action?",
            "type": "boolean"
          },
          "name": {
            "description": "Scheme name",
            "type": "string"
          }
        },
        "required": [
          "name",
          "hasTestAction"
        ],
        "type": "object"
      },
      "XcodeSchemeContainer": {
        "properties": {
          "appExtensionTargets": {
            "description": "Information regarding project app extensions, if present",
            "items": {
              "description": "App extension information",
              "properties": {
                "name": {
                  "description": "App extension name",
                  "type": "string"
                },
                "targetBundleIdentifier": {
                  "description": "App extension bundle identifier",
                  "type": "string"
                }
              },
              "required": [
                "name",
                "targetBundleIdentifier"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "cartfilePath": {
            "description": "Path to Carthage file, if present",
            "type": "string"
          },
          "path": {
            "description": "Path to project",
            "type": "string"
          },
          "podfilePath": {
            "description": "Path to CocoaPods file, if present",
            "type": "string"
          },
          "sharedSchemes": {
            "description": "Project schemes",
            "items": {
              "properties": {
                "archiveConfiguration": {
                  "description": "Build configuration set in Archive action",
                  "type": "string"
                },
                "archiveProject": {
                  "properties": {
                    "archiveTargetId": {
                      "description": "The Id of the target to archive",
                      "type": "string"
                    },
                    "projectName": {
                      "description": "The project to archive container name",
                      "type": "string"
                    },
                    "projectPath": {
                      "description": "Full path of the target project",
                      "type": "string"
                    }
                  },
                  "required": [
                    "archiveTargetId",
                    "projectName"
                  ],
                  "type": "object"
                },
                "hasTestAction": {
                  "description": "Does scheme have a test action?",
                  "type": "boolean"
                },
                "name": {
                  "description": "Scheme name",
                  "type": "string"
                }
              },
              "required": [
                "name",
                "hasTestAction"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "workspaceProjectPaths": {
            "description": "Related projects paths for xcworkspace",
            "type": "string"
          },
          "xcodeProjectSha": {
            "description": "repo object Id of the pbxproject",
            "type": "string"
          }
        },
        "required": [
          "path",
          "sharedSchemes"
        ],
        "type": "object"
      },
      "XcodeToolset": {
        "properties": {
          "xcodeSchemeContainers": {
            "description": "The Xcode scheme containers",
            "items": {
              "properties": {
                "appExtensionTargets": {
                  "description": "Information regarding project app extensions, if present",
                  "items": {
                    "description": "App extension information",
                    "properties": {
                      "name": {
                        "description": "App extension name",
                        "type": "string"
                      },
                      "targetBundleIdentifier": {
                        "description": "App extension bundle identifier",
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "targetBundleIdentifier"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "cartfilePath": {
                  "description": "Path to Carthage file, if present",
                  "type": "string"
                },
                "path": {
                  "description": "Path to project",
                  "type": "string"
                },
                "podfilePath": {
                  "description": "Path to CocoaPods file, if present",
                  "type": "string"
                },
                "sharedSchemes": {
                  "description": "Project schemes",
                  "items": {
                    "properties": {
                      "archiveConfiguration": {
                        "description": "Build configuration set in Archive action",
                        "type": "string"
                      },
                      "archiveProject": {
                        "properties": {
                          "archiveTargetId": {
                            "description": "The Id of the target to archive",
                            "type": "string"
                          },
                          "projectName": {
                            "description": "The project to archive container name",
                            "type": "string"
                          },
                          "projectPath": {
                            "description": "Full path of the target project",
                            "type": "string"
                          }
                        },
                        "required": [
                          "archiveTargetId",
                          "projectName"
                        ],
                        "type": "object"
                      },
                      "hasTestAction": {
                        "description": "Does scheme have a test action?",
                        "type": "boolean"
                      },
                      "name": {
                        "description": "Scheme name",
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "hasTestAction"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "workspaceProjectPaths": {
                  "description": "Related projects paths for xcworkspace",
                  "type": "string"
                },
                "xcodeProjectSha": {
                  "description": "repo object Id of the pbxproject",
                  "type": "string"
                }
              },
              "required": [
                "path",
                "sharedSchemes"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "xcodeSchemeContainers"
        ],
        "type": "object"
      },
      "XcodeVersion": {
        "description": "The Xcode version",
        "properties": {
          "current": {
            "description": "If the Xcode is latest stable",
            "type": "boolean"
          },
          "name": {
            "description": "The version name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "XcodeVersions": {
        "description": "A list of Xcode versions",
        "items": {
          "description": "The Xcode version",
          "properties": {
            "current": {
              "description": "If the Xcode is latest stable",
              "type": "boolean"
            },
            "name": {
              "description": "The version name",
              "type": "string"
            }
          },
          "type": "object"
        },
        "type": "array"
      },
      "export_entity": {
        "enum": [
          "crashes",
          "errors",
          "attachments",
          "no_logs"
        ],
        "type": "string",
        "x-ms-enum": {
          "modelAsString": false,
          "name": "ExportEntity"
        }
      },
      "v2FailureResponse": {
        "description": "failure response object",
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "code",
          "message"
        ],
        "type": "object"
      },
      "v2MissingSymbol": {
        "description": "missing symbol",
        "properties": {
          "name": {
            "description": "symbol name",
            "type": "string"
          },
          "platform": {
            "description": "symbol plarform",
            "type": "string"
          },
          "status": {
            "description": "symbol status",
            "enum": [
              "missing",
              "ignored",
              "available"
            ],
            "type": "string"
          },
          "symbol_id": {
            "description": "symbol id",
            "type": "string"
          }
        },
        "required": [
          "symbol_id",
          "name",
          "status"
        ],
        "type": "object"
      },
      "v2MissingSymbolCrashGroup": {
        "description": "missing symbol crash group object",
        "properties": {
          "app_build": {
            "description": "application build",
            "type": "string"
          },
          "app_id": {
            "description": "application id",
            "type": "string"
          },
          "app_ver": {
            "description": "application version",
            "type": "string"
          },
          "crash_count": {
            "description": "number of crashes that belong to this group",
            "type": "integer"
          },
          "error_count": {
            "description": "number of errors that belong to this group",
            "type": "integer"
          },
          "last_modified": {
            "description": "last update date for the group",
            "format": "date-time",
            "type": "string"
          },
          "missing_symbols": {
            "description": "list of missing symbols",
            "items": {
              "description": "missing symbol",
              "properties": {
                "name": {
                  "description": "symbol name",
                  "type": "string"
                },
                "platform": {
                  "description": "symbol plarform",
                  "type": "string"
                },
                "status": {
                  "description": "symbol status",
                  "enum": [
                    "missing",
                    "ignored",
                    "available"
                  ],
                  "type": "string"
                },
                "symbol_id": {
                  "description": "symbol id",
                  "type": "string"
                }
              },
              "required": [
                "symbol_id",
                "name",
                "status"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "status": {
            "description": "group status",
            "enum": [
              "active",
              "pending",
              "closed"
            ],
            "type": "string"
          },
          "symbol_group_id": {
            "description": "id of the symbol group",
            "type": "string"
          }
        },
        "required": [
          "symbol_group_id",
          "app_id",
          "app_ver",
          "app_build",
          "last_modified",
          "missing_symbols",
          "status"
        ],
        "type": "object"
      },
      "v2MissingSymbolCrashGroupStatusEnum": {
        "description": "enumeration of missing symbol grash group statuses",
        "enum": [
          "active",
          "pending",
          "closed"
        ]
      },
      "v2MissingSymbolCrashGroups": {
        "description": "A list of crash groups formed by missing symbols combination",
        "items": {
          "description": "missing symbol crash group object",
          "properties": {
            "app_build": {
              "description": "application build",
              "type": "string"
            },
            "app_id": {
              "description": "application id",
              "type": "string"
            },
            "app_ver": {
              "description": "application version",
              "type": "string"
            },
            "crash_count": {
              "description": "number of crashes that belong to this group",
              "type": "integer"
            },
            "error_count": {
              "description": "number of errors that belong to this group",
              "type": "integer"
            },
            "last_modified": {
              "description": "last update date for the group",
              "format": "date-time",
              "type": "string"
            },
            "missing_symbols": {
              "description": "list of missing symbols",
              "items": {
                "description": "missing symbol",
                "properties": {
                  "name": {
                    "description": "symbol name",
                    "type": "string"
                  },
                  "platform": {
                    "description": "symbol plarform",
                    "type": "string"
                  },
                  "status": {
                    "description": "symbol status",
                    "enum": [
                      "missing",
                      "ignored",
                      "available"
                    ],
                    "type": "string"
                  },
                  "symbol_id": {
                    "description": "symbol id",
                    "type": "string"
                  }
                },
                "required": [
                  "symbol_id",
                  "name",
                  "status"
                ],
                "type": "object"
              },
              "type": "array"
            },
            "status": {
              "description": "group status",
              "enum": [
                "active",
                "pending",
                "closed"
              ],
              "type": "string"
            },
            "symbol_group_id": {
              "description": "id of the symbol group",
              "type": "string"
            }
          },
          "required": [
            "symbol_group_id",
            "app_id",
            "app_ver",
            "app_build",
            "last_modified",
            "missing_symbols",
            "status"
          ],
          "type": "object"
        },
        "type": "array"
      },
      "v2MissingSymbolCrashGroupsInfoResponse": {
        "description": "missing symbol groups",
        "properties": {
          "total_crash_count": {
            "description": "total number of crashes for all missing symbol groups",
            "type": "integer"
          }
        },
        "required": [
          "total_crash_count"
        ],
        "type": "object"
      },
      "v2MissingSymbolCrashGroupsResponse": {
        "description": "grouped by missing symbols crashes response object",
        "properties": {
          "groups": {
            "description": "list of crash groups formed by missing symbols combination",
            "items": {
              "description": "missing symbol crash group object",
              "properties": {
                "app_build": {
                  "description": "application build",
                  "type": "string"
                },
                "app_id": {
                  "description": "application id",
                  "type": "string"
                },
                "app_ver": {
                  "description": "application version",
                  "type": "string"
                },
                "crash_count": {
                  "description": "number of crashes that belong to this group",
                  "type": "integer"
                },
                "error_count": {
                  "description": "number of errors that belong to this group",
                  "type": "integer"
                },
                "last_modified": {
                  "description": "last update date for the group",
                  "format": "date-time",
                  "type": "string"
                },
                "missing_symbols": {
                  "description": "list of missing symbols",
                  "items": {
                    "description": "missing symbol",
                    "properties": {
                      "name": {
                        "description": "symbol name",
                        "type": "string"
                      },
                      "platform": {
                        "description": "symbol plarform",
                        "type": "string"
                      },
                      "status": {
                        "description": "symbol status",
                        "enum": [
                          "missing",
                          "ignored",
                          "available"
                        ],
                        "type": "string"
                      },
                      "symbol_id": {
                        "description": "symbol id",
                        "type": "string"
                      }
                    },
                    "required": [
                      "symbol_id",
                      "name",
                      "status"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "status": {
                  "description": "group status",
                  "enum": [
                    "active",
                    "pending",
                    "closed"
                  ],
                  "type": "string"
                },
                "symbol_group_id": {
                  "description": "id of the symbol group",
                  "type": "string"
                }
              },
              "required": [
                "symbol_group_id",
                "app_id",
                "app_ver",
                "app_build",
                "last_modified",
                "missing_symbols",
                "status"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "total_crash_count": {
            "description": "total number of crashes for all the groups",
            "type": "integer"
          }
        },
        "required": [
          "total_crash_count",
          "groups"
        ],
        "type": "object"
      },
      "v2MissingSymbols": {
        "description": "A list of missing symbols",
        "items": {
          "description": "missing symbol",
          "properties": {
            "name": {
              "description": "symbol name",
              "type": "string"
            },
            "platform": {
              "description": "symbol plarform",
              "type": "string"
            },
            "status": {
              "description": "symbol status",
              "enum": [
                "missing",
                "ignored",
                "available"
              ],
              "type": "string"
            },
            "symbol_id": {
              "description": "symbol id",
              "type": "string"
            }
          },
          "required": [
            "symbol_id",
            "name",
            "status"
          ],
          "type": "object"
        },
        "type": "array"
      },
      "v2StatusResponse": {
        "description": "status response object",
        "properties": {
          "status": {
            "type": "string"
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "v2SymbolStatusEnum": {
        "description": "enumeration of symbol statuses",
        "enum": [
          "missing",
          "ignored",
          "available"
        ]
      },
      "v2SymbolUpdateInfo": {
        "description": "symbol update message",
        "properties": {
          "app_id": {
            "description": "application id",
            "type": "string"
          },
          "status": {
            "description": "symbol upload status",
            "enum": [
              "missing",
              "ignored",
              "available"
            ],
            "type": "string"
          },
          "symbol_id": {
            "description": "UUID of the symbol",
            "type": "string"
          }
        },
        "required": [
          "symbol_id",
          "app_id",
          "status"
        ],
        "type": "object"
      },
      "v2SymbolUpdateInfoArray": {
        "description": "symbols update message",
        "items": {
          "description": "symbol update message",
          "properties": {
            "app_id": {
              "description": "application id",
              "type": "string"
            },
            "status": {
              "description": "symbol upload status",
              "enum": [
                "missing",
                "ignored",
                "available"
              ],
              "type": "string"
            },
            "symbol_id": {
              "description": "UUID of the symbol",
              "type": "string"
            }
          },
          "required": [
            "symbol_id",
            "app_id",
            "status"
          ],
          "type": "object"
        },
        "type": "array"
      }
    },
    "securitySchemes": {
      "APIToken": {
        "in": "header",
        "name": "X-API-Token",
        "type": "apiKey"
      },
      "Basic": {
        "description": "HTTP Basic Authentication",
        "scheme": "basic",
        "type": "http"
      }
    }
  },
  "tags": [
    {
      "name": "account"
    },
    {
      "name": "alerting"
    },
    {
      "name": "analytics"
    },
    {
      "name": "billing"
    },
    {
      "name": "build"
    },
    {
      "name": "codepush"
    },
    {
      "name": "crash"
    },
    {
      "name": "distribute"
    },
    {
      "name": "errors"
    },
    {
      "name": "export"
    },
    {
      "name": "gdpr"
    },
    {
      "name": "test"
    }
  ]
}