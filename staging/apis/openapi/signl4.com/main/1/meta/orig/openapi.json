{
  "openapi": "3.0.1",
  "info": {
    "title": "SIGNL4 API V1",
    "description": "<p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright \u00a9 Derdack GmbH<br></p>",
    "contact": {
      "url": "https://www.signl4.com/feedback-we-love-hear-from-you/"
    },
    "license": {
      "name": "Derdack GmbH",
      "url": "https://www.signl4.com"
    },
    "version": "1",
    "x-jentic-source-url": "https://connect.signl4.com/api/docs/v1/swagger.json"
  },
  "servers": [
    {
      "url": "https://connect.signl4.com/api"
    }
  ],
  "paths": {
    "/alerts": {
      "post": {
        "tags": [
          "Alerts"
        ],
        "summary": "Trigger Alert",
        "description": "Triggers a new alert for your team. All team members on duty will receive alert notifications.",
        "requestBody": {
          "description": "Alert to raise.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/RaiseAlertInfo"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RaiseAlertInfo"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RaiseAlertInfo"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RaiseAlertInfo"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AlertInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertInfo"
                }
              }
            }
          },
          "400": {
            "description": "Required information could not be found in the request/claims.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Required entities could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal general error occurred.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/alerts/{alertId}": {
      "get": {
        "tags": [
          "Alerts"
        ],
        "summary": "Get Alert",
        "description": "Gets an alert by id.",
        "parameters": [
          {
            "name": "alertId",
            "in": "path",
            "description": "Id of the requested Alert.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AlertInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertInfo"
                }
              }
            }
          },
          "400": {
            "description": "Required information could not be found in the request/claims.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Required entities could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal general error occurred.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/alerts/{alertId}/acknowledge": {
      "post": {
        "tags": [
          "Alerts"
        ],
        "summary": "Acknowledge an alert",
        "parameters": [
          {
            "name": "alertId",
            "in": "path",
            "description": "Id to acknowledge an alert.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeAlertStatusInfo"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeAlertStatusInfo"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeAlertStatusInfo"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeAlertStatusInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AlertInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertInfo"
                }
              }
            }
          },
          "400": {
            "description": "Required information could not be found in the request/claims.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "No alert with id was found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "409": {
            "description": "Alert can't be acknowledged because it is against the defined alert lifecycle.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal general error occurred.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/alerts/{alertId}/annotate": {
      "post": {
        "tags": [
          "Alerts"
        ],
        "summary": "Annotate Alert",
        "description": "Annotates an alert by given Annotation Info.",
        "parameters": [
          {
            "name": "alertId",
            "in": "path",
            "description": "Id of the alert to annotate.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Annotation Information.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AlertAnnotationInfo"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AlertAnnotationInfo"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AlertAnnotationInfo"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AlertAnnotationInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AlertAnnotationInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertAnnotationInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertAnnotationInfo"
                }
              }
            }
          },
          "400": {
            "description": "Required information could not be found in the request/claims.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Required entities could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal general error occurred.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/alerts/{alertId}/annotations": {
      "get": {
        "tags": [
          "Alerts"
        ],
        "summary": "Get annotations of an alert",
        "description": "Get annotations of an alert by id.",
        "parameters": [
          {
            "name": "alertId",
            "in": "path",
            "description": "Id of the requested Alert.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlertAnnotationInfo"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlertAnnotationInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlertAnnotationInfo"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Required information could not be found in the request/claims.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "204": {
            "description": "No annotations were found for the alert."
          }
        }
      }
    },
    "/alerts/{alertId}/attachments": {
      "get": {
        "tags": [
          "Alerts"
        ],
        "summary": "Get attachments of an alert",
        "description": "Get attachments of an alert by id.",
        "parameters": [
          {
            "name": "alertId",
            "in": "path",
            "description": "Id of the requested Alert.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlertAttachmentInfo"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlertAttachmentInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlertAttachmentInfo"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Required information could not be found in the request/claims.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Required entities could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal general error occurred.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/alerts/{alertId}/attachments/{attachmentId}": {
      "get": {
        "tags": [
          "Alerts"
        ],
        "summary": "Gets a specified attachment of a specified alert.",
        "parameters": [
          {
            "name": "alertId",
            "in": "path",
            "description": "Id of the alert that contains the wanted attachment.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attachmentId",
            "in": "path",
            "description": "Id of the attachment, that you want to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "width",
            "in": "query",
            "description": "Optional parameter defining the wanted width of the picture that is retrieved.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "height",
            "in": "query",
            "description": "Optional parameter defining the wanted height of the picture that is retrieved.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "scale",
            "in": "query",
            "description": "Optional parameter defining whether it's wanted to scale the retrieved image. Default is set to\r\ntrue.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the attachment image with additional meta information.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "A passed parameter was either empty or invalid.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "The attachment image was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal general error occurred.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "204": {
            "description": "The image of the attachment was not uploaded yet."
          },
          "403": {
            "description": "Authorization failed."
          }
        }
      }
    },
    "/alerts/{alertId}/close": {
      "post": {
        "tags": [
          "Alerts"
        ],
        "summary": "Close an alert",
        "parameters": [
          {
            "name": "alertId",
            "in": "path",
            "description": "Id to acknowledge an alert.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeAlertStatusInfo"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeAlertStatusInfo"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeAlertStatusInfo"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeAlertStatusInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AlertInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertInfo"
                }
              }
            }
          },
          "400": {
            "description": "Required information could not be found in the request/claims.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "No alert with id was found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "409": {
            "description": "Alert can't be closed because it is against the defined alert lifecycle.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal general error occurred.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/alerts/{alertId}/notifications": {
      "get": {
        "tags": [
          "Alerts"
        ],
        "summary": "Get alert notifications",
        "description": "Get notifications of all users by alert id.",
        "parameters": [
          {
            "name": "alertId",
            "in": "path",
            "description": "Id of the requested Alert.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlertNotificationInfo"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlertNotificationInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlertNotificationInfo"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Required information could not be found in the request/claims.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Required entities could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal general error occurred.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/alerts/{alertId}/overview": {
      "get": {
        "tags": [
          "Alerts"
        ],
        "summary": "Get an overview alert.",
        "description": "Get overview alert by id.",
        "parameters": [
          {
            "name": "alertId",
            "in": "path",
            "description": "Id of the requested Alert.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns alert with all information attached.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OverviewAlert"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OverviewAlert"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OverviewAlert"
                }
              }
            }
          },
          "400": {
            "description": "Required information could not be found in the request/claims.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Required entities could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/alerts/{alertId}/undoAcknowledge": {
      "post": {
        "tags": [
          "Alerts"
        ],
        "summary": "Undo the acknowledgement of an alert.",
        "description": "This method tries to undo an alert acknowledgement.",
        "parameters": [
          {
            "name": "alertId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeAlertStatusInfo"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeAlertStatusInfo"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeAlertStatusInfo"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeAlertStatusInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns updated alert.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OverviewAlert"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OverviewAlert"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OverviewAlert"
                }
              }
            }
          },
          "400": {
            "description": "Required information could not be found in the request/claims.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "User is not allowed to undo the acknowledgement.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal general error occurred.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/alerts/{alertId}/undoClose": {
      "post": {
        "tags": [
          "Alerts"
        ],
        "summary": "Undo the closure of an alert.",
        "description": "This method tries to undo an alert close.",
        "parameters": [
          {
            "name": "alertId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeAlertStatusInfo"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeAlertStatusInfo"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeAlertStatusInfo"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeAlertStatusInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OverviewAlert"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OverviewAlert"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OverviewAlert"
                }
              }
            }
          },
          "400": {
            "description": "Required information could not be found in the request/claims.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "User is not allowed to undo the close.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal general error occurred.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/alerts/acknowledgeAll": {
      "post": {
        "tags": [
          "Alerts"
        ],
        "summary": "Confirms all visible alerts",
        "description": "This method confirms all unhandled alerts your team currently has by a specific user.",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "User ID of the user to be used to acknowledge the alarms.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeAlertStatusFilterInfo"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeAlertStatusFilterInfo"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeAlertStatusFilterInfo"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeAlertStatusFilterInfo"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Required information could not be found in the request/claims.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Required entities could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal general error occurred."
          }
        }
      }
    },
    "/alerts/acknowledgeMultiple": {
      "post": {
        "tags": [
          "Alerts"
        ],
        "summary": "Acknowlegde multiple alerts",
        "description": "This method confirms all alerts provided.",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeAlertStatusMultipleInfo"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeAlertStatusMultipleInfo"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeAlertStatusMultipleInfo"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeAlertStatusMultipleInfo"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Required information could not be found in the request/claims.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal general error occurred.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/alerts/closeAll": {
      "post": {
        "tags": [
          "Alerts"
        ],
        "summary": "Close all acknowledged alerts.",
        "description": "This method closes all acknowledged alerts your team currently has.",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "User ID of the user to be used to close the alarms.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeAlertStatusFilterInfo"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeAlertStatusFilterInfo"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeAlertStatusFilterInfo"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeAlertStatusFilterInfo"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Required information could not be found in the request/claims.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Required entities could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal general error occurred.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/alerts/closeMultiple": {
      "post": {
        "tags": [
          "Alerts"
        ],
        "summary": "Close multiple alerts",
        "description": "This method closes all alerts provided.",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeAlertStatusMultipleInfo"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeAlertStatusMultipleInfo"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeAlertStatusMultipleInfo"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeAlertStatusMultipleInfo"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Required information could not be found in the request/claims.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal general error occurred.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/alerts/paged": {
      "post": {
        "tags": [
          "Alerts"
        ],
        "summary": "Gets alerts paged",
        "parameters": [
          {
            "name": "maxResults",
            "in": "query",
            "description": "Defines the limit of retrieved alert details per request. 1 to 100 are allowed per request.\r\nNumber of alerts could be less if filtered but at least 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "User ID of the user you want to get alerts for.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The filter defines which alerts are supposed to be retrieved.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AlertFilterPublic"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AlertFilterPublic"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AlertFilterPublic"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AlertFilterPublic"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a paged result with found alerts and continuation token if more alerts are in the\r\ndatabase.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultsPublicObsolete`1<OverviewAlert>"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultsPublicObsolete`1<OverviewAlert>"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultsPublicObsolete`1<OverviewAlert>"
                }
              }
            }
          },
          "204": {
            "description": "There were no alerts found for the specified filter."
          },
          "400": {
            "description": "Required parameters could not be found in the request/claims.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "Authorization failed",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal general error occurred.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/alerts/report": {
      "get": {
        "tags": [
          "Alerts"
        ],
        "summary": "Get Alert Report",
        "description": "Returns information about the occurred alert volume in different time periods as well as information about the\r\nresponse behaviour (amount of confirmed and unhandled alerts) of your team members.",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "User ID of the user for whom you want a report.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AlertReport"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertReport"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertReport"
                }
              }
            }
          },
          "400": {
            "description": "Required information could not be found in the request/claims.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Required entities could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal general error occurred.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/alerts/undoAcknowledgeMultiple": {
      "post": {
        "tags": [
          "Alerts"
        ],
        "summary": "Queue undo of multiple acknowledgments.",
        "description": "This method tries to undo the acknowledgement of multiple alerts via a queue. The operation is handled in the\r\nbackground.",
        "requestBody": {
          "description": "Configure which user should be undone for which alerts.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeAlertStatusMultipleInfo"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeAlertStatusMultipleInfo"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeAlertStatusMultipleInfo"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeAlertStatusMultipleInfo"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Required information could not be found in the request/claims.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal general error occurred.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/alerts/undoCloseMultiple": {
      "post": {
        "tags": [
          "Alerts"
        ],
        "summary": "Withdraw closure of multiple alerts",
        "description": "This method tries to undo multiple alert closes. The operation is handled in the background.",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeAlertStatusMultipleInfo"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeAlertStatusMultipleInfo"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeAlertStatusMultipleInfo"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeAlertStatusMultipleInfo"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Required information could not be found in the request/claims.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal general error occurred.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/categories/{teamId}": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Get all categories",
        "description": "Sample Request:\r\n            \r\n    GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "ID of the team the categories belong to",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the category infos",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoryInfo"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoryInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoryInfo"
                  }
                }
              }
            }
          },
          "400": {
            "description": "If the input is not valid",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "If you have no permission to access this resource",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "If the resource was not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "If any server side errors occur",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Categories"
        ],
        "summary": "Create a new category",
        "description": "Sample Request:\r\n            \r\n    POST /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7\r\n    {\r\n        \"name\": \"Water\",\r\n        \"imageName\": \"water.svg\",\r\n        \"color\": \"#0000cc\",\r\n        \"keywordMatching\": \"Any\",\r\n        \"keywords\": [\r\n            {\r\n                \"value\": \"H2O\"\r\n            },\r\n            {\r\n                \"value\" : \"Water\"\r\n            }\r\n        ]\r\n    }",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "ID of the team the category belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Category to be created",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryInfo"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryInfo"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryInfo"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryInfo"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the newly created category",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryInfo"
                }
              }
            }
          },
          "400": {
            "description": "If the input is not valid",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "If you have no permission to access this resource",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "If the resource was not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "If any server side errors occur",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/categories/{teamId}/{categoryId}": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Get a specific category",
        "description": "Sample Request:\r\n            \r\n    GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "ID of the team the category belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "categoryId",
            "in": "path",
            "description": "ID of the category to get",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the category details",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryInfo"
                }
              }
            }
          },
          "400": {
            "description": "If the input is not valid",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "If you have no permission to access this resource",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "If the resource was not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "If any server side errors occur",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Categories"
        ],
        "summary": "Update an existing category",
        "description": "Sample Request:\r\n            \r\n    PUT /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e\r\n    {\r\n        \"name\": \"Water-Updated\",\r\n        \"imageName\": \"water.svg\",\r\n        \"color\": \"#0000cc\",\r\n        \"keywordMatching\": \"All\",\r\n        \"keywords\": [\r\n            {\r\n                \"value\": \"H2O\"\r\n            },\r\n            {\r\n                \"value\": \"Water\"\r\n            },\r\n            {\r\n                \"value\": \"Wet\"\r\n            }\r\n        ]\r\n    }",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "ID of the team the category belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Category to be updated",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryUpdateInfo"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryUpdateInfo"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryUpdateInfo"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryUpdateInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated category",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryInfo"
                }
              }
            }
          },
          "400": {
            "description": "If the input is not valid",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "If you have no permission to access this resource",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "If the resource was not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "If any server side errors occur",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Categories"
        ],
        "summary": "Delete an existing category",
        "description": "Sample Request:\r\n            \r\n    DELETE /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "ID of the team the category belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "categoryId",
            "in": "path",
            "description": "ID of the category to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "If the input is not valid",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "If you have no permission to access this resource",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "If the resource was not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "If any server side errors occur",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "200": {
            "description": "If the delete operation was successful"
          }
        }
      }
    },
    "/categories/{teamId}/{categoryId}/metrics": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Get metrics for a specific category",
        "description": "Sample Request:\r\n            \r\n    GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e/metrics",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "ID of the team the category belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "categoryId",
            "in": "path",
            "description": "ID of the category to get",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the category metrics",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryMetrics"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryMetrics"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryMetrics"
                }
              }
            }
          },
          "400": {
            "description": "If the input is not valid",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "If you have no permission to access this resource",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "If the resource was not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "If any server side errors occur",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/categories/{teamId}/{categoryId}/subscriptions": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Get category subscriptions",
        "description": "Sample Request:\r\n            \r\n    GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e/subscriptions\r\n    {\r\n    }",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "ID of the team the category belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "categoryId",
            "in": "path",
            "description": "Category to get subscriptions for",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the category subscriptions",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategorySubscriptionInfo"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategorySubscriptionInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategorySubscriptionInfo"
                  }
                }
              }
            }
          },
          "400": {
            "description": "If the input is not valid",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "If you have no permission to access this resource",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "If any server side errors occur",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "If the resource was not found"
          }
        }
      },
      "post": {
        "tags": [
          "Categories"
        ],
        "summary": "Set category subscriptions",
        "description": "Sample Request:\r\n            \r\n    POST /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e/subscriptions\r\n    {\r\n    }",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "ID of the team the category belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "categoryId",
            "in": "path",
            "description": "Category to be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CategorySubscriptionInfo"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CategorySubscriptionInfo"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CategorySubscriptionInfo"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CategorySubscriptionInfo"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated category subscriptions",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategorySubscriptionInfo"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategorySubscriptionInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategorySubscriptionInfo"
                  }
                }
              }
            }
          },
          "400": {
            "description": "If the input is not valid",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "If you have no permission to access this resource",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "If any server side errors occur",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "If the resource was not found"
          }
        }
      }
    },
    "/categories/{teamId}/metrics": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Get metrics for all categories",
        "description": "Sample Request:\r\n            \r\n    GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/metrics",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "ID of the team the categories belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of category metrics",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoryMetrics"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoryMetrics"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoryMetrics"
                  }
                }
              }
            }
          },
          "400": {
            "description": "If the input is not valid",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "If you have no permission to access this resource",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "If the resource was not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "If any server side errors occur",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/categories/images": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Gets the names of all alert category images.\r\nYou can get the image by going to account.signl4.com/images/alerts/categoryImageName.svg",
        "responses": {
          "200": {
            "description": "Return names of all category images",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "403": {
            "description": "If you have no permission to access this resource",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "No category images found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "If any server side errors occur",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "204": {
            "description": "Request was canceled."
          }
        }
      }
    },
    "/events/{eventId}/overview": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Get overview event",
        "description": "Get overview event by id.",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of event to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns overview event with specific id.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OverviewEvent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OverviewEvent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OverviewEvent"
                }
              }
            }
          },
          "400": {
            "description": "Required parameters could not be found in the request/claims.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Event with specified id could not be found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal general error occurred.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/parameters": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Get event parameters",
        "description": "Get parameters of an event by id.",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "Event Id of the requested Alert.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventParameterInfo"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventParameterInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventParameterInfo"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Required information could not be found in the request/claims.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Required entities could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal general error occurred.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/events/{teamSecret}": {
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Create new event",
        "parameters": [
          {
            "name": "teamSecret",
            "in": "path",
            "description": "Use team id to send an event straight to the team or a secret to use distribution rules.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ExtIdParam",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ExtStatusParam",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "NewStatus",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ResolvedStatus",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "AckStatus",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OverviewEvent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OverviewEvent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OverviewEvent"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/events/paged": {
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Get overview event paged.",
        "description": "Get overview event paged. If there are more results, you also get a continuation token which you can add to\r\nthe event filter.",
        "parameters": [
          {
            "name": "maxResults",
            "in": "query",
            "description": "Defines the limit of retrieved alert details per request. 1 to 100 are allowed per request.\r\nNumber of alerts could be less if filtered but at least 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The filter defines which alerts are supposed to be retrieved.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/EventFilter"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventFilter"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EventFilter"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EventFilter"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns paged result with found events and continuation token, if database holds more events.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultsPublicObsolete`1<OverviewEvent>"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultsPublicObsolete`1<OverviewEvent>"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResultsPublicObsolete`1<OverviewEvent>"
                }
              }
            }
          },
          "400": {
            "description": "Required parameters could not be found in the request/claims.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal general error occurred.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "204": {
            "description": "No event could be found (with passed filter)"
          }
        }
      }
    },
    "/prepaid/{subscriptionId}/prepaidSettings": {
      "put": {
        "tags": [
          "Prepaid"
        ],
        "summary": "Update a subscription's current prepaid settings.",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "ID of the subscription",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Settings object containing the new values.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PrepaidSettingsInfo"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PrepaidSettingsInfo"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PrepaidSettingsInfo"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PrepaidSettingsInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PrepaidSettingsInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrepaidSettingsInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrepaidSettingsInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/prepaid/balance": {
      "get": {
        "tags": [
          "Prepaid"
        ],
        "summary": "Get your subscription's current prepaid balance.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PrepaidBalanceInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrepaidBalanceInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrepaidBalanceInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/prepaid/settings": {
      "get": {
        "tags": [
          "Prepaid"
        ],
        "summary": "Get your subscription's current prepaid settings.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PrepaidSettingsInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrepaidSettingsInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrepaidSettingsInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Prepaid"
        ],
        "summary": "Update your subscription's current prepaid settings.",
        "requestBody": {
          "description": "Settings object containing the new values.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PrepaidSettingsInfo"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PrepaidSettingsInfo"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PrepaidSettingsInfo"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PrepaidSettingsInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PrepaidSettingsInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrepaidSettingsInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrepaidSettingsInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/prepaid/transactions": {
      "get": {
        "tags": [
          "Prepaid"
        ],
        "summary": "Get your subscription's prepaid transactions.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PrepaidTransactionInfo"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PrepaidTransactionInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PrepaidTransactionInfo"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/scripts/instances": {
      "get": {
        "tags": [
          "Scripts"
        ],
        "summary": "Returns all script instances of the SIGNL4 team",
        "description": "Returns all script instances in the subscription.",
        "parameters": [
          {
            "name": "teamId",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "modifiedSince",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScriptInstanceInfo"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScriptInstanceInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScriptInstanceInfo"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Required information could not be found in the request/claims.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Scripts"
        ],
        "summary": "Creates a new script instance in the in the SIGNL4 team.",
        "description": "Creates a new script instance of the script specified in the request body.",
        "requestBody": {
          "description": "Script instance to be created.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ScriptInstanceCreateInfo"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScriptInstanceCreateInfo"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ScriptInstanceCreateInfo"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ScriptInstanceCreateInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Existing script instance was updated as specified in body.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ScriptInstanceDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScriptInstanceDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScriptInstanceDetails"
                }
              }
            }
          },
          "201": {
            "description": "New script instance was updated as specified in body.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ScriptInstanceDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScriptInstanceDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScriptInstanceDetails"
                }
              }
            }
          },
          "400": {
            "description": "Required information could not be found in the request/claims.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Required entities could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "An internal error has occurred during instance creation.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/scripts/instances/{instanceId}": {
      "get": {
        "tags": [
          "Scripts"
        ],
        "summary": "Returns all information about a given script instance which includes its runtime status.",
        "description": "Gets the script instance specified by the passed instance id.",
        "parameters": [
          {
            "name": "instanceId",
            "in": "path",
            "description": "Instance Id of script instance to be returned.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ScriptInstanceDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScriptInstanceDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScriptInstanceDetails"
                }
              }
            }
          },
          "400": {
            "description": "Required information could not be found in the request/claims.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Required entities could not be found in the database or in memory.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Scripts"
        ],
        "summary": "Updates a given script instance, typically used for updating the configuration of a script.",
        "description": "Updates the specified script instance.",
        "parameters": [
          {
            "name": "instanceId",
            "in": "path",
            "description": "InstanceId of the script to be updated.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Script instance to be updated.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ScriptInstanceUpdateInfo"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScriptInstanceUpdateInfo"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ScriptInstanceUpdateInfo"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ScriptInstanceUpdateInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ScriptInstanceDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScriptInstanceDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScriptInstanceDetails"
                }
              }
            }
          },
          "400": {
            "description": "Required information could not be found in the request/claims.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Required entities could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "An internal error has occurred during instance creation.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Scripts"
        ],
        "summary": "Deletes a script instance.",
        "description": "Gets the script instance specified by the passed instance id.",
        "parameters": [
          {
            "name": "instanceId",
            "in": "path",
            "description": "Instance Id of script instance to be returned.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Required information could not be found in the request/claims.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Required entities could not be found in the database or in memory.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/scripts/instances/{instanceId}/data": {
      "put": {
        "tags": [
          "Scripts"
        ],
        "summary": "Updates custom data of a given script instance which includes its display name.",
        "description": "Updates the specified script instance.",
        "parameters": [
          {
            "name": "instanceId",
            "in": "path",
            "description": "InstanceId of the script to be updated.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Script instance to be updated.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ScriptInstanceCustomUserData"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScriptInstanceCustomUserData"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ScriptInstanceCustomUserData"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ScriptInstanceCustomUserData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ScriptInstanceDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScriptInstanceDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScriptInstanceDetails"
                }
              }
            }
          },
          "400": {
            "description": "Required information could not be found in the request/claims.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Required entities could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "An internal error has occurred during instance creation.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/scripts/instances/{instanceId}/disable": {
      "post": {
        "tags": [
          "Scripts"
        ],
        "summary": "Disables a given script instance.",
        "parameters": [
          {
            "name": "instanceId",
            "in": "path",
            "description": "Id of the instance to be disabled.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ScriptInstanceDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScriptInstanceDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScriptInstanceDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/scripts/instances/{instanceId}/enable": {
      "post": {
        "tags": [
          "Scripts"
        ],
        "summary": "Enables a script instance.",
        "parameters": [
          {
            "name": "instanceId",
            "in": "path",
            "description": "Id of the instance to be enabled.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ScriptInstanceDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScriptInstanceDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScriptInstanceDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/scripts/inventory": {
      "get": {
        "tags": [
          "Scripts"
        ],
        "summary": "Returns all available inventory scripts which can be added to a SIGNL4 subscription.",
        "description": "Returns all available inventory scripts which can be added to a SIGNL4 subscription.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InventoryScriptInfo"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InventoryScriptInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InventoryScriptInfo"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Required information could not be found in the request/claims.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "An internal error occurred while loading all inventory scripts.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/scripts/inventory/parsed": {
      "get": {
        "tags": [
          "Scripts"
        ],
        "summary": "Returns all inventory scripts.",
        "parameters": [
          {
            "name": "language",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InventoryScriptInfo"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InventoryScriptInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InventoryScriptInfo"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/scripts/inventory/parsed/{scriptId}": {
      "get": {
        "tags": [
          "Scripts"
        ],
        "summary": "Returns an inventory script by its id.",
        "description": "Gets the script specified by the passed script id.",
        "parameters": [
          {
            "name": "scriptId",
            "in": "path",
            "description": "The Id of the script to be returned.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "language",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ScriptInstanceDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScriptInstanceDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScriptInstanceDetails"
                }
              }
            }
          },
          "400": {
            "description": "Required information could not be found in the request/claims.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Required entities could not be found in the database or in memory.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions": {
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Get infos of all available/managed subscriptions.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubscriptionInfo"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubscriptionInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubscriptionInfo"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}": {
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Get infos of a specific subscription.",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "ID of the subscription that's to be retrieved.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/channelPrices": {
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Returns the subscription's channel price information.",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "ID of the subscription that needs to be retrieved.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelPriceInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelPriceInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelPriceInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/features": {
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Returns the features of a specified subscription.",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "ID of the subscription from which the features need to be retrieved.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubscriptionFeature"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubscriptionFeature"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubscriptionFeature"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/inboundVoiceNumberLicenses": {
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Gets a subscription's voice number licenses.",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "ID of the subscription",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserLicenseInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserLicenseInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserLicenseInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/prepaidBalance": {
      "get": {
        "tags": [
          "Prepaid"
        ],
        "summary": "Get a subscription's current prepaid balance.",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PrepaidBalanceInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrepaidBalanceInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrepaidBalanceInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/prepaidSettings": {
      "get": {
        "tags": [
          "Prepaid"
        ],
        "summary": "Get a subscription's current prepaid settings.",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PrepaidSettingsInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrepaidSettingsInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrepaidSettingsInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/prepaidTransactions": {
      "get": {
        "tags": [
          "Prepaid"
        ],
        "summary": "Get a subscription's prepaid transactions.",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "ID of the subscription to get transactions for",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PrepaidTransactionInfo"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PrepaidTransactionInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PrepaidTransactionInfo"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/profile": {
      "put": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Updates a subscriptions profile.",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "ID of the subscription to be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Profile data to update subscription with",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionProfile"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionProfile"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionProfile"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionProfile"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/settings": {
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Gets a subscription's global settings.",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "ID of the subscription",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserLicenseInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserLicenseInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserLicenseInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Updates a subscriptions global settings.",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "ID of the subscription to be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Settings to update subscription with",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionSettingsInfo"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionSettingsInfo"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionSettingsInfo"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionSettingsInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionSettingsInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionSettingsInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionSettingsInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/teams": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Get infos for all teams of the subscription.",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TeamInfo"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TeamInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TeamInfo"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/userLicenses": {
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Gets a subscription's user licenses.",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "ID of the subscription",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserLicenseInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserLicenseInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserLicenseInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/teams": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Get infos of all teams.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TeamInfo"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TeamInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TeamInfo"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Teams"
        ],
        "summary": "Adds another team to the subscription of the user",
        "requestBody": {
          "description": "Information which has to be provided to create a new team.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/NewTeamInfo"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewTeamInfo"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/NewTeamInfo"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/NewTeamInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TeamInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/teams/{teamId}": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Gets infos of a specific team.",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "ID of the team that should be retrieved.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TeamInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Teams"
        ],
        "summary": "Deletes a team from the subscription. \r\nIt is only possible to delete empty teams or teams where all members are also members of other teams.\r\n If a user would be without a team after deleting this team, the operation will not be allowed.\r\nYou need to assign these users to a different team first or delete them, to successfully delete that team.",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "ID of the team which should be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TeamInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/teams/{teamId}/alertReports": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Get information about downloadable alert reports",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "ID of team you want to download reports from.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlertAuditReportFileInfo"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlertAuditReportFileInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlertAuditReportFileInfo"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/teams/{teamId}/alertReports/{fileName}": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Returns Alert Report",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "ID of team you want to get the duty report file infos for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileName",
            "in": "path",
            "description": "File name of file you want to download.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/teams/{teamId}/alertSettings": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Gets alert settings of a specific team.",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "ID of the team the settings should be retrieved for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AlertSettings"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertSettings"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Teams"
        ],
        "summary": "Sets alert settings of a specific team.",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "ID of the team the settings should be set for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Alert settings to be set",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AlertSettings"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AlertSettings"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AlertSettings"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AlertSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AlertSettings"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertSettings"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/teams/{teamId}/dutyReports": {
      "get": {
        "tags": [
          "Duties"
        ],
        "summary": "Get Information about downloadable reports",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "ID of team you want to get the duty report file infos for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DutyAuditReportFileInfo"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DutyAuditReportFileInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DutyAuditReportFileInfo"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/teams/{teamId}/dutyReports/{fileName}": {
      "get": {
        "tags": [
          "Duties"
        ],
        "summary": "Download duty report with a specific fileName",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "ID of team you want to download the duty report for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileName",
            "in": "path",
            "description": "Filename of the csv to download.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/teams/{teamId}/dutysummary": {
      "get": {
        "tags": [
          "Duties"
        ],
        "summary": "Get duty assistant info for a team",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "ID of the team the duty belongs to.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastTwoDuties",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TeamDutySummaryInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamDutySummaryInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamDutySummaryInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/teams/{teamId}/eventSources": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Gets event sources of a specific team.",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "ID of the team the sources should be retrieved for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventSourceEndpointInfo"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventSourceEndpointInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventSourceEndpointInfo"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/teams/{teamId}/memberships": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Get all invites of a team.",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "Team ID of team you want to request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User invitations are returned.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvitedUserInfo"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvitedUserInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvitedUserInfo"
                  }
                }
              }
            }
          },
          "403": {
            "description": "You're not allowed to request the access all required entities.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Required entities could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "204": {
            "description": "Request was canceled."
          },
          "400": {
            "description": "Required parameters or authentication info could not be found in the request/claims."
          }
        }
      },
      "post": {
        "tags": [
          "Teams"
        ],
        "summary": "Invite users to a team",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "Id of team the user should be invited to.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Information about user to invite and inviter id.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UsersInvitation"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UsersInvitation"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UsersInvitation"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UsersInvitation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User invitation results are returned.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserInvitationResult"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserInvitationResult"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserInvitationResult"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Required parameters or authentication info could not be found in the request/claims.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "You're not allowed to request the access all required entities.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "204": {
            "description": "Request was canceled."
          },
          "404": {
            "description": "Required entities could not be found in the database."
          }
        }
      }
    },
    "/teams/{teamId}/memberships/{userId}": {
      "put": {
        "tags": [
          "Teams"
        ],
        "summary": "Update user's team membership.",
        "description": "Updates the user's team membership. You can move the user to another team within the subscription\r\nand/or change the user's role.",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "Team the user you want to update belongs to at the moment.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User ID of user you want to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "requesterUserId",
            "in": "query",
            "description": "User ID of user which you want to change role with. This must be provided when using an\r\napi key. This user must have role administrator (for setting administrator role) or team administrator (for setting\r\nrights.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "setUserOnDuty",
            "in": "query",
            "description": "Sets new duty status for user if user is moved to a different team. User is on duty be default.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "requestBody": {
          "description": "Information about role id and target team id.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UserMembership"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserMembership"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserMembership"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserMembership"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User was successfully updated.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              }
            }
          },
          "204": {
            "description": "Request was canceled."
          },
          "400": {
            "description": "Required parameters or authentication info could not be found in the request/claims.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "You're not allowed to request the access all required entities.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Required entities could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Teams"
        ],
        "summary": "Removes a user or invitation from a team",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "ID of the team the user should be deleted from",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user that should be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "requesterUserId",
            "in": "query",
            "description": "User ID of user which will remove the other user.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Request was canceled.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Required parameters or authentication info could not be found in the request/claims.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "You're not allowed to request the access all required entities.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Required entities could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "200": {
            "description": "Success message"
          }
        }
      }
    },
    "/teams/{teamId}/memberships/resendInviteMail": {
      "post": {
        "tags": [
          "Teams"
        ],
        "summary": "Sends invite email again if an invite exists",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "Team ID of team with invited user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Information which user should be invited again.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UserInvitationInfo"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserInvitationInfo"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserInvitationInfo"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserInvitationInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/teams/{teamId}/profile": {
      "put": {
        "tags": [
          "Teams"
        ],
        "summary": "Updates team profile of a team",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "Team ID of team which should be updated.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TeamProfile"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TeamProfile"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TeamProfile"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TeamProfile"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TeamInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/teams/{teamId}/schedules": {
      "get": {
        "tags": [
          "Duties"
        ],
        "summary": "Returns information about all duties that belong to the team.",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "Id of the team the schedules user belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "UserId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "MinDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "MergeOverlap",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduleInfo"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduleInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduleInfo"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Duties"
        ],
        "summary": "Create/Update given duty schedule.",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "Id of the team the duty is to be assigned to.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "information about the duty schedule to be created",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleInfo"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleInfo"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleInfo"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/teams/{teamId}/schedules/{dutyId}": {
      "delete": {
        "tags": [
          "Duties"
        ],
        "summary": "Delete a specific duty.",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "ID of the team the duty belongs to.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dutyId",
            "in": "path",
            "description": "ID of the duty to be deleted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/teams/{teamId}/schedules/{scheduleId}": {
      "get": {
        "tags": [
          "Duties"
        ],
        "summary": "Returns information of the duty schedule with the specified Id.",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "Id of the team the duty belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scheduleId",
            "in": "path",
            "description": "Id of the requested duty schedule.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/teams/{teamId}/schedules/deleteRange": {
      "post": {
        "tags": [
          "Duties"
        ],
        "summary": "Delete duty schedules in range",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "Team ID you want to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Information with date range to delete from to",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteRangeInfo"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteRangeInfo"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteRangeInfo"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteRangeInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduleInfo"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduleInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduleInfo"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/teams/{teamId}/schedules/multiple": {
      "post": {
        "tags": [
          "Duties"
        ],
        "summary": "Save multiple schedules. It is possible to override existing schedules if you wish",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "Team ID to set",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "overrideExisting",
            "in": "query",
            "description": "Override or cut existing schedules if set to true.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "description": "List of schedules to save",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ScheduleInfo"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ScheduleInfo"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ScheduleInfo"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ScheduleInfo"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduleInfo"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduleInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduleInfo"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/teams/{teamId}/setupProgress": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Gets setup progress of a specific team.",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "ID of the team the progress should be retrieved for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TeamSetupProgress"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamSetupProgress"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamSetupProgress"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get all Users",
        "description": "Returns a list of user objects with details such as their email address and duty information. Only users who\r\nare part of your team will be returned.",
        "responses": {
          "200": {
            "description": "User could be successfully identified.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserInfo"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserInfo"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Required authentifaction info could not be found in the request/claims.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Required entities could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "You're not allowed to request the users with their information."
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get User by Id",
        "description": "Returns a user object with details such as his email address and duty information.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Identifier of the user to get. Use 'Me' to get information about the currently logged in user. This is not possible\r\nwith an api key.\r \nCan also be an email address of a user in the team or the unique id of an according user object.\u201d",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User could be successfully identified.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              }
            }
          },
          "400": {
            "description": "Required authentication info could not be found in the request/claims.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Required entities could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "You're not allowed to request that user's information."
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Deletes user account.",
        "description": "Be careful! When you delete the last user in the subscription, the subscription including teams, integrations, historic data etc. will be deleted as well.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user to be deleted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/changePassword": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Updates the password of a user",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User ID of user whose password should be changed.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePasswordInfo"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePasswordInfo"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePasswordInfo"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePasswordInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/checkPermissions": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Checks if a user has the provided permission.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user to check permissions for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "List of permissions to check",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ItemsWrapper`1<String>"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemsWrapper`1<String>"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemsWrapper`1<String>"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ItemsWrapper`1<String>"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsWrapper`1<UserPermission>"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsWrapper`1<UserPermission>"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsWrapper`1<UserPermission>"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/dutyStatus": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get duty status by user Id",
        "description": "Returns a object with duty information.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Identifier of the user to get. Use 'Me' to get information about the currently logged in user. This is not possible\r\nwith an api key.\r \nCan also be an email address of a user in the team or the unique id of an according user object.\u201d",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Duty successfully loaded.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserDutyInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDutyInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDutyInfo"
                }
              }
            }
          },
          "400": {
            "description": "Required authentifaction info could not be found in the request/claims.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Required entities could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "You're not allowed to request that duty information."
          }
        }
      }
    },
    "/users/{userId}/image": {
      "get": {
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "height",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "width",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserImage"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserImage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserImage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Uploaded a profile image for a specified user.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The image was successfully uploaded."
          },
          "400": {
            "description": "Either a passed parameter was either empty/null or the request's multipart does not contain a\r\nfile.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "User is not allowed to upload an image for the specified user.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Either the user was not found or they aren't activated yet.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal general error occured.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/location": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Set location of an user",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/LocationInfo"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocationInfo"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LocationInfo"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LocationInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LocationInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/profile": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Updates user profile of an user",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of user to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UserProfile"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserProfile"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserProfile"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserProfile"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/punchIn": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Punch User in",
        "description": "The specified user will be punched in to duty.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Identifier of the user to punch in. Use 'Me' to get information about the currently logged in\r\nuser. This is not possible with an api key. Can also be an email address of a user in the team or the unique id of\r\nan according user object.\u201d",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserDutyInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDutyInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDutyInfo"
                }
              }
            }
          },
          "400": {
            "description": "Required information could not be found in the request/claims.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "The user tried to change the punch in a different user.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Required entities could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/punchInAsManager": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Punch User in as Manager",
        "description": "The specified user will be punched in to duty as a manager.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Identifier of the user to punch in. Use 'Me' to get information about the currently logged in\r\nuser. This is not possible with an api key. Can also be an email address of a user in the team or the unique id of\r\nan according user object.\u201d",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserDutyInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDutyInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDutyInfo"
                }
              }
            }
          },
          "400": {
            "description": "Required information could not be found in the request/claims.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "The user tried to change the punch in a different user.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Required entities could not be found in the database.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/punchOut": {
      "post": {
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserDutyInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDutyInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDutyInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/setupProgress": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Gets setup progress of a specific user.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user the progress should be retrieved for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserSetupProgress"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSetupProgress"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSetupProgress"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/webhooks": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Get Webhooks",
        "description": "Returns a collection of defined outbound webhooks in the system.",
        "parameters": [
          {
            "name": "teamId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful and response body contains information about all outbound webhooks in the subscription.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WebhookInfo"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WebhookInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WebhookInfo"
                  }
                }
              }
            }
          },
          "404": {
            "description": "The subscription does not have any outbound webhooks.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal has occured. The response body may contain more information.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Create Webhook",
        "description": "Creates a new outbound webhook that will be notified when certain events occur.",
        "requestBody": {
          "description": "Json object that contains the external URL of the webhook.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookBaseInfo"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookBaseInfo"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookBaseInfo"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookBaseInfo"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Action was successful and response contains the id of the newly created webhook.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Either the webhook object or a necessary property was invalid or empty.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal has occured. The response body may contain more information.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/webhooks/{webhookId}": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Get Webhook by Id",
        "description": "Returns information of the webhook specified by the passed id.",
        "parameters": [
          {
            "name": "webhookId",
            "in": "path",
            "description": "Id of the outbound webhook to be retrieved.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful and response body contains information about the requested webhook.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookInfo"
                }
              }
            }
          },
          "400": {
            "description": "The passed webhook id was either empty or null.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "The webhook was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal has occured. The response body may contain more information.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Update Webhook by Id",
        "description": "Updates the specified webhook.",
        "parameters": [
          {
            "name": "webhookId",
            "in": "path",
            "description": "Id of the outbound webhook to be updated.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Json object containing the updated URL of the webhook.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookBaseInfo"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookBaseInfo"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookBaseInfo"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookBaseInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update was successful and response body contains the updated webhook details.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookInfo"
                }
              }
            }
          },
          "400": {
            "description": "A passed parameter was either empty or null.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Webhook with specified id was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal has occured. The response body may contain more information.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Delete Webhook by Id",
        "description": "Deletes the specified webhook so that it will no longer be notified.",
        "parameters": [
          {
            "name": "webhookId",
            "in": "path",
            "description": "Id of the outbound webhook that will be deleted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Webhook was successfully deleted."
          },
          "400": {
            "description": "The passed webhook id was invalid or empty.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Webhook with specified id was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal has occured. The response body may contain more information.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/webhooks/{webhookId}/disable": {
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Ability to enable a webHook.",
        "parameters": [
          {
            "name": "webhookId",
            "in": "path",
            "description": "Webhook ID for webhook which should be disabled.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Disable was successful and response body contains the webhook details.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookInfo"
                }
              }
            }
          },
          "400": {
            "description": "A passed parameter was either empty or null.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Webhook with specified id was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal has occured. The response body may contain more information.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    },
    "/webhooks/{webhookId}/enable": {
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Ability to disable a webHook.",
        "parameters": [
          {
            "name": "webhookId",
            "in": "path",
            "description": "Webhook ID for webhook which should be enabled.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseContent"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AlertAnnotationInfo": {
        "type": "object",
        "properties": {
          "type": {
            "type": "integer",
            "format": "int32"
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "userId": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "teamId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AlertAttachment": {
        "type": "object",
        "properties": {
          "encoding": {
            "$ref": "#/components/schemas/Encoding"
          },
          "content": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "contentType": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AlertAttachmentInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "contentType": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AlertAuditReportFileInfo": {
        "type": "object",
        "properties": {
          "fileName": {
            "type": "string",
            "nullable": true
          },
          "fileSizeInBytes": {
            "type": "integer",
            "format": "int64"
          },
          "lastRecord": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "month": {
            "type": "integer",
            "format": "int32"
          },
          "year": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "AlertCounts": {
        "type": "object",
        "properties": {
          "acknowledged": {
            "type": "integer",
            "format": "int64"
          },
          "end": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastModified": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "start": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "unhandled": {
            "type": "integer",
            "format": "int64"
          },
          "closed": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "AlertDeliveryStatusCodes": {
        "enum": [
          0,
          1,
          2,
          4,
          6,
          8,
          9,
          22,
          24,
          26,
          30,
          31
        ],
        "type": "integer",
        "description": "<p/><ul><li>0 = None</li><li>1 = Open</li><li>2 = Failed</li><li>4 = Transmitted</li><li>6 = Delivered</li><li>8 = Protected</li><li>9 = AbuseProtected</li><li>22 = PartlyFailed</li><li>24 = PartlyTransmitted</li><li>26 = PartlyDelivered</li><li>30 = NoOneOnDuty</li><li>31 = NoOneNotified</li></ul>",
        "format": "int32"
      },
      "AlertDeliveryStatusInfo": {
        "type": "object",
        "properties": {
          "alertDeliveryStatusCode": {
            "$ref": "#/components/schemas/AlertDeliveryStatusCodes"
          },
          "userDeliveryStatusInfos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserDeliveryStatusInfo"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AlertEscalationModes": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "description": "<p/><ul><li>0 = Manager</li><li>1 = Team</li></ul>",
        "format": "int32"
      },
      "AlertFilterActions": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "description": "<p/><ul><li>0 = Suppress</li><li>1 = Hide</li><li>2 = Mute</li></ul>",
        "format": "int32"
      },
      "AlertFilterModes": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "description": "<p/><ul><li>0 = Off</li><li>1 = WhiteListAllCategories</li></ul>",
        "format": "int32"
      },
      "AlertFilterPublic": {
        "type": "object",
        "properties": {
          "teamid": {
            "type": "string",
            "nullable": true
          },
          "alertIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "afterId": {
            "type": "string",
            "nullable": true
          },
          "categoryIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "continuationToken": {
            "$ref": "#/components/schemas/PagedResultsPublicContinuationTokenObsolete"
          },
          "maxCreated": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "minCreated": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "modSince": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "showPersonalHiddenCategories": {
            "type": "boolean"
          },
          "userCreatedAlertsFilterMode": {
            "$ref": "#/components/schemas/UserCreatedAlertsFilterMode"
          },
          "alertStatusCodes": {
            "$ref": "#/components/schemas/AlertStatusCodes"
          },
          "textToSearch": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AlertHistoryInfoDetailed": {
        "type": "object",
        "properties": {
          "alertHistoryEntries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AlertHistoryInfoEntry"
            },
            "nullable": true
          },
          "acknowledgedgements": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "closed": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "closedBy": {
            "type": "string",
            "nullable": true
          },
          "acknowledged": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AlertHistoryInfoEntry": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "$ref": "#/components/schemas/AlertHistoryInfoUserEntryType"
          },
          "userId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AlertHistoryInfoUserEntryType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13
        ],
        "type": "integer",
        "description": "<p/><ul><li>0 = Unspecific</li><li>1 = AlertOpened</li><li>2 = AlertAcknowledged</li><li>3 = AlertClosed</li><li>4 = AlertOverdue</li><li>5 = AlertBreached</li><li>6 = AlertAcknowledgeUndo</li><li>7 = AlertCloseUndo</li><li>8 = AlertEscalationRequested</li><li>9 = AlertEscalatedToManager</li><li>10 = AlertEscalatedToTeam</li><li>11 = AlertEscalatedFromTeam</li><li>12 = EscalationFailedTeamNotValid</li><li>13 = EscalationFailedTeamPrivate</li></ul>",
        "format": "int32"
      },
      "AlertInfo": {
        "type": "object",
        "properties": {
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AlertAttachment"
            },
            "nullable": true
          },
          "category": {
            "type": "string",
            "nullable": true
          },
          "eventSourceId": {
            "type": "string",
            "nullable": true
          },
          "eventSourceType": {
            "$ref": "#/components/schemas/EventSourceTypes"
          },
          "history": {
            "$ref": "#/components/schemas/AlertHistoryInfoDetailed"
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventParameterInfo"
            },
            "nullable": true
          },
          "severity": {
            "$ref": "#/components/schemas/AlertSeverities"
          },
          "categoryId": {
            "type": "string",
            "nullable": true
          },
          "externalId": {
            "type": "string",
            "nullable": true
          },
          "eventId": {
            "type": "string",
            "nullable": true
          },
          "flags": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "lastModified": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "$ref": "#/components/schemas/AlertStatusCodes"
          },
          "subscriptionId": {
            "type": "string",
            "nullable": true
          },
          "teamId": {
            "type": "string",
            "nullable": true
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "annotations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AlertAnnotationInfo"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AlertNotificationInfo": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "nullable": true
          },
          "notificationChannelType": {
            "$ref": "#/components/schemas/AlertNotificationInfoChannelType"
          },
          "deviceName": {
            "type": "string",
            "nullable": true
          },
          "lastUpdate": {
            "type": "string",
            "format": "date-time"
          },
          "messageStatus": {
            "$ref": "#/components/schemas/AlertNotificationInfoMessageStatus"
          },
          "messageStatusErrorCode": {
            "type": "integer",
            "format": "int32"
          },
          "userId": {
            "type": "string",
            "nullable": true
          },
          "userStatus": {
            "$ref": "#/components/schemas/AlertNotificationInfoUserStatus"
          }
        },
        "additionalProperties": false
      },
      "AlertNotificationInfoChannelType": {
        "enum": [
          0,
          1,
          2,
          4,
          8,
          16
        ],
        "type": "integer",
        "description": "<p/><ul><li>0 = None</li><li>1 = Push</li><li>2 = Email</li><li>4 = Bot</li><li>8 = Voice</li><li>16 = SMS</li></ul>",
        "format": "int32"
      },
      "AlertNotificationInfoMessageStatus": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10
        ],
        "type": "integer",
        "description": "<p/><ul><li>0 = None</li><li>1 = Rejected</li><li>2 = Failed</li><li>3 = Queued</li><li>4 = Transmitted</li><li>5 = Buffered</li><li>6 = Delivered</li><li>7 = Canceled</li><li>8 = Protected</li><li>9 = AbuseProtected</li><li>10 = Delayed</li></ul>",
        "format": "int32"
      },
      "AlertNotificationInfoUserStatus": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "description": "<p/><ul><li>0 = None</li><li>1 = MessageCreated</li><li>2 = NotOnDuty</li><li>3 = CategoryHidden</li><li>4 = CategoryMuted</li><li>5 = NoNotificationProfiles</li><li>6 = NoMessagesByNotificationProfiles</li></ul>",
        "format": "int32"
      },
      "AlertReport": {
        "required": [
          "last24Hours",
          "subscriptionId",
          "teamId"
        ],
        "type": "object",
        "properties": {
          "last24Hours": {
            "$ref": "#/components/schemas/AlertCounts"
          },
          "subscriptionId": {
            "type": "string"
          },
          "teamCurrentDuty": {
            "$ref": "#/components/schemas/AlertCounts"
          },
          "teamId": {
            "type": "string"
          },
          "teamLastDuty": {
            "$ref": "#/components/schemas/AlertCounts"
          },
          "userId": {
            "type": "string",
            "nullable": true
          },
          "userLastDutyChange": {
            "$ref": "#/components/schemas/AlertCounts"
          }
        },
        "additionalProperties": false
      },
      "AlertResponseModes": {
        "enum": [
          2,
          4
        ],
        "type": "integer",
        "description": "<p/><ul><li>2 = SingleAcknowledge</li><li>4 = MultiAcknowledge</li></ul>",
        "format": "int32"
      },
      "AlertSettings": {
        "type": "object",
        "properties": {
          "escEnabled": {
            "type": "boolean"
          },
          "escMode": {
            "$ref": "#/components/schemas/AlertEscalationModes"
          },
          "escRefId": {
            "type": "string",
            "nullable": true
          },
          "filterMode": {
            "$ref": "#/components/schemas/AlertFilterModes"
          },
          "filterAction": {
            "$ref": "#/components/schemas/AlertFilterActions"
          },
          "responseMode": {
            "$ref": "#/components/schemas/AlertResponseModes"
          },
          "responseTime": {
            "type": "integer",
            "format": "int32"
          },
          "persNotMode": {
            "$ref": "#/components/schemas/PersistentNotificationModes"
          },
          "persNotInterval": {
            "type": "integer",
            "format": "int32"
          },
          "optOut": {
            "$ref": "#/components/schemas/TeamCategoryOptOutModes"
          },
          "overrideNotificationProfiles": {
            "type": "boolean"
          },
          "notificationProfileOverrides": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AlertSettingsNotificationProfile"
            },
            "nullable": true
          },
          "signalingMode": {
            "$ref": "#/components/schemas/InAppSignalingModes"
          }
        },
        "additionalProperties": false
      },
      "AlertSettingsChannelType": {
        "enum": [
          0,
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "description": "<p/><ul><li>0 = None</li><li>1 = Push</li><li>2 = Voice</li><li>3 = SMS</li><li>4 = Email</li></ul>",
        "format": "int32"
      },
      "AlertSettingsNotificationProfile": {
        "type": "object",
        "properties": {
          "channel": {
            "$ref": "#/components/schemas/AlertSettingsChannelType"
          },
          "delay": {
            "type": "integer",
            "format": "int32"
          },
          "enabled": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "AlertSeverities": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "description": "<p/><ul><li>0 = Low</li><li>1 = Major</li><li>2 = Critical</li></ul>",
        "format": "int32"
      },
      "AlertStatusCodes": {
        "enum": [
          0,
          1,
          2,
          4,
          8,
          16,
          32
        ],
        "type": "integer",
        "description": "<p/><ul><li>0 = None</li><li>1 = Open</li><li>2 = Acknowledged</li><li>4 = Closed</li><li>8 = NoReply</li><li>16 = Failed</li><li>32 = Error</li></ul>",
        "format": "int32"
      },
      "CategoryAugmentation": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/CategoryAugmentationType"
          },
          "value": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CategoryAugmentationType": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "<p/><ul><li>0 = Parameter</li><li>1 = Subject</li><li>2 = Text</li><li>3 = Location</li></ul>",
        "format": "int32"
      },
      "CategoryEnrichment": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/CategoryEnrichmentType"
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CategoryEnrichmentType": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "description": "<p/><ul><li>0 = Parameter</li><li>1 = Hyperlink</li></ul>",
        "format": "int32"
      },
      "CategoryInfo": {
        "required": [
          "color",
          "imageName",
          "keywordMatching",
          "keywords",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "teamId": {
            "type": "string",
            "nullable": true
          },
          "isDefault": {
            "type": "boolean"
          },
          "options": {
            "$ref": "#/components/schemas/CategoryInfoOptions"
          },
          "name": {
            "type": "string"
          },
          "color": {
            "type": "string"
          },
          "imageName": {
            "type": "string"
          },
          "keywords": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "keywordsExcluded": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "keywordMatching": {
            "$ref": "#/components/schemas/KeywordMatchingType"
          },
          "augmentations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryAugmentation"
            },
            "nullable": true
          },
          "enrichments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryEnrichment"
            },
            "nullable": true
          },
          "order": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CategoryInfoOptions": {
        "enum": [
          0,
          1,
          2,
          4,
          8
        ],
        "type": "integer",
        "description": "<p/><ul><li>0 = None</li><li>1 = Hidden</li><li>2 = DenyDelete</li><li>4 = HideOptOut</li><li>8 = HideKeywords</li></ul>",
        "format": "int32"
      },
      "CategoryMetrics": {
        "type": "object",
        "properties": {
          "categoryId": {
            "type": "string",
            "nullable": true
          },
          "last24h": {
            "type": "integer",
            "format": "int64"
          },
          "lastAlert": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "subscriberCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CategorySubscriptionInfo": {
        "required": [
          "status",
          "userId"
        ],
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/CategorySubscriptionStatus"
          },
          "userId": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CategorySubscriptionStatus": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "description": "<p/><ul><li>0 = Subscribed</li><li>1 = Muted</li><li>2 = Hidden</li></ul>",
        "format": "int32"
      },
      "CategoryUpdateInfo": {
        "required": [
          "color",
          "imageName",
          "keywordMatching",
          "keywords",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "teamId": {
            "type": "string",
            "nullable": true
          },
          "isDefault": {
            "type": "boolean"
          },
          "options": {
            "$ref": "#/components/schemas/CategoryInfoOptions"
          },
          "name": {
            "type": "string"
          },
          "color": {
            "type": "string"
          },
          "imageName": {
            "type": "string"
          },
          "keywords": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "keywordsExcluded": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "keywordMatching": {
            "$ref": "#/components/schemas/KeywordMatchingType"
          },
          "augmentations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryAugmentation"
            },
            "nullable": true
          },
          "enrichments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryEnrichment"
            },
            "nullable": true
          },
          "order": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ChangeAlertStatusFilterInfo": {
        "type": "object",
        "properties": {
          "maxDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "minDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "categoryIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "scope": {
            "$ref": "#/components/schemas/StatusChangeScope"
          },
          "teamIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChangeAlertStatusInfo": {
        "required": [
          "uid"
        ],
        "type": "object",
        "properties": {
          "descr": {
            "type": "string",
            "nullable": true
          },
          "uid": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ChangeAlertStatusMultipleInfo": {
        "required": [
          "alertIds",
          "uid"
        ],
        "type": "object",
        "properties": {
          "descr": {
            "type": "string",
            "nullable": true
          },
          "uid": {
            "type": "string"
          },
          "alertIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "ChannelPriceInfo": {
        "type": "object",
        "properties": {
          "sms": {
            "type": "integer",
            "format": "int32"
          },
          "voicePerMinute": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ChannelTypes": {
        "enum": [
          0,
          1,
          2,
          4,
          8,
          16
        ],
        "type": "integer",
        "description": "<p/><ul><li>0 = None</li><li>1 = Push</li><li>2 = Email</li><li>4 = Bot</li><li>8 = Voice</li><li>16 = SMS</li></ul>",
        "format": "int32"
      },
      "ContactAddressInfo": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "nullable": true
          },
          "channel": {
            "$ref": "#/components/schemas/ChannelTypes"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "device": {
            "$ref": "#/components/schemas/Device"
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "options": {
            "type": "integer",
            "format": "int32"
          },
          "userId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeleteRangeInfo": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Device": {
        "type": "object",
        "properties": {
          "appVersion": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "osVersion": {
            "type": "string",
            "nullable": true
          },
          "ringtone": {
            "type": "string",
            "nullable": true
          },
          "ringtoneDisabled": {
            "type": "boolean"
          },
          "type": {
            "$ref": "#/components/schemas/DeviceType"
          }
        },
        "additionalProperties": false
      },
      "DeviceType": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "description": "<p/><ul><li>0 = None</li><li>1 = Android</li><li>2 = iOS</li></ul>",
        "format": "int32"
      },
      "DutyAuditReportFileInfo": {
        "type": "object",
        "properties": {
          "fileName": {
            "type": "string",
            "nullable": true
          },
          "fileSizeInBytes": {
            "type": "integer",
            "format": "int64"
          },
          "month": {
            "type": "integer",
            "format": "int32"
          },
          "year": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "DutySummaryInfo": {
        "type": "object",
        "properties": {
          "dutyEnd": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "dutyId": {
            "type": "string",
            "nullable": true
          },
          "dutyStart": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Encoding": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "description": "<p/><ul><li>0 = None</li><li>1 = Base64</li></ul>",
        "format": "int32"
      },
      "ErrorDetailsResponseContent": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "nullable": true
          },
          "details": {
            "type": "string",
            "nullable": true
          },
          "code": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ErrorResponseContent": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "nullable": true
          },
          "details": {
            "type": "string",
            "nullable": true
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "requestId": {
            "type": "string",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorDetailsResponseContent"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EventCreatorFilterDetails": {
        "required": [
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "nullable": true
          },
          "userCreatedFilterMode": {
            "$ref": "#/components/schemas/UserCreatedEventsFilterMode"
          }
        },
        "additionalProperties": false
      },
      "EventFilter": {
        "type": "object",
        "properties": {
          "teamid": {
            "type": "string",
            "nullable": true
          },
          "continuationToken": {
            "$ref": "#/components/schemas/PagedResultsPublicContinuationTokenObsolete"
          },
          "eventStatusCode": {
            "$ref": "#/components/schemas/EventStatusCodes"
          },
          "maxCreationDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "minCreationDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "modifiedSince": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "textToSearch": {
            "type": "string",
            "nullable": true
          },
          "eventSourceId": {
            "type": "string",
            "nullable": true
          },
          "eventCreatorFilter": {
            "$ref": "#/components/schemas/EventCreatorFilterDetails"
          }
        },
        "additionalProperties": false
      },
      "EventParameterInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "$ref": "#/components/schemas/EventParameterTypes"
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EventParameterTypes": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          100
        ],
        "type": "integer",
        "description": "<p/><ul><li>0 = None</li><li>1 = Object</li><li>2 = Array</li><li>3 = Constructor</li><li>4 = Property</li><li>5 = Comment</li><li>6 = Integer</li><li>7 = Float</li><li>8 = String</li><li>9 = Boolean</li><li>10 = Null</li><li>11 = Undefined</li><li>12 = Date</li><li>13 = Raw</li><li>14 = Bytes</li><li>15 = Guid</li><li>16 = Uri</li><li>17 = TimeSpan</li><li>100 = Html</li></ul>",
        "format": "int32"
      },
      "EventSeverities": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "description": "<p/><ul><li>0 = Low</li><li>1 = Major</li><li>2 = Critical</li></ul>",
        "format": "int32"
      },
      "EventSourceEndpointInfo": {
        "type": "object",
        "properties": {
          "subscriptionId": {
            "type": "string",
            "nullable": true
          },
          "teamId": {
            "type": "string",
            "nullable": true
          },
          "groupId": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/EventSourceTypes"
          },
          "subType": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "disabled": {
            "type": "boolean"
          },
          "lastEvent": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "id": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EventSourceTypes": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7
        ],
        "type": "integer",
        "description": "<p/><ul><li>0 = None</li><li>1 = Email</li><li>2 = WebHook</li><li>3 = Script</li><li>4 = System</li><li>5 = Manual</li><li>6 = Voice</li><li>7 = Api</li></ul>",
        "format": "int32"
      },
      "EventStatusCodes": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          21,
          22,
          23,
          30,
          1000
        ],
        "type": "integer",
        "description": "<p/><ul><li>0 = None</li><li>1 = Processing</li><li>2 = Signled</li><li>3 = Filtered</li><li>4 = Resolved</li><li>5 = Discarded</li><li>6 = Acknowledged</li><li>7 = Suppressed</li><li>8 = NoRuleApplied</li><li>9 = MultipleTargetStatus</li><li>21 = WaitingForAutoClose</li><li>22 = NotEnoughOccurrences</li><li>23 = DuplicateSuppressed</li><li>30 = NoTarget</li><li>1000 = Error</li></ul>",
        "format": "int32"
      },
      "InAppSignalingModes": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "description": "<p/><ul><li>0 = Suppressed</li><li>1 = Full</li></ul>",
        "format": "int32"
      },
      "InventoryScriptInfo": {
        "type": "object",
        "properties": {
          "config": {
            "nullable": true
          },
          "eventPattern": {
            "nullable": true
          },
          "data": {
            "$ref": "#/components/schemas/ScriptDescriptionData"
          },
          "localizationDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScriptLocalizationDetail"
            },
            "nullable": true
          },
          "scriptId": {
            "type": "string",
            "nullable": true
          },
          "scriptName": {
            "type": "string",
            "nullable": true
          },
          "visibility": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InvitedUserInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "isInvite": {
            "type": "boolean"
          },
          "mail": {
            "type": "string",
            "nullable": true
          },
          "roleId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ItemsWrapper`1<String>": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ItemsWrapper`1<UserPermission>": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserPermission"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "KeywordMatchingType": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "description": "<p/><ul><li>0 = Any</li><li>1 = All</li></ul>",
        "format": "int32"
      },
      "LocationInfo": {
        "type": "object",
        "properties": {
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NewTeamInfo": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "timezone": {
            "type": "string",
            "nullable": true
          },
          "createWebhookEndpoint": {
            "type": "boolean"
          },
          "createEmailEndpoint": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "OverviewAlert": {
        "type": "object",
        "properties": {
          "alertDeliveryStatus": {
            "$ref": "#/components/schemas/AlertDeliveryStatusInfo"
          },
          "detailedHistory": {
            "$ref": "#/components/schemas/AlertHistoryInfoDetailed"
          },
          "requiredAcknowledgements": {
            "type": "integer",
            "format": "int32"
          },
          "categoryId": {
            "type": "string",
            "nullable": true
          },
          "externalId": {
            "type": "string",
            "nullable": true
          },
          "eventId": {
            "type": "string",
            "nullable": true
          },
          "flags": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "lastModified": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "$ref": "#/components/schemas/AlertStatusCodes"
          },
          "subscriptionId": {
            "type": "string",
            "nullable": true
          },
          "teamId": {
            "type": "string",
            "nullable": true
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "annotations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AlertAnnotationInfo"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OverviewEvent": {
        "type": "object",
        "properties": {
          "teamId": {
            "type": "string",
            "nullable": true
          },
          "alertId": {
            "type": "string",
            "nullable": true
          },
          "categoryId": {
            "type": "string",
            "nullable": true
          },
          "acknowledgedAlerts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "closedAlerts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "creationTime": {
            "type": "string",
            "format": "date-time"
          },
          "createdByUserId": {
            "type": "string",
            "nullable": true
          },
          "eventSourceType": {
            "$ref": "#/components/schemas/EventSourceTypes"
          },
          "eventSourceGroupId": {
            "type": "string",
            "nullable": true
          },
          "eventSourceId": {
            "type": "string",
            "nullable": true
          },
          "eventSourceTeamId": {
            "type": "string",
            "nullable": true
          },
          "eventStatus": {
            "$ref": "#/components/schemas/EventStatusCodes"
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "lastModified": {
            "type": "string",
            "format": "date-time"
          },
          "severity": {
            "$ref": "#/components/schemas/EventSeverities"
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PagedResultsPublicContinuationTokenObsolete": {
        "type": "object",
        "properties": {
          "nextPartitionKey": {
            "type": "string",
            "nullable": true
          },
          "nextRowKey": {
            "type": "string",
            "nullable": true
          },
          "nextTableName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PagedResultsPublicObsolete`1<OverviewAlert>": {
        "type": "object",
        "properties": {
          "continuationToken": {
            "$ref": "#/components/schemas/PagedResultsPublicContinuationTokenObsolete"
          },
          "hasMore": {
            "type": "boolean",
            "readOnly": true
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OverviewAlert"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PagedResultsPublicObsolete`1<OverviewEvent>": {
        "type": "object",
        "properties": {
          "continuationToken": {
            "$ref": "#/components/schemas/PagedResultsPublicContinuationTokenObsolete"
          },
          "hasMore": {
            "type": "boolean",
            "readOnly": true
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OverviewEvent"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PersistentNotificationModes": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "description": "<p/><ul><li>0 = Off</li><li>1 = Summary</li></ul>",
        "format": "int32"
      },
      "PhoneAddressValidationStatus": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "description": "<p/><ul><li>0 = NotValidated</li><li>1 = Validated</li><li>2 = CountryNotSupported</li></ul>",
        "format": "int32"
      },
      "PhoneContactAddressInfo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactAddressInfo"
          },
          {
            "type": "object",
            "properties": {
              "countryCode": {
                "type": "string",
                "nullable": true
              },
              "validationStatus": {
                "$ref": "#/components/schemas/PhoneAddressValidationStatus"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "PrepaidBalanceInfo": {
        "type": "object",
        "properties": {
          "balance": {
            "type": "integer",
            "format": "int32"
          },
          "latestTopUp": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "pendingTransactions": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "PrepaidSettingsInfo": {
        "type": "object",
        "properties": {
          "topUpAmount": {
            "type": "integer",
            "format": "int32"
          },
          "topUpEnabled": {
            "type": "boolean"
          },
          "topUpLimit": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "PrepaidTransactionInfo": {
        "type": "object",
        "properties": {
          "autoTopUpId": {
            "type": "string",
            "nullable": true
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "integer",
            "format": "int32"
          },
          "currency": {
            "type": "string",
            "nullable": true
          },
          "modified": {
            "type": "string",
            "format": "date-time"
          },
          "packageCode": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "statusCode": {
            "type": "integer",
            "format": "int32"
          },
          "subscriptionId": {
            "type": "string",
            "nullable": true
          },
          "transactionId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RaiseAlertInfo": {
        "required": [
          "text",
          "title"
        ],
        "type": "object",
        "properties": {
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AlertAttachment"
            },
            "nullable": true
          },
          "category": {
            "type": "string",
            "nullable": true
          },
          "externalId": {
            "type": "string",
            "nullable": true
          },
          "flags": {
            "type": "integer",
            "format": "int32"
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventParameterInfo"
            },
            "nullable": true
          },
          "severity": {
            "$ref": "#/components/schemas/AlertSeverities"
          },
          "text": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ScheduleInfo": {
        "type": "object",
        "properties": {
          "end": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "options": {
            "type": "integer",
            "format": "int32"
          },
          "start": {
            "type": "string",
            "format": "date-time"
          },
          "userId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ScriptDescriptionData": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "shortDescription": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "scriptType": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ScriptInstanceCreateInfo": {
        "type": "object",
        "properties": {
          "instanceId": {
            "type": "string",
            "nullable": true
          },
          "scriptId": {
            "type": "string",
            "nullable": true
          },
          "scriptName": {
            "type": "string",
            "nullable": true
          },
          "customScriptName": {
            "type": "string",
            "nullable": true
          },
          "customScriptDescription": {
            "type": "string",
            "nullable": true
          },
          "teamId": {
            "type": "string",
            "nullable": true
          },
          "sharedTeams": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "enabled": {
            "type": "boolean"
          },
          "config": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ScriptInstanceCustomUserData": {
        "type": "object",
        "properties": {
          "instanceId": {
            "type": "string",
            "nullable": true
          },
          "scriptName": {
            "type": "string",
            "nullable": true
          },
          "customScriptName": {
            "type": "string",
            "nullable": true
          },
          "customScriptDescription": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ScriptInstanceDetails": {
        "type": "object",
        "properties": {
          "config": {
            "nullable": true
          },
          "webhookUrl": {
            "type": "string",
            "nullable": true
          },
          "eventSourceId": {
            "type": "string",
            "nullable": true
          },
          "instanceId": {
            "type": "string",
            "nullable": true
          },
          "scriptId": {
            "type": "string",
            "nullable": true
          },
          "scriptName": {
            "type": "string",
            "nullable": true
          },
          "customScriptName": {
            "type": "string",
            "nullable": true
          },
          "customScriptDescription": {
            "type": "string",
            "nullable": true
          },
          "subscriptionId": {
            "type": "string",
            "nullable": true
          },
          "teamId": {
            "type": "string",
            "nullable": true
          },
          "eventPattern": {
            "nullable": true
          },
          "lastModified": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "enabled": {
            "type": "boolean"
          },
          "runtimeInformation": {
            "$ref": "#/components/schemas/ScriptInstanceInfoRuntimeInformationModel"
          }
        },
        "additionalProperties": false
      },
      "ScriptInstanceInfo": {
        "type": "object",
        "properties": {
          "instanceId": {
            "type": "string",
            "nullable": true
          },
          "scriptId": {
            "type": "string",
            "nullable": true
          },
          "scriptName": {
            "type": "string",
            "nullable": true
          },
          "customScriptName": {
            "type": "string",
            "nullable": true
          },
          "customScriptDescription": {
            "type": "string",
            "nullable": true
          },
          "subscriptionId": {
            "type": "string",
            "nullable": true
          },
          "teamId": {
            "type": "string",
            "nullable": true
          },
          "eventPattern": {
            "nullable": true
          },
          "lastModified": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "enabled": {
            "type": "boolean"
          },
          "runtimeInformation": {
            "$ref": "#/components/schemas/ScriptInstanceInfoRuntimeInformationModel"
          },
          "eventSourceId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ScriptInstanceInfoRuntimeInformationModel": {
        "type": "object",
        "properties": {
          "runtimeStatus": {
            "$ref": "#/components/schemas/ScriptInstanceInfoRuntimeStatus"
          },
          "runtimeStatusMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ScriptInstanceInfoRuntimeStatus": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          -1
        ],
        "type": "integer",
        "description": "<p/><ul><li>0 = Unknown</li><li>1 = Starting</li><li>2 = OK</li><li>3 = Stopping</li><li>4 = Stopped</li><li>-1 = Error</li></ul>",
        "format": "int32"
      },
      "ScriptInstanceUpdateInfo": {
        "type": "object",
        "properties": {
          "customScriptName": {
            "type": "string",
            "nullable": true
          },
          "customScriptDescription": {
            "type": "string",
            "nullable": true
          },
          "teamId": {
            "type": "string",
            "nullable": true
          },
          "enabled": {
            "type": "boolean"
          },
          "config": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ScriptLocalizationDetail": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "$ref": "#/components/schemas/ScriptDescriptionData"
          },
          "config": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StatusChangeScope": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "description": "<p/><ul><li>0 = Default</li><li>1 = AllTeams</li><li>2 = SpecificTeams</li></ul>",
        "format": "int32"
      },
      "SubscriptionFeature": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "type": "string",
            "nullable": true
          },
          "settings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriptionFeatureSetting"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SubscriptionFeatureSetting": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SubscriptionIdProviders": {
        "enum": [
          0,
          1,
          2,
          4,
          8,
          14,
          15
        ],
        "type": "integer",
        "description": "<p/><ul><li>0 = None</li><li>1 = Custom</li><li>2 = EntraID</li><li>4 = Google</li><li>8 = Apple</li><li>14 = ExternalOnly</li><li>15 = All</li></ul>",
        "format": "int32"
      },
      "SubscriptionInfo": {
        "type": "object",
        "properties": {
          "branchId": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "currency": {
            "type": "string",
            "nullable": true
          },
          "externalAccountId": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "nextBilling": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ownerId": {
            "type": "string",
            "nullable": true
          },
          "planCode": {
            "type": "string",
            "nullable": true
          },
          "planState": {
            "type": "integer",
            "format": "int32"
          },
          "referralEnabled": {
            "type": "boolean"
          },
          "isBetaMember": {
            "type": "boolean"
          },
          "elmEnabled": {
            "type": "boolean"
          },
          "status": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SubscriptionProfile": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SubscriptionRetentionSettingsInfo": {
        "type": "object",
        "properties": {
          "days": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "enabled": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "SubscriptionSettingsInfo": {
        "type": "object",
        "properties": {
          "socialFeed": {
            "$ref": "#/components/schemas/SubscriptionSocialFeed"
          },
          "customRetention": {
            "$ref": "#/components/schemas/SubscriptionRetentionSettingsInfo"
          },
          "allowedIdProviders": {
            "$ref": "#/components/schemas/SubscriptionIdProviders"
          }
        },
        "additionalProperties": false
      },
      "SubscriptionSocialFeed": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "description": "<p/><ul><li>0 = Disabled</li><li>1 = Twitter</li><li>2 = Reddit</li></ul>",
        "format": "int32"
      },
      "TeamCategoryOptOutModes": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "description": "<p/><ul><li>0 = None</li><li>1 = Disabled</li><li>2 = Personal</li></ul>",
        "format": "int32"
      },
      "TeamDutySummaryInfo": {
        "type": "object",
        "properties": {
          "dutyAssistEnabled": {
            "type": "boolean"
          },
          "dutySummaries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DutySummaryInfo"
            },
            "nullable": true
          },
          "teamId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TeamInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "memberIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "subscriptionId": {
            "type": "string",
            "nullable": true
          },
          "timezone": {
            "type": "string",
            "nullable": true
          },
          "imageLastModified": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TeamProfile": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TeamSetupProgress": {
        "type": "object",
        "properties": {
          "teamId": {
            "type": "string",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "completedSteps": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdatePasswordInfo": {
        "type": "object",
        "properties": {
          "currentPassword": {
            "type": "string",
            "nullable": true
          },
          "newPassword": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserCreatedAlertsFilterMode": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "description": "<p/><ul><li>0 = ExcludeUserCreatedAlerts</li><li>1 = IncludeUserCreatedAlerts</li><li>2 = OnlyUserCreatedAlerts</li></ul>",
        "format": "int32"
      },
      "UserCreatedEventsFilterMode": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "description": "<p/><ul><li>0 = ExcludeUserCreatedEvents</li><li>1 = IncludeUserCreatedEvents</li><li>2 = OnlyUserCreatedEvents</li></ul>",
        "format": "int32"
      },
      "UserDeliveryStatusInfo": {
        "type": "object",
        "properties": {
          "statusCode": {
            "$ref": "#/components/schemas/UserDeliveryStatusInfoCodes"
          },
          "userId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserDeliveryStatusInfoCodes": {
        "enum": [
          0,
          1,
          2,
          4,
          6,
          8,
          9,
          24,
          26,
          30,
          31,
          32
        ],
        "type": "integer",
        "description": "<p/><ul><li>0 = None</li><li>1 = Open</li><li>2 = Failed</li><li>4 = Transmitted</li><li>6 = Delivered</li><li>8 = Protected</li><li>9 = AbuseProtected</li><li>24 = PartlyTransmitted</li><li>26 = PartlyDelivered</li><li>30 = NotOnDuty</li><li>31 = CategoryOptOut</li><li>32 = NoMessagesSent</li></ul>",
        "format": "int32"
      },
      "UserDutyInfo": {
        "type": "object",
        "properties": {
          "lastChange": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "onDuty": {
            "type": "boolean"
          },
          "onManagerDuty": {
            "type": "boolean"
          },
          "overdue": {
            "type": "boolean"
          },
          "teamId": {
            "type": "string",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserImage": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "contentDispostion": {
            "type": "string",
            "nullable": true
          },
          "contentEncoding": {
            "type": "string",
            "nullable": true
          },
          "contentType": {
            "type": "string",
            "nullable": true
          },
          "lastModified": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserInfo": {
        "type": "object",
        "properties": {
          "colorIndex": {
            "type": "integer",
            "format": "int32"
          },
          "contactAddresses": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ContactAddressInfo"
                },
                {
                  "$ref": "#/components/schemas/PhoneContactAddressInfo"
                }
              ]
            },
            "nullable": true
          },
          "dutyInfos": {
            "$ref": "#/components/schemas/UserDutyInfo"
          },
          "isDeactivated": {
            "type": "boolean"
          },
          "subscriptionId": {
            "type": "string",
            "nullable": true
          },
          "userImageLastModified": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "timeZone": {
            "type": "string",
            "nullable": true
          },
          "lastSeen": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "isRemoteActionPinSet": {
            "type": "boolean"
          },
          "externalAuthProvider": {
            "type": "string",
            "nullable": true
          },
          "webLanguage": {
            "$ref": "#/components/schemas/WebLanguage"
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "isInvite": {
            "type": "boolean"
          },
          "mail": {
            "type": "string",
            "nullable": true
          },
          "roleId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserInvitationInfo": {
        "required": [
          "userMail"
        ],
        "type": "object",
        "properties": {
          "inviterId": {
            "type": "string",
            "nullable": true
          },
          "userMail": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "UserInvitationResult": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          },
          "invitedUser": {
            "$ref": "#/components/schemas/InvitedUserInfo"
          },
          "success": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "UserInvite": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "roleId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserLicenseInfo": {
        "type": "object",
        "properties": {
          "currentUsers": {
            "type": "integer",
            "format": "int32"
          },
          "licensedUsers": {
            "type": "integer",
            "format": "int32"
          },
          "planCode": {
            "type": "string",
            "nullable": true
          },
          "isTrial": {
            "type": "boolean"
          },
          "isFree": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "UserMembership": {
        "type": "object",
        "properties": {
          "teamId": {
            "type": "string",
            "nullable": true
          },
          "roleId": {
            "type": "string",
            "nullable": true
          },
          "isValid": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "UserPermission": {
        "type": "object",
        "properties": {
          "allowed": {
            "type": "boolean"
          },
          "permission": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserProfile": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "timeZone": {
            "type": "string",
            "nullable": true
          },
          "language": {
            "$ref": "#/components/schemas/WebLanguage"
          }
        },
        "additionalProperties": false
      },
      "UserSetupProgress": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "completedSteps": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UsersInvitation": {
        "required": [
          "invites"
        ],
        "type": "object",
        "properties": {
          "inviterId": {
            "type": "string",
            "nullable": true
          },
          "invites": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserInvite"
            }
          }
        },
        "additionalProperties": false
      },
      "WebLanguage": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "description": "<p/><ul><li>0 = BrowserBased</li><li>1 = EN</li><li>2 = DE</li></ul>",
        "format": "int32"
      },
      "WebhookBaseInfo": {
        "required": [
          "extUrl",
          "name"
        ],
        "type": "object",
        "properties": {
          "teamId": {
            "type": "string",
            "nullable": true
          },
          "extUrl": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "enabled": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "WebhookInfo": {
        "required": [
          "extUrl",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "subId": {
            "type": "string",
            "nullable": true
          },
          "teamId": {
            "type": "string",
            "nullable": true
          },
          "extUrl": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "enabled": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "API_Key_Header": {
        "type": "apiKey",
        "description": "Header based API Key authentication. You can generate an API Key in the SIGNL4 portal under 'Developers'.",
        "name": "x-s4-api-key",
        "in": "header"
      },
      "API_Key_Query": {
        "type": "apiKey",
        "description": "Query based API Key authentication. You can generate an API Key in the SIGNL4 portal under 'Developers'.",
        "name": "x-s4-api-key",
        "in": "query"
      },
      "OAuth2": {
        "type": "oauth2",
        "description": "OAuth2 Authentication. You can request subscription specific client credentials from the SIGNL4 support.",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://connect.signl4.com/identity/connect/authorize",
            "tokenUrl": "https://connect.signl4.com/identity/connect/token",
            "refreshUrl": "https://connect.signl4.com/identity/connect/token",
            "scopes": {
              "public_api_write": "Access write operations",
              "public_api_read": "Access read operations",
              "offline_access": "Allows usage of refresh tokens"
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "API_Key_Header": [],
      "API_Key_Query": [],
      "OAuth2": [
        "public_api_write",
        "public_api_read",
        "offline_access"
      ]
    }
  ],
  "tags": [
    {
      "name": "Alerts",
      "description": "Provides access to all information about SIGNLs and the ability to interact with them."
    },
    {
      "name": "Categories",
      "description": "Provides access to services and system categories in a SIGNL4 team."
    },
    {
      "name": "Duties",
      "description": "Provide access to duty information and the ability to create, delete and update them."
    },
    {
      "name": "Events",
      "description": "Provide access to all information about events and their parameters."
    },
    {
      "name": "Prepaid",
      "description": "Provides access to the prepaid balance and transactions"
    },
    {
      "name": "Scripts",
      "description": "Provides access to apps that are available in SIGNL4 and e.g. allows adding an app to a SIGNL4 team."
    },
    {
      "name": "Subscriptions",
      "description": "Provides management capabilities for a SIGNL4 subscription."
    },
    {
      "name": "Teams",
      "description": "Provides access to team specfic ressources"
    },
    {
      "name": "Users",
      "description": "Provides management for team members in a SIGNL4 team."
    },
    {
      "name": "Webhooks",
      "description": "Provides management for outbound notifications (e.g. a Signl was confirmed) via webhooks."
    }
  ]
}