{
  "openapi": "3.0.0",
  "info": {
    "contact": {
      "email": "support@cenit.io",
      "name": "Cenit IO Support",
      "url": "https://cenit.io"
    },
    "description": "Cenit IO is an Open Platform for Data and Business Integration (iPaaS)\n",
    "termsOfService": "https://cenit-portal.herokuapp.com/terms_of_service",
    "title": "Cenit IO - REST API Specification",
    "version": "v1",
    "x-logo": {
      "url": "https://cenit.io/images/logo.png"
    },
    "x-origin": {
      "format": "swagger",
      "url": "https://cenit-io.github.io/openapi/swagger.json",
      "version": "2.0"
    },
    "x-providerName": "cenit.io",
    "x-jentic-source-url": "https://cenit-io.github.io/openapi/swagger.json"
  },
  "servers": [
    {
      "url": "https://cenit.io/api/v1"
    }
  ],
  "paths": {
    "/setup/connection": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/connection"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "Connection"
        ],
        "description": "Returns a list of connections you've previously created. The connections are returned in sorted order, with the most recent connection appearing first.",
        "summary": "Returns a list of connections"
      },
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/connection"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "Connection"
        ],
        "description": "Creates or updates the specified connection by setting the values of the parameters passed. Any parameters not provided will be left unchanged.",
        "summary": "Create or update a connection"
      }
    },
    "/setup/connection/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "Connection ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Item not found"
          }
        },
        "tags": [
          "Connection"
        ],
        "description": "Permanently deletes a connection. It cannot be undone.",
        "summary": "Delete a connection"
      },
      "get": {
        "parameters": [
          {
            "description": "Connection ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/connection"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "description": "Item not found"
          }
        },
        "tags": [
          "Connection"
        ],
        "description": "Retrieves the details of an existing connection. You need only supply the unique connection identifier that was returned upon connection creation.",
        "summary": "Retrieve an existing connection"
      }
    },
    "/setup/connection_role": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/connection_role"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "Connection Role"
        ],
        "description": "Returns a list of connection roles you've previously created. The connection roles are returned in sorted order, with the most recent connection role appearing first.",
        "summary": "Returns a list of connection roles"
      },
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/connection_role"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "Connection Role"
        ],
        "description": "Creates or updates the specified connection role by setting the values of the parameters passed. Any parameters not provided will be left unchanged.",
        "summary": "Create or update a connection role"
      }
    },
    "/setup/connection_role/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "Connection role ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Item not found"
          }
        },
        "tags": [
          "Connection Role"
        ],
        "description": "Deletes the specified connection role.",
        "summary": "Delete a connection role."
      },
      "get": {
        "parameters": [
          {
            "description": "Connection role ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/connection_role"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "description": "Item not found"
          }
        },
        "tags": [
          "Connection Role"
        ],
        "description": "Returns a connection role",
        "summary": "Return a connection role"
      }
    },
    "/setup/data_type/": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/data_type"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "Data Type"
        ],
        "description": "Returns a list of data types you've previously created. The data types are returned in sorted order, with the most recent DataType appearing first.",
        "summary": "Returns a list of data types"
      },
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/data_type"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "Data Type"
        ],
        "description": "Creates or updates the specified data type by setting the values of the parameters passed. Any parameters not provided will be left unchanged.",
        "summary": "Create or update a data type"
      }
    },
    "/setup/data_type/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "data type ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Item not found"
          }
        },
        "tags": [
          "Data Type"
        ],
        "description": "Deletes the specified data type.",
        "summary": "Delete a data type"
      },
      "get": {
        "parameters": [
          {
            "description": "data type ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/data_type"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "description": "Item not found."
          }
        },
        "tags": [
          "Data Type"
        ],
        "description": "Retrieves the details of an existing data type. You need only supply the unique data  type identifier that was returned upon DataType creation.",
        "summary": "Retrieve a data type"
      }
    },
    "/setup/flow/": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/flow"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "Flow"
        ],
        "description": "Returns a list of flows you've previously created. The flows are returned in sorted order, with the most recent flow appearing first.",
        "summary": "Returns a list of flows"
      },
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/flow"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "Flow"
        ],
        "description": "Creates or updates the specified flow. Any parameters not provided will be left unchanged.",
        "summary": "Create or update a flow"
      }
    },
    "/setup/flow/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "Flow ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Item not found"
          }
        },
        "tags": [
          "Flow"
        ],
        "description": "Deletes the specified flow.",
        "summary": "Delete a flow."
      },
      "get": {
        "parameters": [
          {
            "description": "Flow ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/flow"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "description": "Item not found."
          }
        },
        "tags": [
          "Flow"
        ],
        "description": "Retrieves the details of an existing flow. You need only supply the unique flow identifier that was returned upon flow creation.",
        "summary": "Retrieve an existing flow"
      }
    },
    "/setup/namespace/": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/namespace"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "Namespace"
        ],
        "description": "Returns a list of namespaces you've previously created. The namespaces are returned in sorted order, with the most recent namespace appearing first.",
        "summary": "Returns a list of namespaces"
      },
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/namespace"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "Namespace"
        ],
        "description": "Creates or updates the specified namespace. Any parameters not provided will be left unchanged.",
        "summary": "Create or update a namespace"
      }
    },
    "/setup/namespace/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "Namespace ID.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Item not found"
          }
        },
        "tags": [
          "Namespace"
        ],
        "description": "Deletes the specified namespace.",
        "summary": "Delete a namespace"
      },
      "get": {
        "parameters": [
          {
            "description": "Namespace ID.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/namespace"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "description": "Item not found."
          }
        },
        "tags": [
          "Namespace"
        ],
        "description": "Retrieves the details of an existing namespace. You need only supply the unique webhook namespace that was returned upon namespace creation.",
        "summary": "Retrieve an existing namespace"
      }
    },
    "/setup/observer/": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/observer"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "Data Event"
        ],
        "description": "Returns a list of events you've previously created. The events are returned in sorted order, with the most recent event appearing first.",
        "summary": "Returns a list of events"
      },
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/observer"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "Data Event"
        ],
        "description": "Creates or updates the specified event observer. Any parameters not provided will be left unchanged.",
        "summary": "Create or update an event"
      }
    },
    "/setup/observer/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "Observer ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Item not found"
          }
        },
        "tags": [
          "Data Event"
        ],
        "description": "Deletes the specified event observer.",
        "summary": "Delete an event"
      },
      "get": {
        "parameters": [
          {
            "description": "Observer ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/observer"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "description": "Item not found."
          }
        },
        "tags": [
          "Data Event"
        ],
        "description": "Retrieves the details of an existing event. You need only supply the unique event identifier that was returned upon event creation.",
        "summary": "Retrieve an existing event"
      }
    },
    "/setup/scheduler/": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/scheduler"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "Scheduler"
        ],
        "description": "Returns a list of schedulers you've previously created. The schedulers are returned in sorted order, with the most recent scheduler appearing first.",
        "summary": "Returns a list of schedulers"
      },
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/scheduler"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "Scheduler"
        ],
        "description": "Creates or updates the specified scheduler. Any parameters not provided will be left unchanged.",
        "summary": "Create or update an scheduler"
      }
    },
    "/setup/scheduler/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "Scheduler ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Item not found"
          }
        },
        "tags": [
          "Scheduler"
        ],
        "description": "Deletes the specified scheduler.",
        "summary": "Delete an schedule"
      },
      "get": {
        "parameters": [
          {
            "description": "Scheduler ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/scheduler"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "description": "Item not found."
          }
        },
        "tags": [
          "Scheduler"
        ],
        "description": "Retrieves the details of an existing scheduler. You need only supply the unique scheduler identifier that was returned upon scheduler creation.",
        "summary": "Retrieve an existing schedule"
      }
    },
    "/setup/schema/": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/schema"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "Schema"
        ],
        "description": "Returns a list of schemas you've previously created. The schemas are returned in sorted order, with the most recent schema appearing first.",
        "summary": "Returns a list of schemas"
      },
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schema"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "Schema"
        ],
        "description": "Creates or updates the specified schema. Any parameters not provided will be left unchanged.",
        "summary": "Create or update an schema"
      }
    },
    "/setup/schema/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "Schema ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Item not found"
          }
        },
        "tags": [
          "Schema"
        ],
        "description": "Deletes the specified schema.",
        "summary": "Delete an schema."
      },
      "get": {
        "parameters": [
          {
            "description": "Schema ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schema"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "description": "Item not found."
          }
        },
        "tags": [
          "Schema"
        ],
        "description": "Retrieves the details of an existing schema. You need only supply the unique schema identifier that was returned upon schema creation.",
        "summary": "Retrieve an existing schema"
      }
    },
    "/setup/translator/": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/translator"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "Translator"
        ],
        "description": "Returns a list of translators you've previously created. The translators are returned in sorted order, with the most recent translator appearing first.",
        "summary": "Returns a list of translators"
      },
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/translator"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "Translator"
        ],
        "description": "Creates or updates the specified translator. Any parameters not provided will be left unchanged.",
        "summary": "Create or update a translator"
      }
    },
    "/setup/translator/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "Translator ID.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Item not found"
          }
        },
        "tags": [
          "Translator"
        ],
        "description": "Deletes the specified translator.",
        "summary": "Delete a translator"
      },
      "get": {
        "parameters": [
          {
            "description": "Translator ID.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/translator"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "description": "Item not found."
          }
        },
        "tags": [
          "Translator"
        ],
        "description": "Retrieves the details of an existing translator. You need only supply the unique translator identifier that was returned upon translator creation.",
        "summary": "Retrieve an existing translator"
      }
    },
    "/setup/webhook/": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/webhook"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "Webhook"
        ],
        "description": "Returns a list of webhooks you've previously created. The webhooks are returned in sorted order, with the most recent webhook appearing first.",
        "summary": "Returns a list of webhooks"
      },
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "Webhook"
        ],
        "description": "Creates or updates the specified webhook. Any parameters not provided will be left unchanged.",
        "summary": "Create or update a webhook"
      }
    },
    "/setup/webhook/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "Webhook ID.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Item not found"
          }
        },
        "tags": [
          "Webhook"
        ],
        "description": "Deletes the specified webhook.",
        "summary": "Delete a webhook"
      },
      "get": {
        "parameters": [
          {
            "description": "Webhook ID.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "description": "Item not found."
          }
        },
        "tags": [
          "Webhook"
        ],
        "description": "Retrieves the details of an existing webhook. You need only supply the unique webhook identifier that was returned upon webhook creation.",
        "summary": "Retrieve an existing webhook"
      }
    }
  },
  "components": {
    "schemas": {
      "connection": {
        "properties": {
          "parameters": {
            "items": {
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "headers": {
            "items": {
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "namespace": {
            "$ref": "#/components/schemas/namespace"
          },
          "token": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "connection_role": {
        "properties": {
          "connection": {
            "items": {
              "$ref": "#/components/schemas/connection"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "namespace": {
            "$ref": "#/components/schemas/namespace"
          },
          "webhook": {
            "items": {
              "$ref": "#/components/schemas/webhook"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "data_type": {
        "properties": {
          "id": {
            "type": "string"
          },
          "model_schema": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "namespace": {
            "$ref": "#/components/schemas/namespace"
          },
          "show_navigation_link": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "object"
          }
        },
        "type": "object"
      },
      "flow": {
        "properties": {
          "active": {
            "type": "boolean"
          },
          "connection_role": {
            "$ref": "#/components/schemas/connection_role"
          },
          "custom_data_type": {
            "$ref": "#/components/schemas/data_type"
          },
          "event": {
            "type": "object"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "namespace": {
            "$ref": "#/components/schemas/namespace"
          },
          "notify_request": {
            "type": "boolean"
          },
          "notify_response": {
            "type": "boolean"
          },
          "response_translator": {
            "$ref": "#/components/schemas/translator"
          },
          "translator": {
            "$ref": "#/components/schemas/translator"
          },
          "webhook": {
            "$ref": "#/components/schemas/webhook"
          }
        },
        "type": "object"
      },
      "namespace": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "observer": {
        "properties": {
          "data_type": {
            "$ref": "#/components/schemas/data_type"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "namespace": {
            "$ref": "#/components/schemas/namespace"
          },
          "triggers": {
            "type": "string"
          },
          "type": {
            "type": "object"
          }
        },
        "type": "object"
      },
      "scheduler": {
        "properties": {
          "activated": {
            "type": "boolean"
          },
          "expression": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "namespace": {
            "$ref": "#/components/schemas/namespace"
          }
        },
        "type": "object"
      },
      "schema": {
        "properties": {
          "id": {
            "type": "string"
          },
          "namespace": {
            "$ref": "#/components/schemas/namespace"
          },
          "schema": {
            "type": "string"
          },
          "uri": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "translator": {
        "properties": {
          "custom_data_type": {
            "$ref": "#/components/schemas/data_type"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "namespace": {
            "$ref": "#/components/schemas/namespace"
          },
          "source_data_type": {
            "$ref": "#/components/schemas/data_type"
          },
          "style": {
            "enum": [
              "Ruby",
              "Liquid",
              "xslt"
            ],
            "type": "string"
          },
          "target_data_type": {
            "$ref": "#/components/schemas/data_type"
          },
          "transformation": {
            "type": "string"
          },
          "type": {
            "enum": [
              "Import",
              "Export",
              "Convert",
              "Update"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "webhook": {
        "properties": {
          "parameters": {
            "items": {
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "headers": {
            "items": {
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "namespace": {
            "$ref": "#/components/schemas/namespace"
          },
          "path": {
            "type": "string"
          }
        },
        "type": "object"
      }
    },
    "securitySchemes": {
      "X-User-Access-Key": {
        "in": "header",
        "name": "X-User-Access-Key",
        "type": "apiKey"
      },
      "X-User-Access-Token": {
        "in": "header",
        "name": "X-User-Access-Token",
        "type": "apiKey"
      }
    }
  },
  "security": [
    {
      "X-User-Access-Key": [],
      "X-User-Access-Token": []
    }
  ],
  "tags": [
    {
      "description": "The Cenit IO API is organized around REST. Cenit IO is an Open Platform for Data \nand Business Integration (iPaaS) to process, storage and move data in connection \nwith Cloud or On-Premise services. \n\nIt has been designed to orchestrate data flows that may involve several kind of \nendpoints (APIs, Datasets, EDI). It makes possible the automation of all operational \nprocesses in a company, connecting between organization's on-premises infrastructure \nand cloud provider services.\n",
      "name": "Introduction"
    },
    {
      "description": "When you sign up for an account, you are given your first API key.\nYou can generate additional API keys, and delete API keys (as you may\nneed to rotate your keys in the future). You authenticate to Cenit IO API \nby providing your endpoint API keys and token in the header parameters into \nrequest. You can have multiple API keys and token active at one time for \nany endpoint.\n",
      "name": "Authentication"
    },
    {
      "description": "Connection are the representation of endpoint. \n",
      "name": "Connection"
    },
    {
      "description": "Define a group of webhooks that can apply to several connections.       \n",
      "name": "Connection Role"
    },
    {
      "description": "Allow that objects flow through the hub. The creation of new objects \nand/or changes in existing objects will result in events. These events \nultimately result in calls being made to various Flows in your endpoints.\n",
      "name": "Data Event"
    },
    {
      "description": "Schedulers are events triggered on a certain moment and can be optionally recurrent.\n",
      "name": "Scheduler"
    },
    {
      "description": "Define an HTTP Method and params.\n",
      "name": "Webhook"
    },
    {
      "description": "A translator defines a logic for data manipulation. Data manipulation can occurs in the following scenarios:\n  - Importing outside data into Cenit\n  - Updating data already stored in Cenit\n  - Converting data already stored in Cenit\n  - Exporting data outside Cenit\n",
      "name": "Translator"
    },
    {
      "description": "A flow defines how data is processed by the execution of one or more actions, if \nthe data is coming in to Cenit or going out of Cenit. Data processing involve:\n\n  \u208b An execution trigger to start the data processing\n  \n  \u208b Data types\n  \n  \u208b Translators\n  \n  \u208b Connections & Webhooks\n",
      "name": "Flow"
    },
    {
      "description": "Define a data type is as simple as a JSON Schema http://json-schema.org\n",
      "name": "Data Type"
    },
    {
      "description": "Define space of names to use across all the tenants    \n \n",
      "name": "Namespace"
    }
  ],
  "externalDocs": {
    "url": "https://github.com/cenit-io/openapi"
  }
}