{
  "openapi": "3.0.1",
  "info": {
    "title": "ConfigCat Public Management API",
    "description": "The purpose of this API is to access the ConfigCat platform programmatically.\n You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.\n\n**Base API URL**: https://api.configcat.com\n\nIf you prefer the swagger documentation, you can find it here: [Swagger UI](https://api.configcat.com/swagger).\n\nThe API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON \nformat. \n\n**Important:** Do not use this API for accessing and evaluating feature flag values. Use the [SDKs](https://configcat.com/docs/sdk-reference/overview) or the [ConfigCat Proxy](https://configcat.com/docs/advanced/proxy/proxy-overview/) instead.\n\n# OpenAPI Specification\n\nThe complete specification is publicly available in the following formats: \n- [OpenAPI v3](https://api.configcat.com/docs/v1/swagger.json)\n - [Swagger v2](https://api.configcat.com/docs/v1/swagger.v2.json)\n\nYou can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or\n[Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.\n\n# Authentication\nThis API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication). \n\n<!-- ReDoc-Inject: <security-definitions> -->\n\n# Throttling and rate limits\n All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:\n\n| Header | Description |\n| :- | :- |\n| X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. |\n| X-Rate-Limit-Reset     | The time\twhen the current rate limit period resets.\t\t\t\t\t\t  |\n\nWhen the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header.\n",
    "termsOfService": "https://configcat.com/termsofserviceagreement",
    "contact": {
      "name": "ConfigCat",
      "url": "https://configcat.com",
      "email": "support@configcat.com"
    },
    "version": "v1",
    "x-logo": {
      "url": "https://api.configcat.com/resources/configcat-logo-horiz.svg"
    },
    "x-jentic-source-url": "https://api.configcat.com/docs/v1/swagger.json"
  },
  "servers": [
    {
      "url": "https://api.configcat.com"
    }
  ],
  "paths": {
    "/v1/organizations": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "summary": "List Organizations",
        "description": "This endpoint returns the list of the Organizations that belongs to the user.",
        "operationId": "get-organizations",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationModel"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/products": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "List Products",
        "description": "This endpoint returns the list of the Products that belongs to the user.",
        "operationId": "get-products",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductModel"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/products/{productId}/tags": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "List Tags",
        "description": "This endpoint returns the list of the Tags in a \nspecified Product, identified by the `productId` parameter.",
        "operationId": "get-tags",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The identifier of the Product.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TagModel"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "post": {
        "tags": [
          "Tags"
        ],
        "summary": "Create Tag",
        "description": "This endpoint creates a new Tag in a specified Product \nidentified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.",
        "operationId": "create-tag",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The identifier of the Organization.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTagModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTagModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTagModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "When the creation was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/products/{productId}/webhooks": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "List Webhooks",
        "description": "This endpoint returns the list of the Webhooks that belongs to the given Product identified by the\n`productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.",
        "operationId": "get-webhooks",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The identifier of the Product.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WebhookModel"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/products/{productId}/configs": {
      "get": {
        "tags": [
          "Configs"
        ],
        "summary": "List Configs",
        "description": "This endpoint returns the list of the Configs that belongs to the given Product identified by the\n`productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.",
        "operationId": "get-configs",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The identifier of the Product.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConfigModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "post": {
        "tags": [
          "Configs"
        ],
        "summary": "Create Config",
        "description": "This endpoint creates a new Config in a specified Product \nidentified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.",
        "operationId": "create-config",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The identifier of the Product.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateConfigRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateConfigRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateConfigRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "When the creation was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/products/{productId}/environments": {
      "get": {
        "tags": [
          "Environments"
        ],
        "summary": "List Environments",
        "description": "This endpoint returns the list of the Environments that belongs to the given Product identified by the\n`productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.",
        "operationId": "get-environments",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The identifier of the Product.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnvironmentModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "post": {
        "tags": [
          "Environments"
        ],
        "summary": "Create Environment",
        "description": "This endpoint creates a new Environment in a specified Product \nidentified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.",
        "operationId": "create-environment",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The identifier of the Product.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEnvironmentModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEnvironmentModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEnvironmentModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "When the creation was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/products/{productId}/permissions": {
      "get": {
        "tags": [
          "Permission Groups"
        ],
        "summary": "List Permission Groups",
        "description": "This endpoint returns the list of the Permission Groups that belongs to the given Product identified by the\n`productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.",
        "operationId": "get-permission-groups",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The identifier of the Product.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PermissionGroupModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "post": {
        "tags": [
          "Permission Groups"
        ],
        "summary": "Create Permission Group",
        "description": "This endpoint creates a new Permission Group in a specified Product \nidentified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.",
        "operationId": "create-permission-group",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The identifier of the Product.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePermissionGroupRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePermissionGroupRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePermissionGroupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "When the creation was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionGroupModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/products/{productId}/integrations": {
      "get": {
        "tags": [
          "Integrations"
        ],
        "summary": "List Integrations",
        "description": "This endpoint returns the list of the Integrations that belongs to the given Product identified by the\n`productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.",
        "operationId": "get-integrations",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The identifier of the Product.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationsModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "post": {
        "tags": [
          "Integrations"
        ],
        "summary": "Create Integration",
        "description": "This endpoint creates a new Integration in a specified Product \nidentified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.\n\nThe Parameters dictionary differs for each IntegrationType:\n- Datadog\n\t- `apikey`: Required. Datadog API key.\n\t- `site`: Datadog site. Available values: `Us`, `Eu`, `Us1Fed`, `Us3`, `Us5`. Default: `Us`.\n- Slack  \n\tConnecting the Slack integration through the Public Management API will not post messages with the ConfigCat Feature Flags Slack app but with an incoming webhook.\n\t- `incoming_webhook.url`: Required. The [incoming webhook URL](https://api.slack.com/messaging/webhooks) where the integration should post messages.\n- Amplitude\n\t- `apiKey`: Required. Amplitude API Key.\n\t- `secretKey`: Required. Amplitude Secret Key.\n- Mixpanel\n \t- `serviceAccountUserName`: Required. Mixpanel Service Account Username.\n \t- `serviceAccountSecret`: Required. Mixpanel Service Account Secret.\n\t - `projectId`: Required. Mixpanel Project ID.\n\t- `server`: Mixpanel Server. Available values: `StandardServer`, `EUResidencyServer`. Default: `StandardServer`.\n - Twilio Segment\n\t- `writeKey`: Required. Twilio Segment Write Key.\n\t - `server`: Twilio Segment Server. Available values: `Us`, `Eu`. Default: `Us`.\n- PubNub (work in progress)",
        "operationId": "create-integration",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The identifier of the Product.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateIntegrationModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateIntegrationModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateIntegrationModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "When the creation was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/products/{productId}/segments": {
      "get": {
        "tags": [
          "Segments"
        ],
        "summary": "List Segments",
        "description": "This endpoint returns the list of the Segments that belongs to the given Product identified by the\n`productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.",
        "operationId": "get-segments",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The identifier of the Product.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SegmentListModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "post": {
        "tags": [
          "Segments"
        ],
        "summary": "Create Segment",
        "description": "This endpoint creates a new Segment in a specified Product \n identified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.",
        "operationId": "create-segment",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The identifier of the Product.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSegmentModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSegmentModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSegmentModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "When the creation was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SegmentModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/configs/{configId}/settings": {
      "get": {
        "tags": [
          "Feature Flags & Settings"
        ],
        "summary": "List Flags",
        "description": "This endpoint returns the list of the Feature Flags and Settings defined in a \nspecified Config, identified by the `configId` parameter.",
        "operationId": "get-settings",
        "parameters": [
          {
            "name": "configId",
            "in": "path",
            "description": "The identifier of the Config.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SettingModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "post": {
        "tags": [
          "Feature Flags & Settings"
        ],
        "summary": "Create Flag",
        "description": "This endpoint creates a new Feature Flag or Setting in a specified Config\nidentified by the `configId` parameter.\n\n**Important:** The `key` attribute must be unique within the given Config.",
        "operationId": "create-setting",
        "parameters": [
          {
            "name": "configId",
            "in": "path",
            "description": "The identifier of the Config.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSettingInitialValues"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSettingInitialValues"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSettingInitialValues"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "When the creation was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/products/{productId}/auditlogs": {
      "get": {
        "tags": [
          "Audit logs"
        ],
        "summary": "List Audit log items for Product",
        "description": "This endpoint returns the list of Audit log items for a given Product \nand the result can be optionally filtered by Config and/or Environment.\n \nIf neither `fromUtcDateTime` nor `toUtcDateTime` is set, the audit logs for the **last 7 days** will be returned.\n\nThe distance between `fromUtcDateTime` and `toUtcDateTime` cannot exceed **30 days**.",
        "operationId": "get-auditlogs",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The identifier of the Product.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "configId",
            "in": "query",
            "description": "The identifier of the Config.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "environmentId",
            "in": "query",
            "description": "The identifier of the Environment.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "auditLogType",
            "in": "query",
            "description": "Filter Audit logs by Audit log type.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AuditLogType"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "fromUtcDateTime",
            "in": "query",
            "description": "Filter Audit logs by starting UTC date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toUtcDateTime",
            "in": "query",
            "description": "Filter Audit logs by ending UTC date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuditLogItemModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/settings/{settingId}/code-references": {
      "get": {
        "tags": [
          "Code References"
        ],
        "summary": "Get References for Feature Flag or Setting",
        "description": "",
        "parameters": [
          {
            "name": "settingId",
            "in": "path",
            "description": "The identifier of the Feature Flag or Setting.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CodeReferenceModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/configs/{configId}": {
      "get": {
        "tags": [
          "Configs"
        ],
        "summary": "Get Config",
        "description": "This endpoint returns the metadata of a Config\nidentified by the `configId`.",
        "operationId": "get-config",
        "parameters": [
          {
            "name": "configId",
            "in": "path",
            "description": "The identifier of the Config.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When everything is ok, the config data returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "put": {
        "tags": [
          "Configs"
        ],
        "summary": "Update Config",
        "description": "This endpoint updates a Config identified by the `configId` parameter.",
        "operationId": "update-config",
        "parameters": [
          {
            "name": "configId",
            "in": "path",
            "description": "The identifier of the Config.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateConfigRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateConfigRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateConfigRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "delete": {
        "tags": [
          "Configs"
        ],
        "summary": "Delete Config",
        "description": "This endpoint removes a Config identified by the `configId` parameter.",
        "operationId": "delete-config",
        "parameters": [
          {
            "name": "configId",
            "in": "path",
            "description": "The identifier of the Config.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "When the delete was successful."
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/configs/{configId}/deleted-settings": {
      "get": {
        "tags": [
          "Audit logs"
        ],
        "summary": "List Deleted Settings",
        "description": "This endpoint returns the list of Feature Flags and Settings that were deleted from the given Config.",
        "operationId": "get-deleted-settings",
        "parameters": [
          {
            "name": "configId",
            "in": "path",
            "description": "The identifier of the Config.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SettingModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/environments/{environmentId}": {
      "get": {
        "tags": [
          "Environments"
        ],
        "summary": "Get Environment",
        "description": "This endpoint returns the metadata of an Environment \nidentified by the `environmentId`.",
        "operationId": "get-environment",
        "parameters": [
          {
            "name": "environmentId",
            "in": "path",
            "description": "The identifier of the Environment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When everything is ok, the environment data returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "put": {
        "tags": [
          "Environments"
        ],
        "summary": "Update Environment",
        "description": "This endpoint updates an Environment identified by the `environmentId` parameter.",
        "operationId": "update-environment",
        "parameters": [
          {
            "name": "environmentId",
            "in": "path",
            "description": "The identifier of the Environment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEnvironmentModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEnvironmentModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEnvironmentModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "delete": {
        "tags": [
          "Environments"
        ],
        "summary": "Delete Environment",
        "description": "This endpoint removes an Environment identified by the `environmentId` parameter.\nIf the `cleanupAuditLogs` flag is set to true, it also deletes the audit log records related to the environment\n(except for the `Created a new environment` and `Deleted an environment` records).",
        "operationId": "delete-environment",
        "parameters": [
          {
            "name": "environmentId",
            "in": "path",
            "description": "The identifier of the Environment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cleanupAuditLogs",
            "in": "query",
            "description": "An optional flag which indicates whether the audit log records related to the environment should be deleted or not.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "When the delete was successful."
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/permissions/{permissionGroupId}": {
      "get": {
        "tags": [
          "Permission Groups"
        ],
        "summary": "Get Permission Group",
        "description": "This endpoint returns the metadata of a Permission Group \nidentified by the `permissionGroupId`.",
        "operationId": "get-permission-group",
        "parameters": [
          {
            "name": "permissionGroupId",
            "in": "path",
            "description": "The identifier of the Permission Group.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When everything is ok, the permission group data returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionGroupModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "put": {
        "tags": [
          "Permission Groups"
        ],
        "summary": "Update Permission Group",
        "description": "This endpoint updates a Permission Group identified by the `permissionGroupId` parameter.",
        "operationId": "update-permission-group",
        "parameters": [
          {
            "name": "permissionGroupId",
            "in": "path",
            "description": "The identifier of the Permission Group.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePermissionGroupRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePermissionGroupRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePermissionGroupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionGroupModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "delete": {
        "tags": [
          "Permission Groups"
        ],
        "summary": "Delete Permission Group",
        "description": "This endpoint removes a Permission Group identified by the `permissionGroupId` parameter.",
        "operationId": "delete-permission-group",
        "parameters": [
          {
            "name": "permissionGroupId",
            "in": "path",
            "description": "The identifier of the Permission Group.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "When the delete was successful."
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/integrations/{integrationId}": {
      "get": {
        "tags": [
          "Integrations"
        ],
        "summary": "Get Integration",
        "description": "This endpoint returns the metadata of an Integration\nidentified by the `integrationId`.",
        "operationId": "get-integration",
        "parameters": [
          {
            "name": "integrationId",
            "in": "path",
            "description": "The identifier of the Integration.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When everything is ok, the integration data returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "put": {
        "tags": [
          "Integrations"
        ],
        "summary": "Update Integration",
        "description": "This endpoint updates a Config identified by the `integrationId` parameter.\n\nThe Parameters dictionary differs for each IntegrationType:\n - Datadog\n\t- `apikey`: Required. Datadog API key.\n\t- `site`: Datadog site. Available values: `Us`, `Eu`, `Us1Fed`, `Us3`, `Us5`. Default: `Us`.\n- Slack  \n\tConnecting the Slack integration through the Public Management API will not post messages with the ConfigCat Feature Flags Slack app but with an incoming webhook.\n\t- `incoming_webhook.url`: Required. The [incoming webhook URL](https://api.slack.com/messaging/webhooks) where the integration should post messages.\n- Amplitude\n\t- `apiKey`: Required. Amplitude API Key.\n\t- `secretKey`: Required. Amplitude Secret Key.\n- Mixpanel\n\t- `serviceAccountUserName`: Required. Mixpanel Service Account Username.\n\t- `serviceAccountSecret`: Required. Mixpanel Service Account Secret.\n\t- `projectId`: Required. Mixpanel Project ID.\n\t- `server`: Mixpanel Server. Available values: `StandardServer`, `EUResidencyServer`. Default: `StandardServer`.\n- Twilio Segment\n\t- `writeKey`: Required. Twilio Segment Write Key.\n\t- `server`: Twilio Segment Server. Available values: `Us`, `Eu`. Default: `Us`.\n- PubNub (work in progress)",
        "operationId": "update-integration",
        "parameters": [
          {
            "name": "integrationId",
            "in": "path",
            "description": "The identifier of the Integration.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModifyIntegrationRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ModifyIntegrationRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ModifyIntegrationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "delete": {
        "tags": [
          "Integrations"
        ],
        "summary": "Delete Integration",
        "description": "This endpoint removes a Integration identified by the `integrationId` parameter.",
        "operationId": "delete-integration",
        "parameters": [
          {
            "name": "integrationId",
            "in": "path",
            "description": "The identifier of the Integration.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "When the delete was successful."
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/integrationLink/{integrationLinkType}/{key}/details": {
      "get": {
        "tags": [
          "Integration links"
        ],
        "summary": "Get Integration link",
        "description": "",
        "operationId": "get-integration-link-details",
        "parameters": [
          {
            "name": "integrationLinkType",
            "in": "path",
            "description": "The integration link's type.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/IntegrationLinkType"
            }
          },
          {
            "name": "key",
            "in": "path",
            "description": "The key of the integration link.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When everything is ok, the details for the integration link returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationLinkDetailsModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/configs/{configId}/environments/{environmentId}": {
      "get": {
        "tags": [
          "SDK Keys"
        ],
        "summary": "Get SDK Key",
        "description": "This endpoint returns the SDK Key for your Config in a specified Environment.",
        "operationId": "get-sdk-keys",
        "parameters": [
          {
            "name": "configId",
            "in": "path",
            "description": "The identifier of the Config.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "environmentId",
            "in": "path",
            "description": "The identifier of the Environment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SdkKeysModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/me": {
      "get": {
        "tags": [
          "Me"
        ],
        "summary": "Get authenticated user details",
        "description": "",
        "operationId": "get-me",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeModel"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/organizations/{organizationId}/auditlogs": {
      "get": {
        "tags": [
          "Audit logs"
        ],
        "summary": "List Audit log items for Organization",
        "description": "This endpoint returns the list of Audit log items for a given Organization \nand the result can be optionally filtered by Product and/or Config and/or Environment.\n\nIf neither `fromUtcDateTime` nor `toUtcDateTime` is set, the audit logs for the **last 7 days** will be returned.\n\nThe distance between `fromUtcDateTime` and `toUtcDateTime` cannot exceed **30 days**.",
        "operationId": "get-organization-auditlogs",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "The identifier of the Organization.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "productId",
            "in": "query",
            "description": "The identifier of the Product.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "configId",
            "in": "query",
            "description": "The identifier of the Config.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "environmentId",
            "in": "query",
            "description": "The identifier of the Environment.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "auditLogType",
            "in": "query",
            "description": "Filter Audit logs by Audit log type.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AuditLogType"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "fromUtcDateTime",
            "in": "query",
            "description": "Filter Audit logs by starting UTC date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toUtcDateTime",
            "in": "query",
            "description": "Filter Audit logs by ending UTC date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuditLogItemModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/organizations/{organizationId}/members": {
      "get": {
        "tags": [
          "Members"
        ],
        "summary": "List Organization Members",
        "description": "This endpoint returns the list of Members that belongs \nto the given Organization, identified by the `organizationId` parameter.\n\nThe results may vary based on the access level of the user who calls the endpoint: \n - When it's called with Organization Admin privileges, the result will contain each member in the Organization.\n- When it's called without Organization Admin privileges, the result will contain each Organization Admin along with members \n  of those products where the caller has `Team members and permission groups` (`canManageMembers`) permission.",
        "operationId": "get-organization-members",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "The identifier of the Organization.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        },
        "deprecated": true
      }
    },
    "/v2/organizations/{organizationId}/members": {
      "get": {
        "tags": [
          "Members"
        ],
        "summary": "List Organization Members",
        "description": "This endpoint returns the list of Members that belongs \nto the given Organization, identified by the `organizationId` parameter.\n\nThe results may vary based on the access level of the user who calls the endpoint: \n - When it's called with Organization Admin privileges, the result will contain each member in the Organization.\n- When it's called without Organization Admin privileges, the result will contain each Organization Admin along with members \n  of those products where the caller has `Team members and permission groups` (`canManageMembers`) permission.",
        "operationId": "get-organization-members-v2",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "The identifier of the Organization.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationMembersModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/organizations/{organizationId}/invitations": {
      "get": {
        "tags": [
          "Members"
        ],
        "summary": "List Pending Invitations in Organization",
        "description": "This endpoint returns the list of pending invitations within the\n given Organization identified by the `organizationId` parameter.",
        "operationId": "get-pending-invitations-org",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "The identifier of the Organization.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationInvitationModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/products/{productId}/invitations": {
      "get": {
        "tags": [
          "Members"
        ],
        "summary": "List Pending Invitations in Product",
        "description": "This endpoint returns the list of pending invitations within the\n given Product identified by the `productId` parameter.",
        "operationId": "get-pending-invitations",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The identifier of the Product.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvitationModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/products/{productId}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get Product",
        "description": "This endpoint returns the metadata of a Product \nidentified by the `productId`.",
        "operationId": "get-product",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The identifier of the Product.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When everything is ok, the product data is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "put": {
        "tags": [
          "Products"
        ],
        "summary": "Update Product",
        "description": "This endpoint updates a Product identified by the `productId` parameter.",
        "operationId": "update-product",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The identifier of the Product.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "delete": {
        "tags": [
          "Products"
        ],
        "summary": "Delete Product",
        "description": "This endpoint removes a Product identified by the `productId` parameter.",
        "operationId": "delete-product",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The identifier of the Product.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "When the delete was successful."
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/products/{productId}/members": {
      "get": {
        "tags": [
          "Members"
        ],
        "summary": "List Product Members",
        "description": "This endpoint returns the list of Members that belongs \nto the given Product, identified by the `productId` parameter.",
        "operationId": "get-product-members",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The identifier of the Product.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MemberModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/products/{productId}/preferences": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get Product Preferences",
        "description": "This endpoint returns the preferences of a Product \nidentified by the `productId`.",
        "operationId": "get-product-preferences",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The identifier of the Product.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When everything is ok, the product preferences data is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreferencesModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Update Product Preferences",
        "description": "This endpoint updates the preferences of a Product identified by the `productId` parameter.",
        "operationId": "update-product-preferences",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The identifier of the Product.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePreferencesRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePreferencesRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePreferencesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "When the update was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreferencesModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/segments/{segmentId}": {
      "get": {
        "tags": [
          "Segments"
        ],
        "summary": "Get Segment",
        "description": "This endpoint returns the metadata of a Segment\nidentified by the `segmentId`.",
        "operationId": "get-segment",
        "parameters": [
          {
            "name": "segmentId",
            "in": "path",
            "description": "The identifier of the Segment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When everything is ok, the config data returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SegmentModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "put": {
        "tags": [
          "Segments"
        ],
        "summary": "Update Segment",
        "description": "This endpoint updates a Segment identified by the `segmentId` parameter.",
        "operationId": "update-segment",
        "parameters": [
          {
            "name": "segmentId",
            "in": "path",
            "description": "The identifier of the Segment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSegmentModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSegmentModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSegmentModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SegmentModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "delete": {
        "tags": [
          "Segments"
        ],
        "summary": "Delete Segment",
        "description": "This endpoint removes a Segment identified by the `segmentId` parameter.",
        "operationId": "delete-segment",
        "parameters": [
          {
            "name": "segmentId",
            "in": "path",
            "description": "The identifier of the Segment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "When the delete was successful."
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/settings/{settingId}": {
      "get": {
        "tags": [
          "Feature Flags & Settings"
        ],
        "summary": "Get Flag",
        "description": "This endpoint returns the metadata attributes of a Feature Flag or Setting \nidentified by the `settingId` parameter.",
        "operationId": "get-setting",
        "parameters": [
          {
            "name": "settingId",
            "in": "path",
            "description": "The identifier of the Setting.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When everything is ok, the setting data returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "put": {
        "tags": [
          "Feature Flags & Settings"
        ],
        "summary": "Replace Flag",
        "description": "This endpoint replaces the whole value of a Feature Flag or Setting\n identified by the `settingId` parameter.\n\n**Important:** As this endpoint is doing a complete replace, it's important to set every other attribute that you don't \nwant to change in its original state. Not listing one means it will reset.",
        "operationId": "replace-setting",
        "parameters": [
          {
            "name": "settingId",
            "in": "path",
            "description": "The identifier of the Setting.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReplaceSettingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ReplaceSettingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ReplaceSettingModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "When the replace was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "patch": {
        "tags": [
          "Feature Flags & Settings"
        ],
        "summary": "Update Flag",
        "description": "This endpoint updates the metadata of a Feature Flag or Setting \nwith a collection of [JSON Patch](https://jsonpatch.com) operations in a specified Config.\n\nOnly the `name`, `hint` and `tags` attributes are modifiable by this endpoint.\nThe `tags` attribute is a simple collection of the [tag IDs](#operation/get-tags) attached to the given setting.\n\nThe advantage of using JSON Patch is that you can describe individual update operations on a resource\nwithout touching attributes that you don't want to change.\n \nFor example: We have the following resource.\n```json\n{\n  \"settingId\": 5345,\n  \"key\": \"myGrandFeature\",\n  \"name\": \"Tihs is a naem with soem typos.\",\n  \"hint\": \"This flag controls my grandioso feature.\",\n  \"settingType\": \"boolean\",\n  \"tags\": [\n    {\n      \"tagId\": 0, \n      \"name\": \"sample tag\", \n      \"color\": \"whale\"\n    }\n  ]\n }\n```\nIf we send an update request body as below (it changes the `name` and adds the already existing tag with the id `2`):\n```json\n[\n  {\n    \"op\": \"replace\", \n    \"path\": \"/name\", \n    \"value\": \"This is the name without typos.\"\n  }, \n  {\n    \"op\": \"add\", \n    \"path\": \"/tags/-\", \n    \"value\": 2\n  }\n]\n```\nOnly the `name` and `tags` are updated and all the other attributes remain unchanged.\nSo we get a response like this:\n```json\n{\n  \"settingId\": 5345, \n  \"key\": \"myGrandFeature\", \n  \"name\": \"This is the name without typos.\", \n  \"hint\": \"This flag controls my grandioso feature.\", \n  \"settingType\": \"boolean\", \n  \"tags\": [\n    {\n      \"tagId\": 0, \n      \"name\": \"sample tag\", \n      \"color\": \"whale\"\n    }, \n    {\n      \"tagId\": 2, \n      \"name\": \"another tag\", \n      \"color\": \"koala\"\n    }\n  ]\n}\n```",
        "operationId": "update-setting",
        "parameters": [
          {
            "name": "settingId",
            "in": "path",
            "description": "The identifier of the Setting.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JsonPatchOperation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JsonPatchOperation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JsonPatchOperation"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "When the update was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "delete": {
        "tags": [
          "Feature Flags & Settings"
        ],
        "summary": "Delete Flag",
        "description": "This endpoint removes a Feature Flag or Setting from a specified Config, \nidentified by the `configId` parameter.",
        "operationId": "delete-setting",
        "parameters": [
          {
            "name": "settingId",
            "in": "path",
            "description": "The identifier of the Setting.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "When the delete was successful."
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/tags/{tagId}/settings": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "List Settings by Tag",
        "description": "This endpoint returns the list of the Settings that \nhas the specified Tag, identified by the `tagId` parameter.",
        "operationId": "get-settings-by-tag",
        "parameters": [
          {
            "name": "tagId",
            "in": "path",
            "description": "The identifier of the Tag.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When everything is ok, the settings data returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SettingModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/settings/{settingKeyOrId}/value": {
      "get": {
        "tags": [
          "Feature Flag & Setting values using SDK Key"
        ],
        "summary": "Get value",
        "description": "This endpoint returns the value of a Feature Flag or Setting \n in a specified Environment identified by the <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://app.configcat.com/sdkkey\">SDK key</a> passed in the `X-CONFIGCAT-SDKKEY` header.\n\nThe most important attributes in the response are the `value`, `rolloutRules` and `percentageRules`.\nThe `value` represents what the clients will get when the evaluation requests of our SDKs \nare not matching to any of the defined Targeting or Percentage Rules, or when there are no additional rules to evaluate.\n\nThe `rolloutRules` and `percentageRules` attributes are representing the current \nTargeting and Percentage Rules configuration of the actual Feature Flag or Setting \nin an **ordered** collection, which means the order of the returned rules is matching to the\nevaluation order. You can read more about these rules [here](https://configcat.com/docs/targeting/targeting-overview/).",
        "operationId": "get-setting-value-by-sdkkey",
        "parameters": [
          {
            "name": "settingKeyOrId",
            "in": "path",
            "description": "The key or id of the Setting.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-CONFIGCAT-SDKKEY",
            "in": "header",
            "description": "The ConfigCat SDK Key. (https://app.configcat.com/sdkkey)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingValueModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "put": {
        "tags": [
          "Feature Flag & Setting values using SDK Key"
        ],
        "summary": "Replace value",
        "description": "This endpoint replaces the value of a Feature Flag or Setting \nin a specified Environment identified by the <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://app.configcat.com/sdkkey\">SDK key</a> passed in the `X-CONFIGCAT-SDKKEY` header.\n\nOnly the `value`, `rolloutRules` and `percentageRules` attributes are modifiable by this endpoint.\n\n**Important:** As this endpoint is doing a complete replace, it's important to set every other attribute that you don't \nwant to change to its original state. Not listing one means it will reset.\n\nFor example: We have the following resource.\n```json\n{\n  \"rolloutPercentageItems\": [\n    {\n      \"percentage\": 30,\n      \"value\": true\n    },\n    {\n      \"percentage\": 70,\n      \"value\": false\n    }\n  ],\n  \"rolloutRules\": [],\n  \"value\": false\n }\n```\nIf we send a replace request body as below:\n```json\n{\n  \"value\": true\n}\n```\nThen besides that the default served value is set to `true`, all the Percentage Rules are deleted. \nSo we get a response like this:\n```json\n{\n  \"rolloutPercentageItems\": [],\n  \"rolloutRules\": [],\n  \"value\": true\n}\n```",
        "operationId": "replace-setting-value-by-sdkkey",
        "parameters": [
          {
            "name": "settingKeyOrId",
            "in": "path",
            "description": "The key or id of the Setting.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reason",
            "in": "query",
            "description": "The reason note for the Audit Log if the Product's \"Config changes require a reason\" preference is turned on.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-CONFIGCAT-SDKKEY",
            "in": "header",
            "description": "The ConfigCat SDK Key. (https://app.configcat.com/sdkkey)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSettingValueModel"
              },
              "examples": {
                "simple": {
                  "description": "This example turns on a feature flag.",
                  "value": {
                    "value": true
                  }
                },
                "advanced": {
                  "description": "This example turns on a feature flag and adds two items to its percentage evaluation rules.",
                  "value": {
                    "value": true,
                    "rolloutPercentageItems": [
                      {
                        "percentage": 30,
                        "value": true
                      },
                      {
                        "percentage": 70,
                        "value": false
                      }
                    ]
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSettingValueModel"
              },
              "examples": {
                "simple": {
                  "description": "This example turns on a feature flag.",
                  "value": {
                    "value": true
                  }
                },
                "advanced": {
                  "description": "This example turns on a feature flag and adds two items to its percentage evaluation rules.",
                  "value": {
                    "value": true,
                    "rolloutPercentageItems": [
                      {
                        "percentage": 30,
                        "value": true
                      },
                      {
                        "percentage": 70,
                        "value": false
                      }
                    ]
                  }
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSettingValueModel"
              },
              "examples": {
                "simple": {
                  "description": "This example turns on a feature flag.",
                  "value": {
                    "value": true
                  }
                },
                "advanced": {
                  "description": "This example turns on a feature flag and adds two items to its percentage evaluation rules.",
                  "value": {
                    "value": true,
                    "rolloutPercentageItems": [
                      {
                        "percentage": 30,
                        "value": true
                      },
                      {
                        "percentage": 70,
                        "value": false
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingValueModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "patch": {
        "tags": [
          "Feature Flag & Setting values using SDK Key"
        ],
        "summary": "Update value",
        "description": "This endpoint updates the value of a Feature Flag or Setting \n with a collection of [JSON Patch](https://jsonpatch.com) operations in a specified Environment\nidentified by the <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://app.configcat.com/sdkkey\">SDK key</a> passed in the `X-CONFIGCAT-SDKKEY` header.\n\nOnly the `value`, `rolloutRules` and `percentageRules` attributes are modifiable by this endpoint.\n\nThe advantage of using JSON Patch is that you can describe individual update operations on a resource\nwithout touching attributes that you don't want to change. It supports collection reordering, so it also \ncan be used for reordering the targeting rules of a Feature Flag or Setting.\n\nFor example: We have the following resource.\n```json\n{\n  \"rolloutPercentageItems\": [\n    {\n      \"percentage\": 30,\n      \"value\": true\n    },\n    {\n      \"percentage\": 70,\n      \"value\": false\n    }\n  ],\n  \"rolloutRules\": [],\n  \"value\": false\n}\n```\n If we send an update request body as below:\n```json\n[\n  {\n    \"op\": \"replace\",\n    \"path\": \"/value\",\n    \"value\": true\n  }\n]\n```\n Only the default served value is going to be set to `true` and all the Percentage Rules are remaining unchanged.\nSo we get a response like this:\n```json\n{\n  \"rolloutPercentageItems\": [\n    {\n      \"percentage\": 30,\n      \"value\": true\n    },\n    {\n      \"percentage\": 70,\n      \"value\": false\n    }\n  ],\n  \"rolloutRules\": [],\n  \"value\": true\n}\n```",
        "operationId": "update-setting-value-by-sdkkey",
        "parameters": [
          {
            "name": "settingKeyOrId",
            "in": "path",
            "description": "The key or id of the Setting.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reason",
            "in": "query",
            "description": "The reason note for the Audit Log if the Product's \"Config changes require a reason\" preference is turned on.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-CONFIGCAT-SDKKEY",
            "in": "header",
            "description": "The ConfigCat SDK Key. (https://app.configcat.com/sdkkey)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JsonPatchOperation"
                }
              },
              "examples": {
                "turn on a feature flag": {
                  "description": "This example turns on a feature flag.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/value",
                      "value": true
                    }
                  ]
                },
                "add percentage rules": {
                  "description": "This example adds two items to the percentage evaluation rules.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/rolloutPercentageItems/-",
                      "value": {
                        "percentage": 30,
                        "value": true
                      }
                    },
                    {
                      "op": "add",
                      "path": "/rolloutPercentageItems/-",
                      "value": {
                        "percentage": 70,
                        "value": false
                      }
                    }
                  ]
                },
                "add targeting rules": {
                  "description": "This example adds two items to the targeting evaluation rules.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/rolloutRules/-",
                      "value": {
                        "comparisonAttribute": "Identifier",
                        "comparator": "contains",
                        "comparisonValue": "@example.com",
                        "value": true
                      }
                    },
                    {
                      "op": "add",
                      "path": "/rolloutRules/-",
                      "value": {
                        "comparisonAttribute": "Identifier",
                        "comparator": "isOneOf",
                        "comparisonValue": "@blacklist.com",
                        "value": false
                      }
                    }
                  ]
                },
                "modify targeting rule": {
                  "description": "This example modifies the first targeting rule's comparison value and the second's value.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/rolloutRules/0/comparisonValue",
                      "value": "@example2.com"
                    },
                    {
                      "op": "replace",
                      "path": "/rolloutRules/1/value",
                      "value": true
                    }
                  ]
                },
                "add segment rules": {
                  "description": "This example adds a segment to the evaluation rules.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/rolloutRules/-",
                      "value": {
                        "segmentComparator": "isIn",
                        "segmentId": "008a1fd6-8245-4ea8-90dc-a1dc36c1b4ff"
                      }
                    }
                  ]
                },
                "reorder targeting rules": {
                  "description": "This example swaps the first and the second targeting evaluation rule.",
                  "value": [
                    {
                      "op": "move",
                      "path": "/rolloutRules/1",
                      "from": "/rolloutRules/0"
                    }
                  ]
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JsonPatchOperation"
                }
              },
              "examples": {
                "turn on a feature flag": {
                  "description": "This example turns on a feature flag.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/value",
                      "value": true
                    }
                  ]
                },
                "add percentage rules": {
                  "description": "This example adds two items to the percentage evaluation rules.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/rolloutPercentageItems/-",
                      "value": {
                        "percentage": 30,
                        "value": true
                      }
                    },
                    {
                      "op": "add",
                      "path": "/rolloutPercentageItems/-",
                      "value": {
                        "percentage": 70,
                        "value": false
                      }
                    }
                  ]
                },
                "add targeting rules": {
                  "description": "This example adds two items to the targeting evaluation rules.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/rolloutRules/-",
                      "value": {
                        "comparisonAttribute": "Identifier",
                        "comparator": "contains",
                        "comparisonValue": "@example.com",
                        "value": true
                      }
                    },
                    {
                      "op": "add",
                      "path": "/rolloutRules/-",
                      "value": {
                        "comparisonAttribute": "Identifier",
                        "comparator": "isOneOf",
                        "comparisonValue": "@blacklist.com",
                        "value": false
                      }
                    }
                  ]
                },
                "modify targeting rule": {
                  "description": "This example modifies the first targeting rule's comparison value and the second's value.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/rolloutRules/0/comparisonValue",
                      "value": "@example2.com"
                    },
                    {
                      "op": "replace",
                      "path": "/rolloutRules/1/value",
                      "value": true
                    }
                  ]
                },
                "add segment rules": {
                  "description": "This example adds a segment to the evaluation rules.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/rolloutRules/-",
                      "value": {
                        "segmentComparator": "isIn",
                        "segmentId": "008a1fd6-8245-4ea8-90dc-a1dc36c1b4ff"
                      }
                    }
                  ]
                },
                "reorder targeting rules": {
                  "description": "This example swaps the first and the second targeting evaluation rule.",
                  "value": [
                    {
                      "op": "move",
                      "path": "/rolloutRules/1",
                      "from": "/rolloutRules/0"
                    }
                  ]
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JsonPatchOperation"
                }
              },
              "examples": {
                "turn on a feature flag": {
                  "description": "This example turns on a feature flag.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/value",
                      "value": true
                    }
                  ]
                },
                "add percentage rules": {
                  "description": "This example adds two items to the percentage evaluation rules.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/rolloutPercentageItems/-",
                      "value": {
                        "percentage": 30,
                        "value": true
                      }
                    },
                    {
                      "op": "add",
                      "path": "/rolloutPercentageItems/-",
                      "value": {
                        "percentage": 70,
                        "value": false
                      }
                    }
                  ]
                },
                "add targeting rules": {
                  "description": "This example adds two items to the targeting evaluation rules.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/rolloutRules/-",
                      "value": {
                        "comparisonAttribute": "Identifier",
                        "comparator": "contains",
                        "comparisonValue": "@example.com",
                        "value": true
                      }
                    },
                    {
                      "op": "add",
                      "path": "/rolloutRules/-",
                      "value": {
                        "comparisonAttribute": "Identifier",
                        "comparator": "isOneOf",
                        "comparisonValue": "@blacklist.com",
                        "value": false
                      }
                    }
                  ]
                },
                "modify targeting rule": {
                  "description": "This example modifies the first targeting rule's comparison value and the second's value.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/rolloutRules/0/comparisonValue",
                      "value": "@example2.com"
                    },
                    {
                      "op": "replace",
                      "path": "/rolloutRules/1/value",
                      "value": true
                    }
                  ]
                },
                "add segment rules": {
                  "description": "This example adds a segment to the evaluation rules.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/rolloutRules/-",
                      "value": {
                        "segmentComparator": "isIn",
                        "segmentId": "008a1fd6-8245-4ea8-90dc-a1dc36c1b4ff"
                      }
                    }
                  ]
                },
                "reorder targeting rules": {
                  "description": "This example swaps the first and the second targeting evaluation rule.",
                  "value": [
                    {
                      "op": "move",
                      "path": "/rolloutRules/1",
                      "from": "/rolloutRules/0"
                    }
                  ]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingValueModel"
                }
              }
            }
          },
          "204": {
            "description": "When no change applied on the resource."
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/environments/{environmentId}/settings/{settingId}/value": {
      "get": {
        "tags": [
          "Feature Flag & Setting values"
        ],
        "summary": "Get value",
        "description": "This endpoint returns the value of a Feature Flag or Setting \n in a specified Environment identified by the `environmentId` parameter.\n\n The most important attributes in the response are the `value`, `rolloutRules` and `percentageRules`.\nThe `value` represents what the clients will get when the evaluation requests of our SDKs \nare not matching to any of the defined Targeting or Percentage Rules, or when there are no additional rules to evaluate.\n \nThe `rolloutRules` and `percentageRules` attributes are representing the current \nTargeting and Percentage Rules configuration of the actual Feature Flag or Setting \nin an **ordered** collection, which means the order of the returned rules is matching to the\nevaluation order. You can read more about these rules [here](https://configcat.com/docs/targeting/targeting-overview).",
        "operationId": "get-setting-value",
        "parameters": [
          {
            "name": "environmentId",
            "in": "path",
            "description": "The identifier of the Environment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "settingId",
            "in": "path",
            "description": "The id of the Setting.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When everything is ok, the setting value data returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingValueModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "put": {
        "tags": [
          "Feature Flag & Setting values"
        ],
        "summary": "Replace value",
        "description": "This endpoint replaces the whole value of a Feature Flag or Setting in a specified Environment.\n\nOnly the `value`, `rolloutRules` and `percentageRules` attributes are modifiable by this endpoint.\n\n**Important:** As this endpoint is doing a complete replace, it's important to set every other attribute that you don't \nwant to change in its original state. Not listing one means it will reset.\n\nFor example: We have the following resource.\n```json\n{\n  \"rolloutPercentageItems\": [\n    {\n      \"percentage\": 30,\n      \"value\": true\n    },\n    {\n      \"percentage\": 70,\n      \"value\": false\n    }\n  ],\n  \"rolloutRules\": [],\n  \"value\": false\n}\n```\n If we send a replace request body as below:\n```json\n{\n  \"value\": true\n }\n```\nThen besides that the default value is set to `true`, all the Percentage Rules are deleted. \nSo we get a response like this:\n```json\n{\n  \"rolloutPercentageItems\": [],\n  \"rolloutRules\": [],\n  \"value\": true\n}\n```\n\nThe `rolloutRules` property describes two types of rules:\n\n- **Targeting rules**: When you want to add or update a targeting rule, the `comparator`, `comparisonAttribute`, and `comparisonValue` members are required.\n- **Segment rules**: When you want to add add or update a segment rule, the `segmentId` which identifies the desired segment and the `segmentComparator` members are required.",
        "operationId": "replace-setting-value",
        "parameters": [
          {
            "name": "environmentId",
            "in": "path",
            "description": "The identifier of the Environment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "settingId",
            "in": "path",
            "description": "The id of the Setting.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reason",
            "in": "query",
            "description": "The reason note for the Audit Log if the Product's \"Config changes require a reason\" preference is turned on.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSettingValueModel"
              },
              "examples": {
                "simple": {
                  "description": "This example turns on a feature flag.",
                  "value": {
                    "value": true
                  }
                },
                "advanced": {
                  "description": "This example turns on a feature flag and adds two items to its percentage evaluation rules.",
                  "value": {
                    "value": true,
                    "rolloutPercentageItems": [
                      {
                        "percentage": 30,
                        "value": true
                      },
                      {
                        "percentage": 70,
                        "value": false
                      }
                    ]
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSettingValueModel"
              },
              "examples": {
                "simple": {
                  "description": "This example turns on a feature flag.",
                  "value": {
                    "value": true
                  }
                },
                "advanced": {
                  "description": "This example turns on a feature flag and adds two items to its percentage evaluation rules.",
                  "value": {
                    "value": true,
                    "rolloutPercentageItems": [
                      {
                        "percentage": 30,
                        "value": true
                      },
                      {
                        "percentage": 70,
                        "value": false
                      }
                    ]
                  }
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSettingValueModel"
              },
              "examples": {
                "simple": {
                  "description": "This example turns on a feature flag.",
                  "value": {
                    "value": true
                  }
                },
                "advanced": {
                  "description": "This example turns on a feature flag and adds two items to its percentage evaluation rules.",
                  "value": {
                    "value": true,
                    "rolloutPercentageItems": [
                      {
                        "percentage": 30,
                        "value": true
                      },
                      {
                        "percentage": 70,
                        "value": false
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingValueModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "patch": {
        "tags": [
          "Feature Flag & Setting values"
        ],
        "summary": "Update value",
        "description": "This endpoint updates the value of a Feature Flag or Setting \n with a collection of [JSON Patch](https://jsonpatch.com) operations in a specified Environment.\n\nOnly the `value`, `rolloutRules` and `percentageRules` attributes are modifiable by this endpoint.\n\nThe advantage of using JSON Patch is that you can describe individual update operations on a resource\nwithout touching attributes that you don't want to change. It supports collection reordering, so it also \ncan be used for reordering the targeting rules of a Feature Flag or Setting.\n\nFor example: We have the following resource.\n```json\n{\n  \"rolloutPercentageItems\": [\n    {\n      \"percentage\": 30,\n      \"value\": true\n    },\n    {\n      \"percentage\": 70,\n      \"value\": false\n    }\n  ],\n  \"rolloutRules\": [],\n  \"value\": false\n}\n```\n If we send an update request body as below:\n```json\n[\n  {\n    \"op\": \"replace\",\n    \"path\": \"/value\",\n    \"value\": true\n  }\n]\n```\n Only the default value is going to be set to `true` and all the Percentage Rules are remaining unchanged.\nSo we get a response like this:\n```json\n{\n  \"rolloutPercentageItems\": [\n    {\n      \"percentage\": 30,\n      \"value\": true\n    },\n    {\n      \"percentage\": 70,\n      \"value\": false\n    }\n  ],\n  \"rolloutRules\": [],\n  \"value\": true\n}\n```\n \nThe `rolloutRules` property describes two types of rules:\n\n- **Targeting rules**: When you want to add or update a targeting rule, the `comparator`, `comparisonAttribute`, and `comparisonValue` members are required.\n- **Segment rules**: When you want to add add or update a segment rule, the `segmentId` which identifies the desired segment and the `segmentComparator` members are required.",
        "operationId": "update-setting-value",
        "parameters": [
          {
            "name": "environmentId",
            "in": "path",
            "description": "The identifier of the Environment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "settingId",
            "in": "path",
            "description": "The id of the Setting.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reason",
            "in": "query",
            "description": "The reason note for the Audit Log if the Product's \"Config changes require a reason\" preference is turned on.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JsonPatchOperation"
                }
              },
              "examples": {
                "turn on a feature flag": {
                  "description": "This example turns on a feature flag.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/value",
                      "value": true
                    }
                  ]
                },
                "add percentage rules": {
                  "description": "This example adds two items to the percentage evaluation rules.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/rolloutPercentageItems/-",
                      "value": {
                        "percentage": 30,
                        "value": true
                      }
                    },
                    {
                      "op": "add",
                      "path": "/rolloutPercentageItems/-",
                      "value": {
                        "percentage": 70,
                        "value": false
                      }
                    }
                  ]
                },
                "add targeting rules": {
                  "description": "This example adds two items to the targeting evaluation rules.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/rolloutRules/-",
                      "value": {
                        "comparisonAttribute": "Identifier",
                        "comparator": "contains",
                        "comparisonValue": "@example.com",
                        "value": true
                      }
                    },
                    {
                      "op": "add",
                      "path": "/rolloutRules/-",
                      "value": {
                        "comparisonAttribute": "Identifier",
                        "comparator": "isOneOf",
                        "comparisonValue": "@blacklist.com",
                        "value": false
                      }
                    }
                  ]
                },
                "modify targeting rule": {
                  "description": "This example modifies the first targeting rule's comparison value and the second's value.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/rolloutRules/0/comparisonValue",
                      "value": "@example2.com"
                    },
                    {
                      "op": "replace",
                      "path": "/rolloutRules/1/value",
                      "value": true
                    }
                  ]
                },
                "add segment rules": {
                  "description": "This example adds a segment to the evaluation rules.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/rolloutRules/-",
                      "value": {
                        "segmentComparator": "isIn",
                        "segmentId": "008a1fd6-8245-4ea8-90dc-a1dc36c1b4ff"
                      }
                    }
                  ]
                },
                "reorder targeting rules": {
                  "description": "This example swaps the first and the second targeting evaluation rule.",
                  "value": [
                    {
                      "op": "move",
                      "path": "/rolloutRules/1",
                      "from": "/rolloutRules/0"
                    }
                  ]
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JsonPatchOperation"
                }
              },
              "examples": {
                "turn on a feature flag": {
                  "description": "This example turns on a feature flag.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/value",
                      "value": true
                    }
                  ]
                },
                "add percentage rules": {
                  "description": "This example adds two items to the percentage evaluation rules.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/rolloutPercentageItems/-",
                      "value": {
                        "percentage": 30,
                        "value": true
                      }
                    },
                    {
                      "op": "add",
                      "path": "/rolloutPercentageItems/-",
                      "value": {
                        "percentage": 70,
                        "value": false
                      }
                    }
                  ]
                },
                "add targeting rules": {
                  "description": "This example adds two items to the targeting evaluation rules.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/rolloutRules/-",
                      "value": {
                        "comparisonAttribute": "Identifier",
                        "comparator": "contains",
                        "comparisonValue": "@example.com",
                        "value": true
                      }
                    },
                    {
                      "op": "add",
                      "path": "/rolloutRules/-",
                      "value": {
                        "comparisonAttribute": "Identifier",
                        "comparator": "isOneOf",
                        "comparisonValue": "@blacklist.com",
                        "value": false
                      }
                    }
                  ]
                },
                "modify targeting rule": {
                  "description": "This example modifies the first targeting rule's comparison value and the second's value.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/rolloutRules/0/comparisonValue",
                      "value": "@example2.com"
                    },
                    {
                      "op": "replace",
                      "path": "/rolloutRules/1/value",
                      "value": true
                    }
                  ]
                },
                "add segment rules": {
                  "description": "This example adds a segment to the evaluation rules.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/rolloutRules/-",
                      "value": {
                        "segmentComparator": "isIn",
                        "segmentId": "008a1fd6-8245-4ea8-90dc-a1dc36c1b4ff"
                      }
                    }
                  ]
                },
                "reorder targeting rules": {
                  "description": "This example swaps the first and the second targeting evaluation rule.",
                  "value": [
                    {
                      "op": "move",
                      "path": "/rolloutRules/1",
                      "from": "/rolloutRules/0"
                    }
                  ]
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JsonPatchOperation"
                }
              },
              "examples": {
                "turn on a feature flag": {
                  "description": "This example turns on a feature flag.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/value",
                      "value": true
                    }
                  ]
                },
                "add percentage rules": {
                  "description": "This example adds two items to the percentage evaluation rules.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/rolloutPercentageItems/-",
                      "value": {
                        "percentage": 30,
                        "value": true
                      }
                    },
                    {
                      "op": "add",
                      "path": "/rolloutPercentageItems/-",
                      "value": {
                        "percentage": 70,
                        "value": false
                      }
                    }
                  ]
                },
                "add targeting rules": {
                  "description": "This example adds two items to the targeting evaluation rules.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/rolloutRules/-",
                      "value": {
                        "comparisonAttribute": "Identifier",
                        "comparator": "contains",
                        "comparisonValue": "@example.com",
                        "value": true
                      }
                    },
                    {
                      "op": "add",
                      "path": "/rolloutRules/-",
                      "value": {
                        "comparisonAttribute": "Identifier",
                        "comparator": "isOneOf",
                        "comparisonValue": "@blacklist.com",
                        "value": false
                      }
                    }
                  ]
                },
                "modify targeting rule": {
                  "description": "This example modifies the first targeting rule's comparison value and the second's value.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/rolloutRules/0/comparisonValue",
                      "value": "@example2.com"
                    },
                    {
                      "op": "replace",
                      "path": "/rolloutRules/1/value",
                      "value": true
                    }
                  ]
                },
                "add segment rules": {
                  "description": "This example adds a segment to the evaluation rules.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/rolloutRules/-",
                      "value": {
                        "segmentComparator": "isIn",
                        "segmentId": "008a1fd6-8245-4ea8-90dc-a1dc36c1b4ff"
                      }
                    }
                  ]
                },
                "reorder targeting rules": {
                  "description": "This example swaps the first and the second targeting evaluation rule.",
                  "value": [
                    {
                      "op": "move",
                      "path": "/rolloutRules/1",
                      "from": "/rolloutRules/0"
                    }
                  ]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "When the patch was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingValueModel"
                }
              }
            }
          },
          "204": {
            "description": "When no change applied on the resource."
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v2/settings/{settingKeyOrId}/value": {
      "get": {
        "tags": [
          "Feature Flag & Setting values using SDK Key V2"
        ],
        "summary": "Get value",
        "description": "This endpoint returns the value of a Feature Flag or Setting\n in a specified Environment identified by the <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://app.configcat.com/sdkkey\">SDK key</a> passed in the `X-CONFIGCAT-SDKKEY` header.\n\nThe most important fields in the response are the `defaultValue`, `targetingRules`.\nThe `defaultValue` represents what the clients will get when the evaluation requests of our SDKs\nare not matching to any of the defined Targeting Rules, or when there are no additional rules to evaluate.\n\nThe `targetingRules` represents the current\nTargeting Rule configuration of the actual Feature Flag or Setting\nin an **ordered** collection, which means the order of the returned rules is matching to the\nevaluation order. You can read more about these rules [here](https://configcat.com/docs/targeting/targeting-overview/).\n \nThe `percentageEvaluationAttribute` represents the custom [User Object](https://configcat.com/docs/targeting/user-object/) attribute that must be used at the [percentage evaluation](https://configcat.com/docs/advanced/targeting/#anatomy-of-the-percentage-based-targeting) of the Feature Flag or Setting.",
        "operationId": "get-setting-value-by-sdkkey-v2",
        "parameters": [
          {
            "name": "settingKeyOrId",
            "in": "path",
            "description": "The key or id of the Setting.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-CONFIGCAT-SDKKEY",
            "in": "header",
            "description": "The ConfigCat SDK Key. (https://app.configcat.com/sdkkey)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingFormulaModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "put": {
        "tags": [
          "Feature Flag & Setting values using SDK Key V2"
        ],
        "summary": "Replace value",
        "description": "This endpoint replaces the value and the Targeting Rules of a Feature Flag or Setting\nin a specified Environment identified by the <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://app.configcat.com/sdkkey\">SDK key</a> passed in the `X-CONFIGCAT-SDKKEY` header.\n\nOnly the `defaultValue`, `targetingRules`, and `percentageEvaluationAttribute` fields are modifiable by this endpoint.\n\n**Important:** As this endpoint is doing a complete replace, it's important to set every other field that you don't\nwant to change to its original state. Not listing one means it will reset.\n\nFor example: We have the following resource of a Feature Flag.\n```json\n{\n  \"defaultValue\": {\n    \"boolValue\": false\n  },\n  \"targetingRules\": [\n    {\n      \"conditions\": [\n        {\n          \"userCondition\": {\n            \"comparisonAttribute\": \"Email\",\n            \"comparator\": \"sensitiveTextEquals\",\n            \"comparisonValue\": {\n              \"stringValue\": \"test@example.com\"\n            }\n          }\n        }\n      ],\n      \"percentageOptions\": [],\n      \"value\": {\n        \"boolValue\": true\n      }\n    }\n  ]\n}\n```\nIf we send a replace request body as below:\n```json\n{\n  \"defaultValue\": {\n    \"boolValue\": true\n  }\n}\n```\nThen besides that the default served value is set to `true`, all the Targeting Rules are deleted.\n So we get a response like this:\n```json\n{\n  \"defaultValue\": {\n    \"boolValue\": true\n  },\n  \"targetingRules\": []\n}\n```",
        "operationId": "replace-setting-value-by-sdkkey-v2",
        "parameters": [
          {
            "name": "settingKeyOrId",
            "in": "path",
            "description": "The key or id of the Setting.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reason",
            "in": "query",
            "description": "The reason note for the Audit Log if the Product's \"Config changes require a reason\" preference is turned on.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-CONFIGCAT-SDKKEY",
            "in": "header",
            "description": "The ConfigCat SDK Key. (https://app.configcat.com/sdkkey)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEvaluationFormulaModel"
              },
              "examples": {
                "simple": {
                  "description": "This example turns on a feature flag.",
                  "value": {
                    "defaultValue": {
                      "boolValue": true
                    }
                  }
                },
                "advanced": {
                  "description": "This example turns on a feature flag and adds an evaluation rule with two conditions to its targeting rules.",
                  "value": {
                    "defaultValue": {
                      "boolValue": true
                    },
                    "targetingRules": [
                      {
                        "conditions": [
                          {
                            "userCondition": {
                              "comparator": "sensitiveTextEquals",
                              "comparisonAttribute": "Email",
                              "comparisonValue": {
                                "stringValue": "example@test.com"
                              }
                            }
                          },
                          {
                            "userCondition": {
                              "comparator": "sensitiveTextEquals",
                              "comparisonAttribute": "Role",
                              "comparisonValue": {
                                "stringValue": "Developer"
                              }
                            }
                          }
                        ],
                        "value": {
                          "boolValue": false
                        }
                      }
                    ]
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEvaluationFormulaModel"
              },
              "examples": {
                "simple": {
                  "description": "This example turns on a feature flag.",
                  "value": {
                    "defaultValue": {
                      "boolValue": true
                    }
                  }
                },
                "advanced": {
                  "description": "This example turns on a feature flag and adds an evaluation rule with two conditions to its targeting rules.",
                  "value": {
                    "defaultValue": {
                      "boolValue": true
                    },
                    "targetingRules": [
                      {
                        "conditions": [
                          {
                            "userCondition": {
                              "comparator": "sensitiveTextEquals",
                              "comparisonAttribute": "Email",
                              "comparisonValue": {
                                "stringValue": "example@test.com"
                              }
                            }
                          },
                          {
                            "userCondition": {
                              "comparator": "sensitiveTextEquals",
                              "comparisonAttribute": "Role",
                              "comparisonValue": {
                                "stringValue": "Developer"
                              }
                            }
                          }
                        ],
                        "value": {
                          "boolValue": false
                        }
                      }
                    ]
                  }
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEvaluationFormulaModel"
              },
              "examples": {
                "simple": {
                  "description": "This example turns on a feature flag.",
                  "value": {
                    "defaultValue": {
                      "boolValue": true
                    }
                  }
                },
                "advanced": {
                  "description": "This example turns on a feature flag and adds an evaluation rule with two conditions to its targeting rules.",
                  "value": {
                    "defaultValue": {
                      "boolValue": true
                    },
                    "targetingRules": [
                      {
                        "conditions": [
                          {
                            "userCondition": {
                              "comparator": "sensitiveTextEquals",
                              "comparisonAttribute": "Email",
                              "comparisonValue": {
                                "stringValue": "example@test.com"
                              }
                            }
                          },
                          {
                            "userCondition": {
                              "comparator": "sensitiveTextEquals",
                              "comparisonAttribute": "Role",
                              "comparisonValue": {
                                "stringValue": "Developer"
                              }
                            }
                          }
                        ],
                        "value": {
                          "boolValue": false
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingFormulaModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "patch": {
        "tags": [
          "Feature Flag & Setting values using SDK Key V2"
        ],
        "summary": "Update value",
        "description": "This endpoint updates the value of a Feature Flag or Setting\n with a collection of [JSON Patch](https://jsonpatch.com) operations in a specified Environment.\n\nOnly the `defaultValue`, `targetingRules`, and `percentageEvaluationAttribute` fields are modifiable by this endpoint.\n\nThe advantage of using JSON Patch is that you can describe individual update operations on a resource\nwithout touching attributes that you don't want to change. It supports collection reordering, so it also\ncan be used for reordering the targeting rules of a Feature Flag or Setting.\n\nFor example: We have the following resource of a Feature Flag.\n```json\n{\n  \"defaultValue\": {\n    \"boolValue\": false\n  },\n  \"targetingRules\": [\n    {\n      \"conditions\": [\n        {\n          \"userCondition\": {\n            \"comparisonAttribute\": \"Email\",\n            \"comparator\": \"sensitiveTextEquals\",\n            \"comparisonValue\": {\n              \"stringValue\": \"test@example.com\"\n            }\n          }\n        }\n      ],\n      \"percentageOptions\": [],\n      \"value\": {\n        \"boolValue\": true\n      }\n    }\n  ]\n}\n```\nIf we send an update request body as below:\n```json\n[\n  {\n    \"op\": \"replace\",\n    \"path\": \"/targetingRules/0/value/boolValue\",\n    \"value\": true\n  }\n]\n```\nOnly the first Targeting Rule's `value` is going to be set to `false` and all the other fields are remaining unchanged.\n \nSo we get a response like this:\n```json\n{\n  \"defaultValue\": {\n    \"boolValue\": false\n  },\n  \"targetingRules\": [\n    {\n      \"conditions\": [\n        {\n          \"userCondition\": {\n            \"comparisonAttribute\": \"Email\",\n            \"comparator\": \"sensitiveTextEquals\",\n            \"comparisonValue\": {\n              \"stringValue\": \"test@example.com\"\n            }\n          }\n        }\n      ],\n      \"percentageOptions\": [],\n      \"value\": {\n        \"boolValue\": false\n      }\n    }\n  ]\n}\n```",
        "operationId": "update-setting-value-by-sdkkey-v2",
        "parameters": [
          {
            "name": "settingKeyOrId",
            "in": "path",
            "description": "The key or id of the Setting.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reason",
            "in": "query",
            "description": "The reason note for the Audit Log if the Product's \"Config changes require a reason\" preference is turned on.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-CONFIGCAT-SDKKEY",
            "in": "header",
            "description": "The ConfigCat SDK Key. (https://app.configcat.com/sdkkey)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JsonPatchOperation"
                }
              },
              "examples": {
                "turn on a feature flag": {
                  "description": "This example turns on a feature flag.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/defaultValue/boolValue",
                      "value": true
                    }
                  ]
                },
                "add targeting rules": {
                  "description": "This example adds an evaluation rule with two conditions to the Flag's targeting rules.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/targetingRules/-",
                      "value": {
                        "conditions": [
                          {
                            "userCondition": {
                              "comparator": "sensitiveTextEquals",
                              "comparisonAttribute": "Email",
                              "comparisonValue": {
                                "stringValue": "example@test.com"
                              }
                            }
                          },
                          {
                            "userCondition": {
                              "comparator": "sensitiveTextEquals",
                              "comparisonAttribute": "Role",
                              "comparisonValue": {
                                "stringValue": "Developer"
                              }
                            }
                          }
                        ],
                        "value": {
                          "boolValue": false
                        }
                      }
                    }
                  ]
                },
                "modify targeting rule": {
                  "description": "This example modifies a targeting rule's value.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/targetingRules/0/value/boolValue",
                      "value": "true"
                    }
                  ]
                },
                "modify targeting rule's condition": {
                  "description": "This example modifies a condition's comparison attribute within a targeting rule.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/targetingRules/0/conditions/0/userCondition/comparisonAttribute",
                      "value": "Role"
                    }
                  ]
                },
                "add segment condition": {
                  "description": "This example adds a segment condition to a targeting rule.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/targetingRules/0/conditions/-",
                      "value": {
                        "segmentCondition": {
                          "segmentComparator": "isIn",
                          "segmentId": "008a1fd6-8245-4ea8-90dc-a1dc36c1b4ff"
                        }
                      }
                    }
                  ]
                },
                "add prerequisite flag condition": {
                  "description": "This example adds a prerequisite flag condition to a targeting rule.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/targetingRules/0/conditions/-",
                      "value": {
                        "prerequisiteFlagCondition": {
                          "prerequisiteSettingId": "isIn",
                          "comparator": "008a1fd6-8245-4ea8-90dc-a1dc36c1b4ff",
                          "prerequisiteComparisonValue": {
                            "boolValue": true
                          }
                        }
                      }
                    }
                  ]
                },
                "reorder targeting rules": {
                  "description": "This example swaps the first and the second targeting rule.",
                  "value": [
                    {
                      "op": "move",
                      "path": "/targetingRules/1",
                      "from": "/targetingRules/0"
                    }
                  ]
                },
                "reorder targeting rule conditions": {
                  "description": "This example swaps the first and the second condition of a targeting rule.",
                  "value": [
                    {
                      "op": "move",
                      "path": "/targetingRules/0/conditions/1",
                      "from": "/targetingRules/0/conditions/0"
                    }
                  ]
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JsonPatchOperation"
                }
              },
              "examples": {
                "turn on a feature flag": {
                  "description": "This example turns on a feature flag.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/defaultValue/boolValue",
                      "value": true
                    }
                  ]
                },
                "add targeting rules": {
                  "description": "This example adds an evaluation rule with two conditions to the Flag's targeting rules.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/targetingRules/-",
                      "value": {
                        "conditions": [
                          {
                            "userCondition": {
                              "comparator": "sensitiveTextEquals",
                              "comparisonAttribute": "Email",
                              "comparisonValue": {
                                "stringValue": "example@test.com"
                              }
                            }
                          },
                          {
                            "userCondition": {
                              "comparator": "sensitiveTextEquals",
                              "comparisonAttribute": "Role",
                              "comparisonValue": {
                                "stringValue": "Developer"
                              }
                            }
                          }
                        ],
                        "value": {
                          "boolValue": false
                        }
                      }
                    }
                  ]
                },
                "modify targeting rule": {
                  "description": "This example modifies a targeting rule's value.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/targetingRules/0/value/boolValue",
                      "value": "true"
                    }
                  ]
                },
                "modify targeting rule's condition": {
                  "description": "This example modifies a condition's comparison attribute within a targeting rule.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/targetingRules/0/conditions/0/userCondition/comparisonAttribute",
                      "value": "Role"
                    }
                  ]
                },
                "add segment condition": {
                  "description": "This example adds a segment condition to a targeting rule.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/targetingRules/0/conditions/-",
                      "value": {
                        "segmentCondition": {
                          "segmentComparator": "isIn",
                          "segmentId": "008a1fd6-8245-4ea8-90dc-a1dc36c1b4ff"
                        }
                      }
                    }
                  ]
                },
                "add prerequisite flag condition": {
                  "description": "This example adds a prerequisite flag condition to a targeting rule.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/targetingRules/0/conditions/-",
                      "value": {
                        "prerequisiteFlagCondition": {
                          "prerequisiteSettingId": "isIn",
                          "comparator": "008a1fd6-8245-4ea8-90dc-a1dc36c1b4ff",
                          "prerequisiteComparisonValue": {
                            "boolValue": true
                          }
                        }
                      }
                    }
                  ]
                },
                "reorder targeting rules": {
                  "description": "This example swaps the first and the second targeting rule.",
                  "value": [
                    {
                      "op": "move",
                      "path": "/targetingRules/1",
                      "from": "/targetingRules/0"
                    }
                  ]
                },
                "reorder targeting rule conditions": {
                  "description": "This example swaps the first and the second condition of a targeting rule.",
                  "value": [
                    {
                      "op": "move",
                      "path": "/targetingRules/0/conditions/1",
                      "from": "/targetingRules/0/conditions/0"
                    }
                  ]
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JsonPatchOperation"
                }
              },
              "examples": {
                "turn on a feature flag": {
                  "description": "This example turns on a feature flag.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/defaultValue/boolValue",
                      "value": true
                    }
                  ]
                },
                "add targeting rules": {
                  "description": "This example adds an evaluation rule with two conditions to the Flag's targeting rules.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/targetingRules/-",
                      "value": {
                        "conditions": [
                          {
                            "userCondition": {
                              "comparator": "sensitiveTextEquals",
                              "comparisonAttribute": "Email",
                              "comparisonValue": {
                                "stringValue": "example@test.com"
                              }
                            }
                          },
                          {
                            "userCondition": {
                              "comparator": "sensitiveTextEquals",
                              "comparisonAttribute": "Role",
                              "comparisonValue": {
                                "stringValue": "Developer"
                              }
                            }
                          }
                        ],
                        "value": {
                          "boolValue": false
                        }
                      }
                    }
                  ]
                },
                "modify targeting rule": {
                  "description": "This example modifies a targeting rule's value.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/targetingRules/0/value/boolValue",
                      "value": "true"
                    }
                  ]
                },
                "modify targeting rule's condition": {
                  "description": "This example modifies a condition's comparison attribute within a targeting rule.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/targetingRules/0/conditions/0/userCondition/comparisonAttribute",
                      "value": "Role"
                    }
                  ]
                },
                "add segment condition": {
                  "description": "This example adds a segment condition to a targeting rule.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/targetingRules/0/conditions/-",
                      "value": {
                        "segmentCondition": {
                          "segmentComparator": "isIn",
                          "segmentId": "008a1fd6-8245-4ea8-90dc-a1dc36c1b4ff"
                        }
                      }
                    }
                  ]
                },
                "add prerequisite flag condition": {
                  "description": "This example adds a prerequisite flag condition to a targeting rule.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/targetingRules/0/conditions/-",
                      "value": {
                        "prerequisiteFlagCondition": {
                          "prerequisiteSettingId": "isIn",
                          "comparator": "008a1fd6-8245-4ea8-90dc-a1dc36c1b4ff",
                          "prerequisiteComparisonValue": {
                            "boolValue": true
                          }
                        }
                      }
                    }
                  ]
                },
                "reorder targeting rules": {
                  "description": "This example swaps the first and the second targeting rule.",
                  "value": [
                    {
                      "op": "move",
                      "path": "/targetingRules/1",
                      "from": "/targetingRules/0"
                    }
                  ]
                },
                "reorder targeting rule conditions": {
                  "description": "This example swaps the first and the second condition of a targeting rule.",
                  "value": [
                    {
                      "op": "move",
                      "path": "/targetingRules/0/conditions/1",
                      "from": "/targetingRules/0/conditions/0"
                    }
                  ]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingFormulaModel"
                }
              }
            }
          },
          "204": {
            "description": "When no change applied on the resource."
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v2/environments/{environmentId}/settings/{settingId}/value": {
      "get": {
        "tags": [
          "Feature Flag & Setting values V2"
        ],
        "summary": "Get value",
        "description": "This endpoint returns the value of a Feature Flag or Setting\n in a specified Environment identified by the `environmentId` parameter.\n\n The most important fields in the response are the `defaultValue`, `targetingRules`, and `percentageEvaluationAttribute`.\nThe `defaultValue` represents what the clients will get when the evaluation requests of our SDKs\nare not matching to any of the defined Targeting Rules, or when there are no additional rules to evaluate.\n\nThe `targetingRules` represents the current\nTargeting Rule configuration of the actual Feature Flag or Setting\nin an **ordered** collection, which means the order of the returned rules is matching to the\nevaluation order. You can read more about these rules [here](https://configcat.com/docs/targeting/targeting-overview/).\n \nThe `percentageEvaluationAttribute` represents the custom [User Object](https://configcat.com/docs/targeting/user-object/) attribute that must be used for [percentage evaluation](https://configcat.com/docs/targeting/percentage-options/) of the Feature Flag or Setting.",
        "operationId": "get-setting-value-v2",
        "parameters": [
          {
            "name": "environmentId",
            "in": "path",
            "description": "The identifier of the Environment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "settingId",
            "in": "path",
            "description": "The id of the Setting.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When everything is ok, the setting value data returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingFormulaModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "put": {
        "tags": [
          "Feature Flag & Setting values V2"
        ],
        "summary": "Replace value",
        "description": "This endpoint replaces the value and the Targeting Rules of a Feature Flag or Setting\nin a specified Environment identified by the <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://app.configcat.com/sdkkey\">SDK key</a> passed in the `X-CONFIGCAT-SDKKEY` header.\n\nOnly the `defaultValue`, `targetingRules`, and `percentageEvaluationAttribute` fields are modifiable by this endpoint.\n\n**Important:** As this endpoint is doing a complete replace, it's important to set every other field that you don't\nwant to change to its original state. Not listing one means it will reset.\n\nFor example: We have the following resource of a Feature Flag.\n```json\n{\n  \"defaultValue\": {\n    \"boolValue\": false\n  },\n  \"targetingRules\": [\n    {\n      \"conditions\": [\n        {\n          \"userCondition\": {\n            \"comparisonAttribute\": \"Email\",\n            \"comparator\": \"sensitiveTextEquals\",\n            \"comparisonValue\": {\n              \"stringValue\": \"test@example.com\"\n            }\n          }\n        }\n      ],\n      \"percentageOptions\": [],\n      \"value\": {\n        \"boolValue\": true\n      }\n    }\n  ]\n}\n```\nIf we send a replace request body as below:\n```json\n{\n  \"defaultValue\": {\n    \"boolValue\": true\n  }\n}\n```\nThen besides that the default served value is set to `true`, all the Targeting Rules are deleted.\n So we get a response like this:\n```json\n{\n  \"defaultValue\": {\n    \"boolValue\": true\n  },\n  \"targetingRules\": []\n}\n```",
        "operationId": "replace-setting-value-v2",
        "parameters": [
          {
            "name": "environmentId",
            "in": "path",
            "description": "The identifier of the Environment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "settingId",
            "in": "path",
            "description": "The id of the Setting.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reason",
            "in": "query",
            "description": "The reason note for the Audit Log if the Product's \"Config changes require a reason\" preference is turned on.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEvaluationFormulaModel"
              },
              "examples": {
                "simple": {
                  "description": "This example turns on a feature flag.",
                  "value": {
                    "defaultValue": {
                      "boolValue": true
                    }
                  }
                },
                "advanced": {
                  "description": "This example turns on a feature flag and adds an evaluation rule with two conditions to its targeting rules.",
                  "value": {
                    "defaultValue": {
                      "boolValue": true
                    },
                    "targetingRules": [
                      {
                        "conditions": [
                          {
                            "userCondition": {
                              "comparator": "sensitiveTextEquals",
                              "comparisonAttribute": "Email",
                              "comparisonValue": {
                                "stringValue": "example@test.com"
                              }
                            }
                          },
                          {
                            "userCondition": {
                              "comparator": "sensitiveTextEquals",
                              "comparisonAttribute": "Role",
                              "comparisonValue": {
                                "stringValue": "Developer"
                              }
                            }
                          }
                        ],
                        "value": {
                          "boolValue": false
                        }
                      }
                    ]
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEvaluationFormulaModel"
              },
              "examples": {
                "simple": {
                  "description": "This example turns on a feature flag.",
                  "value": {
                    "defaultValue": {
                      "boolValue": true
                    }
                  }
                },
                "advanced": {
                  "description": "This example turns on a feature flag and adds an evaluation rule with two conditions to its targeting rules.",
                  "value": {
                    "defaultValue": {
                      "boolValue": true
                    },
                    "targetingRules": [
                      {
                        "conditions": [
                          {
                            "userCondition": {
                              "comparator": "sensitiveTextEquals",
                              "comparisonAttribute": "Email",
                              "comparisonValue": {
                                "stringValue": "example@test.com"
                              }
                            }
                          },
                          {
                            "userCondition": {
                              "comparator": "sensitiveTextEquals",
                              "comparisonAttribute": "Role",
                              "comparisonValue": {
                                "stringValue": "Developer"
                              }
                            }
                          }
                        ],
                        "value": {
                          "boolValue": false
                        }
                      }
                    ]
                  }
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEvaluationFormulaModel"
              },
              "examples": {
                "simple": {
                  "description": "This example turns on a feature flag.",
                  "value": {
                    "defaultValue": {
                      "boolValue": true
                    }
                  }
                },
                "advanced": {
                  "description": "This example turns on a feature flag and adds an evaluation rule with two conditions to its targeting rules.",
                  "value": {
                    "defaultValue": {
                      "boolValue": true
                    },
                    "targetingRules": [
                      {
                        "conditions": [
                          {
                            "userCondition": {
                              "comparator": "sensitiveTextEquals",
                              "comparisonAttribute": "Email",
                              "comparisonValue": {
                                "stringValue": "example@test.com"
                              }
                            }
                          },
                          {
                            "userCondition": {
                              "comparator": "sensitiveTextEquals",
                              "comparisonAttribute": "Role",
                              "comparisonValue": {
                                "stringValue": "Developer"
                              }
                            }
                          }
                        ],
                        "value": {
                          "boolValue": false
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingFormulaModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "patch": {
        "tags": [
          "Feature Flag & Setting values V2"
        ],
        "summary": "Update value",
        "description": "This endpoint updates the value of a Feature Flag or Setting\n with a collection of [JSON Patch](https://jsonpatch.com) operations in a specified Environment.\n\nOnly the `defaultValue`, `targetingRules`, and `percentageEvaluationAttribute` fields are modifiable by this endpoint.\n\nThe advantage of using JSON Patch is that you can describe individual update operations on a resource\nwithout touching attributes that you don't want to change. It supports collection reordering, so it also\ncan be used for reordering the targeting rules of a Feature Flag or Setting.\n\nFor example: We have the following resource of a Feature Flag.\n```json\n{\n  \"defaultValue\": {\n    \"boolValue\": false\n  },\n  \"targetingRules\": [\n    {\n      \"conditions\": [\n        {\n          \"userCondition\": {\n            \"comparisonAttribute\": \"Email\",\n            \"comparator\": \"sensitiveTextEquals\",\n            \"comparisonValue\": {\n              \"stringValue\": \"test@example.com\"\n            }\n          }\n        }\n      ],\n      \"percentageOptions\": [],\n      \"value\": {\n        \"boolValue\": true\n      }\n    }\n  ]\n}\n```\nIf we send an update request body as below:\n```json\n[\n  {\n    \"op\": \"replace\",\n    \"path\": \"/targetingRules/0/value/boolValue\",\n    \"value\": true\n  }\n]\n```\nOnly the first Targeting Rule's `value` is going to be set to `false` and all the other fields are remaining unchanged.\n \nSo we get a response like this:\n```json\n{\n  \"defaultValue\": {\n    \"boolValue\": false\n  },\n  \"targetingRules\": [\n    {\n      \"conditions\": [\n        {\n          \"userCondition\": {\n            \"comparisonAttribute\": \"Email\",\n            \"comparator\": \"sensitiveTextEquals\",\n            \"comparisonValue\": {\n              \"stringValue\": \"test@example.com\"\n            }\n          }\n        }\n      ],\n      \"percentageOptions\": [],\n      \"value\": {\n        \"boolValue\": false\n      }\n    }\n  ]\n}\n```",
        "operationId": "update-setting-value-v2",
        "parameters": [
          {
            "name": "environmentId",
            "in": "path",
            "description": "The identifier of the Environment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "settingId",
            "in": "path",
            "description": "The id of the Setting.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reason",
            "in": "query",
            "description": "The reason note for the Audit Log if the Product's \"Config changes require a reason\" preference is turned on.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JsonPatchOperation"
                }
              },
              "examples": {
                "turn on a feature flag": {
                  "description": "This example turns on a feature flag.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/defaultValue/boolValue",
                      "value": true
                    }
                  ]
                },
                "add targeting rules": {
                  "description": "This example adds an evaluation rule with two conditions to the Flag's targeting rules.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/targetingRules/-",
                      "value": {
                        "conditions": [
                          {
                            "userCondition": {
                              "comparator": "sensitiveTextEquals",
                              "comparisonAttribute": "Email",
                              "comparisonValue": {
                                "stringValue": "example@test.com"
                              }
                            }
                          },
                          {
                            "userCondition": {
                              "comparator": "sensitiveTextEquals",
                              "comparisonAttribute": "Role",
                              "comparisonValue": {
                                "stringValue": "Developer"
                              }
                            }
                          }
                        ],
                        "value": {
                          "boolValue": false
                        }
                      }
                    }
                  ]
                },
                "modify targeting rule": {
                  "description": "This example modifies a targeting rule's value.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/targetingRules/0/value/boolValue",
                      "value": "true"
                    }
                  ]
                },
                "modify targeting rule's condition": {
                  "description": "This example modifies a condition's comparison attribute within a targeting rule.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/targetingRules/0/conditions/0/userCondition/comparisonAttribute",
                      "value": "Role"
                    }
                  ]
                },
                "add segment condition": {
                  "description": "This example adds a segment condition to a targeting rule.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/targetingRules/0/conditions/-",
                      "value": {
                        "segmentCondition": {
                          "segmentComparator": "isIn",
                          "segmentId": "008a1fd6-8245-4ea8-90dc-a1dc36c1b4ff"
                        }
                      }
                    }
                  ]
                },
                "add prerequisite flag condition": {
                  "description": "This example adds a prerequisite flag condition to a targeting rule.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/targetingRules/0/conditions/-",
                      "value": {
                        "prerequisiteFlagCondition": {
                          "prerequisiteSettingId": "isIn",
                          "comparator": "008a1fd6-8245-4ea8-90dc-a1dc36c1b4ff",
                          "prerequisiteComparisonValue": {
                            "boolValue": true
                          }
                        }
                      }
                    }
                  ]
                },
                "reorder targeting rules": {
                  "description": "This example swaps the first and the second targeting rule.",
                  "value": [
                    {
                      "op": "move",
                      "path": "/targetingRules/1",
                      "from": "/targetingRules/0"
                    }
                  ]
                },
                "reorder targeting rule conditions": {
                  "description": "This example swaps the first and the second condition of a targeting rule.",
                  "value": [
                    {
                      "op": "move",
                      "path": "/targetingRules/0/conditions/1",
                      "from": "/targetingRules/0/conditions/0"
                    }
                  ]
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JsonPatchOperation"
                }
              },
              "examples": {
                "turn on a feature flag": {
                  "description": "This example turns on a feature flag.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/defaultValue/boolValue",
                      "value": true
                    }
                  ]
                },
                "add targeting rules": {
                  "description": "This example adds an evaluation rule with two conditions to the Flag's targeting rules.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/targetingRules/-",
                      "value": {
                        "conditions": [
                          {
                            "userCondition": {
                              "comparator": "sensitiveTextEquals",
                              "comparisonAttribute": "Email",
                              "comparisonValue": {
                                "stringValue": "example@test.com"
                              }
                            }
                          },
                          {
                            "userCondition": {
                              "comparator": "sensitiveTextEquals",
                              "comparisonAttribute": "Role",
                              "comparisonValue": {
                                "stringValue": "Developer"
                              }
                            }
                          }
                        ],
                        "value": {
                          "boolValue": false
                        }
                      }
                    }
                  ]
                },
                "modify targeting rule": {
                  "description": "This example modifies a targeting rule's value.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/targetingRules/0/value/boolValue",
                      "value": "true"
                    }
                  ]
                },
                "modify targeting rule's condition": {
                  "description": "This example modifies a condition's comparison attribute within a targeting rule.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/targetingRules/0/conditions/0/userCondition/comparisonAttribute",
                      "value": "Role"
                    }
                  ]
                },
                "add segment condition": {
                  "description": "This example adds a segment condition to a targeting rule.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/targetingRules/0/conditions/-",
                      "value": {
                        "segmentCondition": {
                          "segmentComparator": "isIn",
                          "segmentId": "008a1fd6-8245-4ea8-90dc-a1dc36c1b4ff"
                        }
                      }
                    }
                  ]
                },
                "add prerequisite flag condition": {
                  "description": "This example adds a prerequisite flag condition to a targeting rule.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/targetingRules/0/conditions/-",
                      "value": {
                        "prerequisiteFlagCondition": {
                          "prerequisiteSettingId": "isIn",
                          "comparator": "008a1fd6-8245-4ea8-90dc-a1dc36c1b4ff",
                          "prerequisiteComparisonValue": {
                            "boolValue": true
                          }
                        }
                      }
                    }
                  ]
                },
                "reorder targeting rules": {
                  "description": "This example swaps the first and the second targeting rule.",
                  "value": [
                    {
                      "op": "move",
                      "path": "/targetingRules/1",
                      "from": "/targetingRules/0"
                    }
                  ]
                },
                "reorder targeting rule conditions": {
                  "description": "This example swaps the first and the second condition of a targeting rule.",
                  "value": [
                    {
                      "op": "move",
                      "path": "/targetingRules/0/conditions/1",
                      "from": "/targetingRules/0/conditions/0"
                    }
                  ]
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JsonPatchOperation"
                }
              },
              "examples": {
                "turn on a feature flag": {
                  "description": "This example turns on a feature flag.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/defaultValue/boolValue",
                      "value": true
                    }
                  ]
                },
                "add targeting rules": {
                  "description": "This example adds an evaluation rule with two conditions to the Flag's targeting rules.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/targetingRules/-",
                      "value": {
                        "conditions": [
                          {
                            "userCondition": {
                              "comparator": "sensitiveTextEquals",
                              "comparisonAttribute": "Email",
                              "comparisonValue": {
                                "stringValue": "example@test.com"
                              }
                            }
                          },
                          {
                            "userCondition": {
                              "comparator": "sensitiveTextEquals",
                              "comparisonAttribute": "Role",
                              "comparisonValue": {
                                "stringValue": "Developer"
                              }
                            }
                          }
                        ],
                        "value": {
                          "boolValue": false
                        }
                      }
                    }
                  ]
                },
                "modify targeting rule": {
                  "description": "This example modifies a targeting rule's value.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/targetingRules/0/value/boolValue",
                      "value": "true"
                    }
                  ]
                },
                "modify targeting rule's condition": {
                  "description": "This example modifies a condition's comparison attribute within a targeting rule.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/targetingRules/0/conditions/0/userCondition/comparisonAttribute",
                      "value": "Role"
                    }
                  ]
                },
                "add segment condition": {
                  "description": "This example adds a segment condition to a targeting rule.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/targetingRules/0/conditions/-",
                      "value": {
                        "segmentCondition": {
                          "segmentComparator": "isIn",
                          "segmentId": "008a1fd6-8245-4ea8-90dc-a1dc36c1b4ff"
                        }
                      }
                    }
                  ]
                },
                "add prerequisite flag condition": {
                  "description": "This example adds a prerequisite flag condition to a targeting rule.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/targetingRules/0/conditions/-",
                      "value": {
                        "prerequisiteFlagCondition": {
                          "prerequisiteSettingId": "isIn",
                          "comparator": "008a1fd6-8245-4ea8-90dc-a1dc36c1b4ff",
                          "prerequisiteComparisonValue": {
                            "boolValue": true
                          }
                        }
                      }
                    }
                  ]
                },
                "reorder targeting rules": {
                  "description": "This example swaps the first and the second targeting rule.",
                  "value": [
                    {
                      "op": "move",
                      "path": "/targetingRules/1",
                      "from": "/targetingRules/0"
                    }
                  ]
                },
                "reorder targeting rule conditions": {
                  "description": "This example swaps the first and the second condition of a targeting rule.",
                  "value": [
                    {
                      "op": "move",
                      "path": "/targetingRules/0/conditions/1",
                      "from": "/targetingRules/0/conditions/0"
                    }
                  ]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "When the patch was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingFormulaModel"
                }
              }
            }
          },
          "204": {
            "description": "When no change applied on the resource."
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/configs/{configId}/environments/{environmentId}/values": {
      "get": {
        "tags": [
          "Feature Flag & Setting values"
        ],
        "summary": "Get values",
        "description": "This endpoint returns the value of a specified Config's Feature Flags or Settings identified by the `configId` parameter\nin a specified Environment identified by the `environmentId` parameter.\n\nThe most important attributes in the response are the `value`, `rolloutRules` and `percentageRules`.\nThe `value` represents what the clients will get when the evaluation requests of our SDKs \nare not matching to any of the defined Targeting or Percentage Rules, or when there are no additional rules to evaluate.\n\nThe `rolloutRules` and `percentageRules` attributes are representing the current \nTargeting and Percentage Rules configuration of the actual Feature Flag or Setting \n in an **ordered** collection, which means the order of the returned rules is matching to the\nevaluation order. You can read more about these rules [here](https://configcat.com/docs/targeting/targeting-overview/).",
        "operationId": "get-setting-values",
        "parameters": [
          {
            "name": "configId",
            "in": "path",
            "description": "The identifier of the Config.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "environmentId",
            "in": "path",
            "description": "The identifier of the Environment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When everything is ok, the setting values returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigSettingValuesModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "post": {
        "tags": [
          "Feature Flag & Setting values"
        ],
        "summary": "Post values",
        "description": "This endpoint replaces the values of a specified Config's Feature Flags or Settings identified by the `configId` parameter\nin a specified Environment identified by the `environmentId` parameter.\n\nOnly the `value`, `rolloutRules` and `percentageRules` attributes are modifiable by this endpoint.\n\n**Important:** As this endpoint is doing a complete replace, it's important to set every other attribute that you don't \nwant to change in its original state. Not listing one means it will reset.\n\nFor example: We have the following resource.\n```json\n{\n  \"settingValues\": [\n    {\n      \"rolloutPercentageItems\": [\n        {\n          \"percentage\": 30,\n          \"value\": true\n        },\n        {\n          \"percentage\": 70,\n          \"value\": false\n        }\n      ],\n      \"rolloutRules\": [],\n      \"value\": false,\n      \"settingId\": 1\n    }\n  ]\n}\n```\nIf we send a replace request body as below:\n```json\n{ \n  \"settingValues\": [\n    {\n      \"value\": true,\n      \"settingId\": 1\n    }\n  ]\n}\n```\nThen besides that the default value is set to `true`, all the Percentage Rules are deleted. \nSo we get a response like this:\n```json\n{\n  \"settingValues\": [\n    {\n      \"rolloutPercentageItems\": [],\n      \"rolloutRules\": [],\n      \"value\": true,\n      \"setting\": \n      {\n        \"settingId\": 1\n      }\n    }\n  ]\n}\n```\n\nThe `rolloutRules` property describes two types of rules:\n\n- **Targeting rules**: When you want to add or update a targeting rule, the `comparator`, `comparisonAttribute`, and `comparisonValue` members are required.\n- **Segment rules**: When you want to add add or update a segment rule, the `segmentId` which identifies the desired segment and the `segmentComparator` members are required.",
        "operationId": "post-setting-values",
        "parameters": [
          {
            "name": "configId",
            "in": "path",
            "description": "The identifier of the Config.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "environmentId",
            "in": "path",
            "description": "The identifier of the Environment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "reason",
            "in": "query",
            "description": "The reason note for the Audit Log if the Product's \"Config changes require a reason\" preference is turned on.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSettingValuesWithIdModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSettingValuesWithIdModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSettingValuesWithIdModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "When everything is ok, the updated setting values returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigSettingValuesModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v2/configs/{configId}/environments/{environmentId}/values": {
      "get": {
        "tags": [
          "Feature Flag & Setting values V2"
        ],
        "summary": "Get values",
        "description": "This endpoint returns all Feature Flag and Setting values of a Config identified by the `configId` parameter\nin a specified Environment identified by the `environmentId` parameter.\n\nThe most important fields in the response are the `defaultValue`, `targetingRules`.\nThe `defaultValue` represents what the clients will get when the evaluation requests of our SDKs\n are not matching to any of the defined Targeting Rules, or when there are no additional rules to evaluate.\n\nThe `targetingRules` represents the current\n Targeting Rule configuration of the actual Feature Flag or Setting\nin an **ordered** collection, which means the order of the returned rules is matching to the\nevaluation order. You can read more about these rules [here](https://configcat.com/docs/targeting/targeting-overview/).\n \nThe `percentageEvaluationAttribute` represents the custom [User Object](https://configcat.com/docs/targeting/user-object/) attribute that must be used for [percentage evaluation](https://configcat.com/docs/targeting/percentage-options/) of the Feature Flag or Setting.",
        "operationId": "get-setting-values-v2",
        "parameters": [
          {
            "name": "configId",
            "in": "path",
            "description": "The identifier of the Config.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "environmentId",
            "in": "path",
            "description": "The identifier of the Environment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When everything is ok, the setting values returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigSettingFormulasModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "post": {
        "tags": [
          "Feature Flag & Setting values V2"
        ],
        "summary": "Post values",
        "description": "This endpoint batch updates the Feature Flags and Settings of a Config identified by the `configId` parameter\nin a specified Environment identified by the `environmentId` parameter.\n\nOnly those Feature Flags and Settings are updated which are part of the request, all the others are left untouched.\n\n**Important:** As this endpoint is doing a complete replace on those Feature Flags and Settings, which are set in the request. \nIt's important to set every other field that you don't want to change in its original state. Not listing a field means that it will reset.\n\nFor example: We have the following resource of a Feature Flag.\n```json\n{\n  \"settingFormulas\": [\n    {\n      \"defaultValue\": {\n        \"boolValue\": false\n      },\n      \"targetingRules\": [\n        {\n          \"conditions\": [\n            {\n              \"userCondition\": {\n                \"comparisonAttribute\": \"Email\",\n                \"comparator\": \"sensitiveTextEquals\",\n                \"comparisonValue\": {\n                  \"stringValue\" : \"test@example.com\"\n                }\n              }\n            }\n          ],\n          \"percentageOptions\": [],\n          \"value\": {\n            \"boolValue\": true\n          }\n        }\n      ],\n      \"settingId\": 1\n    }\n  ]\n}\n```\nIf we send a batch replace request body as below:\n```json\n{ \n  \"updateFormulas\": [\n    {\n      \"defaultValue\": {\n        \"boolValue\": false\n      },\n      \"settingId\": 1\n    }\n  ]\n}\n```\nThen besides that the default value is set to `true`, all Targeting Rules of the related Feature Flag are deleted.\nSo we get a response like this:\n```json\n{\n  \"settingFormulas\": [\n    {\n      \"defaultValue\": {\n        \"boolValue\": false\n      },\n      \"targetingRules\": [],\n      \"setting\": \n      {\n        \"settingId\": 1\n      }\n    }\n  ]\n}\n```",
        "operationId": "post-setting-values-v2",
        "parameters": [
          {
            "name": "configId",
            "in": "path",
            "description": "The identifier of the Config.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "environmentId",
            "in": "path",
            "description": "The identifier of the Environment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "reason",
            "in": "query",
            "description": "The reason note for the Audit Log if the Product's \"Config changes require a reason\" preference is turned on.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEvaluationFormulasModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEvaluationFormulasModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEvaluationFormulasModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "When everything is ok, the updated setting values returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigSettingFormulasModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/tags/{tagId}": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "Get Tag",
        "description": "This endpoint returns the metadata of a Tag \nidentified by the `tagId`.",
        "operationId": "get-tag",
        "parameters": [
          {
            "name": "tagId",
            "in": "path",
            "description": "The identifier of the Tag.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When everything is ok, the tag data returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "put": {
        "tags": [
          "Tags"
        ],
        "summary": "Update Tag",
        "description": "This endpoint updates a Tag identified by the `tagId` parameter.",
        "operationId": "update-tag",
        "parameters": [
          {
            "name": "tagId",
            "in": "path",
            "description": "The identifier of the Tag.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTagModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTagModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTagModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "delete": {
        "tags": [
          "Tags"
        ],
        "summary": "Delete Tag",
        "description": "This endpoint deletes a Tag identified by the `tagId` parameter. To remove a Tag from a Feature Flag or Setting use the [Update Flag](#operation/update-setting) endpoint.",
        "operationId": "delete-tag",
        "parameters": [
          {
            "name": "tagId",
            "in": "path",
            "description": "The identifier of the Tag.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "When the delete was successful."
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/webhooks/{webhookId}": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Get Webhook",
        "description": "This endpoint returns the metadata of a Webhook \nidentified by the `webhookId`.",
        "operationId": "get-webhook",
        "parameters": [
          {
            "name": "webhookId",
            "in": "path",
            "description": "The identifier of the Webhook.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When everything is ok, the webhook data is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "put": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Replace Webhook",
        "description": "This endpoint replaces the whole value of a Webhook identified by the `webhookId` parameter.\n\n**Important:** As this endpoint is doing a complete replace, it's important to set every other attribute that you don't\n want to change in its original state. Not listing one means it will reset.",
        "operationId": "replace-webhook",
        "parameters": [
          {
            "name": "webhookId",
            "in": "path",
            "description": "The identifier of the Webhook.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebHookRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WebHookRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WebHookRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "When the replace was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "patch": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Update Webhook",
        "description": "This endpoint updates a Webhook identified by the `webhookId` parameter with a collection of [JSON Patch](https://jsonpatch.com) operations.\n \nThe advantage of using JSON Patch is that you can describe individual update operations on a resource without touching attributes that you don't want to change.\n\nFor example: We have the following resource.\n```json\n{\n  \"webhookId\": 6,\n  \"url\": \"https://example.com/hook\",\n  \"httpMethod\": \"post\",\n  \"content\": \"null\",\n  \"webHookHeaders\": []\n}\n```\n If we send an update request body as below (it changes the `content` field and adds a new HTTP header):\n```json\n[\n  {\n    \"op\": \"replace\", \n    \"path\": \"/content\", \n    \"value\": \"Some webhook content.\"\n  }, \n  {\n    \"op\": \"add\", \n    \"path\": \"/webHookHeaders/-\", \n    \"value\": {\n      \"key\": \"X-Custom-Header\", \n      \"value\": \"Custom header value\"\n    }\n  }\n]\n```\nOnly the `content` and `webHookHeaders` are updated and all the other attributes remain unchanged.\nSo we get a response like this:\n```json\n{\n  \"webhookId\": 6,\n  \"url\": \"https://example.com/hook\",\n  \"httpMethod\": \"post\", \n  \"content\": \"Some webhook content.\" , \n  \"webHookHeaders\": [\n    {\n      \"key\": \"X-Custom-Header\", \n      \"value\": \"Custom header value\", \n      \"isSecure\": false\n    }\n  ]\n}\n```",
        "operationId": "update-webhook",
        "parameters": [
          {
            "name": "webhookId",
            "in": "path",
            "description": "The identifier of the Webhook.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JsonPatchOperation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JsonPatchOperation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JsonPatchOperation"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "When the update was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "delete": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Delete Webhook",
        "description": "This endpoint removes a Webhook identified by the `webhookId` parameter.",
        "operationId": "delete-webhook",
        "parameters": [
          {
            "name": "webhookId",
            "in": "path",
            "description": "The identifier of the Webhook.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "When the delete was successful."
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/webhooks/{webhookId}/keys": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Get Webhook Signing Keys",
        "description": "This endpoint returns the signing keys of a Webhook \nidentified by the `webhookId`.\n\nSigning keys are used for ensuring the Webhook requests you receive are actually sent by ConfigCat.\n\n<a href=\"https://configcat.com/docs/advanced/notifications-webhooks/#verifying-webhook-requests\" target=\"_blank\" rel=\"noopener noreferrer\">Here</a> you can read more about Webhook request verification.",
        "operationId": "get-webhook-signing-keys",
        "parameters": [
          {
            "name": "webhookId",
            "in": "path",
            "description": "The identifier of the Webhook.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When everything is ok, the webhook signing keys are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookSigningKeysModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/environments/{environmentId}/settings/{settingId}/integrationLinks/{integrationLinkType}/{key}": {
      "post": {
        "tags": [
          "Integration links"
        ],
        "summary": "Add or update Integration link",
        "description": "",
        "operationId": "add-or-update-integration-link",
        "parameters": [
          {
            "name": "environmentId",
            "in": "path",
            "description": "The identifier of the Environment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "settingId",
            "in": "path",
            "description": "The id of the Setting.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "integrationLinkType",
            "in": "path",
            "description": "The integration link's type.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/IntegrationLinkType"
            }
          },
          {
            "name": "key",
            "in": "path",
            "description": "The key of the integration link.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddOrUpdateIntegrationLinkModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddOrUpdateIntegrationLinkModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddOrUpdateIntegrationLinkModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "When everything is ok, the integration link data returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationLinkModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "delete": {
        "tags": [
          "Integration links"
        ],
        "summary": "Delete Integration link",
        "description": "",
        "operationId": "delete-integration-link",
        "parameters": [
          {
            "name": "environmentId",
            "in": "path",
            "description": "The identifier of the Environment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "settingId",
            "in": "path",
            "description": "The id of the Setting.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "integrationLinkType",
            "in": "path",
            "description": "The integration's type.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/IntegrationLinkType"
            }
          },
          {
            "name": "key",
            "in": "path",
            "description": "The key of the integration link.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When everything is ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteIntegrationLinkModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/jira/environments/{environmentId}/settings/{settingId}/integrationLinks/{key}": {
      "post": {
        "tags": [
          "Integration links"
        ],
        "operationId": "jira-add-or-update-integration-link",
        "parameters": [
          {
            "name": "environmentId",
            "in": "path",
            "description": "The identifier of the Environment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "settingId",
            "in": "path",
            "description": "The id of the Setting.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "key",
            "in": "path",
            "description": "The key of the integration link.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddOrUpdateJiraIntegrationLinkModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddOrUpdateJiraIntegrationLinkModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddOrUpdateJiraIntegrationLinkModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "When everything is ok, the integration link data returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationLinkModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/jira/connect": {
      "post": {
        "tags": [
          "Integration links"
        ],
        "operationId": "jira-connect",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/organizations/{organizationId}/products": {
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Create Product",
        "description": "This endpoint creates a new Product in a specified Organization \nidentified by the `organizationId` parameter, which can be obtained from the [List Organizations](#operation/get-organizations) endpoint.",
        "operationId": "create-product",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "The identifier of the Organization.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProductRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProductRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProductRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "When the creation was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/configs/{configId}/environments/{environmentId}/webhooks": {
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Create Webhook",
        "description": "This endpoint creates a new Webhook in a specified Product\nidentified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.",
        "operationId": "create-webhook",
        "parameters": [
          {
            "name": "configId",
            "in": "path",
            "description": "The identifier of the Config.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "environmentId",
            "in": "path",
            "description": "The identifier of the Environment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebHookRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WebHookRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WebHookRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "When the creation was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/code-references/delete-reports": {
      "post": {
        "tags": [
          "Code References"
        ],
        "summary": "Delete Reference reports",
        "description": "",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteRepositoryReportsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteRepositoryReportsRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteRepositoryReportsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/products/{productId}/members/invite": {
      "post": {
        "tags": [
          "Members"
        ],
        "summary": "Invite Member",
        "description": "This endpoint invites a Member into the given Product identified by the `productId` parameter.",
        "operationId": "invite-member",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The identifier of the Product.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InviteMembersRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/InviteMembersRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/InviteMembersRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "When the invite was successful."
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/code-references": {
      "post": {
        "tags": [
          "Code References"
        ],
        "summary": "Upload References",
        "description": "",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CodeReferenceRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CodeReferenceRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CodeReferenceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/organizations/{organizationId}/members/{userId}": {
      "post": {
        "tags": [
          "Members"
        ],
        "summary": "Update Member Permissions",
        "description": "This endpoint updates the permissions of a Member identified by the `userId`. \nThis endpoint can also be used to move a Member between Permission Groups within a Product.\nOnly a single Permission Group can be set per Product.",
        "operationId": "add-member-to-group",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "The identifier of the Organization.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The identifier of the Member.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMemberPermissionsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMemberPermissionsRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMemberPermissionsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "When the update was successful."
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "delete": {
        "tags": [
          "Members"
        ],
        "summary": "Delete Member from Organization",
        "description": "This endpoint removes a Member identified by the `userId` from the \ngiven Organization identified by the `organizationId` parameter.",
        "operationId": "delete-organization-member",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "The identifier of the Organization.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The identifier of the Member.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "When the delete was successful."
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/invitations/{invitationId}": {
      "delete": {
        "tags": [
          "Members"
        ],
        "summary": "Delete Invitation",
        "description": "This endpoint removes an Invitation identified by the `invitationId` parameter.",
        "operationId": "delete-invitation",
        "parameters": [
          {
            "name": "invitationId",
            "in": "path",
            "description": "The identifier of the Invitation.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "When the delete was successful."
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/products/{productId}/members/{userId}": {
      "delete": {
        "tags": [
          "Members"
        ],
        "summary": "Delete Member from Product",
        "description": "This endpoint removes a Member identified by the `userId` from the \ngiven Product identified by the `productId` parameter.",
        "operationId": "delete-product-member",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The identifier of the Product.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The identifier of the Member.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "When the delete was successful."
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccessType": {
        "enum": [
          "readOnly",
          "full",
          "custom"
        ],
        "type": "string",
        "description": "Represent the Feature Management permission."
      },
      "AddOrUpdateIntegrationLinkModel": {
        "type": "object",
        "properties": {
          "description": {
            "maxLength": 1000,
            "type": "string",
            "nullable": true
          },
          "url": {
            "maxLength": 1000,
            "type": "string",
            "nullable": true
          }
        }
      },
      "AddOrUpdateJiraIntegrationLinkModel": {
        "required": [
          "clientKey",
          "jiraJwtToken"
        ],
        "type": "object",
        "properties": {
          "jiraJwtToken": {
            "maxLength": 15000,
            "minLength": 0,
            "type": "string"
          },
          "clientKey": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          },
          "description": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "url": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "nullable": true
          }
        }
      },
      "AuditLogItemModel": {
        "type": "object",
        "properties": {
          "auditLogId": {
            "type": "integer",
            "format": "int64"
          },
          "auditLogDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "auditLogTypeEnum": {
            "$ref": "#/components/schemas/AuditLogType"
          },
          "changeSetId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "truncated": {
            "type": "boolean"
          },
          "auditLogType": {
            "type": "string",
            "nullable": true
          },
          "userEmail": {
            "type": "string",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "nullable": true
          },
          "where": {
            "type": "string",
            "nullable": true
          },
          "why": {
            "type": "string",
            "nullable": true
          },
          "actionTarget": {
            "type": "string",
            "nullable": true
          },
          "details": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "AuditLogType": {
        "enum": [
          "productCreated",
          "productChanged",
          "productOwnershipTransferred",
          "productDeleted",
          "productsReordered",
          "teamMemberInvited",
          "teamMemberInvitationRevoked",
          "teamMemberJoined",
          "teamMemberPermissionGroupChanged",
          "teamMemberRemoved",
          "teamMemberLeft",
          "teamMemberInvitationChanged",
          "teamMemberInvitationResent",
          "teamMemberInvitationRejected",
          "configCreated",
          "configChanged",
          "configDeleted",
          "configsReordered",
          "environmentCreated",
          "environmentChanged",
          "environmentDeleted",
          "environmentsReordered",
          "settingCreated",
          "settingChanged",
          "settingDeleted",
          "settingsReordered",
          "settingValueChanged",
          "webHookCreated",
          "webHookChanged",
          "webHookDeleted",
          "permissionGroupCreated",
          "permissionGroupChanged",
          "permissionGroupDeleted",
          "permissionGroupDefault",
          "apiKeyAdded",
          "apiKeyRemoved",
          "integrationAdded",
          "integrationChanged",
          "integrationRemoved",
          "apiKeyConnected",
          "integrationLinkAdded",
          "integrationLinkRemoved",
          "organizationAdded",
          "organizationRemoved",
          "organizationChanged",
          "organizationSubscriptionTypeChanged",
          "organizationAdminChanged",
          "organizationAdminLeft",
          "twoFactorDisabledForMember",
          "tagAdded",
          "tagChanged",
          "tagRemoved",
          "settingTagAdded",
          "settingTagRemoved",
          "publicApiAccessTokenAdded",
          "publicApiAccessTokenRemoved",
          "domainAdded",
          "domainVerified",
          "domainRemoved",
          "domainSamlConfigured",
          "domainSamlDeleted",
          "autoProvisioningConfigurationChanged",
          "samlIdpConfigurationAdded",
          "samlIdpConfigurationRemoved",
          "samlIdpConfigurationUpdated",
          "autoProvisioningEnabledChanged",
          "organizationMemberJoined",
          "organizationMemberProductJoinRequested",
          "organizationMemberProductJoinRequestRejected",
          "organizationMemberProductJoinRequestApproved",
          "organizationMemberRemoved",
          "codeReferencesUploaded",
          "codeReferenceDeleted",
          "codeReferenceStaleBranchDeleted",
          "segmentCreated",
          "segmentChanged",
          "segmentDeleted",
          "webhookSigningKeyDeleted",
          "webhookSigningKeyCreated",
          "userProvisioningConfigurationChanged",
          "syncGroupProvisioningRuleChanged",
          "syncGroupsReordered",
          "syncUserProvisioningEnabled",
          "syncUserProvisioningDisabled",
          "userEmailChanged",
          "userFullNameChanged",
          "userDisabled",
          "awsConnected",
          "awsDisconnected",
          "userEnabled"
        ],
        "type": "string"
      },
      "CodeReferenceModel": {
        "type": "object",
        "properties": {
          "branch": {
            "type": "string",
            "description": "The source control branch on where the scan was performed. (Source of the branch selector on the ConfigCat Dashboard)",
            "nullable": true
          },
          "references": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferenceLines"
            },
            "description": "The actual references to the given Feature Flag or Setting.",
            "nullable": true
          },
          "commitUrl": {
            "type": "string",
            "description": "The related commit's URL.",
            "nullable": true
          },
          "commitHash": {
            "type": "string",
            "description": "The related commit's hash.",
            "nullable": true
          },
          "syncedAt": {
            "type": "string",
            "description": "The date and time when the reference report was uploaded.",
            "format": "date-time"
          },
          "repository": {
            "type": "string",
            "description": "The source control repository that contains the scanned code.",
            "nullable": true
          },
          "codeReferenceId": {
            "type": "string",
            "description": "The identifier of the reference report.",
            "format": "uuid"
          },
          "uploader": {
            "type": "string",
            "description": "The code reference scanning tool's name.",
            "nullable": true
          }
        }
      },
      "CodeReferenceRequest": {
        "required": [
          "branch",
          "configId",
          "repository"
        ],
        "type": "object",
        "properties": {
          "configId": {
            "type": "string",
            "description": "The Config's identifier the scanning was performed against.",
            "format": "uuid"
          },
          "repository": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The source control repository that contains the scanned code. (Source of the repository selector on the ConfigCat Dashboard)"
          },
          "branch": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The source control branch on where the scan was performed. (Source of the branch selector on the ConfigCat Dashboard)"
          },
          "commitUrl": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "The related commit's URL. (Appears on the ConfigCat Dashboard)",
            "nullable": true
          },
          "commitHash": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The related commit's hash. (Appears on the ConfigCat Dashboard)",
            "nullable": true
          },
          "uploader": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The scanning tool's name. (Appears on the ConfigCat Dashboard)",
            "nullable": true
          },
          "activeBranches": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The currently active branches of the repository. Each previously uploaded report that belongs to a non-reported active branch is being deleted.",
            "nullable": true
          },
          "flagReferences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FlagReference"
            },
            "description": "The actual code reference collection.",
            "nullable": true
          }
        }
      },
      "ComparisonValueListModel": {
        "required": [
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "minLength": 1,
            "type": "string",
            "description": "The actual comparison value."
          },
          "hint": {
            "maxLength": 1500,
            "minLength": 0,
            "type": "string",
            "description": "An optional hint for the comparison value.",
            "nullable": true
          }
        }
      },
      "ComparisonValueModel": {
        "type": "object",
        "properties": {
          "stringValue": {
            "type": "string",
            "description": "The string representation of the comparison value.",
            "nullable": true
          },
          "doubleValue": {
            "type": "number",
            "description": "The number representation of the comparison value.",
            "format": "double",
            "nullable": true
          },
          "listValue": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ComparisonValueListModel"
            },
            "description": "The list representation of the comparison value.",
            "nullable": true
          }
        },
        "description": "The value that the user object's attribute is compared to."
      },
      "ConditionModel": {
        "type": "object",
        "properties": {
          "userCondition": {
            "$ref": "#/components/schemas/UserConditionModel"
          },
          "segmentCondition": {
            "$ref": "#/components/schemas/SegmentConditionModel"
          },
          "prerequisiteFlagCondition": {
            "$ref": "#/components/schemas/PrerequisiteFlagConditionModel"
          }
        }
      },
      "ConfigModel": {
        "type": "object",
        "properties": {
          "product": {
            "$ref": "#/components/schemas/ProductModel"
          },
          "configId": {
            "type": "string",
            "description": "Identifier of the Config.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Name of the Config.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of the Config.",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "description": "The order of the Config represented on the ConfigCat Dashboard.",
            "format": "int32"
          },
          "migratedConfigId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "evaluationVersion": {
            "$ref": "#/components/schemas/EvaluationVersion"
          }
        },
        "description": "Details of the Config."
      },
      "ConfigSettingFormulaModel": {
        "type": "object",
        "properties": {
          "lastVersionId": {
            "type": "string",
            "format": "uuid"
          },
          "defaultValue": {
            "$ref": "#/components/schemas/ValueModel"
          },
          "targetingRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TargetingRuleModel"
            },
            "description": "The targeting rules of the Feature Flag or Setting.",
            "nullable": true
          },
          "setting": {
            "$ref": "#/components/schemas/SettingDataModel"
          },
          "updatedAt": {
            "type": "string",
            "description": "The last updated date and time when the Feature Flag or Setting.",
            "format": "date-time",
            "nullable": true
          },
          "percentageEvaluationAttribute": {
            "type": "string",
            "description": "The user attribute used for percentage evaluation. If not set, it defaults to the `Identifier` user object attribute.",
            "nullable": true
          },
          "lastUpdaterUserEmail": {
            "type": "string",
            "description": "The email of the user who last updated the Feature Flag or Setting.",
            "nullable": true
          },
          "lastUpdaterUserFullName": {
            "type": "string",
            "description": "The name of the user who last updated the Feature Flag or Setting.",
            "nullable": true
          },
          "integrationLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IntegrationLinkModel"
            },
            "description": "The integration links attached to the Feature Flag or Setting.",
            "nullable": true
          },
          "settingTags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SettingTagModel"
            },
            "description": "The tags attached to the Feature Flag or Setting.",
            "nullable": true
          },
          "settingIdsWherePrerequisite": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "List of Feature Flag and Setting IDs where the actual Feature Flag or Setting is prerequisite.",
            "nullable": true
          }
        }
      },
      "ConfigSettingFormulasModel": {
        "type": "object",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/ConfigModel"
          },
          "environment": {
            "$ref": "#/components/schemas/EnvironmentModel"
          },
          "readOnly": {
            "type": "boolean"
          },
          "settingFormulas": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConfigSettingFormulaModel"
            },
            "description": "Evaluation descriptors of each updated Feature Flag and Setting.",
            "nullable": true
          },
          "featureFlagLimitations": {
            "$ref": "#/components/schemas/FeatureFlagLimitations"
          }
        }
      },
      "ConfigSettingValueModel": {
        "type": "object",
        "properties": {
          "rolloutRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RolloutRuleModel"
            },
            "description": "The targeting rule collection.",
            "nullable": true
          },
          "rolloutPercentageItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RolloutPercentageItemModel"
            },
            "description": "The percentage rule collection.",
            "nullable": true
          },
          "value": {
            "description": "The value to serve. It must respect the setting type.",
            "nullable": true
          },
          "setting": {
            "$ref": "#/components/schemas/SettingDataModel"
          },
          "updatedAt": {
            "type": "string",
            "description": "The last updated date and time when the Feature Flag or Setting.",
            "format": "date-time",
            "nullable": true
          },
          "lastUpdaterUserEmail": {
            "type": "string",
            "description": "The email of the user who last updated the Feature Flag or Setting.",
            "nullable": true
          },
          "lastUpdaterUserFullName": {
            "type": "string",
            "description": "The name of the user who last updated the Feature Flag or Setting.",
            "nullable": true
          },
          "integrationLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IntegrationLinkModel"
            },
            "description": "The integration links attached to the Feature Flag or Setting.",
            "nullable": true
          },
          "settingTags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SettingTagModel"
            },
            "description": "The tags attached to the Feature Flag or Setting.",
            "nullable": true
          }
        }
      },
      "ConfigSettingValuesModel": {
        "type": "object",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/ConfigModel"
          },
          "environment": {
            "$ref": "#/components/schemas/EnvironmentModel"
          },
          "readOnly": {
            "type": "boolean"
          },
          "settingValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConfigSettingValueModel"
            },
            "nullable": true
          },
          "featureFlagLimitations": {
            "$ref": "#/components/schemas/FeatureFlagLimitations"
          }
        }
      },
      "ConnectRequest": {
        "required": [
          "clientKey",
          "jiraJwtToken"
        ],
        "type": "object",
        "properties": {
          "clientKey": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          },
          "jiraJwtToken": {
            "maxLength": 15000,
            "minLength": 0,
            "type": "string"
          }
        }
      },
      "CreateConfigRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The name of the Config."
          },
          "description": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "The description of the Config.",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "description": "The order of the Config represented on the ConfigCat Dashboard.\r \nDetermined from an ascending sequence of integers.",
            "format": "int32",
            "nullable": true
          },
          "evaluationVersion": {
            "$ref": "#/components/schemas/EvaluationVersion"
          }
        }
      },
      "CreateEnvironmentModel": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The name of the Environment."
          },
          "color": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The color of the Environment. RGB or HTML color codes are allowed.",
            "nullable": true
          },
          "description": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "The description of the Environment.",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "description": "The order of the Environment represented on the ConfigCat Dashboard.\r\nDetermined from an ascending sequence of integers.",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "CreateIntegrationModel": {
        "required": [
          "configIds",
          "environmentIds",
          "integrationType",
          "name",
          "parameters"
        ],
        "type": "object",
        "properties": {
          "integrationType": {
            "$ref": "#/components/schemas/IntegrationType"
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "Name of the Integration."
          },
          "parameters": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "Parameters of the Integration."
          },
          "environmentIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "List of Environment IDs that are connected with this Integration. If the list is empty, all of the Environments are connected."
          },
          "configIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "List of Config IDs that are connected with this Integration. If the list is empty, all of the Configs are connected."
          }
        }
      },
      "CreateOrUpdateEnvironmentAccessModel": {
        "type": "object",
        "properties": {
          "environmentId": {
            "type": "string",
            "description": "Identifier of the Environment.",
            "format": "uuid"
          },
          "environmentAccessType": {
            "$ref": "#/components/schemas/EnvironmentAccessType"
          }
        }
      },
      "CreatePermissionGroupRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "Name of the Permission Group."
          },
          "canManageMembers": {
            "type": "boolean",
            "description": "Group members can manage team members."
          },
          "canCreateOrUpdateConfig": {
            "type": "boolean",
            "description": "Group members can create/update Configs."
          },
          "canDeleteConfig": {
            "type": "boolean",
            "description": "Group members can delete Configs."
          },
          "canCreateOrUpdateEnvironment": {
            "type": "boolean",
            "description": "Group members can create/update Environments."
          },
          "canDeleteEnvironment": {
            "type": "boolean",
            "description": "Group members can delete Environments."
          },
          "canCreateOrUpdateSetting": {
            "type": "boolean",
            "description": "Group members can create/update Feature Flags and Settings."
          },
          "canTagSetting": {
            "type": "boolean",
            "description": "Group members can attach/detach Tags to Feature Flags and Settings."
          },
          "canDeleteSetting": {
            "type": "boolean",
            "description": "Group members can delete Feature Flags and Settings."
          },
          "canCreateOrUpdateTag": {
            "type": "boolean",
            "description": "Group members can create/update Tags."
          },
          "canDeleteTag": {
            "type": "boolean",
            "description": "Group members can delete Tags."
          },
          "canManageWebhook": {
            "type": "boolean",
            "description": "Group members can create/update/delete Webhooks."
          },
          "canUseExportImport": {
            "type": "boolean",
            "description": "Group members can use the export/import feature."
          },
          "canManageProductPreferences": {
            "type": "boolean",
            "description": "Group members can update Product preferences."
          },
          "canManageIntegrations": {
            "type": "boolean",
            "description": "Group members can add and configure integrations."
          },
          "canViewSdkKey": {
            "type": "boolean",
            "description": "Group members has access to SDK keys."
          },
          "canRotateSdkKey": {
            "type": "boolean",
            "description": "Group members can rotate SDK keys."
          },
          "canCreateOrUpdateSegments": {
            "type": "boolean",
            "description": "Group members can create/update Segments."
          },
          "canDeleteSegments": {
            "type": "boolean",
            "description": "Group members can delete Segments."
          },
          "canViewProductAuditLog": {
            "type": "boolean",
            "description": "Group members has access to audit logs."
          },
          "canViewProductStatistics": {
            "type": "boolean",
            "description": "Group members has access to product statistics."
          },
          "accessType": {
            "$ref": "#/components/schemas/AccessType"
          },
          "newEnvironmentAccessType": {
            "$ref": "#/components/schemas/EnvironmentAccessType"
          },
          "environmentAccesses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateOrUpdateEnvironmentAccessModel"
            },
            "description": "List of environment specific permissions.",
            "nullable": true
          },
          "canDisable2FA": {
            "type": "boolean",
            "description": "Group members can disable two-factor authentication for other members."
          }
        }
      },
      "CreateProductRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 1000,
            "minLength": 1,
            "type": "string",
            "description": "The name of the Product."
          },
          "description": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "The description of the Product.",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "description": "The order of the Product represented on the ConfigCat Dashboard.\r \nDetermined from an ascending sequence of integers.",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "CreateSegmentModel": {
        "required": [
          "comparator",
          "comparisonAttribute",
          "comparisonValue",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "Name of the Segment."
          },
          "description": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "Description of the Segment.",
            "nullable": true
          },
          "comparisonAttribute": {
            "maxLength": 1000,
            "minLength": 1,
            "type": "string",
            "description": "The user's attribute the evaluation process must take into account."
          },
          "comparator": {
            "$ref": "#/components/schemas/RolloutRuleComparator"
          },
          "comparisonValue": {
            "minLength": 1,
            "type": "string",
            "description": "The value to compare with the given user attribute's value."
          }
        }
      },
      "CreateSettingInitialValues": {
        "required": [
          "key",
          "name",
          "settingType"
        ],
        "type": "object",
        "properties": {
          "hint": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "A short description for the setting, shown on the Dashboard UI.",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "The IDs of the tags which are attached to the setting.",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "description": "The order of the Setting represented on the ConfigCat Dashboard.\r \nDetermined from an ascending sequence of integers.",
            "format": "int32",
            "nullable": true
          },
          "key": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The key of the Feature Flag or Setting."
          },
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The name of the Feature Flag or Setting."
          },
          "settingType": {
            "$ref": "#/components/schemas/SettingType"
          },
          "initialValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InitialValue"
            },
            "description": "Optional, initial value of the Feature Flag or Setting in the given Environments.",
            "nullable": true
          }
        }
      },
      "CreateTagModel": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "Name of the Tag."
          },
          "color": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Color of the Tag. Possible values: `panther`, `whale`, `salmon`, `lizard`, `canary`, `koala`, or any HTML color code.",
            "nullable": true
          }
        }
      },
      "DeleteIntegrationLinkModel": {
        "type": "object",
        "properties": {
          "hasRemainingIntegrationLink": {
            "type": "boolean"
          }
        }
      },
      "DeleteRepositoryReportsRequest": {
        "required": [
          "configId",
          "repository"
        ],
        "type": "object",
        "properties": {
          "configId": {
            "type": "string",
            "description": "The Config's identifier from where the reports should be deleted.",
            "format": "uuid"
          },
          "repository": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The source control repository which's reports should be deleted."
          },
          "branch": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "If it's set, only this branch's reports belonging to the given repository will be deleted.",
            "nullable": true
          },
          "settingId": {
            "type": "integer",
            "description": "If it's set, only this setting's reports belonging to the given repository will be deleted.",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "EnvironmentAccessModel": {
        "type": "object",
        "properties": {
          "environmentId": {
            "type": "string",
            "description": "Identifier of the Environment.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Name of the Environment.",
            "nullable": true
          },
          "color": {
            "type": "string",
            "description": "Color of the Environment.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of the Environment.",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "description": "The order of the Environment represented on the ConfigCat Dashboard.",
            "format": "int32"
          },
          "reasonRequired": {
            "type": "boolean",
            "description": "Determines whether a mandatory reason must be given every time when the Feature Flags or Settings in the given Environment are saved."
          },
          "environmentAccessType": {
            "$ref": "#/components/schemas/EnvironmentAccessType"
          }
        }
      },
      "EnvironmentAccessType": {
        "enum": [
          "full",
          "readOnly",
          "none"
        ],
        "type": "string",
        "description": "Represent the environment specific Feature Management permission."
      },
      "EnvironmentModel": {
        "type": "object",
        "properties": {
          "product": {
            "$ref": "#/components/schemas/ProductModel"
          },
          "environmentId": {
            "type": "string",
            "description": "Identifier of the Environment.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Name of the Environment.",
            "nullable": true
          },
          "color": {
            "type": "string",
            "description": "The configured color of the Environment.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of the Environment.",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "description": "The order of the Environment represented on the ConfigCat Dashboard.",
            "format": "int32"
          },
          "reasonRequired": {
            "type": "boolean",
            "description": "Determines whether a mandatory reason must be given every time when the Feature Flags or Settings in the given Environment are saved."
          }
        },
        "description": "Details of the Environment."
      },
      "EvaluationVersion": {
        "enum": [
          "v1",
          "v2"
        ],
        "type": "string",
        "description": "Determines the evaluation version of a Config.\r\nUsing `v2` enables the new features of Config V2 (https://configcat.com/docs/advanced/config-v2)."
      },
      "FeatureFlagLimitations": {
        "type": "object",
        "properties": {
          "maxPercentageOptionCount": {
            "type": "integer",
            "description": "Maximum number of percentage options a Feature Flag or Setting can have within a targeting rule.",
            "format": "int32"
          },
          "maxTargetingRuleCount": {
            "type": "integer",
            "description": "Maximum number of targeting rules a Feature Flag or Setting can have.",
            "format": "int32"
          },
          "maxComparisonValueLength": {
            "type": "integer",
            "description": "Maximum length of a text comparison value.",
            "format": "int32"
          },
          "maxComparisonValueListLength": {
            "type": "integer",
            "description": "Maximum item count of a list comparison value.",
            "format": "int32"
          },
          "maxComparisonValueListItemLength": {
            "type": "integer",
            "description": "Maximum length of a list comparison value's item.",
            "format": "int32"
          },
          "maxStringFlagValueLength": {
            "type": "integer",
            "description": "Maximum length of a text Setting's value.",
            "format": "int32"
          },
          "maxConditionPerTargetingRuleCount": {
            "type": "integer",
            "description": "Maximum number of `AND` conditions a Feature Flag or Setting can have within a targeting rule.",
            "format": "int32"
          }
        },
        "description": "Subscription limitations regarding Feature flag or Setting values and targeting."
      },
      "FlagReference": {
        "required": [
          "references",
          "settingId"
        ],
        "type": "object",
        "properties": {
          "settingId": {
            "type": "integer",
            "description": "The identifier of the Feature Flag or Setting the code reference belongs to.",
            "format": "int32"
          },
          "references": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferenceLines"
            },
            "description": "The actual references to the given Feature Flag or Setting."
          }
        }
      },
      "InitialValue": {
        "type": "object",
        "properties": {
          "environmentId": {
            "type": "string",
            "description": "The ID of the Environment where the initial value must be set.",
            "format": "uuid"
          },
          "value": {
            "description": "The initial value in the given Environment. It must respect the setting type.",
            "nullable": true
          }
        }
      },
      "IntegrationLinkDetail": {
        "type": "object",
        "properties": {
          "product": {
            "$ref": "#/components/schemas/ProductModel"
          },
          "config": {
            "$ref": "#/components/schemas/ConfigModel"
          },
          "environment": {
            "$ref": "#/components/schemas/EnvironmentModel"
          },
          "setting": {
            "$ref": "#/components/schemas/SettingDataModel"
          },
          "readOnly": {
            "type": "boolean"
          },
          "status": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "IntegrationLinkDetailsModel": {
        "type": "object",
        "properties": {
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IntegrationLinkDetail"
            },
            "nullable": true,
            "readOnly": true
          },
          "allIntegrationLinkCount": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "IntegrationLinkModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "integrationLinkType": {
            "$ref": "#/components/schemas/IntegrationLinkType"
          },
          "url": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "IntegrationLinkType": {
        "enum": [
          "trello",
          "jira",
          "monday"
        ],
        "type": "string"
      },
      "IntegrationModel": {
        "type": "object",
        "properties": {
          "product": {
            "$ref": "#/components/schemas/ProductModel"
          },
          "integrationId": {
            "type": "string",
            "description": "Identifier of the Integration.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Name of the Integration.",
            "nullable": true
          },
          "integrationType": {
            "$ref": "#/components/schemas/IntegrationType"
          },
          "parameters": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "Parameters of the Integration.",
            "nullable": true
          },
          "environmentIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "List of Environment IDs that are connected with this Integration. If the list is empty, all of the Environments are connected.",
            "nullable": true
          },
          "configIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "List of Config IDs that are connected with this Integration. If the list is empty, all of the Configs are connected.",
            "nullable": true
          }
        },
        "description": "Details of the Integration."
      },
      "IntegrationType": {
        "enum": [
          "dataDog",
          "slack",
          "amplitude",
          "mixPanel",
          "segment",
          "pubNub"
        ],
        "type": "string"
      },
      "IntegrationsModel": {
        "type": "object",
        "properties": {
          "integrations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IntegrationModel"
            },
            "description": "The Integrations of the Product.",
            "nullable": true
          }
        }
      },
      "InvitationModel": {
        "type": "object",
        "properties": {
          "invitationId": {
            "type": "string",
            "description": "The identifier of the Invitation.",
            "format": "uuid"
          },
          "email": {
            "type": "string",
            "description": "The invited user's email address.",
            "nullable": true
          },
          "permissionGroupId": {
            "type": "integer",
            "description": "The identifier of the Permission Group the user was invited to.",
            "format": "int64"
          },
          "createdAt": {
            "type": "string",
            "description": "Creation time of the Invitation.",
            "format": "date-time"
          },
          "expired": {
            "type": "boolean",
            "description": "Determines whether the Invitation is expired."
          }
        }
      },
      "InviteMembersRequest": {
        "required": [
          "emails",
          "permissionGroupId"
        ],
        "type": "object",
        "properties": {
          "emails": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of email addresses to invite."
          },
          "permissionGroupId": {
            "type": "integer",
            "description": "Identifier of the Permission Group to where the invited users should be added.",
            "format": "int64"
          }
        }
      },
      "JsonPatchOperation": {
        "required": [
          "op",
          "path"
        ],
        "type": "object",
        "properties": {
          "op": {
            "$ref": "#/components/schemas/OperationType"
          },
          "path": {
            "minLength": 1,
            "type": "string",
            "description": "The source path."
          },
          "from": {
            "type": "string",
            "description": "The target path.",
            "nullable": true
          },
          "value": {
            "description": "The discrete value.",
            "nullable": true
          }
        }
      },
      "KeyGenerationMode": {
        "enum": [
          "camelCase",
          "lowerCase",
          "upperCase",
          "pascalCase",
          "kebabCase"
        ],
        "type": "string",
        "description": "Determines the Feature Flag key generation mode."
      },
      "MeModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "fullName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        }
      },
      "MemberModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "Identifier of the Member.",
            "nullable": true
          },
          "productId": {
            "type": "string",
            "description": "Identifier of the Product where the Member has access.",
            "format": "uuid"
          },
          "permissionGroupId": {
            "type": "integer",
            "description": "Identifier of the Member's Permission Group.",
            "format": "int64"
          },
          "fullName": {
            "type": "string",
            "description": "Name of the Member.",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "Email of the Member.",
            "nullable": true
          }
        }
      },
      "ModifyIntegrationRequest": {
        "required": [
          "configIds",
          "environmentIds",
          "name",
          "parameters"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "Name of the Integration."
          },
          "parameters": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "Parameters of the Integration."
          },
          "environmentIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "List of Environment IDs that are connected with this Integration. If the list is empty, all of the Environments are connected."
          },
          "configIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "List of Config IDs that are connected with this Integration. If the list is empty, all of the Configs are connected."
          }
        }
      },
      "OperationType": {
        "enum": [
          "unknown",
          "add",
          "remove",
          "replace",
          "move",
          "copy",
          "test"
        ],
        "type": "string"
      },
      "OrganizationAdminModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "Identifier of the Organization Admin.",
            "nullable": true
          },
          "fullName": {
            "type": "string",
            "description": "Name of the Organization Admin.",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "Email of the OrganizationAdmin.",
            "nullable": true
          },
          "twoFactorEnabled": {
            "type": "boolean",
            "description": "Determines whether 2FA is enabled for the Organization Admin."
          }
        },
        "description": "Describes an Organization Admin."
      },
      "OrganizationInvitationModel": {
        "type": "object",
        "properties": {
          "invitationId": {
            "type": "string",
            "description": "The identifier of the Invitation.",
            "format": "uuid"
          },
          "email": {
            "type": "string",
            "description": "The invited user's email address.",
            "nullable": true
          },
          "productId": {
            "type": "string",
            "description": "The identifier of the Product the user was invited to.",
            "format": "uuid"
          },
          "productName": {
            "type": "string",
            "description": "The name of the Product the user was invited to.",
            "nullable": true
          },
          "permissionGroupId": {
            "type": "integer",
            "description": "The identifier of the Permission Group the user was invited to.",
            "format": "int64"
          },
          "createdAt": {
            "type": "string",
            "description": "Creation time of the Invitation.",
            "format": "date-time"
          },
          "expired": {
            "type": "boolean",
            "description": "Determines whether the Invitation is expired."
          },
          "expires": {
            "type": "string",
            "description": "Expiration time of the Invitation.",
            "format": "date-time"
          }
        }
      },
      "OrganizationMemberModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "Identifier of the Organization Admin.",
            "nullable": true
          },
          "fullName": {
            "type": "string",
            "description": "Name of the Organization Admin.",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "Email of the OrganizationAdmin.",
            "nullable": true
          },
          "twoFactorEnabled": {
            "type": "boolean",
            "description": "Determines whether 2FA is enabled for the Organization Admin."
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationPermissionModel"
            },
            "description": "The permissions of the Member.",
            "nullable": true
          }
        },
        "description": "Describes an Organization Member."
      },
      "OrganizationMembersModel": {
        "type": "object",
        "properties": {
          "admins": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationAdminModel"
            },
            "description": "List of Organization Admins.",
            "nullable": true
          },
          "billingManagers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationAdminModel"
            },
            "description": "List of Billing Managers.",
            "nullable": true
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationMemberModel"
            },
            "description": "List of Organization Members.",
            "nullable": true
          }
        }
      },
      "OrganizationModel": {
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Identifier of the Organization.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Name of the Organization.",
            "nullable": true
          }
        },
        "description": "Details of the Organization."
      },
      "OrganizationPermissionGroupModel": {
        "type": "object",
        "properties": {
          "permissionGroupId": {
            "type": "integer",
            "description": "Identifier of the Member's Permission Group.",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "Name of the Member's Permission Group.",
            "nullable": true
          }
        },
        "description": "Describes the Member's Permission Group within a Product."
      },
      "OrganizationPermissionModel": {
        "type": "object",
        "properties": {
          "product": {
            "$ref": "#/components/schemas/OrganizationProductModel"
          },
          "permissionGroup": {
            "$ref": "#/components/schemas/OrganizationPermissionGroupModel"
          }
        },
        "description": "Describes the Member's permission."
      },
      "OrganizationProductModel": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "description": "Identifier of the Member's Product.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Name of the Member's Product.",
            "nullable": true
          }
        },
        "description": "Describes the Member's Product."
      },
      "PercentageOptionModel": {
        "required": [
          "percentage",
          "value"
        ],
        "type": "object",
        "properties": {
          "percentage": {
            "type": "integer",
            "description": "A number between 0 and 100 that represents a randomly allocated fraction of the users.",
            "format": "int32"
          },
          "value": {
            "$ref": "#/components/schemas/ValueModel"
          }
        }
      },
      "PermissionGroupModel": {
        "type": "object",
        "properties": {
          "permissionGroupId": {
            "type": "integer",
            "description": "Identifier of the Permission Group.",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "Name of the Permission Group.",
            "nullable": true
          },
          "canManageMembers": {
            "type": "boolean",
            "description": "Group members can manage team members."
          },
          "canCreateOrUpdateConfig": {
            "type": "boolean",
            "description": "Group members can create/update Configs."
          },
          "canDeleteConfig": {
            "type": "boolean",
            "description": "Group members can delete Configs."
          },
          "canCreateOrUpdateEnvironment": {
            "type": "boolean",
            "description": "Group members can create/update Environments."
          },
          "canDeleteEnvironment": {
            "type": "boolean",
            "description": "Group members can delete Environments."
          },
          "canCreateOrUpdateSetting": {
            "type": "boolean",
            "description": "Group members can create/update Feature Flags and Settings."
          },
          "canTagSetting": {
            "type": "boolean",
            "description": "Group members can attach/detach Tags to Feature Flags and Settings."
          },
          "canDeleteSetting": {
            "type": "boolean",
            "description": "Group members can delete Feature Flags and Settings."
          },
          "canCreateOrUpdateTag": {
            "type": "boolean",
            "description": "Group members can create/update Tags."
          },
          "canDeleteTag": {
            "type": "boolean",
            "description": "Group members can delete Tags."
          },
          "canManageWebhook": {
            "type": "boolean",
            "description": "Group members can create/update/delete Webhooks."
          },
          "canUseExportImport": {
            "type": "boolean",
            "description": "Group members can use the export/import feature."
          },
          "canManageProductPreferences": {
            "type": "boolean",
            "description": "Group members can update Product preferences."
          },
          "canManageIntegrations": {
            "type": "boolean",
            "description": "Group members can add and configure integrations."
          },
          "canViewSdkKey": {
            "type": "boolean",
            "description": "Group members has access to SDK keys."
          },
          "canRotateSdkKey": {
            "type": "boolean",
            "description": "Group members can rotate SDK keys."
          },
          "canCreateOrUpdateSegments": {
            "type": "boolean",
            "description": "Group members can create/update Segments."
          },
          "canDeleteSegments": {
            "type": "boolean",
            "description": "Group members can delete Segments."
          },
          "canViewProductAuditLog": {
            "type": "boolean",
            "description": "Group members has access to audit logs."
          },
          "canViewProductStatistics": {
            "type": "boolean",
            "description": "Group members has access to product statistics."
          },
          "canDisable2FA": {
            "type": "boolean",
            "description": "Group members can disable two-factor authentication for other members."
          },
          "accessType": {
            "$ref": "#/components/schemas/AccessType"
          },
          "newEnvironmentAccessType": {
            "$ref": "#/components/schemas/EnvironmentAccessType"
          },
          "environmentAccesses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnvironmentAccessModel"
            },
            "description": "List of environment specific permissions.",
            "nullable": true
          },
          "product": {
            "$ref": "#/components/schemas/ProductModel"
          }
        }
      },
      "PreferencesModel": {
        "type": "object",
        "properties": {
          "reasonRequired": {
            "type": "boolean",
            "description": "Indicates that a mandatory note required for saving and publishing."
          },
          "keyGenerationMode": {
            "$ref": "#/components/schemas/KeyGenerationMode"
          },
          "showVariationId": {
            "type": "boolean",
            "description": "Indicates whether a variation ID's must be shown on the ConfigCat Dashboard."
          },
          "reasonRequiredEnvironments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReasonRequiredEnvironmentModel"
            },
            "description": "List of Environments where mandatory note must be set before saving and publishing.",
            "nullable": true
          },
          "mandatorySettingHint": {
            "type": "boolean",
            "description": "Indicates whether Feature flags and Settings must have a hint."
          }
        }
      },
      "PrerequisiteComparator": {
        "enum": [
          "equals",
          "doesNotEqual"
        ],
        "type": "string",
        "description": "Prerequisite flag comparison operator used during the evaluation process."
      },
      "PrerequisiteFlagConditionModel": {
        "required": [
          "comparator",
          "prerequisiteComparisonValue",
          "prerequisiteSettingId"
        ],
        "type": "object",
        "properties": {
          "prerequisiteSettingId": {
            "type": "integer",
            "description": "The prerequisite flag's identifier.",
            "format": "int32"
          },
          "comparator": {
            "$ref": "#/components/schemas/PrerequisiteComparator"
          },
          "prerequisiteComparisonValue": {
            "$ref": "#/components/schemas/ValueModel"
          }
        },
        "description": "Describes a condition that is based on a prerequisite flag."
      },
      "ProductModel": {
        "type": "object",
        "properties": {
          "organization": {
            "$ref": "#/components/schemas/OrganizationModel"
          },
          "productId": {
            "type": "string",
            "description": "Identifier of the Product.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Name of the Product.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of the Product.",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "description": "The order of the Product represented on the ConfigCat Dashboard.\r \nDetermined from an ascending sequence of integers.",
            "format": "int32"
          },
          "reasonRequired": {
            "type": "boolean",
            "description": "Determines whether a mandatory reason must be given every time when the Feature Flags or Settings within a Product are saved."
          }
        },
        "description": "Details of the Product."
      },
      "ReasonRequiredEnvironmentModel": {
        "type": "object",
        "properties": {
          "environmentId": {
            "type": "string",
            "description": "Identifier of the Environment.",
            "format": "uuid"
          },
          "reasonRequired": {
            "type": "boolean",
            "description": "Indicates that a mandatory note is required in this Environment for saving and publishing."
          },
          "environmentName": {
            "type": "string",
            "description": "Name of the Environment.",
            "nullable": true
          }
        }
      },
      "ReferenceLine": {
        "required": [
          "lineNumber"
        ],
        "type": "object",
        "properties": {
          "lineText": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "The content of the reference line.",
            "nullable": true
          },
          "lineNumber": {
            "type": "integer",
            "description": "The line number.",
            "format": "int32"
          }
        },
        "description": "Determines a code reference line."
      },
      "ReferenceLines": {
        "required": [
          "file",
          "referenceLine"
        ],
        "type": "object",
        "properties": {
          "file": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The file's name in where the code reference has been found. (Appears on the ConfigCat Dashboard)"
          },
          "fileUrl": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "The file's url. (Used to point to the file on the repository's website)",
            "nullable": true
          },
          "preLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferenceLine"
            },
            "description": "The lines before the actual reference line.",
            "nullable": true
          },
          "postLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferenceLine"
            },
            "description": "The lines after the actual reference line.",
            "nullable": true
          },
          "referenceLine": {
            "$ref": "#/components/schemas/ReferenceLine"
          }
        }
      },
      "ReplaceSettingModel": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "hint": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "A short description for the setting, shown on the Dashboard UI.",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "The IDs of the tags which are attached to the setting.",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "description": "The order of the Setting represented on the ConfigCat Dashboard.\r \nDetermined from an ascending sequence of integers.",
            "format": "int32",
            "nullable": true
          },
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The name of the Feature Flag or Setting."
          }
        }
      },
      "RolloutPercentageItemModel": {
        "required": [
          "percentage"
        ],
        "type": "object",
        "properties": {
          "percentage": {
            "type": "integer",
            "description": "The percentage value for the rule.",
            "format": "int64"
          },
          "value": {
            "description": "The value to serve when the user falls in the percentage rule. It must respect the setting type.",
            "nullable": true
          }
        }
      },
      "RolloutRuleComparator": {
        "enum": [
          "isOneOf",
          "isNotOneOf",
          "contains",
          "doesNotContain",
          "semVerIsOneOf",
          "semVerIsNotOneOf",
          "semVerLess",
          "semVerLessOrEquals",
          "semVerGreater",
          "semVerGreaterOrEquals",
          "numberEquals",
          "numberDoesNotEqual",
          "numberLess",
          "numberLessOrEquals",
          "numberGreater",
          "numberGreaterOrEquals",
          "sensitiveIsOneOf",
          "sensitiveIsNotOneOf"
        ],
        "type": "string",
        "description": "The comparison operator the evaluation process must use when it compares the given user attribute's value with the comparison value."
      },
      "RolloutRuleModel": {
        "type": "object",
        "properties": {
          "comparisonAttribute": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "The user attribute to compare.",
            "nullable": true
          },
          "comparator": {
            "$ref": "#/components/schemas/RolloutRuleComparator"
          },
          "comparisonValue": {
            "type": "string",
            "description": "The value to compare against.",
            "nullable": true
          },
          "value": {
            "description": "The value to serve when the comparison matches. It must respect the setting type.",
            "nullable": true
          },
          "segmentComparator": {
            "$ref": "#/components/schemas/SegmentComparator"
          },
          "segmentId": {
            "type": "string",
            "description": "The segment to compare against.",
            "format": "uuid",
            "nullable": true
          }
        }
      },
      "SdkKeysModel": {
        "type": "object",
        "properties": {
          "primary": {
            "type": "string",
            "description": "The primary SDK key.",
            "nullable": true
          },
          "secondary": {
            "type": "string",
            "description": "The secondary SDK key.",
            "nullable": true
          }
        }
      },
      "SegmentComparator": {
        "enum": [
          "isIn",
          "isNotIn"
        ],
        "type": "string",
        "description": "The segment comparison operator used during the evaluation process."
      },
      "SegmentConditionModel": {
        "required": [
          "comparator",
          "segmentId"
        ],
        "type": "object",
        "properties": {
          "segmentId": {
            "type": "string",
            "description": "The segment's identifier.",
            "format": "uuid"
          },
          "comparator": {
            "$ref": "#/components/schemas/SegmentComparator"
          }
        },
        "description": "Describes a condition that is based on a segment."
      },
      "SegmentListModel": {
        "type": "object",
        "properties": {
          "product": {
            "$ref": "#/components/schemas/ProductModel"
          },
          "segmentId": {
            "type": "string",
            "description": "Identifier of the Segment.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Name of the Segment.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of the Segment.",
            "nullable": true
          },
          "creatorEmail": {
            "type": "string",
            "description": "The email of the user who created the Segment.",
            "nullable": true
          },
          "creatorFullName": {
            "type": "string",
            "description": "The name of the user who created the Segment.",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "description": "The date and time when the Segment was created.",
            "format": "date-time"
          },
          "lastUpdaterEmail": {
            "type": "string",
            "description": "The email of the user who last updated the Segment.",
            "nullable": true
          },
          "lastUpdaterFullName": {
            "type": "string",
            "description": "The name of the user who last updated the Segment.",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "description": "The date and time when the Segment was last updated.",
            "format": "date-time"
          },
          "usage": {
            "type": "integer",
            "description": "Determines how many Feature Flags and Settings are using the Segment.",
            "format": "int32"
          }
        }
      },
      "SegmentModel": {
        "type": "object",
        "properties": {
          "product": {
            "$ref": "#/components/schemas/ProductModel"
          },
          "segmentId": {
            "type": "string",
            "description": "Identifier of the Segment.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Name of the Segment.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of the Segment.",
            "nullable": true
          },
          "creatorEmail": {
            "type": "string",
            "description": "The email of the user who created the Segment.",
            "nullable": true
          },
          "creatorFullName": {
            "type": "string",
            "description": "The name of the user who created the Segment.",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "description": "The date and time when the Segment was created.",
            "format": "date-time"
          },
          "lastUpdaterEmail": {
            "type": "string",
            "description": "The email of the user who last updated the Segment.",
            "nullable": true
          },
          "lastUpdaterFullName": {
            "type": "string",
            "description": "The name of the user who last updated the Segment.",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "description": "The date and time when the Segment was last updated.",
            "format": "date-time"
          },
          "comparisonAttribute": {
            "type": "string",
            "description": "The user's attribute the evaluation process must take into account.",
            "nullable": true
          },
          "comparator": {
            "$ref": "#/components/schemas/RolloutRuleComparator"
          },
          "comparisonValue": {
            "type": "string",
            "description": "The value to compare with the given user attribute's value.",
            "nullable": true
          }
        }
      },
      "SettingDataModel": {
        "type": "object",
        "properties": {
          "settingId": {
            "type": "integer",
            "description": "Identifier of the Feature Flag or Setting.",
            "format": "int32"
          },
          "key": {
            "type": "string",
            "description": "Key of the Feature Flag or Setting.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the Feature Flag or Setting.",
            "nullable": true
          },
          "hint": {
            "type": "string",
            "description": "Description of the Feature Flag or Setting.",
            "nullable": true
          },
          "settingType": {
            "$ref": "#/components/schemas/SettingType"
          },
          "order": {
            "type": "integer",
            "description": "The order of the Feature Flag or Setting represented on the ConfigCat Dashboard.",
            "format": "int32"
          },
          "createdAt": {
            "type": "string",
            "description": "The creation time of the Feature Flag or Setting.",
            "format": "date-time",
            "nullable": true
          },
          "creatorEmail": {
            "type": "string",
            "description": "The user's email address who created the Feature Flag or Setting.",
            "nullable": true
          },
          "creatorFullName": {
            "type": "string",
            "description": "The user's name who created the Feature Flag or Setting.",
            "nullable": true
          },
          "isWatching": {
            "type": "boolean"
          }
        },
        "description": "Metadata of a Feature Flag or Setting."
      },
      "SettingFormulaModel": {
        "type": "object",
        "properties": {
          "lastVersionId": {
            "type": "string",
            "format": "uuid"
          },
          "defaultValue": {
            "$ref": "#/components/schemas/ValueModel"
          },
          "targetingRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TargetingRuleModel"
            },
            "description": "The targeting rules of the Feature Flag or Setting.",
            "nullable": true
          },
          "setting": {
            "$ref": "#/components/schemas/SettingDataModel"
          },
          "updatedAt": {
            "type": "string",
            "description": "The last updated date and time when the Feature Flag or Setting.",
            "format": "date-time",
            "nullable": true
          },
          "percentageEvaluationAttribute": {
            "type": "string",
            "description": "The user attribute used for percentage evaluation. If not set, it defaults to the `Identifier` user object attribute.",
            "nullable": true
          },
          "lastUpdaterUserEmail": {
            "type": "string",
            "description": "The email of the user who last updated the Feature Flag or Setting.",
            "nullable": true
          },
          "lastUpdaterUserFullName": {
            "type": "string",
            "description": "The name of the user who last updated the Feature Flag or Setting.",
            "nullable": true
          },
          "integrationLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IntegrationLinkModel"
            },
            "description": "The integration links attached to the Feature Flag or Setting.",
            "nullable": true
          },
          "settingTags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SettingTagModel"
            },
            "description": "The tags attached to the Feature Flag or Setting.",
            "nullable": true
          },
          "settingIdsWherePrerequisite": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "List of Feature Flag and Setting IDs where the actual Feature Flag or Setting is prerequisite.",
            "nullable": true
          },
          "config": {
            "$ref": "#/components/schemas/ConfigModel"
          },
          "environment": {
            "$ref": "#/components/schemas/EnvironmentModel"
          },
          "readOnly": {
            "type": "boolean"
          },
          "featureFlagLimitations": {
            "$ref": "#/components/schemas/FeatureFlagLimitations"
          }
        }
      },
      "SettingModel": {
        "type": "object",
        "properties": {
          "settingId": {
            "type": "integer",
            "description": "Identifier of the Feature Flag or Setting.",
            "format": "int32"
          },
          "key": {
            "type": "string",
            "description": "Key of the Feature Flag or Setting.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the Feature Flag or Setting.",
            "nullable": true
          },
          "hint": {
            "type": "string",
            "description": "Description of the Feature Flag or Setting.",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "description": "The order of the Feature Flag or Setting represented on the ConfigCat Dashboard.",
            "format": "int32"
          },
          "settingType": {
            "$ref": "#/components/schemas/SettingType"
          },
          "configId": {
            "type": "string",
            "description": "Identifier of the Feature Flag's Config.",
            "format": "uuid"
          },
          "configName": {
            "type": "string",
            "description": "Name of the Feature Flag's Config.",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "description": "The creation time of the Feature Flag or Setting.",
            "format": "date-time",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagModel"
            },
            "description": "The tags attached to the Feature Flag or Setting.",
            "nullable": true
          }
        },
        "description": "Metadata of a Feature Flag or Setting."
      },
      "SettingTagModel": {
        "type": "object",
        "properties": {
          "settingTagId": {
            "type": "integer",
            "format": "int64"
          },
          "tagId": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "SettingType": {
        "enum": [
          "boolean",
          "string",
          "int",
          "double"
        ],
        "type": "string",
        "description": "The type of the Feature Flag or Setting."
      },
      "SettingValueModel": {
        "type": "object",
        "properties": {
          "rolloutRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RolloutRuleModel"
            },
            "description": "The targeting rule collection.",
            "nullable": true
          },
          "rolloutPercentageItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RolloutPercentageItemModel"
            },
            "description": "The percentage rule collection.",
            "nullable": true
          },
          "value": {
            "description": "The value to serve. It must respect the setting type.",
            "nullable": true
          },
          "setting": {
            "$ref": "#/components/schemas/SettingDataModel"
          },
          "updatedAt": {
            "type": "string",
            "description": "The last updated date and time when the Feature Flag or Setting.",
            "format": "date-time",
            "nullable": true
          },
          "lastUpdaterUserEmail": {
            "type": "string",
            "description": "The email of the user who last updated the Feature Flag or Setting.",
            "nullable": true
          },
          "lastUpdaterUserFullName": {
            "type": "string",
            "description": "The name of the user who last updated the Feature Flag or Setting.",
            "nullable": true
          },
          "integrationLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IntegrationLinkModel"
            },
            "description": "The integration links attached to the Feature Flag or Setting.",
            "nullable": true
          },
          "settingTags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SettingTagModel"
            },
            "description": "The tags attached to the Feature Flag or Setting.",
            "nullable": true
          },
          "config": {
            "$ref": "#/components/schemas/ConfigModel"
          },
          "environment": {
            "$ref": "#/components/schemas/EnvironmentModel"
          },
          "featureFlagLimitations": {
            "$ref": "#/components/schemas/FeatureFlagLimitations"
          },
          "readOnly": {
            "type": "boolean"
          }
        }
      },
      "TagModel": {
        "type": "object",
        "properties": {
          "product": {
            "$ref": "#/components/schemas/ProductModel"
          },
          "tagId": {
            "type": "integer",
            "description": "Identifier of the Tag.",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "Name of the Tag.",
            "nullable": true
          },
          "color": {
            "type": "string",
            "description": "The configured color of the Tag.",
            "nullable": true
          }
        }
      },
      "TargetingRuleModel": {
        "type": "object",
        "properties": {
          "conditions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConditionModel"
            },
            "description": "The list of conditions that are combined with logical AND operators.\r\nIt can be one of the following:\r\n- User condition\r\n - Segment condition\r\n- Prerequisite flag condition",
            "nullable": true
          },
          "percentageOptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PercentageOptionModel"
            },
            "description": "The percentage options from where the evaluation process will choose a value based on the flag's percentage evaluation attribute.",
            "nullable": true
          },
          "value": {
            "$ref": "#/components/schemas/ValueModel"
          }
        }
      },
      "UpdateConfigRequest": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The name of the Config.",
            "nullable": true
          },
          "description": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "The description of the Config.",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "description": "The order of the Config represented on the ConfigCat Dashboard.\r \nDetermined from an ascending sequence of integers.",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "UpdateEnvironmentModel": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The name of the Environment.",
            "nullable": true
          },
          "color": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The color of the Environment. RGB or HTML color codes are allowed.",
            "nullable": true
          },
          "description": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "The description of the Environment.",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "description": "The order of the Environment represented on the ConfigCat Dashboard.\r\nDetermined from an ascending sequence of integers.",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "UpdateEvaluationFormulaModel": {
        "required": [
          "defaultValue"
        ],
        "type": "object",
        "properties": {
          "defaultValue": {
            "$ref": "#/components/schemas/ValueModel"
          },
          "targetingRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TargetingRuleModel"
            },
            "description": "The targeting rules of the Feature Flag or Setting.",
            "nullable": true
          },
          "percentageEvaluationAttribute": {
            "maxLength": 1000,
            "type": "string",
            "description": "The user attribute used for percentage evaluation. If not set, it defaults to the `Identifier` user object attribute.",
            "nullable": true
          }
        }
      },
      "UpdateEvaluationFormulaWithIdModel": {
        "required": [
          "defaultValue"
        ],
        "type": "object",
        "properties": {
          "defaultValue": {
            "$ref": "#/components/schemas/ValueModel"
          },
          "targetingRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TargetingRuleModel"
            },
            "description": "The targeting rules of the Feature Flag or Setting.",
            "nullable": true
          },
          "percentageEvaluationAttribute": {
            "maxLength": 1000,
            "type": "string",
            "description": "The user attribute used for percentage evaluation. If not set, it defaults to the `Identifier` user object attribute.",
            "nullable": true
          },
          "settingId": {
            "type": "integer",
            "description": "The identifier of the feature flag or setting.",
            "format": "int32"
          }
        }
      },
      "UpdateEvaluationFormulasModel": {
        "type": "object",
        "properties": {
          "updateFormulas": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateEvaluationFormulaWithIdModel"
            },
            "description": "Evaluation descriptors of each updated Feature Flag and Setting.",
            "nullable": true
          }
        }
      },
      "UpdateMemberPermissionsRequest": {
        "type": "object",
        "properties": {
          "permissionGroupIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "List of Permission Group identifiers to where the Member should be added.",
            "nullable": true
          },
          "isAdmin": {
            "type": "boolean",
            "description": "Indicates that the member must be Organization Admin.",
            "nullable": true
          },
          "isBillingManager": {
            "type": "boolean",
            "description": "Indicates that the member must be Billing Manager.",
            "nullable": true
          },
          "removeFromPermissionGroupsWhereIdNotSet": {
            "type": "boolean",
            "description": "When `true`, the member will be removed from those Permission Groups that are not listed in the `permissionGroupIds` field."
          }
        }
      },
      "UpdatePermissionGroupRequest": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Name of the Permission Group.",
            "nullable": true
          },
          "canManageMembers": {
            "type": "boolean",
            "description": "Group members can manage team members.",
            "nullable": true
          },
          "canCreateOrUpdateConfig": {
            "type": "boolean",
            "description": "Group members can create/update Configs.",
            "nullable": true
          },
          "canDeleteConfig": {
            "type": "boolean",
            "description": "Group members can delete Configs.",
            "nullable": true
          },
          "canCreateOrUpdateEnvironment": {
            "type": "boolean",
            "description": "Group members can create/update Environments.",
            "nullable": true
          },
          "canDeleteEnvironment": {
            "type": "boolean",
            "description": "Group members can delete Environments.",
            "nullable": true
          },
          "canCreateOrUpdateSetting": {
            "type": "boolean",
            "description": "Group members can create/update Feature Flags and Settings.",
            "nullable": true
          },
          "canTagSetting": {
            "type": "boolean",
            "description": "Group members can attach/detach Tags to Feature Flags and Settings.",
            "nullable": true
          },
          "canDeleteSetting": {
            "type": "boolean",
            "description": "Group members can delete Feature Flags and Settings.",
            "nullable": true
          },
          "canCreateOrUpdateTag": {
            "type": "boolean",
            "description": "Group members can create/update Tags.",
            "nullable": true
          },
          "canDeleteTag": {
            "type": "boolean",
            "description": "Group members can delete Tags.",
            "nullable": true
          },
          "canManageWebhook": {
            "type": "boolean",
            "description": "Group members can create/update/delete Webhooks.",
            "nullable": true
          },
          "canUseExportImport": {
            "type": "boolean",
            "description": "Group members can use the export/import feature.",
            "nullable": true
          },
          "canManageProductPreferences": {
            "type": "boolean",
            "description": "Group members can update Product preferences.",
            "nullable": true
          },
          "canManageIntegrations": {
            "type": "boolean",
            "description": "Group members can add and configure integrations.",
            "nullable": true
          },
          "canViewSdkKey": {
            "type": "boolean",
            "description": "Group members has access to SDK keys.",
            "nullable": true
          },
          "canRotateSdkKey": {
            "type": "boolean",
            "description": "Group members can rotate SDK keys.",
            "nullable": true
          },
          "canCreateOrUpdateSegments": {
            "type": "boolean",
            "description": "Group members can create/update Segments.",
            "nullable": true
          },
          "canDeleteSegments": {
            "type": "boolean",
            "description": "Group members can delete Segments.",
            "nullable": true
          },
          "canViewProductAuditLog": {
            "type": "boolean",
            "description": "Group members has access to audit logs.",
            "nullable": true
          },
          "canViewProductStatistics": {
            "type": "boolean",
            "description": "Group members has access to product statistics.",
            "nullable": true
          },
          "canDisable2FA": {
            "type": "boolean",
            "description": "Group members can disable two-factor authentication for other members.",
            "nullable": true
          },
          "accessType": {
            "$ref": "#/components/schemas/AccessType"
          },
          "newEnvironmentAccessType": {
            "$ref": "#/components/schemas/EnvironmentAccessType"
          },
          "environmentAccesses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateOrUpdateEnvironmentAccessModel"
            },
            "description": "List of environment specific permissions.",
            "nullable": true
          }
        }
      },
      "UpdatePreferencesRequest": {
        "type": "object",
        "properties": {
          "reasonRequired": {
            "type": "boolean",
            "description": "Indicates that a mandatory note is required for saving and publishing.",
            "nullable": true
          },
          "keyGenerationMode": {
            "$ref": "#/components/schemas/KeyGenerationMode"
          },
          "showVariationId": {
            "type": "boolean",
            "description": "Indicates whether a variation ID's must be shown on the ConfigCat Dashboard.",
            "nullable": true
          },
          "mandatorySettingHint": {
            "type": "boolean",
            "description": "Indicates whether Feature flags and Settings must have a hint.",
            "nullable": true
          },
          "reasonRequiredEnvironments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateReasonRequiredEnvironmentModel"
            },
            "description": "List of Environments where mandatory note must be set before saving and publishing.",
            "nullable": true
          }
        }
      },
      "UpdateProductRequest": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "The name of the Product.",
            "nullable": true
          },
          "description": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "The description of the Product.",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "description": "The order of the Product represented on the ConfigCat Dashboard.\r \nDetermined from an ascending sequence of integers.",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "UpdateReasonRequiredEnvironmentModel": {
        "type": "object",
        "properties": {
          "environmentId": {
            "type": "string",
            "description": "Identifier of the Environment.",
            "format": "uuid"
          },
          "reasonRequired": {
            "type": "boolean",
            "description": "Indicates that a mandatory note is required in this Environment for saving and publishing."
          }
        }
      },
      "UpdateSegmentModel": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "description": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "comparisonAttribute": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "comparator": {
            "$ref": "#/components/schemas/RolloutRuleComparator"
          },
          "comparisonValue": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "UpdateSettingValueModel": {
        "type": "object",
        "properties": {
          "rolloutRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RolloutRuleModel"
            },
            "description": "The targeting rule collection.",
            "nullable": true
          },
          "rolloutPercentageItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RolloutPercentageItemModel"
            },
            "description": "The percentage rule collection.",
            "nullable": true
          },
          "value": {
            "description": "The value to serve. It must respect the setting type.",
            "nullable": true
          }
        }
      },
      "UpdateSettingValueWithSettingIdModel": {
        "type": "object",
        "properties": {
          "rolloutRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RolloutRuleModel"
            },
            "description": "The targeting rule collection.",
            "nullable": true
          },
          "rolloutPercentageItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RolloutPercentageItemModel"
            },
            "description": "The percentage rule collection.",
            "nullable": true
          },
          "value": {
            "description": "The value to serve. It must respect the setting type.",
            "nullable": true
          },
          "settingId": {
            "type": "integer",
            "description": "The id of the Setting.",
            "format": "int32"
          }
        }
      },
      "UpdateSettingValuesWithIdModel": {
        "type": "object",
        "properties": {
          "settingValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateSettingValueWithSettingIdModel"
            },
            "description": "The values to update.",
            "nullable": true
          }
        }
      },
      "UpdateTagModel": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Name of the Tag.",
            "nullable": true
          },
          "color": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Color of the Tag. Possible values: `panther`, `whale`, `salmon`, `lizard`, `canary`, `koala`, or any HTML color code.",
            "nullable": true
          }
        }
      },
      "UserComparator": {
        "enum": [
          "isOneOf",
          "isNotOneOf",
          "containsAnyOf",
          "doesNotContainAnyOf",
          "semVerIsOneOf",
          "semVerIsNotOneOf",
          "semVerLess",
          "semVerLessOrEquals",
          "semVerGreater",
          "semVerGreaterOrEquals",
          "numberEquals",
          "numberDoesNotEqual",
          "numberLess",
          "numberLessOrEquals",
          "numberGreater",
          "numberGreaterOrEquals",
          "sensitiveIsOneOf",
          "sensitiveIsNotOneOf",
          "dateTimeBefore",
          "dateTimeAfter",
          "sensitiveTextEquals",
          "sensitiveTextDoesNotEqual",
          "sensitiveTextStartsWithAnyOf",
          "sensitiveTextNotStartsWithAnyOf",
          "sensitiveTextEndsWithAnyOf",
          "sensitiveTextNotEndsWithAnyOf",
          "sensitiveArrayContainsAnyOf",
          "sensitiveArrayDoesNotContainAnyOf",
          "textEquals",
          "textDoesNotEqual",
          "textStartsWithAnyOf",
          "textNotStartsWithAnyOf",
          "textEndsWithAnyOf",
          "textNotEndsWithAnyOf",
          "arrayContainsAnyOf",
          "arrayDoesNotContainAnyOf"
        ],
        "type": "string",
        "description": "The comparison operator which defines the relation between the comparison attribute and the comparison value."
      },
      "UserConditionModel": {
        "required": [
          "comparator",
          "comparisonAttribute",
          "comparisonValue"
        ],
        "type": "object",
        "properties": {
          "comparisonAttribute": {
            "maxLength": 1000,
            "minLength": 1,
            "type": "string",
            "description": "The User Object attribute that the condition is based on. Can be \"User ID\", \"Email\", \"Country\" or any custom attribute."
          },
          "comparator": {
            "$ref": "#/components/schemas/UserComparator"
          },
          "comparisonValue": {
            "$ref": "#/components/schemas/ComparisonValueModel"
          }
        },
        "description": "Describes a condition that is based on user attributes."
      },
      "UserModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "Identifier of the Member.",
            "nullable": true
          },
          "fullName": {
            "type": "string",
            "description": "Name of the Member.",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "Email of the Member.",
            "nullable": true
          },
          "twoFactorEnabled": {
            "type": "boolean",
            "description": "Determines whether 2FA is enabled for the Member."
          }
        }
      },
      "ValueModel": {
        "type": "object",
        "properties": {
          "boolValue": {
            "type": "boolean",
            "description": "The served value in case of a boolean Feature Flag.",
            "nullable": true
          },
          "stringValue": {
            "type": "string",
            "description": "The served value in case of a text Setting.",
            "nullable": true
          },
          "intValue": {
            "type": "integer",
            "description": "The served value in case of a whole number Setting.",
            "format": "int32",
            "nullable": true
          },
          "doubleValue": {
            "type": "number",
            "description": "The served value in case of a decimal number Setting.",
            "format": "double",
            "nullable": true
          }
        },
        "description": "Represents the value of a Feature Flag or Setting."
      },
      "WebHookHttpMethod": {
        "enum": [
          "get",
          "post"
        ],
        "type": "string"
      },
      "WebHookRequest": {
        "required": [
          "url"
        ],
        "type": "object",
        "properties": {
          "url": {
            "maxLength": 1000,
            "minLength": 7,
            "type": "string",
            "description": "The URL of the Webhook."
          },
          "content": {
            "maxLength": 15000,
            "minLength": 0,
            "type": "string",
            "description": "The HTTP body content.",
            "nullable": true
          },
          "httpMethod": {
            "$ref": "#/components/schemas/WebHookHttpMethod"
          },
          "webHookHeaders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebhookHeaderModel"
            },
            "description": "List of HTTP headers.",
            "nullable": true
          }
        }
      },
      "WebhookConfig": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The Config's name.",
            "nullable": true
          },
          "configId": {
            "type": "string",
            "description": "The Config's identifier.",
            "format": "uuid"
          }
        },
        "description": "The Config where the applied changes will invoke the Webhook."
      },
      "WebhookEnvironment": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The Environment's name.",
            "nullable": true
          },
          "environmentId": {
            "type": "string",
            "description": "The Environment's identifier.",
            "format": "uuid"
          }
        },
        "description": "The Environment where the applied changes will invoke the Webhook."
      },
      "WebhookHeaderModel": {
        "required": [
          "key",
          "value"
        ],
        "type": "object",
        "properties": {
          "key": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The HTTP header key."
          },
          "value": {
            "maxLength": 1000,
            "minLength": 1,
            "type": "string",
            "description": "The HTTP header value."
          },
          "isSecure": {
            "type": "boolean",
            "description": "Indicates whether the header value is sensitive."
          }
        }
      },
      "WebhookModel": {
        "type": "object",
        "properties": {
          "webhookId": {
            "type": "integer",
            "description": "The identifier of the Webhook.",
            "format": "int32"
          },
          "url": {
            "type": "string",
            "description": "The URL of the Webhook.",
            "nullable": true
          },
          "httpMethod": {
            "$ref": "#/components/schemas/WebHookHttpMethod"
          },
          "content": {
            "type": "string",
            "description": "The HTTP body content.",
            "nullable": true
          },
          "webHookHeaders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebhookHeaderModel"
            },
            "description": "List of HTTP headers that the Webhook must send.",
            "nullable": true
          },
          "config": {
            "$ref": "#/components/schemas/WebhookConfig"
          },
          "environment": {
            "$ref": "#/components/schemas/WebhookEnvironment"
          }
        }
      },
      "WebhookSigningKeysModel": {
        "type": "object",
        "properties": {
          "key1": {
            "type": "string",
            "description": "The first signing key.",
            "nullable": true
          },
          "key2": {
            "type": "string",
            "description": "The second signing key.",
            "nullable": true
          }
        }
      }
    },
    "securitySchemes": {
      "Basic": {
        "type": "http",
        "description": "To authenticate with the API you have to fill the `Authorization` HTTP request header with your Public API credentials.\n\nYou can create your credentials on the <a target=\"_blank\" href=\"https://app.configcat.com/my-account/public-api-credentials\">Public API credentials management page</a>.",
        "scheme": "basic"
      }
    }
  },
  "security": [
    {
      "Basic": []
    }
  ],
  "tags": [
    {
      "name": "Feature Flag & Setting values using SDK Key V2",
      "description": "<i>These endpoints are exclusive for <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://configcat.com/docs/advanced/config-v2/\"><b>Config V2</b></a> Feature Flags.</i>\n<br /><i>They can only be used on a Config that has `evaluationVersion` set to `v2`.</i><br /><br />\nWith these endpoints you can control how your existing Feature Flags and Settings should serve their values.\n You can turn Feature Flags on or off, update Setting values and change Targeting Rules.\n\nThese endpoints are determining the Environment and Config by the <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://app.configcat.com/sdkkey\">SDK key</a> passed in\nthe `X-CONFIGCAT-SDKKEY` request header. To identify the desired Feature Flag or Setting to change,\nyou can use either its `settingId` or `key` attribute. You can get those attributes\nfrom the [Feature Flag & Setting](#tag/Feature-Flags-and-Settings) endpoints."
    },
    {
      "name": "Feature Flag & Setting values V2",
      "description": "<i>These endpoints are exclusive for <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://configcat.com/docs/advanced/config-v2/\"><b>Config V2</b></a> Feature Flags.</i>\n<br /><i>They can only be used on a Config that has `evaluationVersion` set to `v2`.</i><br /><br />\nWith these endpoints you can control how your existing Feature Flags and Settings should serve their values.\n You can turn Feature Flags on or off, update Setting values and change Targeting Rules.\n\nTo determine which Feature Flag or Setting you want to work with you have to pass its `settingId`. It can be\nobtained from the [Feature Flag & Setting](#tag/Feature-Flags-and-Settings) endpoints.\n\nYou also have to specify in which Environment you want to change the served value configuration by its\n`environmentId` which can be obtained from the [List Environments](#operation/get-environments) endpoint."
    },
    {
      "name": "Feature Flag & Setting values using SDK Key",
      "description": "With these endpoints you can control how your existing Feature Flags and Settings should serve their values. \nYou can turn Feature Flags on or off, update Setting values and also add, remove or change the order of Percentage and Targeting Rules.\n\nThese endpoints are determining the Environment and Config by the <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://app.configcat.com/sdkkey\">SDK key</a> passed in\nthe `X-CONFIGCAT-SDKKEY` request header. To identify the desired Feature Flag or Setting to change, \nyou can use either its `settingId` or `key` attribute. You can get those attributes \nfrom the [Feature Flag & Setting](#tag/Feature-Flags-and-Settings) endpoints."
    },
    {
      "name": "Feature Flag & Setting values",
      "description": "With these endpoints you can control how your existing Feature Flags and Settings should serve their values. \nYou can turn Feature Flags on or off, update Setting values and also add, remove or reorder Percentage and Targeting Rules.\n\nTo determine which Feature Flag or Setting you want to work with you have to pass its `settingId`. It can be\nobtained from the [Feature Flag & Setting](#tag/Feature-Flags-and-Settings) endpoints.\n\nYou also have to specify in which Environment you want to change the served value configuration by its\n`environmentId` which can be obtained from the [List Environments](#operation/get-environments) endpoint."
    },
    {
      "name": "Feature Flags & Settings",
      "description": "With these endpoints you can manage your Feature Flags or Settings within a Config. \nHowever you can't use them for manipulating the values of your Feature Flags and Settings,\nto do that please visit the [Feature Flag & Setting values using SDK Key](#tag/Feature-Flag-and-Setting-values-using-SDK-Key)\nand [Feature Flag & Setting values](#tag/Feature-Flag-and-Setting-values) sections of the API.\n\nFor using these endpoints, first you have to select which Config you want to work with by its `configId` \nwhich can be obtained from the [List Configs](#operation/get-configs) endpoint. \nThen you can use it to create new Feature Flags or to get information about existing ones.\n\nThen you can obtain the `settingId` or `key` of your desired Feature Flag or Setting \nto use them for further operations in this API. \n\n<a href=\"https://configcat.com/docs/main-concepts/#setting\" target=\"_blank\" rel=\"noopener noreferrer\">Here</a> you can read more about the concept of Settings."
    },
    {
      "name": "Organizations",
      "description": "With these endpoints you can get useful information about your Organizations.\n This also can be used to manage your [Products](#tag/Products).\n\n<a href=\"https://configcat.com/docs/organization/\" target=\"_blank\" rel=\"noopener noreferrer\">Here</a> you can read more about the Organizations."
    },
    {
      "name": "Members",
      "description": "With these endpoints you can manage your Members.\n\n<a href=\"https://configcat.com/docs/advanced/team-management/team-management-basics\" target=\"_blank\" rel=\"noopener noreferrer\">Here</a> you can read more about Team Management."
    },
    {
      "name": "Permission Groups",
      "description": "With these endpoints you can manage your Permission Groups.\n\n<a href=\"https://configcat.com/docs/advanced/team-management/team-management-basics\" target=\"_blank\" rel=\"noopener noreferrer\">Here</a> you can read more about Permissions."
    },
    {
      "name": "Products",
      "description": "With these endpoints you can manage your Products.\nBy gathering the right `productId`, you can also manage [Environments](#tag/Environments), [Configs](#tag/Configs), [Tags](#tag/Tags), [Webhooks](#tag/Webhooks), and [Permission Groups](#tag/Permission-Groups) through the API.\n\n<a href=\"https://configcat.com/docs/main-concepts/#product\" target=\"_blank\" rel=\"noopener noreferrer\">Here</a> you can read more about the concept of Products."
    },
    {
      "name": "Webhooks",
      "description": "With these endpoints you can manage Webhooks.\n\n<a href=\"https://configcat.com/docs/advanced/notifications-webhooks\" target=\"_blank\" rel=\"noopener noreferrer\">Here</a> you can read more about the concept of Webhooks."
    },
    {
      "name": "Configs",
      "description": "With these endpoints you can manage your Configs.\nThis also can be used to manage [Feature Flags and Settings](#tag/Feature-Flags-and-Settings) and their \n[served values](#tag/Feature-Flag-and-Setting-values) through this API.\n \n<a href=\"https://configcat.com/docs/main-concepts/#config\" target=\"_blank\" rel=\"noopener noreferrer\">Here</a> you can read more about the concept of Configs."
    },
    {
      "name": "Environments",
      "description": "With these endpoints you can update existing Environments or add new ones into your selected [Product](#tag/Products). \n\n<a href=\"https://configcat.com/docs/main-concepts/#environment\" target=\"_blank\" rel=\"noopener noreferrer\">Here</a> you can read more about the concept of Environments."
    },
    {
      "name": "Segments",
      "description": "With these endpoints you can manage your Segments.\nSegments allow you to group your users based on any of their properties. Define user segments and add them to multiple feature flags."
    },
    {
      "name": "SDK Keys",
      "description": "With these endpoints you can manage your SDK Keys."
    },
    {
      "name": "Tags",
      "description": "With these endpoints you can manage Tags. Tags are stored under a Product. You can  and add a Tag to a Feature Flag or Setting using the [Update Flag](#operation/update-setting) endpoint."
    },
    {
      "name": "Integrations",
      "description": "With these endpoints you can manage your Integrations.\n\n- <a href=\"https://configcat.com/docs/integrations/datadog/\" target=\"_blank\" rel=\"noopener noreferrer\">Datadog</a>\n- <a href=\"https://configcat.com/docs/integrations/slack/\" target=\"_blank\" rel=\"noopener noreferrer\">Slack</a>\n- <a href=\"https://configcat.com/docs/integrations/amplitude/\" target=\"_blank\" rel=\"noopener noreferrer\">Amplitude</a>\n- <a href=\"https://configcat.com/docs/integrations/mixpanel/\" target=\"_blank\" rel=\"noopener noreferrer\">MixPanel</a>\n- <a href=\"https://configcat.com/docs/integrations/segment/\" target=\"_blank\" rel=\"noopener noreferrer\">Segment</a>\n- PubNub (work in progress)"
    },
    {
      "name": "Integration links",
      "description": "With these endpoints you can manage your integration links."
    },
    {
      "name": "Audit logs",
      "description": "Access audit log entries."
    },
    {
      "name": "Me",
      "description": "Information about the current user."
    },
    {
      "name": "Code References",
      "description": "With this endpoint you can upload Feature Flag and Setting usage references that will be shown on the ConfigCat Dashboard.\n\n<a href=\"https://configcat.com/docs/advanced/code-references/overview/\" target=\"_blank\" rel=\"noopener noreferrer\">Here</a> you can read more about the concept of Code References."
    }
  ],
  "x-tagGroups": [
    {
      "name": "Feature Flag values V2",
      "tags": [
        "Feature Flag & Setting values using SDK Key V2",
        "Feature Flag & Setting values V2"
      ]
    },
    {
      "name": "Feature Flag values (legacy)",
      "tags": [
        "Feature Flag & Setting values using SDK Key",
        "Feature Flag & Setting values"
      ]
    },
    {
      "name": "Feature Flag metadata",
      "tags": [
        "Feature Flags & Settings",
        "Tags"
      ]
    },
    {
      "name": "General",
      "tags": [
        "Products",
        "Configs",
        "Environments",
        "Segments",
        "SDK Keys",
        "Webhooks",
        "Integrations",
        "Code References"
      ]
    },
    {
      "name": "Membership",
      "tags": [
        "Organizations",
        "Members",
        "Permission Groups"
      ]
    },
    {
      "name": "Diagnostics",
      "tags": [
        "Audit logs",
        "Me"
      ]
    }
  ]
}