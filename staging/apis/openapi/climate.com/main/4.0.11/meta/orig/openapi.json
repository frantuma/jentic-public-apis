{
  "openapi": "3.0.0",
  "info": {
    "title": "Climate FieldView Platform APIs",
    "description": "**Last Modified**: Mon Jan  6 20:04:22 UTC 2025\n\n\nAll endpoints are only accessible via HTTPS.\n\n* All API endpoints are located at `https://platform.climate.com` (e.g.\n`https://platform.climate.com/v4/fields`).\n\n* The authorization token endpoint is located at\n`https://api.climate.com/api/oauth/token`.\n\n## Troubleshooting\n\n`X-Http-Request-Id` response header will be returned on every call,\nsuccessful or not. If you experience an issue with our api and need\nto contact technical support, please supply the value of the `X-Http-Request-Id`\nheader along with an approximate time of when the request was made.\n\n## Request Limits\n\nWhen you\u2019re onboarded to Climate\u2019s API platform, your `x-api-key` is assigned a custom usage plan. Usage plans are unique to each partner and have the following key attributes: \n\n1. Throttling information\n    * burstLimit: Maximum rate limit over a period ranging from 1 second to a few seconds\n    * rateLimit: A steady-state rate limit\n\n2. Quota information\n    * Limit: The maximum number of requests that can be made in a given month\n\nWhen the request rate threshold is exceeded, a `429` response code is returned. Optionally, the [`Retry-After`](https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.37) header may be returned: \n\nFollowing are examples of rate limit errors:\n\n1. Rate limit exceeded:\n\n<br>HTTP/1.1 429 \n<br>Content-Type: application/json\n<br>Content-Length: 32\n\n   {\"message\":\"Too Many Requests\"}\n\n2. Quota exhausted:\n<br>HTTP/1.1 429 \n<br>Content-Type: application/json\n<br>Content-Length: 29\n\n    {\"message\":\"Limit Exceeded\"}\n\n## Pagination\n\nPagination is performed via headers. Any request which returns a `\"results\"`\narray may be paginated. The following figure shows how query results are laid out with\nX-Limit=4 and no filter applied.\n\n<img style=\"width:70%;height:auto;\" src=\"https://s3-us-west-2.amazonaws.com/climate-com/images/svg_upload_tests/paging.png\">\n\n* If there are no results, a response code of `304` will be returned.\n\n* If the response is the last set of results, a response code of `200` or\n`206` will be returned.\n\n* If there are more results, a response code of `206` will be returned.\n\n* If `X-Next-Token` is provided in the request headers but the token has\nexpired, a response code of `409` will be returned. This is only applicable\nfor some endpoints; see specific endpoint documentation below.\n\n#### X-Limit\n\nThe page size can be controlled with the `X-Limit` header. Valid values are\n`1-100` and defaults to `100`.\n\n#### X-Next-Token\n\nIf the results are paginated, a response header of `X-Next-Token` will be\nreturned. Use the associated value in the subsequent request (via the `X-Next-Token`\nrequest header) to retrieve the next page. The following sequence diagram shows how to\nuse `X-Next-Token` to fetch all the records.\n\n<img src=\"https://s3-us-west-2.amazonaws.com/climate-com/images/svg_upload_tests/x-next-token.svg\">\n\n\n## Chunked Uploads\n\nUploads larger than `5MiB` (`5242880 bytes`) must be done in `5MiB` chunks\n(with the exception of the final chunk). Each chunk request MUST contain a\n`Content-Range` header specifying the portion of the upload, and a `Content-Type`\nheader specifying binary content type (`application/octet-stream`). Range\nuploads must be contiguous. The maximum upload size is capped at `500MiB` (`524288000 bytes`).\n\n## Chunked Downloads\n\nDownloads larger than `5MiB` (`5242880 bytes`) must be done in `1-5MiB`\nchunks (with the exception of the final chunk, which may be less than `1MiB`).\nEach chunk request MUST contain a `Range` header specifying the requested portion of the download,\nand an `Accept` header specifying binary and json content types  (`application/octet-stream,application/json`)\nor all content types (`*/*`).\n\n## Drivers\n\nIf you need drivers to process agronomic data, download the ADAPT plugin below. We only support the plugin in the Windows environment, minimum is Windows 7 SP1.\n\nFor asPlanted, asHarvested and asApplied data:\n* [ADAPT Plugin](https://dev.fieldview.com/drivers/ClimateADAPTPlugin_latest.exe)\n<br>Release notes can be found [here](https://dev.fieldview.com/drivers/adapt-release-notes.txt).\n<br>Download and use of the ADAPT plugin means that you agree to the EULA for use of the ADAPT plugin. \n<br>Please review the [EULA](https://dev.fieldview.com/EULA/ADAPT%20Plugin%20EULA-06-19.pdf) (last updated on June 6th, 2019) before download and use of the ADAPT plugin.\n<br>For more information, please refer to:\n  * [ADAPT Resources](https://adaptframework.org/)\n  * [ADAPT Overview](https://aggateway.atlassian.net/wiki/spaces/ADM/overview)\n  * [ADAPT FAQ](https://aggateway.atlassian.net/wiki/spaces/ADM/pages/165942474/ADAPT+Frequently-Asked+Questions+FAQ)\n  * [ADAPT Videos](https://adaptframework.org/adapt-videos/)\n\n## Sample Test Data\n\nSample agronomic data:\n* [asPlanted and asHarvested data](https://dev.fieldview.com/sample-agronomic-data/Planting_Harvesting_data_04_18_2018_21_46_18.zip)\n* [asApplied data set 1](https://dev.fieldview.com/sample-agronomic-data/as-applied-data1.zip)\n* [asApplied data set 2](https://dev.fieldview.com/sample-agronomic-data/as-applied-data2.zip)\n<br>To upload the sample data to your account, please follow the instructions in this [link](https://support.climate.com/kt#/kA02A000000AaxzSAC/en_US).\n\nSample soil data:\n* [Sample soil data](https://dev.fieldview.com/sample-soil-data/soil-sample.xml)\n---\n",
    "contact": {
      "name": "Climate FieldView Support",
      "email": "developer@climate.com"
    },
    "version": "4.0.11",
    "x-jentic-source-url": "https://dev.fieldview.com/openapi/platform.yaml"
  },
  "tags": [
    {
      "name": "Boundaries",
      "description": "Field Boundary data endpoints."
    },
    {
      "name": "Fields",
      "description": "Field data endpoints."
    },
    {
      "name": "Uploads",
      "description": "General data upload endpoints."
    },
    {
      "name": "Exports",
      "description": "General data export endpoints."
    },
    {
      "name": "Layers",
      "description": "General data retrieval endpoints."
    },
    {
      "name": "ResourceOwners",
      "description": "Resource Owner data endpoints."
    },
    {
      "name": "FarmOrganizations",
      "description": "Farm organization data endpoints."
    },
    {
      "name": "Operations",
      "description": "Operation data endpoints."
    }
  ],
  "paths": {
    "/v4/fields": {
      "get": {
        "summary": "Retrieve list of Fields",
        "description": "Retrieve list of **Fields**. Filter the results by field name if the `fieldName` query parameter is specified.",
        "operationId": "fetchFields",
        "tags": [
          "Fields"
        ],
        "security": [
          {
            "api_key": []
          },
          {
            "oauth2_authorization_code": [
              "platform",
              "fields:read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/X-Next-Token"
          },
          {
            "$ref": "#/components/parameters/X-Limit"
          },
          {
            "$ref": "#/components/parameters/OptionalFieldNamePrefix"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/FetchFieldsOk"
          },
          "206": {
            "$ref": "#/components/responses/FetchFieldsPartial"
          },
          "304": {
            "$ref": "#/components/responses/304"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/v4/fields/{fieldId}": {
      "get": {
        "summary": "Retrieve a specific Field by ID",
        "description": "Retrieve a given **Field** by ID.",
        "operationId": "fetchFieldById",
        "tags": [
          "Fields"
        ],
        "security": [
          {
            "api_key": []
          },
          {
            "oauth2_authorization_code": [
              "platform",
              "fields:read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/FieldId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/FetchFieldByIdOk"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/v4/farmOrganizations/{farmOrganizationType}/{farmOrganizationId}": {
      "get": {
        "summary": "Retrieve a specific farm organization by organization type and ID",
        "description": "Retrieve a given **farm organization** by organization type and ID.",
        "operationId": "fetchFarmOrganizationByTypeAndId",
        "tags": [
          "FarmOrganizations"
        ],
        "security": [
          {
            "api_key": []
          },
          {
            "oauth2_authorization_code": [
              "farmOrganizations:read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/FarmOrganizationType"
          },
          {
            "$ref": "#/components/parameters/FarmOrganizationId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/FetchFarmOrganizationByTypeAndIdOk"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/v4/operations/all": {
      "get": {
        "summary": "Retrieve the operations accessible to a a given user.",
        "description": "Retrieve the **operations** accessible to the authenticated user. Filter the results by resource owner if the `resourceOwnerId` query parameter is specified.",
        "operationId": "fetchOperations",
        "tags": [
          "Operations"
        ],
        "security": [
          {
            "api_key": []
          },
          {
            "oauth2_authorization_code": [
              "operations:read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/OptionalResourceOwnerIdList"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/FetchOperationsOk"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/v4/resourceOwners/{resourceOwnerId}": {
      "get": {
        "operationId": "getResourceOwner",
        "tags": [
          "ResourceOwners"
        ],
        "security": [
          {
            "api_key": []
          },
          {
            "oauth2_authorization_code": [
              "platform",
              "resourceOwners:read"
            ]
          }
        ],
        "summary": "Retrieve a resource owner by ID",
        "description": "Retrieve a resource owner for the given `resourceOwnerId`.",
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceOwnerId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/FetchResourceOwnerOk"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/v4/boundaries/{boundaryId}": {
      "get": {
        "summary": "Retrieve a Boundary by ID",
        "description": "Retrieve a **Boundary** by ID.",
        "operationId": "fetchBoundaryById",
        "tags": [
          "Boundaries"
        ],
        "security": [
          {
            "api_key": []
          },
          {
            "oauth2_authorization_code": [
              "platform",
              "fields:read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/BoundaryId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/FetchBoundaryByIdOk"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/v4/boundaries/query": {
      "post": {
        "summary": "Retrieve Boundaries in batch",
        "description": "Retrieve multiple **Boundaries** (up to 10 per request).",
        "operationId": "fetchBoundaries",
        "tags": [
          "Boundaries"
        ],
        "security": [
          {
            "api_key": []
          },
          {
            "oauth2_authorization_code": [
              "fields:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/FetchBoundariesOk"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BoundariesQuery"
              }
            }
          }
        }
      }
    },
    "/v4/boundaries": {
      "post": {
        "summary": "Upload a boundary",
        "description": "Upload a **Boundary** entry by passing the geometry of the boundary. This will store the boundary but will not create field in Climate FieldView and will not link to an existing field in Climate FieldView.\nThis is restricted to callers with **boundaries:write** scope.\nTo upload a field boundary for field creation in Climate FieldView, please use **POST /v4/uploads**.",
        "operationId": "uploadBoundary",
        "tags": [
          "Boundaries"
        ],
        "security": [
          {
            "api_key": []
          },
          {
            "oauth2_authorization_code": [
              "boundaries:write"
            ]
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/UploadBoundaryOk"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BoundaryUpload"
              }
            }
          }
        }
      }
    },
    "/v4/uploads": {
      "post": {
        "summary": "Initiate a new upload",
        "description": "Step one in uploading a data product. The method will return an **Upload** ID which the caller will use in subsequent `PUT` requests.\nThe following `contentTypes` may be uploaded:\n    <details><summary>__image/vnd.climate.thermal.geotiff__</summary>\n\n    Allows for the upload of a thermal image. The image is a single band geotiff with 64 bit signed floating point values in degrees Celsius. The Coordinate Reference System (CRS) must be UTM with WGS84 datum.\n\n    The following metadata entries are required to be embedded in the geotiff:\n      * acquisitionStartDate - ISO8601 date\n      * acquisitionEndDate - ISO8601 date\n      * isCalibrated - boolean\n\n    The following metadata entries are optional:\n      * sourceId - uuid referencing the asset in the partner's system\n      * fieldId - uuid referencing a field in the Climate system\n      * boundaryId - uuid referencing a boundary in the Climate system\n      * brandId - uuid referencing a partner's branding in the Climate system\n      * name - name of the layer. The maximum number of characters that will be accepted as input is 20.\n\n    Requires either imagery:write or platform scope.\n  </details>\n  <details><summary>__image/vnd.climate.ndvi.geotiff__</summary>\n\n    Allows for the upload of a NDVI image. The image is a single band geotiff with 64 bit signed floating point values in the range of -1 to 1 inclusive. The Coordinate Reference System (CRS) must be UTM with WGS84 datum.\n\n    The following metadata entries are required to be embedded in the geotiff:\n      * acquisitionStartDate - ISO8601 date\n      * acquisitionEndDate - ISO8601 date\n\n    The following metadata entries are optional:\n      * sourceId - uuid referencing the asset in the partner's system\n      * fieldId - uuid referencing a field in the Climate system\n      * boundaryId - uuid referencing a boundary in the Climate system\n      * brandId - uuid referencing a partner's branding in the Climate system\n      * name - name of the layer. The maximum number of characters that will be accepted as input is 20.\n\n    Requires either imagery:write or platform scope.\n  </details>\n  <details><summary> __image/vnd.climate.rgb.geotiff__</summary>\n\n    Allows for the upload of a true color image. The image is a multi band geotiff with 24-bit composite values. Each band is 8 bits with values in the range of 0 to 255. The Coordinate Reference System (CRS) must be UTM with WGS84 datum. The geotiff must contain 3 bands in the order Red, Green, Blue.\n\n    The following metadata entries are required to be embedded in the geotiff:\n      * acquisitionStartDate - ISO8601 date\n      * acquisitionEndDate - ISO8601 date\n      * isCalibrated - boolean\n\n    The following metadata entries are optional:\n      * sourceId - uuid referencing the asset in the partner's system\n      * fieldId - uuid referencing a field in the Climate system\n      * boundaryId - uuid referencing a boundary in the Climate system\n      * brandId - uuid referencing a partner's branding in the Climate system\n      * reflectanceComputeMethod - either TOA or GROUND\n      * name - name of the layer. The maximum number of characters that will be accepted as input is 20.\n\n    Requires either imagery:write or platform scope.\n  </details>\n  <details><summary> __image/vnd.climate.rgb-nir.geotiff__</summary>\n\n    Allows for the upload of a Near Infrared (NIR) image. The Coordinate Reference System (CRS) must be UTM with WGS84 datum.\n\n    The following metadata entries are required to be embedded in the geotiff:\n      * acquisitionStartDate - ISO8601 date\n      * acquisitionEndDate - ISO8601 date\n      * isCalibrated - boolean\n\n    The following metadata entries are optional:\n      * sourceId - uuid referencing the asset in the partner's system\n      * fieldId - uuid referencing a field in the Climate system\n      * boundaryId - uuid referencing a boundary in the Climate system\n      * brandId - uuid referencing a partner's branding in the Climate system\n      * reflectanceComputeMethod - either TOA or GROUND\n      * name - name of the layer. The maximum number of characters that will be accepted as input is 20.\n\n    Requires either imagery:write or platform scope.\n  </details>\n  <details><summary>__image/vnd.climate.rgb-cir.geotiff__</summary>\n\n    Allows for the upload of a Color Infrared (CIR) image. The Coordinate Reference System (CRS) must be UTM with WGS84 datum.\n\n    The following metadata entries are required to be embedded in the geotiff:\n      * acquisitionStartDate - ISO8601 date\n      * acquisitionEndDate - ISO8601 date\n      * isCalibrated - boolean\n\n    The following metadata entries are optional:\n      * sourceId - uuid referencing the asset in the partner's system\n      * fieldId - uuid referencing a field in the Climate system\n      * boundaryId - uuid referencing a boundary in the Climate system\n      * brandId - uuid referencing a partner's branding in the Climate system\n      * reflectanceComputeMethod - either TOA or GROUND\n      * name - name of the layer. The maximum number of characters that will be accepted as input is 20.\n\n    Requires either imagery:write or platform scope.\n  </details>\n  <details><summary> __application/vnd.climate.rx.planting.shp__</summary>\n\n    Allows for the upload of a planting prescription in shapefile format.  The upload must be an archive in the zip format.  It should contain one and only one of each of the following file types:\n      * .shp\n      * .shx\n      * .dbf\n\n    All files with the above suffixes must have the same prefix, ie Back40.shp, Back40.shx and Back40.dbf.\n\n    Requires either rx:write or platform scope.\n  </details>\n  <details><summary> __application/vnd.climate.prescription.zones.shp__</summary>\n\n    Allows for the upload of a zones prescription in shapefile format.  The upload must be an archive in the zip format.  It should contain one and only one of each of the following file types:\n      * .shp\n      * .shx\n      * .dbf\n\n    All files with the above suffixes must have the same prefix, ie Back40.shp, Back40.shx and Back40.dbf.\n\n    The following metadata entries are required:\n      * fieldId - field identifier for prescription zones.\n    \n    Requires either rxZones:write or platform scope.\n  </details>\n  <details><summary> __application/vnd.climate.modus.xml__</summary>\n\n    Allows for the upload of a soil sampling file in the modus 1.0 format with some restrictions.  The upload must be a single xml file.\n\n    The following elements are required to be present in the modus file.\n      * EventCode - Max length of 64 bytes\n      * EventDate - Must be in ISO8601\n      * SoilSample - Has a maxOccurs of 20k\n      * Depth - Has a maxOccurs of 50\n      * LabName - Must be non-empty.\n      * StartingDepth - 0 to 36 inclusive, default 0\n      * EndingDepth - 1 - 36 inclusive, default 1\n      * ColumnDepth\n      * DepthUnit - must be inches\n      * Geometry - point in wgs84\n    \n    Requires the soil:write scope.\n   </details>\n   <details><summary> __application/vnd.climate.stand-count.geojson__</summary>\n\n    Allows for the upload of a valid [geojson feature collection](https://tools.ietf.org/html/rfc7946#section-3.3).\n\n    Each feature in the collection must contain the following entry in its properties section:\n      * StandPPA - A count of the number of plants per acre:\n\n    Additionally, the type field of each feature's geometry field must be:\n      * Point\n\n    Requires `imagery:write` scope.\n   </details>\n   <details><summary> __application/vnd.climate.weed-count.geojson__</summary>\n\n    Allows for the upload of a valid [geojson feature collection](https://tools.ietf.org/html/rfc7946#section-3.3).\n\n    Each feature in the collection must contain the following entry in its properties section:\n      * StandPPA - A count of the number of plants per acre:\n\n    Additionally, the type field of each feature's geometry field must be:\n      * Point\n\n    Requires `imagery:write` scope.\n   </details>\n   <details><summary> __application/vnd.climate.as-applied.zip__</summary>\n\n    Allows for the upload of a valid application data [supported formats](https://support.climate.com/kt#/kA02A000000DjvOSAS/en_US).\n\n    The following metadata entries are required:\n      * fileName - name of the file being uploaded.\n\n    The following metadata entries are optional:\n      * resourceOwner - the grower's account email, where dealer/partner wants to upload data. As a prerequisite the grower must share their operation with the dealer/partner.\n\n    Requires `asApplied:write` scope.\n   </details>\n   <details><summary> __application/vnd.climate.as-planted.zip__</summary>\n\n    Allows for the upload of a valid planting data [supported formats](https://support.climate.com/kt#/kA02A000000DjvOSAS/en_US).\n\n    The following metadata entries are required:\n      * fileName - name of the file being uploaded.\n\n    The following metadata entries are optional:\n      * resourceOwner - the grower's account email, where dealer/partner wants to upload data. As a prerequisite the grower must share their operation with the dealer/partner.\n\n    Requires `asPlanted:write` scope.\n   </details>\n   <details><summary> __application/vnd.climate.as-harvested.zip__</summary>\n\n    Allows for the upload of a valid harvest data [supported formats](https://support.climate.com/kt#/kA02A000000DjvOSAS/en_US).\n\n    The following metadata entries are required:\n      * fileName - name of the file being uploaded.\n\n    The following metadata entries are optional:\n      * resourceOwner - the grower's account email, where dealer/partner wants to upload data. As a prerequisite the grower must share their operation with the dealer/partner.\n\n    Requires `asHarvested:write` scope.\n   </details>",
        "operationId": "postUpload",
        "tags": [
          "Uploads"
        ],
        "security": [
          {
            "api_key": []
          },
          {
            "oauth2_authorization_code": [
              "platform",
              "fields:write",
              "imagery:write",
              "rx:write",
              "standCount:write",
              "weedCount:write",
              "asApplied:write",
              "asPlanted:write",
              "asHarvested:write"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/X-Recipient-Email"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/PostUploadOk"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Upload"
              }
            }
          }
        }
      }
    },
    "/v4/uploads/{uploadId}": {
      "put": {
        "summary": "Chunked upload of data",
        "description": "Send chunked data for an **Upload**.",
        "operationId": "chunkedUpload",
        "tags": [
          "Uploads"
        ],
        "security": [
          {
            "api_key": []
          },
          {
            "oauth2_authorization_code": [
              "platform",
              "fields:write",
              "imagery:write",
              "rx:write",
              "soil:write",
              "asApplied:write",
              "asPlanted:write",
              "asHarvested:write"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ContentRange"
          },
          {
            "$ref": "#/components/parameters/UploadId"
          },
          {
            "$ref": "#/components/parameters/BinaryContentType"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/v4/uploads/{uploadId}/status": {
      "get": {
        "summary": "Retrieve Upload status",
        "description": "Check the status of an **Upload** by ID.",
        "operationId": "fetchUploadStatusById",
        "tags": [
          "Uploads"
        ],
        "security": [
          {
            "api_key": []
          },
          {
            "oauth2_authorization_code": [
              "platform",
              "fields:write",
              "imagery:write",
              "rx:write",
              "asApplied:write",
              "asPlanted:write",
              "asHarvested:write"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UploadId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/FetchUploadStatusByIdOk"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/v4/uploads/status/query": {
      "post": {
        "summary": "Retrieve Upload statuses in batch",
        "description": "Check the status of multiple **Uploads** (up to 100 per request).",
        "operationId": "fetchUploadStatuses",
        "tags": [
          "Uploads"
        ],
        "security": [
          {
            "api_key": []
          },
          {
            "oauth2_authorization_code": [
              "platform",
              "fields:write",
              "imagery:write",
              "rx:write",
              "asApplied:write",
              "asPlanted:write",
              "asHarvested:write"
            ]
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/FetchUploadStatusesOk"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadStatusQuery"
              }
            }
          }
        }
      }
    },
    "/v4/exports": {
      "post": {
        "summary": "Initiate a new export request.",
        "description": "Step one in requesting a data product. The method will return an **Export** ID which the caller will use in subsequent `GET` requests.\nThe following `contentTypes` may be requested:\n  * __application/vnd.climate.acrsi.geojson__ (Beta)\n     Exports the planting activities accessible by the authenticated user and optionally filtered by resource owner\n     as a [GeoJSON Feature Collection](https://tools.ietf.org/html/rfc7946#page-12).\n\n     The export request definition must contain the following properties:\n       * plantingStartDate\n       * plantingEndDate\n       * resourceOwnerId\n\n     Requires `exports:read` and `plantingActivitySummary:read` scope.\n  \n  * __application/vnd.climate.harvest.geojson__\n     Exports the harvesting activities accessible by the authenticated user and optionally filtered by resource owner\n     as a [GeoJSON Feature Collection](https://tools.ietf.org/html/rfc7946#page-12).\n\n     The export request definition must contain the following properties:\n       * harvestStartDate\n       * harvestEndDate\n       * resourceOwnerId\n\n     Requires `exports:read` and `plantingActivitySummary:read` scope.\n  \n  * __application/vnd.climate.yield-analysis.pdf__\n     Exports a PDF Yield Analysis Report (also called Harvest Summary Report) for all the fields in all the harvest seasons of the given year. If no year definition is provided then the current year is used.\n\n     The export request definition can contain the following properties:\n       * year\n\n     Requires `exports:read` and `reports:read` scope.\n\n  * __application/vnd.climate.yield-analysis.json__\n     Exports a JSON Yield Analysis Report (also called Harvest Summary Report) for all the fields in all the harvest seasons of the given year. If no year definition is provided then the current year is used.\n\n     The export request definition can contain the following properties:\n       * year\n\n     Requires `exports:read` and `reports:read` scope.",
        "operationId": "postExport",
        "tags": [
          "Exports"
        ],
        "security": [
          {
            "api_key": []
          },
          {
            "oauth2_authorization_code": [
              "exports:read"
            ]
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/PostExportOk"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Export"
              }
            }
          }
        }
      }
    },
    "/v4/exports/{exportId}/status": {
      "get": {
        "summary": "Retrieve the status of an Export.",
        "description": "Check the status of an **Export** by ID.",
        "operationId": "fetchExportStatusById",
        "tags": [
          "Exports"
        ],
        "security": [
          {
            "api_key": []
          },
          {
            "oauth2_authorization_code": [
              "exports:read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ExportId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/FetchExportStatusByIdOk"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/v4/exports/{exportId}/contents": {
      "get": {
        "summary": "Retrieve the binary contents of a processed export request.",
        "description": "Downloads larger than `5MiB` (`5242880 bytes`) in size must be downloaded in chunks no larger than `5MiB` (`5242880 bytes`) and no smaller than `1MiB` (`1048576 bytes`). The last chunk could be less than `1MiB` (`1048576 bytes`).",
        "operationId": "fetchExportContentsById",
        "tags": [
          "Exports"
        ],
        "security": [
          {
            "api_key": []
          },
          {
            "oauth2_authorization_code": [
              "exports:read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/ExportId"
          },
          {
            "$ref": "#/components/parameters/Range"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "206": {
            "$ref": "#/components/responses/FetchExportContentsByIdPartial"
          },
          "304": {
            "$ref": "#/components/responses/304"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/ReportConflict"
          },
          "410": {
            "$ref": "#/components/responses/ReportGone"
          },
          "416": {
            "$ref": "#/components/responses/416"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/v4/layers/scoutingObservations": {
      "get": {
        "summary": "Retrieve a list of scouting observations",
        "description": "Retrieve a list of scouting observations created or updated by the user identified by the Authorization header.",
        "tags": [
          "Layers"
        ],
        "security": [
          {
            "api_key": []
          },
          {
            "oauth2_authorization_code": [
              "platform",
              "scouting:read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/X-Next-Token"
          },
          {
            "$ref": "#/components/parameters/X-Limit"
          },
          {
            "$ref": "#/components/parameters/OccurredAfter"
          },
          {
            "$ref": "#/components/parameters/OccurredBefore"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/FetchScoutingObservationsOk"
          },
          "206": {
            "$ref": "#/components/responses/FetchScoutingObservationsPartial"
          },
          "304": {
            "$ref": "#/components/responses/304"
          },
          "400": {
            "$ref": "#/components/responses/400"
          }
        }
      }
    },
    "/v4/layers/scoutingObservations/{scoutingObservationId}": {
      "get": {
        "summary": "Retrieve individual scouting observation",
        "description": "Retrieve an individual scouting observation by id.  Ids are retrieved via the /layers/scoutingObservations route.",
        "tags": [
          "Layers"
        ],
        "security": [
          {
            "api_key": []
          },
          {
            "oauth2_authorization_code": [
              "platform",
              "scouting:read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ScoutingObservationId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/FetchScoutingObservationByIdOk"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/v4/layers/scoutingObservations/{scoutingObservationId}/attachments": {
      "get": {
        "summary": "Retrieve attachments associated with a given scouting observation.",
        "description": "Retrieve attachments associated with a given scouting observation. Photos added to scouting notes in the FieldView app are capped to 20MB, and we won\u2019t store photos larger than that in a scouting note.",
        "tags": [
          "Layers"
        ],
        "security": [
          {
            "api_key": []
          },
          {
            "oauth2_authorization_code": [
              "platform",
              "scouting:read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ScoutingObservationId"
          },
          {
            "$ref": "#/components/parameters/X-Next-Token"
          },
          {
            "$ref": "#/components/parameters/X-Limit"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/FetchScoutingObservationAttachmentsOk"
          },
          "206": {
            "$ref": "#/components/responses/FetchScoutingObservationAttachmentsPartial"
          },
          "304": {
            "$ref": "#/components/responses/304"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/v4/layers/scoutingObservations/{scoutingObservationId}/attachments/{attachmentId}/contents": {
      "get": {
        "summary": "Retrieve the binary contents of a scouting observation\u2019s attachment.",
        "description": "Photos added to scouting notes in the FieldView app are capped to `20MiB` (`20971520 bytes`), and we won\u2019t store photos larger than that in a scouting note. Downloads larger than `5MiB` (`5242880 bytes`) in size, must be downloaded in chunks no larger than `5MiB` (`5242880 bytes`) and no smaller than `1MiB` (`1048576 bytes`). The last chunk could be less than `1MiB` (`1048576 bytes`).",
        "tags": [
          "Layers"
        ],
        "security": [
          {
            "api_key": []
          },
          {
            "oauth2_authorization_code": [
              "platform",
              "scouting:read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/ScoutingObservationId"
          },
          {
            "$ref": "#/components/parameters/ScoutingObservationAttachmentId"
          },
          {
            "$ref": "#/components/parameters/Range"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/FetchScoutingObservationAttachmentContentsOk"
          },
          "206": {
            "$ref": "#/components/responses/FetchScoutingObservationAttachmentContentsPartial"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "416": {
            "$ref": "#/components/responses/416"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/v4/layers/asPlanted": {
      "get": {
        "summary": "Retrieve a list of planting activities",
        "description": "Retrieve a list of planting activities. The id in the response is used for  GET /v4/layers/asPlanted/{activityId}/contents.",
        "tags": [
          "Layers"
        ],
        "security": [
          {
            "api_key": []
          },
          {
            "oauth2_authorization_code": [
              "platform",
              "asPlanted:read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/X-Next-Token"
          },
          {
            "$ref": "#/components/parameters/X-Limit"
          },
          {
            "$ref": "#/components/parameters/OptionalResourceOwnerId"
          },
          {
            "$ref": "#/components/parameters/OccurredAfter"
          },
          {
            "$ref": "#/components/parameters/OccurredBefore"
          },
          {
            "$ref": "#/components/parameters/UpdatedAfter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/FetchPlantingActivitiesOk"
          },
          "206": {
            "$ref": "#/components/responses/FetchPlantingActivitiesPartial"
          },
          "304": {
            "$ref": "#/components/responses/304"
          },
          "400": {
            "$ref": "#/components/responses/400"
          }
        }
      }
    },
    "/v4/layers/asPlanted/{activityId}/contents": {
      "get": {
        "summary": "Retrieve the raw planting activity",
        "description": "Retrieve an individual planting activity by id.  Ids are retrieved via the  /layers/asPlanted route. Downloads larger than `5MiB` (`5242880 bytes`) in size, must be downloaded in chunks no larger than `5MiB` (`5242880 bytes`) and no smaller than `1MiB`  (`1048576 bytes`). The last chunk could be less than `1MiB` (`1048576 bytes`).  The data is compressed using .zip format.",
        "tags": [
          "Layers"
        ],
        "security": [
          {
            "api_key": []
          },
          {
            "oauth2_authorization_code": [
              "asPlanted:read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/PlantingActivityId"
          },
          {
            "$ref": "#/components/parameters/Range"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/FetchPlantingActivityOk"
          },
          "206": {
            "$ref": "#/components/responses/FetchPlantingActivityPartial"
          },
          "304": {
            "$ref": "#/components/responses/304"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "416": {
            "$ref": "#/components/responses/416"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/v4/layers/asPlanted/{activityId}": {
      "get": {
        "summary": "Retrieve the summary of an activity as planted agronomic data",
        "description": "Retrieve an individual planting activity summary by id. Ids are retrieved via the /layers/asPlanted route.",
        "tags": [
          "Layers"
        ],
        "security": [
          {
            "api_key": []
          },
          {
            "oauth2_authorization_code": [
              "asPlanted:read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/PlantingActivityId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/FetchPlantingActivitySummaryOk"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/v4/layers/asApplied": {
      "get": {
        "summary": "Retrieve a list of application activities",
        "description": "Retrieve a list of application activities. The id in the response is used for  GET /v4/layers/asApplied/{activityId}/contents.",
        "tags": [
          "Layers"
        ],
        "security": [
          {
            "api_key": []
          },
          {
            "oauth2_authorization_code": [
              "platform",
              "asApplied:read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/X-Next-Token"
          },
          {
            "$ref": "#/components/parameters/X-Limit"
          },
          {
            "$ref": "#/components/parameters/OptionalResourceOwnerId"
          },
          {
            "$ref": "#/components/parameters/OccurredAfter"
          },
          {
            "$ref": "#/components/parameters/OccurredBefore"
          },
          {
            "$ref": "#/components/parameters/UpdatedAfter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/FetchApplicationActivitiesOk"
          },
          "206": {
            "$ref": "#/components/responses/FetchApplicationActivitiesPartial"
          },
          "304": {
            "$ref": "#/components/responses/304"
          },
          "400": {
            "$ref": "#/components/responses/400"
          }
        }
      }
    },
    "/v4/layers/asApplied/{activityId}/contents": {
      "get": {
        "summary": "Retrieve the raw application activity",
        "description": "Retrieve an individual application activity by id.  Ids are retrieved via the  /layers/asApplied route. Downloads larger than `5MiB` (`5242880 bytes`) in size, must be downloaded in chunks no larger than `5MiB` (`5242880 bytes`) and no smaller than `1MiB`  (`1048576 bytes`). The last chunk could be less than `1MiB` (`1048576 bytes`). The data is compressed using .zip format.",
        "tags": [
          "Layers"
        ],
        "security": [
          {
            "api_key": []
          },
          {
            "oauth2_authorization_code": [
              "asApplied:read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/ApplicationActivityId"
          },
          {
            "$ref": "#/components/parameters/Range"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/FetchApplicationActivityOk"
          },
          "206": {
            "$ref": "#/components/responses/FetchApplicationActivityPartial"
          },
          "304": {
            "$ref": "#/components/responses/304"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "416": {
            "$ref": "#/components/responses/416"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/v4/layers/asApplied/{activityId}": {
      "get": {
        "summary": "Retrieve the summary of an activity as applied agronomic data",
        "description": "Retrieve an individual application activity summary by id. Ids are retrieved via the /layers/asApplied route.",
        "tags": [
          "Layers"
        ],
        "security": [
          {
            "api_key": []
          },
          {
            "oauth2_authorization_code": [
              "asApplied:read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/ApplicationActivityId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/FetchApplicationActivitySummaryOk"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/v4/layers/asHarvested": {
      "get": {
        "summary": "Retrieve a list of harvest activities",
        "description": "Retrieve a list of harvest activities. The id in the response is used for  GET /v4/layers/asHarvested/{activityId}/contents.",
        "tags": [
          "Layers"
        ],
        "security": [
          {
            "api_key": []
          },
          {
            "oauth2_authorization_code": [
              "platform",
              "asHarvested:read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/X-Next-Token"
          },
          {
            "$ref": "#/components/parameters/X-Limit"
          },
          {
            "$ref": "#/components/parameters/OptionalResourceOwnerId"
          },
          {
            "$ref": "#/components/parameters/OccurredAfter"
          },
          {
            "$ref": "#/components/parameters/OccurredBefore"
          },
          {
            "$ref": "#/components/parameters/UpdatedAfter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/FetchHarvestActivitiesOk"
          },
          "206": {
            "$ref": "#/components/responses/FetchHarvestActivitiesPartial"
          },
          "304": {
            "$ref": "#/components/responses/304"
          },
          "400": {
            "$ref": "#/components/responses/400"
          }
        }
      }
    },
    "/v4/layers/asHarvested/{activityId}/contents": {
      "get": {
        "summary": "Retrieve the raw harvest activity",
        "description": "Retrieve an individual harvest activity by id.  Ids are retrieved via the  /layers/asHarvested route. Downloads larger than `5MiB` (`5242880 bytes`) in size, must be downloaded in chunks no larger than `5MiB` (`5242880 bytes`) and no smaller than `1MiB`  (`1048576 bytes`). The last chunk could be less than `1MiB` (`1048576 bytes`). The data is compressed using .zip format.",
        "tags": [
          "Layers"
        ],
        "security": [
          {
            "api_key": []
          },
          {
            "oauth2_authorization_code": [
              "asHarvested:read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/HarvestActivityId"
          },
          {
            "$ref": "#/components/parameters/Range"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/FetchHarvestActivityOk"
          },
          "206": {
            "$ref": "#/components/responses/FetchHarvestActivityPartial"
          },
          "304": {
            "$ref": "#/components/responses/304"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "416": {
            "$ref": "#/components/responses/416"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/v4/layers/asHarvested/{activityId}": {
      "get": {
        "summary": "Retrieve the summary of an activity as harvested agronomic data",
        "description": "Retrieve an individual harvest activity summary by id. Ids are retrieved via the /layers/asHarvested route.",
        "tags": [
          "Layers"
        ],
        "security": [
          {
            "api_key": []
          },
          {
            "oauth2_authorization_code": [
              "asHarvested:read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/HarvestActivityId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/FetchHarvestActivitySummaryOk"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "https://platform.climate.com/"
    }
  ],
  "components": {
    "parameters": {
      "BoundaryId": {
        "in": "path",
        "description": "Unique identifier of the Boundary",
        "name": "boundaryId",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "FieldId": {
        "in": "path",
        "description": "Unique identifier of the Field.",
        "name": "fieldId",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "OptionalFieldNamePrefix": {
        "in": "query",
        "description": "Optional prefix filter for field name. Must be at least 3 characters.",
        "name": "fieldName",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "FarmOrganizationType": {
        "in": "path",
        "description": "Type of the farm organization.",
        "name": "farmOrganizationType",
        "required": true,
        "schema": {
          "type": "string",
          "enum": [
            "farm"
          ]
        }
      },
      "FarmOrganizationId": {
        "in": "path",
        "description": "Unique identifier of the farm organization.",
        "name": "farmOrganizationId",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "ResourceOwnerId": {
        "in": "path",
        "description": "Unique identifier of the resource owner.",
        "name": "resourceOwnerId",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "OptionalResourceOwnerId": {
        "in": "query",
        "description": "Optional unique identifier of the resource owner.  If resourceOwnerId is not specified, it defaults to the x-authenticated-user-uuid.",
        "name": "resourceOwnerId",
        "required": false,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "OptionalResourceOwnerIdList": {
        "in": "query",
        "description": "Optional comma-separated list of resource owner unique identifiers by which to filter results.",
        "name": "resourceOwnerId",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "UploadId": {
        "in": "path",
        "description": "Unique identifier of an Upload.",
        "name": "uploadId",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "ExportId": {
        "in": "path",
        "description": "Unique identifier of an Export.",
        "name": "exportId",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "ScoutingObservationId": {
        "in": "path",
        "description": "Unique identifier of the Scouting Observation.",
        "name": "scoutingObservationId",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "ScoutingObservationAttachmentId": {
        "in": "path",
        "description": "Unique identifier of the attachment.",
        "name": "attachmentId",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "PlantingActivityId": {
        "in": "path",
        "description": "Unique identifier of the Planting Activity.",
        "name": "activityId",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "ApplicationActivityId": {
        "in": "path",
        "description": "Unique identifier of the Application Activity.",
        "name": "activityId",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "HarvestActivityId": {
        "in": "path",
        "description": "Unique identifier of the Harvest Activity.",
        "name": "activityId",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "OccurredAfter": {
        "in": "query",
        "description": "Optional start time by which to filter layer results. Time must be in ISO 8601 format with time zone, e.g. 2016-05-13T00:00:00Z (https://tools.ietf.org/html/rfc3339). Layers with an end time at or after (inclusive) the specified time will match this filter. If both occurredAfter and occurredBefore are populated, occurredAfter must be <= occurredBefore.",
        "name": "occurredAfter",
        "required": false,
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      },
      "OccurredBefore": {
        "in": "query",
        "description": "Optional end time by which to filter layer results. Time must be in ISO 8601 format with time zone, e.g. 2016-05-13T00:00:00Z (https://tools.ietf.org/html/rfc3339). Layers with a start time at or before (inclusive) the specified time. If both occurredAfter and occurredBefore are populated, occurredAfter must be <= occurredBefore.",
        "name": "occurredBefore",
        "required": false,
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      },
      "UpdatedAfter": {
        "in": "query",
        "description": "Optional updated time by which to filter layer results. Time must be in ISO 8601 format with time zone, e.g. 2016-05-13T00:00:00Z (https://tools.ietf.org/html/rfc3339). Layers with a modification time at or after (inclusive) the specified time.",
        "name": "updatedAfter",
        "required": false,
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      },
      "Accept": {
        "in": "header",
        "name": "Accept",
        "required": true,
        "description": "Must be either \\*/* or application/octet-stream,application/json",
        "schema": {
          "type": "string"
        }
      },
      "X-Limit": {
        "in": "header",
        "name": "X-Limit",
        "description": "Max number of results to return per batch.  Must be between 1 and 100 inclusive.  Defaults to 100.",
        "required": false,
        "schema": {
          "type": "integer",
          "format": "int32",
          "minimum": 1,
          "maximum": 100
        }
      },
      "X-Next-Token": {
        "name": "X-Next-Token",
        "in": "header",
        "description": "Opaque string which allows for fetching the next batch of results.  Can be used to poll for changes.",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "ContentRange": {
        "in": "header",
        "name": "Content-Range",
        "description": "Byte range `bytes start-end/total` (https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.16). e.g. bytes 0-5242880/10242880. Downloads larger than 5MiB (5242880 bytes) in size must be downloaded in chunks no larger than 5MiB (5242880 bytes) and no smaller than 1MiB (1048576 bytes). The last chunk could be less than 1MiB (1048576 bytes).",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "Range": {
        "in": "header",
        "name": "Range",
        "description": "Byte range `bytes=start-end` (https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.1). e.g. bytes=0-1048576. Currently only single range value is supported. Both start and end need to be specified, end value should be greater than start and end - start should not be greater than 5MiB.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "X-Recipient-Email": {
        "in": "header",
        "name": "X-Recipient-Email",
        "description": "Email address associated with a Climate account, used when to sending to another user.",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "BinaryContentType": {
        "in": "header",
        "name": "Content-Type",
        "description": "Must be `application/octet-stream`",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    },
    "responses": {
      "200": {
        "description": "OK",
        "headers": {
          "X-Http-Request-Id": {
            "description": "Unique identifier assigned to the request.",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "204": {
        "description": "No Content",
        "headers": {
          "X-Http-Request-Id": {
            "description": "Unique identifier assigned to the request.",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "304": {
        "description": "Not Modified",
        "headers": {
          "X-Http-Request-Id": {
            "description": "Unique identifier assigned to the request.",
            "schema": {
              "type": "string"
            }
          },
          "X-Next-Token": {
            "description": "A token which may be used to poll for updates.",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Empty"
            }
          }
        }
      },
      "400": {
        "description": "Bad Input",
        "headers": {
          "X-Http-Request-Id": {
            "description": "Unique identifier assigned to the request.",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized",
        "headers": {
          "X-Http-Request-Id": {
            "description": "Unique identifier assigned to the request.",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "403": {
        "description": "Forbidden",
        "headers": {
          "X-Http-Request-Id": {
            "description": "Unique identifier assigned to the request.",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "404": {
        "description": "Not Found",
        "headers": {
          "X-Http-Request-Id": {
            "description": "Unique identifier assigned to the request.",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "409": {
        "description": "Conflict",
        "headers": {
          "X-Http-Request-Id": {
            "description": "Unique identifier assigned to the request.",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "410": {
        "description": "Gone",
        "headers": {
          "X-Http-Request-Id": {
            "description": "Unique identifier assigned to the request.",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "416": {
        "description": "Range Not Satisfiable",
        "headers": {
          "X-Http-Request-Id": {
            "description": "Unique identifier assigned to the request.",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "429": {
        "description": "Too Many Requests",
        "headers": {
          "X-Http-Request-Id": {
            "description": "Unique identifier assigned to the request.",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "500": {
        "description": "Internal Server Error",
        "headers": {
          "X-Http-Request-Id": {
            "description": "Unique identifier assigned to the request.",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "503": {
        "description": "Server Busy",
        "headers": {
          "X-Http-Request-Id": {
            "description": "Unique identifier assigned to the request.",
            "schema": {
              "type": "string"
            }
          },
          "Retry-After": {
            "description": "Number of seconds to wait before retrying the request.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "ReportConflict": {
        "description": "Conflict (Report generation is still in progress)",
        "headers": {
          "X-Http-Request-Id": {
            "description": "Unique identifier assigned to the request.",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "ReportGone": {
        "description": "Gone (Report is expired)",
        "headers": {
          "X-Http-Request-Id": {
            "description": "Unique identifier assigned to the request.",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "HealthzOk": {
        "description": "200 response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Empty"
            }
          }
        }
      },
      "FetchResourceOwnerOk": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ResourceOwner"
            }
          }
        }
      },
      "FetchFieldsOk": {
        "description": "OK",
        "headers": {
          "X-Http-Request-Id": {
            "description": "Unique identifier assigned to the request.",
            "schema": {
              "type": "string"
            }
          },
          "X-Next-Token": {
            "description": "Token used to poll for updates.",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Fields"
            }
          }
        }
      },
      "FetchFieldsPartial": {
        "description": "Partial Result",
        "headers": {
          "X-Http-Request-Id": {
            "description": "Unique identifier assigned to the request.",
            "schema": {
              "type": "string"
            }
          },
          "X-Next-Token": {
            "description": "Token used to fetch next batch of results.",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Fields"
            }
          }
        }
      },
      "FetchFieldByIdOk": {
        "description": "Returns the requested Field.",
        "headers": {
          "X-Http-Request-Id": {
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Field"
            }
          }
        }
      },
      "FetchFarmOrganizationByTypeAndIdOk": {
        "description": "Returns the requested farm organization.",
        "headers": {
          "X-Http-Request-Id": {
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FarmOrganization"
            }
          }
        }
      },
      "FetchOperationsOk": {
        "description": "Returns the requested operations.",
        "headers": {
          "X-Http-Request-Id": {
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Operations"
            }
          }
        }
      },
      "FetchBoundaryByIdOk": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Boundary"
            }
          }
        }
      },
      "FetchBoundariesOk": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Boundaries"
            }
          }
        }
      },
      "UploadBoundaryOk": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UploadedBoundaryId"
            }
          }
        }
      },
      "PostUploadOk": {
        "description": "Returns a new upload with ID used to PUT file contents.",
        "headers": {
          "X-Http-Request-Id": {
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreatedUpload"
            }
          }
        }
      },
      "FetchUploadStatusByIdOk": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UploadStatus"
            }
          }
        }
      },
      "FetchUploadStatusesOk": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UploadStatuses"
            }
          }
        }
      },
      "PostExportOk": {
        "description": "OK",
        "headers": {
          "X-Http-Request-Id": {
            "description": "Unique identifier assigned to the request.",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreatedExport"
            }
          }
        }
      },
      "FetchExportStatusByIdOk": {
        "description": "OK",
        "headers": {
          "X-Http-Request-Id": {
            "description": "Unique identifier assigned to the request.",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ExportStatus"
            }
          }
        }
      },
      "FetchExportContentsByIdPartial": {
        "description": "Partial Result",
        "headers": {
          "X-Http-Request-Id": {
            "description": "Unique identifier assigned to the request.",
            "schema": {
              "type": "string"
            }
          },
          "Content-Range": {
            "description": "Byte range `bytes start-end/total` (https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.16). e.g. bytes 0-5242879/10242880. Downloads larger than 5MiB (5242880 bytes) in size must be downloaded in chunks no larger than 5MiB (5242880 bytes) and no smaller than 1MiB (1048576 bytes). The last chunk could be less than 1MiB (1048576 bytes).",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/octet-stream": {
            "schema": {
              "$ref": "#/components/schemas/ExportContents"
            }
          }
        }
      },
      "FetchScoutingObservationsOk": {
        "description": "OK",
        "headers": {
          "X-Http-Request-Id": {
            "description": "Unique identifier assigned to the request.",
            "schema": {
              "type": "string"
            }
          },
          "X-Next-Token": {
            "description": "Token used to poll for updates.",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ScoutingObservations"
            }
          }
        }
      },
      "FetchScoutingObservationsPartial": {
        "description": "Partial Result",
        "headers": {
          "X-Http-Request-Id": {
            "description": "Unique identifier assigned to the request.",
            "schema": {
              "type": "string"
            }
          },
          "X-Next-Token": {
            "description": "Token used to fetch next batch of results.",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ScoutingObservations"
            }
          }
        }
      },
      "FetchScoutingObservationByIdOk": {
        "description": "Returns the requested scouting observation.",
        "headers": {
          "X-Http-Request-Id": {
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ScoutingObservation"
            }
          }
        }
      },
      "FetchScoutingObservationAttachmentsOk": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ScoutingObservationAttachments"
            }
          }
        }
      },
      "FetchScoutingObservationAttachmentsPartial": {
        "description": "Partial Result",
        "headers": {
          "X-Http-Request-Id": {
            "description": "Unique identifier assigned to the request.",
            "schema": {
              "type": "string"
            }
          },
          "X-Next-Token": {
            "description": "Token used to fetch next batch of results.",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ScoutingObservationAttachments"
            }
          }
        }
      },
      "FetchScoutingObservationAttachmentContentsOk": {
        "description": "OK",
        "headers": {
          "X-Http-Request-Id": {
            "description": "Unique identifier assigned to the request",
            "schema": {
              "type": "string"
            }
          },
          "Content-Range": {
            "description": "Byte range `bytes start-end/total` (https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.16). e.g. bytes 0-5242880/10242880. Downloads larger than 5MiB (5242880 bytes) in size must be downloaded in chunks no larger than 5MiB (5242880 bytes) and no smaller than 1MiB (1048576 bytes). The last chunk could be less than 1MiB (1048576 bytes).",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "image/jpeg": {
            "schema": {
              "$ref": "#/components/schemas/ScoutingObservationAttachmentContents"
            }
          },
          "image/png": {
            "schema": {
              "$ref": "#/components/schemas/ScoutingObservationAttachmentContents"
            }
          }
        }
      },
      "FetchScoutingObservationAttachmentContentsPartial": {
        "description": "Partial Result",
        "headers": {
          "X-Http-Request-Id": {
            "description": "Unique identifier assigned to the request.",
            "schema": {
              "type": "string"
            }
          },
          "Content-Range": {
            "description": "Byte range `bytes start-end/total` (https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.16). e.g. bytes 0-5242880/10242880. Downloads larger than 5MiB (5242880 bytes) in size must be downloaded in chunks no larger than 5MiB (5242880 bytes) and no smaller than 1MiB (1048576 bytes). The last chunk could be less than 1MiB (1048576 bytes).",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "image/jpeg": {
            "schema": {
              "$ref": "#/components/schemas/ScoutingObservationAttachmentContents"
            }
          }
        }
      },
      "FetchPlantingActivitiesOk": {
        "description": "OK",
        "headers": {
          "X-Http-Request-Id": {
            "description": "Unique identifier assigned to the request.",
            "schema": {
              "type": "string"
            }
          },
          "X-Next-Token": {
            "description": "Token used to poll for updates.",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PlantingActivities"
            }
          }
        }
      },
      "FetchPlantingActivitiesPartial": {
        "description": "Partial Result",
        "headers": {
          "X-Http-Request-Id": {
            "description": "Unique identifier assigned to the request.",
            "schema": {
              "type": "string"
            }
          },
          "X-Next-Token": {
            "description": "Token used to fetch next batch of results.",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PlantingActivities"
            }
          }
        }
      },
      "FetchPlantingActivityOk": {
        "description": "OK",
        "headers": {
          "X-Http-Request-Id": {
            "description": "Unique identifier assigned to the request",
            "schema": {
              "type": "string"
            }
          },
          "Content-Range": {
            "description": "Byte range `bytes start-end/total` (https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.16). e.g. bytes 0-5242880/10242880. Downloads larger than 5MiB (5242880 bytes) in size must be downloaded in chunks no larger than 5MiB (5242880 bytes) and no smaller than 1MiB (1048576 bytes). The last chunk could be less than 1MiB (1048576 bytes).",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/octet-stream": {
            "schema": {
              "$ref": "#/components/schemas/PlantingActivityContents"
            }
          }
        }
      },
      "FetchPlantingActivityPartial": {
        "description": "Partial Result",
        "headers": {
          "X-Http-Request-Id": {
            "description": "Unique identifier assigned to the request.",
            "schema": {
              "type": "string"
            }
          },
          "Content-Range": {
            "description": "Byte range `bytes start-end/total` (https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.16). e.g. bytes 0-5242880/10242880. Downloads larger than 5MiB (5242880 bytes) in size must be downloaded in chunks no larger than 5MiB (5242880 bytes) and no smaller than 1MiB (1048576 bytes). The last chunk could be less than 1MiB (1048576 bytes).",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/octet-stream": {
            "schema": {
              "$ref": "#/components/schemas/PlantingActivityContents"
            }
          }
        }
      },
      "FetchPlantingActivitySummaryOk": {
        "description": "OK",
        "headers": {
          "X-Http-Request-Id": {
            "description": "Unique identifier assigned to the request.",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PlantingActivitySummaryResponse"
            }
          }
        }
      },
      "FetchApplicationActivitiesOk": {
        "description": "OK",
        "headers": {
          "X-Http-Request-Id": {
            "description": "Unique identifier assigned to the request.",
            "schema": {
              "type": "string"
            }
          },
          "X-Next-Token": {
            "description": "Token used to poll for updates.",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ApplicationActivities"
            }
          }
        }
      },
      "FetchApplicationActivitiesPartial": {
        "description": "Partial Result",
        "headers": {
          "X-Http-Request-Id": {
            "description": "Unique identifier assigned to the request.",
            "schema": {
              "type": "string"
            }
          },
          "X-Next-Token": {
            "description": "Token used to fetch next batch of results.",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ApplicationActivities"
            }
          }
        }
      },
      "FetchApplicationActivityOk": {
        "description": "OK",
        "headers": {
          "X-Http-Request-Id": {
            "description": "Unique identifier assigned to the request",
            "schema": {
              "type": "string"
            }
          },
          "Content-Range": {
            "description": "Byte range `bytes start-end/total` (https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.16). e.g. bytes 0-5242880/10242880. Downloads larger than 5MiB (5242880 bytes) in size must be downloaded in chunks no larger than 5MiB (5242880 bytes) and no smaller than 1MiB (1048576 bytes). The last chunk could be less than 1MiB (1048576 bytes).",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/octet-stream": {
            "schema": {
              "$ref": "#/components/schemas/ApplicationActivityContents"
            }
          }
        }
      },
      "FetchApplicationActivityPartial": {
        "description": "Partial Result",
        "headers": {
          "X-Http-Request-Id": {
            "description": "Unique identifier assigned to the request.",
            "schema": {
              "type": "string"
            }
          },
          "Content-Range": {
            "description": "Byte range `bytes start-end/total` (https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.16). e.g. bytes 0-5242880/10242880. Downloads larger than 5MiB (5242880 bytes) in size must be downloaded in chunks no larger than 5MiB (5242880 bytes) and no smaller than 1MiB (1048576 bytes). The last chunk could be less than 1MiB (1048576 bytes).",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/octet-stream": {
            "schema": {
              "$ref": "#/components/schemas/ApplicationActivityContents"
            }
          }
        }
      },
      "FetchApplicationActivitySummaryOk": {
        "description": "OK",
        "headers": {
          "X-Http-Request-Id": {
            "description": "Unique identifier assigned to the request.",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ApplicationActivitySummaryResponse"
            }
          }
        }
      },
      "FetchHarvestActivitiesOk": {
        "description": "OK",
        "headers": {
          "X-Http-Request-Id": {
            "description": "Unique identifier assigned to the request.",
            "schema": {
              "type": "string"
            }
          },
          "X-Next-Token": {
            "description": "Token used to poll for updates.",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/HarvestActivities"
            }
          }
        }
      },
      "FetchHarvestActivitiesPartial": {
        "description": "Partial Result",
        "headers": {
          "X-Http-Request-Id": {
            "description": "Unique identifier assigned to the request.",
            "schema": {
              "type": "string"
            }
          },
          "X-Next-Token": {
            "description": "Token used to fetch next batch of results.",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/HarvestActivities"
            }
          }
        }
      },
      "FetchHarvestActivityOk": {
        "description": "OK",
        "headers": {
          "X-Http-Request-Id": {
            "description": "Unique identifier assigned to the request",
            "schema": {
              "type": "string"
            }
          },
          "Content-Range": {
            "description": "Byte range `bytes start-end/total` (https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.16). e.g. bytes 0-5242880/10242880. Downloads larger than 5MiB (5242880 bytes) in size must be downloaded in chunks no larger than 5MiB (5242880 bytes) and no smaller than 1MiB (1048576 bytes). The last chunk could be less than 1MiB (1048576 bytes).",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/octet-stream": {
            "schema": {
              "$ref": "#/components/schemas/HarvestActivityContents"
            }
          }
        }
      },
      "FetchHarvestActivityPartial": {
        "description": "Partial Result",
        "headers": {
          "X-Http-Request-Id": {
            "description": "Unique identifier assigned to the request.",
            "schema": {
              "type": "string"
            }
          },
          "Content-Range": {
            "description": "Byte range `bytes start-end/total` (https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.16). e.g. bytes 0-5242880/10242880. Downloads larger than 5MiB (5242880 bytes) in size must be downloaded in chunks no larger than 5MiB (5242880 bytes) and no smaller than 1MiB (1048576 bytes). The last chunk could be less than 1MiB (1048576 bytes).",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/octet-stream": {
            "schema": {
              "$ref": "#/components/schemas/HarvestActivityContents"
            }
          }
        }
      },
      "FetchHarvestActivitySummaryOk": {
        "description": "OK",
        "headers": {
          "X-Http-Request-Id": {
            "description": "Unique identifier assigned to the request.",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/HarvestActivitySummaryResponse"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "oauth2_authorization_code": {
        "description": "Log in with FieldView OAuth2 provider (Authorization Code Grant). Used to authorize the client (partner) and\nuser. The *access_token* is required to be provided in the `Authorization` header on all calls to the FieldView\nAPIs with the following format `Bearer $access_token`.",
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://climate.com/static/app-login/",
            "tokenUrl": "https://api.climate.com/api/oauth/token",
            "scopes": {
              "platform": "(DEPRECATED) Legacy scope used for some Platform APIs",
              "fields:read": "Required for retrieving field and boundary information",
              "farmOrganizations:read": "Required for retrieving farm organization information",
              "operations:read": "Required for retrieving operation information",
              "resourceOwners:read": "Required for retrieving resource owner information",
              "scouting:read": "Required for retrieving user\\'s scouting information",
              "exports:read": "Required for requesting or retrieving exports",
              "fields:write": "Required for uploading field boundaries",
              "imagery:write": "Required for uploading imagery",
              "rx:write": "Required for uploading prescriptions",
              "soil:write": "Required for uploading soil sample results",
              "asApplied:read": "Required for retrieving as applied data",
              "asApplied:write": "Required for uploading application data",
              "asPlanted:read": "Required for retrieving planting data",
              "asPlanted:write": "Required for uploading planting data",
              "asHarvested:read": "Required for retrieving harvest data",
              "asHarvested:write": "Required for uploading harvest data",
              "diagnostics:read": "Required for retrieving CNH machine diagnostic data",
              "plantingActivitySummary:read": "Required for retrieving planting activity summary data",
              "customerInsights:read": "Required for retrieving customer insights metrics data",
              "avroAgronomicData:read": "Required for retrieving agronomic data"
            }
          }
        }
      },
      "api_key": {
        "description": "API access key used to control throttling (429 responses).  This key is typically formatted:\n`partner-{name}-{uuid}`",
        "type": "apiKey",
        "name": "X-Api-Key",
        "in": "header"
      }
    },
    "schemas": {
      "Parent": {
        "description": "A minimal set of attributes regarding the parent of a farm organization.",
        "required": [
          "id",
          "type"
        ],
        "properties": {
          "id": {
            "description": "Unique identifier for the parent of a farm organization.",
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "description": "Type of the parent of a farm organization.",
            "type": "string",
            "enum": [
              "farm"
            ]
          }
        }
      },
      "Field": {
        "description": "Logical representation of a Field with a name.  Spatial attributes of the Field are provided in the Boundary.",
        "required": [
          "id",
          "name",
          "boundaryId",
          "resourceOwnerId",
          "parent"
        ],
        "properties": {
          "id": {
            "description": "Unique identifier for a Field.",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "Name of the Field.",
            "type": "string"
          },
          "boundaryId": {
            "description": "Unique identifier for the current Field's Boundary.",
            "type": "string",
            "format": "uuid"
          },
          "resourceOwnerId": {
            "description": "Unique identifier of the resource owner that owns the Field.",
            "type": "string",
            "format": "uuid"
          },
          "parent": {
            "$ref": "#/components/schemas/Parent"
          }
        },
        "example": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "Back Forty",
          "boundaryId": "00000000-0000-0000-0000-000000000000",
          "resourceOwnerId": "00000000-0000-0000-0000-000000000000",
          "parent": {
            "id": "00000000-0000-0000-0000-000000000000",
            "type": "farm"
          }
        }
      },
      "Fields": {
        "description": "A batch of field results",
        "required": [
          "results"
        ],
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Field"
            }
          }
        }
      },
      "FarmOrganization": {
        "description": "Logical representation of a farm organization with a name and type.",
        "required": [
          "id",
          "name",
          "type"
        ],
        "properties": {
          "id": {
            "description": "Unique identifier for a farm organization.",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "Name of the farm organization.",
            "type": "string"
          },
          "type": {
            "description": "Type of the farm organization.",
            "type": "string",
            "enum": [
              "farm"
            ]
          }
        },
        "example": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "Back Forty",
          "type": "farm"
        }
      },
      "Operation": {
        "type": "object",
        "description": "Logical representation of an operation with a name and resource owner.",
        "required": [
          "id",
          "name",
          "resourceOwnerId"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the operation."
          },
          "name": {
            "type": "string",
            "description": "Name of the operation."
          },
          "resourceOwnerId": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the resource owner that owns the Operation."
          }
        },
        "example": {
          "id": "00000000-0000-0000-0000-000000000000",
          "name": "Back Forty",
          "resourceOwnerId": "00000000-0000-0000-0000-000000000000"
        }
      },
      "Operations": {
        "type": "object",
        "description": "A batch of operation results.",
        "required": [
          "results"
        ],
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Operation"
            }
          }
        }
      },
      "ResourceOwner": {
        "type": "object",
        "required": [
          "id",
          "name",
          "email"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        }
      },
      "Geometry": {
        "description": "GeoJSON",
        "required": [
          "type",
          "coordinates"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Point",
              "Polygon",
              "MultiPolygon"
            ]
          },
          "coordinates": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "example": {
          "type": "Point",
          "coordinates": [
            0,
            0
          ]
        }
      },
      "Area": {
        "description": "Area with units. Units are always \"hectare\".",
        "required": [
          "q",
          "u"
        ],
        "properties": {
          "q": {
            "type": "number",
            "format": "float"
          },
          "u": {
            "type": "string"
          }
        },
        "example": {
          "q": 1,
          "u": "hectare"
        }
      },
      "Point": {
        "required": [
          "coordinates",
          "type"
        ],
        "properties": {
          "coordinates": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "float"
            }
          },
          "type": {
            "type": "string"
          }
        },
        "example": {
          "type": "Point",
          "coordinates": [
            -122.2,
            38.1
          ]
        }
      },
      "BoundaryProperties": {
        "description": "Properties map.",
        "required": [
          "area",
          "centroid"
        ],
        "properties": {
          "area": {
            "$ref": "#/components/schemas/Area"
          },
          "centroid": {
            "$ref": "#/components/schemas/Point"
          }
        }
      },
      "Boundary": {
        "description": "Arbitrary boundary.  GeoJSON Feature.",
        "required": [
          "id",
          "type",
          "geometry",
          "properties"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "type": "string",
            "enum": [
              "Feature"
            ]
          },
          "geometry": {
            "$ref": "#/components/schemas/Geometry"
          },
          "properties": {
            "$ref": "#/components/schemas/BoundaryProperties"
          }
        }
      },
      "BoundaryUpload": {
        "description": "Arbitrary boundary in a geometry map",
        "required": [
          "geometry"
        ],
        "properties": {
          "geometry": {
            "$ref": "#/components/schemas/Geometry"
          }
        }
      },
      "UploadedBoundaryId": {
        "description": "Unique identifier of a successfully uploaded boundary",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "Metadata": {
        "type": "object",
        "additionalProperties": true
      },
      "Boundaries": {
        "description": "A batch of boundary results",
        "required": [
          "type",
          "features"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "FeatureCollection"
            ]
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Boundary"
            }
          }
        }
      },
      "BoundariesQuery": {
        "type": "object",
        "required": [
          "ids"
        ],
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "description": "Unique identifier for the boundary.",
              "type": "string",
              "format": "uuid"
            }
          }
        }
      },
      "Upload": {
        "type": "object",
        "description": "Client request to upload data for a user.",
        "required": [
          "contentType",
          "md5",
          "length"
        ],
        "properties": {
          "contentType": {
            "type": "string",
            "enum": [
              "image/vnd.climate.thermal.geotiff",
              "image/vnd.climate.ndvi.geotiff",
              "image/vnd.climate.rgb.geotiff",
              "image/vnd.climate.rgb-nir.geotiff",
              "image/vnd.climate.rgb-cir.geotiff",
              "image/vnd.climate.waterstress.geotiff",
              "image/vnd.climate.elevation.geotiff",
              "image/vnd.climate.raw.geotiff",
              "application/vnd.climate.field.geojson",
              "application/vnd.climate.rx.planting.shp",
              "application/vnd.climate.prescription.zones.shp",
              "application/vnd.climate.modus.xml",
              "application/vnd.climate.stand-count.geojson",
              "application/vnd.climate.weed-count.geojson",
              "application/vnd.climate.as-applied.zip",
              "application/vnd.climate.as-planted.zip",
              "application/vnd.climate.as-harvested.zip"
            ],
            "format": "mime-type",
            "description": "Content type representing data being uploaded (e.g. image/vnd.climate.rgb.geotiff)"
          },
          "md5": {
            "type": "string",
            "description": "Base64 encoded md5 hash of the content"
          },
          "length": {
            "type": "integer",
            "format": "int64",
            "description": "Content size in bytes"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          }
        }
      },
      "CreatedUpload": {
        "type": "string",
        "format": "uuid",
        "description": "Successfully created upload request"
      },
      "UploadStatus": {
        "type": "object",
        "required": [
          "id",
          "status"
        ],
        "properties": {
          "id": {
            "description": "Unique identifier for the upload.",
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "description": "Current status of the upload:\n  * `UPLOADING` - Uploading has started, parts are still coming in.\n  * `INVALID` - Upload has failed validity check.\n  * `PENDING` - Upload has been received by Climate and is being processed.\n  * `INBOX` - The upload is awaiting user acceptance in their Data Inbox.\n  * `DECLINED` - The user has declined the upload in their Data Inbox.\n  * `IMPORTING` - The user has accepted the upload and it is being imported into their account.\n  * `SUCCESS` - The upload has been successfully imported.\n",
            "type": "string",
            "enum": [
              "UPLOADING",
              "INVALID",
              "PENDING",
              "INBOX",
              "DECLINED",
              "IMPORTING",
              "SUCCESS"
            ]
          }
        }
      },
      "UploadStatuses": {
        "type": "object",
        "required": [
          "results"
        ],
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UploadStatus"
            }
          }
        }
      },
      "UploadStatusQuery": {
        "type": "object",
        "required": [
          "ids"
        ],
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "description": "Unique identifier for the upload.",
              "type": "string",
              "format": "uuid"
            }
          }
        }
      },
      "Export": {
        "type": "object",
        "description": "Client request to export data from a user.",
        "required": [
          "contentType"
        ],
        "properties": {
          "contentType": {
            "type": "string",
            "enum": [
              "application/vnd.climate.acrsi.geojson",
              "application/vnd.climate.harvest.geojson"
            ],
            "format": "mime-type",
            "description": "Content type representing data being exported (e.g. application/vnd.climate.acrsi.geojson)."
          },
          "definition": {
            "type": "object",
            "description": "Additional specifications for a client's data export request, dependent on the content type."
          }
        }
      },
      "CreatedExport": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "description": "Unique identifier for the export.",
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "ExportStatus": {
        "type": "object",
        "required": [
          "status"
        ],
        "properties": {
          "status": {
            "description": "Current status of the export request:\n  * `PROCESSING` - Export request has been received by Climate and is being processed.\n  * `INVALID` - Export request has failed validity check.\n  * `EXPIRED` - Export contents have expired, and are no longer available for retrieval.\n  * `COMPLETED` - The export request has been successfully processed, and its contents are available for retrieval.\n  * `NO_DATA` - The export request completed successfully but generated no data.\n",
            "type": "string",
            "enum": [
              "PROCESSING",
              "INVALID",
              "EXPIRED",
              "COMPLETED",
              "NO_DATA"
            ]
          },
          "error": {
            "description": "Message indicating reason for validation failure.",
            "type": "string"
          },
          "size": {
            "description": "Size of the export's contents in bytes.",
            "type": "integer",
            "format": "int64"
          },
          "checksum": {
            "description": "Base64 encoded MD5 hash of the export's contents.",
            "type": "string"
          },
          "xNextToken": {
            "description": "Token which may be used when executing an identical export in\nthe future, but which only wants export data which was not\npreviously exported.\nAssume a given field export request matches 12 fields today. And\ntomorrow it matches 15 fields. By passing the xNextToken in the\ndefinition section of tomorrow's field export request, only the\n3 additional fields would be exported. Note, all other parameters\npassed in the definition section must be identical to the original\nrequest.\n",
            "type": "string"
          }
        }
      },
      "ExportContents": {
        "required": [
          "body"
        ],
        "properties": {
          "body": {
            "$ref": "#/components/schemas/BinaryData"
          }
        }
      },
      "ScoutingTag": {
        "type": "object",
        "required": [
          "code"
        ],
        "properties": {
          "code": {
            "type": "string"
          }
        }
      },
      "ScoutingObservationSummary": {
        "type": "object",
        "required": [
          "id",
          "startTime",
          "endTime",
          "updatedAt"
        ],
        "properties": {
          "id": {
            "description": "The id of a scouting observation.",
            "type": "string",
            "format": "uuid"
          },
          "startTime": {
            "description": "The start time of the scouting observation. Time in ISO 8601 format with UTC timezone, 3 fractional seconds (https://tools.ietf.org/html/rfc3339).",
            "type": "string",
            "format": "date-time"
          },
          "endTime": {
            "description": "The start time of the scouting observation. Time in ISO 8601 format with UTC timezone, 3 fractional seconds (https://tools.ietf.org/html/rfc3339).",
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "description": "The time the scouting observation or any of its attachments was last updated.Time in ISO 8601 format with UTC timezone, 3 fractional seconds. (https://tools.ietf.org/html/rfc3339).",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ScoutingObservation": {
        "type": "object",
        "required": [
          "id",
          "title",
          "note",
          "location",
          "startTime",
          "endTime",
          "updatedAt",
          "fieldIds",
          "tags",
          "timespan",
          "locationDisplayColor",
          "status"
        ],
        "properties": {
          "id": {
            "description": "The id of a scouting observation.",
            "type": "string",
            "format": "uuid"
          },
          "title": {
            "description": "The title or summary of the scouting observation. 40 Characters long, no emojis, and leading and trailing whitespace will be trimmed.",
            "type": "string"
          },
          "note": {
            "description": "The text of the scouting observation. Maximum of 4000 characters.",
            "type": "string"
          },
          "location": {
            "description": "Where the scouting observation occurred.  GeoJson in WGS84.",
            "$ref": "#/components/schemas/Geometry"
          },
          "startTime": {
            "description": "The start time of the scouting observation. Time in ISO 8601 format with UTC timezone, 3 fractional seconds (https://tools.ietf.org/html/rfc3339).",
            "type": "string",
            "format": "date-time"
          },
          "endTime": {
            "description": "The start time of the scouting observation. Time in ISO 8601 format with UTC timezone, 3 fractional seconds (https://tools.ietf.org/html/rfc3339).",
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "description": "The time the scouting observation or any of its attachments was last updated.Time in ISO 8601 format with UTC timezone, 3 fractional seconds. (https://tools.ietf.org/html/rfc3339).",
            "type": "string",
            "format": "date-time"
          },
          "fieldIds": {
            "description": "Array of field ids associated with this observation.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "description": "For example, ROCK_STONE, PONDING_WET, HAIL Maximum 20 tags allowed, 40 characters per tag.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScoutingTag"
            }
          },
          "timespan": {
            "description": "Permanent or seasonal",
            "type": "string",
            "enum": [
              "PERMANENT",
              "SEASONAL"
            ]
          },
          "locationDisplayColor": {
            "description": "Color of scouting pin assigned in the Climate FieldView app.\nLimited in the Ux to a set of RGB values.\n* #307af7\n* #38d753\n* #b037e4\n* #ef3e3e\n* #f7ec41\n* #ff8439\n* #808080\n",
            "type": "string",
            "enum": [
              "#307af7",
              "#38d753",
              "#b037e4",
              "#ef3e3e",
              "#f7ec41",
              "#ff8439",
              "#808080"
            ]
          },
          "status": {
            "description": "The status of the scouting observation For example : ACTIVE, DELETED",
            "type": "string",
            "enum": [
              "ACTIVE",
              "DELETED"
            ]
          }
        }
      },
      "ScoutingObservations": {
        "description": "A batch of scouting observations",
        "required": [
          "results"
        ],
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScoutingObservationSummary"
            }
          }
        }
      },
      "ScoutingObservationAttachment": {
        "type": "object",
        "required": [
          "id",
          "updatedAt",
          "contentType",
          "length",
          "status"
        ],
        "properties": {
          "id": {
            "description": "id of the attachment",
            "type": "string",
            "format": "uuid"
          },
          "updatedAt": {
            "description": "The time the attachment was last updated.\nTime in ISO 8601 format with UTC timezone, 3 fractional seconds.\n(https://tools.ietf.org/html/rfc3339)\n",
            "type": "string",
            "format": "date-time"
          },
          "contentType": {
            "description": "The content type of the attachment, e.g. image/png.",
            "type": "string"
          },
          "length": {
            "description": "The number of bytes in the attachment.",
            "type": "integer",
            "format": "int64"
          },
          "status": {
            "description": "The status of the attachment. For example : ACTIVE, DELETED",
            "type": "string",
            "enum": [
              "ACTIVE",
              "DELETED"
            ]
          }
        }
      },
      "ScoutingObservationAttachments": {
        "description": "A batch of scouting attachments",
        "required": [
          "results"
        ],
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScoutingObservationAttachment"
            }
          }
        }
      },
      "Binary": {
        "type": "string",
        "format": "binary"
      },
      "BinaryData": {
        "description": "Binary contents",
        "type": "string",
        "format": "binary"
      },
      "ScoutingObservationAttachmentContents": {
        "required": [
          "body"
        ],
        "properties": {
          "body": {
            "$ref": "#/components/schemas/BinaryData"
          }
        }
      },
      "PlantingActivityContents": {
        "required": [
          "body"
        ],
        "properties": {
          "body": {
            "$ref": "#/components/schemas/BinaryData"
          }
        }
      },
      "ApplicationActivityContents": {
        "required": [
          "body"
        ],
        "properties": {
          "body": {
            "$ref": "#/components/schemas/BinaryData"
          }
        }
      },
      "HarvestActivityContents": {
        "required": [
          "body"
        ],
        "properties": {
          "body": {
            "$ref": "#/components/schemas/BinaryData"
          }
        }
      },
      "Empty": {
        "type": "object"
      },
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "required": [
              "id",
              "code",
              "message"
            ],
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "code": {
                "type": "string"
              },
              "message": {
                "type": "string",
                "description": "Description of the error encountered."
              }
            }
          }
        }
      },
      "PlantingActivities": {
        "description": "A batch of planting activities",
        "required": [
          "results"
        ],
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlantingActivitySummary"
            }
          }
        }
      },
      "PlantingActivitySummary": {
        "type": "object",
        "required": [
          "id",
          "startTime",
          "endTime",
          "createdAt",
          "updatedAt",
          "length",
          "fieldIds"
        ],
        "properties": {
          "id": {
            "description": "The id of a planting activity.",
            "type": "string",
            "format": "uuid"
          },
          "startTime": {
            "description": "The start time of the planting activity. Time in ISO 8601 format with UTC timezone, 3 fractional seconds (https://tools.ietf.org/html/rfc3339).",
            "type": "string",
            "format": "date-time"
          },
          "endTime": {
            "description": "The start time of the planting activity. Time in ISO 8601 format with UTC timezone, 3 fractional seconds (https://tools.ietf.org/html/rfc3339).",
            "type": "string",
            "format": "date-time"
          },
          "createdAt": {
            "description": "The time the planting activity was created. Time in ISO 8601 format with UTC timezone, 3 fractional seconds. (https://tools.ietf.org/html/rfc3339).",
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "description": "The time the planting activity was last updated. Time in ISO 8601 format with UTC timezone, 3 fractional seconds. (https://tools.ietf.org/html/rfc3339).",
            "type": "string",
            "format": "date-time"
          },
          "length": {
            "description": "The size in bytes of the raw planting activity file.",
            "type": "integer",
            "format": "int64"
          },
          "fieldIds": {
            "description": "Array of field ids associated the planting activity.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PlantingActivitySummaryResponse": {
        "type": "object",
        "required": [
          "id",
          "fieldId",
          "fileName",
          "fileSize",
          "indexedAt",
          "lastProcessedAt",
          "originalSrcModified",
          "serialNumber",
          "srcLastModified",
          "area",
          "boundary",
          "cropId",
          "dataChecksum\u00bf",
          "endTime",
          "machineId",
          "processorVersion",
          "recordCount",
          "seasonCode",
          "startTime",
          "originalCropName",
          "actualPopAvg",
          "excessDfPct",
          "goodSpacingPct",
          "newSeeds",
          "popUnit",
          "singulationPct",
          "split",
          "targetPopAvg"
        ],
        "properties": {
          "id": {
            "description": "The id of a planting activity.",
            "type": "string",
            "format": "uuid"
          },
          "fieldId": {
            "description": "The id of a planting activity field.",
            "type": "string",
            "format": "uuid"
          },
          "fileName": {
            "description": "File's name",
            "type": "string"
          },
          "fileSize": {
            "description": "File's size.",
            "type": "integer",
            "format": "int64"
          },
          "indexedAt": {
            "description": "The time the planting activity was indexed.",
            "type": "string",
            "format": "date-time"
          },
          "lastProcessedAt": {
            "description": "The time the planting activity was last processed.",
            "type": "string",
            "format": "date-time"
          },
          "originalSrcModified": {
            "description": "The time the planting activity original src was last modified.",
            "type": "string",
            "format": "date-time"
          },
          "serialNumber": {
            "description": "Serial number.",
            "type": "integer",
            "format": "int32"
          },
          "srcLastModified": {
            "description": "The time the planting activity src was last modified.",
            "type": "string",
            "format": "date-time"
          },
          "area": {
            "description": "The area of a planting activity.",
            "type": "number",
            "format": "float"
          },
          "boundary": {
            "description": "The boundary of a planting activity.",
            "type": "string"
          },
          "cropId": {
            "description": "The crop of a planting activity.",
            "type": "integer",
            "format": "int64"
          },
          "dataChecksum": {
            "description": "The data checksum of a planting activity.",
            "type": "string"
          },
          "endTime": {
            "description": "The time the planting activity was ended.",
            "type": "string",
            "format": "date-time"
          },
          "machineId": {
            "description": "The machineId of a planting activity.",
            "type": "string"
          },
          "processorVersion": {
            "description": "The processor version of a planting activity.",
            "type": "string"
          },
          "recordCount": {
            "description": "The record count of a planting activity.",
            "type": "integer",
            "format": "int64"
          },
          "seasonCode": {
            "description": "The season code of a planting activity.",
            "type": "string"
          },
          "startTime": {
            "description": "The time the planting activity was started.",
            "type": "string",
            "format": "date-time"
          },
          "moisturePct": {
            "description": "The moisture percentage of a harvest activity.",
            "type": "number",
            "format": "float"
          },
          "originalCropName": {
            "description": "The original crop name of a harvest activity.",
            "type": "string"
          },
          "actualPopAvg": {
            "description": "The actual pop. average of a planting activity.",
            "type": "number",
            "format": "float"
          },
          "speedAvg": {
            "description": "The speed average of a planting activity.",
            "type": "number",
            "format": "float"
          },
          "excessDfPct": {
            "description": "The excess df. percentage of a planting activity.",
            "type": "number",
            "format": "float"
          },
          "goodSpacingPct": {
            "description": "The good spacing percentage of a planting activity.",
            "type": "number",
            "format": "float"
          },
          "lossGcPct": {
            "description": "The loss gc. percentage of a planting activity.",
            "type": "number",
            "format": "float"
          },
          "newSeeds": {
            "description": "The new seeds of a planting activity.",
            "type": "integer",
            "format": "int64"
          },
          "popUnit": {
            "description": "The pop unit of a planting activity.",
            "type": "string"
          },
          "singulationPct": {
            "description": "The singulation percentage of a planting activity.",
            "type": "number",
            "format": "float"
          },
          "split": {
            "description": "The split of a planting activity.",
            "type": "boolean"
          },
          "targetPopAvg": {
            "description": "The target pop average of a planting activity.",
            "type": "number",
            "format": "float"
          }
        }
      },
      "ApplicationActivities": {
        "description": "A batch of application activities",
        "required": [
          "results"
        ],
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationActivitySummary"
            }
          }
        }
      },
      "ApplicationActivitySummary": {
        "type": "object",
        "required": [
          "id",
          "startTime",
          "endTime",
          "createdAt",
          "updatedAt",
          "length",
          "fieldIds"
        ],
        "properties": {
          "id": {
            "description": "The id of an application activity.",
            "type": "string",
            "format": "uuid"
          },
          "startTime": {
            "description": "The start time of the application activity. Time in ISO 8601 format with UTC timezone, 3 fractional seconds (https://tools.ietf.org/html/rfc3339).",
            "type": "string",
            "format": "date-time"
          },
          "endTime": {
            "description": "The start time of the application activity. Time in ISO 8601 format with UTC timezone, 3 fractional seconds (https://tools.ietf.org/html/rfc3339).",
            "type": "string",
            "format": "date-time"
          },
          "createdAt": {
            "description": "The time the application activity was created. Time in ISO 8601 format with UTC timezone, 3 fractional seconds. (https://tools.ietf.org/html/rfc3339).",
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "description": "The time the application activity was last updated. Time in ISO 8601 format with UTC timezone, 3 fractional seconds. (https://tools.ietf.org/html/rfc3339).",
            "type": "string",
            "format": "date-time"
          },
          "length": {
            "description": "The size in bytes of the raw application activity file.",
            "type": "integer",
            "format": "int64"
          },
          "fieldIds": {
            "description": "Array of field ids associated the application activity.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ApplicationActivitySummaryResponse": {
        "type": "object",
        "required": [
          "id",
          "fieldId",
          "fileName",
          "fileSize",
          "indexedAt",
          "lastProcessedAt",
          "originalSrcModified",
          "serialNumber",
          "srcLastModified",
          "area",
          "cropId",
          "dataChecksum",
          "endTime",
          "processorVersion",
          "recordCount",
          "seasonCode",
          "startTime"
        ],
        "properties": {
          "id": {
            "description": "The id of an application activity.",
            "type": "string",
            "format": "uuid"
          },
          "fieldId": {
            "description": "The id of an application activity field.",
            "type": "string",
            "format": "uuid"
          },
          "fileName": {
            "description": "File's name",
            "type": "string"
          },
          "fileSize": {
            "description": "File's size.",
            "type": "integer",
            "format": "int64"
          },
          "indexedAt": {
            "description": "The time the application activity was indexed.",
            "type": "string",
            "format": "date-time"
          },
          "lastProcessedAt": {
            "description": "The time the application activity was last processed.",
            "type": "string",
            "format": "date-time"
          },
          "originalSrcModified": {
            "description": "The time the application activity original src was last modified.",
            "type": "string",
            "format": "date-time"
          },
          "serialNumber": {
            "description": "Serial number.",
            "type": "integer",
            "format": "int32"
          },
          "srcLastModified": {
            "description": "The time the application activity src was last modified.",
            "type": "string",
            "format": "date-time"
          },
          "area": {
            "description": "The area of an application activity.",
            "type": "number",
            "format": "float"
          },
          "boundary": {
            "description": "The boundary of an application activity.",
            "type": "string"
          },
          "cropId": {
            "description": "The crop of an application activity.",
            "type": "integer",
            "format": "int64"
          },
          "dataChecksum": {
            "description": "The data checksum of an application activity.",
            "type": "string"
          },
          "endTime": {
            "description": "The time the application activity was ended.",
            "type": "string",
            "format": "date-time"
          },
          "machineId": {
            "description": "The machineId of an application activity.",
            "type": "string"
          },
          "processorVersion": {
            "description": "The processor version of an application activity.",
            "type": "string"
          },
          "recordCount": {
            "description": "The record count of an application activity.",
            "type": "integer",
            "format": "int64"
          },
          "seasonCode": {
            "description": "The season code of an application activity.",
            "type": "string"
          },
          "startTime": {
            "description": "The time the application activity was started.",
            "type": "string",
            "format": "date-time"
          },
          "passName": {
            "description": "The pass name of an application activity.",
            "type": "string"
          }
        }
      },
      "HarvestActivities": {
        "description": "A batch of harvest activities",
        "required": [
          "results"
        ],
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HarvestActivitySummary"
            }
          }
        }
      },
      "HarvestActivitySummary": {
        "type": "object",
        "required": [
          "id",
          "startTime",
          "endTime",
          "createdAt",
          "updatedAt",
          "length",
          "fieldIds"
        ],
        "properties": {
          "id": {
            "description": "The id of a harvest activity.",
            "type": "string",
            "format": "uuid"
          },
          "startTime": {
            "description": "The start time of the harvest activity. Time in ISO 8601 format with UTC timezone, 3 fractional seconds (https://tools.ietf.org/html/rfc3339).",
            "type": "string",
            "format": "date-time"
          },
          "endTime": {
            "description": "The start time of the harvest activity. Time in ISO 8601 format with UTC timezone, 3 fractional seconds (https://tools.ietf.org/html/rfc3339).",
            "type": "string",
            "format": "date-time"
          },
          "createdAt": {
            "description": "The time the harvest activity was created. Time in ISO 8601 format with UTC timezone, 3 fractional seconds. (https://tools.ietf.org/html/rfc3339).",
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "description": "The time the harvest activity was last updated. Time in ISO 8601 format with UTC timezone, 3 fractional seconds. (https://tools.ietf.org/html/rfc3339).",
            "type": "string",
            "format": "date-time"
          },
          "length": {
            "description": "The size in bytes of the raw harvest activity file.",
            "type": "integer",
            "format": "int64"
          },
          "fieldIds": {
            "description": "Array of field ids associated the harvest activity.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "HarvestActivitySummaryResponse": {
        "type": "object",
        "required": [
          "id",
          "fieldId",
          "fileName",
          "fileSize",
          "indexedAt",
          "lastProcessedAt",
          "originalSrcModified",
          "serialNumber",
          "srcLastModified",
          "area",
          "cropId",
          "dataChecksum",
          "endTime",
          "machineId",
          "processorVersion",
          "recordCount",
          "seasonCode",
          "startTime"
        ],
        "properties": {
          "id": {
            "description": "The id of a harvest activity.",
            "type": "string",
            "format": "uuid"
          },
          "fieldId": {
            "description": "The id of a harvest activity field.",
            "type": "string",
            "format": "uuid"
          },
          "fileName": {
            "description": "File's name",
            "type": "string"
          },
          "fileSize": {
            "description": "File's size.",
            "type": "integer",
            "format": "int64"
          },
          "indexedAt": {
            "description": "The time the harvest activity was indexed.",
            "type": "string",
            "format": "date-time"
          },
          "lastProcessedAt": {
            "description": "The time the harvest activity was last processed.",
            "type": "string",
            "format": "date-time"
          },
          "originalSrcModified": {
            "description": "The time the harvest activity original src was last modified.",
            "type": "string",
            "format": "date-time"
          },
          "serialNumber": {
            "description": "Serial number.",
            "type": "integer",
            "format": "int32"
          },
          "srcLastModified": {
            "description": "The time the harvest activity src was last modified.",
            "type": "string",
            "format": "date-time"
          },
          "area": {
            "description": "The area of a harvest activity.",
            "type": "number",
            "format": "float"
          },
          "boundary": {
            "description": "The boundary of a harvest activity.",
            "type": "string"
          },
          "cropId": {
            "description": "The crop of a harvest activity.",
            "type": "integer",
            "format": "int64"
          },
          "dataChecksum": {
            "description": "The data checksum of a harvest activity.",
            "type": "string"
          },
          "endTime": {
            "description": "The time the harvest activity was ended.",
            "type": "string",
            "format": "date-time"
          },
          "machineId": {
            "description": "The machineId of a harvest activity.",
            "type": "string"
          },
          "processorVersion": {
            "description": "The processor version of a harvest activity.",
            "type": "string"
          },
          "recordCount": {
            "description": "The record count of a harvest activity.",
            "type": "integer",
            "format": "int64"
          },
          "seasonCode": {
            "description": "The season code of a harvest activity.",
            "type": "string"
          },
          "startTime": {
            "description": "The time the harvest activity was started.",
            "type": "string",
            "format": "date-time"
          },
          "moisturePct": {
            "description": "The moisture percentage of a harvest activity.",
            "type": "number",
            "format": "float"
          },
          "originalCropName": {
            "description": "The original crop name of a harvest activity.",
            "type": "string"
          },
          "wetMass": {
            "description": "The wet mass of a harvest activity.",
            "type": "number",
            "format": "float"
          },
          "loadNumber": {
            "description": "Load number.",
            "type": "integer",
            "format": "int32"
          }
        }
      }
    }
  },
  "x-amazon-apigateway-api-key-source": "AUTHORIZER"
}