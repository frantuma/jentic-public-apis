{
  "openapi": "3.0.0",
  "info": {
    "title": "iQualify Management API",
    "version": "v1",
    "description": "The iQualify API offers management responses for building\nlearning experiences using your iQualify instance data.\n\nOnce you\u2019ve registered with iQualify, you can request an API access token by\nnavigating to the API access section of the \"Account Settings\" area.\n\nFind out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token)\n on our Knowledge base.\n\nAll endpoints are only accessible via https and are located at\napi.iqualify.com. For instance: you can find your current offerings by\naccessing the following URL:\n\n    https://api.iqualify.com/v1/offerings/current\n\n",
    "x-jentic-source-url": "https://api.iqualify.com/v1/management.json"
  },
  "x-readme": {
    "proxy-enabled": false
  },
  "servers": [
    {
      "url": "https://api.iqualify.com/v1"
    }
  ],
  "paths": {
    "/": {
      "get": {
        "tags": [
          "API info"
        ],
        "summary": "List supported endpoints URLs",
        "description": "Responds with all supported endpoints URLs for v2 version.",
        "responses": {
          "200": {
            "description": "Supported endpoints",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/offerings/{offeringId}/analytics/pulses": {
      "get": {
        "tags": [
          "Pulses"
        ],
        "summary": "Find all pulse IDs in the specified offering",
        "description": "Responds with the IDs of all pulses that learners have responded to in a specified offering.",
        "parameters": [
          {
            "$ref": "#/components/parameters/offeringId"
          }
        ],
        "responses": {
          "200": {
            "description": "Pulses' ids",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/offerings/{offeringId}/analytics/pulses/responses": {
      "get": {
        "tags": [
          "Pulses"
        ],
        "summary": "Find pulses by offeringId",
        "description": "Responds with pulse's responses in an offering matching the offeringId.",
        "parameters": [
          {
            "$ref": "#/components/parameters/offeringId"
          },
          {
            "name": "pulseType",
            "description": "Filter pulse responses by type.",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "submit_text",
                "MCQ",
                "spatial_triangular",
                "spatial_planar",
                "spatial_linear"
              ]
            }
          },
          {
            "name": "responseTime",
            "description": "Filter pulse responses by responseTime. Lower then (`lt`), lower then or equal (`lte`), greater then (`gt`) and greater then or equal (`gte`) operators are available. Example of filtering by time range __gte__2017-03-14T07:30:00Z__",
            "in": "query",
            "allowReserved": true,
            "schema": {
              "oneOf": [
                {
                  "type": "string",
                  "minLength": 1
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All pulses' responses",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Pulses",
                  "items": {
                    "$ref": "#/components/schemas/PulseResponse"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/offerings/{offeringId}/analytics/pulses/{pulseId}/responses": {
      "get": {
        "tags": [
          "Pulses"
        ],
        "summary": "Find pulses by offeringId and pulseId",
        "description": "Responds with pulse's responses, matching the pulseId, in an offering matching the offeringId.",
        "parameters": [
          {
            "$ref": "#/components/parameters/offeringId"
          },
          {
            "name": "pulseId",
            "in": "path",
            "description": "pulse's base id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Pulse data matching pulseId",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Pulses",
                  "items": {
                    "$ref": "#/components/schemas/PulseResponse"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/offerings/{offeringId}/analytics/marks/assignments": {
      "get": {
        "tags": [
          "Assessment data"
        ],
        "summary": "Find assessment marks",
        "description": "Responds with all learner assessment marks in an offering matching the offeringId.",
        "parameters": [
          {
            "$ref": "#/components/parameters/offeringId"
          }
        ],
        "responses": {
          "200": {
            "description": "Assignments marks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "AssignmentsMarks",
                  "items": {
                    "$ref": "#/components/schemas/AssignmentMarkResponse"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/offerings/{offeringId}/analytics/marks/quizzes": {
      "get": {
        "tags": [
          "Assessment data"
        ],
        "summary": "Find quiz marks",
        "description": "Responds with all learner quiz marks in an offering matching the offeringId.",
        "parameters": [
          {
            "$ref": "#/components/parameters/offeringId"
          }
        ],
        "responses": {
          "200": {
            "description": "Quizzes marks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "QuizzesMarks",
                  "items": {
                    "$ref": "#/components/schemas/QuizMarkResponse"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/offerings/{offeringId}/analytics/learners-progress": {
      "get": {
        "tags": [
          "Learner activity"
        ],
        "summary": "Find learner progress in a specified offering",
        "description": "Responds with all learner progress in the offering.",
        "parameters": [
          {
            "$ref": "#/components/parameters/offeringId"
          }
        ],
        "responses": {
          "200": {
            "description": "Learners progress",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "LearnersProgress",
                  "items": {
                    "$ref": "#/components/schemas/LearnerProgressResponse"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/offerings/{offeringId}/analytics/unit-reactions": {
      "get": {
        "tags": [
          "Learner activity"
        ],
        "summary": "Find unit reactions",
        "description": "Responds with user reactions to units in a specified offering.",
        "parameters": [
          {
            "$ref": "#/components/parameters/offeringId"
          }
        ],
        "responses": {
          "200": {
            "description": "Unit Reactions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "UnitReactiosAnalytics",
                  "items": {
                    "$ref": "#/components/schemas/UnitReactionsAnalyticsResponse"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/offerings/{offeringId}/analytics/submissions/assignments": {
      "get": {
        "tags": [
          "Assessment data"
        ],
        "summary": "Find submissions to assessments, including marks if any",
        "description": "Responds with all learner assessment submissions and marks, if any, in an offering matching the offeringId.",
        "parameters": [
          {
            "$ref": "#/components/parameters/offeringId"
          }
        ],
        "responses": {
          "200": {
            "description": "Assignments submissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "AssignmentsSubmissions",
                  "items": {
                    "$ref": "#/components/schemas/AssignmentMarkResponse"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/offerings/{offeringId}/analytics/social-notes": {
      "get": {
        "tags": [
          "Learner activity"
        ],
        "summary": "Find shared social notes in an offering",
        "description": "Responds with all shared social notes in a specified offering.",
        "parameters": [
          {
            "$ref": "#/components/parameters/offeringId"
          }
        ],
        "responses": {
          "200": {
            "description": "Offering social notes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "OfferingSocialNotes",
                  "items": {
                    "$ref": "#/components/schemas/SocialNotesResponse"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/offerings/{offeringId}/analytics/activities/responses": {
      "get": {
        "tags": [
          "Assessment data"
        ],
        "summary": "Find open response activity attempts",
        "description": "Responds with all learner activity attempts for open response activities in an offering matching the offeringId.",
        "parameters": [
          {
            "$ref": "#/components/parameters/offeringId"
          }
        ],
        "responses": {
          "200": {
            "description": "Offering activity attempt open responses",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "OfferingActivityAttemptOpenResponses",
                  "items": {
                    "$ref": "#/components/schemas/ActivityAttemptOpenResponse"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/offerings/{offeringId}/analytics/submissions/open-response/{assessmentId}": {
      "get": {
        "tags": [
          "Assessment data"
        ],
        "summary": "Find submissions to a specified open response assessment, including marks if any",
        "description": "Responds with all learner assessment submissions and marks, if any, in a specified open response assessment.",
        "parameters": [
          {
            "$ref": "#/components/parameters/offeringId"
          },
          {
            "$ref": "#/components/parameters/assessmentId"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with assignment submissions for the specified assignment.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "SubmissionMarkResponse",
                  "items": {
                    "$ref": "#/components/schemas/SubmissionMarkResponse"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/offerings/{offeringId}/analytics/submissions/{userEmail}/assignments/{assessmentId}": {
      "get": {
        "tags": [
          "Assessment data"
        ],
        "summary": "Find a learner's submission to a specified assessment, including marks if any",
        "description": "Responds with the learner's assessment submission and any marks for the submission.",
        "parameters": [
          {
            "$ref": "#/components/parameters/offeringId"
          },
          {
            "$ref": "#/components/parameters/userEmail"
          },
          {
            "$ref": "#/components/parameters/assessmentId"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the learner's assessment submission and any marks for the submission.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "SubmissionMarkResponse",
                  "items": {
                    "$ref": "#/components/schemas/SubmissionMarkResponse"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/offerings/{offeringId}/groups": {
      "get": {
        "tags": [
          "Assessment groups"
        ],
        "summary": "Find assessment groups",
        "description": "Responds with a list of assessment groups in an offering.",
        "parameters": [
          {
            "$ref": "#/components/parameters/offeringId"
          }
        ],
        "responses": {
          "200": {
            "description": "Succesful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "List of assessment groups in an offering",
                  "items": {
                    "$ref": "#/components/schemas/AssessmentGroupResponse"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      },
      "post": {
        "tags": [
          "Assessment groups"
        ],
        "summary": "Add an assessment group",
        "description": "Creates a new assessment group in an offering.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssessmentGroupRequired"
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/offeringId"
          }
        ],
        "responses": {
          "201": {
            "description": "assessment group successfully added",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssessmentGroupResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "SchemaRequiredError": {
                    "$ref": "#/components/examples/SchemaRequiredError"
                  },
                  "SchemaMinLengthError": {
                    "$ref": "#/components/examples/SchemaMinLengthError"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/offerings/{offeringId}/groups/{groupId}/learners": {
      "get": {
        "tags": [
          "Assessment groups"
        ],
        "summary": "Find learners in an assessment group",
        "description": "Responds with a list of learners in a specified assessment group.",
        "parameters": [
          {
            "$ref": "#/components/parameters/offeringId"
          },
          {
            "$ref": "#/components/parameters/groupId"
          }
        ],
        "responses": {
          "200": {
            "description": "Succesful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "List of learners",
                  "items": {
                    "$ref": "#/components/schemas/UserResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "SchemaRequiredError": {
                    "$ref": "#/components/examples/SchemaRequiredError"
                  },
                  "SchemaMinLengthError": {
                    "$ref": "#/components/examples/SchemaMinLengthError"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      },
      "post": {
        "tags": [
          "Assessment groups"
        ],
        "summary": "Add a learner to an assessment group",
        "description": "Adds a learner into the specified assessment group.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/offeringId"
          },
          {
            "$ref": "#/components/parameters/groupId"
          }
        ],
        "responses": {
          "201": {
            "description": "Succesful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "ApiValidationError": {
                    "$ref": "#/components/examples/ApiValidationError"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/offerings/{offeringId}/groups/{groupId}/learners/{userEmail}": {
      "delete": {
        "tags": [
          "Assessment groups"
        ],
        "summary": "Remove a learner from an assessment group",
        "description": "Removes a learner from the specified assessment group.",
        "parameters": [
          {
            "$ref": "#/components/parameters/offeringId"
          },
          {
            "$ref": "#/components/parameters/groupId"
          },
          {
            "$ref": "#/components/parameters/userEmail"
          }
        ],
        "responses": {
          "204": {
            "description": "user successfully removed from the assessment group"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "ApiValidationError": {
                    "$ref": "#/components/examples/ApiValidationError"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/offerings/{offeringId}/analytics/channels/{channelId}/posts": {
      "get": {
        "tags": [
          "Channels"
        ],
        "summary": "Find posts",
        "description": "Responds with a list of posts made in a specified channel, within an offering.",
        "parameters": [
          {
            "$ref": "#/components/parameters/offeringId"
          },
          {
            "$ref": "#/components/parameters/channelId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Posts",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/httpPost"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/offerings/{offeringId}/analytics/channels/{channelId}/comments": {
      "get": {
        "tags": [
          "Channels"
        ],
        "summary": "Find comments",
        "description": "Responds with a list of comments made in any posts in a specified channel, within an offering.",
        "parameters": [
          {
            "$ref": "#/components/parameters/offeringId"
          },
          {
            "$ref": "#/components/parameters/channelId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Comments",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Comment"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/offerings/{offeringId}/analytics/channels/{channelId}/replies": {
      "get": {
        "tags": [
          "Channels"
        ],
        "summary": "Find replies",
        "description": "Responds with a list of replies to comments in any posts in a specified channel, within an offering.",
        "parameters": [
          {
            "$ref": "#/components/parameters/offeringId"
          },
          {
            "$ref": "#/components/parameters/channelId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Comments",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Comment"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/offerings/{offeringId}/channels": {
      "get": {
        "tags": [
          "Channels"
        ],
        "summary": "Find channels",
        "description": "Responds with a list of channels in an offering.",
        "parameters": [
          {
            "$ref": "#/components/parameters/offeringId"
          }
        ],
        "responses": {
          "200": {
            "description": "Succesful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "List of channels in a offering",
                  "items": {
                    "$ref": "#/components/schemas/ChannelResponse"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      },
      "post": {
        "tags": [
          "Channels"
        ],
        "summary": "Add channel",
        "description": "Adds new channel to the specified offering.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChannelRequired"
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/offeringId"
          }
        ],
        "responses": {
          "201": {
            "description": "channel successfully added",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "SchemaRequiredError": {
                    "$ref": "#/components/examples/SchemaRequiredError"
                  },
                  "SchemaMinLengthError": {
                    "$ref": "#/components/examples/SchemaMinLengthError"
                  },
                  "SchemaTypeError": {
                    "$ref": "#/components/examples/SchemaTypeError"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/offerings/{offeringId}/channels/{channelId}": {
      "patch": {
        "tags": [
          "Channels"
        ],
        "summary": "Update channel",
        "description": "Updates a channel in an offering.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Channel"
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/offeringId"
          },
          {
            "$ref": "#/components/parameters/channelId"
          }
        ],
        "responses": {
          "200": {
            "description": "channel successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "SchemaRequiredError": {
                    "$ref": "#/components/examples/SchemaRequiredError"
                  },
                  "SchemaMinLengthError": {
                    "$ref": "#/components/examples/SchemaMinLengthError"
                  },
                  "SchemaTypeError": {
                    "$ref": "#/components/examples/SchemaTypeError"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/offerings/{offeringId}/channels/{channelId}/learners": {
      "post": {
        "tags": [
          "Channels"
        ],
        "summary": "Add learners to a group channel",
        "description": "Adds a learner to a specified group channel.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "email": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/offeringId"
          },
          {
            "$ref": "#/components/parameters/channelId"
          }
        ],
        "responses": {
          "204": {
            "description": "Learner successfully added to the channel."
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "SchemaRequiredError": {
                    "$ref": "#/components/examples/SchemaRequiredError"
                  },
                  "SchemaMinLengthError": {
                    "$ref": "#/components/examples/SchemaMinLengthError"
                  },
                  "SchemaTypeError": {
                    "$ref": "#/components/examples/SchemaTypeError"
                  },
                  "InvalidGroupChannelError": {
                    "$ref": "#/components/examples/InvalidGroupChannelError"
                  },
                  "UserNotInOfferingError": {
                    "$ref": "#/components/examples/UserNotInOfferingError"
                  },
                  "ObjectExistsError": {
                    "$ref": "#/components/examples/ObjectExistsError"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      },
      "delete": {
        "tags": [
          "Channels"
        ],
        "summary": "Remove learners from a group channel",
        "description": "Removes a learner from the specified group channel.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "email": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/offeringId"
          },
          {
            "$ref": "#/components/parameters/channelId"
          }
        ],
        "responses": {
          "204": {
            "description": "Learner successfully removed from the channel."
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "InvalidGroupChannelError": {
                    "$ref": "#/components/examples/InvalidGroupChannelError"
                  },
                  "UserNotInOfferingError": {
                    "$ref": "#/components/examples/UserNotInOfferingError"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      },
      "get": {
        "tags": [
          "Channels"
        ],
        "summary": "Find learners in a group channel",
        "description": "Finds all learners in a specified group channel.",
        "parameters": [
          {
            "$ref": "#/components/parameters/offeringId"
          },
          {
            "$ref": "#/components/parameters/channelId"
          }
        ],
        "responses": {
          "200": {
            "description": "channel data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "InvalidGroupChannelError": {
                    "$ref": "#/components/examples/InvalidGroupChannelError"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/course-mappings": {
      "get": {
        "tags": [
          "Course mappings"
        ],
        "summary": "Find course mappings",
        "description": "Returns all course mappings for course offerings.",
        "responses": {
          "200": {
            "description": "Course Mappings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "course mappings",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          }
        }
      }
    },
    "/course-mappings/externalcourse/{externalCourseId}": {
      "get": {
        "tags": [
          "Course mappings"
        ],
        "summary": "Find course mappings by externalCourseId",
        "description": "Responds with course mapping details by externalCourseId.",
        "parameters": [
          {
            "$ref": "#/components/parameters/externalCourseId"
          }
        ],
        "responses": {
          "200": {
            "description": "Course Mapping",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/course-mappings/{offeringId}": {
      "get": {
        "tags": [
          "Course mappings"
        ],
        "summary": "Find course mappings by offeringId",
        "description": "Responds with course mapping details by offeringId.",
        "parameters": [
          {
            "$ref": "#/components/parameters/offeringId"
          }
        ],
        "responses": {
          "200": {
            "description": "Course Mapping",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/course-mappings/{offeringId}/{externalCourseId}": {
      "put": {
        "tags": [
          "Course mappings"
        ],
        "summary": "Add course mapping",
        "description": "Creates a mapping between the offering and the externalCourseId.",
        "parameters": [
          {
            "$ref": "#/components/parameters/offeringId"
          },
          {
            "$ref": "#/components/parameters/externalCourseId"
          }
        ],
        "responses": {
          "200": {
            "description": "Course Mapping",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      },
      "delete": {
        "tags": [
          "Course mappings"
        ],
        "summary": "Remove course mapping",
        "description": "Removes the course mapping between the offering and the externalCourseId.",
        "parameters": [
          {
            "$ref": "#/components/parameters/offeringId"
          },
          {
            "$ref": "#/components/parameters/externalCourseId"
          }
        ],
        "responses": {
          "200": {
            "description": "Course Mapping",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/courses": {
      "get": {
        "tags": [
          "Courses"
        ],
        "summary": "Find courses",
        "description": "Responds with all courses (draft and published.)",
        "responses": {
          "200": {
            "description": "All courses (draft and published) in the organisation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Courses",
                  "items": {
                    "$ref": "#/components/schemas/CourseResponse"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          }
        }
      }
    },
    "/courses/{contentId}": {
      "get": {
        "tags": [
          "Courses"
        ],
        "summary": "Find course by contentId",
        "description": "Responds with a course matching the contentId.",
        "parameters": [
          {
            "name": "contentId",
            "description": "The content Id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Course detail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseMetaResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/courses/{contentId}/activations": {
      "get": {
        "tags": [
          "Courses"
        ],
        "summary": "Find activations for a contentId",
        "description": "Responds with all activations for the contentId provided.",
        "parameters": [
          {
            "name": "contentId",
            "description": "The content Id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Activation list.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivationResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/courses/{contentId}/metadata/tags": {
      "put": {
        "tags": [
          "Course metadata"
        ],
        "summary": "Update course tags",
        "description": "Add or update course tags in the metadata of a course.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "contentId",
            "description": "The content Id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Course detail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseMetaResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "SchemaRequiredError": {
                    "$ref": "#/components/examples/SchemaRequiredError"
                  },
                  "SchemaTypeError": {
                    "$ref": "#/components/examples/SchemaTypeError"
                  },
                  "SchemaAdditionalPropertiesError": {
                    "$ref": "#/components/examples/SchemaAdditionalPropertiesError"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/courses/{contentId}/metadata/category": {
      "put": {
        "tags": [
          "Course metadata"
        ],
        "summary": "Update course category",
        "description": "Add or update course category in the metadata of a course.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "category": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "contentId",
            "description": "The content Id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Course detail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseMetaResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "SchemaRequiredError": {
                    "$ref": "#/components/examples/SchemaRequiredError"
                  },
                  "SchemaTypeError": {
                    "$ref": "#/components/examples/SchemaTypeError"
                  },
                  "SchemaAdditionalPropertiesError": {
                    "$ref": "#/components/examples/SchemaAdditionalPropertiesError"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/courses/{contentId}/metadata/level": {
      "put": {
        "tags": [
          "Course metadata"
        ],
        "summary": "Update course level",
        "description": "Add or update the course level in the metadata of a course.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "level": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "contentId",
            "description": "The content Id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Course detail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseMetaResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "SchemaRequiredError": {
                    "$ref": "#/components/examples/SchemaRequiredError"
                  },
                  "SchemaTypeError": {
                    "$ref": "#/components/examples/SchemaTypeError"
                  },
                  "SchemaAdditionalPropertiesError": {
                    "$ref": "#/components/examples/SchemaAdditionalPropertiesError"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/courses/{contentId}/metadata/topic": {
      "put": {
        "tags": [
          "Course metadata"
        ],
        "summary": "Update course topic",
        "description": "Add or update the course topic in the metadata of a course.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "topic": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "contentId",
            "description": "The content Id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Course detail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseMetaResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "SchemaRequiredError": {
                    "$ref": "#/components/examples/SchemaRequiredError"
                  },
                  "SchemaTypeError": {
                    "$ref": "#/components/examples/SchemaTypeError"
                  },
                  "SchemaAdditionalPropertiesError": {
                    "$ref": "#/components/examples/SchemaAdditionalPropertiesError"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/courses/{rootContentId}/permissions/{userEmail}": {
      "post": {
        "tags": [
          "Courses"
        ],
        "summary": "Update course access",
        "description": "Provide a user with access to a specific course by rootContentId.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "permission to be granted to the user.",
                "properties": {
                  "isBuilder": {
                    "type": "boolean",
                    "default": true
                  },
                  "isReviewer": {
                    "type": "boolean",
                    "default": false
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "rootContentId",
            "description": "The content Id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userEmail",
            "description": "The user email",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "user successfully added to the course with the specified permission.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "contentId": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "SchemaRequiredError": {
                    "$ref": "#/components/examples/SchemaRequiredError"
                  },
                  "SchemaTypeError": {
                    "$ref": "#/components/examples/SchemaTypeError"
                  },
                  "MultipleObjectsError": {
                    "$ref": "#/components/examples/MultipleObjectsError"
                  },
                  "ObjectIsNotError": {
                    "$ref": "#/components/examples/ObjectIsNotError"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/courses/{contentId}/permissions": {
      "get": {
        "tags": [
          "Courses"
        ],
        "summary": "Find users who have access to the contentId provided",
        "description": "Responds with users who have access to a specific course by contentId.",
        "parameters": [
          {
            "name": "contentId",
            "description": "The content Id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of users who have access to the content ID provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPermission"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/offerings": {
      "get": {
        "tags": [
          "Offerings"
        ],
        "summary": "Find current, past and future offerings",
        "description": "Responds with all offerings for your organisation.",
        "responses": {
          "200": {
            "description": "all offerings (current, past and future ones)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Offerings",
                  "items": {
                    "$ref": "#/components/schemas/OfferingMetadataResponse"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          }
        }
      },
      "post": {
        "tags": [
          "Offerings"
        ],
        "summary": "Create offering",
        "description": "Creates a new offering.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OfferingRequired"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "offering created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingMetadataResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "SchemaRequiredError": {
                    "$ref": "#/components/examples/SchemaRequiredError"
                  },
                  "SchemaFormatError": {
                    "$ref": "#/components/examples/SchemaFormatError"
                  },
                  "SchemaTypeError": {
                    "$ref": "#/components/examples/SchemaTypeError"
                  },
                  "InvalidContentError": {
                    "$ref": "#/components/examples/InvalidContentError"
                  },
                  "IncompatibleParametersError": {
                    "$ref": "#/components/examples/IncompatibleParametersError"
                  },
                  "OfferingIncompatibleDatesError": {
                    "$ref": "#/components/examples/OfferingIncompatibleDatesError"
                  },
                  "MissingInfoError": {
                    "$ref": "#/components/examples/MissingInfoError"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/offerings/summary": {
      "get": {
        "tags": [
          "Offerings"
        ],
        "summary": "Offerings summary",
        "description": "Responds with a summary of all offerings for your organisation.",
        "parameters": [
          {
            "name": "$top",
            "description": "Returns only the first n results.",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "50"
            }
          },
          {
            "name": "$orderby",
            "description": "Sorts the results.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "description": "Filters the results, based on a Boolean condition.",
            "in": "query",
            "allowReserved": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "all offerings.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Offerings",
                  "items": {
                    "$ref": "#/components/schemas/PortfolioActivations"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "SchemaQueryError": {
                    "$ref": "#/components/examples/SchemaQueryError"
                  },
                  "ApiValidationError": {
                    "$ref": "#/components/examples/ApiValidationError"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          }
        }
      }
    },
    "/offerings/current": {
      "get": {
        "tags": [
          "Offerings"
        ],
        "summary": "Find active offerings",
        "description": "Responds with active offerings for your organisation.",
        "responses": {
          "200": {
            "description": "current offerings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Offerings",
                  "items": {
                    "$ref": "#/components/schemas/OfferingMetadataResponse"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          }
        }
      }
    },
    "/offerings/past": {
      "get": {
        "tags": [
          "Offerings"
        ],
        "summary": "Find past offerings",
        "description": "Responds with past offerings for your organisation.",
        "responses": {
          "200": {
            "description": "past offerings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Offerings",
                  "items": {
                    "$ref": "#/components/schemas/OfferingMetadataResponse"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          }
        }
      }
    },
    "/offerings/future": {
      "get": {
        "tags": [
          "Offerings"
        ],
        "summary": "Find scheduled offerings",
        "description": "Responds with scheduled offerings for your organisation. Scheduled offerings have a start date after today's date (inclusive).",
        "responses": {
          "200": {
            "description": "future offerings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Offerings",
                  "items": {
                    "$ref": "#/components/schemas/OfferingMetadataResponse"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          }
        }
      }
    },
    "/offerings/info/{textPattern}": {
      "get": {
        "tags": [
          "Offerings"
        ],
        "summary": "Find offerings where info field matches the specified textPattern",
        "description": "Find offerings where info field matches the specified text pattern.",
        "parameters": [
          {
            "name": "textPattern",
            "description": "Text pattern to search for (minimum of 3 characters length).",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Offerings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Offerings",
                  "items": {
                    "$ref": "#/components/schemas/PortfolioActivations"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "TextPatternError": {
                    "$ref": "#/components/examples/TextPatternError"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/offerings/{offeringId}": {
      "get": {
        "tags": [
          "Offerings"
        ],
        "summary": "Find offering by ID",
        "description": "Responds with an offering matching the offeringId.",
        "parameters": [
          {
            "$ref": "#/components/parameters/offeringId"
          }
        ],
        "responses": {
          "200": {
            "description": "offering",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingMetadataResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      },
      "patch": {
        "tags": [
          "Offerings"
        ],
        "summary": "Update offering",
        "description": "Updates the offering.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Offering"
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/offeringId"
          }
        ],
        "responses": {
          "200": {
            "description": "offering updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingMetadataResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "SchemaFormatError": {
                    "$ref": "#/components/examples/SchemaFormatError"
                  },
                  "SchemaTypeError": {
                    "$ref": "#/components/examples/SchemaTypeError"
                  },
                  "ObjectExistsError": {
                    "$ref": "#/components/examples/ObjectExistsError"
                  },
                  "IncompatibleParametersError": {
                    "$ref": "#/components/examples/IncompatibleParametersError"
                  },
                  "OfferingIncompatibleDatesError": {
                    "$ref": "#/components/examples/OfferingIncompatibleDatesError"
                  },
                  "MissingInfoError": {
                    "$ref": "#/components/examples/MissingInfoError"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/offerings/{offeringId}/badges": {
      "get": {
        "tags": [
          "Badges"
        ],
        "summary": "Find offering badges",
        "description": "Responds with the badge for an offering matching the offeringId.",
        "parameters": [
          {
            "$ref": "#/components/parameters/offeringId"
          }
        ],
        "responses": {
          "200": {
            "description": "badges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badge"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/offerings/{offeringId}/metadata/tags": {
      "put": {
        "tags": [
          "Offering metadata"
        ],
        "summary": "Update offering tags metadata",
        "description": "Updates the offering tags metadata.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/offeringId"
          }
        ],
        "responses": {
          "200": {
            "description": "offering updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingMetadataResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "SchemaTypeError": {
                    "$ref": "#/components/examples/SchemaTypeError"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/offerings/{offeringId}/metadata/category": {
      "put": {
        "tags": [
          "Offering metadata"
        ],
        "summary": "Update offering category metadata",
        "description": "Updates the offering category metadata.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "category": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/offeringId"
          }
        ],
        "responses": {
          "200": {
            "description": "offering updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingMetadataResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "SchemaTypeError": {
                    "$ref": "#/components/examples/SchemaTypeError"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/offerings/{offeringId}/metadata/topic": {
      "put": {
        "tags": [
          "Offering metadata"
        ],
        "summary": "Update offering topic metadata",
        "description": "Updates the offering topic metadata.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "topic": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/offeringId"
          }
        ],
        "responses": {
          "200": {
            "description": "offering updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingMetadataResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "SchemaTypeError": {
                    "$ref": "#/components/examples/SchemaTypeError"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/offerings/{offeringId}/metadata/level": {
      "put": {
        "tags": [
          "Offering metadata"
        ],
        "summary": "Update offering level metadata",
        "description": "Updates the offering level metadata.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "level": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/offeringId"
          }
        ],
        "responses": {
          "200": {
            "description": "offering updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingMetadataResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "SchemaTypeError": {
                    "$ref": "#/components/examples/SchemaTypeError"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/offerings/{offeringId}/assessments": {
      "get": {
        "tags": [
          "Assessment management"
        ],
        "summary": "Find offering's assessments",
        "description": "Responds with all assessments in an offering matching the offeringId.",
        "parameters": [
          {
            "$ref": "#/components/parameters/offeringId"
          }
        ],
        "responses": {
          "200": {
            "description": "offering's assessments",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Assessments",
                  "items": {
                    "$ref": "#/components/schemas/AssessmentResponse"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/offerings/{offeringId}/assessments/{assessmentId}": {
      "patch": {
        "tags": [
          "Assessment management"
        ],
        "summary": "Update assessment details",
        "description": "Updates the assessment details for a specified assessment in an offering.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Assessment"
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/offeringId"
          },
          {
            "name": "assessmentId",
            "description": "assessment's id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "assessment successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssessmentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "SchemaFormatError": {
                    "$ref": "#/components/examples/SchemaFormatError"
                  },
                  "SchemaMinLengthError": {
                    "$ref": "#/components/examples/SchemaMinLengthError"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/offerings/{offeringId}/assessments/{assessmentId}/{userEmail}": {
      "patch": {
        "tags": [
          "Assessment management"
        ],
        "summary": "Update the due dates for a learner's quiz attempt",
        "description": "Updates the due dates for a learner's quiz attempt specified by the assessmentId.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "dueDate": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/offeringId"
          },
          {
            "name": "assessmentId",
            "description": "assessment's id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          },
          {
            "name": "userEmail",
            "description": "user's email",
            "schema": {
              "type": "string",
              "format": "email"
            },
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated assessment due date."
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "SchemaFormatError": {
                    "$ref": "#/components/examples/SchemaFormatError"
                  },
                  "ObjectInvalidPropertyError": {
                    "$ref": "#/components/examples/ObjectInvalidPropertyError"
                  },
                  "InvalidParameterError": {
                    "$ref": "#/components/examples/InvalidParameterError"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/offerings/{offeringId}/assessments/{assessmentId}/documents/{documentId}": {
      "delete": {
        "tags": [
          "Assessment management"
        ],
        "summary": "Remove assessment document",
        "description": "Removes the assessment document file for a specified assessment in an offering.",
        "parameters": [
          {
            "$ref": "#/components/parameters/offeringId"
          },
          {
            "name": "assessmentId",
            "description": "assessment's id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          },
          {
            "name": "documentId",
            "description": "documents's id",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "assessment document successfully removed"
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/offerings/{offeringId}/learners/pending-submission": {
      "get": {
        "tags": [
          "Assessment management"
        ],
        "summary": "Find learners with assessments pending x days before due date within the specified offeringId",
        "description": "Responds with learners who have one or more assessments due x days before the due date, with each assessment that is due, where x = the number of days specified in the request. The default is 3 days.",
        "parameters": [
          {
            "$ref": "#/components/parameters/offeringId"
          },
          {
            "name": "days",
            "description": "days to assessment due date. Default is 3 days",
            "schema": {
              "type": "string"
            },
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "offering's learners",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Assessments",
                  "items": {
                    "$ref": "#/components/schemas/AssessmentPendingSubmission"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "SchemaTypeError": {
                    "$ref": "#/components/examples/SchemaTypeError"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/offerings/{offeringId}/activities/openresponse": {
      "get": {
        "tags": [
          "Assessment management"
        ],
        "summary": "Find offering's activities",
        "description": "Responds with the activities in a specific offering.",
        "parameters": [
          {
            "$ref": "#/components/parameters/offeringId"
          }
        ],
        "responses": {
          "200": {
            "description": "offering's learners",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Activities",
                  "items": {
                    "$ref": "#/components/schemas/OfferingActivitiesResponse"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/offerings/{offeringId}/users": {
      "get": {
        "tags": [
          "Offering learners"
        ],
        "summary": "Find offering's users",
        "description": "Responds with a list of users in the offering (facilitators, learners and markers.).",
        "parameters": [
          {
            "$ref": "#/components/parameters/offeringId"
          },
          {
            "name": "facilitators",
            "description": "If true, facilitators are included in the results.",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "true",
              "enum": [
                "true",
                "false"
              ]
            }
          },
          {
            "name": "learners",
            "description": "If true, learners are included in the results.",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "true",
              "enum": [
                "true",
                "false"
              ]
            }
          },
          {
            "name": "markers",
            "description": "If true, markers are included in the results.",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "true",
              "enum": [
                "true",
                "false"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "offering's users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "offering's users",
                  "items": {
                    "$ref": "#/components/schemas/OfferingUserResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "SchemaAllowedValuesError": {
                    "$ref": "#/components/examples/SchemaAllowedValuesError"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      },
      "post": {
        "tags": [
          "Offering learners"
        ],
        "summary": "Adds user to the offering",
        "description": "Adds one or more users to the offering.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "title": "users to be added to the offering.",
                "items": {
                  "$ref": "#/components/schemas/OfferingUser"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/offeringId"
          }
        ],
        "responses": {
          "201": {
            "description": "user successfully added to the offering",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OfferingUserAddResponse"
                  }
                }
              }
            }
          },
          "207": {
            "description": "Partially successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/OfferingUserAddResponse"
                      },
                      {
                        "$ref": "#/components/schemas/Error"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "SchemaRequiredError": {
                    "$ref": "#/components/examples/SchemaRequiredError"
                  },
                  "SchemaTypeError": {
                    "$ref": "#/components/examples/SchemaTypeError"
                  },
                  "SchemaEmailError": {
                    "$ref": "#/components/examples/SchemaEmailError"
                  },
                  "ApiValidationError": {
                    "$ref": "#/components/examples/ApiValidationError"
                  },
                  "ObjectExistsError": {
                    "$ref": "#/components/examples/ObjectExistsError"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/offerings/{offeringId}/users/{userEmail}": {
      "delete": {
        "tags": [
          "Offering learners"
        ],
        "summary": "Removes user from the offering",
        "description": "Removes a user from the offering.",
        "parameters": [
          {
            "$ref": "#/components/parameters/offeringId"
          },
          {
            "$ref": "#/components/parameters/userEmail"
          }
        ],
        "responses": {
          "204": {
            "description": "user successfully removed from the offering"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "SchemaTypeError": {
                    "$ref": "#/components/examples/SchemaTypeError"
                  },
                  "SchemaEmailError": {
                    "$ref": "#/components/examples/SchemaEmailError"
                  },
                  "ApiValidationError": {
                    "$ref": "#/components/examples/ApiValidationError"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/offerings/{offeringId}/users/{markerEmail}/marks": {
      "get": {
        "tags": [
          "Offering learners"
        ],
        "summary": "Find Learners marked by a coach",
        "description": "Responds with all learners marked by the specified coach.",
        "parameters": [
          {
            "$ref": "#/components/parameters/offeringId"
          },
          {
            "name": "markerEmail",
            "description": "marker's email",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "learners marked by the marker",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "learners marked by the marker",
                  "items": {
                    "$ref": "#/components/schemas/OfferingUser"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      },
      "post": {
        "tags": [
          "Offering learners"
        ],
        "summary": "Add learners to be marked by a coach",
        "description": "Adds an array of learners to be marked by the specified coach.",
        "requestBody": {
          "required": true,
          "description": "array of learners e-mails",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/offeringId"
          },
          {
            "name": "markerEmail",
            "description": "marker's email",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "learners marked by the marker",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "learners marked by the marker",
                  "items": {
                    "$ref": "#/components/schemas/OfferingUser"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "ObjectIsNotError": {
                    "$ref": "#/components/examples/ObjectIsNotError"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      },
      "delete": {
        "tags": [
          "Offering learners"
        ],
        "summary": "Remove learners from coach's marking list",
        "description": "Removes an array of learners from coach's marking list.",
        "requestBody": {
          "description": "array of learners e-mails",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/offeringId"
          },
          {
            "name": "markerEmail",
            "description": "marker's email",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "learners marked by the marker",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "learners marked by the marker",
                  "items": {
                    "$ref": "#/components/schemas/OfferingUser"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "ObjectIsNotError": {
                    "$ref": "#/components/examples/ObjectIsNotError"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/offerings/{offeringId}/users/{userEmail}/badges/award": {
      "post": {
        "tags": [
          "Badges"
        ],
        "summary": "Award badge",
        "description": "Awards a badge to a user in the offering.",
        "parameters": [
          {
            "$ref": "#/components/parameters/offeringId"
          },
          {
            "$ref": "#/components/parameters/userEmail"
          }
        ],
        "responses": {
          "201": {
            "description": "Awarded badge response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AwardedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "UserNotInOfferingError": {
                    "$ref": "#/components/examples/UserNotInOfferingError"
                  },
                  "MissingInfoError": {
                    "$ref": "#/components/examples/MissingInfoError"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/offerings/{offeringId}/users/{userEmail}/submissions/open-response": {
      "get": {
        "tags": [
          "Assessment management"
        ],
        "summary": "Find learner's open response assessment submissions",
        "description": "Responds with open response assessment submissions by a learner in an offering.",
        "parameters": [
          {
            "$ref": "#/components/parameters/offeringId"
          },
          {
            "$ref": "#/components/parameters/userEmail"
          }
        ],
        "responses": {
          "200": {
            "description": "user open response submission and mark details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "user's assignments",
                  "items": {
                    "$ref": "#/components/schemas/Assignments"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "SchemaEmailError": {
                    "$ref": "#/components/examples/SchemaEmailError"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/offerings/{offeringId}/users/{userEmail}/assessments/{assessmentId}": {
      "delete": {
        "tags": [
          "Assessment management"
        ],
        "summary": "Reset user's assessment to draft state",
        "description": "Resets the user's submitted assessment to a draft state.",
        "parameters": [
          {
            "$ref": "#/components/parameters/offeringId"
          },
          {
            "$ref": "#/components/parameters/userEmail"
          },
          {
            "$ref": "#/components/parameters/assessmentId"
          }
        ],
        "responses": {
          "204": {
            "description": "User's assessment successfully moved to draft state."
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "SchemaEmailError": {
                    "$ref": "#/components/examples/SchemaEmailError"
                  },
                  "ObjectInvalidPropertyError": {
                    "$ref": "#/components/examples/ObjectInvalidPropertyError"
                  },
                  "AssessmentNotSubmittedError": {
                    "$ref": "#/components/examples/AssessmentNotSubmittedError"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/org": {
      "get": {
        "tags": [
          "Organisation"
        ],
        "summary": "Gets the current organisation",
        "description": "Returns the current organisation info.",
        "responses": {
          "200": {
            "description": "organisation summary data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/users/{userEmail}": {
      "get": {
        "tags": [
          "Users in iQualify"
        ],
        "summary": "Find user by email",
        "description": "Responds with a user matching the specified email.",
        "parameters": [
          {
            "$ref": "#/components/parameters/userEmail"
          }
        ],
        "responses": {
          "200": {
            "description": "user data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "SchemaEmailError": {
                    "$ref": "#/components/examples/SchemaEmailError"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      },
      "patch": {
        "tags": [
          "Users in iQualify"
        ],
        "summary": "Update user",
        "description": "Updates the specified user by email.",
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/userEmail"
          }
        ],
        "responses": {
          "200": {
            "description": "user updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "SchemaEmailError": {
                    "$ref": "#/components/examples/SchemaEmailError"
                  },
                  "ObjectExistsError": {
                    "$ref": "#/components/examples/ObjectExistsError"
                  },
                  "SchemaFormatError": {
                    "$ref": "#/components/examples/SchemaFormatError"
                  },
                  "SchemaTypeError": {
                    "$ref": "#/components/examples/SchemaTypeError"
                  },
                  "SchemaMinLengthError": {
                    "$ref": "#/components/examples/SchemaMinLengthError"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/users/{userEmail}/suspend": {
      "put": {
        "tags": [
          "Users in iQualify"
        ],
        "summary": "Suspend user",
        "description": "Suspends the specified user's account.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SuspendedRequest"
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/userEmail"
          }
        ],
        "responses": {
          "204": {
            "description": "User suspended."
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "SchemaEmailError": {
                    "$ref": "#/components/examples/SchemaEmailError"
                  },
                  "ObjectExistsError": {
                    "$ref": "#/components/examples/ObjectExistsError"
                  },
                  "SchemaFormatError": {
                    "$ref": "#/components/examples/SchemaFormatError"
                  },
                  "SchemaTypeError": {
                    "$ref": "#/components/examples/SchemaTypeError"
                  },
                  "InvalidParameterError": {
                    "$ref": "#/components/examples/InvalidParameterError"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/users/{userEmail}/offerings": {
      "get": {
        "tags": [
          "Users in iQualify"
        ],
        "summary": "Find user's offerings",
        "description": "Responds with all offerings that the user in.",
        "parameters": [
          {
            "$ref": "#/components/parameters/userEmail"
          }
        ],
        "responses": {
          "200": {
            "description": "user's offerings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Offerings",
                  "items": {
                    "$ref": "#/components/schemas/OfferingMetadataResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "SchemaEmailError": {
                    "$ref": "#/components/examples/SchemaEmailError"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      },
      "post": {
        "tags": [
          "Users in iQualify"
        ],
        "summary": "Adds the user to the specified offerings as a learner",
        "description": "Adds a user to an array of offerings by offeringId.",
        "requestBody": {
          "description": "offering ids",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/userEmail"
          }
        ],
        "responses": {
          "200": {
            "description": "user's offerings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Offerings",
                  "items": {
                    "$ref": "#/components/schemas/OfferingMetadataResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "SchemaEmailError": {
                    "$ref": "#/components/examples/SchemaEmailError"
                  },
                  "MissingInfoError": {
                    "$ref": "#/components/examples/MissingInfoError"
                  },
                  "SchemaTypeError": {
                    "$ref": "#/components/examples/SchemaTypeError"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/users/{userEmail}/offerings/{offeringId}/progress": {
      "get": {
        "tags": [
          "Learner activity"
        ],
        "summary": "Find learner's progress in a specified offering",
        "description": "Responds with the learner's progress in a specified offering.",
        "parameters": [
          {
            "$ref": "#/components/parameters/userEmail"
          },
          {
            "$ref": "#/components/parameters/offeringId"
          }
        ],
        "responses": {
          "200": {
            "description": "user's offerings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "firstName": {
                      "type": "string"
                    },
                    "lastName": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "completion": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "SchemaEmailError": {
                    "$ref": "#/components/examples/SchemaEmailError"
                  },
                  "UserNotInOfferingError": {
                    "$ref": "#/components/examples/UserNotInOfferingError"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/users/{userEmail}/permissions/{permissionName}": {
      "post": {
        "tags": [
          "Users in iQualify"
        ],
        "summary": "Add permission to user",
        "description": "Adds additional permissions to the specified user.",
        "parameters": [
          {
            "$ref": "#/components/parameters/userEmail"
          },
          {
            "$ref": "#/components/parameters/permissionName"
          }
        ],
        "responses": {
          "200": {
            "description": "permission successfully added to user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "SchemaEmailError": {
                    "$ref": "#/components/examples/SchemaEmailError"
                  },
                  "MissingInfoError": {
                    "$ref": "#/components/examples/MissingInfoError"
                  },
                  "SchemaTypeError": {
                    "$ref": "#/components/examples/SchemaTypeError"
                  },
                  "SchemaAllowedValuesError": {
                    "$ref": "#/components/examples/SchemaAllowedValuesError"
                  },
                  "ObjectAlreadyIsError": {
                    "$ref": "#/components/examples/ObjectAlreadyIsError"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/users/all/progress": {
      "get": {
        "tags": [
          "Learner activity"
        ],
        "summary": "Find learner progress in all offerings",
        "description": "Responds with all learners' progress in all offerings.",
        "parameters": [
          {
            "name": "$top",
            "description": "Returns only the first n results.",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "50"
            }
          },
          {
            "name": "$orderby",
            "description": "Sorts the results.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "description": "Filters the results, based on a Boolean condition.",
            "in": "query",
            "allowReserved": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Learners progress",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "top": {
                      "type": "integer"
                    },
                    "data": {
                      "properties": {
                        "progress": {
                          "type": "array",
                          "title": "Learners",
                          "items": {
                            "$ref": "#/components/schemas/LearnerResponse"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "SchemaQueryError": {
                    "$ref": "#/components/examples/SchemaQueryError"
                  },
                  "ApiValidationError": {
                    "$ref": "#/components/examples/ApiValidationError"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          }
        }
      }
    },
    "/users/{userEmail}/progress": {
      "get": {
        "tags": [
          "Learner activity"
        ],
        "summary": "Find learner's progress in offerings",
        "description": "Responds with the specified learner's progress in all offerings.",
        "parameters": [
          {
            "$ref": "#/components/parameters/userEmail"
          }
        ],
        "responses": {
          "200": {
            "description": "Learner Progress",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LearnerResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "SchemaEmailError": {
                    "$ref": "#/components/examples/SchemaEmailError"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/users/{userEmail}/badges": {
      "get": {
        "tags": [
          "Badges"
        ],
        "summary": "Find user's badges",
        "description": "Responds with all badges that the specified user has been awarded.",
        "parameters": [
          {
            "$ref": "#/components/parameters/userEmail"
          }
        ],
        "responses": {
          "200": {
            "description": "user's badges",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Badges",
                  "items": {
                    "$ref": "#/components/schemas/UserBadge"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "SchemaEmailError": {
                    "$ref": "#/components/examples/SchemaEmailError"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/users/{userEmail}/transfer": {
      "patch": {
        "tags": [
          "Offering learners"
        ],
        "summary": "Transfer a user between offerings",
        "description": "Moves the user's access and progress from one offering to another.",
        "requestBody": {
          "description": "transfer_data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferRequest"
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/userEmail"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated user information"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "SchemaEmailError": {
                    "$ref": "#/components/examples/SchemaEmailError"
                  },
                  "ContentDoNotMatchError": {
                    "$ref": "#/components/examples/ContentDoNotMatchError"
                  },
                  "InvalidSourceAndTargetError": {
                    "$ref": "#/components/examples/InvalidSourceAndTargetError"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/users/{userEmail}/invite-email": {
      "post": {
        "tags": [
          "Users in iQualify"
        ],
        "summary": "Resend invitation email",
        "description": "Re-sends an invitation e-mail to the specified user.",
        "parameters": [
          {
            "$ref": "#/components/parameters/userEmail"
          }
        ],
        "responses": {
          "204": {
            "description": "successfully requested invitation e-mail sending"
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/users": {
      "post": {
        "tags": [
          "Users in iQualify"
        ],
        "summary": "Add new user",
        "description": "Creates a new user.",
        "requestBody": {
          "description": "user",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "user added",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "SchemaEmailError": {
                    "$ref": "#/components/examples/SchemaEmailError"
                  },
                  "ObjectExistsError": {
                    "$ref": "#/components/examples/ObjectExistsError"
                  },
                  "SchemaFormatError": {
                    "$ref": "#/components/examples/SchemaFormatError"
                  },
                  "SchemaTypeError": {
                    "$ref": "#/components/examples/SchemaTypeError"
                  },
                  "SchemaMinLengthError": {
                    "$ref": "#/components/examples/SchemaMinLengthError"
                  },
                  "UserSuspendedError": {
                    "$ref": "#/components/examples/UserSuspendedError"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/AccessDeniedError"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundError"
          }
        }
      }
    },
    "/offerings/{offeringId}/cover-image": {},
    "/offerings/{offeringId}/study-plan": {},
    "/offerings/{offeringId}/assessments/{assessmentId}/documents": {}
  },
  "components": {
    "securitySchemes": {
      "Authorization": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization"
      }
    },
    "parameters": {
      "evaluatorEmail": {
        "name": "evaluatorEmail",
        "description": "Evaluator's email",
        "schema": {
          "type": "string",
          "format": "email"
        },
        "in": "path",
        "required": true
      },
      "channelId": {
        "name": "channelId",
        "description": "channel's id",
        "schema": {
          "type": "string"
        },
        "in": "path",
        "required": true
      },
      "submissionId": {
        "name": "submissionId",
        "description": "submission id",
        "schema": {
          "type": "string"
        },
        "in": "path",
        "required": true
      },
      "taskId": {
        "name": "taskId",
        "description": "task id",
        "schema": {
          "type": "string"
        },
        "in": "path",
        "required": true
      },
      "rootContentId": {
        "name": "rootContentId",
        "description": "Protfolio root content id",
        "schema": {
          "type": "string"
        },
        "in": "path",
        "required": true
      },
      "externalCourseId": {
        "name": "externalCourseId",
        "description": "external course's id",
        "schema": {
          "type": "string"
        },
        "in": "path",
        "required": true
      },
      "offeringId": {
        "name": "offeringId",
        "description": "offering's id",
        "schema": {
          "type": "string"
        },
        "in": "path",
        "required": true
      },
      "sectionId": {
        "name": "sectionId",
        "description": "section's id",
        "schema": {
          "type": "string"
        },
        "in": "path",
        "required": true
      },
      "badgeId": {
        "name": "badgeId",
        "description": "badge's id",
        "schema": {
          "type": "string"
        },
        "in": "path",
        "required": true
      },
      "permissionName": {
        "name": "permissionName",
        "description": "permission name",
        "schema": {
          "type": "string",
          "enum": [
            "builder",
            "manager"
          ]
        },
        "in": "path",
        "required": true
      },
      "assessmentId": {
        "name": "assessmentId",
        "description": "assessment's id",
        "schema": {
          "type": "string"
        },
        "in": "path",
        "required": true
      },
      "userEmail": {
        "name": "userEmail",
        "description": "user's email",
        "schema": {
          "type": "string",
          "format": "email"
        },
        "in": "path",
        "required": true
      },
      "groupId": {
        "name": "groupId",
        "description": "Assessment group id",
        "schema": {
          "type": "string",
          "pattern": "^[0-9a-fA-F]{24}$"
        },
        "in": "path",
        "required": true
      }
    },
    "schemas": {
      "PortfolioMetadata": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "category": {
            "type": "string"
          },
          "topic": {
            "type": "string"
          },
          "level": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "OfferingMetadata": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "rootContentId": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "topic": {
            "type": "string"
          },
          "level": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "LearningOutcomes": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "UserMetadata": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "avatarUrl": {
            "type": "string"
          },
          "profile": {
            "$ref": "#/components/schemas/UserProfile"
          },
          "email": {
            "type": "string",
            "format": "email",
            "minLength": 1
          },
          "firstName": {
            "type": "string",
            "minLength": 1
          },
          "lastName": {
            "type": "string",
            "minLength": 1
          },
          "personId": {
            "type": "string",
            "minLength": 1
          },
          "lastAccessAt": {
            "type": "string",
            "format": "date-time"
          },
          "firstAccessAt": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "$ref": "#/components/schemas/UserMetadata"
          },
          "invite": {
            "$ref": "#/components/schemas/Invite"
          }
        }
      },
      "Invite": {
        "type": "object",
        "properties": {
          "url": {
            "description": "if sendInvite in request is false",
            "type": "string"
          }
        }
      },
      "UserProfileRequest": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string"
          }
        }
      },
      "UserProfile": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string"
          },
          "mobile": {
            "type": "string"
          }
        }
      },
      "User": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "firstName": {
            "type": "string",
            "minLength": 1
          },
          "lastName": {
            "type": "string",
            "minLength": 1
          },
          "email": {
            "type": "string",
            "minLength": 1,
            "format": "email"
          },
          "personId": {
            "type": "string",
            "minLength": 1
          },
          "profile": {
            "$ref": "#/components/schemas/UserProfileRequest"
          },
          "metadata": {
            "$ref": "#/components/schemas/UserMetadata"
          },
          "sendInvite": {
            "type": "boolean",
            "default": true
          }
        }
      },
      "Document": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "filename": {
            "type": "string"
          },
          "mimetype": {
            "type": "string"
          },
          "size": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "OfferingMetadataResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "minLength": 1
          },
          "description": {
            "type": "string",
            "minLength": 1
          },
          "overview": {
            "description": "content can contain html",
            "type": "string",
            "minLength": 1
          },
          "contentId": {
            "type": "string",
            "minLength": 1
          },
          "useRelativeDates": {
            "type": "boolean",
            "default": false
          },
          "start": {
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "format": "date-time"
          },
          "coverImageUrl": {
            "type": "string",
            "minLength": 1
          },
          "trailerVideoUrl": {
            "type": "string",
            "minLength": 1
          },
          "isReadonly": {
            "type": "boolean"
          },
          "studyPlan": {
            "$ref": "#/components/schemas/StudyPlan"
          },
          "hasEarlyCloseOff": {
            "type": "boolean"
          },
          "earlyCloseOffDate": {
            "type": "string",
            "format": "date-time"
          },
          "enrollmentLimit": {
            "type": "number"
          },
          "price": {
            "type": "number"
          },
          "currency": {
            "type": "string"
          },
          "allowEnrollment": {
            "type": "boolean"
          },
          "settings": {
            "$ref": "#/components/schemas/OfferingSettings"
          },
          "tasksEnabled": {
            "type": "boolean"
          },
          "metadata": {
            "$ref": "#/components/schemas/OfferingMetadata"
          }
        }
      },
      "OfferingResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "minLength": 1
          },
          "description": {
            "type": "string",
            "minLength": 1
          },
          "contentId": {
            "type": "string",
            "minLength": 1
          },
          "start": {
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "format": "date-time"
          },
          "coverImageUrl": {
            "type": "string",
            "minLength": 1
          },
          "trailerVideoUrl": {
            "type": "string",
            "minLength": 1
          },
          "isReadonly": {
            "type": "boolean"
          },
          "hasEarlyCloseOff": {
            "type": "boolean"
          },
          "earlyCloseOffDate": {
            "type": "string",
            "format": "date-time"
          },
          "enrollmentLimit": {
            "type": "number"
          },
          "price": {
            "type": "number"
          },
          "currency": {
            "type": "string"
          },
          "tasksEnabled": {
            "type": "boolean"
          }
        }
      },
      "AwardedResponse": {
        "type": "object",
        "properties": {
          "awarded": {
            "type": "boolean"
          },
          "badgeId": {
            "type": "string"
          },
          "badgeUrl": {
            "type": "string"
          }
        }
      },
      "RevokedResponse": {
        "type": "object",
        "properties": {
          "revoked": {
            "type": "boolean"
          },
          "badgeId": {
            "type": "string"
          },
          "badgeUrl": {
            "type": "string"
          },
          "revocationReason": {
            "type": "string"
          }
        }
      },
      "ActivationResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "end": {
            "type": "string"
          },
          "start": {
            "type": "string"
          },
          "learnersCount": {
            "description": "number of learners in the offering, excluding facilitators and coaches",
            "type": "string"
          },
          "info": {
            "type": "string"
          },
          "metadata": {
            "type": "object",
            "properties": {
              "rootContentId": {
                "type": "string"
              }
            }
          }
        }
      },
      "UnitReactionsAnalyticsResponse": {
        "type": "object",
        "properties": {
          "pageId": {
            "type": "boolean"
          },
          "feedback": {
            "$ref": "#/components/schemas/UnitReactionsFeedback"
          }
        }
      },
      "UnitReactionsFeedback": {
        "type": "object",
        "properties": {
          "thumbs-up": {
            "type": "number"
          },
          "thumbs-down": {
            "type": "number"
          }
        }
      },
      "SocialNotesResponse": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "personId": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "pageId": {
            "type": "string"
          },
          "social-note-content": {
            "type": "string"
          },
          "social-note-paragraphId": {
            "type": "string"
          }
        }
      },
      "OfferingActivitiesResponse": {
        "type": "object",
        "properties": {
          "activityId": {
            "type": "string"
          },
          "time": {
            "description": "expected minutes to complete",
            "type": "number"
          },
          "title": {
            "type": "string"
          }
        }
      },
      "ActivityAttemptOpenResponse": {
        "type": "object",
        "properties": {
          "offeringId": {
            "type": "string"
          },
          "learnerEmail": {
            "type": "string"
          },
          "responseText": {
            "type": "string"
          },
          "activityId": {
            "type": "string"
          },
          "activityType": {
            "type": "string"
          },
          "uploadedFiles": {
            "$ref": "#/components/schemas/ActivityAttemptOpenResponseFiles"
          },
          "feedback": {
            "$ref": "#/components/schemas/ActivityAttemptOpenResponseFeedback"
          }
        }
      },
      "ChannelResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string",
            "minLength": 1
          },
          "isBroadcastOnly": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "ChannelRequired": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "minLength": 1
          },
          "isBroadcastOnly": {
            "type": "boolean",
            "default": false
          }
        },
        "required": [
          "title"
        ]
      },
      "ActivityAttemptOpenResponseFiles": {
        "type": "object",
        "properties": {
          "filename": {
            "type": "string"
          },
          "mimetype": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "size": {
            "type": "string"
          }
        }
      },
      "ActivityAttemptOpenResponseFeedback": {
        "type": "object",
        "properties": {
          "facilitatorEmail": {
            "type": "string"
          },
          "text": {
            "type": "string"
          }
        }
      },
      "MarkFeedback": {
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "feedback": {
            "type": "string"
          },
          "feedbackBy": {
            "type": "string"
          },
          "mark": {
            "type": "string"
          },
          "markerId": {
            "type": "string"
          }
        }
      },
      "Mark": {
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "feedback": {
            "type": "string"
          },
          "mark": {
            "type": "string"
          },
          "markedBy": {
            "type": "string"
          },
          "markerId": {
            "type": "string"
          },
          "markFeedback": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MarkFeedback"
            }
          }
        }
      },
      "LearnerOfferingDates": {
        "type": "object",
        "properties": {
          "start": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "BadgeExpiry": {
        "type": "object",
        "properties": {
          "expires": {
            "type": "boolean"
          },
          "expiryType": {
            "type": "string",
            "enum": [
              "date",
              "timeframe"
            ]
          },
          "expirationDate": {
            "type": "string",
            "format": "date-time"
          },
          "timeframeUnit": {
            "type": "string",
            "enum": [
              "days",
              "months",
              "years"
            ]
          },
          "timeframeAmount": {
            "type": "number"
          }
        }
      },
      "OfferingSettings": {
        "type": "object",
        "properties": {
          "aggregateProgressScore": {
            "type": "boolean"
          },
          "allowSocialFeatures": {
            "type": "boolean"
          },
          "allowTasks": {
            "type": "boolean"
          },
          "enablePrivateSupportChannel": {
            "type": "boolean"
          },
          "strictStartDate": {
            "type": "boolean"
          }
        }
      },
      "StudyPlan": {
        "type": "object",
        "properties": {
          "filename": {
            "type": "string"
          },
          "mimetype": {
            "type": "string"
          },
          "size": {
            "type": "number"
          },
          "url": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "details": {
                "type": "string"
              }
            }
          }
        }
      },
      "PortfolioLicenseResponse": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string"
          },
          "licenses": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PulseSpatialOption": {
        "type": "object",
        "title": "SpatialOption",
        "properties": {
          "option": {
            "type": "string"
          },
          "value": {
            "type": "number",
            "format": "float"
          }
        }
      },
      "PulseMCQOption": {
        "type": "object",
        "title": "MultiChoiceOption",
        "properties": {
          "option": {
            "type": "string"
          },
          "value": {
            "type": "boolean"
          }
        }
      },
      "PulseAnswer": {
        "type": "object",
        "title": "Answer",
        "properties": {
          "textAnswer": {
            "type": "string"
          },
          "spatialAnswer": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PulseSpatialOption"
            }
          },
          "multiChoiceAnswer": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PulseMCQOption"
            }
          }
        }
      },
      "PulseResponse": {
        "type": "object",
        "title": "Pulse",
        "properties": {
          "pulseBaseId": {
            "type": "string"
          },
          "pulseInstanceId": {
            "type": "string"
          },
          "pulseRunStart": {
            "type": "string",
            "format": "date-time"
          },
          "pulseRunDurationMinutes": {
            "type": "integer"
          },
          "pulseType": {
            "type": "string"
          },
          "pulseQuestion": {
            "type": "string"
          },
          "learnerId": {
            "type": "string"
          },
          "learnerFirstName": {
            "type": "string"
          },
          "learnerLastName": {
            "type": "string"
          },
          "response": {
            "$ref": "#/components/schemas/PulseAnswer"
          },
          "responseTime": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "AssignmentMarkResponse": {
        "type": "object",
        "title": "AssignmentMark",
        "properties": {
          "courseName": {
            "type": "string"
          },
          "assessmentId": {
            "type": "string"
          },
          "assessmentItemName": {
            "type": "string"
          },
          "assessmentItemDetails": {
            "type": "string"
          },
          "submissionDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "mark": {
            "type": "string"
          },
          "markedBy": {
            "type": "string"
          },
          "markFeedback": {
            "type": "string"
          },
          "markedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "markedByFacilitator": {
            "type": "boolean"
          },
          "markedByEvaluator": {
            "type": "boolean"
          },
          "markedByMarker": {
            "type": "boolean"
          },
          "learnerPersonId": {
            "type": "string"
          },
          "learnerEmail": {
            "type": "string"
          },
          "learnerFirstName": {
            "type": "string"
          },
          "learnerLastName": {
            "type": "string"
          }
        }
      },
      "QuizMarkResponse": {
        "type": "object",
        "title": "QuizMark",
        "properties": {
          "quizId": {
            "type": "string"
          },
          "quizTitle": {
            "type": "string"
          },
          "learnerEmail": {
            "type": "string"
          },
          "learnerPersonId": {
            "type": "string"
          },
          "learnerFullname": {
            "type": "string"
          },
          "mark": {
            "type": "string"
          },
          "attempts": {
            "type": "integer",
            "format": "int32"
          },
          "lastAttemptAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "LearnerProgressResponse": {
        "type": "object",
        "title": "LearnerProgress",
        "properties": {
          "courseId": {
            "type": "string"
          },
          "personId": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "lastLoggedInAt": {
            "type": "string",
            "format": "date-time"
          },
          "completion": {
            "type": "string"
          }
        }
      },
      "SubmissionMarkResponse": {
        "title": "SubmissionMark",
        "properties": {
          "courseName": {
            "type": "string"
          },
          "assessmentId": {
            "type": "string"
          },
          "assessmentItemName": {
            "type": "string"
          },
          "assessmentItemDetails": {
            "type": "string"
          },
          "learnerPersonId": {
            "type": "string"
          },
          "learnerEmail": {
            "type": "string"
          },
          "learnerFirstName": {
            "type": "string"
          },
          "learnerLastName": {
            "type": "string"
          },
          "submissionDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string"
          },
          "html": {
            "type": "string"
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Document"
            }
          },
          "marks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mark"
            }
          }
        }
      },
      "AssessmentGroupRequired": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "minLength": 1
          }
        },
        "required": [
          "title"
        ]
      },
      "AssessmentGroupResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string",
            "minLength": 1
          },
          "createdAt": {
            "type": "string"
          }
        }
      },
      "DocumentResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "mimetype": {
            "type": "string"
          },
          "size": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "Channel": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "minLength": 1
          },
          "isBroadcastOnly": {
            "type": "boolean"
          },
          "privateSupport": {
            "type": "boolean"
          },
          "groupDiscussion": {
            "type": "boolean"
          },
          "group": {
            "type": "object",
            "properties": {
              "autoAssign": {
                "type": "boolean"
              }
            }
          }
        }
      },
      "Moderator": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "avatarUrl": {
            "type": "string"
          }
        }
      },
      "Moderation": {
        "type": "object",
        "properties": {
          "moderator": {
            "$ref": "#/components/schemas/Moderator"
          },
          "isMuted": {
            "type": "boolean"
          },
          "reason": {
            "type": "string"
          }
        }
      },
      "Comment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "postId": {
            "type": "string"
          },
          "isFacilitatorPost": {
            "type": "boolean"
          },
          "email": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "parentCommentId": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "moderation": {
            "$ref": "#/components/schemas/Moderation"
          }
        }
      },
      "httpPost": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "isFacilitatorPost": {
            "type": "boolean"
          },
          "email": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "moderation": {
            "$ref": "#/components/schemas/Moderation"
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentResponse"
            }
          }
        }
      },
      "CourseMetaResponse": {
        "type": "object",
        "title": "Course",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "coverImageUrl": {
            "type": "string"
          },
          "tasksEnabled": {
            "type": "boolean"
          },
          "metadata": {
            "properties": {
              "rootContentId": {
                "type": "string"
              },
              "category": {
                "type": "string"
              },
              "topic": {
                "type": "string"
              },
              "level": {
                "type": "string"
              },
              "tags": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "learning_outcomes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LearningOutcomes"
                }
              }
            }
          }
        }
      },
      "CourseResponse": {
        "type": "object",
        "title": "Course",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "coverImageUrl": {
            "type": "string"
          },
          "metadata": {
            "properties": {
              "learning_outcomes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LearningOutcomes"
                }
              }
            }
          }
        }
      },
      "UserPermission": {
        "title": "User",
        "properties": {
          "email": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "isBuilder": {
            "type": "boolean"
          },
          "isReviewer": {
            "type": "boolean"
          }
        }
      },
      "Criteria": {
        "type": "object",
        "properties": {
          "hasCompletedCourse": {
            "type": "boolean",
            "default": true
          },
          "hasPassedMandatoryAssessedQuizzes": {
            "type": "boolean",
            "default": true
          }
        }
      },
      "ThemeResponse": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "string"
          },
          "numberOfQuestions": {
            "type": "string"
          }
        }
      },
      "AssessmentPendingSubmission": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "offeringId": {
            "type": "string"
          },
          "offeringName": {
            "type": "string"
          },
          "pid": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "points": {
            "type": "string"
          },
          "hidden": {
            "type": "boolean",
            "default": false
          },
          "filename": {
            "type": "string"
          },
          "maxAttempts": {
            "type": "integer",
            "format": "int32"
          },
          "durationMinutes": {
            "type": "integer",
            "format": "int32"
          },
          "totalQuestions": {
            "type": "integer",
            "format": "int32"
          },
          "totalThemes": {
            "type": "integer",
            "format": "int32"
          },
          "documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Document"
            }
          },
          "themes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ThemeResponse"
            }
          },
          "markType": {
            "type": "string",
            "minLength": 1
          },
          "markNumber": {
            "type": "string",
            "minLength": 1
          },
          "openDate": {
            "type": "string",
            "format": "date-time"
          },
          "dueDate": {
            "type": "string",
            "format": "date-time"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          }
        }
      },
      "Assessment": {
        "type": "object",
        "properties": {
          "markType": {
            "type": "string",
            "minLength": 1
          },
          "markNumber": {
            "type": "string",
            "minLength": 1
          },
          "openDate": {
            "type": "string",
            "format": "date-time"
          },
          "dueDate": {
            "type": "string",
            "format": "date-time"
          },
          "content": {
            "type": "string"
          }
        }
      },
      "PortfolioActivations": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "contentId": {
            "type": "string"
          },
          "start": {
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "info": {
            "type": "string"
          },
          "learnersCount": {
            "description": "number of learners in the offering, excluding facilitators and coaches",
            "type": "number"
          },
          "metadata": {
            "type": "object",
            "properties": {
              "rootContentId": {
                "type": "string"
              }
            }
          }
        }
      },
      "AssessmentResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "pid": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "points": {
            "type": "string"
          },
          "hidden": {
            "type": "boolean",
            "default": false
          },
          "filename": {
            "type": "string"
          },
          "maxAttempts": {
            "type": "integer",
            "format": "int32"
          },
          "durationMinutes": {
            "type": "integer",
            "format": "int32"
          },
          "totalQuestions": {
            "type": "integer",
            "format": "int32"
          },
          "totalThemes": {
            "type": "integer",
            "format": "int32"
          },
          "documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Document"
            }
          },
          "themes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ThemeResponse"
            }
          },
          "markType": {
            "type": "string",
            "minLength": 1
          },
          "markNumber": {
            "type": "string",
            "minLength": 1
          },
          "openDate": {
            "type": "string",
            "format": "date-time"
          },
          "dueDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Offering": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "minLength": 1
          },
          "overview": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "minLength": 1
          },
          "contentId": {
            "type": "string",
            "minLength": 1,
            "description": "The identifier for a specific version of a course"
          },
          "rootContentId": {
            "type": "string",
            "description": "Every time a course is republished it is assigned a new contentId. rootContentId is the first original contentId associated with a course."
          },
          "start": {
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "format": "date-time"
          },
          "useRelativeDates": {
            "type": "boolean"
          },
          "trailerVideoUrl": {
            "type": "string",
            "minLength": 1
          },
          "isReadonly": {
            "type": "boolean"
          },
          "hasEarlyCloseOff": {
            "type": "boolean"
          },
          "earlyCloseOffDate": {
            "type": "string",
            "format": "date-time"
          },
          "badge": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "title": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "requiresApproval": {
                "type": "boolean"
              },
              "badgeExpiry": {
                "$ref": "#/components/schemas/BadgeExpiry"
              }
            }
          },
          "metadata": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "category": {
                "type": "string"
              },
              "topic": {
                "type": "string"
              },
              "level": {
                "type": "string"
              },
              "tags": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "OpenBadgeClass": {
        "type": "object",
        "properties": {
          "criteria": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "narrative": {
                "type": "string"
              }
            }
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "image": {
            "type": "string"
          },
          "issuer": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "Badge": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "criterias": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Criteria"
              }
            ]
          },
          "badgeExpiry": {
            "$ref": "#/components/schemas/BadgeExpiry"
          },
          "badgeUrl": {
            "type": "string"
          },
          "openBadge": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenBadgeClass"
              }
            ]
          }
        }
      },
      "OfferingRequired": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "minLength": 1
          },
          "description": {
            "type": "string",
            "minLength": 1
          },
          "contentId": {
            "type": "string",
            "minLength": 1,
            "description": "The identifier for a specific version of a course"
          },
          "rootContentId": {
            "type": "string",
            "description": "Every time a course is republished it's assigned a new contentId. rootContentId is the first original contentId associated with a course."
          },
          "start": {
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "format": "date-time"
          },
          "useRelativeDates": {
            "type": "boolean",
            "default": false
          },
          "trailerVideoUrl": {
            "type": "string",
            "minLength": 1
          },
          "isReadonly": {
            "type": "boolean"
          },
          "hasEarlyCloseOff": {
            "type": "boolean"
          },
          "earlyCloseOffDate": {
            "type": "string",
            "format": "date-time"
          },
          "createDefaultChannels": {
            "type": "boolean",
            "default": false
          },
          "badge": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "title": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "requiresApproval": {
                "type": "boolean"
              },
              "badgeExpiry": {
                "$ref": "#/components/schemas/BadgeExpiry"
              }
            }
          },
          "hiddenPageIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 1,
            "description": "An array of strings representing hidden page ids."
          },
          "metadata": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "category": {
                "type": "string"
              },
              "topic": {
                "type": "string"
              },
              "level": {
                "type": "string"
              },
              "tags": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "settings": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "allowSocialFeatures": {
                "type": "boolean",
                "default": true
              },
              "enablePrivateSupportChannel": {
                "type": "boolean",
                "default": true
              }
            }
          }
        },
        "required": [
          "start"
        ]
      },
      "OfferingUser": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "firstName": {
            "type": "string",
            "minLength": 1
          },
          "lastName": {
            "type": "string",
            "minLength": 1
          },
          "email": {
            "type": "string",
            "minLength": 1
          },
          "personId": {
            "type": "string",
            "minLength": 1
          },
          "metadata": {
            "$ref": "#/components/schemas/UserMetadata"
          },
          "sendInvite": {
            "type": "boolean",
            "default": true
          },
          "profile": {
            "$ref": "#/components/schemas/UserProfileRequest"
          },
          "isMarker": {
            "type": "boolean",
            "default": false
          },
          "isFacilitator": {
            "type": "boolean",
            "default": false
          },
          "isReadonly": {
            "type": "boolean",
            "default": false
          },
          "sendNotificationEmail": {
            "type": "boolean",
            "default": true
          }
        },
        "required": [
          "email"
        ]
      },
      "OfferingUserAddResponse": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "minLength": 1
          },
          "lastName": {
            "type": "string",
            "minLength": 1
          },
          "email": {
            "type": "string",
            "minLength": 1
          },
          "personId": {
            "type": "string",
            "minLength": 1
          },
          "metadata": {
            "$ref": "#/components/schemas/UserMetadata"
          },
          "sendInvite": {
            "type": "boolean",
            "default": true
          },
          "profile": {
            "$ref": "#/components/schemas/UserProfileRequest"
          },
          "isMarker": {
            "type": "boolean",
            "default": false
          },
          "isFacilitator": {
            "type": "boolean",
            "default": false
          },
          "isReadonly": {
            "type": "boolean",
            "default": false
          },
          "sendNotificationEmail": {
            "type": "boolean",
            "default": true
          },
          "invite": {
            "$ref": "#/components/schemas/Invite"
          }
        }
      },
      "OfferingUserResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "avatarUrl": {
            "type": "string"
          },
          "profile": {
            "$ref": "#/components/schemas/UserProfile"
          },
          "email": {
            "type": "string",
            "format": "email",
            "minLength": 1
          },
          "firstName": {
            "type": "string",
            "minLength": 1
          },
          "lastName": {
            "type": "string",
            "minLength": 1
          },
          "personId": {
            "type": "string",
            "minLength": 1
          },
          "isMarker": {
            "type": "boolean",
            "default": false
          },
          "isFacilitator": {
            "type": "boolean",
            "default": false
          },
          "isReadonly": {
            "type": "boolean",
            "default": false
          },
          "marks": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "markedBy": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "evaluates": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "evaluatedBy": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Assignments": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "submittedAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Document"
            }
          },
          "marks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mark"
            }
          }
        }
      },
      "OrgResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "OrgRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "LearnerResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "personId": {
            "type": "string"
          },
          "offerings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferingProgressRow"
            }
          }
        }
      },
      "OfferingProgressRow": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "completion": {
            "type": "string"
          }
        }
      },
      "SuspendedRequest": {
        "type": "object",
        "properties": {
          "suspended": {
            "type": "boolean"
          }
        }
      },
      "TransferRequest": {
        "type": "object",
        "properties": {
          "fromOfferingId": {
            "type": "string"
          },
          "toOfferingId": {
            "type": "string"
          },
          "sendInvite": {
            "type": "boolean"
          }
        }
      },
      "UserBadge": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "criterias": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Criteria"
              }
            ]
          },
          "badgeUrl": {
            "type": "string"
          },
          "openBadge": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenBadgeClass"
              }
            ]
          },
          "badgeExpiry": {
            "type": "object",
            "properties": {
              "expires": {
                "type": "boolean"
              },
              "expirationDate": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "offeringId": {
            "type": "string"
          },
          "awardedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      }
    },
    "examples": {
      "InvalidContentError": {
        "summary": "You need to specify content_id or rootContentId.",
        "value": {
          "name": "InvalidContentError",
          "details": "You need to specify content_id or rootContentId."
        }
      },
      "SchemaQueryError": {
        "summary": "Unknown query parameter",
        "value": {
          "name": "SchemaValidationError",
          "details": "[PARAMETER_NAME] PARAMETER_VALUE Unknown query parameter 'example'"
        }
      },
      "SchemaMediaError": {
        "summary": "unsupported media type in the content-type header",
        "value": {
          "name": "SchemaValidationError",
          "details": "unsupported media type application/json"
        }
      },
      "SchemaAllowedValuesError": {
        "summary": "should be equal to one of the allowed values",
        "value": {
          "name": "SchemaValidationError",
          "details": "[PARAMETER_NAME] PARAMETER_VALUE should be equal to one of the allowed values a, b"
        }
      },
      "SchemaRequiredError": {
        "summary": "should have a specific required property",
        "value": {
          "name": "SchemaValidationError",
          "details": "should have required property 'example'"
        }
      },
      "SchemaFormatError": {
        "summary": "should match specific format",
        "value": {
          "name": "SchemaValidationError",
          "details": "PARAMETER_NAME PARAMETER_VALUE should match format \"example\""
        }
      },
      "SchemaTypeError": {
        "summary": "should be of a specific type",
        "value": {
          "name": "SchemaValidationError",
          "details": "[PARAMETER_NAME] PARAMETER_VALUE should be string"
        }
      },
      "SchemaMinLengthError": {
        "summary": "should be longer than the minimum required",
        "value": {
          "name": "SchemaValidationError",
          "details": "[PARAMETER_NAME] PARAMETER_VALUE should NOT be shorter than 3 characters"
        }
      },
      "SchemaAdditionalPropertiesError": {
        "summary": "The request body should not have extra properties",
        "value": {
          "name": "SchemaValidationError",
          "details": "should NOT have additional properties"
        }
      },
      "SchemaEmailError": {
        "summary": "Parameter should be a valid e-mail",
        "value": {
          "name": "SchemaValidationError",
          "details": "PARAMETER_NAME PARAMETER_VALUE should match format \"email\"."
        }
      },
      "ObjectNotFoundError": {
        "summary": "a referenced object is not found",
        "value": {
          "name": "ObjectNotFoundError",
          "details": "The content badcontentId was not found."
        }
      },
      "ObjectExistsError": {
        "summary": "the specified source object already exists in the target object",
        "value": {
          "name": "ObjectExistsError",
          "details": "The badge already exists in the offering OFFERING ID."
        }
      },
      "InvalidParameterError": {
        "summary": "the specified source object already exists in the target object",
        "value": {
          "name": "InvalidParameterError",
          "details": "The specified parameter file.mimetype (image mimetype) has an invalid value \\'text/plain\\'."
        }
      },
      "ObjectInvalidPropertyError": {
        "summary": "the specified source object already exists in the target object",
        "value": {
          "name": "ObjectInvalidPropertyError",
          "details": "The A property B is invalid. Expected value: C"
        }
      },
      "ObjectIsNotError": {
        "summary": "the specified object is not of the specified type",
        "value": {
          "name": "ObjectIsNotError",
          "details": "The user john.doe@test.te is not a builder."
        }
      },
      "AssessmentNotSubmittedError": {
        "summary": "the specified user has not submitted an assessment",
        "value": {
          "name": "AssessmentNotSubmittedError",
          "details": "The user alex.doe@test.te has not submitted assessment as1."
        }
      },
      "ObjectAlreadyIsError": {
        "summary": "The specified object already has a property",
        "value": {
          "name": "ObjectAlreadyIsError",
          "details": "The user john.doe@test.te is already a manager."
        }
      },
      "ContentDoNotMatchError": {
        "summary": "The specified content needs to be the same in order to perform the requested operation.",
        "value": {
          "name": "ContentDoNotMatchError",
          "details": "contentId needs to be the same in order to perform the requested operation."
        }
      },
      "MultipleObjectsError": {
        "summary": "The specified object has multiple properties of which should have only one",
        "value": {
          "name": "ObjectIsNotError",
          "details": "There are multiple permission with value true (isBuilder | isReviewer)."
        }
      },
      "TextPatternError": {
        "summary": "Text pattern must be a minimum of n characters in length.",
        "value": {
          "name": "TextPatternError",
          "details": "Text pattern must be a minimum of 3 characters in length."
        }
      },
      "InvalidSourceAndTargetError": {
        "summary": "Source and target offerings cannot be the same.",
        "value": {
          "name": "InvalidSourceAndTargetError",
          "details": "Source and target offerings cannot be the same."
        }
      },
      "ApiValidationError": {
        "summary": "API validation error",
        "value": {
          "name": "ApiValidationError",
          "details": "invalid $filter parameter."
        }
      },
      "InvalidGroupChannelError": {
        "summary": "Specified channel is not a group discussion channel.",
        "value": {
          "name": "InvalidGroupChannelError",
          "details": "Channel channel1 is not a group discussion channel."
        }
      },
      "UserNotInOfferingError": {
        "summary": "Specified user is not in the offering.",
        "value": {
          "name": "UserNotInOfferingError",
          "details": "The user john.doe@test.te is not a learner in the offering -MEF8kFyURUr6_CZ4IXD."
        }
      },
      "UserNotInChannelError": {
        "summary": "Specified user is not in the channel.",
        "value": {
          "name": "UserNotInChannelError",
          "details": "The user john.doe@test.te is not a learner in the channel -MEF8kFyURUr6_CZ4IXD."
        }
      },
      "MissingInfoError": {
        "summary": "Specified info is missing.",
        "value": {
          "name": "MissingInfoError",
          "details": "The field 'Offering Badge' is missing or invalid."
        }
      },
      "UserSuspendedError": {
        "summary": "The user has been suspended.",
        "value": {
          "name": "UserSuspendedError",
          "details": "The user (john.doe@test.te) has been suspended."
        }
      },
      "ValidationError": {
        "summary": "The specified parameter dueDate has an invalid value",
        "value": {
          "name": "ValidationError",
          "details": "The specified parameter dueDate has an invalid value \"Thu Apr 16 2020 19:15:00 GMT-0300 is before the openDate\"."
        }
      },
      "OfferingIncompatibleDatesError": {
        "summary": "The specified offering has relative dates enabled. Absolute task dates can not be set.",
        "value": {
          "name": "OfferingIncompatibleDatesError",
          "details": "The specified offering has relative dates enabled. Absolute task dates can not be set."
        }
      },
      "ValidationAllowTasksError": {
        "summary": "The specified parameter offeringId does not have tasks enabled",
        "value": {
          "name": "ValidationError",
          "details": "The specified parameter offeringId has an invalid value 'The specified parameter offeringId does not have tasks enabled'."
        }
      },
      "ValidationTaskNotInOfferingError": {
        "summary": "The specified parameter taskId is not in the offering",
        "value": {
          "name": "ValidationError",
          "details": "The specified parameter taskId has an invalid value 'The specified parameter taskId is not in the offering'."
        }
      },
      "InvalidObjectIdError": {
        "summary": "The user has been suspended.",
        "value": {
          "name": "InvalidObjectIdError",
          "details": "The specified task id has an invalid value '1111'."
        }
      },
      "UserDoesNotHaveBadgeError": {
        "summary": "The specified user does not have a badge in the specified offering",
        "value": {
          "name": "UserDoesNotHaveBadgeError",
          "details": "The user A has not been awarded a badge in the offering B."
        }
      },
      "IncompatibleParametersError": {
        "summary": "Two properties in the request contains incompatible values with each other",
        "value": {
          "name": "IncompatibleParametersError",
          "details": "A cannot be B when C is D"
        }
      },
      "InvalidChannelPropertiesError": {
        "summary": "A channel can only have one of these properties set as true: groupDiscussion, isBroadcastOnly or privateSupport",
        "value": {
          "name": "InvalidChannelPropertiesError",
          "details": "A channel can only have one of these properties set as true: groupDiscussion, isBroadcastOnly or privateSupport"
        }
      }
    },
    "responses": {
      "RouteNotFoundError": {
        "description": "Invalid path.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "NotAuthorizedError": {
        "description": "No authorization token was found.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "name": "NotAuthorizedError",
              "details": "No authorization token was found."
            }
          }
        }
      },
      "AccessDeniedError": {
        "description": "You are not allowed to access this resource.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "name": "AccessDeniedError",
              "details": "You are not allowed to access this resource"
            }
          }
        }
      },
      "TooManyRequestsError": {
        "description": "Request rate is too large.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "InvalidContentError": {
        "description": "You need to specify content_id or rootContentId.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "ServerError": {
        "description": "We're sorry, but something went wrong.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "ObjectNotFoundError": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "name": "ObjectNotFoundError",
              "details": "The content badcontentId was not found."
            }
          }
        }
      },
      "NotImplementedError": {
        "description": "Endpoint Not Implemented",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "name": "NotImplementedError",
              "details": "The endpoint is not implemented."
            }
          }
        }
      }
    }
  },
  "tags": [],
  "security": [
    {
      "Authorization": []
    }
  ]
}