{
  "openapi": "3.0.0",
  "info": {
    "termsOfService": "https://fungenerators.com/terms",
    "description": "Generate Barcode images for a given barcode number. You can decode Barcode images and get the barcodes in a numberic form as well. Many industry standard barcode types are supported. The best and complete Barcode API on the cloud. [Click here to subscribe](http://fungenerators.com/api/barcode/) \n",
    "title": "Barcode API",
    "version": "1.5",
    "contact": {
      "name": "Fun Generators",
      "url": "http://fungenerators.com/api/barcode/"
    },
    "x-jentic-source-url": "https://fungenerators.com/yaml/barcode.yaml"
  },
  "tags": [
    {
      "name": "Barcode",
      "description": "Barcode API",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://fungenerators.com/api/barcode/"
      }
    }
  ],
  "paths": {
    "/barcode/encode/types": {
      "get": {
        "tags": [
          "Barcode"
        ],
        "description": "Get the supported barcode types for encoding / image generation.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "200  response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": "{\n  \"success\": {\"total\":28},\n  \"contents\": {\"types\":\n       {\n          \"C39\":\"Code 39\",\n          \"C39CKSUM\":\"Code 39 with Checksum\",\n          \"C39E\":\"Extended Code 39\",\n          \"C39ECKSUM\":\"Extended Code 39 With Checksum\",\n          \"C93\":\"Code 93\",\n          \"S25\":\"Standard 2 of 5\",\n          \"S25CKSUM\":\"Standard 2 of 5 with Checksum\",\n          \"I25\":\"Interleaved 2 of 5\",\n          \"I25CKSUM\":\"Interleaved 2 of 5 with Checksum\",\n          \"UPCA\":\"UPC-A\",\n          \"UPCE\":\"UPC-E\",\n          \"C128\":\"Code 128 (Standard)\",\n          \"C128A\":\"Code 128-A\",\n          \"C128B\":\"Code 128-B\",\n          \"C128C\":\"Code 128-C\",\n          \"EAN8\":\"EAN-8\",\n          \"EAN13\":\"EAN-13\",\n          \"MSI\":\"MSI Plessey\",\n          \"MSICKSUM\":\"MSI with Checksum\",\n          \"POSTNET\":\"POSTNET\",\n          \"PLANET\":\"PLANET\",\n          \"RMS4CC\":\"RMS4CC \\/ CBC\",\n          \"KIX\":\"KIX\",\n          \"IMB\":\"IMB\",\n          \"CODABAR\":\"CODABAR\",\n          \"CODE11\":\"Code 11\",\n          \"PHARMA\":\"Pharma One-Track\",\n          \"PHARMA2T\":\"Pharma Two-Track\"\n       }\n  }\n}"
                  }
                }
              }
            }
          },
          "401": {
            "description": "401  response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": "{\n    \"error\": {\n        \"code\": 401,\n        \"message\": \"Unauthorized\"\n    }\n}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/barcode/encode": {
      "get": {
        "tags": [
          "Barcode"
        ],
        "description": "Get a Bar Code image for the given barcode number",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "description": "Barcode number",
            "in": "query",
            "name": "number",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          {
            "description": "Barcode format default C39. Valid values are the keys to those returned from /barcode/encode/types.",
            "in": "query",
            "name": "barcodeformat",
            "required": false,
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          {
            "description": "Output image format. Must be one of png/html/jpg/svg",
            "in": "query",
            "name": "outputformat",
            "required": false,
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          {
            "description": "Width factor of the image",
            "in": "query",
            "name": "widthfactor",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "integer"
            }
          },
          {
            "description": "Total height of the image",
            "in": "query",
            "name": "totalheight",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200  response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": "{\n    \"success\": {\n        \"total\": 1\n    },\n    \"contents\": [\n        {\n            \"encoding\": \"base64\",\n            \"format\": \"png\",\n            \"content\": \"\",\n        }\n    ]\n}"
                  }
                }
              }
            }
          },
          "401": {
            "description": "401  response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": "{\n    \"error\": {\n        \"code\": 401,\n        \"message\": \"Unauthorized\"\n    }\n}                    "
                  }
                }
              }
            }
          }
        }
      }
    },
    "/barcode/decode/types": {
      "get": {
        "tags": [
          "Barcode"
        ],
        "description": "Get the supported barcode types for the decoding process.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "200  response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": "{\n  \"success\": {\"total\":28},\n  \"contents\": \n  {\n     \"types\":\n     {\n       \"C39\":\"Code 39\",\n       \"C39CKSUM\":\"Code 39 with Checksum\",\n       \"C39E\":\"Extended Code 39\",\n       \"C39ECKSUM\":\"Extended Code 39 With Checksum\",\n       \"C93\":\"Code 93\",\n       \"I25\":\"Interleaved 2 of 5\",\n       \"I25CKSUM\":\"Interleaved 2 of 5 with Checksum\",\n       \"C128\":\"Code 128 (Standard)\",\n       \"C128A\":\"Code 128-A\",\n       \"C128B\":\"Code 128-B\",\n       \"C128C\":\"Code 128-C\",\n       \"CODABAR\":\"CODABAR\"\n       \n     }\n  }\n}"
                  }
                }
              }
            }
          },
          "401": {
            "description": "401  response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": "{\n    \"error\": {\n        \"code\": 401,\n        \"message\": \"Unauthorized\"\n    }\n}                    "
                  }
                }
              }
            }
          }
        }
      }
    },
    "/barcode/decode": {
      "post": {
        "description": "Decode a Barcode image and return the cotents if successful",
        "tags": [
          "Barcode"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "barimage": {
                    "description": "Barcode image to decode and get the content value",
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": [
                  "barimage"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200  response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": "{\n  \"success\": {\n    \"total\": 1\n  },\n  \"contents\": [\n      {\n               \"value\": 234567,\n               \"format\": 'C39',\n               \"content_type\": \"number\"\n      }\n  ]\n}"
                  }
                }
              }
            }
          },
          "401": {
            "description": "401  response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": "{\n    \"error\": {\n        \"code\": 401,\n        \"message\": \"Unauthorized\"\n    }\n}              "
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "http://api.fungenerators.com"
    },
    {
      "url": "https://api.fungenerators.com"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}