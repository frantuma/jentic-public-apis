{
  "openapi": "3.0.0",
  "info": {
    "title": "API title",
    "version": "0.0.1",
    "x-jentic-source-url": "https://axil.gitlab.io/swaggerapi/static/swagger.json"
  },
  "servers": [
    {
      "url": "/api"
    }
  ],
  "paths": {
    "/v3/application/settings": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationSetting"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationSetting"
                }
              }
            },
            "description": "Get the current application settings"
          }
        },
        "tags": [
          "application"
        ],
        "description": "Get the current application settings",
        "operationId": "getV3ApplicationSettings",
        "summary": "Get the current application settings"
      },
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationSetting"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationSetting"
                }
              }
            },
            "description": "Modify application settings"
          }
        },
        "tags": [
          "application"
        ],
        "description": "Modify application settings",
        "operationId": "putV3ApplicationSettings",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "admin_notification_email": {
                    "description": "Abuse reports will be sent to this address if it is set. Abuse reports are always available in the admin area.",
                    "type": "string"
                  },
                  "after_sign_out_path": {
                    "description": "We will redirect users to this page after they sign out",
                    "type": "string"
                  },
                  "after_sign_up_text": {
                    "description": "Text shown after sign up",
                    "type": "string"
                  },
                  "akismet_api_key": {
                    "description": "Generate API key at http://www.akismet.com",
                    "type": "string"
                  },
                  "akismet_enabled": {
                    "description": "Helps prevent bots from creating issues",
                    "type": "boolean"
                  },
                  "container_registry_token_expire_delay": {
                    "description": "Authorization token duration (minutes)",
                    "format": "int32",
                    "type": "integer"
                  },
                  "default_branch_protection": {
                    "description": "Determine if developers can push to master",
                    "enum": [
                      0,
                      1,
                      2
                    ],
                    "format": "int32",
                    "type": "integer"
                  },
                  "default_group_visibility": {
                    "description": "The default group visibility",
                    "enum": [
                      0,
                      10,
                      20
                    ],
                    "format": "int32",
                    "type": "integer"
                  },
                  "default_project_visibility": {
                    "description": "The default project visibility",
                    "enum": [
                      0,
                      10,
                      20
                    ],
                    "format": "int32",
                    "type": "integer"
                  },
                  "default_projects_limit": {
                    "description": "The maximum number of personal projects",
                    "format": "int32",
                    "type": "integer"
                  },
                  "default_snippet_visibility": {
                    "description": "The default snippet visibility",
                    "enum": [
                      0,
                      10,
                      20
                    ],
                    "format": "int32",
                    "type": "integer"
                  },
                  "disabled_oauth_sign_in_sources": {
                    "description": "Disable certain OAuth sign-in sources",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "domain_blacklist": {
                    "description": "Users with e-mail addresses that match these domain(s) will NOT be able to sign-up. Wildcards allowed. Use separate lines for multiple entries. Ex: domain.com, *.domain.com",
                    "type": "string"
                  },
                  "domain_blacklist_enabled": {
                    "description": "Enable domain blacklist for sign ups",
                    "type": "boolean"
                  },
                  "domain_whitelist": {
                    "description": "ONLY users with e-mail addresses that match these domain(s) will be able to sign-up. Wildcards allowed. Use separate lines for multiple entries. Ex: domain.com, *.domain.com",
                    "type": "string"
                  },
                  "email_author_in_body": {
                    "description": "Some email servers do not support overriding the email sender name. Enable this option to include the name of the author of the issue, merge request or comment in the email body instead.",
                    "type": "boolean"
                  },
                  "enabled_git_access_protocol": {
                    "description": "Allow only the selected protocols to be used for Git access.",
                    "enum": [
                      "ssh",
                      "http",
                      "nil"
                    ],
                    "type": "string"
                  },
                  "gravatar_enabled": {
                    "description": "Flag indicating if the Gravatar service is enabled",
                    "type": "boolean"
                  },
                  "help_page_text": {
                    "description": "Custom text displayed on the help page",
                    "type": "string"
                  },
                  "home_page_url": {
                    "description": "We will redirect non-logged in users to this page",
                    "type": "string"
                  },
                  "housekeeping_bitmaps_enabled": {
                    "description": "Creating pack file bitmaps makes housekeeping take a little longer but bitmaps should accelerate 'git clone' performance.",
                    "type": "boolean"
                  },
                  "housekeeping_enabled": {
                    "description": "Enable automatic repository housekeeping (git repack, git gc)",
                    "type": "boolean"
                  },
                  "housekeeping_full_repack_period": {
                    "description": "Number of Git pushes after which a full 'git repack' is run.",
                    "format": "int32",
                    "type": "integer"
                  },
                  "housekeeping_gc_period": {
                    "description": "Number of Git pushes after which 'git gc' is run.",
                    "format": "int32",
                    "type": "integer"
                  },
                  "housekeeping_incremental_repack_period": {
                    "description": "Number of Git pushes after which an incremental 'git repack' is run.",
                    "format": "int32",
                    "type": "integer"
                  },
                  "html_emails_enabled": {
                    "description": "By default GitLab sends emails in HTML and plain text formats so mail clients can choose what format to use. Disable this option if you only want to send emails in plain text format.",
                    "type": "boolean"
                  },
                  "import_sources": {
                    "description": "Enabled sources for code import during project creation. OmniAuth must be configured for GitHub, Bitbucket, and GitLab.com",
                    "enum": [
                      "github",
                      "bitbucket",
                      "gitlab",
                      "google_code",
                      "fogbugz",
                      "git",
                      "gitlab_project"
                    ],
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "koding_enabled": {
                    "description": "Enable Koding",
                    "type": "boolean"
                  },
                  "koding_url": {
                    "description": "The Koding team URL",
                    "type": "string"
                  },
                  "max_artifacts_size": {
                    "description": "Set the maximum file size each build's artifacts can have",
                    "format": "int32",
                    "type": "integer"
                  },
                  "max_attachment_size": {
                    "description": "Maximum attachment size in MB",
                    "format": "int32",
                    "type": "integer"
                  },
                  "metrics_enabled": {
                    "description": "Enable the InfluxDB metrics",
                    "type": "boolean"
                  },
                  "metrics_host": {
                    "description": "The InfluxDB host",
                    "type": "string"
                  },
                  "metrics_method_call_threshold": {
                    "description": "A method call is only tracked when it takes longer to complete than the given amount of milliseconds.",
                    "format": "int32",
                    "type": "integer"
                  },
                  "metrics_packet_size": {
                    "description": "The amount of points to store in a single UDP packet",
                    "format": "int32",
                    "type": "integer"
                  },
                  "metrics_pool_size": {
                    "description": "The amount of InfluxDB connections to open",
                    "format": "int32",
                    "type": "integer"
                  },
                  "metrics_port": {
                    "description": "The UDP port to use for connecting to InfluxDB",
                    "format": "int32",
                    "type": "integer"
                  },
                  "metrics_sample_interval": {
                    "description": "The sampling interval in seconds",
                    "format": "int32",
                    "type": "integer"
                  },
                  "metrics_timeout": {
                    "description": "The amount of seconds after which an InfluxDB connection will time out",
                    "format": "int32",
                    "type": "integer"
                  },
                  "plantuml_enabled": {
                    "description": "Enable PlantUML",
                    "type": "boolean"
                  },
                  "plantuml_url": {
                    "description": "The PlantUML server URL",
                    "type": "string"
                  },
                  "recaptcha_enabled": {
                    "description": "Helps prevent bots from creating accounts",
                    "type": "boolean"
                  },
                  "recaptcha_private_key": {
                    "description": "Generate private key at http://www.google.com/recaptcha",
                    "type": "string"
                  },
                  "recaptcha_site_key": {
                    "description": "Generate site key at http://www.google.com/recaptcha",
                    "type": "string"
                  },
                  "repository_checks_enabled": {
                    "description": "GitLab will periodically run 'git fsck' in all project and wiki repositories to look for silent disk corruption issues.",
                    "type": "boolean"
                  },
                  "repository_storage": {
                    "description": "Storage paths for new projects",
                    "type": "string"
                  },
                  "require_two_factor_authentication": {
                    "description": "Require all users to setup Two-factor authentication",
                    "type": "boolean"
                  },
                  "restricted_visibility_levels": {
                    "description": "Selected levels cannot be used by non-admin users for projects or snippets. If the public level is restricted, user profiles are only visible to logged in users.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "send_user_confirmation_email": {
                    "description": "Send confirmation email on sign-up",
                    "type": "boolean"
                  },
                  "sentry_dsn": {
                    "description": "Sentry Data Source Name",
                    "type": "string"
                  },
                  "sentry_enabled": {
                    "description": "Sentry is an error reporting and logging tool which is currently not shipped with GitLab, get it here: https://getsentry.com",
                    "type": "boolean"
                  },
                  "session_expire_delay": {
                    "description": "Session duration in minutes. GitLab restart is required to apply changes.",
                    "format": "int32",
                    "type": "integer"
                  },
                  "shared_runners_enabled": {
                    "description": "Enable shared runners for new projects",
                    "type": "boolean"
                  },
                  "shared_runners_text": {
                    "description": "Shared runners text ",
                    "type": "string"
                  },
                  "sidekiq_throttling_enabled": {
                    "description": "Enable Sidekiq Job Throttling",
                    "type": "boolean"
                  },
                  "sidekiq_throttling_factor": {
                    "description": "The factor by which the queues should be throttled. A value between 0.0 and 1.0, exclusive.",
                    "format": "float",
                    "type": "number"
                  },
                  "sidekiq_throttling_queus": {
                    "description": "Choose which queues you wish to throttle",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "sign_in_text": {
                    "description": "The sign in text of the GitLab application",
                    "type": "string"
                  },
                  "signin_enabled": {
                    "description": "Flag indicating if sign in is enabled",
                    "type": "boolean"
                  },
                  "signup_enabled": {
                    "description": "Flag indicating if sign up is enabled",
                    "type": "boolean"
                  },
                  "two_factor_grace_period": {
                    "description": "Amount of time (in hours) that users are allowed to skip forced configuration of two-factor authentication",
                    "format": "int32",
                    "type": "integer"
                  },
                  "user_default_external": {
                    "description": "Newly registered users will by default be external",
                    "type": "boolean"
                  },
                  "user_oauth_applications": {
                    "description": "Allow users to register any application to use GitLab as an OAuth provider",
                    "type": "boolean"
                  },
                  "version_check_enabled": {
                    "description": "Let GitLab inform you when an update is available.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Modify application settings"
      }
    },
    "/v3/ci/lint": {
      "post": {
        "responses": {
          "201": {
            "description": "Validation of .gitlab-ci.yml content"
          }
        },
        "tags": [
          "ci"
        ],
        "description": "Validation of .gitlab-ci.yml content",
        "operationId": "postV3CiLint",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "content": {
                    "description": "Content of .gitlab-ci.yml",
                    "type": "string"
                  }
                },
                "required": [
                  "content"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Validation of .gitlab-ci.yml content"
      }
    },
    "/v3/deploy_keys": {
      "get": {
        "responses": {
          "200": {
            "description": "get DeployKey(s)"
          }
        },
        "tags": [
          "deploy_keys"
        ],
        "operationId": "getV3DeployKeys"
      }
    },
    "/v3/dockerfiles": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplatesList"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TemplatesList"
                }
              }
            },
            "description": "Get the list of the available template"
          }
        },
        "tags": [
          "dockerfiles"
        ],
        "description": "This feature was introduced in GitLab 8.15. This endpoint is deprecated and will be removed in GitLab 9.0.",
        "operationId": "getV3Dockerfiles",
        "summary": "Get the list of the available template"
      }
    },
    "/v3/dockerfiles/{name}": {
      "get": {
        "parameters": [
          {
            "description": "The name of the template",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Template"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Template"
                }
              }
            },
            "description": "Get the text for a specific template present in local filesystem"
          }
        },
        "tags": [
          "dockerfiles"
        ],
        "description": "This feature was introduced in GitLab 8.15. This endpoint is deprecated and will be removed in GitLab 9.0.",
        "operationId": "getV3DockerfilesName",
        "summary": "Get the text for a specific template present in local filesystem"
      }
    },
    "/v3/gitignores": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplatesList"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TemplatesList"
                }
              }
            },
            "description": "Get the list of the available template"
          }
        },
        "tags": [
          "gitignores"
        ],
        "description": "This feature was introduced in GitLab 8.8. This endpoint is deprecated and will be removed in GitLab 9.0.",
        "operationId": "getV3Gitignores",
        "summary": "Get the list of the available template"
      }
    },
    "/v3/gitignores/{name}": {
      "get": {
        "parameters": [
          {
            "description": "The name of the template",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Template"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Template"
                }
              }
            },
            "description": "Get the text for a specific template present in local filesystem"
          }
        },
        "tags": [
          "gitignores"
        ],
        "description": "This feature was introduced in GitLab 8.8. This endpoint is deprecated and will be removed in GitLab 9.0.",
        "operationId": "getV3GitignoresName",
        "summary": "Get the text for a specific template present in local filesystem"
      }
    },
    "/v3/gitlab_ci_ymls": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplatesList"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TemplatesList"
                }
              }
            },
            "description": "Get the list of the available template"
          }
        },
        "tags": [
          "gitlab_ci_ymls"
        ],
        "description": "This feature was introduced in GitLab 8.9. This endpoint is deprecated and will be removed in GitLab 9.0.",
        "operationId": "getV3GitlabCiYmls",
        "summary": "Get the list of the available template"
      }
    },
    "/v3/gitlab_ci_ymls/{name}": {
      "get": {
        "parameters": [
          {
            "description": "The name of the template",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Template"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Template"
                }
              }
            },
            "description": "Get the text for a specific template present in local filesystem"
          }
        },
        "tags": [
          "gitlab_ci_ymls"
        ],
        "description": "This feature was introduced in GitLab 8.9. This endpoint is deprecated and will be removed in GitLab 9.0.",
        "operationId": "getV3GitlabCiYmlsName",
        "summary": "Get the text for a specific template present in local filesystem"
      }
    },
    "/v3/groups": {
      "get": {
        "parameters": [
          {
            "description": "Include project statistics",
            "in": "query",
            "name": "statistics",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Show all group that you have access to",
            "in": "query",
            "name": "all_available",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Search for a specific group",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Order by name or path",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "default": "name",
              "enum": [
                "name",
                "path"
              ],
              "type": "string"
            }
          },
          {
            "description": "Sort by asc (ascending) or desc (descending)",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "asc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            },
            "description": "Get a groups list"
          }
        },
        "tags": [
          "groups"
        ],
        "description": "Get a groups list",
        "operationId": "getV3Groups",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "skip_groups": {
                    "description": "Array of group ids to exclude from list",
                    "items": {
                      "format": "int32",
                      "type": "integer"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Get a groups list"
      },
      "post": {
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            },
            "description": "Create a group. Available only for users who can create groups."
          }
        },
        "tags": [
          "groups"
        ],
        "description": "Create a group. Available only for users who can create groups.",
        "operationId": "postV3Groups",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "description": {
                    "description": "The description of the group",
                    "type": "string"
                  },
                  "lfs_enabled": {
                    "description": "Enable/disable LFS for the projects in this group",
                    "type": "boolean"
                  },
                  "name": {
                    "description": "The name of the group",
                    "type": "string"
                  },
                  "path": {
                    "description": "The path of the group",
                    "type": "string"
                  },
                  "request_access_enabled": {
                    "description": "Allow users to request member access",
                    "type": "boolean"
                  },
                  "visibility_level": {
                    "description": "The visibility level of the group",
                    "format": "int32",
                    "type": "integer"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Create a group. Available only for users who can create groups."
      }
    },
    "/v3/groups/owned": {
      "get": {
        "parameters": [
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Include project statistics",
            "in": "query",
            "name": "statistics",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            },
            "description": "Get list of owned groups for authenticated user"
          }
        },
        "tags": [
          "groups"
        ],
        "description": "Get list of owned groups for authenticated user",
        "operationId": "getV3GroupsOwned",
        "summary": "Get list of owned groups for authenticated user"
      }
    },
    "/v3/groups/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "The ID of a group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Remove a group."
          }
        },
        "tags": [
          "groups"
        ],
        "description": "Remove a group.",
        "operationId": "deleteV3GroupsId",
        "summary": "Remove a group."
      },
      "get": {
        "parameters": [
          {
            "description": "The ID of a group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupDetail"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupDetail"
                }
              }
            },
            "description": "Get a single group, with containing projects."
          }
        },
        "tags": [
          "groups"
        ],
        "description": "Get a single group, with containing projects.",
        "operationId": "getV3GroupsId",
        "summary": "Get a single group, with containing projects."
      },
      "put": {
        "parameters": [
          {
            "description": "The ID of a group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            },
            "description": "Update a group. Available only for users who can administrate groups."
          }
        },
        "tags": [
          "groups"
        ],
        "description": "Update a group. Available only for users who can administrate groups.",
        "operationId": "putV3GroupsId",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "description": {
                    "description": "The description of the group",
                    "type": "string"
                  },
                  "lfs_enabled": {
                    "description": "Enable/disable LFS for the projects in this group",
                    "type": "boolean"
                  },
                  "name": {
                    "description": "The name of the group",
                    "type": "string"
                  },
                  "path": {
                    "description": "The path of the group",
                    "type": "string"
                  },
                  "request_access_enabled": {
                    "description": "Allow users to request member access",
                    "type": "boolean"
                  },
                  "visibility_level": {
                    "description": "The visibility level of the group",
                    "format": "int32",
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Update a group. Available only for users who can administrate groups."
      }
    },
    "/v3/groups/{id}/access_requests": {
      "get": {
        "parameters": [
          {
            "description": "The group ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessRequester"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AccessRequester"
                }
              }
            },
            "description": "Gets a list of access requests for a group."
          }
        },
        "tags": [
          "groups"
        ],
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "getV3GroupsIdAccessRequests",
        "summary": "Gets a list of access requests for a group."
      },
      "post": {
        "parameters": [
          {
            "description": "The group ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessRequester"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AccessRequester"
                }
              }
            },
            "description": "Requests access for the authenticated user to a group."
          }
        },
        "tags": [
          "groups"
        ],
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "postV3GroupsIdAccessRequests",
        "summary": "Requests access for the authenticated user to a group."
      }
    },
    "/v3/groups/{id}/access_requests/{user_id}": {
      "delete": {
        "parameters": [
          {
            "description": "The group ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The user ID of the access requester",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Denies an access request for the given user."
          }
        },
        "tags": [
          "groups"
        ],
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "deleteV3GroupsIdAccessRequestsUserId",
        "summary": "Denies an access request for the given user."
      }
    },
    "/v3/groups/{id}/access_requests/{user_id}/approve": {
      "put": {
        "parameters": [
          {
            "description": "The group ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The user ID of the access requester",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            },
            "description": "Approves an access request for the given user."
          }
        },
        "tags": [
          "groups"
        ],
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "putV3GroupsIdAccessRequestsUserIdApprove",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "access_level": {
                    "description": "A valid access level (defaults: `30`, developer access level)",
                    "format": "int32",
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Approves an access request for the given user."
      }
    },
    "/v3/groups/{id}/issues": {
      "get": {
        "parameters": [
          {
            "description": "The ID of a group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Return opened, closed, or all issues",
            "in": "query",
            "name": "state",
            "required": false,
            "schema": {
              "default": "opened",
              "enum": [
                "opened",
                "closed",
                "all"
              ],
              "type": "string"
            }
          },
          {
            "description": "Comma-separated list of label names",
            "in": "query",
            "name": "labels",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Return issues for a specific milestone",
            "in": "query",
            "name": "milestone",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Return issues ordered by `created_at` or `updated_at` fields.",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "default": "created_at",
              "enum": [
                "created_at",
                "updated_at"
              ],
              "type": "string"
            }
          },
          {
            "description": "Return issues sorted in `asc` or `desc` order.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Issue"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Issue"
                }
              }
            },
            "description": "Get a list of group issues"
          }
        },
        "tags": [
          "groups"
        ],
        "description": "Get a list of group issues",
        "operationId": "getV3GroupsIdIssues",
        "summary": "Get a list of group issues"
      }
    },
    "/v3/groups/{id}/members": {
      "get": {
        "parameters": [
          {
            "description": "The group ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A query string to search for members",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            },
            "description": "Gets a list of group or project members viewable by the authenticated user."
          }
        },
        "tags": [
          "groups"
        ],
        "description": "Gets a list of group or project members viewable by the authenticated user.",
        "operationId": "getV3GroupsIdMembers",
        "summary": "Gets a list of group or project members viewable by the authenticated user."
      },
      "post": {
        "parameters": [
          {
            "description": "The group ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            },
            "description": "Adds a member to a group or project."
          }
        },
        "tags": [
          "groups"
        ],
        "description": "Adds a member to a group or project.",
        "operationId": "postV3GroupsIdMembers",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "access_level": {
                    "description": "A valid access level (defaults: `30`, developer access level)",
                    "format": "int32",
                    "type": "integer"
                  },
                  "expires_at": {
                    "description": "Date string in the format YEAR-MONTH-DAY",
                    "format": "date-time",
                    "type": "string"
                  },
                  "user_id": {
                    "description": "The user ID of the new member",
                    "format": "int32",
                    "type": "integer"
                  }
                },
                "required": [
                  "user_id"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Adds a member to a group or project."
      }
    },
    "/v3/groups/{id}/members/{user_id}": {
      "delete": {
        "parameters": [
          {
            "description": "The group ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The user ID of the member",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Removes a user from a group or project."
          }
        },
        "tags": [
          "groups"
        ],
        "description": "Removes a user from a group or project.",
        "operationId": "deleteV3GroupsIdMembersUserId",
        "summary": "Removes a user from a group or project."
      },
      "get": {
        "parameters": [
          {
            "description": "The group ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The user ID of the member",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            },
            "description": "Gets a member of a group or project."
          }
        },
        "tags": [
          "groups"
        ],
        "description": "Gets a member of a group or project.",
        "operationId": "getV3GroupsIdMembersUserId",
        "summary": "Gets a member of a group or project."
      },
      "put": {
        "parameters": [
          {
            "description": "The group ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The user ID of the new member",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            },
            "description": "Updates a member of a group or project."
          }
        },
        "tags": [
          "groups"
        ],
        "description": "Updates a member of a group or project.",
        "operationId": "putV3GroupsIdMembersUserId",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "access_level": {
                    "description": "A valid access level",
                    "format": "int32",
                    "type": "integer"
                  },
                  "expires_at": {
                    "description": "Date string in the format YEAR-MONTH-DAY",
                    "format": "date-time",
                    "type": "string"
                  }
                },
                "required": [
                  "access_level"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Updates a member of a group or project."
      }
    },
    "/v3/groups/{id}/notification_settings": {
      "get": {
        "parameters": [
          {
            "description": "The group ID or project ID or project NAMESPACE/PROJECT_NAME",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationSetting"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationSetting"
                }
              }
            },
            "description": "Get group level notification level settings, defaults to Global"
          }
        },
        "tags": [
          "groups"
        ],
        "description": "This feature was introduced in GitLab 8.12",
        "operationId": "getV3GroupsIdNotificationSettings",
        "summary": "Get group level notification level settings, defaults to Global"
      },
      "put": {
        "parameters": [
          {
            "description": "The group ID or project ID or project NAMESPACE/PROJECT_NAME",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationSetting"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationSetting"
                }
              }
            },
            "description": "Update group level notification level settings, defaults to Global"
          }
        },
        "tags": [
          "groups"
        ],
        "description": "This feature was introduced in GitLab 8.12",
        "operationId": "putV3GroupsIdNotificationSettings",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "close_issue": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "close_merge_request": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "failed_pipeline": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "level": {
                    "description": "The group notification level",
                    "type": "string"
                  },
                  "merge_merge_request": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "new_issue": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "new_merge_request": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "new_note": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "reassign_issue": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "reassign_merge_request": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "reopen_issue": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "reopen_merge_request": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "success_pipeline": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Update group level notification level settings, defaults to Global"
      }
    },
    "/v3/groups/{id}/projects": {
      "get": {
        "parameters": [
          {
            "description": "The ID of a group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Limit by archived status",
            "in": "query",
            "name": "archived",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Limit by visibility",
            "in": "query",
            "name": "visibility",
            "required": false,
            "schema": {
              "enum": [
                "public",
                "internal",
                "private"
              ],
              "type": "string"
            }
          },
          {
            "description": "Return list of authorized projects matching the search criteria",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Return projects ordered by field",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "default": "created_at",
              "enum": [
                "id",
                "name",
                "path",
                "created_at",
                "updated_at",
                "last_activity_at"
              ],
              "type": "string"
            }
          },
          {
            "description": "Return projects sorted in ascending and descending order",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Return only the ID, URL, name, and path of each project",
            "in": "query",
            "name": "simple",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            },
            "description": "Get a list of projects in this group."
          }
        },
        "tags": [
          "groups"
        ],
        "description": "Get a list of projects in this group.",
        "operationId": "getV3GroupsIdProjects",
        "summary": "Get a list of projects in this group."
      }
    },
    "/v3/groups/{id}/projects/{project_id}": {
      "post": {
        "parameters": [
          {
            "description": "The ID of a group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID or path of the project",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupDetail"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupDetail"
                }
              }
            },
            "description": "Transfer a project to the group namespace. Available only for admin."
          }
        },
        "tags": [
          "groups"
        ],
        "description": "Transfer a project to the group namespace. Available only for admin.",
        "operationId": "postV3GroupsIdProjectsProjectId",
        "summary": "Transfer a project to the group namespace. Available only for admin."
      }
    },
    "/v3/hooks": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Hook"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Hook"
                }
              }
            },
            "description": "Get the list of system hooks"
          }
        },
        "tags": [
          "hooks"
        ],
        "description": "Get the list of system hooks",
        "operationId": "getV3Hooks",
        "summary": "Get the list of system hooks"
      },
      "post": {
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Hook"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Hook"
                }
              }
            },
            "description": "Create a new system hook"
          }
        },
        "tags": [
          "hooks"
        ],
        "description": "Create a new system hook",
        "operationId": "postV3Hooks",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "enable_ssl_verification": {
                    "description": "Do SSL verification when triggering the hook",
                    "type": "boolean"
                  },
                  "push_events": {
                    "description": "Trigger hook on push events",
                    "type": "boolean"
                  },
                  "tag_push_events": {
                    "description": "Trigger hook on tag push events",
                    "type": "boolean"
                  },
                  "token": {
                    "description": "The token used to validate payloads",
                    "type": "string"
                  },
                  "url": {
                    "description": "The URL to send the request to",
                    "type": "string"
                  }
                },
                "required": [
                  "url"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Create a new system hook"
      }
    },
    "/v3/hooks/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "The ID of the system hook",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Hook"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Hook"
                }
              }
            },
            "description": "Delete a hook"
          }
        },
        "tags": [
          "hooks"
        ],
        "description": "Delete a hook",
        "operationId": "deleteV3HooksId",
        "summary": "Delete a hook"
      },
      "get": {
        "parameters": [
          {
            "description": "The ID of the system hook",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Hook"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Hook"
                }
              }
            },
            "description": "Test a hook"
          }
        },
        "tags": [
          "hooks"
        ],
        "description": "Test a hook",
        "operationId": "getV3HooksId",
        "summary": "Test a hook"
      }
    },
    "/v3/internal/allowed": {
      "post": {
        "responses": {
          "201": {
            "description": "created Allowed"
          }
        },
        "tags": [
          "internal"
        ],
        "operationId": "postV3InternalAllowed"
      }
    },
    "/v3/internal/broadcast_message": {
      "get": {
        "responses": {
          "200": {
            "description": "get BroadcastMessage(s)"
          }
        },
        "tags": [
          "internal"
        ],
        "operationId": "getV3InternalBroadcastMessage"
      }
    },
    "/v3/internal/check": {
      "get": {
        "responses": {
          "200": {
            "description": "get Check(s)"
          }
        },
        "tags": [
          "internal"
        ],
        "operationId": "getV3InternalCheck"
      }
    },
    "/v3/internal/discover": {
      "get": {
        "responses": {
          "200": {
            "description": "get Discover(s)"
          }
        },
        "tags": [
          "internal"
        ],
        "operationId": "getV3InternalDiscover"
      }
    },
    "/v3/internal/lfs_authenticate": {
      "post": {
        "responses": {
          "201": {
            "description": "created LfsAuthenticate"
          }
        },
        "tags": [
          "internal"
        ],
        "operationId": "postV3InternalLfsAuthenticate"
      }
    },
    "/v3/internal/merge_request_urls": {
      "get": {
        "responses": {
          "200": {
            "description": "get MergeRequestUrl(s)"
          }
        },
        "tags": [
          "internal"
        ],
        "operationId": "getV3InternalMergeRequestUrls"
      }
    },
    "/v3/internal/two_factor_recovery_codes": {
      "post": {
        "responses": {
          "201": {
            "description": "created TwoFactorRecoveryCode"
          }
        },
        "tags": [
          "internal"
        ],
        "operationId": "postV3InternalTwoFactorRecoveryCodes"
      }
    },
    "/v3/issues": {
      "get": {
        "parameters": [
          {
            "description": "Return opened, closed, or all issues",
            "in": "query",
            "name": "state",
            "required": false,
            "schema": {
              "default": "all",
              "enum": [
                "opened",
                "closed",
                "all"
              ],
              "type": "string"
            }
          },
          {
            "description": "Comma-separated list of label names",
            "in": "query",
            "name": "labels",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Return issues for a specific milestone",
            "in": "query",
            "name": "milestone",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Return issues ordered by `created_at` or `updated_at` fields.",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "default": "created_at",
              "enum": [
                "created_at",
                "updated_at"
              ],
              "type": "string"
            }
          },
          {
            "description": "Return issues sorted in `asc` or `desc` order.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Issue"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Issue"
                }
              }
            },
            "description": "Get currently authenticated user's issues"
          }
        },
        "tags": [
          "issues"
        ],
        "description": "Get currently authenticated user's issues",
        "operationId": "getV3Issues",
        "summary": "Get currently authenticated user's issues"
      }
    },
    "/v3/keys/{id}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SSHKeyWithUser"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SSHKeyWithUser"
                }
              }
            },
            "description": "Get single ssh key by id. Only available to admin users"
          }
        },
        "tags": [
          "keys"
        ],
        "description": "Get single ssh key by id. Only available to admin users",
        "operationId": "getV3KeysId",
        "summary": "Get single ssh key by id. Only available to admin users"
      }
    },
    "/v3/licenses": {
      "get": {
        "parameters": [
          {
            "description": "If passed, returns only popular licenses",
            "in": "query",
            "name": "popular",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepoLicense"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RepoLicense"
                }
              }
            },
            "description": "Get the list of the available license template"
          }
        },
        "tags": [
          "licenses"
        ],
        "description": "This feature was introduced in GitLab 8.7. This endpoint is deprecated and will be removed in GitLab 9.0.",
        "operationId": "getV3Licenses",
        "summary": "Get the list of the available license template"
      }
    },
    "/v3/licenses/{name}": {
      "get": {
        "parameters": [
          {
            "description": "The name of the template",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepoLicense"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RepoLicense"
                }
              }
            },
            "description": "Get the text for a specific license"
          }
        },
        "tags": [
          "licenses"
        ],
        "description": "This feature was introduced in GitLab 8.7. This endpoint is deprecated and will be removed in GitLab 9.0.",
        "operationId": "getV3LicensesName",
        "summary": "Get the text for a specific license"
      }
    },
    "/v3/namespaces": {
      "get": {
        "parameters": [
          {
            "description": "Search query for namespaces",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Namespace"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Namespace"
                }
              }
            },
            "description": "Get a namespaces list"
          }
        },
        "tags": [
          "namespaces"
        ],
        "description": "Get a namespaces list",
        "operationId": "getV3Namespaces",
        "summary": "Get a namespaces list"
      }
    },
    "/v3/notification_settings": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalNotificationSetting"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalNotificationSetting"
                }
              }
            },
            "description": "Get global notification level settings and email, defaults to Participate"
          }
        },
        "tags": [
          "notification_settings"
        ],
        "description": "This feature was introduced in GitLab 8.12",
        "operationId": "getV3NotificationSettings",
        "summary": "Get global notification level settings and email, defaults to Participate"
      },
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalNotificationSetting"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalNotificationSetting"
                }
              }
            },
            "description": "Update global notification level settings and email, defaults to Participate"
          }
        },
        "tags": [
          "notification_settings"
        ],
        "description": "This feature was introduced in GitLab 8.12",
        "operationId": "putV3NotificationSettings",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "close_issue": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "close_merge_request": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "failed_pipeline": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "level": {
                    "description": "The global notification level",
                    "type": "string"
                  },
                  "merge_merge_request": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "new_issue": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "new_merge_request": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "new_note": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "notification_email": {
                    "description": "The email address to send notifications",
                    "type": "string"
                  },
                  "reassign_issue": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "reassign_merge_request": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "reopen_issue": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "reopen_merge_request": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "success_pipeline": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Update global notification level settings and email, defaults to Participate"
      }
    },
    "/v3/projects": {
      "get": {
        "parameters": [
          {
            "description": "Return projects ordered by field",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "default": "created_at",
              "enum": [
                "id",
                "name",
                "path",
                "created_at",
                "updated_at",
                "last_activity_at"
              ],
              "type": "string"
            }
          },
          {
            "description": "Return projects sorted in ascending and descending order",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Limit by archived status",
            "in": "query",
            "name": "archived",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Limit by visibility",
            "in": "query",
            "name": "visibility",
            "required": false,
            "schema": {
              "enum": [
                "public",
                "internal",
                "private"
              ],
              "type": "string"
            }
          },
          {
            "description": "Return list of authorized projects matching the search criteria",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Return only the ID, URL, name, and path of each project",
            "in": "query",
            "name": "simple",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BasicProjectDetails"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BasicProjectDetails"
                }
              }
            },
            "description": "Get a projects list for authenticated user"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Get a projects list for authenticated user",
        "operationId": "getV3Projects",
        "summary": "Get a projects list for authenticated user"
      },
      "post": {
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            },
            "description": "Create new project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Create new project",
        "operationId": "postV3Projects",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "builds_enabled": {
                    "description": "Flag indication if builds are enabled",
                    "type": "boolean"
                  },
                  "container_registry_enabled": {
                    "description": "Flag indication if the container registry is enabled for that project",
                    "type": "boolean"
                  },
                  "description": {
                    "description": "The description of the project",
                    "type": "string"
                  },
                  "import_url": {
                    "description": "URL from which the project is imported",
                    "type": "string"
                  },
                  "issues_enabled": {
                    "description": "Flag indication if the issue tracker is enabled",
                    "type": "boolean"
                  },
                  "lfs_enabled": {
                    "description": "Flag indication if Git LFS is enabled for that project",
                    "type": "boolean"
                  },
                  "merge_requests_enabled": {
                    "description": "Flag indication if merge requests are enabled",
                    "type": "boolean"
                  },
                  "name": {
                    "description": "The name of the project",
                    "type": "string"
                  },
                  "namespace_id": {
                    "description": "Namespace ID for the new project. Default to the user namespace.",
                    "format": "int32",
                    "type": "integer"
                  },
                  "only_allow_merge_if_all_discussions_are_resolved": {
                    "description": "Only allow to merge if all discussions are resolved",
                    "type": "boolean"
                  },
                  "only_allow_merge_if_build_succeeds": {
                    "description": "Only allow to merge if builds succeed",
                    "type": "boolean"
                  },
                  "path": {
                    "description": "The path of the repository",
                    "type": "string"
                  },
                  "public": {
                    "description": "Create a public project. The same as visibility_level = 20.",
                    "type": "boolean"
                  },
                  "public_builds": {
                    "description": "Perform public builds",
                    "type": "boolean"
                  },
                  "request_access_enabled": {
                    "description": "Allow users to request member access",
                    "type": "boolean"
                  },
                  "shared_runners_enabled": {
                    "description": "Flag indication if shared runners are enabled for that project",
                    "type": "boolean"
                  },
                  "snippets_enabled": {
                    "description": "Flag indication if snippets are enabled",
                    "type": "boolean"
                  },
                  "visibility_level": {
                    "description": "Create a public project. The same as visibility_level = 20.",
                    "enum": [
                      0,
                      10,
                      20
                    ],
                    "format": "int32",
                    "type": "integer"
                  },
                  "wiki_enabled": {
                    "description": "Flag indication if the wiki is enabled",
                    "type": "boolean"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Create new project"
      }
    },
    "/v3/projects/all": {
      "get": {
        "parameters": [
          {
            "description": "Return projects ordered by field",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "default": "created_at",
              "enum": [
                "id",
                "name",
                "path",
                "created_at",
                "updated_at",
                "last_activity_at"
              ],
              "type": "string"
            }
          },
          {
            "description": "Return projects sorted in ascending and descending order",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Limit by archived status",
            "in": "query",
            "name": "archived",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Limit by visibility",
            "in": "query",
            "name": "visibility",
            "required": false,
            "schema": {
              "enum": [
                "public",
                "internal",
                "private"
              ],
              "type": "string"
            }
          },
          {
            "description": "Return list of authorized projects matching the search criteria",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Return only the ID, URL, name, and path of each project",
            "in": "query",
            "name": "simple",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Include project statistics",
            "in": "query",
            "name": "statistics",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BasicProjectDetails"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BasicProjectDetails"
                }
              }
            },
            "description": "Get all projects for admin user"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Get all projects for admin user",
        "operationId": "getV3ProjectsAll",
        "summary": "Get all projects for admin user"
      }
    },
    "/v3/projects/fork/{id}": {
      "post": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            },
            "description": "Fork new project for the current user or provided namespace."
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Fork new project for the current user or provided namespace.",
        "operationId": "postV3ProjectsForkId",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "namespace": {
                    "description": "The ID or name of the namespace that the project will be forked into",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Fork new project for the current user or provided namespace."
      }
    },
    "/v3/projects/owned": {
      "get": {
        "parameters": [
          {
            "description": "Return projects ordered by field",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "default": "created_at",
              "enum": [
                "id",
                "name",
                "path",
                "created_at",
                "updated_at",
                "last_activity_at"
              ],
              "type": "string"
            }
          },
          {
            "description": "Return projects sorted in ascending and descending order",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Limit by archived status",
            "in": "query",
            "name": "archived",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Limit by visibility",
            "in": "query",
            "name": "visibility",
            "required": false,
            "schema": {
              "enum": [
                "public",
                "internal",
                "private"
              ],
              "type": "string"
            }
          },
          {
            "description": "Return list of authorized projects matching the search criteria",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Return only the ID, URL, name, and path of each project",
            "in": "query",
            "name": "simple",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Include project statistics",
            "in": "query",
            "name": "statistics",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BasicProjectDetails"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BasicProjectDetails"
                }
              }
            },
            "description": "Get an owned projects list for authenticated user"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Get an owned projects list for authenticated user",
        "operationId": "getV3ProjectsOwned",
        "summary": "Get an owned projects list for authenticated user"
      }
    },
    "/v3/projects/search/{query}": {
      "get": {
        "parameters": [
          {
            "description": "The project name to be searched",
            "in": "path",
            "name": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Return projects ordered by field",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "default": "created_at",
              "enum": [
                "id",
                "name",
                "path",
                "created_at",
                "updated_at",
                "last_activity_at"
              ],
              "type": "string"
            }
          },
          {
            "description": "Return projects sorted in ascending and descending order",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            },
            "description": "Search for projects the current user has access to"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Search for projects the current user has access to",
        "operationId": "getV3ProjectsSearchQuery",
        "summary": "Search for projects the current user has access to"
      }
    },
    "/v3/projects/starred": {
      "get": {
        "parameters": [
          {
            "description": "Return projects ordered by field",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "default": "created_at",
              "enum": [
                "id",
                "name",
                "path",
                "created_at",
                "updated_at",
                "last_activity_at"
              ],
              "type": "string"
            }
          },
          {
            "description": "Return projects sorted in ascending and descending order",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Limit by archived status",
            "in": "query",
            "name": "archived",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Limit by visibility",
            "in": "query",
            "name": "visibility",
            "required": false,
            "schema": {
              "enum": [
                "public",
                "internal",
                "private"
              ],
              "type": "string"
            }
          },
          {
            "description": "Return list of authorized projects matching the search criteria",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Return only the ID, URL, name, and path of each project",
            "in": "query",
            "name": "simple",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BasicProjectDetails"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BasicProjectDetails"
                }
              }
            },
            "description": "Gets starred project for the authenticated user"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Gets starred project for the authenticated user",
        "operationId": "getV3ProjectsStarred",
        "summary": "Gets starred project for the authenticated user"
      }
    },
    "/v3/projects/user/{user_id}": {
      "post": {
        "parameters": [
          {
            "description": "The ID of a user",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            },
            "description": "Create new project for a specified user. Only available to admin users."
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Create new project for a specified user. Only available to admin users.",
        "operationId": "postV3ProjectsUserUserId",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "builds_enabled": {
                    "description": "Flag indication if builds are enabled",
                    "type": "boolean"
                  },
                  "container_registry_enabled": {
                    "description": "Flag indication if the container registry is enabled for that project",
                    "type": "boolean"
                  },
                  "default_branch": {
                    "description": "The default branch of the project",
                    "type": "string"
                  },
                  "description": {
                    "description": "The description of the project",
                    "type": "string"
                  },
                  "import_url": {
                    "description": "URL from which the project is imported",
                    "type": "string"
                  },
                  "issues_enabled": {
                    "description": "Flag indication if the issue tracker is enabled",
                    "type": "boolean"
                  },
                  "lfs_enabled": {
                    "description": "Flag indication if Git LFS is enabled for that project",
                    "type": "boolean"
                  },
                  "merge_requests_enabled": {
                    "description": "Flag indication if merge requests are enabled",
                    "type": "boolean"
                  },
                  "name": {
                    "description": "The name of the project",
                    "type": "string"
                  },
                  "namespace_id": {
                    "description": "Namespace ID for the new project. Default to the user namespace.",
                    "format": "int32",
                    "type": "integer"
                  },
                  "only_allow_merge_if_all_discussions_are_resolved": {
                    "description": "Only allow to merge if all discussions are resolved",
                    "type": "boolean"
                  },
                  "only_allow_merge_if_build_succeeds": {
                    "description": "Only allow to merge if builds succeed",
                    "type": "boolean"
                  },
                  "public": {
                    "description": "Create a public project. The same as visibility_level = 20.",
                    "type": "boolean"
                  },
                  "public_builds": {
                    "description": "Perform public builds",
                    "type": "boolean"
                  },
                  "request_access_enabled": {
                    "description": "Allow users to request member access",
                    "type": "boolean"
                  },
                  "shared_runners_enabled": {
                    "description": "Flag indication if shared runners are enabled for that project",
                    "type": "boolean"
                  },
                  "snippets_enabled": {
                    "description": "Flag indication if snippets are enabled",
                    "type": "boolean"
                  },
                  "visibility_level": {
                    "description": "Create a public project. The same as visibility_level = 20.",
                    "enum": [
                      0,
                      10,
                      20
                    ],
                    "format": "int32",
                    "type": "integer"
                  },
                  "wiki_enabled": {
                    "description": "Flag indication if the wiki is enabled",
                    "type": "boolean"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Create new project for a specified user. Only available to admin users."
      }
    },
    "/v3/projects/visible": {
      "get": {
        "parameters": [
          {
            "description": "Return projects ordered by field",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "default": "created_at",
              "enum": [
                "id",
                "name",
                "path",
                "created_at",
                "updated_at",
                "last_activity_at"
              ],
              "type": "string"
            }
          },
          {
            "description": "Return projects sorted in ascending and descending order",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Limit by archived status",
            "in": "query",
            "name": "archived",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Limit by visibility",
            "in": "query",
            "name": "visibility",
            "required": false,
            "schema": {
              "enum": [
                "public",
                "internal",
                "private"
              ],
              "type": "string"
            }
          },
          {
            "description": "Return list of authorized projects matching the search criteria",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Return only the ID, URL, name, and path of each project",
            "in": "query",
            "name": "simple",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BasicProjectDetails"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BasicProjectDetails"
                }
              }
            },
            "description": "Get a list of visible projects for authenticated user"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Get a list of visible projects for authenticated user",
        "operationId": "getV3ProjectsVisible",
        "summary": "Get a list of visible projects for authenticated user"
      }
    },
    "/v3/projects/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Remove a project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Remove a project",
        "operationId": "deleteV3ProjectsId",
        "summary": "Remove a project"
      },
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectWithAccess"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectWithAccess"
                }
              }
            },
            "description": "Get a single project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Get a single project",
        "operationId": "getV3ProjectsId",
        "summary": "Get a single project"
      },
      "put": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            },
            "description": "Update an existing project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Update an existing project",
        "operationId": "putV3ProjectsId",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "builds_enabled": {
                    "description": "Flag indication if builds are enabled",
                    "type": "boolean"
                  },
                  "container_registry_enabled": {
                    "description": "Flag indication if the container registry is enabled for that project",
                    "type": "boolean"
                  },
                  "default_branch": {
                    "description": "The default branch of the project",
                    "type": "string"
                  },
                  "description": {
                    "description": "The description of the project",
                    "type": "string"
                  },
                  "issues_enabled": {
                    "description": "Flag indication if the issue tracker is enabled",
                    "type": "boolean"
                  },
                  "lfs_enabled": {
                    "description": "Flag indication if Git LFS is enabled for that project",
                    "type": "boolean"
                  },
                  "merge_requests_enabled": {
                    "description": "Flag indication if merge requests are enabled",
                    "type": "boolean"
                  },
                  "name": {
                    "description": "The name of the project",
                    "type": "string"
                  },
                  "only_allow_merge_if_all_discussions_are_resolved": {
                    "description": "Only allow to merge if all discussions are resolved",
                    "type": "boolean"
                  },
                  "only_allow_merge_if_build_succeeds": {
                    "description": "Only allow to merge if builds succeed",
                    "type": "boolean"
                  },
                  "path": {
                    "description": "The path of the repository",
                    "type": "string"
                  },
                  "public": {
                    "description": "Create a public project. The same as visibility_level = 20.",
                    "type": "boolean"
                  },
                  "public_builds": {
                    "description": "Perform public builds",
                    "type": "boolean"
                  },
                  "request_access_enabled": {
                    "description": "Allow users to request member access",
                    "type": "boolean"
                  },
                  "shared_runners_enabled": {
                    "description": "Flag indication if shared runners are enabled for that project",
                    "type": "boolean"
                  },
                  "snippets_enabled": {
                    "description": "Flag indication if snippets are enabled",
                    "type": "boolean"
                  },
                  "visibility_level": {
                    "description": "Create a public project. The same as visibility_level = 20.",
                    "enum": [
                      0,
                      10,
                      20
                    ],
                    "format": "int32",
                    "type": "integer"
                  },
                  "wiki_enabled": {
                    "description": "Flag indication if the wiki is enabled",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Update an existing project"
      }
    },
    "/v3/projects/{id}/(ref/{ref}/)trigger/builds": {
      "post": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The commit sha or name of a branch or tag",
            "in": "path",
            "name": "ref",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TriggerRequest"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TriggerRequest"
                }
              }
            },
            "description": "Trigger a GitLab project build"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Trigger a GitLab project build",
        "operationId": "postV3ProjectsId(refRef)triggerBuilds",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "token": {
                    "description": "The unique token of trigger",
                    "type": "string"
                  }
                },
                "required": [
                  "token"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Trigger a GitLab project build"
      }
    },
    "/v3/projects/{id}/access_requests": {
      "get": {
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessRequester"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AccessRequester"
                }
              }
            },
            "description": "Gets a list of access requests for a project."
          }
        },
        "tags": [
          "projects"
        ],
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "getV3ProjectsIdAccessRequests",
        "summary": "Gets a list of access requests for a project."
      },
      "post": {
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessRequester"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AccessRequester"
                }
              }
            },
            "description": "Requests access for the authenticated user to a project."
          }
        },
        "tags": [
          "projects"
        ],
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "postV3ProjectsIdAccessRequests",
        "summary": "Requests access for the authenticated user to a project."
      }
    },
    "/v3/projects/{id}/access_requests/{user_id}": {
      "delete": {
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The user ID of the access requester",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Denies an access request for the given user."
          }
        },
        "tags": [
          "projects"
        ],
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "deleteV3ProjectsIdAccessRequestsUserId",
        "summary": "Denies an access request for the given user."
      }
    },
    "/v3/projects/{id}/access_requests/{user_id}/approve": {
      "put": {
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The user ID of the access requester",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            },
            "description": "Approves an access request for the given user."
          }
        },
        "tags": [
          "projects"
        ],
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "putV3ProjectsIdAccessRequestsUserIdApprove",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "access_level": {
                    "description": "A valid access level (defaults: `30`, developer access level)",
                    "format": "int32",
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Approves an access request for the given user."
      }
    },
    "/v3/projects/{id}/archive": {
      "post": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            },
            "description": "Archive a project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Archive a project",
        "operationId": "postV3ProjectsIdArchive",
        "summary": "Archive a project"
      }
    },
    "/v3/projects/{id}/boards": {
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Board"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Board"
                }
              }
            },
            "description": "Get all project boards"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "This feature was introduced in 8.13",
        "operationId": "getV3ProjectsIdBoards",
        "summary": "Get all project boards"
      }
    },
    "/v3/projects/{id}/boards/{board_id}/lists": {
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a board",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/List"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/List"
                }
              }
            },
            "description": "Get the lists of a project board"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Does not include `backlog` and `done` lists. This feature was introduced in 8.13",
        "operationId": "getV3ProjectsIdBoardsBoardIdLists",
        "summary": "Get the lists of a project board"
      },
      "post": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a board",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/List"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/List"
                }
              }
            },
            "description": "Create a new board list"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "This feature was introduced in 8.13",
        "operationId": "postV3ProjectsIdBoardsBoardIdLists",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "label_id": {
                    "description": "The ID of an existing label",
                    "format": "int32",
                    "type": "integer"
                  }
                },
                "required": [
                  "label_id"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Create a new board list"
      }
    },
    "/v3/projects/{id}/boards/{board_id}/lists/{list_id}": {
      "delete": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a board",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The ID of a board list",
            "in": "path",
            "name": "list_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/List"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/List"
                }
              }
            },
            "description": "Delete a board list"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "This feature was introduced in 8.13",
        "operationId": "deleteV3ProjectsIdBoardsBoardIdListsListId",
        "summary": "Delete a board list"
      },
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a board",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The ID of a list",
            "in": "path",
            "name": "list_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/List"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/List"
                }
              }
            },
            "description": "Get a list of a project board"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "This feature was introduced in 8.13",
        "operationId": "getV3ProjectsIdBoardsBoardIdListsListId",
        "summary": "Get a list of a project board"
      },
      "put": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a board",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The ID of a list",
            "in": "path",
            "name": "list_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/List"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/List"
                }
              }
            },
            "description": "Moves a board list to a new position"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "This feature was introduced in 8.13",
        "operationId": "putV3ProjectsIdBoardsBoardIdListsListId",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "position": {
                    "description": "The position of the list",
                    "format": "int32",
                    "type": "integer"
                  }
                },
                "required": [
                  "position"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Moves a board list to a new position"
      }
    },
    "/v3/projects/{id}/builds": {
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The scope of builds to show",
            "in": "query",
            "name": "scope",
            "required": false,
            "schema": {
              "enum": [
                "pending",
                "running",
                "failed",
                "success",
                "canceled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Build"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Build"
                }
              }
            },
            "description": "Get a project builds"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Get a project builds",
        "operationId": "getV3ProjectsIdBuilds",
        "summary": "Get a project builds"
      }
    },
    "/v3/projects/{id}/builds/artifacts/{ref_name}/download": {
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ref from repository",
            "in": "path",
            "name": "ref_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name for the build",
            "in": "query",
            "name": "job",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Download the artifacts file from build"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "This feature was introduced in GitLab 8.10",
        "operationId": "getV3ProjectsIdBuildsArtifactsRefNameDownload",
        "summary": "Download the artifacts file from build"
      }
    },
    "/v3/projects/{id}/builds/{build_id}": {
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a build",
            "in": "path",
            "name": "build_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Build"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Build"
                }
              }
            },
            "description": "Get a specific build of a project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Get a specific build of a project",
        "operationId": "getV3ProjectsIdBuildsBuildId",
        "summary": "Get a specific build of a project"
      }
    },
    "/v3/projects/{id}/builds/{build_id}/artifacts": {
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a build",
            "in": "path",
            "name": "build_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Download the artifacts file from build"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "This feature was introduced in GitLab 8.5",
        "operationId": "getV3ProjectsIdBuildsBuildIdArtifacts",
        "summary": "Download the artifacts file from build"
      }
    },
    "/v3/projects/{id}/builds/{build_id}/artifacts/keep": {
      "post": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a build",
            "in": "path",
            "name": "build_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Build"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Build"
                }
              }
            },
            "description": "Keep the artifacts to prevent them from being deleted"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Keep the artifacts to prevent them from being deleted",
        "operationId": "postV3ProjectsIdBuildsBuildIdArtifactsKeep",
        "summary": "Keep the artifacts to prevent them from being deleted"
      }
    },
    "/v3/projects/{id}/builds/{build_id}/cancel": {
      "post": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a build",
            "in": "path",
            "name": "build_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Build"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Build"
                }
              }
            },
            "description": "Cancel a specific build of a project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Cancel a specific build of a project",
        "operationId": "postV3ProjectsIdBuildsBuildIdCancel",
        "summary": "Cancel a specific build of a project"
      }
    },
    "/v3/projects/{id}/builds/{build_id}/erase": {
      "post": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a build",
            "in": "path",
            "name": "build_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Build"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Build"
                }
              }
            },
            "description": "Erase build (remove artifacts and build trace)"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Erase build (remove artifacts and build trace)",
        "operationId": "postV3ProjectsIdBuildsBuildIdErase",
        "summary": "Erase build (remove artifacts and build trace)"
      }
    },
    "/v3/projects/{id}/builds/{build_id}/play": {
      "post": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a Build",
            "in": "path",
            "name": "build_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Build"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Build"
                }
              }
            },
            "description": "Trigger a manual build"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "This feature was added in GitLab 8.11",
        "operationId": "postV3ProjectsIdBuildsBuildIdPlay",
        "summary": "Trigger a manual build"
      }
    },
    "/v3/projects/{id}/builds/{build_id}/retry": {
      "post": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a build",
            "in": "path",
            "name": "build_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Build"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Build"
                }
              }
            },
            "description": "Retry a specific build of a project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Retry a specific build of a project",
        "operationId": "postV3ProjectsIdBuildsBuildIdRetry",
        "summary": "Retry a specific build of a project"
      }
    },
    "/v3/projects/{id}/builds/{build_id}/trace": {
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a build",
            "in": "path",
            "name": "build_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a trace of a specific build of a project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Get a trace of a specific build of a project",
        "operationId": "getV3ProjectsIdBuildsBuildIdTrace",
        "summary": "Get a trace of a specific build of a project"
      }
    },
    "/v3/projects/{id}/deploy_keys": {
      "get": {
        "parameters": [
          {
            "description": "The ID of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SSHKey"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SSHKey"
                }
              }
            },
            "description": "Get a specific project's deploy keys"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Get a specific project's deploy keys",
        "operationId": "getV3ProjectsIdDeployKeys",
        "summary": "Get a specific project's deploy keys"
      },
      "post": {
        "parameters": [
          {
            "description": "The ID of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SSHKey"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SSHKey"
                }
              }
            },
            "description": "Add new deploy key to currently authenticated user"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Add new deploy key to currently authenticated user",
        "operationId": "postV3ProjectsIdDeployKeys",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "key": {
                    "description": "The new deploy key",
                    "type": "string"
                  },
                  "title": {
                    "description": "The name of the deploy key",
                    "type": "string"
                  }
                },
                "required": [
                  "key"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Add new deploy key to currently authenticated user"
      }
    },
    "/v3/projects/{id}/deploy_keys/{key_id}": {
      "delete": {
        "parameters": [
          {
            "description": "The ID of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the deploy key",
            "in": "path",
            "name": "key_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SSHKey"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SSHKey"
                }
              }
            },
            "description": "Delete deploy key for a project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Delete deploy key for a project",
        "operationId": "deleteV3ProjectsIdDeployKeysKeyId",
        "summary": "Delete deploy key for a project"
      },
      "get": {
        "parameters": [
          {
            "description": "The ID of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the deploy key",
            "in": "path",
            "name": "key_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SSHKey"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SSHKey"
                }
              }
            },
            "description": "Get single deploy key"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Get single deploy key",
        "operationId": "getV3ProjectsIdDeployKeysKeyId",
        "summary": "Get single deploy key"
      }
    },
    "/v3/projects/{id}/deploy_keys/{key_id}/disable": {
      "delete": {
        "parameters": [
          {
            "description": "The ID of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the deploy key",
            "in": "path",
            "name": "key_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SSHKey"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SSHKey"
                }
              }
            },
            "description": "Disable a deploy key for a project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "This feature was added in GitLab 8.11",
        "operationId": "deleteV3ProjectsIdDeployKeysKeyIdDisable",
        "summary": "Disable a deploy key for a project"
      }
    },
    "/v3/projects/{id}/deploy_keys/{key_id}/enable": {
      "post": {
        "parameters": [
          {
            "description": "The ID of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the deploy key",
            "in": "path",
            "name": "key_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SSHKey"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SSHKey"
                }
              }
            },
            "description": "Enable a deploy key for a project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "This feature was added in GitLab 8.11",
        "operationId": "postV3ProjectsIdDeployKeysKeyIdEnable",
        "summary": "Enable a deploy key for a project"
      }
    },
    "/v3/projects/{id}/deployments": {
      "get": {
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Deployment"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Deployment"
                }
              }
            },
            "description": "Get all deployments of the project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "getV3ProjectsIdDeployments",
        "summary": "Get all deployments of the project"
      }
    },
    "/v3/projects/{id}/deployments/{deployment_id}": {
      "get": {
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The deployment ID",
            "in": "path",
            "name": "deployment_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Deployment"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Deployment"
                }
              }
            },
            "description": "Gets a specific deployment"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "getV3ProjectsIdDeploymentsDeploymentId",
        "summary": "Gets a specific deployment"
      }
    },
    "/v3/projects/{id}/environments": {
      "get": {
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Environment"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Environment"
                }
              }
            },
            "description": "Get all environments of the project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "getV3ProjectsIdEnvironments",
        "summary": "Get all environments of the project"
      },
      "post": {
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Environment"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Environment"
                }
              }
            },
            "description": "Creates a new environment"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "postV3ProjectsIdEnvironments",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "external_url": {
                    "description": "URL on which this deployment is viewable",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the environment to be created",
                    "type": "string"
                  },
                  "slug": {
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Creates a new environment"
      }
    },
    "/v3/projects/{id}/environments/{environment_id}": {
      "delete": {
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The environment ID",
            "in": "path",
            "name": "environment_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Environment"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Environment"
                }
              }
            },
            "description": "Deletes an existing environment"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "deleteV3ProjectsIdEnvironmentsEnvironmentId",
        "summary": "Deletes an existing environment"
      },
      "put": {
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The environment ID",
            "in": "path",
            "name": "environment_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Environment"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Environment"
                }
              }
            },
            "description": "Updates an existing environment"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "putV3ProjectsIdEnvironmentsEnvironmentId",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "external_url": {
                    "description": "The new URL on which this deployment is viewable",
                    "type": "string"
                  },
                  "name": {
                    "description": "The new environment name",
                    "type": "string"
                  },
                  "slug": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Updates an existing environment"
      }
    },
    "/v3/projects/{id}/events": {
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            },
            "description": "Get events for a single project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Get events for a single project",
        "operationId": "getV3ProjectsIdEvents",
        "summary": "Get events for a single project"
      }
    },
    "/v3/projects/{id}/fork": {
      "delete": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Remove a forked_from relationship"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Remove a forked_from relationship",
        "operationId": "deleteV3ProjectsIdFork",
        "summary": "Remove a forked_from relationship"
      }
    },
    "/v3/projects/{id}/fork/{forked_from_id}": {
      "post": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the project it was forked from",
            "in": "path",
            "name": "forked_from_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Mark this project as forked from another"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Mark this project as forked from another",
        "operationId": "postV3ProjectsIdForkForkedFromId",
        "summary": "Mark this project as forked from another"
      }
    },
    "/v3/projects/{id}/hooks": {
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectHook"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectHook"
                }
              }
            },
            "description": "Get project hooks"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Get project hooks",
        "operationId": "getV3ProjectsIdHooks",
        "summary": "Get project hooks"
      },
      "post": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectHook"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectHook"
                }
              }
            },
            "description": "Add hook to project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Add hook to project",
        "operationId": "postV3ProjectsIdHooks",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "build_events": {
                    "description": "Trigger hook on build events",
                    "type": "boolean"
                  },
                  "enable_ssl_verification": {
                    "description": "Do SSL verification when triggering the hook",
                    "type": "boolean"
                  },
                  "issues_events": {
                    "description": "Trigger hook on issues events",
                    "type": "boolean"
                  },
                  "merge_requests_events": {
                    "description": "Trigger hook on merge request events",
                    "type": "boolean"
                  },
                  "note_events": {
                    "description": "Trigger hook on note(comment) events",
                    "type": "boolean"
                  },
                  "pipeline_events": {
                    "description": "Trigger hook on pipeline events",
                    "type": "boolean"
                  },
                  "push_events": {
                    "description": "Trigger hook on push events",
                    "type": "boolean"
                  },
                  "tag_push_events": {
                    "description": "Trigger hook on tag push events",
                    "type": "boolean"
                  },
                  "token": {
                    "description": "Secret token to validate received payloads; this will not be returned in the response",
                    "type": "string"
                  },
                  "url": {
                    "description": "The URL to send the request to",
                    "type": "string"
                  },
                  "wiki_page_events": {
                    "description": "Trigger hook on wiki events",
                    "type": "boolean"
                  }
                },
                "required": [
                  "url"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Add hook to project"
      }
    },
    "/v3/projects/{id}/hooks/{hook_id}": {
      "delete": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the hook to delete",
            "in": "path",
            "name": "hook_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectHook"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectHook"
                }
              }
            },
            "description": "Deletes project hook"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Deletes project hook",
        "operationId": "deleteV3ProjectsIdHooksHookId",
        "summary": "Deletes project hook"
      },
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a project hook",
            "in": "path",
            "name": "hook_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectHook"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectHook"
                }
              }
            },
            "description": "Get a project hook"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Get a project hook",
        "operationId": "getV3ProjectsIdHooksHookId",
        "summary": "Get a project hook"
      },
      "put": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the hook to update",
            "in": "path",
            "name": "hook_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectHook"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectHook"
                }
              }
            },
            "description": "Update an existing project hook"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Update an existing project hook",
        "operationId": "putV3ProjectsIdHooksHookId",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "build_events": {
                    "description": "Trigger hook on build events",
                    "type": "boolean"
                  },
                  "enable_ssl_verification": {
                    "description": "Do SSL verification when triggering the hook",
                    "type": "boolean"
                  },
                  "issues_events": {
                    "description": "Trigger hook on issues events",
                    "type": "boolean"
                  },
                  "merge_requests_events": {
                    "description": "Trigger hook on merge request events",
                    "type": "boolean"
                  },
                  "note_events": {
                    "description": "Trigger hook on note(comment) events",
                    "type": "boolean"
                  },
                  "pipeline_events": {
                    "description": "Trigger hook on pipeline events",
                    "type": "boolean"
                  },
                  "push_events": {
                    "description": "Trigger hook on push events",
                    "type": "boolean"
                  },
                  "tag_push_events": {
                    "description": "Trigger hook on tag push events",
                    "type": "boolean"
                  },
                  "token": {
                    "description": "Secret token to validate received payloads; this will not be returned in the response",
                    "type": "string"
                  },
                  "url": {
                    "description": "The URL to send the request to",
                    "type": "string"
                  },
                  "wiki_page_events": {
                    "description": "Trigger hook on wiki events",
                    "type": "boolean"
                  }
                },
                "required": [
                  "url"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Update an existing project hook"
      }
    },
    "/v3/projects/{id}/issues": {
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Return opened, closed, or all issues",
            "in": "query",
            "name": "state",
            "required": false,
            "schema": {
              "default": "all",
              "enum": [
                "opened",
                "closed",
                "all"
              ],
              "type": "string"
            }
          },
          {
            "description": "Return the issue having the given `iid`",
            "in": "query",
            "name": "iid",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Comma-separated list of label names",
            "in": "query",
            "name": "labels",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Return issues for a specific milestone",
            "in": "query",
            "name": "milestone",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Return issues ordered by `created_at` or `updated_at` fields.",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "default": "created_at",
              "enum": [
                "created_at",
                "updated_at"
              ],
              "type": "string"
            }
          },
          {
            "description": "Return issues sorted in `asc` or `desc` order.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Issue"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Issue"
                }
              }
            },
            "description": "Get a list of project issues"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Get a list of project issues",
        "operationId": "getV3ProjectsIdIssues",
        "summary": "Get a list of project issues"
      },
      "post": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Issue"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Issue"
                }
              }
            },
            "description": "Create a new project issue"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Create a new project issue",
        "operationId": "postV3ProjectsIdIssues",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "assignee_id": {
                    "description": "The ID of a user to assign issue",
                    "format": "int32",
                    "type": "integer"
                  },
                  "confidential": {
                    "description": "Boolean parameter if the issue should be confidential",
                    "type": "boolean"
                  },
                  "created_at": {
                    "description": "Date time when the issue was created. Available only for admins and project owners.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "description": {
                    "description": "The description of an issue",
                    "type": "string"
                  },
                  "due_date": {
                    "description": "Date time string in the format YEAR-MONTH-DAY",
                    "type": "string"
                  },
                  "labels": {
                    "description": "Comma-separated list of label names",
                    "type": "string"
                  },
                  "merge_request_for_resolving_discussions": {
                    "description": "The IID of a merge request for which to resolve discussions",
                    "format": "int32",
                    "type": "integer"
                  },
                  "milestone_id": {
                    "description": "The ID of a milestone to assign issue",
                    "format": "int32",
                    "type": "integer"
                  },
                  "title": {
                    "description": "The title of an issue",
                    "type": "string"
                  }
                },
                "required": [
                  "title"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Create a new project issue"
      }
    },
    "/v3/projects/{id}/issues/{issue_id}": {
      "delete": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a project issue",
            "in": "path",
            "name": "issue_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete a project issue"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Delete a project issue",
        "operationId": "deleteV3ProjectsIdIssuesIssueId",
        "summary": "Delete a project issue"
      },
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a project issue",
            "in": "path",
            "name": "issue_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Issue"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Issue"
                }
              }
            },
            "description": "Get a single project issue"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Get a single project issue",
        "operationId": "getV3ProjectsIdIssuesIssueId",
        "summary": "Get a single project issue"
      },
      "put": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a project issue",
            "in": "path",
            "name": "issue_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Issue"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Issue"
                }
              }
            },
            "description": "Update an existing issue"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Update an existing issue",
        "operationId": "putV3ProjectsIdIssuesIssueId",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "assignee_id": {
                    "description": "The ID of a user to assign issue",
                    "format": "int32",
                    "type": "integer"
                  },
                  "confidential": {
                    "description": "Boolean parameter if the issue should be confidential",
                    "type": "boolean"
                  },
                  "created_at": {
                    "type": "string"
                  },
                  "description": {
                    "description": "The description of an issue",
                    "type": "string"
                  },
                  "due_date": {
                    "description": "Date time string in the format YEAR-MONTH-DAY",
                    "type": "string"
                  },
                  "labels": {
                    "description": "Comma-separated list of label names",
                    "type": "string"
                  },
                  "milestone_id": {
                    "description": "The ID of a milestone to assign issue",
                    "format": "int32",
                    "type": "integer"
                  },
                  "state_event": {
                    "description": "State of the issue",
                    "enum": [
                      "reopen",
                      "close"
                    ],
                    "type": "string"
                  },
                  "title": {
                    "description": "The title of an issue",
                    "type": "string"
                  },
                  "updated_at": {
                    "description": "Date time when the issue was updated. Available only for admins and project owners.",
                    "format": "date-time",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Update an existing issue"
      }
    },
    "/v3/projects/{id}/issues/{issue_id}/add_spent_time": {
      "post": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a project issue",
            "in": "path",
            "name": "issue_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Add spent time for a project issue"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Add spent time for a project issue",
        "operationId": "postV3ProjectsIdIssuesIssueIdAddSpentTime",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "duration": {
                    "description": "The duration to be parsed",
                    "type": "string"
                  }
                },
                "required": [
                  "duration"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Add spent time for a project issue"
      }
    },
    "/v3/projects/{id}/issues/{issue_id}/award_emoji": {
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of an Issue, Merge Request or Snippet",
            "in": "path",
            "name": "issue_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AwardEmoji"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AwardEmoji"
                }
              }
            },
            "description": "Get a list of project +awardable+ award emoji"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "This feature was introduced in 8.9",
        "operationId": "getV3ProjectsIdIssuesIssueIdAwardEmoji",
        "summary": "Get a list of project +awardable+ award emoji"
      },
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "issue_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AwardEmoji"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AwardEmoji"
                }
              }
            },
            "description": "Award a new Emoji"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "This feature was introduced in 8.9",
        "operationId": "postV3ProjectsIdIssuesIssueIdAwardEmoji",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "name": {
                    "description": "The name of a award_emoji (without colons)",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Award a new Emoji"
      }
    },
    "/v3/projects/{id}/issues/{issue_id}/award_emoji/{award_id}": {
      "delete": {
        "parameters": [
          {
            "description": "The ID of an award emoji",
            "in": "path",
            "name": "award_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "issue_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AwardEmoji"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AwardEmoji"
                }
              }
            },
            "description": "Delete a +awardables+ award emoji"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "This feature was introduced in 8.9",
        "operationId": "deleteV3ProjectsIdIssuesIssueIdAwardEmojiAwardId",
        "summary": "Delete a +awardables+ award emoji"
      },
      "get": {
        "parameters": [
          {
            "description": "The ID of the award",
            "in": "path",
            "name": "award_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "issue_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AwardEmoji"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AwardEmoji"
                }
              }
            },
            "description": "Get a specific award emoji"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "This feature was introduced in 8.9",
        "operationId": "getV3ProjectsIdIssuesIssueIdAwardEmojiAwardId",
        "summary": "Get a specific award emoji"
      }
    },
    "/v3/projects/{id}/issues/{issue_id}/move": {
      "post": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a project issue",
            "in": "path",
            "name": "issue_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Issue"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Issue"
                }
              }
            },
            "description": "Move an existing issue"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Move an existing issue",
        "operationId": "postV3ProjectsIdIssuesIssueIdMove",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "to_project_id": {
                    "description": "The ID of the new project",
                    "format": "int32",
                    "type": "integer"
                  }
                },
                "required": [
                  "to_project_id"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Move an existing issue"
      }
    },
    "/v3/projects/{id}/issues/{issue_id}/notes/{note_id}/award_emoji": {
      "get": {
        "parameters": [
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "issue_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AwardEmoji"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AwardEmoji"
                }
              }
            },
            "description": "Get a list of project +awardable+ award emoji"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "This feature was introduced in 8.9",
        "operationId": "getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmoji",
        "summary": "Get a list of project +awardable+ award emoji"
      },
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "issue_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AwardEmoji"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AwardEmoji"
                }
              }
            },
            "description": "Award a new Emoji"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "This feature was introduced in 8.9",
        "operationId": "postV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmoji",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "name": {
                    "description": "The name of a award_emoji (without colons)",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Award a new Emoji"
      }
    },
    "/v3/projects/{id}/issues/{issue_id}/notes/{note_id}/award_emoji/{award_id}": {
      "delete": {
        "parameters": [
          {
            "description": "The ID of an award emoji",
            "in": "path",
            "name": "award_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "issue_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AwardEmoji"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AwardEmoji"
                }
              }
            },
            "description": "Delete a +awardables+ award emoji"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "This feature was introduced in 8.9",
        "operationId": "deleteV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardId",
        "summary": "Delete a +awardables+ award emoji"
      },
      "get": {
        "parameters": [
          {
            "description": "The ID of the award",
            "in": "path",
            "name": "award_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "issue_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AwardEmoji"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AwardEmoji"
                }
              }
            },
            "description": "Get a specific award emoji"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "This feature was introduced in 8.9",
        "operationId": "getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardId",
        "summary": "Get a specific award emoji"
      }
    },
    "/v3/projects/{id}/issues/{issue_id}/reset_spent_time": {
      "post": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a project issue",
            "in": "path",
            "name": "issue_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Reset spent time for a project issue"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Reset spent time for a project issue",
        "operationId": "postV3ProjectsIdIssuesIssueIdResetSpentTime",
        "summary": "Reset spent time for a project issue"
      }
    },
    "/v3/projects/{id}/issues/{issue_id}/reset_time_estimate": {
      "post": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a project issue",
            "in": "path",
            "name": "issue_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Reset the time estimate for a project issue"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Reset the time estimate for a project issue",
        "operationId": "postV3ProjectsIdIssuesIssueIdResetTimeEstimate",
        "summary": "Reset the time estimate for a project issue"
      }
    },
    "/v3/projects/{id}/issues/{issue_id}/time_estimate": {
      "post": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a project issue",
            "in": "path",
            "name": "issue_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Set a time estimate for a project issue"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Set a time estimate for a project issue",
        "operationId": "postV3ProjectsIdIssuesIssueIdTimeEstimate",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "duration": {
                    "description": "The duration to be parsed",
                    "type": "string"
                  }
                },
                "required": [
                  "duration"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Set a time estimate for a project issue"
      }
    },
    "/v3/projects/{id}/issues/{issue_id}/time_stats": {
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a project issue",
            "in": "path",
            "name": "issue_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Show time stats for a project issue"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Show time stats for a project issue",
        "operationId": "getV3ProjectsIdIssuesIssueIdTimeStats",
        "summary": "Show time stats for a project issue"
      }
    },
    "/v3/projects/{id}/issues/{issue_id}/todo": {
      "post": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of an issuable",
            "in": "path",
            "name": "issue_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Todo"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Todo"
                }
              }
            },
            "description": "Create a todo on an issuable"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Create a todo on an issuable",
        "operationId": "postV3ProjectsIdIssuesIssueIdTodo",
        "summary": "Create a todo on an issuable"
      }
    },
    "/v3/projects/{id}/issues/{noteable_id}/notes": {
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the noteable",
            "in": "path",
            "name": "noteable_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            },
            "description": "Get a list of project +noteable+ notes"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Get a list of project +noteable+ notes",
        "operationId": "getV3ProjectsIdIssuesNoteableIdNotes",
        "summary": "Get a list of project +noteable+ notes"
      },
      "post": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the noteable",
            "in": "path",
            "name": "noteable_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            },
            "description": "Create a new +noteable+ note"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Create a new +noteable+ note",
        "operationId": "postV3ProjectsIdIssuesNoteableIdNotes",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "body": {
                    "description": "The content of a note",
                    "type": "string"
                  },
                  "created_at": {
                    "description": "The creation date of the note",
                    "type": "string"
                  }
                },
                "required": [
                  "body"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Create a new +noteable+ note"
      }
    },
    "/v3/projects/{id}/issues/{noteable_id}/notes/{note_id}": {
      "delete": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the noteable",
            "in": "path",
            "name": "noteable_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The ID of a note",
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            },
            "description": "Delete a +noteable+ note"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Delete a +noteable+ note",
        "operationId": "deleteV3ProjectsIdIssuesNoteableIdNotesNoteId",
        "summary": "Delete a +noteable+ note"
      },
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a note",
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The ID of the noteable",
            "in": "path",
            "name": "noteable_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            },
            "description": "Get a single +noteable+ note"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Get a single +noteable+ note",
        "operationId": "getV3ProjectsIdIssuesNoteableIdNotesNoteId",
        "summary": "Get a single +noteable+ note"
      },
      "put": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the noteable",
            "in": "path",
            "name": "noteable_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The ID of a note",
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            },
            "description": "Update an existing +noteable+ note"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Update an existing +noteable+ note",
        "operationId": "putV3ProjectsIdIssuesNoteableIdNotesNoteId",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "body": {
                    "description": "The content of a note",
                    "type": "string"
                  }
                },
                "required": [
                  "body"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Update an existing +noteable+ note"
      }
    },
    "/v3/projects/{id}/issues/{subscribable_id}/subscription": {
      "delete": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a resource",
            "in": "path",
            "name": "subscribable_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Issue"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Issue"
                }
              }
            },
            "description": "Unsubscribe from a resource"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Unsubscribe from a resource",
        "operationId": "deleteV3ProjectsIdIssuesSubscribableIdSubscription",
        "summary": "Unsubscribe from a resource"
      },
      "post": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a resource",
            "in": "path",
            "name": "subscribable_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Issue"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Issue"
                }
              }
            },
            "description": "Subscribe to a resource"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Subscribe to a resource",
        "operationId": "postV3ProjectsIdIssuesSubscribableIdSubscription",
        "summary": "Subscribe to a resource"
      }
    },
    "/v3/projects/{id}/keys": {
      "get": {
        "parameters": [
          {
            "description": "The ID of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SSHKey"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SSHKey"
                }
              }
            },
            "description": "Get a specific project's deploy keys"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Get a specific project's deploy keys",
        "operationId": "getV3ProjectsIdKeys",
        "summary": "Get a specific project's deploy keys"
      },
      "post": {
        "parameters": [
          {
            "description": "The ID of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SSHKey"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SSHKey"
                }
              }
            },
            "description": "Add new deploy key to currently authenticated user"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Add new deploy key to currently authenticated user",
        "operationId": "postV3ProjectsIdKeys",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "key": {
                    "description": "The new deploy key",
                    "type": "string"
                  },
                  "title": {
                    "description": "The name of the deploy key",
                    "type": "string"
                  }
                },
                "required": [
                  "key"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Add new deploy key to currently authenticated user"
      }
    },
    "/v3/projects/{id}/keys/{key_id}": {
      "delete": {
        "parameters": [
          {
            "description": "The ID of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the deploy key",
            "in": "path",
            "name": "key_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SSHKey"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SSHKey"
                }
              }
            },
            "description": "Delete deploy key for a project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Delete deploy key for a project",
        "operationId": "deleteV3ProjectsIdKeysKeyId",
        "summary": "Delete deploy key for a project"
      },
      "get": {
        "parameters": [
          {
            "description": "The ID of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the deploy key",
            "in": "path",
            "name": "key_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SSHKey"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SSHKey"
                }
              }
            },
            "description": "Get single deploy key"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Get single deploy key",
        "operationId": "getV3ProjectsIdKeysKeyId",
        "summary": "Get single deploy key"
      }
    },
    "/v3/projects/{id}/keys/{key_id}/disable": {
      "delete": {
        "parameters": [
          {
            "description": "The ID of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the deploy key",
            "in": "path",
            "name": "key_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SSHKey"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SSHKey"
                }
              }
            },
            "description": "Disable a deploy key for a project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "This feature was added in GitLab 8.11",
        "operationId": "deleteV3ProjectsIdKeysKeyIdDisable",
        "summary": "Disable a deploy key for a project"
      }
    },
    "/v3/projects/{id}/keys/{key_id}/enable": {
      "post": {
        "parameters": [
          {
            "description": "The ID of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the deploy key",
            "in": "path",
            "name": "key_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SSHKey"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SSHKey"
                }
              }
            },
            "description": "Enable a deploy key for a project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "This feature was added in GitLab 8.11",
        "operationId": "postV3ProjectsIdKeysKeyIdEnable",
        "summary": "Enable a deploy key for a project"
      }
    },
    "/v3/projects/{id}/labels": {
      "delete": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the label to be deleted",
            "in": "query",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Label"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Label"
                }
              }
            },
            "description": "Delete an existing label"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Delete an existing label",
        "operationId": "deleteV3ProjectsIdLabels",
        "summary": "Delete an existing label"
      },
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Label"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Label"
                }
              }
            },
            "description": "Get all labels of the project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Get all labels of the project",
        "operationId": "getV3ProjectsIdLabels",
        "summary": "Get all labels of the project"
      },
      "post": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Label"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Label"
                }
              }
            },
            "description": "Create a new label"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Create a new label",
        "operationId": "postV3ProjectsIdLabels",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "color": {
                    "description": "The color of the label given in 6-digit hex notation with leading '#' sign (e.g. #FFAABB)",
                    "type": "string"
                  },
                  "description": {
                    "description": "The description of label to be created",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the label to be created",
                    "type": "string"
                  },
                  "priority": {
                    "description": "The priority of the label",
                    "format": "int32",
                    "type": "integer"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Create a new label"
      },
      "put": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Label"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Label"
                }
              }
            },
            "description": "Update an existing label. At least one optional parameter is required."
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Update an existing label. At least one optional parameter is required.",
        "operationId": "putV3ProjectsIdLabels",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "color": {
                    "description": "The new color of the label given in 6-digit hex notation with leading '#' sign (e.g. #FFAABB)",
                    "type": "string"
                  },
                  "description": {
                    "description": "The new description of label",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the label to be updated",
                    "type": "string"
                  },
                  "new_name": {
                    "description": "The new name of the label",
                    "type": "string"
                  },
                  "priority": {
                    "description": "The priority of the label",
                    "format": "int32",
                    "type": "integer"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Update an existing label. At least one optional parameter is required."
      }
    },
    "/v3/projects/{id}/labels/{subscribable_id}/subscription": {
      "delete": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a resource",
            "in": "path",
            "name": "subscribable_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Label"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Label"
                }
              }
            },
            "description": "Unsubscribe from a resource"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Unsubscribe from a resource",
        "operationId": "deleteV3ProjectsIdLabelsSubscribableIdSubscription",
        "summary": "Unsubscribe from a resource"
      },
      "post": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a resource",
            "in": "path",
            "name": "subscribable_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Label"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Label"
                }
              }
            },
            "description": "Subscribe to a resource"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Subscribe to a resource",
        "operationId": "postV3ProjectsIdLabelsSubscribableIdSubscription",
        "summary": "Subscribe to a resource"
      }
    },
    "/v3/projects/{id}/members": {
      "get": {
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A query string to search for members",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            },
            "description": "Gets a list of group or project members viewable by the authenticated user."
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Gets a list of group or project members viewable by the authenticated user.",
        "operationId": "getV3ProjectsIdMembers",
        "summary": "Gets a list of group or project members viewable by the authenticated user."
      },
      "post": {
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            },
            "description": "Adds a member to a group or project."
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Adds a member to a group or project.",
        "operationId": "postV3ProjectsIdMembers",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "access_level": {
                    "description": "A valid access level (defaults: `30`, developer access level)",
                    "format": "int32",
                    "type": "integer"
                  },
                  "expires_at": {
                    "description": "Date string in the format YEAR-MONTH-DAY",
                    "format": "date-time",
                    "type": "string"
                  },
                  "user_id": {
                    "description": "The user ID of the new member",
                    "format": "int32",
                    "type": "integer"
                  }
                },
                "required": [
                  "user_id"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Adds a member to a group or project."
      }
    },
    "/v3/projects/{id}/members/{user_id}": {
      "delete": {
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The user ID of the member",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Removes a user from a group or project."
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Removes a user from a group or project.",
        "operationId": "deleteV3ProjectsIdMembersUserId",
        "summary": "Removes a user from a group or project."
      },
      "get": {
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The user ID of the member",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            },
            "description": "Gets a member of a group or project."
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Gets a member of a group or project.",
        "operationId": "getV3ProjectsIdMembersUserId",
        "summary": "Gets a member of a group or project."
      },
      "put": {
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The user ID of the new member",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            },
            "description": "Updates a member of a group or project."
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Updates a member of a group or project.",
        "operationId": "putV3ProjectsIdMembersUserId",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "access_level": {
                    "description": "A valid access level",
                    "format": "int32",
                    "type": "integer"
                  },
                  "expires_at": {
                    "description": "Date string in the format YEAR-MONTH-DAY",
                    "format": "date-time",
                    "type": "string"
                  }
                },
                "required": [
                  "access_level"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Updates a member of a group or project."
      }
    },
    "/v3/projects/{id}/merge_request/{merge_request_id}": {
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a merge request",
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MergeRequest"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MergeRequest"
                }
              }
            },
            "description": "Get a single merge request"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "This endpoint is deprecated and will be removed in GitLab 9.0.",
        "operationId": "getV3ProjectsIdMergeRequestMergeRequestId",
        "summary": "Get a single merge request"
      },
      "put": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MergeRequest"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MergeRequest"
                }
              }
            },
            "description": "Update a merge request"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Update a merge request",
        "operationId": "putV3ProjectsIdMergeRequestMergeRequestId",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "assignee_id": {
                    "description": "The ID of a user to assign the merge request",
                    "format": "int32",
                    "type": "integer"
                  },
                  "description": {
                    "description": "The description of the merge request",
                    "type": "string"
                  },
                  "labels": {
                    "description": "Comma-separated list of label names",
                    "type": "string"
                  },
                  "milestone_id": {
                    "description": "The ID of a milestone to assign the merge request",
                    "format": "int32",
                    "type": "integer"
                  },
                  "remove_source_branch": {
                    "description": "Remove source branch when merging",
                    "type": "boolean"
                  },
                  "state_event": {
                    "description": "Status of the merge request",
                    "enum": [
                      "close",
                      "reopen",
                      "merge"
                    ],
                    "type": "string"
                  },
                  "target_branch": {
                    "description": "The target branch",
                    "type": "string"
                  },
                  "title": {
                    "description": "The title of the merge request",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Update a merge request"
      }
    },
    "/v3/projects/{id}/merge_request/{merge_request_id}/cancel_merge_when_build_succeeds": {
      "post": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MergeRequest"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MergeRequest"
                }
              }
            },
            "description": "Cancel merge if \"Merge When Pipeline Succeeds\" is enabled"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Cancel merge if \"Merge When Pipeline Succeeds\" is enabled",
        "operationId": "postV3ProjectsIdMergeRequestMergeRequestIdCancelMergeWhenBuildSucceeds",
        "summary": "Cancel merge if \"Merge When Pipeline Succeeds\" is enabled"
      }
    },
    "/v3/projects/{id}/merge_request/{merge_request_id}/changes": {
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MergeRequestChanges"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MergeRequestChanges"
                }
              }
            },
            "description": "Show the merge request changes"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Show the merge request changes",
        "operationId": "getV3ProjectsIdMergeRequestMergeRequestIdChanges",
        "summary": "Show the merge request changes"
      }
    },
    "/v3/projects/{id}/merge_request/{merge_request_id}/closes_issues": {
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MRNote"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MRNote"
                }
              }
            },
            "description": "List issues that will be closed on merge"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "List issues that will be closed on merge",
        "operationId": "getV3ProjectsIdMergeRequestMergeRequestIdClosesIssues",
        "summary": "List issues that will be closed on merge"
      }
    },
    "/v3/projects/{id}/merge_request/{merge_request_id}/comments": {
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MRNote"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MRNote"
                }
              }
            },
            "description": "Get the comments of a merge request"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Duplicate. DEPRECATED and WILL BE REMOVED in 9.0",
        "operationId": "getV3ProjectsIdMergeRequestMergeRequestIdComments",
        "summary": "Get the comments of a merge request"
      },
      "post": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MRNote"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MRNote"
                }
              }
            },
            "description": "Post a comment to a merge request"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Duplicate. DEPRECATED and WILL BE REMOVED in 9.0",
        "operationId": "postV3ProjectsIdMergeRequestMergeRequestIdComments",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "note": {
                    "description": "The text of the comment",
                    "type": "string"
                  }
                },
                "required": [
                  "note"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Post a comment to a merge request"
      }
    },
    "/v3/projects/{id}/merge_request/{merge_request_id}/commits": {
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepoCommit"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RepoCommit"
                }
              }
            },
            "description": "Get the commits of a merge request"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Get the commits of a merge request",
        "operationId": "getV3ProjectsIdMergeRequestMergeRequestIdCommits",
        "summary": "Get the commits of a merge request"
      }
    },
    "/v3/projects/{id}/merge_request/{merge_request_id}/merge": {
      "put": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MergeRequest"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MergeRequest"
                }
              }
            },
            "description": "Merge a merge request"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Merge a merge request",
        "operationId": "putV3ProjectsIdMergeRequestMergeRequestIdMerge",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "merge_commit_message": {
                    "description": "Custom merge commit message",
                    "type": "string"
                  },
                  "merge_when_build_succeeds": {
                    "description": "When true, this merge request will be merged when the pipeline succeeds",
                    "type": "boolean"
                  },
                  "sha": {
                    "description": "When present, must have the HEAD SHA of the source branch",
                    "type": "string"
                  },
                  "should_remove_source_branch": {
                    "description": "When true, the source branch will be deleted if possible",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Merge a merge request"
      }
    },
    "/v3/projects/{id}/merge_request/{subscribable_id}/subscription": {
      "delete": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a resource",
            "in": "path",
            "name": "subscribable_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MergeRequest"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MergeRequest"
                }
              }
            },
            "description": "Unsubscribe from a resource"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Unsubscribe from a resource",
        "operationId": "deleteV3ProjectsIdMergeRequestSubscribableIdSubscription",
        "summary": "Unsubscribe from a resource"
      },
      "post": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a resource",
            "in": "path",
            "name": "subscribable_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MergeRequest"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MergeRequest"
                }
              }
            },
            "description": "Subscribe to a resource"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Subscribe to a resource",
        "operationId": "postV3ProjectsIdMergeRequestSubscribableIdSubscription",
        "summary": "Subscribe to a resource"
      }
    },
    "/v3/projects/{id}/merge_requests": {
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Return opened, closed, merged, or all merge requests",
            "in": "query",
            "name": "state",
            "required": false,
            "schema": {
              "default": "all",
              "enum": [
                "opened",
                "closed",
                "merged",
                "all"
              ],
              "type": "string"
            }
          },
          {
            "description": "Return merge requests ordered by `created_at` or `updated_at` fields.",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "default": "created_at",
              "enum": [
                "created_at",
                "updated_at"
              ],
              "type": "string"
            }
          },
          {
            "description": "Return merge requests sorted in `asc` or `desc` order.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MergeRequest"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MergeRequest"
                }
              }
            },
            "description": "List merge requests"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "List merge requests",
        "operationId": "getV3ProjectsIdMergeRequests",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "iid": {
                    "description": "The IID of the merge requests",
                    "items": {
                      "format": "int32",
                      "type": "integer"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "List merge requests"
      },
      "post": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MergeRequest"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MergeRequest"
                }
              }
            },
            "description": "Create a merge request"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Create a merge request",
        "operationId": "postV3ProjectsIdMergeRequests",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "assignee_id": {
                    "description": "The ID of a user to assign the merge request",
                    "format": "int32",
                    "type": "integer"
                  },
                  "description": {
                    "description": "The description of the merge request",
                    "type": "string"
                  },
                  "labels": {
                    "description": "Comma-separated list of label names",
                    "type": "string"
                  },
                  "milestone_id": {
                    "description": "The ID of a milestone to assign the merge request",
                    "format": "int32",
                    "type": "integer"
                  },
                  "remove_source_branch": {
                    "description": "Remove source branch when merging",
                    "type": "boolean"
                  },
                  "source_branch": {
                    "description": "The source branch",
                    "type": "string"
                  },
                  "target_branch": {
                    "description": "The target branch",
                    "type": "string"
                  },
                  "target_project_id": {
                    "description": "The target project of the merge request defaults to the :id of the project",
                    "format": "int32",
                    "type": "integer"
                  },
                  "title": {
                    "description": "The title of the merge request",
                    "type": "string"
                  }
                },
                "required": [
                  "title"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Create a merge request"
      }
    },
    "/v3/projects/{id}/merge_requests/{merge_request_id}": {
      "delete": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a merge request",
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete a merge request"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Delete a merge request",
        "operationId": "deleteV3ProjectsIdMergeRequestsMergeRequestId",
        "summary": "Delete a merge request"
      },
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MergeRequest"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MergeRequest"
                }
              }
            },
            "description": "Get a single merge request"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Get a single merge request",
        "operationId": "getV3ProjectsIdMergeRequestsMergeRequestId",
        "summary": "Get a single merge request"
      },
      "put": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MergeRequest"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MergeRequest"
                }
              }
            },
            "description": "Update a merge request"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Update a merge request",
        "operationId": "putV3ProjectsIdMergeRequestsMergeRequestId",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "assignee_id": {
                    "description": "The ID of a user to assign the merge request",
                    "format": "int32",
                    "type": "integer"
                  },
                  "description": {
                    "description": "The description of the merge request",
                    "type": "string"
                  },
                  "labels": {
                    "description": "Comma-separated list of label names",
                    "type": "string"
                  },
                  "milestone_id": {
                    "description": "The ID of a milestone to assign the merge request",
                    "format": "int32",
                    "type": "integer"
                  },
                  "remove_source_branch": {
                    "description": "Remove source branch when merging",
                    "type": "boolean"
                  },
                  "state_event": {
                    "description": "Status of the merge request",
                    "enum": [
                      "close",
                      "reopen",
                      "merge"
                    ],
                    "type": "string"
                  },
                  "target_branch": {
                    "description": "The target branch",
                    "type": "string"
                  },
                  "title": {
                    "description": "The title of the merge request",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Update a merge request"
      }
    },
    "/v3/projects/{id}/merge_requests/{merge_request_id}/add_spent_time": {
      "post": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a project merge_request",
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Add spent time for a project merge_request"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Add spent time for a project merge_request",
        "operationId": "postV3ProjectsIdMergeRequestsMergeRequestIdAddSpentTime",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "duration": {
                    "description": "The duration to be parsed",
                    "type": "string"
                  }
                },
                "required": [
                  "duration"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Add spent time for a project merge_request"
      }
    },
    "/v3/projects/{id}/merge_requests/{merge_request_id}/award_emoji": {
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of an Issue, Merge Request or Snippet",
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AwardEmoji"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AwardEmoji"
                }
              }
            },
            "description": "Get a list of project +awardable+ award emoji"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "This feature was introduced in 8.9",
        "operationId": "getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmoji",
        "summary": "Get a list of project +awardable+ award emoji"
      },
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AwardEmoji"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AwardEmoji"
                }
              }
            },
            "description": "Award a new Emoji"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "This feature was introduced in 8.9",
        "operationId": "postV3ProjectsIdMergeRequestsMergeRequestIdAwardEmoji",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "name": {
                    "description": "The name of a award_emoji (without colons)",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Award a new Emoji"
      }
    },
    "/v3/projects/{id}/merge_requests/{merge_request_id}/award_emoji/{award_id}": {
      "delete": {
        "parameters": [
          {
            "description": "The ID of an award emoji",
            "in": "path",
            "name": "award_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AwardEmoji"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AwardEmoji"
                }
              }
            },
            "description": "Delete a +awardables+ award emoji"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "This feature was introduced in 8.9",
        "operationId": "deleteV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardId",
        "summary": "Delete a +awardables+ award emoji"
      },
      "get": {
        "parameters": [
          {
            "description": "The ID of the award",
            "in": "path",
            "name": "award_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AwardEmoji"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AwardEmoji"
                }
              }
            },
            "description": "Get a specific award emoji"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "This feature was introduced in 8.9",
        "operationId": "getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardId",
        "summary": "Get a specific award emoji"
      }
    },
    "/v3/projects/{id}/merge_requests/{merge_request_id}/cancel_merge_when_build_succeeds": {
      "post": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MergeRequest"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MergeRequest"
                }
              }
            },
            "description": "Cancel merge if \"Merge When Pipeline Succeeds\" is enabled"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Cancel merge if \"Merge When Pipeline Succeeds\" is enabled",
        "operationId": "postV3ProjectsIdMergeRequestsMergeRequestIdCancelMergeWhenBuildSucceeds",
        "summary": "Cancel merge if \"Merge When Pipeline Succeeds\" is enabled"
      }
    },
    "/v3/projects/{id}/merge_requests/{merge_request_id}/changes": {
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MergeRequestChanges"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MergeRequestChanges"
                }
              }
            },
            "description": "Show the merge request changes"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Show the merge request changes",
        "operationId": "getV3ProjectsIdMergeRequestsMergeRequestIdChanges",
        "summary": "Show the merge request changes"
      }
    },
    "/v3/projects/{id}/merge_requests/{merge_request_id}/closes_issues": {
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MRNote"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MRNote"
                }
              }
            },
            "description": "List issues that will be closed on merge"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "List issues that will be closed on merge",
        "operationId": "getV3ProjectsIdMergeRequestsMergeRequestIdClosesIssues",
        "summary": "List issues that will be closed on merge"
      }
    },
    "/v3/projects/{id}/merge_requests/{merge_request_id}/comments": {
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MRNote"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MRNote"
                }
              }
            },
            "description": "Get the comments of a merge request"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Duplicate. DEPRECATED and WILL BE REMOVED in 9.0",
        "operationId": "getV3ProjectsIdMergeRequestsMergeRequestIdComments",
        "summary": "Get the comments of a merge request"
      },
      "post": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MRNote"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MRNote"
                }
              }
            },
            "description": "Post a comment to a merge request"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Duplicate. DEPRECATED and WILL BE REMOVED in 9.0",
        "operationId": "postV3ProjectsIdMergeRequestsMergeRequestIdComments",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "note": {
                    "description": "The text of the comment",
                    "type": "string"
                  }
                },
                "required": [
                  "note"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Post a comment to a merge request"
      }
    },
    "/v3/projects/{id}/merge_requests/{merge_request_id}/commits": {
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepoCommit"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RepoCommit"
                }
              }
            },
            "description": "Get the commits of a merge request"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Get the commits of a merge request",
        "operationId": "getV3ProjectsIdMergeRequestsMergeRequestIdCommits",
        "summary": "Get the commits of a merge request"
      }
    },
    "/v3/projects/{id}/merge_requests/{merge_request_id}/merge": {
      "put": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MergeRequest"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MergeRequest"
                }
              }
            },
            "description": "Merge a merge request"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Merge a merge request",
        "operationId": "putV3ProjectsIdMergeRequestsMergeRequestIdMerge",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "merge_commit_message": {
                    "description": "Custom merge commit message",
                    "type": "string"
                  },
                  "merge_when_build_succeeds": {
                    "description": "When true, this merge request will be merged when the pipeline succeeds",
                    "type": "boolean"
                  },
                  "sha": {
                    "description": "When present, must have the HEAD SHA of the source branch",
                    "type": "string"
                  },
                  "should_remove_source_branch": {
                    "description": "When true, the source branch will be deleted if possible",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Merge a merge request"
      }
    },
    "/v3/projects/{id}/merge_requests/{merge_request_id}/notes/{note_id}/award_emoji": {
      "get": {
        "parameters": [
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AwardEmoji"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AwardEmoji"
                }
              }
            },
            "description": "Get a list of project +awardable+ award emoji"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "This feature was introduced in 8.9",
        "operationId": "getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmoji",
        "summary": "Get a list of project +awardable+ award emoji"
      },
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AwardEmoji"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AwardEmoji"
                }
              }
            },
            "description": "Award a new Emoji"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "This feature was introduced in 8.9",
        "operationId": "postV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmoji",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "name": {
                    "description": "The name of a award_emoji (without colons)",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Award a new Emoji"
      }
    },
    "/v3/projects/{id}/merge_requests/{merge_request_id}/notes/{note_id}/award_emoji/{award_id}": {
      "delete": {
        "parameters": [
          {
            "description": "The ID of an award emoji",
            "in": "path",
            "name": "award_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AwardEmoji"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AwardEmoji"
                }
              }
            },
            "description": "Delete a +awardables+ award emoji"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "This feature was introduced in 8.9",
        "operationId": "deleteV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardId",
        "summary": "Delete a +awardables+ award emoji"
      },
      "get": {
        "parameters": [
          {
            "description": "The ID of the award",
            "in": "path",
            "name": "award_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AwardEmoji"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AwardEmoji"
                }
              }
            },
            "description": "Get a specific award emoji"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "This feature was introduced in 8.9",
        "operationId": "getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardId",
        "summary": "Get a specific award emoji"
      }
    },
    "/v3/projects/{id}/merge_requests/{merge_request_id}/reset_spent_time": {
      "post": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a project merge_request",
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Reset spent time for a project merge_request"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Reset spent time for a project merge_request",
        "operationId": "postV3ProjectsIdMergeRequestsMergeRequestIdResetSpentTime",
        "summary": "Reset spent time for a project merge_request"
      }
    },
    "/v3/projects/{id}/merge_requests/{merge_request_id}/reset_time_estimate": {
      "post": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a project merge_request",
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Reset the time estimate for a project merge_request"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Reset the time estimate for a project merge_request",
        "operationId": "postV3ProjectsIdMergeRequestsMergeRequestIdResetTimeEstimate",
        "summary": "Reset the time estimate for a project merge_request"
      }
    },
    "/v3/projects/{id}/merge_requests/{merge_request_id}/time_estimate": {
      "post": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a project merge_request",
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Set a time estimate for a project merge_request"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Set a time estimate for a project merge_request",
        "operationId": "postV3ProjectsIdMergeRequestsMergeRequestIdTimeEstimate",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "duration": {
                    "description": "The duration to be parsed",
                    "type": "string"
                  }
                },
                "required": [
                  "duration"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Set a time estimate for a project merge_request"
      }
    },
    "/v3/projects/{id}/merge_requests/{merge_request_id}/time_stats": {
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a project merge_request",
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Show time stats for a project merge_request"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Show time stats for a project merge_request",
        "operationId": "getV3ProjectsIdMergeRequestsMergeRequestIdTimeStats",
        "summary": "Show time stats for a project merge_request"
      }
    },
    "/v3/projects/{id}/merge_requests/{merge_request_id}/todo": {
      "post": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of an issuable",
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Todo"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Todo"
                }
              }
            },
            "description": "Create a todo on an issuable"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Create a todo on an issuable",
        "operationId": "postV3ProjectsIdMergeRequestsMergeRequestIdTodo",
        "summary": "Create a todo on an issuable"
      }
    },
    "/v3/projects/{id}/merge_requests/{merge_request_id}/versions": {
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a merge request",
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MergeRequestDiff"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MergeRequestDiff"
                }
              }
            },
            "description": "Get a list of merge request diff versions"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "This feature was introduced in GitLab 8.12.",
        "operationId": "getV3ProjectsIdMergeRequestsMergeRequestIdVersions",
        "summary": "Get a list of merge request diff versions"
      }
    },
    "/v3/projects/{id}/merge_requests/{merge_request_id}/versions/{version_id}": {
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a merge request",
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The ID of a merge request diff version",
            "in": "path",
            "name": "version_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MergeRequestDiffFull"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MergeRequestDiffFull"
                }
              }
            },
            "description": "Get a single merge request diff version"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "This feature was introduced in GitLab 8.12.",
        "operationId": "getV3ProjectsIdMergeRequestsMergeRequestIdVersionsVersionId",
        "summary": "Get a single merge request diff version"
      }
    },
    "/v3/projects/{id}/merge_requests/{noteable_id}/notes": {
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the noteable",
            "in": "path",
            "name": "noteable_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            },
            "description": "Get a list of project +noteable+ notes"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Get a list of project +noteable+ notes",
        "operationId": "getV3ProjectsIdMergeRequestsNoteableIdNotes",
        "summary": "Get a list of project +noteable+ notes"
      },
      "post": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the noteable",
            "in": "path",
            "name": "noteable_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            },
            "description": "Create a new +noteable+ note"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Create a new +noteable+ note",
        "operationId": "postV3ProjectsIdMergeRequestsNoteableIdNotes",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "body": {
                    "description": "The content of a note",
                    "type": "string"
                  },
                  "created_at": {
                    "description": "The creation date of the note",
                    "type": "string"
                  }
                },
                "required": [
                  "body"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Create a new +noteable+ note"
      }
    },
    "/v3/projects/{id}/merge_requests/{noteable_id}/notes/{note_id}": {
      "delete": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the noteable",
            "in": "path",
            "name": "noteable_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The ID of a note",
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            },
            "description": "Delete a +noteable+ note"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Delete a +noteable+ note",
        "operationId": "deleteV3ProjectsIdMergeRequestsNoteableIdNotesNoteId",
        "summary": "Delete a +noteable+ note"
      },
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a note",
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The ID of the noteable",
            "in": "path",
            "name": "noteable_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            },
            "description": "Get a single +noteable+ note"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Get a single +noteable+ note",
        "operationId": "getV3ProjectsIdMergeRequestsNoteableIdNotesNoteId",
        "summary": "Get a single +noteable+ note"
      },
      "put": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the noteable",
            "in": "path",
            "name": "noteable_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The ID of a note",
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            },
            "description": "Update an existing +noteable+ note"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Update an existing +noteable+ note",
        "operationId": "putV3ProjectsIdMergeRequestsNoteableIdNotesNoteId",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "body": {
                    "description": "The content of a note",
                    "type": "string"
                  }
                },
                "required": [
                  "body"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Update an existing +noteable+ note"
      }
    },
    "/v3/projects/{id}/merge_requests/{subscribable_id}/subscription": {
      "delete": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a resource",
            "in": "path",
            "name": "subscribable_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MergeRequest"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MergeRequest"
                }
              }
            },
            "description": "Unsubscribe from a resource"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Unsubscribe from a resource",
        "operationId": "deleteV3ProjectsIdMergeRequestsSubscribableIdSubscription",
        "summary": "Unsubscribe from a resource"
      },
      "post": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a resource",
            "in": "path",
            "name": "subscribable_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MergeRequest"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MergeRequest"
                }
              }
            },
            "description": "Subscribe to a resource"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Subscribe to a resource",
        "operationId": "postV3ProjectsIdMergeRequestsSubscribableIdSubscription",
        "summary": "Subscribe to a resource"
      }
    },
    "/v3/projects/{id}/milestones": {
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Return \"active\", \"closed\", or \"all\" milestones",
            "in": "query",
            "name": "state",
            "required": false,
            "schema": {
              "default": "all",
              "enum": [
                "active",
                "closed",
                "all"
              ],
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Milestone"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Milestone"
                }
              }
            },
            "description": "Get a list of project milestones"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Get a list of project milestones",
        "operationId": "getV3ProjectsIdMilestones",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "iid": {
                    "description": "The IID of the milestone",
                    "items": {
                      "format": "int32",
                      "type": "integer"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Get a list of project milestones"
      },
      "post": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Milestone"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Milestone"
                }
              }
            },
            "description": "Create a new project milestone"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Create a new project milestone",
        "operationId": "postV3ProjectsIdMilestones",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "description": {
                    "description": "The description of the milestone",
                    "type": "string"
                  },
                  "due_date": {
                    "description": "The due date of the milestone. The ISO 8601 date format (%Y-%m-%d)",
                    "type": "string"
                  },
                  "start_date": {
                    "description": "The start date of the milestone. The ISO 8601 date format (%Y-%m-%d)",
                    "type": "string"
                  },
                  "title": {
                    "description": "The title of the milestone",
                    "type": "string"
                  }
                },
                "required": [
                  "title"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Create a new project milestone"
      }
    },
    "/v3/projects/{id}/milestones/{milestone_id}": {
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a project milestone",
            "in": "path",
            "name": "milestone_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Milestone"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Milestone"
                }
              }
            },
            "description": "Get a single project milestone"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Get a single project milestone",
        "operationId": "getV3ProjectsIdMilestonesMilestoneId",
        "summary": "Get a single project milestone"
      },
      "put": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a project milestone",
            "in": "path",
            "name": "milestone_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Milestone"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Milestone"
                }
              }
            },
            "description": "Update an existing project milestone"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Update an existing project milestone",
        "operationId": "putV3ProjectsIdMilestonesMilestoneId",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "description": {
                    "description": "The description of the milestone",
                    "type": "string"
                  },
                  "due_date": {
                    "description": "The due date of the milestone. The ISO 8601 date format (%Y-%m-%d)",
                    "type": "string"
                  },
                  "start_date": {
                    "description": "The start date of the milestone. The ISO 8601 date format (%Y-%m-%d)",
                    "type": "string"
                  },
                  "state_event": {
                    "description": "The state event of the milestone ",
                    "enum": [
                      "close",
                      "activate"
                    ],
                    "type": "string"
                  },
                  "title": {
                    "description": "The title of the milestone",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Update an existing project milestone"
      }
    },
    "/v3/projects/{id}/milestones/{milestone_id}/issues": {
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a project milestone",
            "in": "path",
            "name": "milestone_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Issue"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Issue"
                }
              }
            },
            "description": "Get all issues for a single project milestone"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Get all issues for a single project milestone",
        "operationId": "getV3ProjectsIdMilestonesMilestoneIdIssues",
        "summary": "Get all issues for a single project milestone"
      }
    },
    "/v3/projects/{id}/notification_settings": {
      "get": {
        "parameters": [
          {
            "description": "The group ID or project ID or project NAMESPACE/PROJECT_NAME",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationSetting"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationSetting"
                }
              }
            },
            "description": "Get project level notification level settings, defaults to Global"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "This feature was introduced in GitLab 8.12",
        "operationId": "getV3ProjectsIdNotificationSettings",
        "summary": "Get project level notification level settings, defaults to Global"
      },
      "put": {
        "parameters": [
          {
            "description": "The group ID or project ID or project NAMESPACE/PROJECT_NAME",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationSetting"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationSetting"
                }
              }
            },
            "description": "Update project level notification level settings, defaults to Global"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "This feature was introduced in GitLab 8.12",
        "operationId": "putV3ProjectsIdNotificationSettings",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "close_issue": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "close_merge_request": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "failed_pipeline": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "level": {
                    "description": "The project notification level",
                    "type": "string"
                  },
                  "merge_merge_request": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "new_issue": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "new_merge_request": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "new_note": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "reassign_issue": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "reassign_merge_request": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "reopen_issue": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "reopen_merge_request": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "success_pipeline": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Update project level notification level settings, defaults to Global"
      }
    },
    "/v3/projects/{id}/pipeline": {
      "post": {
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pipeline"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Pipeline"
                }
              }
            },
            "description": "Create a new pipeline"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "This feature was introduced in GitLab 8.14",
        "operationId": "postV3ProjectsIdPipeline",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "ref": {
                    "description": "Reference",
                    "type": "string"
                  }
                },
                "required": [
                  "ref"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Create a new pipeline"
      }
    },
    "/v3/projects/{id}/pipelines": {
      "get": {
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Either running, branches, or tags",
            "in": "query",
            "name": "scope",
            "required": false,
            "schema": {
              "enum": [
                "running",
                "branches",
                "tags"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pipeline"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Pipeline"
                }
              }
            },
            "description": "Get all Pipelines of the project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "getV3ProjectsIdPipelines",
        "summary": "Get all Pipelines of the project"
      }
    },
    "/v3/projects/{id}/pipelines/{pipeline_id}": {
      "get": {
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The pipeline ID",
            "in": "path",
            "name": "pipeline_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pipeline"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Pipeline"
                }
              }
            },
            "description": "Gets a specific pipeline for the project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "This feature was introduced in GitLab 8.11",
        "operationId": "getV3ProjectsIdPipelinesPipelineId",
        "summary": "Gets a specific pipeline for the project"
      }
    },
    "/v3/projects/{id}/pipelines/{pipeline_id}/cancel": {
      "post": {
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The pipeline ID",
            "in": "path",
            "name": "pipeline_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pipeline"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Pipeline"
                }
              }
            },
            "description": "Cancel all builds in the pipeline"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "postV3ProjectsIdPipelinesPipelineIdCancel",
        "summary": "Cancel all builds in the pipeline"
      }
    },
    "/v3/projects/{id}/pipelines/{pipeline_id}/retry": {
      "post": {
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The pipeline ID",
            "in": "path",
            "name": "pipeline_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pipeline"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Pipeline"
                }
              }
            },
            "description": "Retry failed builds in the pipeline"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "postV3ProjectsIdPipelinesPipelineIdRetry",
        "summary": "Retry failed builds in the pipeline"
      }
    },
    "/v3/projects/{id}/repository/archive": {
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The commit sha of the archive to be downloaded",
            "in": "query",
            "name": "sha",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The archive format",
            "in": "query",
            "name": "format",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get an archive of the repository"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Get an archive of the repository",
        "operationId": "getV3ProjectsIdRepositoryArchive",
        "summary": "Get an archive of the repository"
      }
    },
    "/v3/projects/{id}/repository/blobs/{sha}": {
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The commit, branch name, or tag name",
            "in": "path",
            "name": "sha",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The path to the file to display",
            "in": "query",
            "name": "filepath",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a raw file contents"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Get a raw file contents",
        "operationId": "getV3ProjectsIdRepositoryBlobsSha",
        "summary": "Get a raw file contents"
      }
    },
    "/v3/projects/{id}/repository/branches": {
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepoBranch"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RepoBranch"
                }
              }
            },
            "description": "Get a project repository branches"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Get a project repository branches",
        "operationId": "getV3ProjectsIdRepositoryBranches",
        "summary": "Get a project repository branches"
      },
      "post": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepoBranch"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RepoBranch"
                }
              }
            },
            "description": "Create branch"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Create branch",
        "operationId": "postV3ProjectsIdRepositoryBranches",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "branch_name": {
                    "description": "The name of the branch",
                    "type": "string"
                  },
                  "ref": {
                    "description": "Create branch from commit sha or existing branch",
                    "type": "string"
                  }
                },
                "required": [
                  "branch_name"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Create branch"
      }
    },
    "/v3/projects/{id}/repository/branches/{branch}": {
      "delete": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the branch",
            "in": "path",
            "name": "branch",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete a branch"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Delete a branch",
        "operationId": "deleteV3ProjectsIdRepositoryBranchesBranch",
        "summary": "Delete a branch"
      },
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the branch",
            "in": "path",
            "name": "branch",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepoBranch"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RepoBranch"
                }
              }
            },
            "description": "Get a single branch"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Get a single branch",
        "operationId": "getV3ProjectsIdRepositoryBranchesBranch",
        "summary": "Get a single branch"
      }
    },
    "/v3/projects/{id}/repository/branches/{branch}/protect": {
      "put": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the branch",
            "in": "path",
            "name": "branch",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepoBranch"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RepoBranch"
                }
              }
            },
            "description": "Protect a single branch"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Protect a single branch",
        "operationId": "putV3ProjectsIdRepositoryBranchesBranchProtect",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "developers_can_merge": {
                    "description": "Flag if developers can merge to that branch",
                    "type": "boolean"
                  },
                  "developers_can_push": {
                    "description": "Flag if developers can push to that branch",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Protect a single branch"
      }
    },
    "/v3/projects/{id}/repository/branches/{branch}/unprotect": {
      "put": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the branch",
            "in": "path",
            "name": "branch",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepoBranch"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RepoBranch"
                }
              }
            },
            "description": "Unprotect a single branch"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Unprotect a single branch",
        "operationId": "putV3ProjectsIdRepositoryBranchesBranchUnprotect",
        "summary": "Unprotect a single branch"
      }
    },
    "/v3/projects/{id}/repository/commits": {
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of a repository branch or tag, if not given the default branch is used",
            "in": "query",
            "name": "ref_name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Only commits after or in this date will be returned",
            "in": "query",
            "name": "since",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Only commits before or in this date will be returned",
            "in": "query",
            "name": "until",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The page for pagination",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The number of results per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The file path",
            "in": "query",
            "name": "path",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepoCommit"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RepoCommit"
                }
              }
            },
            "description": "Get a project repository commits"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Get a project repository commits",
        "operationId": "getV3ProjectsIdRepositoryCommits",
        "summary": "Get a project repository commits"
      },
      "post": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepoCommitDetail"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RepoCommitDetail"
                }
              }
            },
            "description": "Commit multiple file changes as one commit"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "This feature was introduced in GitLab 8.13",
        "operationId": "postV3ProjectsIdRepositoryCommits",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "actions": {
                    "description": "Actions to perform in commit",
                    "items": {
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "author_email": {
                    "description": "Author email for commit",
                    "type": "string"
                  },
                  "author_name": {
                    "description": "Author name for commit",
                    "type": "string"
                  },
                  "branch_name": {
                    "description": "The name of branch",
                    "type": "string"
                  },
                  "commit_message": {
                    "description": "Commit message",
                    "type": "string"
                  }
                },
                "required": [
                  "branch_name"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Commit multiple file changes as one commit"
      }
    },
    "/v3/projects/{id}/repository/commits/{sha}": {
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A commit sha, or the name of a branch or tag",
            "in": "path",
            "name": "sha",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepoCommitDetail"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RepoCommitDetail"
                }
              }
            },
            "description": "Get a specific commit of a project"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Get a specific commit of a project",
        "operationId": "getV3ProjectsIdRepositoryCommitsSha",
        "summary": "Get a specific commit of a project"
      }
    },
    "/v3/projects/{id}/repository/commits/{sha}/blob": {
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The commit, branch name, or tag name",
            "in": "path",
            "name": "sha",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The path to the file to display",
            "in": "query",
            "name": "filepath",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a raw file contents"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Get a raw file contents",
        "operationId": "getV3ProjectsIdRepositoryCommitsShaBlob",
        "summary": "Get a raw file contents"
      }
    },
    "/v3/projects/{id}/repository/commits/{sha}/builds": {
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The SHA id of a commit",
            "in": "path",
            "name": "sha",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The scope of builds to show",
            "in": "query",
            "name": "scope",
            "required": false,
            "schema": {
              "enum": [
                "pending",
                "running",
                "failed",
                "success",
                "canceled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Build"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Build"
                }
              }
            },
            "description": "Get builds for a specific commit of a project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Get builds for a specific commit of a project",
        "operationId": "getV3ProjectsIdRepositoryCommitsShaBuilds",
        "summary": "Get builds for a specific commit of a project"
      }
    },
    "/v3/projects/{id}/repository/commits/{sha}/cherry_pick": {
      "post": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A commit sha to be cherry picked",
            "in": "path",
            "name": "sha",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepoCommit"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RepoCommit"
                }
              }
            },
            "description": "Cherry pick commit into a branch"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "This feature was introduced in GitLab 8.15",
        "operationId": "postV3ProjectsIdRepositoryCommitsShaCherryPick",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "branch": {
                    "description": "The name of the branch",
                    "type": "string"
                  }
                },
                "required": [
                  "branch"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Cherry pick commit into a branch"
      }
    },
    "/v3/projects/{id}/repository/commits/{sha}/comments": {
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "A commit sha, or the name of a branch or tag",
            "in": "path",
            "name": "sha",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommitNote"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommitNote"
                }
              }
            },
            "description": "Get a commit's comments"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Get a commit's comments",
        "operationId": "getV3ProjectsIdRepositoryCommitsShaComments",
        "summary": "Get a commit's comments"
      },
      "post": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The commit's SHA",
            "in": "path",
            "name": "sha",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommitNote"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommitNote"
                }
              }
            },
            "description": "Post comment to commit"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Post comment to commit",
        "operationId": "postV3ProjectsIdRepositoryCommitsShaComments",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "line": {
                    "description": "The line number",
                    "format": "int32",
                    "type": "integer"
                  },
                  "line_type": {
                    "default": "new",
                    "description": "The type of the line",
                    "enum": [
                      "new",
                      "old"
                    ],
                    "type": "string"
                  },
                  "note": {
                    "description": "The text of the comment",
                    "type": "string"
                  },
                  "path": {
                    "description": "The file path",
                    "type": "string"
                  }
                },
                "required": [
                  "note"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Post comment to commit"
      }
    },
    "/v3/projects/{id}/repository/commits/{sha}/diff": {
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A commit sha, or the name of a branch or tag",
            "in": "path",
            "name": "sha",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get the diff for a specific commit of a project"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Get the diff for a specific commit of a project",
        "operationId": "getV3ProjectsIdRepositoryCommitsShaDiff",
        "summary": "Get the diff for a specific commit of a project"
      }
    },
    "/v3/projects/{id}/repository/commits/{sha}/statuses": {
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The commit hash",
            "in": "path",
            "name": "sha",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ref",
            "in": "query",
            "name": "ref",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The stage",
            "in": "query",
            "name": "stage",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Show all statuses, default: false",
            "in": "query",
            "name": "all",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommitStatus"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommitStatus"
                }
              }
            },
            "description": "Get a commit's statuses"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Get a commit's statuses",
        "operationId": "getV3ProjectsIdRepositoryCommitsShaStatuses",
        "summary": "Get a commit's statuses"
      }
    },
    "/v3/projects/{id}/repository/compare": {
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The commit, branch name, or tag name to start comparison",
            "in": "query",
            "name": "from",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The commit, branch name, or tag name to stop comparison",
            "in": "query",
            "name": "to",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Compare"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Compare"
                }
              }
            },
            "description": "Compare two branches, tags, or commits"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Compare two branches, tags, or commits",
        "operationId": "getV3ProjectsIdRepositoryCompare",
        "summary": "Compare two branches, tags, or commits"
      }
    },
    "/v3/projects/{id}/repository/contributors": {
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contributor"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Contributor"
                }
              }
            },
            "description": "Get repository contributors"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Get repository contributors",
        "operationId": "getV3ProjectsIdRepositoryContributors",
        "summary": "Get repository contributors"
      }
    },
    "/v3/projects/{id}/repository/files": {
      "delete": {
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The path to new file. Ex. lib/class.rb",
            "in": "query",
            "name": "file_path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of branch",
            "in": "query",
            "name": "branch_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Commit Message",
            "in": "query",
            "name": "commit_message",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The email of the author",
            "in": "query",
            "name": "author_email",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the author",
            "in": "query",
            "name": "author_name",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete an existing file in repository"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Delete an existing file in repository",
        "operationId": "deleteV3ProjectsIdRepositoryFiles",
        "summary": "Delete an existing file in repository"
      },
      "get": {
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The path to the file. Ex. lib/class.rb",
            "in": "query",
            "name": "file_path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of branch, tag, or commit",
            "in": "query",
            "name": "ref",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a file from repository"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Get a file from repository",
        "operationId": "getV3ProjectsIdRepositoryFiles",
        "summary": "Get a file from repository"
      },
      "post": {
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Create new file in repository"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Create new file in repository",
        "operationId": "postV3ProjectsIdRepositoryFiles",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "author_email": {
                    "description": "The email of the author",
                    "type": "string"
                  },
                  "author_name": {
                    "description": "The name of the author",
                    "type": "string"
                  },
                  "branch_name": {
                    "description": "The name of branch",
                    "type": "string"
                  },
                  "commit_message": {
                    "description": "Commit Message",
                    "type": "string"
                  },
                  "content": {
                    "description": "File content",
                    "type": "string"
                  },
                  "encoding": {
                    "description": "File encoding",
                    "enum": [
                      "base64"
                    ],
                    "type": "string"
                  },
                  "file_path": {
                    "description": "The path to new file. Ex. lib/class.rb",
                    "type": "string"
                  }
                },
                "required": [
                  "file_path"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Create new file in repository"
      },
      "put": {
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update existing file in repository"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Update existing file in repository",
        "operationId": "putV3ProjectsIdRepositoryFiles",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "author_email": {
                    "description": "The email of the author",
                    "type": "string"
                  },
                  "author_name": {
                    "description": "The name of the author",
                    "type": "string"
                  },
                  "branch_name": {
                    "description": "The name of branch",
                    "type": "string"
                  },
                  "commit_message": {
                    "description": "Commit Message",
                    "type": "string"
                  },
                  "content": {
                    "description": "File content",
                    "type": "string"
                  },
                  "encoding": {
                    "description": "File encoding",
                    "enum": [
                      "base64"
                    ],
                    "type": "string"
                  },
                  "file_path": {
                    "description": "The path to new file. Ex. lib/class.rb",
                    "type": "string"
                  }
                },
                "required": [
                  "file_path"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Update existing file in repository"
      }
    },
    "/v3/projects/{id}/repository/merged_branches": {
      "delete": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "deleted MergedBranch"
          }
        },
        "tags": [
          "projects"
        ],
        "operationId": "deleteV3ProjectsIdRepositoryMergedBranches"
      }
    },
    "/v3/projects/{id}/repository/raw_blobs/{sha}": {
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The commit, branch name, or tag name",
            "in": "path",
            "name": "sha",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a raw blob contents by blob sha"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Get a raw blob contents by blob sha",
        "operationId": "getV3ProjectsIdRepositoryRawBlobsSha",
        "summary": "Get a raw blob contents by blob sha"
      }
    },
    "/v3/projects/{id}/repository/tags": {
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepoTag"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RepoTag"
                }
              }
            },
            "description": "Get a project repository tags"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Get a project repository tags",
        "operationId": "getV3ProjectsIdRepositoryTags",
        "summary": "Get a project repository tags"
      },
      "post": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepoTag"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RepoTag"
                }
              }
            },
            "description": "Create a new repository tag"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Create a new repository tag",
        "operationId": "postV3ProjectsIdRepositoryTags",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "message": {
                    "description": "Specifying a message creates an annotated tag",
                    "type": "string"
                  },
                  "ref": {
                    "description": "The commit sha or branch name",
                    "type": "string"
                  },
                  "release_description": {
                    "description": "Specifying release notes stored in the GitLab database",
                    "type": "string"
                  },
                  "tag_name": {
                    "description": "The name of the tag",
                    "type": "string"
                  }
                },
                "required": [
                  "tag_name"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Create a new repository tag"
      }
    },
    "/v3/projects/{id}/repository/tags/{tag_name}": {
      "delete": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the tag",
            "in": "path",
            "name": "tag_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete a repository tag"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Delete a repository tag",
        "operationId": "deleteV3ProjectsIdRepositoryTagsTagName",
        "summary": "Delete a repository tag"
      },
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the tag",
            "in": "path",
            "name": "tag_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepoTag"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RepoTag"
                }
              }
            },
            "description": "Get a single repository tag"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Get a single repository tag",
        "operationId": "getV3ProjectsIdRepositoryTagsTagName",
        "summary": "Get a single repository tag"
      }
    },
    "/v3/projects/{id}/repository/tags/{tag_name}/release": {
      "post": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the tag",
            "in": "path",
            "name": "tag_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Release"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Release"
                }
              }
            },
            "description": "Add a release note to a tag"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Add a release note to a tag",
        "operationId": "postV3ProjectsIdRepositoryTagsTagNameRelease",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "description": {
                    "description": "Release notes with markdown support",
                    "type": "string"
                  }
                },
                "required": [
                  "description"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Add a release note to a tag"
      },
      "put": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the tag",
            "in": "path",
            "name": "tag_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Release"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Release"
                }
              }
            },
            "description": "Update a tag's release note"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Update a tag's release note",
        "operationId": "putV3ProjectsIdRepositoryTagsTagNameRelease",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "description": {
                    "description": "Release notes with markdown support",
                    "type": "string"
                  }
                },
                "required": [
                  "description"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Update a tag's release note"
      }
    },
    "/v3/projects/{id}/repository/tree": {
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of a repository branch or tag, if not given the default branch is used",
            "in": "query",
            "name": "ref_name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The path of the tree",
            "in": "query",
            "name": "path",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Used to get a recursive tree",
            "in": "query",
            "name": "recursive",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepoTreeObject"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RepoTreeObject"
                }
              }
            },
            "description": "Get a project repository tree"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Get a project repository tree",
        "operationId": "getV3ProjectsIdRepositoryTree",
        "summary": "Get a project repository tree"
      }
    },
    "/v3/projects/{id}/runners": {
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The scope of specific runners to show",
            "in": "query",
            "name": "scope",
            "required": false,
            "schema": {
              "enum": [
                "active",
                "paused",
                "online",
                "specific",
                "shared"
              ],
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Runner"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Runner"
                }
              }
            },
            "description": "Get runners available for project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Get runners available for project",
        "operationId": "getV3ProjectsIdRunners",
        "summary": "Get runners available for project"
      },
      "post": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Runner"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Runner"
                }
              }
            },
            "description": "Enable a runner for a project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Enable a runner for a project",
        "operationId": "postV3ProjectsIdRunners",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "runner_id": {
                    "description": "The ID of the runner",
                    "format": "int32",
                    "type": "integer"
                  }
                },
                "required": [
                  "runner_id"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Enable a runner for a project"
      }
    },
    "/v3/projects/{id}/runners/{runner_id}": {
      "delete": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the runner",
            "in": "path",
            "name": "runner_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Runner"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Runner"
                }
              }
            },
            "description": "Disable project's runner"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Disable project's runner",
        "operationId": "deleteV3ProjectsIdRunnersRunnerId",
        "summary": "Disable project's runner"
      }
    },
    "/v3/projects/{id}/services/asana": {
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Set asana service for project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Set asana service for project",
        "operationId": "putV3ProjectsIdServicesAsana",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "api_key": {
                    "description": "User API token",
                    "type": "string"
                  },
                  "push_events": {
                    "description": "Event will be triggered by a push to the repository",
                    "type": "string"
                  },
                  "restrict_to_branch": {
                    "description": "Comma-separated list of branches which will be automatically inspected. Leave blank to include all branches",
                    "type": "string"
                  }
                },
                "required": [
                  "api_key"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Set asana service for project"
      }
    },
    "/v3/projects/{id}/services/assembla": {
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Set assembla service for project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Set assembla service for project",
        "operationId": "putV3ProjectsIdServicesAssembla",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "push_events": {
                    "description": "Event will be triggered by a push to the repository",
                    "type": "string"
                  },
                  "subdomain": {
                    "description": "Subdomain setting",
                    "type": "string"
                  },
                  "token": {
                    "description": "The authentication token",
                    "type": "string"
                  }
                },
                "required": [
                  "token"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Set assembla service for project"
      }
    },
    "/v3/projects/{id}/services/bamboo": {
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Set bamboo service for project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Set bamboo service for project",
        "operationId": "putV3ProjectsIdServicesBamboo",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "bamboo_url": {
                    "description": "Bamboo root URL like https://bamboo.example.com",
                    "type": "string"
                  },
                  "build_key": {
                    "description": "Bamboo build plan key like",
                    "type": "string"
                  },
                  "password": {
                    "description": "Passord of the user",
                    "type": "string"
                  },
                  "push_events": {
                    "description": "Event will be triggered by a push to the repository",
                    "type": "string"
                  },
                  "username": {
                    "description": "A user with API access, if applicable",
                    "type": "string"
                  }
                },
                "required": [
                  "bamboo_url"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Set bamboo service for project"
      }
    },
    "/v3/projects/{id}/services/bugzilla": {
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Set bugzilla service for project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Set bugzilla service for project",
        "operationId": "putV3ProjectsIdServicesBugzilla",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "description": {
                    "description": "Description",
                    "type": "string"
                  },
                  "issues_url": {
                    "description": "Issues URL",
                    "type": "string"
                  },
                  "new_issue_url": {
                    "description": "New issue URL",
                    "type": "string"
                  },
                  "project_url": {
                    "description": "Project URL",
                    "type": "string"
                  },
                  "push_events": {
                    "description": "Event will be triggered by a push to the repository",
                    "type": "string"
                  },
                  "title": {
                    "description": "Title",
                    "type": "string"
                  }
                },
                "required": [
                  "new_issue_url"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Set bugzilla service for project"
      }
    },
    "/v3/projects/{id}/services/buildkite": {
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Set buildkite service for project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Set buildkite service for project",
        "operationId": "putV3ProjectsIdServicesBuildkite",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "enable_ssl_verification": {
                    "description": "Enable SSL verification for communication",
                    "type": "boolean"
                  },
                  "project_url": {
                    "description": "The buildkite project URL",
                    "type": "string"
                  },
                  "push_events": {
                    "description": "Event will be triggered by a push to the repository",
                    "type": "string"
                  },
                  "token": {
                    "description": "Buildkite project GitLab token",
                    "type": "string"
                  }
                },
                "required": [
                  "token"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Set buildkite service for project"
      }
    },
    "/v3/projects/{id}/services/builds-email": {
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Set builds-email service for project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Set builds-email service for project",
        "operationId": "putV3ProjectsIdServicesBuildsEmail",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "add_pusher": {
                    "description": "Add pusher to recipients list",
                    "type": "boolean"
                  },
                  "build_events": {
                    "description": "Event will be triggered when a build status changes",
                    "type": "string"
                  },
                  "notify_only_broken_builds": {
                    "description": "Notify only broken builds",
                    "type": "boolean"
                  },
                  "recipients": {
                    "description": "Comma-separated list of recipient email addresses",
                    "type": "string"
                  }
                },
                "required": [
                  "recipients"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Set builds-email service for project"
      }
    },
    "/v3/projects/{id}/services/campfire": {
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Set campfire service for project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Set campfire service for project",
        "operationId": "putV3ProjectsIdServicesCampfire",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "push_events": {
                    "description": "Event will be triggered by a push to the repository",
                    "type": "string"
                  },
                  "room": {
                    "description": "Campfire room",
                    "type": "string"
                  },
                  "subdomain": {
                    "description": "Campfire subdomain",
                    "type": "string"
                  },
                  "token": {
                    "description": "Campfire token",
                    "type": "string"
                  }
                },
                "required": [
                  "token"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Set campfire service for project"
      }
    },
    "/v3/projects/{id}/services/custom-issue-tracker": {
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Set custom-issue-tracker service for project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Set custom-issue-tracker service for project",
        "operationId": "putV3ProjectsIdServicesCustomIssueTracker",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "description": {
                    "description": "Description",
                    "type": "string"
                  },
                  "issues_url": {
                    "description": "Issues URL",
                    "type": "string"
                  },
                  "new_issue_url": {
                    "description": "New issue URL",
                    "type": "string"
                  },
                  "project_url": {
                    "description": "Project URL",
                    "type": "string"
                  },
                  "push_events": {
                    "description": "Event will be triggered by a push to the repository",
                    "type": "string"
                  },
                  "title": {
                    "description": "Title",
                    "type": "string"
                  }
                },
                "required": [
                  "new_issue_url"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Set custom-issue-tracker service for project"
      }
    },
    "/v3/projects/{id}/services/drone-ci": {
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Set drone-ci service for project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Set drone-ci service for project",
        "operationId": "putV3ProjectsIdServicesDroneCi",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "drone_url": {
                    "description": "Drone CI URL",
                    "type": "string"
                  },
                  "enable_ssl_verification": {
                    "description": "Enable SSL verification for communication",
                    "type": "boolean"
                  },
                  "merge_request_events": {
                    "description": "Event will be triggered when a merge request is created/updated/merged",
                    "type": "string"
                  },
                  "push_events": {
                    "description": "Event will be triggered by a push to the repository",
                    "type": "string"
                  },
                  "tag_push_events": {
                    "description": "Event will be triggered when a new tag is pushed to the repository",
                    "type": "string"
                  },
                  "token": {
                    "description": "Drone CI token",
                    "type": "string"
                  }
                },
                "required": [
                  "token"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Set drone-ci service for project"
      }
    },
    "/v3/projects/{id}/services/emails-on-push": {
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Set emails-on-push service for project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Set emails-on-push service for project",
        "operationId": "putV3ProjectsIdServicesEmailsOnPush",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "disable_diffs": {
                    "description": "Disable code diffs",
                    "type": "boolean"
                  },
                  "push_events": {
                    "description": "Event will be triggered by a push to the repository",
                    "type": "string"
                  },
                  "recipients": {
                    "description": "Comma-separated list of recipient email addresses",
                    "type": "string"
                  },
                  "send_from_committer_email": {
                    "description": "Send from committer",
                    "type": "boolean"
                  },
                  "tag_push_events": {
                    "description": "Event will be triggered when a new tag is pushed to the repository",
                    "type": "string"
                  }
                },
                "required": [
                  "recipients"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Set emails-on-push service for project"
      }
    },
    "/v3/projects/{id}/services/external-wiki": {
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Set external-wiki service for project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Set external-wiki service for project",
        "operationId": "putV3ProjectsIdServicesExternalWiki",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "external_wiki_url": {
                    "description": "The URL of the external Wiki",
                    "type": "string"
                  }
                },
                "required": [
                  "external_wiki_url"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Set external-wiki service for project"
      }
    },
    "/v3/projects/{id}/services/flowdock": {
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Set flowdock service for project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Set flowdock service for project",
        "operationId": "putV3ProjectsIdServicesFlowdock",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "push_events": {
                    "description": "Event will be triggered by a push to the repository",
                    "type": "string"
                  },
                  "token": {
                    "description": "Flowdock token",
                    "type": "string"
                  }
                },
                "required": [
                  "token"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Set flowdock service for project"
      }
    },
    "/v3/projects/{id}/services/gemnasium": {
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Set gemnasium service for project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Set gemnasium service for project",
        "operationId": "putV3ProjectsIdServicesGemnasium",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "api_key": {
                    "description": "Your personal API key on gemnasium.com",
                    "type": "string"
                  },
                  "push_events": {
                    "description": "Event will be triggered by a push to the repository",
                    "type": "string"
                  },
                  "token": {
                    "description": "The project's slug on gemnasium.com",
                    "type": "string"
                  }
                },
                "required": [
                  "api_key"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Set gemnasium service for project"
      }
    },
    "/v3/projects/{id}/services/hipchat": {
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Set hipchat service for project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Set hipchat service for project",
        "operationId": "putV3ProjectsIdServicesHipchat",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "api_version": {
                    "description": "Leave blank for default (v2)",
                    "type": "string"
                  },
                  "build_events": {
                    "description": "Event will be triggered when a build status changes",
                    "type": "string"
                  },
                  "color": {
                    "description": "The room color",
                    "type": "string"
                  },
                  "confidential_issue_events": {
                    "description": "Event will be triggered when a confidential issue is created/updated/closed",
                    "type": "string"
                  },
                  "issue_events": {
                    "description": "Event will be triggered when an issue is created/updated/closed",
                    "type": "string"
                  },
                  "merge_request_events": {
                    "description": "Event will be triggered when a merge request is created/updated/merged",
                    "type": "string"
                  },
                  "note_events": {
                    "description": "Event will be triggered when someone adds a comment",
                    "type": "string"
                  },
                  "notify": {
                    "description": "Enable notifications",
                    "type": "boolean"
                  },
                  "push_events": {
                    "description": "Event will be triggered by a push to the repository",
                    "type": "string"
                  },
                  "room": {
                    "description": "The room name or ID",
                    "type": "string"
                  },
                  "server": {
                    "description": "Leave blank for default. https://hipchat.example.com",
                    "type": "string"
                  },
                  "tag_push_events": {
                    "description": "Event will be triggered when a new tag is pushed to the repository",
                    "type": "string"
                  },
                  "token": {
                    "description": "The room token",
                    "type": "string"
                  }
                },
                "required": [
                  "token"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Set hipchat service for project"
      }
    },
    "/v3/projects/{id}/services/irker": {
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Set irker service for project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Set irker service for project",
        "operationId": "putV3ProjectsIdServicesIrker",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "colorize_messages": {
                    "description": "Colorize messages",
                    "type": "boolean"
                  },
                  "default_irc_uri": {
                    "description": "Default: irc://irc.network.net:6697",
                    "type": "string"
                  },
                  "push_events": {
                    "description": "Event will be triggered by a push to the repository",
                    "type": "string"
                  },
                  "recipients": {
                    "description": "Recipients/channels separated by whitespaces",
                    "type": "string"
                  },
                  "server_host": {
                    "description": "Server host. Default localhost",
                    "type": "string"
                  },
                  "server_port": {
                    "description": "Server port. Default 6659",
                    "format": "int32",
                    "type": "integer"
                  }
                },
                "required": [
                  "recipients"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Set irker service for project"
      }
    },
    "/v3/projects/{id}/services/jira": {
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Set jira service for project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Set jira service for project",
        "operationId": "putV3ProjectsIdServicesJira",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "commit_events": {
                    "description": "Event will be triggered when a commit is created/updated",
                    "type": "string"
                  },
                  "jira_issue_transition_id": {
                    "description": "The ID of a transition that moves issues to a closed state. You can find this number under the JIRA workflow administration (**Administration > Issues > Workflows**) by selecting **View** under **Operations** of the desired workflow of your project. The ID of each state can be found inside the parenthesis of each transition name under the **Transitions (id)** column ([see screenshot][trans]). By default, this ID is set to `2`",
                    "format": "int32",
                    "type": "integer"
                  },
                  "merge_request_events": {
                    "description": "Event will be triggered when a merge request is created/updated/merged",
                    "type": "string"
                  },
                  "password": {
                    "description": "The password of the user created to be used with GitLab/JIRA",
                    "type": "string"
                  },
                  "project_key": {
                    "description": "The short identifier for your JIRA project, all uppercase, e.g., PROJ",
                    "type": "string"
                  },
                  "url": {
                    "description": "The URL to the JIRA project which is being linked to this GitLab project, e.g., https://jira.example.com",
                    "type": "string"
                  },
                  "username": {
                    "description": "The username of the user created to be used with GitLab/JIRA",
                    "type": "string"
                  }
                },
                "required": [
                  "url"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Set jira service for project"
      }
    },
    "/v3/projects/{id}/services/kubernetes": {
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Set kubernetes service for project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Set kubernetes service for project",
        "operationId": "putV3ProjectsIdServicesKubernetes",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "api_url": {
                    "description": "The URL to the Kubernetes cluster API, e.g., https://kubernetes.example.com",
                    "type": "string"
                  },
                  "ca_pem": {
                    "description": "A custom certificate authority bundle to verify the Kubernetes cluster with (PEM format)",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "The Kubernetes namespace to use",
                    "type": "string"
                  },
                  "token": {
                    "description": "The service token to authenticate against the Kubernetes cluster with",
                    "type": "string"
                  }
                },
                "required": [
                  "namespace"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Set kubernetes service for project"
      }
    },
    "/v3/projects/{id}/services/mattermost": {
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Set mattermost service for project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Set mattermost service for project",
        "operationId": "putV3ProjectsIdServicesMattermost",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "build_events": {
                    "description": "Event will be triggered when a build status changes",
                    "type": "string"
                  },
                  "confidential_issue_events": {
                    "description": "Event will be triggered when a confidential issue is created/updated/closed",
                    "type": "string"
                  },
                  "issue_events": {
                    "description": "Event will be triggered when an issue is created/updated/closed",
                    "type": "string"
                  },
                  "merge_request_events": {
                    "description": "Event will be triggered when a merge request is created/updated/merged",
                    "type": "string"
                  },
                  "note_events": {
                    "description": "Event will be triggered when someone adds a comment",
                    "type": "string"
                  },
                  "pipeline_events": {
                    "type": "string"
                  },
                  "push_events": {
                    "description": "Event will be triggered by a push to the repository",
                    "type": "string"
                  },
                  "tag_push_events": {
                    "description": "Event will be triggered when a new tag is pushed to the repository",
                    "type": "string"
                  },
                  "webhook": {
                    "description": "The Mattermost webhook. e.g. http://mattermost_host/hooks/...",
                    "type": "string"
                  },
                  "wiki_page_events": {
                    "description": "Event will be triggered when a wiki page is created/updated",
                    "type": "string"
                  }
                },
                "required": [
                  "webhook"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Set mattermost service for project"
      }
    },
    "/v3/projects/{id}/services/mattermost-slash-commands": {
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Set mattermost-slash-commands service for project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Set mattermost-slash-commands service for project",
        "operationId": "putV3ProjectsIdServicesMattermostSlashCommands",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "token": {
                    "description": "The Mattermost token",
                    "type": "string"
                  }
                },
                "required": [
                  "token"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Set mattermost-slash-commands service for project"
      }
    },
    "/v3/projects/{id}/services/mattermost_slash_commands/trigger": {
      "post": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Trigger a slash command for mattermost-slash-commands"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Added in GitLab 8.13",
        "operationId": "postV3ProjectsIdServicesMattermostSlashCommandsTrigger",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "token": {
                    "description": "The Mattermost token",
                    "type": "string"
                  }
                },
                "required": [
                  "token"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Trigger a slash command for mattermost-slash-commands"
      }
    },
    "/v3/projects/{id}/services/pipelines-email": {
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Set pipelines-email service for project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Set pipelines-email service for project",
        "operationId": "putV3ProjectsIdServicesPipelinesEmail",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "notify_only_broken_builds": {
                    "description": "Notify only broken builds",
                    "type": "boolean"
                  },
                  "pipeline_events": {
                    "type": "string"
                  },
                  "recipients": {
                    "description": "Comma-separated list of recipient email addresses",
                    "type": "string"
                  }
                },
                "required": [
                  "recipients"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Set pipelines-email service for project"
      }
    },
    "/v3/projects/{id}/services/pivotaltracker": {
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Set pivotaltracker service for project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Set pivotaltracker service for project",
        "operationId": "putV3ProjectsIdServicesPivotaltracker",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "push_events": {
                    "description": "Event will be triggered by a push to the repository",
                    "type": "string"
                  },
                  "restrict_to_branch": {
                    "description": "Comma-separated list of branches which will be automatically inspected. Leave blank to include all branches.",
                    "type": "string"
                  },
                  "token": {
                    "description": "The Pivotaltracker token",
                    "type": "string"
                  }
                },
                "required": [
                  "token"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Set pivotaltracker service for project"
      }
    },
    "/v3/projects/{id}/services/pushover": {
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Set pushover service for project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Set pushover service for project",
        "operationId": "putV3ProjectsIdServicesPushover",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "api_key": {
                    "description": "The application key",
                    "type": "string"
                  },
                  "device": {
                    "description": "Leave blank for all active devices",
                    "type": "string"
                  },
                  "priority": {
                    "description": "The priority",
                    "type": "string"
                  },
                  "push_events": {
                    "description": "Event will be triggered by a push to the repository",
                    "type": "string"
                  },
                  "sound": {
                    "description": "The sound of the notification",
                    "type": "string"
                  },
                  "user_key": {
                    "description": "The user key",
                    "type": "string"
                  }
                },
                "required": [
                  "api_key"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Set pushover service for project"
      }
    },
    "/v3/projects/{id}/services/redmine": {
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Set redmine service for project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Set redmine service for project",
        "operationId": "putV3ProjectsIdServicesRedmine",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "description": {
                    "description": "The description of the tracker",
                    "type": "string"
                  },
                  "issues_url": {
                    "description": "The issues URL",
                    "type": "string"
                  },
                  "new_issue_url": {
                    "description": "The new issue URL",
                    "type": "string"
                  },
                  "project_url": {
                    "description": "The project URL",
                    "type": "string"
                  },
                  "push_events": {
                    "description": "Event will be triggered by a push to the repository",
                    "type": "string"
                  }
                },
                "required": [
                  "new_issue_url"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Set redmine service for project"
      }
    },
    "/v3/projects/{id}/services/slack": {
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Set slack service for project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Set slack service for project",
        "operationId": "putV3ProjectsIdServicesSlack",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "build_events": {
                    "description": "Event will be triggered when a build status changes",
                    "type": "string"
                  },
                  "channel": {
                    "description": "The channel name",
                    "type": "string"
                  },
                  "confidential_issue_events": {
                    "description": "Event will be triggered when a confidential issue is created/updated/closed",
                    "type": "string"
                  },
                  "issue_events": {
                    "description": "Event will be triggered when an issue is created/updated/closed",
                    "type": "string"
                  },
                  "merge_request_events": {
                    "description": "Event will be triggered when a merge request is created/updated/merged",
                    "type": "string"
                  },
                  "new_issue_url": {
                    "description": "The user name",
                    "type": "string"
                  },
                  "note_events": {
                    "description": "Event will be triggered when someone adds a comment",
                    "type": "string"
                  },
                  "pipeline_events": {
                    "type": "string"
                  },
                  "push_events": {
                    "description": "Event will be triggered by a push to the repository",
                    "type": "string"
                  },
                  "tag_push_events": {
                    "description": "Event will be triggered when a new tag is pushed to the repository",
                    "type": "string"
                  },
                  "webhook": {
                    "description": "The Slack webhook. e.g. https://hooks.slack.com/services/...",
                    "type": "string"
                  },
                  "wiki_page_events": {
                    "description": "Event will be triggered when a wiki page is created/updated",
                    "type": "string"
                  }
                },
                "required": [
                  "webhook"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Set slack service for project"
      }
    },
    "/v3/projects/{id}/services/slack-slash-commands": {
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Set slack-slash-commands service for project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Set slack-slash-commands service for project",
        "operationId": "putV3ProjectsIdServicesSlackSlashCommands",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "token": {
                    "description": "The Slack token",
                    "type": "string"
                  }
                },
                "required": [
                  "token"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Set slack-slash-commands service for project"
      }
    },
    "/v3/projects/{id}/services/slack_slash_commands/trigger": {
      "post": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Trigger a slash command for slack-slash-commands"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Added in GitLab 8.13",
        "operationId": "postV3ProjectsIdServicesSlackSlashCommandsTrigger",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "token": {
                    "description": "The Slack token",
                    "type": "string"
                  }
                },
                "required": [
                  "token"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Trigger a slash command for slack-slash-commands"
      }
    },
    "/v3/projects/{id}/services/teamcity": {
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Set teamcity service for project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Set teamcity service for project",
        "operationId": "putV3ProjectsIdServicesTeamcity",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "build_type": {
                    "description": "Build configuration ID",
                    "type": "string"
                  },
                  "password": {
                    "description": "The password of the user",
                    "type": "string"
                  },
                  "push_events": {
                    "description": "Event will be triggered by a push to the repository",
                    "type": "string"
                  },
                  "teamcity_url": {
                    "description": "TeamCity root URL like https://teamcity.example.com",
                    "type": "string"
                  },
                  "username": {
                    "description": "A user with permissions to trigger a manual build",
                    "type": "string"
                  }
                },
                "required": [
                  "teamcity_url"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Set teamcity service for project"
      }
    },
    "/v3/projects/{id}/services/{service_slug}": {
      "delete": {
        "parameters": [
          {
            "description": "The name of the service",
            "in": "path",
            "name": "service_slug",
            "required": true,
            "schema": {
              "enum": [
                "asana",
                "assembla",
                "bamboo",
                "bugzilla",
                "buildkite",
                "builds-email",
                "campfire",
                "custom-issue-tracker",
                "drone-ci",
                "emails-on-push",
                "external-wiki",
                "flowdock",
                "gemnasium",
                "hipchat",
                "irker",
                "jira",
                "kubernetes",
                "mattermost-slash-commands",
                "slack-slash-commands",
                "pipelines-email",
                "pivotaltracker",
                "pushover",
                "redmine",
                "slack",
                "mattermost",
                "teamcity"
              ],
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete a service for project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Delete a service for project",
        "operationId": "deleteV3ProjectsIdServicesServiceSlug",
        "summary": "Delete a service for project"
      },
      "get": {
        "parameters": [
          {
            "description": "The name of the service",
            "in": "path",
            "name": "service_slug",
            "required": true,
            "schema": {
              "enum": [
                "asana",
                "assembla",
                "bamboo",
                "bugzilla",
                "buildkite",
                "builds-email",
                "campfire",
                "custom-issue-tracker",
                "drone-ci",
                "emails-on-push",
                "external-wiki",
                "flowdock",
                "gemnasium",
                "hipchat",
                "irker",
                "jira",
                "kubernetes",
                "mattermost-slash-commands",
                "slack-slash-commands",
                "pipelines-email",
                "pivotaltracker",
                "pushover",
                "redmine",
                "slack",
                "mattermost",
                "teamcity"
              ],
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectService"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectService"
                }
              }
            },
            "description": "Get the service settings for project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Get the service settings for project",
        "operationId": "getV3ProjectsIdServicesServiceSlug",
        "summary": "Get the service settings for project"
      }
    },
    "/v3/projects/{id}/share": {
      "post": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectGroupLink"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectGroupLink"
                }
              }
            },
            "description": "Share the project with a group"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Share the project with a group",
        "operationId": "postV3ProjectsIdShare",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "expires_at": {
                    "description": "Share expiration date",
                    "format": "date",
                    "type": "string"
                  },
                  "group_access": {
                    "description": "The group access level",
                    "enum": [
                      10,
                      20,
                      30,
                      40
                    ],
                    "format": "int32",
                    "type": "integer"
                  },
                  "group_id": {
                    "description": "The ID of a group",
                    "format": "int32",
                    "type": "integer"
                  }
                },
                "required": [
                  "group_id"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Share the project with a group"
      }
    },
    "/v3/projects/{id}/share/{group_id}": {
      "delete": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the group",
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "deleted Share"
          }
        },
        "tags": [
          "projects"
        ],
        "operationId": "deleteV3ProjectsIdShareGroupId"
      }
    },
    "/v3/projects/{id}/snippets": {
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectSnippet"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectSnippet"
                }
              }
            },
            "description": "Get all project snippets"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Get all project snippets",
        "operationId": "getV3ProjectsIdSnippets",
        "summary": "Get all project snippets"
      },
      "post": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectSnippet"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectSnippet"
                }
              }
            },
            "description": "Create a new project snippet"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Create a new project snippet",
        "operationId": "postV3ProjectsIdSnippets",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "code": {
                    "description": "The content of the snippet",
                    "type": "string"
                  },
                  "file_name": {
                    "description": "The file name of the snippet",
                    "type": "string"
                  },
                  "title": {
                    "description": "The title of the snippet",
                    "type": "string"
                  },
                  "visibility_level": {
                    "description": "The visibility level of the snippet",
                    "enum": [
                      0,
                      10,
                      20
                    ],
                    "format": "int32",
                    "type": "integer"
                  }
                },
                "required": [
                  "title"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Create a new project snippet"
      }
    },
    "/v3/projects/{id}/snippets/{noteable_id}/notes": {
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the noteable",
            "in": "path",
            "name": "noteable_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            },
            "description": "Get a list of project +noteable+ notes"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Get a list of project +noteable+ notes",
        "operationId": "getV3ProjectsIdSnippetsNoteableIdNotes",
        "summary": "Get a list of project +noteable+ notes"
      },
      "post": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the noteable",
            "in": "path",
            "name": "noteable_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            },
            "description": "Create a new +noteable+ note"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Create a new +noteable+ note",
        "operationId": "postV3ProjectsIdSnippetsNoteableIdNotes",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "body": {
                    "description": "The content of a note",
                    "type": "string"
                  },
                  "created_at": {
                    "description": "The creation date of the note",
                    "type": "string"
                  }
                },
                "required": [
                  "body"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Create a new +noteable+ note"
      }
    },
    "/v3/projects/{id}/snippets/{noteable_id}/notes/{note_id}": {
      "delete": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the noteable",
            "in": "path",
            "name": "noteable_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The ID of a note",
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            },
            "description": "Delete a +noteable+ note"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Delete a +noteable+ note",
        "operationId": "deleteV3ProjectsIdSnippetsNoteableIdNotesNoteId",
        "summary": "Delete a +noteable+ note"
      },
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a note",
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The ID of the noteable",
            "in": "path",
            "name": "noteable_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            },
            "description": "Get a single +noteable+ note"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Get a single +noteable+ note",
        "operationId": "getV3ProjectsIdSnippetsNoteableIdNotesNoteId",
        "summary": "Get a single +noteable+ note"
      },
      "put": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the noteable",
            "in": "path",
            "name": "noteable_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The ID of a note",
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            },
            "description": "Update an existing +noteable+ note"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Update an existing +noteable+ note",
        "operationId": "putV3ProjectsIdSnippetsNoteableIdNotesNoteId",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "body": {
                    "description": "The content of a note",
                    "type": "string"
                  }
                },
                "required": [
                  "body"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Update an existing +noteable+ note"
      }
    },
    "/v3/projects/{id}/snippets/{snippet_id}": {
      "delete": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a project snippet",
            "in": "path",
            "name": "snippet_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete a project snippet"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Delete a project snippet",
        "operationId": "deleteV3ProjectsIdSnippetsSnippetId",
        "summary": "Delete a project snippet"
      },
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a project snippet",
            "in": "path",
            "name": "snippet_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectSnippet"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectSnippet"
                }
              }
            },
            "description": "Get a single project snippet"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Get a single project snippet",
        "operationId": "getV3ProjectsIdSnippetsSnippetId",
        "summary": "Get a single project snippet"
      },
      "put": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a project snippet",
            "in": "path",
            "name": "snippet_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectSnippet"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectSnippet"
                }
              }
            },
            "description": "Update an existing project snippet"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Update an existing project snippet",
        "operationId": "putV3ProjectsIdSnippetsSnippetId",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "code": {
                    "description": "The content of the snippet",
                    "type": "string"
                  },
                  "file_name": {
                    "description": "The file name of the snippet",
                    "type": "string"
                  },
                  "title": {
                    "description": "The title of the snippet",
                    "type": "string"
                  },
                  "visibility_level": {
                    "description": "The visibility level of the snippet",
                    "enum": [
                      0,
                      10,
                      20
                    ],
                    "format": "int32",
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Update an existing project snippet"
      }
    },
    "/v3/projects/{id}/snippets/{snippet_id}/award_emoji": {
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of an Issue, Merge Request or Snippet",
            "in": "path",
            "name": "snippet_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AwardEmoji"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AwardEmoji"
                }
              }
            },
            "description": "Get a list of project +awardable+ award emoji"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "This feature was introduced in 8.9",
        "operationId": "getV3ProjectsIdSnippetsSnippetIdAwardEmoji",
        "summary": "Get a list of project +awardable+ award emoji"
      },
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "snippet_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AwardEmoji"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AwardEmoji"
                }
              }
            },
            "description": "Award a new Emoji"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "This feature was introduced in 8.9",
        "operationId": "postV3ProjectsIdSnippetsSnippetIdAwardEmoji",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "name": {
                    "description": "The name of a award_emoji (without colons)",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Award a new Emoji"
      }
    },
    "/v3/projects/{id}/snippets/{snippet_id}/award_emoji/{award_id}": {
      "delete": {
        "parameters": [
          {
            "description": "The ID of an award emoji",
            "in": "path",
            "name": "award_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "snippet_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AwardEmoji"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AwardEmoji"
                }
              }
            },
            "description": "Delete a +awardables+ award emoji"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "This feature was introduced in 8.9",
        "operationId": "deleteV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardId",
        "summary": "Delete a +awardables+ award emoji"
      },
      "get": {
        "parameters": [
          {
            "description": "The ID of the award",
            "in": "path",
            "name": "award_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "snippet_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AwardEmoji"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AwardEmoji"
                }
              }
            },
            "description": "Get a specific award emoji"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "This feature was introduced in 8.9",
        "operationId": "getV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardId",
        "summary": "Get a specific award emoji"
      }
    },
    "/v3/projects/{id}/snippets/{snippet_id}/notes/{note_id}/award_emoji": {
      "get": {
        "parameters": [
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "snippet_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AwardEmoji"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AwardEmoji"
                }
              }
            },
            "description": "Get a list of project +awardable+ award emoji"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "This feature was introduced in 8.9",
        "operationId": "getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmoji",
        "summary": "Get a list of project +awardable+ award emoji"
      },
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "snippet_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AwardEmoji"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AwardEmoji"
                }
              }
            },
            "description": "Award a new Emoji"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "This feature was introduced in 8.9",
        "operationId": "postV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmoji",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "name": {
                    "description": "The name of a award_emoji (without colons)",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Award a new Emoji"
      }
    },
    "/v3/projects/{id}/snippets/{snippet_id}/notes/{note_id}/award_emoji/{award_id}": {
      "delete": {
        "parameters": [
          {
            "description": "The ID of an award emoji",
            "in": "path",
            "name": "award_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "snippet_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AwardEmoji"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AwardEmoji"
                }
              }
            },
            "description": "Delete a +awardables+ award emoji"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "This feature was introduced in 8.9",
        "operationId": "deleteV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardId",
        "summary": "Delete a +awardables+ award emoji"
      },
      "get": {
        "parameters": [
          {
            "description": "The ID of the award",
            "in": "path",
            "name": "award_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "snippet_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AwardEmoji"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AwardEmoji"
                }
              }
            },
            "description": "Get a specific award emoji"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "This feature was introduced in 8.9",
        "operationId": "getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardId",
        "summary": "Get a specific award emoji"
      }
    },
    "/v3/projects/{id}/snippets/{snippet_id}/raw": {
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a project snippet",
            "in": "path",
            "name": "snippet_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a raw project snippet"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Get a raw project snippet",
        "operationId": "getV3ProjectsIdSnippetsSnippetIdRaw",
        "summary": "Get a raw project snippet"
      }
    },
    "/v3/projects/{id}/star": {
      "delete": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            },
            "description": "Unstar a project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Unstar a project",
        "operationId": "deleteV3ProjectsIdStar",
        "summary": "Unstar a project"
      },
      "post": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            },
            "description": "Star a project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Star a project",
        "operationId": "postV3ProjectsIdStar",
        "summary": "Star a project"
      }
    },
    "/v3/projects/{id}/statuses/{sha}": {
      "post": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The commit hash",
            "in": "path",
            "name": "sha",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommitStatus"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommitStatus"
                }
              }
            },
            "description": "Post status to a commit"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Post status to a commit",
        "operationId": "postV3ProjectsIdStatusesSha",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "context": {
                    "description": "A string label to differentiate this status from the status of other systems. Default: \"default\"",
                    "type": "string"
                  },
                  "description": {
                    "description": "A short description of the status",
                    "type": "string"
                  },
                  "name": {
                    "description": "A string label to differentiate this status from the status of other systems. Default: \"default\"",
                    "type": "string"
                  },
                  "ref": {
                    "description": "The ref",
                    "type": "string"
                  },
                  "state": {
                    "description": "The state of the status",
                    "enum": [
                      "pending",
                      "running",
                      "success",
                      "failed",
                      "canceled"
                    ],
                    "type": "string"
                  },
                  "target_url": {
                    "description": "The target URL to associate with this status",
                    "type": "string"
                  }
                },
                "required": [
                  "state"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Post status to a commit"
      }
    },
    "/v3/projects/{id}/triggers": {
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Trigger"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Trigger"
                }
              }
            },
            "description": "Get triggers list"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Get triggers list",
        "operationId": "getV3ProjectsIdTriggers",
        "summary": "Get triggers list"
      },
      "post": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Trigger"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Trigger"
                }
              }
            },
            "description": "Create a trigger"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Create a trigger",
        "operationId": "postV3ProjectsIdTriggers",
        "summary": "Create a trigger"
      }
    },
    "/v3/projects/{id}/triggers/{token}": {
      "delete": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The unique token of trigger",
            "in": "path",
            "name": "token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Trigger"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Trigger"
                }
              }
            },
            "description": "Delete a trigger"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Delete a trigger",
        "operationId": "deleteV3ProjectsIdTriggersToken",
        "summary": "Delete a trigger"
      },
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The unique token of trigger",
            "in": "path",
            "name": "token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Trigger"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Trigger"
                }
              }
            },
            "description": "Get specific trigger of a project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Get specific trigger of a project",
        "operationId": "getV3ProjectsIdTriggersToken",
        "summary": "Get specific trigger of a project"
      }
    },
    "/v3/projects/{id}/unarchive": {
      "post": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            },
            "description": "Unarchive a project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Unarchive a project",
        "operationId": "postV3ProjectsIdUnarchive",
        "summary": "Unarchive a project"
      }
    },
    "/v3/projects/{id}/uploads": {
      "post": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Upload a file"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Upload a file",
        "operationId": "postV3ProjectsIdUploads",
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            }
          },
          "required": true
        },
        "summary": "Upload a file"
      }
    },
    "/v3/projects/{id}/users": {
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Return list of users matching the search criteria",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserBasic"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserBasic"
                }
              }
            },
            "description": "Get the users list of a project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Get the users list of a project",
        "operationId": "getV3ProjectsIdUsers",
        "summary": "Get the users list of a project"
      }
    },
    "/v3/projects/{id}/variables": {
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Variable"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Variable"
                }
              }
            },
            "description": "Get project variables"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Get project variables",
        "operationId": "getV3ProjectsIdVariables",
        "summary": "Get project variables"
      },
      "post": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Variable"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Variable"
                }
              }
            },
            "description": "Create a new variable in a project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Create a new variable in a project",
        "operationId": "postV3ProjectsIdVariables",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "key": {
                    "description": "The key of the variable",
                    "type": "string"
                  },
                  "value": {
                    "description": "The value of the variable",
                    "type": "string"
                  }
                },
                "required": [
                  "key"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Create a new variable in a project"
      }
    },
    "/v3/projects/{id}/variables/{key}": {
      "delete": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The key of the variable",
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Variable"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Variable"
                }
              }
            },
            "description": "Delete an existing variable from a project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Delete an existing variable from a project",
        "operationId": "deleteV3ProjectsIdVariablesKey",
        "summary": "Delete an existing variable from a project"
      },
      "get": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The key of the variable",
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Variable"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Variable"
                }
              }
            },
            "description": "Get a specific variable from a project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Get a specific variable from a project",
        "operationId": "getV3ProjectsIdVariablesKey",
        "summary": "Get a specific variable from a project"
      },
      "put": {
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The key of the variable",
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Variable"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Variable"
                }
              }
            },
            "description": "Update an existing variable from a project"
          }
        },
        "tags": [
          "projects"
        ],
        "description": "Update an existing variable from a project",
        "operationId": "putV3ProjectsIdVariablesKey",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "value": {
                    "description": "The value of the variable",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Update an existing variable from a project"
      }
    },
    "/v3/runners": {
      "get": {
        "parameters": [
          {
            "description": "The scope of specific runners to show",
            "in": "query",
            "name": "scope",
            "required": false,
            "schema": {
              "enum": [
                "active",
                "paused",
                "online"
              ],
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Runner"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Runner"
                }
              }
            },
            "description": "Get runners available for user"
          }
        },
        "tags": [
          "runners"
        ],
        "description": "Get runners available for user",
        "operationId": "getV3Runners",
        "summary": "Get runners available for user"
      }
    },
    "/v3/runners/all": {
      "get": {
        "parameters": [
          {
            "description": "The scope of specific runners to show",
            "in": "query",
            "name": "scope",
            "required": false,
            "schema": {
              "enum": [
                "active",
                "paused",
                "online",
                "specific",
                "shared"
              ],
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Runner"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Runner"
                }
              }
            },
            "description": "Get all runners - shared and specific"
          }
        },
        "tags": [
          "runners"
        ],
        "description": "Get all runners - shared and specific",
        "operationId": "getV3RunnersAll",
        "summary": "Get all runners - shared and specific"
      }
    },
    "/v3/runners/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "The ID of the runner",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Runner"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Runner"
                }
              }
            },
            "description": "Remove a runner"
          }
        },
        "tags": [
          "runners"
        ],
        "description": "Remove a runner",
        "operationId": "deleteV3RunnersId",
        "summary": "Remove a runner"
      },
      "get": {
        "parameters": [
          {
            "description": "The ID of the runner",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunnerDetails"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RunnerDetails"
                }
              }
            },
            "description": "Get runner's details"
          }
        },
        "tags": [
          "runners"
        ],
        "description": "Get runner's details",
        "operationId": "getV3RunnersId",
        "summary": "Get runner's details"
      },
      "put": {
        "parameters": [
          {
            "description": "The ID of the runner",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunnerDetails"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RunnerDetails"
                }
              }
            },
            "description": "Update runner's details"
          }
        },
        "tags": [
          "runners"
        ],
        "description": "Update runner's details",
        "operationId": "putV3RunnersId",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "active": {
                    "description": "The state of a runner",
                    "type": "boolean"
                  },
                  "description": {
                    "description": "The description of the runner",
                    "type": "string"
                  },
                  "locked": {
                    "description": "Flag indicating the runner is locked",
                    "type": "boolean"
                  },
                  "run_untagged": {
                    "description": "Flag indicating the runner can execute untagged jobs",
                    "type": "boolean"
                  },
                  "tag_list": {
                    "description": "The list of tags for a runner",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Update runner's details"
      }
    },
    "/v3/session": {
      "post": {
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserWithPrivateToken"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserWithPrivateToken"
                }
              }
            },
            "description": "Login to get token"
          }
        },
        "tags": [
          "session"
        ],
        "description": "Login to get token",
        "operationId": "postV3Session",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "email": {
                    "description": "The email of the user",
                    "type": "string"
                  },
                  "login": {
                    "description": "The username",
                    "type": "string"
                  },
                  "password": {
                    "description": "The password of the user",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Login to get token"
      }
    },
    "/v3/sidekiq/compound_metrics": {
      "get": {
        "responses": {
          "200": {
            "description": "Get the Sidekiq Compound metrics. Includes queue, process, and job statistics"
          }
        },
        "tags": [
          "sidekiq"
        ],
        "description": "Get the Sidekiq Compound metrics. Includes queue, process, and job statistics",
        "operationId": "getV3SidekiqCompoundMetrics",
        "summary": "Get the Sidekiq Compound metrics. Includes queue, process, and job statistics"
      }
    },
    "/v3/sidekiq/job_stats": {
      "get": {
        "responses": {
          "200": {
            "description": "Get the Sidekiq job statistics"
          }
        },
        "tags": [
          "sidekiq"
        ],
        "description": "Get the Sidekiq job statistics",
        "operationId": "getV3SidekiqJobStats",
        "summary": "Get the Sidekiq job statistics"
      }
    },
    "/v3/sidekiq/process_metrics": {
      "get": {
        "responses": {
          "200": {
            "description": "Get the Sidekiq process metrics"
          }
        },
        "tags": [
          "sidekiq"
        ],
        "description": "Get the Sidekiq process metrics",
        "operationId": "getV3SidekiqProcessMetrics",
        "summary": "Get the Sidekiq process metrics"
      }
    },
    "/v3/sidekiq/queue_metrics": {
      "get": {
        "responses": {
          "200": {
            "description": "Get the Sidekiq queue metrics"
          }
        },
        "tags": [
          "sidekiq"
        ],
        "description": "Get the Sidekiq queue metrics",
        "operationId": "getV3SidekiqQueueMetrics",
        "summary": "Get the Sidekiq queue metrics"
      }
    },
    "/v3/snippets": {
      "get": {
        "parameters": [
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalSnippet"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalSnippet"
                }
              }
            },
            "description": "Get a snippets list for authenticated user"
          }
        },
        "tags": [
          "snippets"
        ],
        "description": "This feature was introduced in GitLab 8.15.",
        "operationId": "getV3Snippets",
        "summary": "Get a snippets list for authenticated user"
      },
      "post": {
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalSnippet"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalSnippet"
                }
              }
            },
            "description": "Create new snippet"
          }
        },
        "tags": [
          "snippets"
        ],
        "description": "This feature was introduced in GitLab 8.15.",
        "operationId": "postV3Snippets",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "content": {
                    "description": "The content of a snippet",
                    "type": "string"
                  },
                  "file_name": {
                    "description": "The name of a snippet file",
                    "type": "string"
                  },
                  "title": {
                    "description": "The title of a snippet",
                    "type": "string"
                  },
                  "visibility_level": {
                    "default": 10,
                    "description": "The visibility level of the snippet",
                    "enum": [
                      0,
                      10,
                      20
                    ],
                    "format": "int32",
                    "type": "integer"
                  }
                },
                "required": [
                  "title"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Create new snippet"
      }
    },
    "/v3/snippets/public": {
      "get": {
        "parameters": [
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalSnippet"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalSnippet"
                }
              }
            },
            "description": "List all public snippets current_user has access to"
          }
        },
        "tags": [
          "snippets"
        ],
        "description": "This feature was introduced in GitLab 8.15.",
        "operationId": "getV3SnippetsPublic",
        "summary": "List all public snippets current_user has access to"
      }
    },
    "/v3/snippets/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "The ID of a snippet",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalSnippet"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalSnippet"
                }
              }
            },
            "description": "Remove snippet"
          }
        },
        "tags": [
          "snippets"
        ],
        "description": "This feature was introduced in GitLab 8.15.",
        "operationId": "deleteV3SnippetsId",
        "summary": "Remove snippet"
      },
      "get": {
        "parameters": [
          {
            "description": "The ID of a snippet",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalSnippet"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalSnippet"
                }
              }
            },
            "description": "Get a single snippet"
          }
        },
        "tags": [
          "snippets"
        ],
        "description": "This feature was introduced in GitLab 8.15.",
        "operationId": "getV3SnippetsId",
        "summary": "Get a single snippet"
      },
      "put": {
        "parameters": [
          {
            "description": "The ID of a snippet",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalSnippet"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalSnippet"
                }
              }
            },
            "description": "Update an existing snippet"
          }
        },
        "tags": [
          "snippets"
        ],
        "description": "This feature was introduced in GitLab 8.15.",
        "operationId": "putV3SnippetsId",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "content": {
                    "description": "The content of a snippet",
                    "type": "string"
                  },
                  "file_name": {
                    "description": "The name of a snippet file",
                    "type": "string"
                  },
                  "title": {
                    "description": "The title of a snippet",
                    "type": "string"
                  },
                  "visibility_level": {
                    "description": "The visibility level of the snippet",
                    "enum": [
                      0,
                      10,
                      20
                    ],
                    "format": "int32",
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Update an existing snippet"
      }
    },
    "/v3/snippets/{id}/raw": {
      "get": {
        "parameters": [
          {
            "description": "The ID of a snippet",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a raw snippet"
          }
        },
        "tags": [
          "snippets"
        ],
        "description": "This feature was introduced in GitLab 8.15.",
        "operationId": "getV3SnippetsIdRaw",
        "summary": "Get a raw snippet"
      }
    },
    "/v3/templates/dockerfiles": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplatesList"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TemplatesList"
                }
              }
            },
            "description": "Get the list of the available template"
          }
        },
        "tags": [
          "templates"
        ],
        "description": "This feature was introduced in GitLab 8.15.",
        "operationId": "getV3TemplatesDockerfiles",
        "summary": "Get the list of the available template"
      }
    },
    "/v3/templates/dockerfiles/{name}": {
      "get": {
        "parameters": [
          {
            "description": "The name of the template",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Template"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Template"
                }
              }
            },
            "description": "Get the text for a specific template present in local filesystem"
          }
        },
        "tags": [
          "templates"
        ],
        "description": "This feature was introduced in GitLab 8.15.",
        "operationId": "getV3TemplatesDockerfilesName",
        "summary": "Get the text for a specific template present in local filesystem"
      }
    },
    "/v3/templates/gitignores": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplatesList"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TemplatesList"
                }
              }
            },
            "description": "Get the list of the available template"
          }
        },
        "tags": [
          "templates"
        ],
        "description": "This feature was introduced in GitLab 8.8.",
        "operationId": "getV3TemplatesGitignores",
        "summary": "Get the list of the available template"
      }
    },
    "/v3/templates/gitignores/{name}": {
      "get": {
        "parameters": [
          {
            "description": "The name of the template",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Template"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Template"
                }
              }
            },
            "description": "Get the text for a specific template present in local filesystem"
          }
        },
        "tags": [
          "templates"
        ],
        "description": "This feature was introduced in GitLab 8.8.",
        "operationId": "getV3TemplatesGitignoresName",
        "summary": "Get the text for a specific template present in local filesystem"
      }
    },
    "/v3/templates/gitlab_ci_ymls": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplatesList"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TemplatesList"
                }
              }
            },
            "description": "Get the list of the available template"
          }
        },
        "tags": [
          "templates"
        ],
        "description": "This feature was introduced in GitLab 8.9.",
        "operationId": "getV3TemplatesGitlabCiYmls",
        "summary": "Get the list of the available template"
      }
    },
    "/v3/templates/gitlab_ci_ymls/{name}": {
      "get": {
        "parameters": [
          {
            "description": "The name of the template",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Template"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Template"
                }
              }
            },
            "description": "Get the text for a specific template present in local filesystem"
          }
        },
        "tags": [
          "templates"
        ],
        "description": "This feature was introduced in GitLab 8.9.",
        "operationId": "getV3TemplatesGitlabCiYmlsName",
        "summary": "Get the text for a specific template present in local filesystem"
      }
    },
    "/v3/templates/licenses": {
      "get": {
        "parameters": [
          {
            "description": "If passed, returns only popular licenses",
            "in": "query",
            "name": "popular",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepoLicense"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RepoLicense"
                }
              }
            },
            "description": "Get the list of the available license template"
          }
        },
        "tags": [
          "templates"
        ],
        "description": "This feature was introduced in GitLab 8.7.",
        "operationId": "getV3TemplatesLicenses",
        "summary": "Get the list of the available license template"
      }
    },
    "/v3/templates/licenses/{name}": {
      "get": {
        "parameters": [
          {
            "description": "The name of the template",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepoLicense"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RepoLicense"
                }
              }
            },
            "description": "Get the text for a specific license"
          }
        },
        "tags": [
          "templates"
        ],
        "description": "This feature was introduced in GitLab 8.7.",
        "operationId": "getV3TemplatesLicensesName",
        "summary": "Get the text for a specific license"
      }
    },
    "/v3/todos": {
      "delete": {
        "responses": {
          "204": {
            "description": "Mark all todos as done"
          }
        },
        "tags": [
          "todos"
        ],
        "description": "Mark all todos as done",
        "operationId": "deleteV3Todos",
        "summary": "Mark all todos as done"
      },
      "get": {
        "parameters": [
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Todo"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Todo"
                }
              }
            },
            "description": "Get a todo list"
          }
        },
        "tags": [
          "todos"
        ],
        "description": "Get a todo list",
        "operationId": "getV3Todos",
        "summary": "Get a todo list"
      }
    },
    "/v3/todos/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "The ID of the todo being marked as done",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Todo"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Todo"
                }
              }
            },
            "description": "Mark a todo as done"
          }
        },
        "tags": [
          "todos"
        ],
        "description": "Mark a todo as done",
        "operationId": "deleteV3TodosId",
        "summary": "Mark a todo as done"
      }
    },
    "/v3/user": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPublic"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserPublic"
                }
              }
            },
            "description": "Get the currently authenticated user"
          }
        },
        "tags": [
          "user"
        ],
        "description": "Get the currently authenticated user",
        "operationId": "getV3User",
        "summary": "Get the currently authenticated user"
      }
    },
    "/v3/user/emails": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Email"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Email"
                }
              }
            },
            "description": "Get the currently authenticated user's email addresses"
          }
        },
        "tags": [
          "user"
        ],
        "description": "Get the currently authenticated user's email addresses",
        "operationId": "getV3UserEmails",
        "summary": "Get the currently authenticated user's email addresses"
      },
      "post": {
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Email"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Email"
                }
              }
            },
            "description": "Add new email address to the currently authenticated user"
          }
        },
        "tags": [
          "user"
        ],
        "description": "Add new email address to the currently authenticated user",
        "operationId": "postV3UserEmails",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "email": {
                    "description": "The new email",
                    "type": "string"
                  }
                },
                "required": [
                  "email"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Add new email address to the currently authenticated user"
      }
    },
    "/v3/user/emails/{email_id}": {
      "delete": {
        "parameters": [
          {
            "description": "The ID of the email",
            "in": "path",
            "name": "email_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete an email address from the currently authenticated user"
          }
        },
        "tags": [
          "user"
        ],
        "description": "Delete an email address from the currently authenticated user",
        "operationId": "deleteV3UserEmailsEmailId",
        "summary": "Delete an email address from the currently authenticated user"
      },
      "get": {
        "parameters": [
          {
            "description": "The ID of the email",
            "in": "path",
            "name": "email_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Email"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Email"
                }
              }
            },
            "description": "Get a single email address owned by the currently authenticated user"
          }
        },
        "tags": [
          "user"
        ],
        "description": "Get a single email address owned by the currently authenticated user",
        "operationId": "getV3UserEmailsEmailId",
        "summary": "Get a single email address owned by the currently authenticated user"
      }
    },
    "/v3/user/keys": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SSHKey"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SSHKey"
                }
              }
            },
            "description": "Get the currently authenticated user's SSH keys"
          }
        },
        "tags": [
          "user"
        ],
        "description": "Get the currently authenticated user's SSH keys",
        "operationId": "getV3UserKeys",
        "summary": "Get the currently authenticated user's SSH keys"
      },
      "post": {
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SSHKey"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SSHKey"
                }
              }
            },
            "description": "Add a new SSH key to the currently authenticated user"
          }
        },
        "tags": [
          "user"
        ],
        "description": "Add a new SSH key to the currently authenticated user",
        "operationId": "postV3UserKeys",
        "requestBody": {
          "$ref": "#/components/requestBodies/postV3UsersIdKeys"
        },
        "summary": "Add a new SSH key to the currently authenticated user"
      }
    },
    "/v3/user/keys/{key_id}": {
      "delete": {
        "parameters": [
          {
            "description": "The ID of the SSH key",
            "in": "path",
            "name": "key_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SSHKey"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SSHKey"
                }
              }
            },
            "description": "Delete an SSH key from the currently authenticated user"
          }
        },
        "tags": [
          "user"
        ],
        "description": "Delete an SSH key from the currently authenticated user",
        "operationId": "deleteV3UserKeysKeyId",
        "summary": "Delete an SSH key from the currently authenticated user"
      },
      "get": {
        "parameters": [
          {
            "description": "The ID of the SSH key",
            "in": "path",
            "name": "key_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SSHKey"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SSHKey"
                }
              }
            },
            "description": "Get a single key owned by currently authenticated user"
          }
        },
        "tags": [
          "user"
        ],
        "description": "Get a single key owned by currently authenticated user",
        "operationId": "getV3UserKeysKeyId",
        "summary": "Get a single key owned by currently authenticated user"
      }
    },
    "/v3/users": {
      "get": {
        "parameters": [
          {
            "description": "Get a single user with a specific username",
            "in": "query",
            "name": "username",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Search for a username",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filters only active users",
            "in": "query",
            "name": "active",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Filters only external users",
            "in": "query",
            "name": "external",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Filters only blocked users",
            "in": "query",
            "name": "blocked",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserBasic"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserBasic"
                }
              }
            },
            "description": "Get the list of users"
          }
        },
        "tags": [
          "users"
        ],
        "description": "Get the list of users",
        "operationId": "getV3Users",
        "summary": "Get the list of users"
      },
      "post": {
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPublic"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserPublic"
                }
              }
            },
            "description": "Create a user. Available only for admins."
          }
        },
        "tags": [
          "users"
        ],
        "description": "Create a user. Available only for admins.",
        "operationId": "postV3Users",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "admin": {
                    "description": "Flag indicating the user is an administrator",
                    "type": "boolean"
                  },
                  "bio": {
                    "description": "The biography of the user",
                    "type": "string"
                  },
                  "can_create_group": {
                    "description": "Flag indicating the user can create groups",
                    "type": "boolean"
                  },
                  "confirm": {
                    "description": "Flag indicating the account needs to be confirmed",
                    "type": "boolean"
                  },
                  "email": {
                    "description": "The email of the user",
                    "type": "string"
                  },
                  "extern_uid": {
                    "description": "The external authentication provider UID",
                    "type": "string"
                  },
                  "external": {
                    "description": "Flag indicating the user is an external user",
                    "type": "boolean"
                  },
                  "linkedin": {
                    "description": "The LinkedIn username",
                    "type": "string"
                  },
                  "location": {
                    "description": "The location of the user",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the user",
                    "type": "string"
                  },
                  "organization": {
                    "description": "The organization of the user",
                    "type": "string"
                  },
                  "password": {
                    "description": "The password of the new user",
                    "type": "string"
                  },
                  "projects_limit": {
                    "description": "The number of projects a user can create",
                    "format": "int32",
                    "type": "integer"
                  },
                  "provider": {
                    "description": "The external provider",
                    "type": "string"
                  },
                  "skype": {
                    "description": "The Skype username",
                    "type": "string"
                  },
                  "twitter": {
                    "description": "The Twitter username",
                    "type": "string"
                  },
                  "username": {
                    "description": "The username of the user",
                    "type": "string"
                  },
                  "website_url": {
                    "description": "The website of the user",
                    "type": "string"
                  }
                },
                "required": [
                  "email"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Create a user. Available only for admins."
      }
    },
    "/v3/users/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Email"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Email"
                }
              }
            },
            "description": "Delete a user. Available only for admins."
          }
        },
        "tags": [
          "users"
        ],
        "description": "Delete a user. Available only for admins.",
        "operationId": "deleteV3UsersId",
        "summary": "Delete a user. Available only for admins."
      },
      "get": {
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserBasic"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserBasic"
                }
              }
            },
            "description": "Get a single user"
          }
        },
        "tags": [
          "users"
        ],
        "description": "Get a single user",
        "operationId": "getV3UsersId",
        "summary": "Get a single user"
      },
      "put": {
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPublic"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserPublic"
                }
              }
            },
            "description": "Update a user. Available only for admins."
          }
        },
        "tags": [
          "users"
        ],
        "description": "Update a user. Available only for admins.",
        "operationId": "putV3UsersId",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "admin": {
                    "description": "Flag indicating the user is an administrator",
                    "type": "boolean"
                  },
                  "bio": {
                    "description": "The biography of the user",
                    "type": "string"
                  },
                  "can_create_group": {
                    "description": "Flag indicating the user can create groups",
                    "type": "boolean"
                  },
                  "confirm": {
                    "description": "Flag indicating the account needs to be confirmed",
                    "type": "boolean"
                  },
                  "email": {
                    "description": "The email of the user",
                    "type": "string"
                  },
                  "extern_uid": {
                    "description": "The external authentication provider UID",
                    "type": "string"
                  },
                  "external": {
                    "description": "Flag indicating the user is an external user",
                    "type": "boolean"
                  },
                  "linkedin": {
                    "description": "The LinkedIn username",
                    "type": "string"
                  },
                  "location": {
                    "description": "The location of the user",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the user",
                    "type": "string"
                  },
                  "organization": {
                    "description": "The organization of the user",
                    "type": "string"
                  },
                  "password": {
                    "description": "The password of the new user",
                    "type": "string"
                  },
                  "projects_limit": {
                    "description": "The number of projects a user can create",
                    "format": "int32",
                    "type": "integer"
                  },
                  "provider": {
                    "description": "The external provider",
                    "type": "string"
                  },
                  "skype": {
                    "description": "The Skype username",
                    "type": "string"
                  },
                  "twitter": {
                    "description": "The Twitter username",
                    "type": "string"
                  },
                  "username": {
                    "description": "The username of the user",
                    "type": "string"
                  },
                  "website_url": {
                    "description": "The website of the user",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Update a user. Available only for admins."
      }
    },
    "/v3/users/{id}/block": {
      "put": {
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Block a user. Available only for admins."
          }
        },
        "tags": [
          "users"
        ],
        "description": "Block a user. Available only for admins.",
        "operationId": "putV3UsersIdBlock",
        "summary": "Block a user. Available only for admins."
      }
    },
    "/v3/users/{id}/emails": {
      "get": {
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Email"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Email"
                }
              }
            },
            "description": "Get the emails addresses of a specified user. Available only for admins."
          }
        },
        "tags": [
          "users"
        ],
        "description": "Get the emails addresses of a specified user. Available only for admins.",
        "operationId": "getV3UsersIdEmails",
        "summary": "Get the emails addresses of a specified user. Available only for admins."
      },
      "post": {
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Email"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Email"
                }
              }
            },
            "description": "Add an email address to a specified user. Available only for admins."
          }
        },
        "tags": [
          "users"
        ],
        "description": "Add an email address to a specified user. Available only for admins.",
        "operationId": "postV3UsersIdEmails",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "email": {
                    "description": "The email of the user",
                    "type": "string"
                  }
                },
                "required": [
                  "email"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Add an email address to a specified user. Available only for admins."
      }
    },
    "/v3/users/{id}/emails/{email_id}": {
      "delete": {
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The ID of the email",
            "in": "path",
            "name": "email_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Email"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Email"
                }
              }
            },
            "description": "Delete an email address of a specified user. Available only for admins."
          }
        },
        "tags": [
          "users"
        ],
        "description": "Delete an email address of a specified user. Available only for admins.",
        "operationId": "deleteV3UsersIdEmailsEmailId",
        "summary": "Delete an email address of a specified user. Available only for admins."
      }
    },
    "/v3/users/{id}/events": {
      "get": {
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            },
            "description": "Get the contribution events of a specified user"
          }
        },
        "tags": [
          "users"
        ],
        "description": "This feature was introduced in GitLab 8.13.",
        "operationId": "getV3UsersIdEvents",
        "summary": "Get the contribution events of a specified user"
      }
    },
    "/v3/users/{id}/keys": {
      "get": {
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SSHKey"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SSHKey"
                }
              }
            },
            "description": "Get the SSH keys of a specified user. Available only for admins."
          }
        },
        "tags": [
          "users"
        ],
        "description": "Get the SSH keys of a specified user. Available only for admins.",
        "operationId": "getV3UsersIdKeys",
        "summary": "Get the SSH keys of a specified user. Available only for admins."
      },
      "post": {
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SSHKey"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SSHKey"
                }
              }
            },
            "description": "Add an SSH key to a specified user. Available only for admins."
          }
        },
        "tags": [
          "users"
        ],
        "description": "Add an SSH key to a specified user. Available only for admins.",
        "operationId": "postV3UsersIdKeys",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "key": {
                    "description": "The new SSH key",
                    "type": "string"
                  },
                  "title": {
                    "description": "The title of the new SSH key",
                    "type": "string"
                  }
                },
                "required": [
                  "key"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Add an SSH key to a specified user. Available only for admins."
      }
    },
    "/v3/users/{id}/keys/{key_id}": {
      "delete": {
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The ID of the SSH key",
            "in": "path",
            "name": "key_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SSHKey"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SSHKey"
                }
              }
            },
            "description": "Delete an existing SSH key from a specified user. Available only for admins."
          }
        },
        "tags": [
          "users"
        ],
        "description": "Delete an existing SSH key from a specified user. Available only for admins.",
        "operationId": "deleteV3UsersIdKeysKeyId",
        "summary": "Delete an existing SSH key from a specified user. Available only for admins."
      }
    },
    "/v3/users/{id}/unblock": {
      "put": {
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Unblock a user. Available only for admins."
          }
        },
        "tags": [
          "users"
        ],
        "description": "Unblock a user. Available only for admins.",
        "operationId": "putV3UsersIdUnblock",
        "summary": "Unblock a user. Available only for admins."
      }
    },
    "/v3/version": {
      "get": {
        "responses": {
          "200": {
            "description": "Get the version information of the GitLab instance."
          }
        },
        "tags": [
          "version"
        ],
        "description": "This feature was introduced in GitLab 8.13.",
        "operationId": "getV3Version",
        "summary": "Get the version information of the GitLab instance."
      }
    }
  },
  "components": {
    "requestBodies": {
      "postV3GroupsIdMembers": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "properties": {
                "access_level": {
                  "description": "A valid access level (defaults: `30`, developer access level)",
                  "format": "int32",
                  "type": "integer"
                },
                "expires_at": {
                  "description": "Date string in the format YEAR-MONTH-DAY",
                  "format": "date-time",
                  "type": "string"
                },
                "user_id": {
                  "description": "The user ID of the new member",
                  "format": "int32",
                  "type": "integer"
                }
              },
              "required": [
                "user_id"
              ],
              "type": "object"
            }
          }
        }
      },
      "postV3ProjectsIdHooks": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "properties": {
                "build_events": {
                  "description": "Trigger hook on build events",
                  "type": "boolean"
                },
                "enable_ssl_verification": {
                  "description": "Do SSL verification when triggering the hook",
                  "type": "boolean"
                },
                "issues_events": {
                  "description": "Trigger hook on issues events",
                  "type": "boolean"
                },
                "merge_requests_events": {
                  "description": "Trigger hook on merge request events",
                  "type": "boolean"
                },
                "note_events": {
                  "description": "Trigger hook on note(comment) events",
                  "type": "boolean"
                },
                "pipeline_events": {
                  "description": "Trigger hook on pipeline events",
                  "type": "boolean"
                },
                "push_events": {
                  "description": "Trigger hook on push events",
                  "type": "boolean"
                },
                "tag_push_events": {
                  "description": "Trigger hook on tag push events",
                  "type": "boolean"
                },
                "token": {
                  "description": "Secret token to validate received payloads; this will not be returned in the response",
                  "type": "string"
                },
                "url": {
                  "description": "The URL to send the request to",
                  "type": "string"
                },
                "wiki_page_events": {
                  "description": "Trigger hook on wiki events",
                  "type": "boolean"
                }
              },
              "required": [
                "url"
              ],
              "type": "object"
            }
          }
        }
      },
      "postV3ProjectsIdIssuesIssueIdAwardEmoji": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "properties": {
                "name": {
                  "description": "The name of a award_emoji (without colons)",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object"
            }
          }
        }
      },
      "postV3ProjectsIdIssuesIssueIdTimeEstimate": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "properties": {
                "duration": {
                  "description": "The duration to be parsed",
                  "type": "string"
                }
              },
              "required": [
                "duration"
              ],
              "type": "object"
            }
          }
        }
      },
      "postV3ProjectsIdIssuesNoteableIdNotes": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "properties": {
                "body": {
                  "description": "The content of a note",
                  "type": "string"
                },
                "created_at": {
                  "description": "The creation date of the note",
                  "type": "string"
                }
              },
              "required": [
                "body"
              ],
              "type": "object"
            }
          }
        }
      },
      "postV3ProjectsIdKeys": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "properties": {
                "key": {
                  "description": "The new deploy key",
                  "type": "string"
                },
                "title": {
                  "description": "The name of the deploy key",
                  "type": "string"
                }
              },
              "required": [
                "key"
              ],
              "type": "object"
            }
          }
        }
      },
      "postV3ProjectsIdMergeRequestMergeRequestIdComments": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "properties": {
                "note": {
                  "description": "The text of the comment",
                  "type": "string"
                }
              },
              "required": [
                "note"
              ],
              "type": "object"
            }
          }
        }
      },
      "postV3ProjectsIdRepositoryFiles": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "properties": {
                "author_email": {
                  "description": "The email of the author",
                  "type": "string"
                },
                "author_name": {
                  "description": "The name of the author",
                  "type": "string"
                },
                "branch_name": {
                  "description": "The name of branch",
                  "type": "string"
                },
                "commit_message": {
                  "description": "Commit Message",
                  "type": "string"
                },
                "content": {
                  "description": "File content",
                  "type": "string"
                },
                "encoding": {
                  "description": "File encoding",
                  "enum": [
                    "base64"
                  ],
                  "type": "string"
                },
                "file_path": {
                  "description": "The path to new file. Ex. lib/class.rb",
                  "type": "string"
                }
              },
              "required": [
                "file_path"
              ],
              "type": "object"
            }
          }
        }
      },
      "postV3ProjectsIdRepositoryTagsTagNameRelease": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "properties": {
                "description": {
                  "description": "Release notes with markdown support",
                  "type": "string"
                }
              },
              "required": [
                "description"
              ],
              "type": "object"
            }
          }
        }
      },
      "postV3UsersIdKeys": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "properties": {
                "key": {
                  "description": "The new SSH key",
                  "type": "string"
                },
                "title": {
                  "description": "The title of the new SSH key",
                  "type": "string"
                }
              },
              "required": [
                "key"
              ],
              "type": "object"
            }
          }
        }
      },
      "putV3GroupsIdAccessRequestsUserIdApprove": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "properties": {
                "access_level": {
                  "description": "A valid access level (defaults: `30`, developer access level)",
                  "format": "int32",
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        }
      },
      "putV3GroupsIdMembersUserId": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "properties": {
                "access_level": {
                  "description": "A valid access level",
                  "format": "int32",
                  "type": "integer"
                },
                "expires_at": {
                  "description": "Date string in the format YEAR-MONTH-DAY",
                  "format": "date-time",
                  "type": "string"
                }
              },
              "required": [
                "access_level"
              ],
              "type": "object"
            }
          }
        }
      },
      "putV3ProjectsIdIssuesNoteableIdNotesNoteId": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "properties": {
                "body": {
                  "description": "The content of a note",
                  "type": "string"
                }
              },
              "required": [
                "body"
              ],
              "type": "object"
            }
          }
        }
      },
      "putV3ProjectsIdMergeRequestMergeRequestIdMerge": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "properties": {
                "merge_commit_message": {
                  "description": "Custom merge commit message",
                  "type": "string"
                },
                "merge_when_build_succeeds": {
                  "description": "When true, this merge request will be merged when the pipeline succeeds",
                  "type": "boolean"
                },
                "sha": {
                  "description": "When present, must have the HEAD SHA of the source branch",
                  "type": "string"
                },
                "should_remove_source_branch": {
                  "description": "When true, the source branch will be deleted if possible",
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          }
        }
      },
      "putV3ProjectsIdMergeRequestsMergeRequestId": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "properties": {
                "assignee_id": {
                  "description": "The ID of a user to assign the merge request",
                  "format": "int32",
                  "type": "integer"
                },
                "description": {
                  "description": "The description of the merge request",
                  "type": "string"
                },
                "labels": {
                  "description": "Comma-separated list of label names",
                  "type": "string"
                },
                "milestone_id": {
                  "description": "The ID of a milestone to assign the merge request",
                  "format": "int32",
                  "type": "integer"
                },
                "remove_source_branch": {
                  "description": "Remove source branch when merging",
                  "type": "boolean"
                },
                "state_event": {
                  "description": "Status of the merge request",
                  "enum": [
                    "close",
                    "reopen",
                    "merge"
                  ],
                  "type": "string"
                },
                "target_branch": {
                  "description": "The target branch",
                  "type": "string"
                },
                "title": {
                  "description": "The title of the merge request",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        }
      },
      "putV3ProjectsIdServicesBugzilla": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "properties": {
                "description": {
                  "description": "Description",
                  "type": "string"
                },
                "issues_url": {
                  "description": "Issues URL",
                  "type": "string"
                },
                "new_issue_url": {
                  "description": "New issue URL",
                  "type": "string"
                },
                "project_url": {
                  "description": "Project URL",
                  "type": "string"
                },
                "push_events": {
                  "description": "Event will be triggered by a push to the repository",
                  "type": "string"
                },
                "title": {
                  "description": "Title",
                  "type": "string"
                }
              },
              "required": [
                "new_issue_url"
              ],
              "type": "object"
            }
          }
        }
      },
      "putV3ProjectsIdServicesMattermostSlashCommands": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "properties": {
                "token": {
                  "description": "The Mattermost token",
                  "type": "string"
                }
              },
              "required": [
                "token"
              ],
              "type": "object"
            }
          }
        }
      },
      "putV3ProjectsIdServicesSlackSlashCommands": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "properties": {
                "token": {
                  "description": "The Slack token",
                  "type": "string"
                }
              },
              "required": [
                "token"
              ],
              "type": "object"
            }
          }
        }
      }
    },
    "schemas": {
      "AccessRequester": {
        "description": "This feature was introduced in GitLab 8.11.",
        "properties": {
          "avatar_url": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "requested_at": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "web_url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApplicationSetting": {
        "description": "Modify application settings",
        "properties": {
          "after_sign_out_path": {
            "type": "string"
          },
          "after_sign_up_text": {
            "type": "string"
          },
          "container_registry_token_expire_delay": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "default_branch_protection": {
            "type": "string"
          },
          "default_group_visibility": {
            "type": "string"
          },
          "default_project_visibility": {
            "type": "string"
          },
          "default_projects_limit": {
            "type": "string"
          },
          "default_snippet_visibility": {
            "type": "string"
          },
          "domain_blacklist": {
            "type": "string"
          },
          "domain_blacklist_enabled": {
            "type": "string"
          },
          "domain_whitelist": {
            "type": "string"
          },
          "gravatar_enabled": {
            "type": "string"
          },
          "home_page_url": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "koding_enabled": {
            "type": "string"
          },
          "koding_url": {
            "type": "string"
          },
          "max_attachment_size": {
            "type": "string"
          },
          "plantuml_enabled": {
            "type": "string"
          },
          "plantuml_url": {
            "type": "string"
          },
          "repository_storage": {
            "type": "string"
          },
          "repository_storages": {
            "type": "string"
          },
          "restricted_visibility_levels": {
            "type": "string"
          },
          "session_expire_delay": {
            "type": "string"
          },
          "sign_in_text": {
            "type": "string"
          },
          "signin_enabled": {
            "type": "string"
          },
          "signup_enabled": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "user_oauth_applications": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "AwardEmoji": {
        "description": "This feature was introduced in 8.9",
        "properties": {
          "awardable_id": {
            "type": "string"
          },
          "awardable_type": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/UserBasic"
          }
        },
        "type": "object"
      },
      "BasicProjectDetails": {
        "description": "Get all projects for admin user",
        "properties": {
          "http_url_to_repo": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "name_with_namespace": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "path_with_namespace": {
            "type": "string"
          },
          "web_url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Board": {
        "description": "This feature was introduced in 8.13",
        "properties": {
          "id": {
            "type": "string"
          },
          "lists": {
            "$ref": "#/components/schemas/List"
          }
        },
        "type": "object"
      },
      "Build": {
        "description": "This feature was added in GitLab 8.11",
        "properties": {
          "artifacts_file": {
            "$ref": "#/components/schemas/BuildArtifactFile"
          },
          "commit": {
            "$ref": "#/components/schemas/RepoCommit"
          },
          "coverage": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "finished_at": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "pipeline": {
            "$ref": "#/components/schemas/PipelineBasic"
          },
          "ref": {
            "type": "string"
          },
          "runner": {
            "$ref": "#/components/schemas/Runner"
          },
          "stage": {
            "type": "string"
          },
          "started_at": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "tag": {
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        },
        "type": "object"
      },
      "BuildArtifactFile": {
        "properties": {
          "filename": {
            "type": "string"
          },
          "size": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "CommitNote": {
        "description": "Post comment to commit",
        "properties": {
          "author": {
            "$ref": "#/components/schemas/UserBasic"
          },
          "created_at": {
            "type": "string"
          },
          "line": {
            "type": "string"
          },
          "line_type": {
            "type": "string"
          },
          "note": {
            "type": "string"
          },
          "path": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "CommitStatus": {
        "description": "Post status to a commit",
        "properties": {
          "allow_failure": {
            "type": "string"
          },
          "author": {
            "$ref": "#/components/schemas/UserBasic"
          },
          "created_at": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "finished_at": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "ref": {
            "type": "string"
          },
          "sha": {
            "type": "string"
          },
          "started_at": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "target_url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Compare": {
        "description": "Compare two branches, tags, or commits",
        "properties": {
          "commit": {
            "$ref": "#/components/schemas/RepoCommit"
          },
          "commits": {
            "$ref": "#/components/schemas/RepoCommit"
          },
          "compare_same_ref": {
            "type": "string"
          },
          "compare_timeout": {
            "type": "string"
          },
          "diffs": {
            "$ref": "#/components/schemas/RepoDiff"
          }
        },
        "type": "object"
      },
      "Contributor": {
        "description": "Get repository contributors",
        "properties": {
          "additions": {
            "type": "string"
          },
          "commits": {
            "type": "string"
          },
          "deletions": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Deployment": {
        "description": "This feature was introduced in GitLab 8.11.",
        "properties": {
          "created_at": {
            "type": "string"
          },
          "deployable": {
            "$ref": "#/components/schemas/Build"
          },
          "environment": {
            "$ref": "#/components/schemas/EnvironmentBasic"
          },
          "id": {
            "type": "string"
          },
          "iid": {
            "type": "string"
          },
          "ref": {
            "type": "string"
          },
          "sha": {
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/UserBasic"
          }
        },
        "type": "object"
      },
      "Email": {
        "description": "Add new email address to the currently authenticated user",
        "properties": {
          "email": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Environment": {
        "description": "This feature was introduced in GitLab 8.11.",
        "properties": {
          "external_url": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "project": {
            "$ref": "#/components/schemas/Project"
          },
          "slug": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "EnvironmentBasic": {
        "properties": {
          "external_url": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Event": {
        "description": "This feature was introduced in GitLab 8.13.",
        "properties": {
          "action_name": {
            "type": "string"
          },
          "author": {
            "$ref": "#/components/schemas/UserBasic"
          },
          "author_id": {
            "type": "string"
          },
          "author_username": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "data": {
            "type": "string"
          },
          "note": {
            "$ref": "#/components/schemas/Note"
          },
          "project_id": {
            "type": "string"
          },
          "target_id": {
            "type": "string"
          },
          "target_title": {
            "type": "string"
          },
          "target_type": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GlobalNotificationSetting": {
        "description": "This feature was introduced in GitLab 8.12",
        "properties": {
          "events": {
            "type": "string"
          },
          "level": {
            "type": "string"
          },
          "notification_email": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Group": {
        "description": "Update a group. Available only for users who can administrate groups.",
        "properties": {
          "avatar_url": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "lfs_enabled": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "request_access_enabled": {
            "type": "string"
          },
          "statistics": {
            "type": "string"
          },
          "visibility_level": {
            "type": "string"
          },
          "web_url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GroupDetail": {
        "description": "Transfer a project to the group namespace. Available only for admin.",
        "properties": {
          "avatar_url": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "lfs_enabled": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "projects": {
            "$ref": "#/components/schemas/Project"
          },
          "request_access_enabled": {
            "type": "string"
          },
          "shared_projects": {
            "$ref": "#/components/schemas/Project"
          },
          "statistics": {
            "type": "string"
          },
          "visibility_level": {
            "type": "string"
          },
          "web_url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Hook": {
        "description": "Delete a hook",
        "properties": {
          "created_at": {
            "type": "string"
          },
          "enable_ssl_verification": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "push_events": {
            "type": "string"
          },
          "tag_push_events": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Identity": {
        "properties": {
          "extern_uid": {
            "type": "string"
          },
          "provider": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Issue": {
        "description": "Get currently authenticated user's issues",
        "properties": {
          "assignee": {
            "$ref": "#/components/schemas/UserBasic"
          },
          "author": {
            "$ref": "#/components/schemas/UserBasic"
          },
          "confidential": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "downvotes": {
            "type": "string"
          },
          "due_date": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "iid": {
            "type": "string"
          },
          "labels": {
            "type": "string"
          },
          "milestone": {
            "$ref": "#/components/schemas/Milestone"
          },
          "project_id": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "subscribed": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "upvotes": {
            "type": "string"
          },
          "user_notes_count": {
            "type": "string"
          },
          "web_url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Label": {
        "description": "Unsubscribe from a resource",
        "properties": {
          "closed_issues_count": {
            "type": "string"
          },
          "color": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "open_issues_count": {
            "type": "string"
          },
          "open_merge_requests_count": {
            "type": "string"
          },
          "priority": {
            "type": "string"
          },
          "subscribed": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "LabelBasic": {
        "properties": {
          "color": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "List": {
        "description": "This feature was introduced in 8.13",
        "properties": {
          "id": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/LabelBasic"
          },
          "position": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "MRNote": {
        "description": "List issues that will be closed on merge",
        "properties": {
          "author": {
            "$ref": "#/components/schemas/UserBasic"
          },
          "note": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Member": {
        "description": "Updates a member of a group or project.",
        "properties": {
          "access_level": {
            "type": "string"
          },
          "avatar_url": {
            "type": "string"
          },
          "expires_at": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "web_url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "MergeRequest": {
        "description": "Unsubscribe from a resource",
        "properties": {
          "assignee": {
            "$ref": "#/components/schemas/UserBasic"
          },
          "author": {
            "$ref": "#/components/schemas/UserBasic"
          },
          "created_at": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "downvotes": {
            "type": "string"
          },
          "force_remove_source_branch": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "iid": {
            "type": "string"
          },
          "labels": {
            "type": "string"
          },
          "merge_commit_sha": {
            "type": "string"
          },
          "merge_status": {
            "type": "string"
          },
          "merge_when_build_succeeds": {
            "type": "string"
          },
          "milestone": {
            "$ref": "#/components/schemas/Milestone"
          },
          "project_id": {
            "type": "string"
          },
          "sha": {
            "type": "string"
          },
          "should_remove_source_branch": {
            "type": "string"
          },
          "source_branch": {
            "type": "string"
          },
          "source_project_id": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "subscribed": {
            "type": "string"
          },
          "target_branch": {
            "type": "string"
          },
          "target_project_id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "upvotes": {
            "type": "string"
          },
          "user_notes_count": {
            "type": "string"
          },
          "web_url": {
            "type": "string"
          },
          "work_in_progress": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "MergeRequestChanges": {
        "description": "Show the merge request changes",
        "properties": {
          "assignee": {
            "$ref": "#/components/schemas/UserBasic"
          },
          "author": {
            "$ref": "#/components/schemas/UserBasic"
          },
          "changes": {
            "$ref": "#/components/schemas/RepoDiff"
          },
          "created_at": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "downvotes": {
            "type": "string"
          },
          "force_remove_source_branch": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "iid": {
            "type": "string"
          },
          "labels": {
            "type": "string"
          },
          "merge_commit_sha": {
            "type": "string"
          },
          "merge_status": {
            "type": "string"
          },
          "merge_when_build_succeeds": {
            "type": "string"
          },
          "milestone": {
            "$ref": "#/components/schemas/Milestone"
          },
          "project_id": {
            "type": "string"
          },
          "sha": {
            "type": "string"
          },
          "should_remove_source_branch": {
            "type": "string"
          },
          "source_branch": {
            "type": "string"
          },
          "source_project_id": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "subscribed": {
            "type": "string"
          },
          "target_branch": {
            "type": "string"
          },
          "target_project_id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "upvotes": {
            "type": "string"
          },
          "user_notes_count": {
            "type": "string"
          },
          "web_url": {
            "type": "string"
          },
          "work_in_progress": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "MergeRequestDiff": {
        "description": "This feature was introduced in GitLab 8.12.",
        "properties": {
          "base_commit_sha": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "head_commit_sha": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "merge_request_id": {
            "type": "string"
          },
          "real_size": {
            "type": "string"
          },
          "start_commit_sha": {
            "type": "string"
          },
          "state": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "MergeRequestDiffFull": {
        "description": "This feature was introduced in GitLab 8.12.",
        "properties": {
          "base_commit_sha": {
            "type": "string"
          },
          "commits": {
            "$ref": "#/components/schemas/RepoCommit"
          },
          "created_at": {
            "type": "string"
          },
          "diffs": {
            "$ref": "#/components/schemas/RepoDiff"
          },
          "head_commit_sha": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "merge_request_id": {
            "type": "string"
          },
          "real_size": {
            "type": "string"
          },
          "start_commit_sha": {
            "type": "string"
          },
          "state": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Milestone": {
        "description": "Update an existing project milestone",
        "properties": {
          "created_at": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "due_date": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "iid": {
            "type": "string"
          },
          "project_id": {
            "type": "string"
          },
          "start_date": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Namespace": {
        "description": "Get a namespaces list",
        "properties": {
          "id": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Note": {
        "description": "Delete a +noteable+ note",
        "properties": {
          "attachment": {
            "type": "string"
          },
          "author": {
            "$ref": "#/components/schemas/UserBasic"
          },
          "body": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "downvote?": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "noteable_id": {
            "type": "string"
          },
          "noteable_type": {
            "type": "string"
          },
          "system": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "upvote?": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "NotificationSetting": {
        "description": "This feature was introduced in GitLab 8.12",
        "properties": {
          "events": {
            "type": "string"
          },
          "level": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PersonalSnippet": {
        "description": "This feature was introduced in GitLab 8.15.",
        "properties": {
          "author": {
            "$ref": "#/components/schemas/UserBasic"
          },
          "created_at": {
            "type": "string"
          },
          "file_name": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "raw_url": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "web_url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Pipeline": {
        "description": "This feature was introduced in GitLab 8.11.",
        "properties": {
          "before_sha": {
            "type": "string"
          },
          "committed_at": {
            "type": "string"
          },
          "coverage": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "duration": {
            "type": "string"
          },
          "finished_at": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "ref": {
            "type": "string"
          },
          "sha": {
            "type": "string"
          },
          "started_at": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "tag": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/UserBasic"
          },
          "yaml_errors": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PipelineBasic": {
        "properties": {
          "id": {
            "type": "string"
          },
          "ref": {
            "type": "string"
          },
          "sha": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Project": {
        "description": "Unstar a project",
        "properties": {
          "archived": {
            "type": "string"
          },
          "avatar_url": {
            "type": "string"
          },
          "builds_enabled": {
            "type": "string"
          },
          "container_registry_enabled": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "creator_id": {
            "type": "string"
          },
          "default_branch": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "forked_from_project": {
            "$ref": "#/components/schemas/BasicProjectDetails"
          },
          "forks_count": {
            "type": "string"
          },
          "http_url_to_repo": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "issues_enabled": {
            "type": "string"
          },
          "last_activity_at": {
            "type": "string"
          },
          "lfs_enabled": {
            "type": "string"
          },
          "merge_requests_enabled": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "name_with_namespace": {
            "type": "string"
          },
          "namespace": {
            "$ref": "#/components/schemas/Namespace"
          },
          "only_allow_merge_if_all_discussions_are_resolved": {
            "type": "string"
          },
          "only_allow_merge_if_build_succeeds": {
            "type": "string"
          },
          "open_issues_count": {
            "type": "string"
          },
          "owner": {
            "$ref": "#/components/schemas/UserBasic"
          },
          "path": {
            "type": "string"
          },
          "path_with_namespace": {
            "type": "string"
          },
          "public": {
            "type": "string"
          },
          "public_builds": {
            "type": "string"
          },
          "request_access_enabled": {
            "type": "string"
          },
          "runners_token": {
            "type": "string"
          },
          "shared_runners_enabled": {
            "type": "string"
          },
          "shared_with_groups": {
            "type": "string"
          },
          "snippets_enabled": {
            "type": "string"
          },
          "ssh_url_to_repo": {
            "type": "string"
          },
          "star_count": {
            "type": "string"
          },
          "statistics": {
            "$ref": "#/components/schemas/ProjectStatistics"
          },
          "tag_list": {
            "type": "string"
          },
          "visibility_level": {
            "type": "string"
          },
          "web_url": {
            "type": "string"
          },
          "wiki_enabled": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProjectGroupLink": {
        "description": "Share the project with a group",
        "properties": {
          "expires_at": {
            "type": "string"
          },
          "group_access": {
            "type": "string"
          },
          "group_id": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "project_id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProjectHook": {
        "description": "Deletes project hook",
        "properties": {
          "build_events": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "enable_ssl_verification": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "issues_events": {
            "type": "string"
          },
          "merge_requests_events": {
            "type": "string"
          },
          "note_events": {
            "type": "string"
          },
          "pipeline_events": {
            "type": "string"
          },
          "project_id": {
            "type": "string"
          },
          "push_events": {
            "type": "string"
          },
          "tag_push_events": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "wiki_page_events": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProjectService": {
        "description": "Get the service settings for project",
        "properties": {
          "active": {
            "type": "string"
          },
          "build_events": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "issues_events": {
            "type": "string"
          },
          "merge_requests_events": {
            "type": "string"
          },
          "note_events": {
            "type": "string"
          },
          "pipeline_events": {
            "type": "string"
          },
          "properties": {
            "type": "string"
          },
          "push_events": {
            "type": "string"
          },
          "tag_push_events": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProjectSnippet": {
        "description": "Update an existing project snippet",
        "properties": {
          "author": {
            "$ref": "#/components/schemas/UserBasic"
          },
          "created_at": {
            "type": "string"
          },
          "expires_at": {
            "type": "string"
          },
          "file_name": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "web_url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProjectStatistics": {
        "properties": {
          "build_artifacts_size": {
            "type": "string"
          },
          "commit_count": {
            "type": "string"
          },
          "lfs_objects_size": {
            "type": "string"
          },
          "repository_size": {
            "type": "string"
          },
          "storage_size": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProjectWithAccess": {
        "description": "Get a single project",
        "properties": {
          "archived": {
            "type": "string"
          },
          "avatar_url": {
            "type": "string"
          },
          "builds_enabled": {
            "type": "string"
          },
          "container_registry_enabled": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "creator_id": {
            "type": "string"
          },
          "default_branch": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "forked_from_project": {
            "$ref": "#/components/schemas/BasicProjectDetails"
          },
          "forks_count": {
            "type": "string"
          },
          "http_url_to_repo": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "issues_enabled": {
            "type": "string"
          },
          "last_activity_at": {
            "type": "string"
          },
          "lfs_enabled": {
            "type": "string"
          },
          "merge_requests_enabled": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "name_with_namespace": {
            "type": "string"
          },
          "namespace": {
            "$ref": "#/components/schemas/Namespace"
          },
          "only_allow_merge_if_all_discussions_are_resolved": {
            "type": "string"
          },
          "only_allow_merge_if_build_succeeds": {
            "type": "string"
          },
          "open_issues_count": {
            "type": "string"
          },
          "owner": {
            "$ref": "#/components/schemas/UserBasic"
          },
          "path": {
            "type": "string"
          },
          "path_with_namespace": {
            "type": "string"
          },
          "permissions": {
            "type": "string"
          },
          "public": {
            "type": "string"
          },
          "public_builds": {
            "type": "string"
          },
          "request_access_enabled": {
            "type": "string"
          },
          "runners_token": {
            "type": "string"
          },
          "shared_runners_enabled": {
            "type": "string"
          },
          "shared_with_groups": {
            "type": "string"
          },
          "snippets_enabled": {
            "type": "string"
          },
          "ssh_url_to_repo": {
            "type": "string"
          },
          "star_count": {
            "type": "string"
          },
          "statistics": {
            "$ref": "#/components/schemas/ProjectStatistics"
          },
          "tag_list": {
            "type": "string"
          },
          "visibility_level": {
            "type": "string"
          },
          "web_url": {
            "type": "string"
          },
          "wiki_enabled": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Release": {
        "description": "Update a tag's release note",
        "properties": {
          "description": {
            "type": "string"
          },
          "tag_name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RepoBranch": {
        "description": "Create branch",
        "properties": {
          "commit": {
            "type": "string"
          },
          "developers_can_merge": {
            "type": "string"
          },
          "developers_can_push": {
            "type": "string"
          },
          "merged": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "protected": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RepoCommit": {
        "description": "Get the commits of a merge request",
        "properties": {
          "author_email": {
            "type": "string"
          },
          "author_name": {
            "type": "string"
          },
          "committer_email": {
            "type": "string"
          },
          "committer_name": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "short_id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RepoCommitDetail": {
        "description": "Get a specific commit of a project",
        "properties": {
          "author_email": {
            "type": "string"
          },
          "author_name": {
            "type": "string"
          },
          "authored_date": {
            "type": "string"
          },
          "committed_date": {
            "type": "string"
          },
          "committer_email": {
            "type": "string"
          },
          "committer_name": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "parent_ids": {
            "type": "string"
          },
          "short_id": {
            "type": "string"
          },
          "stats": {
            "$ref": "#/components/schemas/RepoCommitStats"
          },
          "status": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RepoCommitStats": {
        "properties": {
          "additions": {
            "type": "string"
          },
          "deletions": {
            "type": "string"
          },
          "total": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RepoDiff": {
        "properties": {
          "a_mode": {
            "type": "string"
          },
          "b_mode": {
            "type": "string"
          },
          "deleted_file": {
            "type": "string"
          },
          "diff": {
            "type": "string"
          },
          "new_file": {
            "type": "string"
          },
          "new_path": {
            "type": "string"
          },
          "old_path": {
            "type": "string"
          },
          "renamed_file": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RepoLicense": {
        "description": "This feature was introduced in GitLab 8.7.",
        "properties": {
          "conditions": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "limitations": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "nickname": {
            "type": "string"
          },
          "permissions": {
            "type": "string"
          },
          "popular": {
            "type": "string"
          },
          "source_url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RepoTag": {
        "description": "Create a new repository tag",
        "properties": {
          "commit": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "release": {
            "$ref": "#/components/schemas/Release"
          }
        },
        "type": "object"
      },
      "RepoTreeObject": {
        "description": "Get a project repository tree",
        "properties": {
          "id": {
            "type": "string"
          },
          "mode": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Runner": {
        "description": "Remove a runner",
        "properties": {
          "active": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "is_shared": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RunnerDetails": {
        "description": "Update runner's details",
        "properties": {
          "active": {
            "type": "string"
          },
          "architecture": {
            "type": "string"
          },
          "contacted_at": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "is_shared": {
            "type": "string"
          },
          "locked": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "platform": {
            "type": "string"
          },
          "projects": {
            "$ref": "#/components/schemas/BasicProjectDetails"
          },
          "revision": {
            "type": "string"
          },
          "run_untagged": {
            "type": "string"
          },
          "tag_list": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "SSHKey": {
        "description": "Delete an SSH key from the currently authenticated user",
        "properties": {
          "can_push": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "SSHKeyWithUser": {
        "description": "Get single ssh key by id. Only available to admin users",
        "properties": {
          "can_push": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/UserPublic"
          }
        },
        "type": "object"
      },
      "Template": {
        "description": "This feature was introduced in GitLab 8.15. This endpoint is deprecated and will be removed in GitLab 9.0.",
        "properties": {
          "content": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TemplatesList": {
        "description": "This feature was introduced in GitLab 8.15. This endpoint is deprecated and will be removed in GitLab 9.0.",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Todo": {
        "description": "Mark a todo as done",
        "properties": {
          "action_name": {
            "type": "string"
          },
          "author": {
            "$ref": "#/components/schemas/UserBasic"
          },
          "body": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "project": {
            "$ref": "#/components/schemas/BasicProjectDetails"
          },
          "state": {
            "type": "string"
          },
          "target": {
            "type": "string"
          },
          "target_type": {
            "type": "string"
          },
          "target_url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Trigger": {
        "description": "Delete a trigger",
        "properties": {
          "created_at": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string"
          },
          "last_used": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TriggerRequest": {
        "description": "Trigger a GitLab project build",
        "properties": {
          "id": {
            "type": "string"
          },
          "variables": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "User": {
        "properties": {
          "avatar_url": {
            "type": "string"
          },
          "bio": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "is_admin": {
            "type": "string"
          },
          "linkedin": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "organization": {
            "type": "string"
          },
          "skype": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "twitter": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "web_url": {
            "type": "string"
          },
          "website_url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserBasic": {
        "description": "Get a single user",
        "properties": {
          "avatar_url": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "web_url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserPublic": {
        "description": "Get the currently authenticated user",
        "properties": {
          "avatar_url": {
            "type": "string"
          },
          "bio": {
            "type": "string"
          },
          "can_create_group": {
            "type": "string"
          },
          "can_create_project": {
            "type": "string"
          },
          "color_scheme_id": {
            "type": "string"
          },
          "confirmed_at": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "current_sign_in_at": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "external": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "identities": {
            "$ref": "#/components/schemas/Identity"
          },
          "is_admin": {
            "type": "string"
          },
          "last_sign_in_at": {
            "type": "string"
          },
          "linkedin": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "organization": {
            "type": "string"
          },
          "projects_limit": {
            "type": "string"
          },
          "skype": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "theme_id": {
            "type": "string"
          },
          "twitter": {
            "type": "string"
          },
          "two_factor_enabled": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "web_url": {
            "type": "string"
          },
          "website_url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserWithPrivateToken": {
        "description": "Login to get token",
        "properties": {
          "avatar_url": {
            "type": "string"
          },
          "bio": {
            "type": "string"
          },
          "can_create_group": {
            "type": "string"
          },
          "can_create_project": {
            "type": "string"
          },
          "color_scheme_id": {
            "type": "string"
          },
          "confirmed_at": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "current_sign_in_at": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "external": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "identities": {
            "$ref": "#/components/schemas/Identity"
          },
          "is_admin": {
            "type": "string"
          },
          "last_sign_in_at": {
            "type": "string"
          },
          "linkedin": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "organization": {
            "type": "string"
          },
          "private_token": {
            "type": "string"
          },
          "projects_limit": {
            "type": "string"
          },
          "skype": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "theme_id": {
            "type": "string"
          },
          "twitter": {
            "type": "string"
          },
          "two_factor_enabled": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "web_url": {
            "type": "string"
          },
          "website_url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Variable": {
        "description": "Delete an existing variable from a project",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "tags": [
    {
      "description": "Operations about groups",
      "name": "groups"
    },
    {
      "description": "Operations about projects",
      "name": "projects"
    },
    {
      "description": "Operations about internals",
      "name": "internal"
    },
    {
      "description": "Operations about issues",
      "name": "issues"
    },
    {
      "description": "Operations about keys",
      "name": "keys"
    },
    {
      "description": "Operations about cis",
      "name": "ci"
    },
    {
      "description": "Operations about namespaces",
      "name": "namespaces"
    },
    {
      "description": "Operations about notification_settings",
      "name": "notification_settings"
    },
    {
      "description": "Operations about runners",
      "name": "runners"
    },
    {
      "description": "Operations about snippets",
      "name": "snippets"
    },
    {
      "description": "Operations about hooks",
      "name": "hooks"
    },
    {
      "description": "Operations about todos",
      "name": "todos"
    },
    {
      "description": "Operations about users",
      "name": "users"
    },
    {
      "description": "Operations about users",
      "name": "user"
    },
    {
      "description": "Operations about deploy_keys",
      "name": "deploy_keys"
    },
    {
      "description": "Operations about sessions",
      "name": "session"
    },
    {
      "description": "Operations about applications",
      "name": "application"
    },
    {
      "description": "Operations about sidekiqs",
      "name": "sidekiq"
    },
    {
      "description": "Operations about licenses",
      "name": "licenses"
    },
    {
      "description": "Operations about templates",
      "name": "templates"
    },
    {
      "description": "Operations about gitignores",
      "name": "gitignores"
    },
    {
      "description": "Operations about gitlab_ci_ymls",
      "name": "gitlab_ci_ymls"
    },
    {
      "description": "Operations about dockerfiles",
      "name": "dockerfiles"
    },
    {
      "description": "Operations about versions",
      "name": "version"
    }
  ],
  "authorizations": {
    "private_token_header": {
      "keyname": "PRIVATE_HEADER",
      "passAs": "header",
      "type": "apiKey"
    },
    "private_token_query": {
      "keyname": "private_token",
      "passAs": "query",
      "type": "apiKey"
    }
  }
}