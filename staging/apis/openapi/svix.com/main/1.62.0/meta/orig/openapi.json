{
  "openapi": "3.1.0",
  "info": {
    "title": "Svix API",
    "description": "Welcome to the Svix API documentation!\n\nUseful links: [Homepage](https://www.svix.com) | [Support email](mailto:support+docs@svix.com) | [Blog](https://www.svix.com/blog/) | [Slack Community](https://www.svix.com/slack/)\n\n# Introduction\n\nThis is the reference documentation and schemas for the [Svix webhook service](https://www.svix.com) API. For tutorials and other documentation please refer to [the documentation](https://docs.svix.com).\n \n## Main concepts\n\nIn Svix you have four important entities you will be interacting with:\n\n- `messages`: these are the webhooks being sent. They can have contents and a few other properties.\n- `application`: this is where `messages` are sent to. Usually you want to create one application for each user on your platform.\n - `endpoint`: endpoints are the URLs messages will be sent to. Each application can have multiple `endpoints` and each message sent to that application will be sent to all of them (unless they are not subscribed to the sent event type).\n - `event-type`: event types are identifiers denoting the type of the message being sent. Event types are primarily used to decide which events are sent to which endpoint.\n\n\n## Authentication\n\nGet your authentication token (`AUTH_TOKEN`) from the [Svix dashboard](https://dashboard.svix.com) and use it as part of the `Authorization` header as such: `Authorization: Bearer ${AUTH_TOKEN}`. For more information on authentication, please refer to the [authentication token docs](https://docs.svix.com/api-keys).\n \n<SecurityDefinitions />\n\n\n## Code samples\n\nThe code samples assume you already have the respective libraries installed and you know how to use them. For the latest information on how to do that, please refer to [the documentation](https://docs.svix.com/).\n \n\n## Idempotency\n\nSvix supports [idempotency](https://en.wikipedia.org/wiki/Idempotence) for safely retrying requests without accidentally performing the same operation twice. This is useful when an API call is disrupted in transit and you do not receive a response.\n\nTo perform an idempotent request, pass the idempotency key in the `Idempotency-Key` header to the request. The idempotency key should be a unique value generated by the client. You can create the key in however way you like, though we suggest using UUID v4, or any other string with enough entropy to avoid collisions.\n\nSvix's idempotency works by saving the resulting status code and body of the first request made for any given idempotency key for any successful request. Subsequent requests with the same key return the same result for a period of up to 12 hours.\n\nPlease note that idempotency is only supported for `POST` requests.\n\n\n## Cross-Origin Resource Sharing\n\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n",
    "version": "1.62.0",
    "x-logo": {
      "altText": "Svix Logo",
      "url": "https://www.svix.com/static/img/brand-padded.svg"
    },
    "x-jentic-source-url": "https://api.svix.com/api/v1/openapi.json"
  },
  "servers": [
    {
      "url": "https://api.eu.svix.com/",
      "description": "The Svix EU region"
    },
    {
      "url": "https://api.us.svix.com/",
      "description": "The Svix US region"
    }
  ],
  "paths": {
    "/ingest/api/v1/source": {
      "get": {
        "tags": [
          "Ingest Source"
        ],
        "summary": "List Ingest Sources",
        "description": "List of all the organization's Ingest Sources.",
        "operationId": "v1.ingest.source.list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the number of returned items",
            "schema": {
              "description": "Limit the number of returned items",
              "type": "integer",
              "format": "uint64",
              "maximum": 250.0,
              "minimum": 1.0
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "iterator",
            "description": "The iterator returned from a prior invocation",
            "schema": {
              "description": "The iterator returned from a prior invocation",
              "type": "string",
              "maxLength": 26,
              "minLength": 26,
              "pattern": "^src_[A-Za-z0-9]{22}$",
              "example": "src_2yZwUhtgs5Ai8T9yRQJXA",
              "nullable": true
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "order",
            "description": "The sorting order of the returned items",
            "schema": {
              "description": "The sorting order of the returned items",
              "$ref": "#/components/schemas/Ordering",
              "nullable": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponse_IngestSourceOut_"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/ingest/api/v1/source' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n"
          }
        ]
      },
      "post": {
        "tags": [
          "Ingest Source"
        ],
        "summary": "Create Ingest Source",
        "description": "Create Ingest Source.",
        "operationId": "v1.ingest.source.create",
        "parameters": [
          {
            "in": "header",
            "name": "idempotency-key",
            "description": "The request's idempotency key",
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IngestSourceIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IngestSourceOut"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/ingest/api/v1/source' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n \\\n  -d '{\n        \"uid\": \"unique-identifier\"\n    }'"
          }
        ]
      }
    },
    "/ingest/api/v1/source/{source_id}": {
      "get": {
        "tags": [
          "Ingest Source"
        ],
        "summary": "Get Ingest Source",
        "description": "Get an Ingest Source by id or uid.",
        "operationId": "v1.ingest.source.get",
        "parameters": [
          {
            "in": "path",
            "name": "source_id",
            "description": "The Source's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Source's ID or UID.",
              "type": "string",
              "maxLength": 60,
              "minLength": 1,
              "example": "unique-identifier"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IngestSourceOut"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/ingest/api/v1/source/{source_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n"
          }
        ]
      },
      "put": {
        "tags": [
          "Ingest Source"
        ],
        "summary": "Update Source",
        "description": "Update an Ingest Source.",
        "operationId": "v1.ingest.source.update",
        "parameters": [
          {
            "in": "path",
            "name": "source_id",
            "description": "The Source's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Source's ID or UID.",
              "type": "string",
              "maxLength": 60,
              "minLength": 1,
              "example": "unique-identifier"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IngestSourceIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IngestSourceOut"
                }
              }
            }
          },
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IngestSourceOut"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'PUT' \\\n  'https://api.eu.svix.com/ingest/api/v1/source/{source_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n \\\n  -d '{\n        \"uid\": \"unique-identifier\"\n    }'"
          }
        ]
      },
      "delete": {
        "tags": [
          "Ingest Source"
        ],
        "summary": "Delete Ingest Source",
        "description": "Delete an Ingest Source.",
        "operationId": "v1.ingest.source.delete",
        "parameters": [
          {
            "in": "path",
            "name": "source_id",
            "description": "The Source's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Source's ID or UID.",
              "type": "string",
              "maxLength": 60,
              "minLength": 1,
              "example": "unique-identifier"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'DELETE' \\\n  'https://api.eu.svix.com/ingest/api/v1/source/{source_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n"
          }
        ]
      }
    },
    "/ingest/api/v1/source/{source_id}/token/rotate": {
      "post": {
        "tags": [
          "Ingest Source"
        ],
        "summary": "Rotate Ingest Token",
        "description": "Rotate the Ingest Source's Url Token.\n\nThis will rotate the ingest source's token, which is used to\nconstruct the unique `ingestUrl` for the source. Previous tokens\nwill remain valid for 48 hours after rotation. The token can be\nrotated a maximum of three times within the 48-hour period.",
        "operationId": "v1.ingest.source.rotate-token",
        "parameters": [
          {
            "in": "path",
            "name": "source_id",
            "description": "The Source's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Source's ID or UID.",
              "type": "string",
              "maxLength": 60,
              "minLength": 1,
              "example": "unique-identifier"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "idempotency-key",
            "description": "The request's idempotency key",
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RotateTokenOut"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/ingest/api/v1/source/{source_id}/token/rotate' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n"
          }
        ]
      }
    },
    "/ingest/api/v1/source/{source_id}/dashboard": {
      "post": {
        "tags": [
          "Ingest Source"
        ],
        "summary": "Ingest Source Consumer Portal",
        "description": "Get access to the Ingest Source Consumer Portal.",
        "operationId": "v1.ingest.dashboard",
        "parameters": [
          {
            "in": "path",
            "name": "source_id",
            "description": "The Source's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Source's ID or UID.",
              "type": "string",
              "maxLength": 60,
              "minLength": 1,
              "example": "unique-identifier"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "idempotency-key",
            "description": "The request's idempotency key",
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IngestSourceConsumerPortalAccessIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardAccessOut"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "const dashboardAccessOut = await svix.ingest.dashboard(\"source_id\", {\n    expiry: null,\n    readOnly: null\n});"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "const dashboardAccessOut = await svix.ingest.dashboard(\"source_id\", {\n    expiry: null,\n    readOnly: null\n});"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "dashboard_access_out = svix.ingest.dashboard(\"source_id\", IngestSourceConsumerPortalAccessIn(\n    expiry=None,\n    read_only=None\n), options=...)"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "dashboard_access_out = await svix.ingest.dashboard(\"source_id\" , IngestSourceConsumerPortalAccessIn(\n    expiry=None,\n    read_only=None\n ), options=...)"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "dashboardAccessOut, err := svixClient.Ingest.Dashboard(ctx, \"source_id\", &IngestSourceConsumerPortalAccessIn{\n    Expiry: nil,\n    ReadOnly: nil,\n})"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "val dashboardAccessOut = svix.ingest.dashboard(\"source_id\", IngestSourceConsumerPortalAccessIn()\n    .expiry(null)\n    .readOnly(null)\n)"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "DashboardAccessOut dashboardAccessOut = svix.getIngest().dashboard(\"source_id\", new IngestSourceConsumerPortalAccessIn()\n    .expiry(null)\n    .readOnly(null)\n);"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "dashboard_access_out = svix.ingest.dashboard(\"source_id\", Svix::IngestSourceConsumerPortalAccessIn.new({\n    \"expiry\": nil,\n    \"read_only\": nil\n}))"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "let dashboard_access_out = svix.ingest().dashboard(\"source_id\" , IngestSourceConsumerPortalAccessIn {\n    expiry: None,\n    read_only: None,\n}, None).await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "var dashboardAccessOut = await svix.Ingest.DashboardAsync(\"source_id\", new IngestSourceConsumerPortalAccessIn{\n    expiry: null,\n    readOnly: null\n});"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix ingest dashboard \"source_id\" '{\n    \"expiry\": null,\n    \"readOnly\": null\n}'"
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/ingest/api/v1/source/{source_id}/dashboard' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n \\\n  -d '{\n        \"expiry\": null,\n        \"readOnly\": null\n    }'"
          }
        ]
      }
    },
    "/ingest/api/v1/source/{source_id}/endpoint": {
      "get": {
        "tags": [
          "Ingest Endpoint"
        ],
        "summary": "List Ingest Endpoints",
        "description": "List ingest endpoints.",
        "operationId": "v1.ingest.endpoint.list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the number of returned items",
            "schema": {
              "description": "Limit the number of returned items",
              "type": "integer",
              "format": "uint64",
              "maximum": 250.0,
              "minimum": 1.0
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "iterator",
            "description": "The iterator returned from a prior invocation",
            "schema": {
              "description": "The iterator returned from a prior invocation",
              "type": "string",
              "maxLength": 30,
              "minLength": 30,
              "pattern": "^ep_[A-Za-z0-9]{27}$",
              "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
              "nullable": true
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "order",
            "description": "The sorting order of the returned items",
            "schema": {
              "description": "The sorting order of the returned items",
              "$ref": "#/components/schemas/Ordering",
              "nullable": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponse_IngestEndpointOut_"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/ingest/api/v1/source/{source_id}/endpoint' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n"
          }
        ]
      },
      "post": {
        "tags": [
          "Ingest Endpoint"
        ],
        "summary": "Create Ingest Endpoint",
        "description": "Create an ingest endpoint.",
        "operationId": "v1.ingest.endpoint.create",
        "parameters": [
          {
            "in": "header",
            "name": "idempotency-key",
            "description": "The request's idempotency key",
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IngestEndpointIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IngestEndpointOut"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/ingest/api/v1/source/{source_id}/endpoint' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n \\\n  -d '{\n        \"description\": \"An example endpoint name\",\n        \"rateLimit\": null,\n        \"uid\": \"unique-identifier\",\n        \"url\": \"https://example.com/webhook/\",\n        \"disabled\": false,\n        \"secret\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n    }'"
          }
        ]
      }
    },
    "/ingest/api/v1/source/{source_id}/endpoint/{endpoint_id}": {
      "get": {
        "tags": [
          "Ingest Endpoint"
        ],
        "summary": "Get Ingest Endpoint",
        "description": "Get an ingest endpoint.",
        "operationId": "v1.ingest.endpoint.get",
        "parameters": [
          {
            "in": "path",
            "name": "endpoint_id",
            "description": "The Endpoint's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Endpoint's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IngestEndpointOut"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/ingest/api/v1/source/{source_id}/endpoint/{endpoint_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n"
          }
        ]
      },
      "put": {
        "tags": [
          "Ingest Endpoint"
        ],
        "summary": "Update Ingest Endpoint",
        "description": "Update an ingest endpoint.",
        "operationId": "v1.ingest.endpoint.update",
        "parameters": [
          {
            "in": "path",
            "name": "endpoint_id",
            "description": "The Endpoint's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Endpoint's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IngestEndpointUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IngestEndpointOut"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'PUT' \\\n  'https://api.eu.svix.com/ingest/api/v1/source/{source_id}/endpoint/{endpoint_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n \\\n  -d '{\n        \"description\": \"An example endpoint name\",\n        \"rateLimit\": null,\n        \"uid\": \"unique-identifier\",\n        \"url\": \"https://example.com/webhook/\",\n        \"disabled\": false\n    }'"
          }
        ]
      },
      "delete": {
        "tags": [
          "Ingest Endpoint"
        ],
        "summary": "Delete Ingest Endpoint",
        "description": "Delete an ingest endpoint.",
        "operationId": "v1.ingest.endpoint.delete",
        "parameters": [
          {
            "in": "path",
            "name": "endpoint_id",
            "description": "The Endpoint's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Endpoint's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'DELETE' \\\n  'https://api.eu.svix.com/ingest/api/v1/source/{source_id}/endpoint/{endpoint_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n"
          }
        ]
      }
    },
    "/ingest/api/v1/source/{source_id}/endpoint/{endpoint_id}/secret": {
      "get": {
        "tags": [
          "Ingest Endpoint"
        ],
        "summary": "Get Ingest Endpoint Secret",
        "description": "Get an ingest endpoint's signing secret.\n\nThis is used to verify the authenticity of the webhook.\nFor more information please refer to [the consuming webhooks docs](https://docs.svix.com/consuming-webhooks/).",
        "operationId": "v1.ingest.endpoint.get-secret",
        "parameters": [
          {
            "in": "path",
            "name": "endpoint_id",
            "description": "The Endpoint's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Endpoint's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IngestEndpointSecretOut"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/ingest/api/v1/source/{source_id}/endpoint/{endpoint_id}/secret' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n"
          }
        ]
      }
    },
    "/ingest/api/v1/source/{source_id}/endpoint/{endpoint_id}/secret/rotate": {
      "post": {
        "tags": [
          "Ingest Endpoint"
        ],
        "summary": "Rotate Ingest Endpoint Secret",
        "description": "Rotates an ingest endpoint's signing secret.\n\nThe previous secret will remain valid for the next 24 hours.",
        "operationId": "v1.ingest.endpoint.rotate-secret",
        "parameters": [
          {
            "in": "path",
            "name": "endpoint_id",
            "description": "The Endpoint's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Endpoint's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "idempotency-key",
            "description": "The request's idempotency key",
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IngestEndpointSecretIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "no content"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/ingest/api/v1/source/{source_id}/endpoint/{endpoint_id}/secret/rotate' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n \\\n  -d '{\n        \"key\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n    }'"
          }
        ]
      }
    },
    "/ingest/api/v1/source/{source_id}/endpoint/{endpoint_id}/headers": {
      "get": {
        "tags": [
          "Ingest Endpoint"
        ],
        "summary": "Get Ingest Endpoint Headers",
        "description": "Get the additional headers to be sent with the ingest.",
        "operationId": "v1.ingest.endpoint.get-headers",
        "parameters": [
          {
            "in": "path",
            "name": "endpoint_id",
            "description": "The Endpoint's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Endpoint's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IngestEndpointHeadersOut"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/ingest/api/v1/source/{source_id}/endpoint/{endpoint_id}/headers' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n"
          }
        ]
      },
      "put": {
        "tags": [
          "Ingest Endpoint"
        ],
        "summary": "Update Ingest Endpoint Headers",
        "description": "Set the additional headers to be sent to the endpoint.",
        "operationId": "v1.ingest.endpoint.update-headers",
        "parameters": [
          {
            "in": "path",
            "name": "endpoint_id",
            "description": "The Endpoint's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Endpoint's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IngestEndpointHeadersIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "no content"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'PUT' \\\n  'https://api.eu.svix.com/ingest/api/v1/source/{source_id}/endpoint/{endpoint_id}/headers' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n \\\n  -d '{\n        \"headers\": {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n    }'"
          }
        ]
      }
    },
    "/api/v1/auth/app-portal-access/{app_id}": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Get Consumer App Portal Access",
        "description": "Use this function to get magic links (and authentication codes) for connecting your users to the Consumer Application Portal.",
        "operationId": "v1.authentication.app-portal-access",
        "parameters": [
          {
            "in": "path",
            "name": "app_id",
            "description": "The Application's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Application's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "idempotency-key",
            "description": "The request's idempotency key",
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppPortalAccessIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppPortalAccessOut"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "const appPortalAccessOut = await svix.authentication.appPortalAccess(\"app_id\", {\n    application: null,\n    featureFlags: [],\n    expiry: null,\n    readOnly: null\n});"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "const appPortalAccessOut = await svix.authentication.appPortalAccess(\"app_id\", {\n    application: null,\n    featureFlags: [],\n    expiry: null,\n    readOnly: null\n});"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "app_portal_access_out = svix.authentication.app_portal_access(\"app_id\", AppPortalAccessIn(\n    application=None,\n    feature_flags=[],\n    expiry=None,\n    read_only=None\n), options=...)"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "app_portal_access_out = await svix.authentication.app_portal_access(\"app_id\", AppPortalAccessIn(\n    application=None,\n    feature_flags=[],\n    expiry=None,\n    read_only=None\n), options=...)"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "appPortalAccessOut, err := svixClient.Authentication.AppPortalAccess(ctx, \"app_id\", &AppPortalAccessIn{\n    Application: nil,\n    FeatureFlags: []interface{}{},\n    Expiry: nil,\n    ReadOnly: nil,\n})"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "val appPortalAccessOut = svix.authentication.appPortalAccess(\"app_id\", AppPortalAccessIn()\n    .application(null)\n    .featureFlags(arrayOf())\n    .expiry(null)\n    .readOnly(null)\n)"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "AppPortalAccessOut appPortalAccessOut = svix.getAuthentication().appPortalAccess(\"app_id\", new AppPortalAccessIn()\n    .application(null)\n    .featureFlags(new Object[]{})\n    .expiry(null)\n    .readOnly(null)\n);"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "app_portal_access_out = svix.authentication.app_portal_access(\"app_id\", Svix::AppPortalAccessIn.new({\n    \"application\": nil,\n    \"feature_flags\": [],\n    \"expiry\": nil,\n    \"read_only\": nil\n}))"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "let app_portal_access_out = svix.authentication().app_portal_access(\"app_id\", AppPortalAccessIn {\n    application: None,\n    feature_flags: Some(vec![]),\n    expiry: None,\n    read_only: None,\n}, None).await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "var appPortalAccessOut = await svix.Authentication.AppPortalAccessAsync(\"app_id\", new AppPortalAccessIn{\n    application: null,\n    featureFlags: new Object[] {},\n    expiry: null,\n    readOnly: null\n});"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix authentication app-portal-access \"app_id\" '{\n    \"application\": null,\n    \"featureFlags\": [],\n    \"expiry\": null,\n    \"readOnly\": null\n}'"
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/auth/app-portal-access/{app_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n \\\n  -d '{\n        \"application\": null,\n        \"featureFlags\": [],\n        \"expiry\": null,\n        \"readOnly\": null\n    }'"
          }
        ]
      }
    },
    "/api/v1/auth/dashboard-access/{app_id}": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Dashboard Access",
        "description": "DEPRECATED: Please use `app-portal-access` instead.\n\nUse this function to get magic links (and authentication codes) for connecting your users to the Consumer Application Portal.",
        "operationId": "v1.authentication.dashboard-access",
        "parameters": [
          {
            "in": "path",
            "name": "app_id",
            "description": "The Application's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Application's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "idempotency-key",
            "description": "The request's idempotency key",
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardAccessOut"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "const dashboardAccessOut = await svix.authentication.dashboardAccess(\"app_id\");"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "const dashboardAccessOut = await svix.authentication.dashboardAccess(\"app_id\");"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "dashboard_access_out = svix.authentication.dashboard_access(\"app_id\", options=...)"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "dashboard_access_out = await svix.authentication.dashboard_access(\"app_id\", options=...)"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "dashboardAccessOut, err := svixClient.Authentication.DashboardAccess(ctx, \"app_id\")"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "val dashboardAccessOut = svix.authentication.dashboardAccess(\"app_id\")"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "DashboardAccessOut dashboardAccessOut = svix.getAuthentication().dashboardAccess(\"app_id\");"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "dashboard_access_out = svix.authentication.dashboard_access(\"app_id\")"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "let dashboard_access_out = svix.authentication().dashboard_access(\"app_id\", None).await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "var dashboardAccessOut = await svix.Authentication.DashboardAccessAsync(\"app_id\");"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix authentication dashboard-access \"app_id\""
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/auth/dashboard-access/{app_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n"
          }
        ]
      }
    },
    "/api/v1/auth/logout": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Logout",
        "description": "Logout an app token.\n\nTrying to log out other tokens will fail.",
        "operationId": "v1.authentication.logout",
        "parameters": [
          {
            "in": "header",
            "name": "idempotency-key",
            "description": "The request's idempotency key",
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "await svix.authentication.logout();"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "await svix.authentication.logout();"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "svix.authentication.logout(options=...)"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "await svix.authentication.logout(options=...)"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "err := svixClient.Authentication.Logout(ctx)"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "svix.authentication.logout()"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "svix.getAuthentication().logout();"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "svix.authentication.logout()"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "svix.authentication().logout(None).await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "await svix.Authentication.LogoutAsync();"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix authentication logout "
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/auth/logout' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n"
          }
        ]
      }
    },
    "/api/v1/auth/app/{app_id}/expire-all": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Expire All",
        "description": "Expire all of the tokens associated with a specific application.",
        "operationId": "v1.authentication.expire-all",
        "parameters": [
          {
            "in": "path",
            "name": "app_id",
            "description": "The Application's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Application's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "idempotency-key",
            "description": "The request's idempotency key",
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationTokenExpireIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "no content"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "await svix.authentication.expireAll(\"app_id\", {\n    expiry: 60\n});"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "await svix.authentication.expireAll(\"app_id\", {\n    expiry: 60\n});"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "svix.authentication.expire_all(\"app_id\", ApplicationTokenExpireIn(\n    expiry=60\n), options=...)"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "await svix.authentication.expire_all(\"app_id\", ApplicationTokenExpireIn(\n    expiry=60\n), options=...)"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "err := svixClient.Authentication.ExpireAll(ctx, \"app_id\", &ApplicationTokenExpireIn{\n    Expiry: 60,\n})"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "svix.authentication.expireAll(\"app_id\", ApplicationTokenExpireIn()\n    .expiry(60)\n)"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "svix.getAuthentication().expireAll(\"app_id\", new ApplicationTokenExpireIn()\n    .expiry(60)\n);"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "svix.authentication.expire_all(\"app_id\", Svix::ApplicationTokenExpireIn.new({\n    \"expiry\": 60\n}))"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "svix.authentication().expire_all(\"app_id\", ApplicationTokenExpireIn {\n    expiry: Some(60),\n}, None).await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "await svix.Authentication.ExpireAllAsync(\"app_id\", new ApplicationTokenExpireIn{\n    expiry: 60\n});"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix authentication expire-all \"app_id\" '{\n    \"expiry\": 60\n}'"
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/auth/app/{app_id}/expire-all' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n \\\n  -d '{\n        \"expiry\": 60\n    }'"
          }
        ]
      }
    },
    "/api/v1/app": {
      "get": {
        "tags": [
          "Application"
        ],
        "summary": "List Applications",
        "description": "List of all the organization's applications.",
        "operationId": "v1.application.list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the number of returned items",
            "schema": {
              "description": "Limit the number of returned items",
              "type": "integer",
              "format": "uint64",
              "maximum": 250.0,
              "minimum": 1.0
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "iterator",
            "description": "The iterator returned from a prior invocation",
            "schema": {
              "description": "The iterator returned from a prior invocation",
              "type": "string",
              "maxLength": 31,
              "minLength": 31,
              "pattern": "^app_[A-Za-z0-9]{27}$",
              "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
              "nullable": true
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "order",
            "description": "The sorting order of the returned items",
            "schema": {
              "description": "The sorting order of the returned items",
              "$ref": "#/components/schemas/Ordering",
              "nullable": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponse_ApplicationOut_"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "const listResponseApplicationOut = await svix.application.list();"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "const listResponseApplicationOut = await svix.application.list();"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "list_response_application_out = svix.application.list(options=...)"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "list_response_application_out = await svix.application.list(options=...)"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "listResponseApplicationOut, err := svixClient.Application.List(ctx, nil)"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "val listResponseApplicationOut = svix.application.list()"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "ListResponseApplicationOut listResponseApplicationOut = svix.getApplication().list();"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "list_response_application_out = svix.application.list()"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "let list_response_application_out = svix.application().list(None).await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "var listResponseApplicationOut = await svix.Application.ListAsync();"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix application list "
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n"
          }
        ]
      },
      "post": {
        "tags": [
          "Application"
        ],
        "summary": "Create Application",
        "description": "Create a new application.",
        "operationId": "v1.application.create",
        "parameters": [
          {
            "in": "query",
            "name": "get_if_exists",
            "description": "Get an existing application, or create a new one if doesn't exist. It's two separate functions in the libs.",
            "schema": {
              "description": "Get an existing application, or create a new one if doesn't exist. It's two separate functions in the libs.",
              "default": false,
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "in": "header",
            "name": "idempotency-key",
            "description": "The request's idempotency key",
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationOut"
                }
              }
            }
          },
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationOut"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "const applicationOut = await svix.application.create({\n    name: \"My first application\",\n    rateLimit: null,\n    uid: \"unique-identifier\"\n});"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "const applicationOut = await svix.application.create({\n    name: \"My first application\",\n    rateLimit: null,\n    uid: \"unique-identifier\"\n});"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "application_out = svix.application.create(ApplicationIn(\n    name=\"My first application\",\n    rate_limit=None,\n    uid=\"unique-identifier\"\n), options=...)"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "application_out = await svix.application.create(ApplicationIn(\n    name=\"My first application\",\n    rate_limit=None,\n    uid=\"unique-identifier\"\n), options=...)"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "applicationOut, err := svixClient.Application.Create(ctx, &ApplicationIn{\n    Name: \"My first application\",\n    RateLimit: nil,\n    Uid: \"unique-identifier\",\n})"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "val applicationOut = svix.application.create(ApplicationIn()\n    .name(\"My first application\")\n    .rateLimit(null)\n    .uid(\"unique-identifier\")\n)"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "ApplicationOut applicationOut = svix.getApplication().create(new ApplicationIn()\n    .name(\"My first application\")\n    .rateLimit(null)\n    .uid(\"unique-identifier\")\n);"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "application_out = svix.application.create(Svix::ApplicationIn.new({\n    \"name\": \"My first application\",\n    \"rate_limit\": nil,\n    \"uid\": \"unique-identifier\"\n}))"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "let application_out = svix.application().create(ApplicationIn {\n    name: \"My first application\".to_string(),\n    rate_limit: None,\n    uid: Some(\"unique-identifier\".to_string()),\n}, None).await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "var applicationOut = await svix.Application.CreateAsync(new ApplicationIn{\n    name: \"My first application\",\n    rateLimit: null,\n    uid: \"unique-identifier\"\n});"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix application create '{\n    \"name\": \"My first application\",\n    \"rateLimit\": null,\n    \"uid\": \"unique-identifier\"\n}'"
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/app' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n \\\n  -d '{\n        \"name\" : \"My first application\",\n        \"rateLimit\": null,\n        \"uid\": \"unique-identifier\"\n    }'"
          }
        ]
      }
    },
    "/api/v1/app/{app_id}": {
      "get": {
        "tags": [
          "Application"
        ],
        "summary": "Get Application",
        "description": "Get an application.",
        "operationId": "v1.application.get",
        "parameters": [
          {
            "in": "path",
            "name": "app_id",
            "description": "The Application's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Application's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationOut"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "const applicationOut = await svix.application.get(\"app_id\");"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "const applicationOut = await svix.application.get(\"app_id\");"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "application_out = svix.application.get(\"app_id\")"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "application_out = await svix.application.get(\"app_id\")"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "applicationOut, err := svixClient.Application.Get(ctx, \"app_id\")"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "val applicationOut = svix.application.get(\"app_id\")"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "ApplicationOut applicationOut = svix.getApplication().get(\"app_id\");"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "application_out = svix.application.get(\"app_id\")"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "let application_out = svix.application().get(\"app_id\").await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "var applicationOut = await svix.Application.GetAsync(\"app_id\");"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix application get \"app_id\""
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n"
          }
        ]
      },
      "put": {
        "tags": [
          "Application"
        ],
        "summary": "Update Application",
        "description": "Update an application.",
        "operationId": "v1.application.update",
        "parameters": [
          {
            "in": "path",
            "name": "app_id",
            "description": "The Application's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Application's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationOut"
                }
              }
            }
          },
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationOut"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "const applicationOut = await svix.application.update(\"app_id\", {\n    name: \"My first application\",\n    rateLimit: null,\n    uid: \"unique-identifier\"\n});"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "const applicationOut = await svix.application.update(\"app_id\", {\n    name: \"My first application\",\n    rateLimit: null,\n    uid: \"unique-identifier\"\n});"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "application_out = svix.application.update(\"app_id\", ApplicationIn(\n    name=\"My first application\",\n    rate_limit=None,\n    uid=\"unique-identifier\"\n))"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "application_out = await svix.application.update(\"app_id\", ApplicationIn(\n    name=\"My first application\",\n    rate_limit=None,\n    uid=\"unique-identifier\"\n))"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "applicationOut, err := svixClient.Application.Update(ctx, \"app_id\", &ApplicationIn{\n    Name: \"My first application\",\n    RateLimit: nil,\n    Uid: \"unique-identifier\",\n})"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "val applicationOut = svix.application.update(\"app_id\", ApplicationIn()\n    .name(\"My first application\")\n    .rateLimit(null)\n    .uid(\"unique-identifier\")\n)"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "ApplicationOut applicationOut = svix.getApplication().update(\"app_id\", new ApplicationIn()\n    .name(\"My first application\")\n    .rateLimit(null)\n    .uid(\"unique-identifier\")\n);"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "application_out = svix.application.update(\"app_id\", Svix::ApplicationIn.new({\n    \"name\": \"My first application\",\n    \"rate_limit\": nil,\n    \"uid\": \"unique-identifier\"\n}))"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "let application_out = svix.application().update(\"app_id\", ApplicationIn {\n    name: \"My first application\".to_string(),\n    rate_limit: None,\n    uid: Some(\"unique-identifier\".to_string()),\n}).await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "var applicationOut = await svix.Application.UpdateAsync(\"app_id\", new ApplicationIn{\n    name: \"My first application\",\n    rateLimit: null,\n    uid: \"unique-identifier\"\n});"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix application update \"app_id\" '{\n    \"name\": \"My first application\",\n    \"rateLimit\": null,\n    \"uid\": \"unique-identifier\"\n}'"
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'PUT' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n \\\n  -d '{\n        \"name\": \"My first application\",\n        \"rateLimit\": null,\n        \"uid\": \"unique-identifier\"\n    }'"
          }
        ]
      },
      "delete": {
        "tags": [
          "Application"
        ],
        "summary": "Delete Application",
        "description": "Delete an application.",
        "operationId": "v1.application.delete",
        "parameters": [
          {
            "in": "path",
            "name": "app_id",
            "description": "The Application's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Application's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "await svix.application.delete(\"app_id\");"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "await svix.application.delete(\"app_id\");"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "svix.application.delete(\"app_id\")"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "await svix.application.delete(\"app_id\")"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "err := svixClient.Application.Delete(ctx, \"app_id\")"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "svix.application.delete(\"app_id\")"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "svix.getApplication().delete(\"app_id\");"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "svix.application.delete(\"app_id\")"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "svix.application().delete(\"app_id\").await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "await svix.Application.DeleteAsync(\"app_id\");"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix application delete \"app_id\""
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'DELETE' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n"
          }
        ]
      },
      "patch": {
        "tags": [
          "Application"
        ],
        "summary": "Patch Application",
        "description": "Partially update an application.",
        "operationId": "v1.application.patch",
        "parameters": [
          {
            "in": "path",
            "name": "app_id",
            "description": "The Application's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Application's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationPatch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationOut"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "const applicationOut = await svix.application.patch(\"app_id\", {\n    rateLimit: null,\n    uid: \"unique-identifier\"\n});"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "const applicationOut = await svix.application.patch(\"app_id\", {\n    rateLimit: null,\n    uid: \"unique-identifier\"\n});"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "application_out = svix.application.patch(\"app_id\", ApplicationPatch(\n    rate_limit=None,\n    uid=\"unique-identifier\"\n))"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "application_out = await svix.application.patch(\"app_id\", ApplicationPatch(\n    rate_limit=None,\n    uid=\"unique-identifier\"\n))"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "applicationOut, err := svixClient.Application.Patch(ctx, \"app_id\", &ApplicationPatch{\n    RateLimit: nil,\n    Uid: \"unique-identifier\",\n})"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "val applicationOut = svix.application.patch(\"app_id\", ApplicationPatch()\n    .rateLimit(null)\n    .uid(\"unique-identifier\")\n)"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "ApplicationOut applicationOut = svix.getApplication().patch(\"app_id\", new ApplicationPatch()\n    .rateLimit(null)\n    .uid(\"unique-identifier\")\n);"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "application_out = svix.application.patch(\"app_id\", Svix::ApplicationPatch.new({\n    \"rate_limit\": nil,\n    \"uid\": \"unique-identifier\"\n}))"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "let application_out = svix.application().patch(\"app_id\", ApplicationPatch {\n    rate_limit: None,\n    uid: Some(\"unique-identifier\".to_string()),\n}).await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "var applicationOut = await svix.Application.PatchAsync(\"app_id\", new ApplicationPatch{\n    rateLimit: null,\n    uid: \"unique-identifier\"\n});"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix application patch \"app_id\" '{\n    \"rateLimit\": null,\n    \"uid\": \"unique-identifier\"\n}'"
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'PATCH' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n \\\n  -d '{\n        \"rateLimit\": null,\n        \"uid\": \"unique-identifier\"\n    }'"
          }
        ]
      }
    },
    "/api/v1/app/{app_id}/endpoint": {
      "get": {
        "tags": [
          "Endpoint"
        ],
        "summary": "List Endpoints",
        "description": "List the application's endpoints.",
        "operationId": "v1.endpoint.list",
        "parameters": [
          {
            "in": "path",
            "name": "app_id",
            "description": "The Application's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Application's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the number of returned items",
            "schema": {
              "description": "Limit the number of returned items",
              "type": "integer",
              "format": "uint64",
              "maximum": 250.0,
              "minimum": 1.0
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "iterator",
            "description": "The iterator returned from a prior invocation",
            "schema": {
              "description": "The iterator returned from a prior invocation",
              "type": "string",
              "maxLength": 30,
              "minLength": 30,
              "pattern": "^ep_[A-Za-z0-9]{27}$",
              "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
              "nullable": true
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "order",
            "description": "The sorting order of the returned items",
            "schema": {
              "description": "The sorting order of the returned items",
              "$ref": "#/components/schemas/Ordering",
              "nullable": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponse_EndpointOut_"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "const listResponseEndpointOut = await svix.endpoint.list(\"app_id\");"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "const listResponseEndpointOut = await svix.endpoint.list(\"app_id\");"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "list_response_endpoint_out = svix.endpoint.list(\"app_id\", options=...)"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "list_response_endpoint_out = await svix.endpoint.list(\"app_id\", options=...)"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "listResponseEndpointOut, err := svixClient.Endpoint.List(ctx, \"app_id\", nil)"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "val listResponseEndpointOut = svix.endpoint.list(\"app_id\")"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "ListResponseEndpointOut listResponseEndpointOut = svix.getEndpoint().list(\"app_id\");"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "list_response_endpoint_out = svix.endpoint.list(\"app_id\")"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "let list_response_endpoint_out = svix.endpoint().list(\"app_id\", None).await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "var listResponseEndpointOut = await svix.Endpoint.ListAsync(\"app_id\");"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix endpoint list \"app_id\""
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/endpoint' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n"
          }
        ]
      },
      "post": {
        "tags": [
          "Endpoint"
        ],
        "summary": "Create Endpoint",
        "description": "Create a new endpoint for the application.\n\nWhen `secret` is `null` the secret is automatically generated (recommended).",
        "operationId": "v1.endpoint.create",
        "parameters": [
          {
            "in": "path",
            "name": "app_id",
            "description": "The Application's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Application's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "idempotency-key",
            "description": "The request's idempotency key",
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EndpointIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointOut"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "const endpointOut = await svix.endpoint.create(\"app_id\", {\n    description: \"An example endpoint name\",\n    rateLimit: null,\n    uid: \"unique-identifier\",\n    url: \"https://example.com/webhook/\",\n    disabled: false,\n    filterTypes: [\"user.signup\", \"user.deleted\"],\n    channels: [\"project_123\", \"group_2\"],\n    secret: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n    headers: {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n});"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "const endpointOut = await svix.endpoint.create(\"app_id\", {\n    description: \"An example endpoint name\",\n    rateLimit: null,\n    uid: \"unique-identifier\",\n    url: \"https://example.com/webhook/\",\n    disabled: false,\n    filterTypes: [\"user.signup\", \"user.deleted\"],\n    channels: [\"project_123\", \"group_2\"],\n    secret: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n    headers: {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n});"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "endpoint_out = svix.endpoint.create(\"app_id\", EndpointIn(\n    description=\"An example endpoint name\",\n    rate_limit=None,\n    uid=\"unique-identifier\",\n    url=\"https://example.com/webhook/\",\n    disabled=False,\n    filter_types=[\"user.signup\", \"user.deleted\"],\n    channels=[\"project_123\", \"group_2\"],\n    secret=\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n    headers={\"X-Example\": \"123\", \"X-Foobar\": \"Bar\"}\n), options=...)"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "endpoint_out = await svix.endpoint.create(\"app_id\", EndpointIn(\n    description=\"An example endpoint name\",\n    rate_limit=None,\n    uid=\"unique-identifier\",\n    url=\"https://example.com/webhook/\",\n    disabled=False,\n    filter_types=[\"user.signup\", \"user.deleted\"],\n    channels=[\"project_123\", \"group_2\"],\n    secret=\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n    headers={\"X-Example\": \"123\", \"X-Foobar\": \"Bar\"}\n), options=...)"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "endpointOut, err := svixClient.Endpoint.Create(ctx, \"app_id\", &EndpointIn{\n    Description: \"An example endpoint name\",\n    RateLimit: nil,\n    Uid: \"unique-identifier\",\n    Url: \"https://example.com/webhook/\",\n    Disabled: false,\n    FilterTypes: []string{\"user.signup\", \"user.deleted\"},\n    Channels: []string{\"project_123\", \"group_2\"},\n    Secret: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n    Headers: map[string]interface{}{\"X-Example\": \"123\", \"X-Foobar\": \"Bar\"},\n})"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "val endpointOut = svix.endpoint.create(\"app_id\", EndpointIn()\n    .description(\"An example endpoint name\")\n    .rateLimit(null)\n    .uid(\"unique-identifier\")\n    .url(\"https://example.com/webhook/\")\n    .disabled(false)\n    .filterTypes(arrayOf(\"user.signup\", \"user.deleted\"))\n    .channels(arrayOf(\"project_123\", \"group_2\"))\n    .secret(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\")\n    .headers(/* ... */)\n)"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "EndpointOut endpointOut = svix.getEndpoint().create(\"app_id\", new EndpointIn()\n    .description(\"An example endpoint name\")\n    .rateLimit(null)\n    .uid(\"unique-identifier\")\n    .url(\"https://example.com/webhook/\")\n    .disabled(false)\n    .filterTypes(new String[]{\"user.signup\", \"user.deleted\"})\n    .channels(new String[]{\"project_123\", \"group_2\"})\n    .secret(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\")\n    .headers(/* ... */)\n);"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "endpoint_out = svix.endpoint.create(\"app_id\", Svix::EndpointIn.new({\n    \"description\": \"An example endpoint name\",\n    \"rate_limit\" : nil,\n    \"uid\": \"unique-identifier\",\n    \"url\": \"https://example.com/webhook/\",\n    \"disabled\": false,\n    \"filter_types\": [\"user.signup\", \"user.deleted\"],\n    \"channels\": [\"project_123\", \"group_2\"],\n    \"secret\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n    \"headers\": {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n}))"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "let endpoint_out = svix.endpoint().create(\"app_id\", EndpointIn {\n    description: Some(\"An example endpoint name\".to_string()),\n    rate_limit: None,\n    uid: Some(\"unique-identifier\".to_string()),\n    url: \"https://example.com/webhook/\".to_string(),\n    disabled: Some(false),\n    filter_types: Some(vec![\"user.signup\".to_string(), \"user.deleted\".to_string()]),\n    channels: Some(vec![\"project_123\".to_string(), \"group_2\".to_string()]),\n    secret: Some(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\".to_string()),\n    headers: Some(json!({\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"})),\n}, None).await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "var endpointOut = await svix.Endpoint.CreateAsync(\"app_id\", new EndpointIn{\n    description: \"An example endpoint name\",\n    rateLimit: null,\n    uid: \"unique-identifier\",\n    url: \"https://example.com/webhook/\",\n    disabled: false,\n    filterTypes: new string[] {\"user.signup\" , \"user.deleted\"},\n    channels: new string[] {\"project_123\", \"group_2\"},\n    secret: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n    headers: /* ... */\n});"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix endpoint create \"app_id\" '{\n    \"description\": \"An example endpoint name\",\n    \"rateLimit\": null,\n    \"uid\": \"unique-identifier\",\n    \"url\": \"https://example.com/webhook/\",\n    \"disabled\": false,\n    \"filterTypes\": [\"user.signup\", \"user.deleted\"],\n    \"channels\": [\"project_123\", \"group_2\"],\n    \"secret\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n    \"headers\": {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n}'"
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/endpoint' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n \\\n  -d '{\n        \"description\": \"An example endpoint name\",\n        \"rateLimit\": null,\n        \"uid\": \"unique-identifier\",\n        \"url\": \"https://example.com/webhook/\",\n        \"disabled\": false,\n        \"filterTypes\": [\"user.signup\", \"user.deleted\"],\n        \"channels\": [\"project_123\", \"group_2\"],\n        \"secret\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n        \"headers\": {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n    }'"
          }
        ]
      }
    },
    "/api/v1/app/{app_id}/endpoint/{endpoint_id}": {
      "get": {
        "tags": [
          "Endpoint"
        ],
        "summary": "Get Endpoint",
        "description": "Get an endpoint.",
        "operationId": "v1.endpoint.get",
        "parameters": [
          {
            "in": "path",
            "name": "app_id",
            "description": "The Application's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Application's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "endpoint_id",
            "description": "The Endpoint's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Endpoint's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointOut"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "const endpointOut = await svix.endpoint.get(\"app_id\", \"endpoint_id\");"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "const endpointOut = await svix.endpoint.get(\"app_id\", \"endpoint_id\");"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "endpoint_out = svix.endpoint.get(\"app_id\", \"endpoint_id\")"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "endpoint_out = await svix.endpoint.get(\"app_id\", \"endpoint_id\")"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "endpointOut, err := svixClient.Endpoint.Get(ctx, \"app_id\", \"endpoint_id\")"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "val endpointOut = svix.endpoint.get(\"app_id\", \"endpoint_id\")"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "EndpointOut endpointOut = svix.getEndpoint().get(\"app_id\", \"endpoint_id\");"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "endpoint_out = svix.endpoint.get(\"app_id\", \"endpoint_id\")"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "let endpoint_out = svix.endpoint().get(\"app_id\", \"endpoint_id\").await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "var endpointOut = await svix.Endpoint.GetAsync(\"app_id\", \"endpoint_id\");"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix endpoint get \"app_id\" \"endpoint_id\""
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/endpoint/{endpoint_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n"
          }
        ]
      },
      "put": {
        "tags": [
          "Endpoint"
        ],
        "summary": "Update Endpoint",
        "description": "Update an endpoint.",
        "operationId": "v1.endpoint.update",
        "parameters": [
          {
            "in": "path",
            "name": "app_id",
            "description": "The Application's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Application's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "endpoint_id",
            "description": "The Endpoint's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Endpoint's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EndpointUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointOut"
                }
              }
            }
          },
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointOut"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "const endpointOut = await svix.endpoint.update(\"app_id\", \"endpoint_id\", {\n    description: \"An example endpoint name\",\n    rateLimit: null,\n    uid: \"unique-identifier\",\n    url: \"https://example.com/webhook/\",\n    disabled: false,\n    filterTypes: [\"user.signup\", \"user.deleted\"],\n    channels: [\"project_123\", \"group_2\"]\n});"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "const endpointOut = await svix.endpoint.update(\"app_id\", \"endpoint_id\", {\n    description: \"An example endpoint name\",\n    rateLimit: null,\n    uid: \"unique-identifier\",\n    url: \"https://example.com/webhook/\",\n    disabled: false,\n    filterTypes: [\"user.signup\", \"user.deleted\"],\n    channels: [\"project_123\", \"group_2\"]\n});"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "endpoint_out = svix.endpoint.update(\"app_id\", \"endpoint_id\", EndpointUpdate(\n    description=\"An example endpoint name\",\n    rate_limit=None,\n    uid=\"unique-identifier\",\n    url=\"https://example.com/webhook/\",\n    disabled=False,\n    filter_types=[\"user.signup\", \"user.deleted\"],\n    channels=[\"project_123\", \"group_2\"]\n))"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "endpoint_out = await svix.endpoint.update(\"app_id\", \"endpoint_id\", EndpointUpdate(\n    description=\"An example endpoint name\",\n    rate_limit=None,\n    uid=\"unique-identifier\",\n    url=\"https://example.com/webhook/\",\n    disabled=False,\n    filter_types=[\"user.signup\", \"user.deleted\"],\n    channels=[\"project_123\", \"group_2\"]\n))"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "endpointOut, err := svixClient.Endpoint.Update(ctx, \"app_id\", \"endpoint_id\", &EndpointUpdate{\n    Description: \"An example endpoint name\",\n    RateLimit: nil,\n    Uid: \"unique-identifier\",\n    Url: \"https://example.com/webhook/\",\n    Disabled: false,\n    FilterTypes: []string{\"user.signup\", \"user.deleted\"},\n    Channels: []string{\"project_123\", \"group_2\"},\n})"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "val endpointOut = svix.endpoint.update(\"app_id\", \"endpoint_id\", EndpointUpdate()\n    .description(\"An example endpoint name\")\n    .rateLimit(null)\n    .uid(\"unique-identifier\")\n    .url(\"https://example.com/webhook/\")\n    .disabled(false)\n    .filterTypes(arrayOf(\"user.signup\", \"user.deleted\"))\n    .channels(arrayOf(\"project_123\", \"group_2\"))\n)"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "EndpointOut endpointOut = svix.getEndpoint().update(\"app_id\", \"endpoint_id\", new EndpointUpdate()\n    .description(\"An example endpoint name\")\n    .rateLimit(null)\n    .uid(\"unique-identifier\")\n    .url(\"https://example.com/webhook/\")\n    .disabled(false)\n    .filterTypes(new String[]{\"user.signup\", \"user.deleted\"})\n    .channels(new String[]{\"project_123\", \"group_2\"})\n);"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "endpoint_out = svix.endpoint.update(\"app_id\", \"endpoint_id\", Svix::EndpointUpdate.new({\n    \"description\": \"An example endpoint name\",\n    \"rate_limit\": nil,\n    \"uid\": \"unique-identifier\",\n    \"url\": \"https://example.com/webhook/\",\n    \"disabled\": false,\n    \"filter_types\": [\"user.signup\", \"user.deleted\"],\n    \"channels\": [\"project_123\", \"group_2\"]\n}))"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "let endpoint_out = svix.endpoint().update(\"app_id\", \"endpoint_id\", EndpointUpdate {\n    description: Some(\"An example endpoint name\".to_string()),\n    rate_limit: None,\n    uid: Some(\"unique-identifier\".to_string()),\n    url: \"https://example.com/webhook/\".to_string(),\n    disabled: Some(false),\n    filter_types: Some(vec![\"user.signup\".to_string(), \"user.deleted\".to_string()]),\n    channels: Some(vec![\"project_123\".to_string(), \"group_2\".to_string()]),\n}).await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "var endpointOut = await svix.Endpoint.UpdateAsync(\"app_id\", \"endpoint_id\", new EndpointUpdate{\n    description: \"An example endpoint name\",\n    rateLimit: null,\n    uid: \"unique-identifier\",\n    url: \"https://example.com/webhook/\",\n    disabled: false,\n    filterTypes: new string[] {\"user.signup\", \"user.deleted\"},\n    channels: new string[] {\"project_123\", \"group_2\"}\n});"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix endpoint update \"app_id\" \"endpoint_id\" '{\n    \"description\": \"An example endpoint name\",\n    \"rateLimit\": null,\n    \"uid\": \"unique-identifier\",\n    \"url\": \"https://example.com/webhook/\",\n    \"disabled\": false,\n    \"filterTypes\": [\"user.signup\", \"user.deleted\"],\n    \"channels\": [\"project_123\", \"group_2\"]\n}'"
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'PUT' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/endpoint/{endpoint_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n \\\n  -d '{\n        \"description\": \"An example endpoint name\",\n        \"rateLimit\": null,\n        \"uid\": \"unique-identifier\",\n        \"url\": \"https://example.com/webhook/\",\n        \"disabled\": false,\n        \"filterTypes\": [\"user.signup\", \"user.deleted\"],\n        \"channels\": [\"project_123\", \"group_2\"]\n    }'"
          }
        ]
      },
      "delete": {
        "tags": [
          "Endpoint"
        ],
        "summary": "Delete Endpoint",
        "description": "Delete an endpoint.",
        "operationId": "v1.endpoint.delete",
        "parameters": [
          {
            "in": "path",
            "name": "app_id",
            "description": "The Application's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Application's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "endpoint_id",
            "description": "The Endpoint's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Endpoint's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "await svix.endpoint.delete(\"app_id\", \"endpoint_id\");"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "await svix.endpoint.delete(\"app_id\", \"endpoint_id\");"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "svix.endpoint.delete(\"app_id\", \"endpoint_id\")"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "await svix.endpoint.delete(\"app_id\", \"endpoint_id\")"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "err := svixClient.Endpoint.Delete(ctx, \"app_id\", \"endpoint_id\")"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "svix.endpoint.delete(\"app_id\", \"endpoint_id\")"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "svix.getEndpoint().delete(\"app_id\", \"endpoint_id\");"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "svix.endpoint.delete(\"app_id\", \"endpoint_id\")"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "svix.endpoint().delete(\"app_id\", \"endpoint_id\").await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "await svix.Endpoint.DeleteAsync(\"app_id\", \"endpoint_id\");"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix endpoint delete \"app_id\" \"endpoint_id\""
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'DELETE' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/endpoint/{endpoint_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n"
          }
        ]
      },
      "patch": {
        "tags": [
          "Endpoint"
        ],
        "summary": "Patch Endpoint",
        "description": "Partially update an endpoint.",
        "operationId": "v1.endpoint.patch",
        "parameters": [
          {
            "in": "path",
            "name": "app_id",
            "description": "The Application's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Application's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "endpoint_id",
            "description": "The Endpoint's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Endpoint's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EndpointPatch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointOut"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "const endpointOut = await svix.endpoint.patch(\"app_id\", \"endpoint_id\", {\n    rateLimit: null,\n    uid: \"unique-identifier\",\n    filterTypes: null,\n    channels: null,\n    secret: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n});"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "const endpointOut = await svix.endpoint.patch(\"app_id\", \"endpoint_id\", {\n    rateLimit: null,\n    uid: \"unique-identifier\",\n    filterTypes: null,\n    channels: null,\n    secret: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n});"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "endpoint_out = svix.endpoint.patch(\"app_id\", \"endpoint_id\", EndpointPatch(\n    rate_limit=None,\n    uid=\"unique-identifier\",\n    filter_types=None,\n    channels=None,\n    secret=\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n))"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "endpoint_out = await svix.endpoint.patch(\"app_id\", \"endpoint_id\", EndpointPatch(\n    rate_limit=None,\n    uid=\"unique-identifier\",\n    filter_types=None,\n    channels=None,\n    secret=\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n))"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "endpointOut, err := svixClient.Endpoint.Patch(ctx, \"app_id\", \"endpoint_id\", &EndpointPatch{\n    RateLimit: nil,\n    Uid: \"unique-identifier\",\n    FilterTypes: nil,\n    Channels: nil,\n    Secret: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n})"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "val endpointOut = svix.endpoint.patch(\"app_id\", \"endpoint_id\", EndpointPatch()\n    .rateLimit(null)\n    .uid(\"unique-identifier\")\n    .filterTypes(null)\n    .channels(null)\n    .secret(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\")\n)"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "EndpointOut endpointOut = svix.getEndpoint().patch(\"app_id\", \"endpoint_id\", new EndpointPatch()\n    .rateLimit(null)\n    .uid(\"unique-identifier\")\n    .filterTypes(null)\n    .channels(null)\n    .secret(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\")\n);"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "endpoint_out = svix.endpoint.patch(\"app_id\", \"endpoint_id\", Svix::EndpointPatch.new({\n    \"rate_limit\": nil,\n    \"uid\": \"unique-identifier\",\n    \"filter_types\": nil,\n    \"channels\": nil,\n    \"secret\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n}))"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "let endpoint_out = svix.endpoint().patch(\"app_id\", \"endpoint_id\", EndpointPatch {\n    rate_limit: None,\n    uid: Some(\"unique-identifier\".to_string()),\n    filter_types: None,\n    channels: None,\n    secret: Some(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\".to_string()),\n}).await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "var endpointOut = await svix.Endpoint.PatchAsync(\"app_id\", \"endpoint_id\", new EndpointPatch{\n    rateLimit: null,\n    uid: \"unique-identifier\",\n    filterTypes: null,\n    channels: null,\n    secret: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n});"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix endpoint patch \"app_id\" \"endpoint_id\" '{\n    \"rateLimit\": null,\n    \"uid\": \"unique-identifier\",\n    \"filterTypes\": null,\n    \"channels\": null,\n    \"secret\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n}'"
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'PATCH' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/endpoint/{endpoint_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n \\\n  -d '{\n        \"rateLimit\": null,\n        \"uid\": \"unique-identifier\",\n        \"filterTypes\": null,\n        \"channels\": null,\n        \"secret\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n    }'"
          }
        ]
      }
    },
    "/api/v1/app/{app_id}/endpoint/{endpoint_id}/secret": {
      "get": {
        "tags": [
          "Endpoint"
        ],
        "summary": "Get Endpoint Secret",
        "description": "Get the endpoint's signing secret.\n\nThis is used to verify the authenticity of the webhook.\nFor more information please refer to [the consuming webhooks docs](https://docs.svix.com/consuming-webhooks/).",
        "operationId": "v1.endpoint.get-secret",
        "parameters": [
          {
            "in": "path",
            "name": "app_id",
            "description": "The Application's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Application's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "endpoint_id",
            "description": "The Endpoint's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Endpoint's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointSecretOut"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "const endpointSecretOut = await svix.endpoint.getSecret(\"app_id\", \"endpoint_id\");"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "const endpointSecretOut = await svix.endpoint.getSecret(\"app_id\", \"endpoint_id\");"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "endpoint_secret_out = svix.endpoint.get_secret(\"app_id\", \"endpoint_id\")"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "endpoint_secret_out = await svix.endpoint.get_secret(\"app_id\", \"endpoint_id\")"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "endpointSecretOut, err := svixClient.Endpoint.GetSecret(ctx, \"app_id\", \"endpoint_id\")"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "val endpointSecretOut = svix.endpoint.getSecret(\"app_id\", \"endpoint_id\")"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "EndpointSecretOut endpointSecretOut = svix.getEndpoint().getSecret(\"app_id\", \"endpoint_id\");"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "endpoint_secret_out = svix.endpoint.get_secret(\"app_id\", \"endpoint_id\")"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "let endpoint_secret_out = svix.endpoint().get_secret(\"app_id\", \"endpoint_id\").await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "var endpointSecretOut = await svix.Endpoint.GetSecretAsync(\"app_id\", \"endpoint_id\");"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix endpoint get-secret \"app_id\" \"endpoint_id\""
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/endpoint/{endpoint_id}/secret' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n"
          }
        ]
      }
    },
    "/api/v1/app/{app_id}/endpoint/{endpoint_id}/secret/rotate": {
      "post": {
        "tags": [
          "Endpoint"
        ],
        "summary": "Rotate Endpoint Secret",
        "description": "Rotates the endpoint's signing secret.\n\nThe previous secret will remain valid for the next 24 hours.",
        "operationId": "v1.endpoint.rotate-secret",
        "parameters": [
          {
            "in": "path",
            "name": "app_id",
            "description": "The Application's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Application's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "endpoint_id",
            "description": "The Endpoint's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Endpoint's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "idempotency-key",
            "description": "The request's idempotency key",
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EndpointSecretRotateIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "no content"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "await svix.endpoint.rotateSecret(\"app_id\", \"endpoint_id\", {\n    key: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n});"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "await svix.endpoint.rotateSecret(\"app_id\", \"endpoint_id\", {\n    key: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n});"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "svix.endpoint.rotate_secret(\"app_id\", \"endpoint_id\", EndpointSecretRotateIn(\n    key=\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n), options=...)"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "await svix.endpoint.rotate_secret(\"app_id\", \"endpoint_id\", EndpointSecretRotateIn(\n    key=\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n), options=...)"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "err := svixClient.Endpoint.RotateSecret(ctx, \"app_id\", \"endpoint_id\", &EndpointSecretRotateIn{\n    Key: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n})"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "svix.endpoint.rotateSecret(\"app_id\", \"endpoint_id\", EndpointSecretRotateIn()\n    .key(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\")\n)"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "svix.getEndpoint().rotateSecret(\"app_id\", \"endpoint_id\", new EndpointSecretRotateIn()\n    .key(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\")\n);"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "svix.endpoint.rotate_secret(\"app_id\", \"endpoint_id\", Svix::EndpointSecretRotateIn.new({\n    \"key\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n}))"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "svix.endpoint().rotate_secret(\"app_id\", \"endpoint_id\", EndpointSecretRotateIn {\n    key: Some(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\".to_string()),\n }, None).await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "await svix.Endpoint.RotateSecretAsync(\"app_id\", \"endpoint_id\", new EndpointSecretRotateIn{\n    key: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n});"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix endpoint rotate-secret \"app_id\" \"endpoint_id\" '{\n    \"key\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n}'"
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/endpoint/{endpoint_id}/secret/rotate' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n \\\n  -d '{\n        \"key\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n    }'"
          }
        ]
      }
    },
    "/api/v1/app/{app_id}/endpoint/{endpoint_id}/headers": {
      "get": {
        "tags": [
          "Endpoint"
        ],
        "summary": "Get Endpoint Headers",
        "description": "Get the additional headers to be sent with the webhook.",
        "operationId": "v1.endpoint.get-headers",
        "parameters": [
          {
            "in": "path",
            "name": "app_id",
            "description": "The Application's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Application's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "endpoint_id",
            "description": "The Endpoint's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Endpoint's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "The value of the headers is returned in the `headers` field.\n \nSensitive headers that have been redacted are returned in the sensitive field.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointHeadersOut"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "const endpointHeadersOut = await svix.endpoint.getHeaders(\"app_id\", \"endpoint_id\");"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "const endpointHeadersOut = await svix.endpoint.getHeaders(\"app_id\", \"endpoint_id\");"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "endpoint_headers_out = svix.endpoint.get_headers(\"app_id\", \"endpoint_id\")"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "endpoint_headers_out = await svix.endpoint.get_headers(\"app_id\", \"endpoint_id\")"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "endpointHeadersOut, err := svixClient.Endpoint.GetHeaders(ctx, \"app_id\", \"endpoint_id\")"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "val endpointHeadersOut = svix.endpoint.getHeaders(\"app_id\", \"endpoint_id\")"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "EndpointHeadersOut endpointHeadersOut = svix.getEndpoint().getHeaders(\"app_id\", \"endpoint_id\");"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "endpoint_headers_out = svix.endpoint.get_headers(\"app_id\", \"endpoint_id\")"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "let endpoint_headers_out = svix.endpoint().get_headers(\"app_id\", \"endpoint_id\").await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "var endpointHeadersOut = await svix.Endpoint.GetHeadersAsync(\"app_id\", \"endpoint_id\");"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix endpoint get-headers \"app_id\" \"endpoint_id\""
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/endpoint/{endpoint_id}/headers' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n"
          }
        ]
      },
      "put": {
        "tags": [
          "Endpoint"
        ],
        "summary": "Update Endpoint Headers",
        "description": "Set the additional headers to be sent with the webhook.",
        "operationId": "v1.endpoint.update-headers",
        "parameters": [
          {
            "in": "path",
            "name": "app_id",
            "description": "The Application's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Application's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "endpoint_id",
            "description": "The Endpoint's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Endpoint's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EndpointHeadersIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "no content"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "await svix.endpoint.updateHeaders(\"app_id\", \"endpoint_id\", {\n    headers: {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n});"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "await svix.endpoint.updateHeaders(\"app_id\", \"endpoint_id\", {\n    headers: {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n});"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "svix.endpoint.update_headers(\"app_id\", \"endpoint_id\", EndpointHeadersIn(\n    headers={\"X-Example\": \"123\", \"X-Foobar\": \"Bar\"}\n))"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "await svix.endpoint.update_headers(\"app_id\", \"endpoint_id\", EndpointHeadersIn(\n    headers={\"X-Example\": \"123\", \"X-Foobar\": \"Bar\"}\n))"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "err := svixClient.Endpoint.UpdateHeaders(ctx, \"app_id\", \"endpoint_id\", &EndpointHeadersIn{\n    Headers: map[string]interface{}{\"X-Example\": \"123\", \"X-Foobar\": \"Bar\"},\n})"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "svix.endpoint.updateHeaders(\"app_id\", \"endpoint_id\", EndpointHeadersIn()\n    .headers(/* ... */)\n)"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "svix.getEndpoint().updateHeaders(\"app_id\", \"endpoint_id\", new EndpointHeadersIn()\n    .headers(/* ... */)\n);"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "svix.endpoint.update_headers(\"app_id\", \"endpoint_id\", Svix::EndpointHeadersIn.new({\n    \"headers\": {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n}))"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "svix.endpoint().update_headers(\"app_id\", \"endpoint_id\", EndpointHeadersIn {\n    headers: json!({\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}),\n}).await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "await svix.Endpoint.UpdateHeadersAsync(\"app_id\", \"endpoint_id\", new EndpointHeadersIn{\n    headers: /* ... */\n});"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix endpoint update-headers \"app_id\" \"endpoint_id\" '{\n    \"headers\": {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n}'"
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'PUT' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/endpoint/{endpoint_id}/headers' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n \\\n  -d '{\n        \"headers\": {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n    }'"
          }
        ]
      },
      "patch": {
        "tags": [
          "Endpoint"
        ],
        "summary": "Patch Endpoint Headers",
        "description": "Partially set the additional headers to be sent with the webhook.",
        "operationId": "v1.endpoint.patch-headers",
        "parameters": [
          {
            "in": "path",
            "name": "app_id",
            "description": "The Application's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Application's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "endpoint_id",
            "description": "The Endpoint's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Endpoint's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EndpointHeadersPatchIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "no content"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "await svix.endpoint.patchHeaders(\"app_id\", \"endpoint_id\", {\n    headers: {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n});"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "await svix.endpoint.patchHeaders(\"app_id\", \"endpoint_id\", {\n    headers: {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n});"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "svix.endpoint.patch_headers(\"app_id\", \"endpoint_id\", EndpointHeadersPatchIn(\n    headers={\"X-Example\": \"123\", \"X-Foobar\": \"Bar\"}\n))"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "await svix.endpoint.patch_headers(\"app_id\", \"endpoint_id\", EndpointHeadersPatchIn(\n    headers={\"X-Example\": \"123\", \"X-Foobar\": \"Bar\"}\n))"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "err := svixClient.Endpoint.PatchHeaders(ctx, \"app_id\", \"endpoint_id\", &EndpointHeadersPatchIn{\n    Headers: map[string]interface{}{\"X-Example\": \"123\", \"X-Foobar\": \"Bar\"},\n})"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "svix.endpoint.patchHeaders(\"app_id\", \"endpoint_id\", EndpointHeadersPatchIn()\n    .headers(/* ... */)\n)"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "svix.getEndpoint().patchHeaders(\"app_id\", \"endpoint_id\", new EndpointHeadersPatchIn()\n    .headers(/* ... */)\n);"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "svix.endpoint.patch_headers(\"app_id\", \"endpoint_id\", Svix::EndpointHeadersPatchIn.new({\n    \"headers\": {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n}))"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "svix.endpoint().patch_headers(\"app_id\", \"endpoint_id\", EndpointHeadersPatchIn {\n    headers: json!({\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}),\n}).await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "await svix.Endpoint.PatchHeadersAsync(\"app_id\", \"endpoint_id\", new EndpointHeadersPatchIn{\n    headers: /* ... */\n});"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix endpoint patch-headers \"app_id\" \"endpoint_id\" '{\n    \"headers\": {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n}'"
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'PATCH' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/endpoint/{endpoint_id}/headers' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n \\\n  -d '{\n        \"headers\": {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n    }'"
          }
        ]
      }
    },
    "/api/v1/app/{app_id}/endpoint/{endpoint_id}/send-example": {
      "post": {
        "tags": [
          "Endpoint"
        ],
        "summary": "Send Event Type Example Message",
        "description": "Send an example message for an event.",
        "operationId": "v1.endpoint.send-example",
        "parameters": [
          {
            "in": "path",
            "name": "app_id",
            "description": "The Application's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Application's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "endpoint_id",
            "description": "The Endpoint's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Endpoint's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "idempotency-key",
            "description": "The request's idempotency key",
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventExampleIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOut"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "const messageOut = await svix.endpoint.sendExample(\"app_id\", \"endpoint_id\", {\n    eventType: \"user.signup\"\n});"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "const messageOut = await svix.endpoint.sendExample(\"app_id\", \"endpoint_id\", {\n    eventType: \"user.signup\"\n});"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "message_out = svix.endpoint.send_example(\"app_id\", \"endpoint_id\", EventExampleIn(\n    event_type=\"user.signup\"\n), options=...)"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "message_out = await svix.endpoint.send_example(\"app_id\", \"endpoint_id\", EventExampleIn(\n    event_type=\"user.signup\"\n), options=...)"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "messageOut, err := svixClient.Endpoint.SendExample(ctx, \"app_id\", \"endpoint_id\", &EventExampleIn{\n    EventType: \"user.signup\",\n})"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "val messageOut = svix.endpoint.sendExample(\"app_id\", \"endpoint_id\", EventExampleIn()\n    .eventType(\"user.signup\")\n)"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "MessageOut messageOut = svix.getEndpoint().sendExample(\"app_id\", \"endpoint_id\", new EventExampleIn()\n    .eventType(\"user.signup\")\n);"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "message_out = svix.endpoint.send_example(\"app_id\", \"endpoint_id\", Svix::EventExampleIn.new({\n    \"event_type\": \"user.signup\"\n}))"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "let message_out = svix.endpoint().send_example(\"app_id\", \"endpoint_id\", EventExampleIn {\n    event_type: \"user.signup\".to_string(),\n}, None).await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "var messageOut = await svix.Endpoint.SendExampleAsync(\"app_id\" , \"endpoint_id\", new EventExampleIn{\n    eventType: \"user.signup\"\n});"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix endpoint send-example \"app_id\" \"endpoint_id\" '{\n    \"eventType\": \"user.signup\"\n}'"
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/endpoint/{endpoint_id}/send-example' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n \\\n  -d '{\n        \"eventType\": \"user.signup\"\n    }'"
          }
        ]
      }
    },
    "/api/v1/app/{app_id}/endpoint/{endpoint_id}/transformation": {
      "get": {
        "tags": [
          "Endpoint"
        ],
        "summary": "Get Endpoint Transformation",
        "description": "Get the transformation code associated with this endpoint.",
        "operationId": "v1.endpoint.transformation-get",
        "parameters": [
          {
            "in": "path",
            "name": "app_id",
            "description": "The Application's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Application's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "endpoint_id",
            "description": "The Endpoint's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Endpoint's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointTransformationOut"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "const endpointTransformationOut = await svix.endpoint.transformationGet(\"app_id\", \"endpoint_id\");"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "const endpointTransformationOut = await svix.endpoint.transformationGet(\"app_id\", \"endpoint_id\");"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "endpoint_transformation_out = svix.endpoint.transformation_get(\"app_id\", \"endpoint_id\")"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "endpoint_transformation_out = await svix.endpoint.transformation_get(\"app_id\", \"endpoint_id\")"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "endpointTransformationOut, err := svixClient.Endpoint.TransformationGet(ctx, \"app_id\", \"endpoint_id\")"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "val endpointTransformationOut = svix.endpoint.transformationGet(\"app_id\", \"endpoint_id\")"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "EndpointTransformationOut endpointTransformationOut = svix.getEndpoint().transformationGet(\"app_id\", \"endpoint_id\");"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "endpoint_transformation_out = svix.endpoint.transformation_get(\"app_id\", \"endpoint_id\")"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "let endpoint_transformation_out = svix.endpoint().transformation_get(\"app_id\", \"endpoint_id\").await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "var endpointTransformationOut = await svix.Endpoint.TransformationGetAsync(\"app_id\", \"endpoint_id\");"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix endpoint transformation-get \"app_id\" \"endpoint_id\""
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/endpoint/{endpoint_id}/transformation' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n"
          }
        ]
      },
      "patch": {
        "tags": [
          "Endpoint"
        ],
        "summary": "Set Endpoint Transformation",
        "description": "Set or unset the transformation code associated with this endpoint.",
        "operationId": "v1.endpoint.transformation-partial-update",
        "parameters": [
          {
            "in": "path",
            "name": "app_id",
            "description": "The Application's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Application's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "endpoint_id",
            "description": "The Endpoint's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Endpoint's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EndpointTransformationIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "no content"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "await svix.endpoint.transformationPartialUpdate(\"app_id\", \"endpoint_id\", {\n    code: null\n});"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "await svix.endpoint.transformationPartialUpdate(\"app_id\", \"endpoint_id\", {\n    code: null\n});"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "svix.endpoint.transformation_partial_update(\"app_id\", \"endpoint_id\", EndpointTransformationIn(\n    code=None\n))"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "await svix.endpoint.transformation_partial_update(\"app_id\", \"endpoint_id\", EndpointTransformationIn(\n    code=None\n))"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "err := svixClient.Endpoint.TransformationPartialUpdate(ctx, \"app_id\", \"endpoint_id\", &EndpointTransformationIn{\n    Code: nil,\n})"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "svix.endpoint.transformationPartialUpdate(\"app_id\", \"endpoint_id\", EndpointTransformationIn()\n    .code(null)\n)"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "svix.getEndpoint().transformationPartialUpdate(\"app_id\", \"endpoint_id\", new EndpointTransformationIn()\n    .code(null)\n);"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "svix.endpoint.transformation_partial_update(\"app_id\", \"endpoint_id\", Svix::EndpointTransformationIn.new({\n    \"code\": nil\n}))"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "svix.endpoint().transformation_partial_update(\"app_id\", \"endpoint_id\", EndpointTransformationIn {\n    code: None,\n}).await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "await svix.Endpoint.TransformationPartialUpdateAsync(\"app_id\", \"endpoint_id\", new EndpointTransformationIn{\n    code: null\n});"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix endpoint transformation-partial-update \"app_id\" \"endpoint_id\" '{\n    \"code\": null\n}'"
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'PATCH' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/endpoint/{endpoint_id}/transformation' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n \\\n  -d '{\n        \"code\": null\n    }'"
          }
        ]
      }
    },
    "/api/v1/app/{app_id}/endpoint/{endpoint_id}/replay-missing": {
      "post": {
        "tags": [
          "Endpoint"
        ],
        "summary": "Replay Missing Webhooks",
        "description": "Replays messages to the endpoint.\n\nOnly messages that were created after `since` will be sent.\nMessages that were previously sent to the endpoint are not resent.",
        "operationId": "v1.endpoint.replay-missing",
        "parameters": [
          {
            "in": "path",
            "name": "app_id",
            "description": "The Application's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Application's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "endpoint_id",
            "description": "The Endpoint's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Endpoint's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "idempotency-key",
            "description": "The request's idempotency key",
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReplayIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReplayOut"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "const replayOut = await svix.endpoint.replayMissing(\"app_id\", \"endpoint_id\", {\n    until: null\n});"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "const replayOut = await svix.endpoint.replayMissing(\"app_id\", \"endpoint_id\", {\n    until: null\n});"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "replay_out = svix.endpoint.replay_missing(\"app_id\", \"endpoint_id\", ReplayIn(\n    until=None\n), options=...)"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "replay_out = await svix.endpoint.replay_missing(\"app_id\", \"endpoint_id\", ReplayIn(\n    until=None\n), options=...)"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "replayOut, err := svixClient.Endpoint.ReplayMissing(ctx, \"app_id\", \"endpoint_id\", &ReplayIn{\n    Until: nil,\n})"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "val replayOut = svix.endpoint.replayMissing(\"app_id\", \"endpoint_id\", ReplayIn()\n    .until(null)\n)"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "ReplayOut replayOut = svix.getEndpoint().replayMissing(\"app_id\", \"endpoint_id\", new ReplayIn()\n    .until(null)\n);"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "replay_out = svix.endpoint.replay_missing(\"app_id\", \"endpoint_id\", Svix::ReplayIn.new({\n    \"until\": nil\n}))"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "let replay_out = svix.endpoint().replay_missing(\"app_id\", \"endpoint_id\", ReplayIn {\n    until: None,\n}, None).await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "var replayOut = await svix.Endpoint.ReplayMissingAsync(\"app_id\", \"endpoint_id\", new ReplayIn{\n    until: null\n});"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix endpoint replay-missing \"app_id\" \"endpoint_id\" '{\n    \"until\": null\n}'"
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/endpoint/{endpoint_id}/replay-missing' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n \\\n  -d '{\n        \"until\": null\n    }'"
          }
        ]
      }
    },
    "/api/v1/app/{app_id}/endpoint/{endpoint_id}/stats": {
      "get": {
        "tags": [
          "Endpoint"
        ],
        "summary": "Endpoint Stats",
        "description": "Get basic statistics for the endpoint.",
        "operationId": "v1.endpoint.get-stats",
        "parameters": [
          {
            "in": "path",
            "name": "app_id",
            "description": "The Application's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Application's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "endpoint_id",
            "description": "The Endpoint's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Endpoint's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "since",
            "description": "Filter the range to data starting from this date.",
            "schema": {
              "description": "Filter the range to data starting from this date.",
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "until",
            "description": "Filter the range to data ending by this date.",
            "schema": {
              "description": "Filter the range to data ending by this date.",
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointStats"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "const endpointStats = await svix.endpoint.getStats(\"app_id\", \"endpoint_id\");"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "const endpointStats = await svix.endpoint.getStats(\"app_id\", \"endpoint_id\");"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "endpoint_stats = svix.endpoint.get_stats(\"app_id\", \"endpoint_id\")"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "endpoint_stats = await svix.endpoint.get_stats(\"app_id\", \"endpoint_id\")"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "endpointStats, err := svixClient.Endpoint.GetStats(ctx, \"app_id\", \"endpoint_id\")"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "val endpointStats = svix.endpoint.getStats(\"app_id\", \"endpoint_id\")"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "EndpointStats endpointStats = svix.getEndpoint().getStats(\"app_id\", \"endpoint_id\");"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "endpoint_stats = svix.endpoint.get_stats(\"app_id\", \"endpoint_id\")"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "let endpoint_stats = svix.endpoint().get_stats(\"app_id\", \"endpoint_id\").await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "var endpointStats = await svix.Endpoint.GetStatsAsync(\"app_id\", \"endpoint_id\");"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix endpoint get-stats \"app_id\" \"endpoint_id\""
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/endpoint/{endpoint_id}/stats' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n"
          }
        ]
      }
    },
    "/api/v1/app/{app_id}/endpoint/{endpoint_id}/recover": {
      "post": {
        "tags": [
          "Endpoint"
        ],
        "summary": "Recover Failed Webhooks",
        "description": "Resend all failed messages since a given time.\n\nMessages that were sent successfully, even if failed initially, are not resent.",
        "operationId": "v1.endpoint.recover",
        "parameters": [
          {
            "in": "path",
            "name": "app_id",
            "description": "The Application's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Application's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "endpoint_id",
            "description": "The Endpoint's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Endpoint's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "idempotency-key",
            "description": "The request's idempotency key",
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecoverIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecoverOut"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "const recoverOut = await svix.endpoint.recover(\"app_id\", \"endpoint_id\", {\n    until: null\n});"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "const recoverOut = await svix.endpoint.recover(\"app_id\", \"endpoint_id\", {\n    until: null\n});"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "recover_out = svix.endpoint.recover(\"app_id\", \"endpoint_id\", RecoverIn(\n    until=None\n), options=...)"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "recover_out = await svix.endpoint.recover(\"app_id\", \"endpoint_id\", RecoverIn(\n    until=None\n), options=...)"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "recoverOut, err := svixClient.Endpoint.Recover(ctx, \"app_id\", \"endpoint_id\", &RecoverIn{\n    Until: nil,\n})"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "val recoverOut = svix.endpoint.recover(\"app_id\", \"endpoint_id\", RecoverIn()\n    .until(null)\n)"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "RecoverOut recoverOut = svix.getEndpoint().recover(\"app_id\", \"endpoint_id\", new RecoverIn()\n    .until(null)\n);"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "recover_out = svix.endpoint.recover(\"app_id\", \"endpoint_id\", Svix::RecoverIn.new({\n    \"until\": nil\n}))"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "let recover_out = svix.endpoint().recover(\"app_id\", \"endpoint_id\", RecoverIn {\n    until: None,\n}, None).await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "var recoverOut = await svix.Endpoint.RecoverAsync(\"app_id\", \"endpoint_id\", new RecoverIn{\n    until: null\n});"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix endpoint recover \"app_id\" \"endpoint_id\" '{\n    \"until\": null\n}'"
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/endpoint/{endpoint_id}/recover' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n \\\n  -d '{\n        \"until\": null\n    }'"
          }
        ]
      }
    },
    "/api/v1/event-type": {
      "get": {
        "tags": [
          "Event Type"
        ],
        "summary": "List Event Types",
        "description": "Return the list of event types.",
        "operationId": "v1.event-type.list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the number of returned items",
            "schema": {
              "description": "Limit the number of returned items",
              "type": "integer",
              "format": "uint64",
              "maximum": 250.0,
              "minimum": 1.0
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "iterator",
            "description": "The iterator returned from a prior invocation",
            "schema": {
              "description": "The iterator returned from a prior invocation",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup",
              "nullable": true
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "order",
            "description": "The sorting order of the returned items",
            "schema": {
              "description": "The sorting order of the returned items",
              "$ref": "#/components/schemas/Ordering",
              "nullable": true
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "include_archived",
            "description": "When `true` archived (deleted but not expunged) items are included in the response.",
            "schema": {
              "description": "When `true` archived (deleted but not expunged) items are included in the response.",
              "default": false,
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "with_content",
            "description": "When `true` the full item (including the schema) is included in the response.",
            "schema": {
              "description": "When `true` the full item (including the schema) is included in the response.",
              "default": false,
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponse_EventTypeOut_"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "const listResponseEventTypeOut = await svix.eventType.list();"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "const listResponseEventTypeOut = await svix.eventType.list();"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "list_response_event_type_out = svix.event_type.list(options=...)"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "list_response_event_type_out = await svix.event_type.list(options=...)"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "listResponseEventTypeOut, err := svixClient.EventType.List(ctx, nil)"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "val listResponseEventTypeOut = svix.eventType.list()"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "ListResponseEventTypeOut listResponseEventTypeOut = svix.getEventType().list();"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "list_response_event_type_out = svix.event_type.list()"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "let list_response_event_type_out = svix.event_type().list(None).await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "var listResponseEventTypeOut = await svix.EventType.ListAsync();"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix event-type list "
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/event-type' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n"
          }
        ]
      },
      "post": {
        "tags": [
          "Event Type"
        ],
        "summary": "Create Event Type",
        "description": "Create new or unarchive existing event type.\n\nUnarchiving an event type will allow endpoints to filter on it and messages to be sent with it.\nEndpoints filtering on the event type before archival will continue to filter on it.\nThis operation does not preserve the description and schemas.",
        "operationId": "v1.event-type.create",
        "parameters": [
          {
            "in": "header",
            "name": "idempotency-key",
            "description": "The request's idempotency key",
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventTypeIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventTypeOut"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "const eventTypeOut = await svix.eventType.create({\n    name: \"user.signup\",\n    description: \"A user has signed up\",\n    archived: false,\n    schemas: {\"1\":{\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"}},\n    featureFlag: \"cool-new-feature\",\n    groupName: \"user\"\n});"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "const eventTypeOut = await svix.eventType.create({\n    name: \"user.signup\",\n    description: \"A user has signed up\",\n    archived: false,\n    schemas: {\"1\":{\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"}},\n    featureFlag: \"cool-new-feature\",\n    groupName: \"user\"\n});"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "event_type_out = svix.event_type.create(EventTypeIn(\n    name=\"user.signup\",\n    description=\"A user has signed up\",\n    archived=False,\n    schemas={\"1\": {\"description\": \"An invoice was paid by a user\", \"properties\": {\"invoiceId\": {\"description\": \"The invoice id\", \"type\": \"string\"}, \"userId\": {\"description\": \"The user id\", \"type\": \"string\"}}, \"required\": [\"invoiceId\", \"userId\"], \"title\": \"Invoice Paid Event\", \"type\": \"object\"}},\n    feature_flag=\"cool-new-feature\",\n    group_name=\"user\"\n), options=...)"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "event_type_out = await svix.event_type.create(EventTypeIn(\n    name=\"user.signup\",\n    description=\"A user has signed up\",\n    archived=False,\n    schemas={\"1\": {\"description\": \"An invoice was paid by a user\", \"properties\": {\"invoiceId\": {\"description\": \"The invoice id\", \"type\": \"string\"}, \"userId\": {\"description\": \"The user id\", \"type\": \"string\"}}, \"required\": [\"invoiceId\", \"userId\"], \"title\": \"Invoice Paid Event\", \"type\": \"object\"}},\n    feature_flag=\"cool-new-feature\",\n    group_name=\"user\"\n), options=...)"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "eventTypeOut, err := svixClient.EventType.Create(ctx, &EventTypeIn{\n    Name: \"user.signup\",\n    Description: \"A user has signed up\",\n    Archived: false,\n    Schemas: map[interface{}]interface{}{\"1\": map[string]interface{}{\"description\": \"An invoice was paid by a user\", \"properties\": map[interface{}]interface{}{\"invoiceId\": map[string]interface{}{\"description\": \"The invoice id\" , \"type\": \"string\"}, \"userId\": map[string]interface{}{\"description\": \"The user id\", \"type\": \"string\"}}, \"required\": []string{\"invoiceId\", \"userId\"}, \"title\": \"Invoice Paid Event\", \"type\": \"object\"}},\n    FeatureFlag: \"cool-new-feature\",\n    GroupName: \"user\",\n})"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "val eventTypeOut = svix.eventType.create(EventTypeIn()\n    .name(\"user.signup\")\n    .description(\"A user has signed up\")\n    .archived(false)\n    .schemas(/* ... */)\n    .featureFlag(\"cool-new-feature\")\n    .groupName(\"user\")\n)"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "EventTypeOut eventTypeOut = svix.getEventType().create(new EventTypeIn()\n    .name(\"user.signup\")\n    .description(\"A user has signed up\")\n    .archived(false)\n    .schemas(/* ... */)\n    .featureFlag(\"cool-new-feature\")\n    .groupName(\"user\")\n);"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "event_type_out = svix.event_type.create(Svix::EventTypeIn.new({\n    \"name\": \"user.signup\",\n    \"description\": \"A user has signed up\",\n    \"archived\": false,\n    \"schemas\": {\"1\":{\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\" The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"}},\n    \"feature_flag\": \"cool-new-feature\",\n    \"group_name\": \"user\"\n}))"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "let event_type_out = svix.event_type().create(EventTypeIn {\n    name: \"user.signup\".to_string(),\n    description: \"A user has signed up\".to_string(),\n    archived: Some(false),\n    schemas: Some(json!({\"1\":{\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"}})),\n    feature_flag: Some(\"cool-new-feature\".to_string()),\n    group_name: Some(\"user\".to_string()),\n}, None).await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "var eventTypeOut = await svix.EventType.CreateAsync(new EventTypeIn{\n    name: \"user.signup\",\n    description: \"A user has signed up\",\n    archived: false,\n    schemas: /* ... */,\n    featureFlag: \"cool-new-feature\",\n    groupName: \"user\"\n});"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix event-type create '{\n    \"name\": \"user.signup\",\n    \"description\": \"A user has signed up\",\n    \"archived\": false,\n    \"schemas\": {\"1\":{\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"}},\n    \"featureFlag\": \"cool-new-feature\",\n    \"groupName\": \"user\"\n}'"
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/event-type' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n \\\n  -d '{\n        \"name\": \"user.signup\",\n        \"description\": \"A user has signed up\",\n        \"archived\": false,\n        \"schemas\": {\"1\":{\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\" The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"}},\n        \"featureFlag\": \"cool-new-feature\",\n        \"groupName\": \"user\"\n    }'"
          }
        ]
      }
    },
    "/api/v1/event-type/import/openapi": {
      "post": {
        "tags": [
          "Event Type"
        ],
        "summary": "Event Type Import From Openapi",
        "description": "Given an OpenAPI spec, create new or update existing event types.\n If an existing `archived` event type is updated, it will be unarchived.\n\n The importer will convert all webhooks found in the either the `webhooks` or `x-webhooks`\ntop-level.",
        "operationId": "v1.event-type.import-openapi",
        "parameters": [
          {
            "in": "header",
            "name": "idempotency-key",
            "description": "The request's idempotency key",
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "description": "Import a list of event types from webhooks defined in an OpenAPI spec.\n\nThe OpenAPI spec can be specified as either `spec` given the spec as a JSON object, or as `specRaw` (a `string`) which will be parsed as YAML or JSON by the server. Sending neither or both is invalid, resulting in a `400` **Bad Request**.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventTypeImportOpenApiIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventTypeImportOpenApiOut"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "const eventTypeImportOpenApiOut = await svix.eventType.importOpenapi({\n    spec: {\"info\":{\"title\":\"Webhook Example\",\"version\":\"1.0.0\"},\"openapi\":\"3.1.0\",\"webhooks\":{\"pet.new\":{\"post\":{\"requestBody\":{\"content\":{\"application/json\":{\"schema\":{\"properties\":{\"id\":{\"format\":\"int64\",\"type\":\"integer\"},\"name\":{\"type\":\"string\"},\"tag\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\"]}}},\"description\":\"Information about a new pet in the system\"},\"responses\":{\"200\":{\"description\":\"Return a 200 status to indicate that the data was received successfully\"}}}}}},\n    specRaw: \"\n# Both YAML and JSON are supported\n openapi: 3.1.0\ninfo:\n  title: Webhook Example\n  version: 1.0.0\n# Since OAS 3.1.0 the paths element isn't necessary. Now a valid OpenAPI Document can describe only paths, webhooks, or even only reusable components\nwebhooks:\n  # Each webhook needs a name\n  \"pet.new\":\n    # This is a Path Item Object, the only difference is that the request is initiated by the API provider\n    post:\n      requestBody:\n        description: Information about a new pet in the system\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Pet\"\n      responses:\n        \"200\":\n          description: Return a 200 status to indicate that the data was received successfully\n\ncomponents:\n  schemas:\n    Pet:\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n        tag:\n          type: string\n\"\n});"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "const eventTypeImportOpenApiOut = await svix.eventType.importOpenapi({\n    spec: {\"info\":{\"title\":\"Webhook Example\",\"version\":\"1.0.0\"},\"openapi\":\"3.1.0\",\"webhooks\":{\"pet.new\":{\"post\":{\"requestBody\":{\"content\":{\"application/json\":{\"schema\":{\"properties\":{\"id\":{\"format\":\"int64\",\"type\":\"integer\"},\"name\":{\"type\":\"string\"},\"tag\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\"]}}},\"description\":\"Information about a new pet in the system\"},\"responses\":{\"200\":{\"description\":\"Return a 200 status to indicate that the data was received successfully\"}}}}}},\n    specRaw: \"\n# Both YAML and JSON are supported\n openapi: 3.1.0\ninfo:\n  title: Webhook Example\n  version: 1.0.0\n# Since OAS 3.1.0 the paths element isn't necessary. Now a valid OpenAPI Document can describe only paths, webhooks, or even only reusable components\nwebhooks:\n  # Each webhook needs a name\n  \"pet.new\":\n    # This is a Path Item Object, the only difference is that the request is initiated by the API provider\n    post:\n      requestBody:\n        description: Information about a new pet in the system\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Pet\"\n      responses:\n        \"200\":\n          description: Return a 200 status to indicate that the data was received successfully\n\ncomponents:\n  schemas:\n    Pet:\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n        tag:\n          type: string\n\"\n});"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "event_type_import_open_api_out = svix.event_type.import_openapi(EventTypeImportOpenApiIn(\n    spec={\"info\": {\"title\": \"Webhook Example\", \"version\": \"1.0.0\"}, \"openapi\": \"3.1.0\", \"webhooks\": {\"pet.new\": {\"post\": {\"requestBody\": {\"content\": {\"application/json\": {\"schema\": {\"properties\": {\"id\": {\"format\": \"int64\", \"type\": \"integer\"}, \"name\": {\"type\": \"string\"}, \"tag\": {\"type\": \"string\"}}, \"required\": [\"id\", \"name\"]}}}, \"description\": \"Information about a new pet in the system\"}, \"responses\": {\"200\": {\"description\": \"Return a 200 status to indicate that the data was received successfully\"}}}}}},\n    spec_raw=\"\n# Both YAML and JSON are supported\nopenapi: 3.1.0\ninfo:\n  title: Webhook Example\n  version: 1.0.0\n# Since OAS 3.1.0 the paths element isn't necessary. Now a valid OpenAPI Document can describe only paths, webhooks, or even only reusable components\nwebhooks:\n  # Each webhook needs a name\n  \"pet.new\":\n    # This is a Path Item Object, the only difference is that the request is initiated by the API provider\n    post:\n      requestBody:\n        description: Information about a new pet in the system\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Pet\"\n      responses:\n        \"200\":\n          description: Return a 200 status to indicate that the data was received successfully\n\ncomponents:\n  schemas:\n    Pet:\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n        tag:\n          type: string\n\"\n), options=...)"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "event_type_import_open_api_out = await svix.event_type.import_openapi(EventTypeImportOpenApiIn(\n    spec={\"info\": {\"title\": \"Webhook Example\", \"version\": \"1.0.0\"}, \"openapi\": \"3.1.0\", \"webhooks\": {\"pet.new\": {\"post\": {\"requestBody\": {\"content\": {\"application/json\": {\"schema\": {\"properties\": {\"id\": {\"format\": \"int64\", \"type\": \"integer\"}, \"name\": {\"type\": \"string\"}, \"tag\": {\"type\": \"string\"}}, \"required\": [\"id\", \"name\"]}}}, \"description\": \"Information about a new pet in the system\"}, \"responses\": {\"200\": {\"description\": \"Return a 200 status to indicate that the data was received successfully\"}}}}}},\n    spec_raw=\"\n# Both YAML and JSON are supported\nopenapi: 3.1.0\ninfo:\n  title: Webhook Example\n  version: 1.0.0\n# Since OAS 3.1.0 the paths element isn't necessary. Now a valid OpenAPI Document can describe only paths, webhooks, or even only reusable components\nwebhooks:\n  # Each webhook needs a name\n  \"pet.new\":\n    # This is a Path Item Object, the only difference is that the request is initiated by the API provider\n    post:\n      requestBody:\n        description: Information about a new pet in the system\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Pet\"\n      responses:\n        \"200\":\n          description: Return a 200 status to indicate that the data was received successfully\n\ncomponents:\n  schemas:\n    Pet:\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n        tag:\n          type: string\n\"\n), options=...)"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "eventTypeImportOpenApiOut, err := svixClient.EventType.ImportOpenapi(ctx, &EventTypeImportOpenApiIn{\n    Spec: map[interface{}]interface{}{\"info\": map[string]interface{}{\"title\": \"Webhook Example\", \"version\": \"1.0.0\"}, \"openapi\": \"3.1.0\", \"webhooks\": map[interface{}]interface{}{\"pet.new\": map[interface{}]interface{}{\"post\": map[interface{}]interface{}{\"requestBody\": map[interface{}]interface{}{\"content\": map[interface{}]interface{}{\"application/json\": map[interface{}]interface{}{\"schema\": map[interface{}]interface{}{\"properties\": map[interface{}]interface{}{\"id\": map[string]interface{}{\"format\": \"int64\", \"type\": \"integer\"}, \"name\": map[string]interface{}{\"type\": \"string\"}, \"tag\": map[string]interface{}{\"type\": \"string\"}}, \"required\": []string{\"id\", \"name\"}}}}, \"description\": \"Information about a new pet in the system\"}, \"responses\": map[interface{}]interface{}{\"200\": map[string]interface{}{\"description\": \"Return a 200 status to indicate that the data was received successfully\"}}}}}},\n    SpecRaw: \"\n# Both YAML and JSON are supported\nopenapi: 3.1.0\ninfo:\n  title: Webhook Example\n  version: 1.0.0\n# Since OAS 3.1.0 the paths element isn't necessary. Now a valid OpenAPI Document can describe only paths, webhooks, or even only reusable components\nwebhooks:\n  # Each webhook needs a name\n  \"pet.new\":\n    # This is a Path Item Object, the only difference is that the request is initiated by the API provider\n    post:\n      requestBody:\n        description: Information about a new pet in the system\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Pet\"\n      responses:\n        \"200\":\n          description: Return a 200 status to indicate that the data was received successfully\n\ncomponents:\n  schemas:\n    Pet:\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n        tag:\n          type: string\n\",\n})"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "val eventTypeImportOpenApiOut = svix.eventType.importOpenapi(EventTypeImportOpenApiIn()\n    .spec(/* ... */)\n    .specRaw(\"\n# Both YAML and JSON are supported\n openapi: 3.1.0\ninfo:\n  title: Webhook Example\n  version: 1.0.0\n# Since OAS 3.1.0 the paths element isn't necessary. Now a valid OpenAPI Document can describe only paths, webhooks, or even only reusable components\nwebhooks:\n  # Each webhook needs a name\n  \"pet.new\":\n    # This is a Path Item Object, the only difference is that the request is initiated by the API provider\n    post:\n      requestBody:\n        description: Information about a new pet in the system\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Pet\"\n      responses:\n        \"200\":\n          description: Return a 200 status to indicate that the data was received successfully\n\ncomponents:\n  schemas:\n    Pet:\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n        tag:\n          type: string\n\")\n)"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "EventTypeImportOpenApiOut eventTypeImportOpenApiOut = svix.getEventType().importOpenapi(new EventTypeImportOpenApiIn()\n    .spec(/* ... */)\n    .specRaw(\"\n# Both YAML and JSON are supported\nopenapi: 3.1.0\ninfo:\n  title: Webhook Example\n  version: 1.0.0\n# Since OAS 3.1.0 the paths element isn't necessary. Now a valid OpenAPI Document can describe only paths, webhooks, or even only reusable components\nwebhooks:\n  # Each webhook needs a name\n  \"pet.new\":\n    # This is a Path Item Object, the only difference is that the request is initiated by the API provider\n    post:\n      requestBody:\n        description: Information about a new pet in the system\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Pet\"\n      responses:\n        \"200\":\n          description: Return a 200 status to indicate that the data was received successfully\n\ncomponents:\n  schemas:\n    Pet:\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n        tag:\n          type: string\n\")\n);"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "event_type_import_open_api_out = svix.event_type.import_openapi(Svix::EventTypeImportOpenApiIn.new({\n    \"spec\": {\"info\":{\"title\":\"Webhook Example\",\"version\":\"1.0.0\"},\"openapi\":\"3.1.0\",\"webhooks\":{\"pet.new\":{\"post\":{\"requestBody\":{\"content\":{\"application/json\":{\"schema\":{\"properties\":{\"id\":{\"format\":\"int64\",\"type\":\"integer\"},\"name\":{\"type\":\"string\"},\"tag\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\"]}}},\"description\":\"Information about a new pet in the system\"},\"responses\":{\"200\":{\"description\":\"Return a 200 status to indicate that the data was received successfully\"}}}}}},\n    \"spec_raw\": \"\n# Both YAML and JSON are supported\n openapi: 3.1.0\ninfo:\n  title: Webhook Example\n  version: 1.0.0\n# Since OAS 3.1.0 the paths element isn't necessary. Now a valid OpenAPI Document can describe only paths, webhooks, or even only reusable components\nwebhooks:\n  # Each webhook needs a name\n  \"pet.new\":\n    # This is a Path Item Object, the only difference is that the request is initiated by the API provider\n    post:\n      requestBody:\n        description: Information about a new pet in the system\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Pet\"\n      responses:\n        \"200\":\n          description: Return a 200 status to indicate that the data was received successfully\n\ncomponents:\n  schemas:\n    Pet:\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n        tag:\n          type: string\n\"\n}))"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "let event_type_import_open_api_out = svix.event_type().import_openapi(EventTypeImportOpenApiIn {\n    spec: Some(json!({\"info\":{\"title\":\"Webhook Example\",\"version\":\"1.0.0\"},\"openapi\":\"3.1.0\",\"webhooks\":{\"pet.new\":{\"post\":{\"requestBody\":{\"content\":{\"application/json\":{\"schema\":{\"properties\":{\"id\":{\"format\":\"int64\",\"type\":\"integer\"},\"name\":{\"type\":\"string\"},\"tag\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\"]}}},\"description\":\"Information about a new pet in the system\"},\"responses\":{\"200\":{\"description\":\"Return a 200 status to indicate that the data was received successfully\"}}}}}})),\n    spec_raw: Some(\"\n# Both YAML and JSON are supported\nopenapi: 3.1.0\ninfo:\n  title: Webhook Example\n  version: 1.0.0\n# Since OAS 3.1.0 the paths element isn't necessary. Now a valid OpenAPI Document can describe only paths, webhooks, or even only reusable components\nwebhooks:\n  # Each webhook needs a name\n  \"pet.new\":\n    # This is a Path Item Object, the only difference is that the request is initiated by the API provider\n    post:\n      requestBody:\n        description: Information about a new pet in the system\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Pet\"\n      responses:\n        \"200\":\n          description: Return a 200 status to indicate that the data was received successfully\n\ncomponents:\n  schemas:\n    Pet:\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n        tag:\n          type: string\n\".to_string()),\n }, None).await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "var eventTypeImportOpenApiOut = await svix.EventType.ImportOpenapiAsync(new EventTypeImportOpenApiIn{\n    spec: /* ... */,\n    specRaw: \"\n# Both YAML and JSON are supported\nopenapi: 3.1.0\ninfo:\n  title: Webhook Example\n  version: 1.0.0\n# Since OAS 3.1.0 the paths element isn't necessary. Now a valid OpenAPI Document can describe only paths, webhooks, or even only reusable components\nwebhooks:\n  # Each webhook needs a name\n  \"pet.new\":\n    # This is a Path Item Object, the only difference is that the request is initiated by the API provider\n    post:\n      requestBody:\n        description: Information about a new pet in the system\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Pet\"\n      responses:\n        \"200\":\n          description: Return a 200 status to indicate that the data was received successfully\n\ncomponents:\n  schemas:\n    Pet:\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n        tag:\n          type: string\n\"\n});"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix event-type import-openapi '{\n    \"spec\": {\"info\":{\"title\":\"Webhook Example\",\"version\":\"1.0.0\"},\"openapi\":\"3.1.0\",\"webhooks\":{\"pet.new\":{\"post\":{\"requestBody\":{\"content\":{\"application/json\":{\"schema\":{\"properties\":{\"id\":{\"format\":\"int64\",\"type\":\"integer\"},\"name\":{\"type\":\"string\"},\"tag\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\"]}}},\"description\":\"Information about a new pet in the system\"},\"responses\":{\"200\":{\"description\":\"Return a 200 status to indicate that the data was received successfully\"}}}}}},\n    \"specRaw\": \"\n# Both YAML and JSON are supported\nopenapi: 3.1.0\ninfo:\n  title: Webhook Example\n  version: 1.0.0\n# Since OAS 3.1.0 the paths element isn't necessary. Now a valid OpenAPI Document can describe only paths, webhooks, or even only reusable components\nwebhooks:\n  # Each webhook needs a name\n  \"pet.new\":\n    # This is a Path Item Object, the only difference is that the request is initiated by the API provider\n    post:\n      requestBody:\n        description: Information about a new pet in the system\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Pet\"\n      responses:\n        \"200\":\n          description: Return a 200 status to indicate that the data was received successfully\n\ncomponents:\n  schemas:\n    Pet:\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n        tag:\n          type: string\n\"\n}'"
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/event-type/import/openapi' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n \\\n  -d '{\n        \"spec\": {\"info\":{\"title\":\"Webhook Example\",\"version\":\"1.0.0\"},\"openapi\":\"3.1.0\",\"webhooks\":{\"pet.new\":{\"post\":{\"requestBody\":{\"content\":{\"application/json\":{\"schema\":{\"properties\":{\"id\":{\"format\":\"int64\",\"type\":\"integer\"},\"name\":{\"type\":\"string\"},\"tag\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\"]}}},\"description\":\"Information about a new pet in the system\"},\"responses\":{\"200\":{\"description\":\"Return a 200 status to indicate that the data was received successfully\"}}}}}},\n        \"specRaw\": \"\n    # Both YAML and JSON are supported\n    openapi: 3.1.0\n    info:\n      title: Webhook Example\n      version: 1.0.0\n    # Since OAS 3.1.0 the paths element isn't necessary. Now a valid OpenAPI Document can describe only paths, webhooks, or even only reusable components\n    webhooks:\n      # Each webhook needs a name\n      \"pet.new\":\n        # This is a Path Item Object, the only difference is that the request is initiated by the API provider\n        post:\n          requestBody:\n            description: Information about a new pet in the system\n            content:\n              application/json:\n                schema:\n                  $ref: \"#/components/schemas/Pet\"\n          responses:\n            \"200\":\n              description: Return a 200 status to indicate that the data was received successfully\n    \n    components:\n      schemas:\n        Pet:\n          required:\n            - id\n            - name\n          properties:\n            id:\n              type: integer\n              format: int64\n            name:\n              type: string\n            tag:\n              type: string\n    \"\n    }'"
          }
        ]
      }
    },
    "/api/v1/event-type/{event_type_name}": {
      "get": {
        "tags": [
          "Event Type"
        ],
        "summary": "Get Event Type",
        "description": "Get an event type.",
        "operationId": "v1.event-type.get",
        "parameters": [
          {
            "in": "path",
            "name": "event_type_name",
            "description": "The event type's name",
            "required": true,
            "schema": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventTypeOut"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "const eventTypeOut = await svix.eventType.get(\"event_type_name\");"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "const eventTypeOut = await svix.eventType.get(\"event_type_name\");"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "event_type_out = svix.event_type.get(\"event_type_name\")"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "event_type_out = await svix.event_type.get(\"event_type_name\")"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "eventTypeOut, err := svixClient.EventType.Get(ctx, \"event_type_name\")"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "val eventTypeOut = svix.eventType.get(\"event_type_name\")"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "EventTypeOut eventTypeOut = svix.getEventType().get(\"event_type_name\");"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "event_type_out = svix.event_type.get(\"event_type_name\")"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "let event_type_out = svix.event_type().get(\"event_type_name\").await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "var eventTypeOut = await svix.EventType.GetAsync(\"event_type_name\");"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix event-type get \"event_type_name\""
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/event-type/{event_type_name}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n"
          }
        ]
      },
      "put": {
        "tags": [
          "Event Type"
        ],
        "summary": "Update Event Type",
        "description": "Update an event type.",
        "operationId": "v1.event-type.update",
        "parameters": [
          {
            "in": "path",
            "name": "event_type_name",
            "description": "The event type's name",
            "required": true,
            "schema": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventTypeUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventTypeOut"
                }
              }
            }
          },
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventTypeOut"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "const eventTypeOut = await svix.eventType.update(\"event_type_name\", {\n    description: \"A user has signed up\",\n    archived: false,\n    schemas: {\"1\":{\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"}},\n    featureFlag: \"cool-new-feature\",\n    groupName: \"user\"\n});"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "const eventTypeOut = await svix.eventType.update(\"event_type_name\", {\n    description: \"A user has signed up\",\n    archived: false,\n    schemas: {\"1\":{\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"}},\n    featureFlag: \"cool-new-feature\",\n    groupName: \"user\"\n});"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "event_type_out = svix.event_type.update(\"event_type_name\", EventTypeUpdate(\n    description=\"A user has signed up\",\n    archived=False,\n    schemas={\"1\": {\"description\": \"An invoice was paid by a user\", \"properties\": {\"invoiceId\": {\"description\": \"The invoice id\", \"type\": \"string\"}, \"userId\": {\"description\": \"The user id\", \"type\": \"string\"}}, \"required\": [\"invoiceId\", \"userId\"], \"title\": \"Invoice Paid Event\", \"type\": \"object\"}},\n    feature_flag=\"cool-new-feature\",\n    group_name=\"user\"\n))"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "event_type_out = await svix.event_type.update(\"event_type_name\", EventTypeUpdate(\n    description=\"A user has signed up\",\n    archived=False,\n    schemas={\"1\": {\"description\": \"An invoice was paid by a user\", \"properties\": {\"invoiceId\": {\"description\": \"The invoice id\", \"type\": \"string\"}, \"userId\": {\"description\": \"The user id\", \"type\": \"string\"}}, \"required\": [\"invoiceId\", \"userId\"], \"title\": \"Invoice Paid Event\", \"type\": \"object\"}},\n    feature_flag=\"cool-new-feature\",\n    group_name=\"user\"\n))"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "eventTypeOut, err := svixClient.EventType.Update(ctx, \"event_type_name\", &EventTypeUpdate{\n    Description: \"A user has signed up\",\n    Archived: false,\n    Schemas: map[interface{}]interface{}{\"1\": map[string]interface{}{\"description\": \"An invoice was paid by a user\", \"properties\": map[interface{}]interface{}{\"invoiceId\": map[string]interface{}{\"description\": \"The invoice id\" , \"type\": \"string\"}, \"userId\": map[string]interface{}{\"description\": \"The user id\", \"type\": \"string\"}}, \"required\": []string{\"invoiceId\", \"userId\"}, \"title\": \"Invoice Paid Event\", \"type\": \"object\"}},\n    FeatureFlag: \"cool-new-feature\",\n    GroupName: \"user\",\n})"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "val eventTypeOut = svix.eventType.update(\"event_type_name\", EventTypeUpdate()\n    .description(\"A user has signed up\")\n    .archived(false)\n    .schemas(/* ... */)\n    .featureFlag(\"cool-new-feature\")\n    .groupName(\"user\")\n)"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "EventTypeOut eventTypeOut = svix.getEventType().update(\"event_type_name\", new EventTypeUpdate()\n    .description(\"A user has signed up\")\n    .archived(false)\n    .schemas(/* ... */)\n    .featureFlag(\"cool-new-feature\")\n    .groupName(\"user\")\n);"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "event_type_out = svix.event_type.update(\"event_type_name\", Svix::EventTypeUpdate.new({\n    \"description\": \"A user has signed up\",\n    \"archived\": false,\n    \"schemas\": {\"1\":{\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"}},\n    \"feature_flag\": \"cool-new-feature\",\n    \"group_name\": \"user\"\n}))"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "let event_type_out = svix.event_type().update(\"event_type_name\", EventTypeUpdate {\n    description: \"A user has signed up\".to_string(),\n    archived: Some(false),\n    schemas: Some(json!({\"1\":{\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\" The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"}})),\n    feature_flag: Some(\"cool-new-feature\".to_string()),\n    group_name: Some(\"user\".to_string()),\n}).await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "var eventTypeOut = await svix.EventType.UpdateAsync(\"event_type_name\", new EventTypeUpdate{\n    description: \"A user has signed up\",\n    archived: false,\n    schemas: /* ... */,\n    featureFlag: \"cool-new-feature\",\n    groupName: \"user\"\n});"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix event-type update \"event_type_name\" '{\n    \"description\": \"A user has signed up\",\n    \"archived\": false,\n    \"schemas\": {\"1\":{\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"}},\n    \"featureFlag\": \"cool-new-feature\",\n    \"groupName\": \"user\"\n}'"
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'PUT' \\\n  'https://api.eu.svix.com/api/v1/event-type/{event_type_name}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n \\\n  -d '{\n        \"description\": \"A user has signed up\",\n        \"archived\": false,\n        \"schemas\": {\"1\":{\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"}},\n        \"featureFlag\": \"cool-new-feature\",\n        \"groupName\": \"user\"\n    }'"
          }
        ]
      },
      "delete": {
        "tags": [
          "Event Type"
        ],
        "summary": "Delete Event Type",
        "description": "Archive an event type.\n\nEndpoints already configured to filter on an event type will continue to do so after archival.\nHowever, new messages can not be sent with it and endpoints can not filter on it.\nAn event type can be unarchived with the\n[create operation](#operation/create_event_type_api_v1_event_type__post).",
        "operationId": "v1.event-type.delete",
        "parameters": [
          {
            "in": "path",
            "name": "event_type_name",
            "description": "The event type's name",
            "required": true,
            "schema": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "expunge",
            "description": "By default event types are archived when \"deleted\". Passing this to `true` deletes them entirely.",
            "schema": {
              "description": "By default event types are archived when \"deleted\". Passing this to `true` deletes them entirely.",
              "default": false,
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "await svix.eventType.delete(\"event_type_name\");"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "await svix.eventType.delete(\"event_type_name\");"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "svix.event_type.delete(\"event_type_name\")"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "await svix.event_type.delete(\"event_type_name\")"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "err := svixClient.EventType.Delete(ctx, \"event_type_name\")"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "svix.eventType.delete(\"event_type_name\")"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "svix.getEventType().delete(\"event_type_name\");"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "svix.event_type.delete(\"event_type_name\")"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "svix.event_type().delete(\"event_type_name\").await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "await svix.EventType.DeleteAsync(\"event_type_name\");"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix event-type delete \"event_type_name\""
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'DELETE' \\\n  'https://api.eu.svix.com/api/v1/event-type/{event_type_name}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n"
          }
        ]
      },
      "patch": {
        "tags": [
          "Event Type"
        ],
        "summary": "Patch Event Type",
        "description": "Partially update an event type.",
        "operationId": "v1.event-type.patch",
        "parameters": [
          {
            "in": "path",
            "name": "event_type_name",
            "description": "The event type's name",
            "required": true,
            "schema": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventTypePatch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventTypeOut"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "const eventTypeOut = await svix.eventType.patch(\"event_type_name\", {\n    schemas: {\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"},\n    featureFlag: \"cool-new-feature\",\n    groupName: \"user\"\n});"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "const eventTypeOut = await svix.eventType.patch(\"event_type_name\", {\n    schemas: {\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"},\n    featureFlag: \"cool-new-feature\",\n    groupName: \"user\"\n});"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "event_type_out = svix.event_type.patch(\"event_type_name\", EventTypePatch(\n    schemas={\"description\": \"An invoice was paid by a user\", \"properties\": {\"invoiceId\": {\"description\": \"The invoice id\", \"type\": \"string\"}, \"userId\": {\"description\": \"The user id\", \"type\": \"string\"}}, \"required\": [\"invoiceId\", \"userId\"], \"title\": \"Invoice Paid Event\", \"type\": \"object\"},\n    feature_flag=\"cool-new-feature\",\n    group_name=\"user\"\n))"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "event_type_out = await svix.event_type.patch(\"event_type_name\" , EventTypePatch(\n    schemas={\"description\": \"An invoice was paid by a user\", \"properties\": {\"invoiceId\": {\"description\": \"The invoice id\", \"type\": \"string\"}, \"userId\": {\"description\": \"The user id\", \"type\": \"string\"}}, \"required\": [\"invoiceId\", \"userId\"], \"title\": \"Invoice Paid Event\", \"type\": \"object\"},\n    feature_flag=\"cool-new-feature\",\n    group_name=\"user\"\n))"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "eventTypeOut, err := svixClient.EventType.Patch(ctx, \"event_type_name\", &EventTypePatch{\n    Schemas: map[string]interface{}{\"description\" : \"An invoice was paid by a user\", \"properties\": map[interface{}]interface{}{\"invoiceId\": map[string]interface{}{\"description\": \"The invoice id\" , \"type\": \"string\"}, \"userId\": map[string]interface{}{\"description\": \"The user id\", \"type\": \"string\"}}, \"required\": []string{\"invoiceId\", \"userId\"}, \"title\": \"Invoice Paid Event\", \"type\": \"object\"},\n    FeatureFlag: \"cool-new-feature\",\n    GroupName: \"user\",\n})"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "val eventTypeOut = svix.eventType.patch(\"event_type_name\", EventTypePatch()\n    .schemas(/* ... */)\n    .featureFlag(\"cool-new-feature\")\n    .groupName(\"user\")\n)"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "EventTypeOut eventTypeOut = svix.getEventType().patch(\"event_type_name\", new EventTypePatch()\n    .schemas(/* ... */)\n    .featureFlag(\"cool-new-feature\")\n    .groupName(\"user\")\n);"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "event_type_out = svix.event_type.patch(\"event_type_name\", Svix::EventTypePatch.new({\n    \"schemas\": {\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"},\n    \"feature_flag\": \"cool-new-feature\",\n    \"group_name\": \"user\"\n}))"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "let event_type_out = svix.event_type().patch(\"event_type_name\" , EventTypePatch {\n    schemas: Some(json!({\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"})),\n    feature_flag: Some(\"cool-new-feature\".to_string()),\n    group_name: Some(\"user\".to_string()),\n}).await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "var eventTypeOut = await svix.EventType.PatchAsync(\"event_type_name\", new EventTypePatch{\n    schemas: /* ... */,\n    featureFlag: \"cool-new-feature\",\n    groupName: \"user\"\n});"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix event-type patch \"event_type_name\" '{\n    \"schemas\": {\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"},\n    \"featureFlag\": \"cool-new-feature\",\n    \"groupName\": \"user\"\n}'"
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'PATCH' \\\n  'https://api.eu.svix.com/api/v1/event-type/{event_type_name}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n \\\n  -d '{\n        \"schemas\": {\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"},\n        \"featureFlag\": \"cool-new-feature\",\n        \"groupName\": \"user\"\n    }'"
          }
        ]
      }
    },
    "/api/v1/management/authentication/api-token/{key_id}/expire": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Expire Api Token",
        "description": "Expire the selected API Token.",
        "operationId": "v1.management.authentication.expire-api-token",
        "parameters": [
          {
            "in": "path",
            "name": "key_id",
            "description": "The ApplicationToken's ID.",
            "required": true,
            "schema": {
              "description": "The ApplicationToken's ID.",
              "type": "string",
              "maxLength": 31,
              "minLength": 31,
              "pattern": "^key_[A-Za-z0-9]{27}$",
              "example": "key_1srOrx2ZWZBpBUvZwXKQmoEYga2"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "idempotency-key",
            "description": "The request's idempotency key",
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiTokenExpireIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "no content"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/management/authentication/api-token/{key_id}/expire' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n \\\n  -d '\n    }'"
          }
        ]
      }
    },
    "/api/v1/management/authentication/api-token": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "List Api Tokens",
        "description": "List all API Tokens.",
        "operationId": "v1.management.authentication.list-api-tokens",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the number of returned items",
            "schema": {
              "description": "Limit the number of returned items",
              "type": "integer",
              "format": "uint64",
              "maximum": 250.0,
              "minimum": 1.0
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "iterator",
            "description": "The iterator returned from a prior invocation",
            "schema": {
              "description": "The iterator returned from a prior invocation",
              "type": "string",
              "maxLength": 31,
              "minLength": 31,
              "pattern": "^key_[A-Za-z0-9]{27}$",
              "example": "key_1srOrx2ZWZBpBUvZwXKQmoEYga2",
              "nullable": true
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "order",
            "description": "The sorting order of the returned items",
            "schema": {
              "description": "The sorting order of the returned items",
              "$ref": "#/components/schemas/Ordering",
              "nullable": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponse_ApiTokenCensoredOut_"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/management/authentication/api-token' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n"
          }
        ]
      },
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Create Api Token",
        "description": "Create a new API Token.",
        "operationId": "v1.management.authentication.create-api-token",
        "parameters": [
          {
            "in": "header",
            "name": "idempotency-key",
            "description": "The request's idempotency key",
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiTokenIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiTokenOut"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/management/authentication/api-token' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n \\\n  -d '{\n        \"scopes\": null\n    }'"
          }
        ]
      }
    },
    "/api/v1/app/{app_id}/msg": {
      "get": {
        "tags": [
          "Message"
        ],
        "summary": "List Messages",
        "description": "List all of the application's messages.\n\nThe `before` and `after` parameters let you filter all items created before or after a certain date. These can be used alongside an iterator to paginate over results\nwithin a certain window.\n\nNote that by default this endpoint is limited to retrieving 90 days' worth of data\nrelative to now or, if an iterator is provided, 90 days before/after the time indicated\nby the iterator ID. If you require data beyond those time ranges, you will need to explicitly\nset the `before` or `after` parameter as appropriate.",
        "operationId": "v1.message.list",
        "parameters": [
          {
            "in": "path",
            "name": "app_id",
            "description": "The Application's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Application's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the number of returned items",
            "schema": {
              "description": "Limit the number of returned items",
              "type": "integer",
              "format": "uint64",
              "maximum": 250.0,
              "minimum": 1.0
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "iterator",
            "description": "The iterator returned from a prior invocation",
            "schema": {
              "description": "The iterator returned from a prior invocation",
              "type": "string",
              "maxLength": 31,
              "minLength": 31,
              "pattern": "^msg_[A-Za-z0-9]{27}$",
              "example": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2",
              "nullable": true
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "channel",
            "description": "Filter response based on the channel.",
            "schema": {
              "description": "Filter response based on the channel.",
              "type": "string",
              "maxLength": 128,
              "pattern": "^[a-zA-Z0-9\\-_.:]+$",
              "example": "project_1337",
              "nullable": true
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "before",
            "description": "Only include items created before a certain date.",
            "schema": {
              "description": "Only include items created before a certain date.",
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "after",
            "description": "Only include items created after a certain date.",
            "schema": {
              "description": "Only include items created after a certain date.",
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "with_content",
            "description": "When `true` message payloads are included in the response.",
            "schema": {
              "description": "When `true` message payloads are included in the response.",
              "default": true,
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "tag",
            "description": "Filter messages matching the provided tag.",
            "schema": {
              "description": "Filter messages matching the provided tag.",
              "type": "string",
              "maxLength": 128,
              "pattern": "^[a-zA-Z0-9\\-_./\\\\#]+$",
              "example": "project_1337",
              "nullable": true
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "event_types",
            "description": "Filter response based on the event type",
            "schema": {
              "description": "Filter response based on the event type",
              "type": "array",
              "items": {
                "description": "The event type's name",
                "type": "string",
                "maxLength": 256,
                "pattern": "^[a-zA-Z0-9\\-_.]+$",
                "example": "user.signup"
              },
              "uniqueItems": true,
              "nullable": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponse_MessageOut_"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "const listResponseMessageOut = await svix.message.list(\"app_id\");"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "const listResponseMessageOut = await svix.message.list(\"app_id\");"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "list_response_message_out = svix.message.list(\"app_id\", options=...)"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "list_response_message_out = await svix.message.list(\"app_id\", options=...)"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "listResponseMessageOut, err := svixClient.Message.List(ctx, \"app_id\", nil)"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "val listResponseMessageOut = svix.message.list(\"app_id\")"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "ListResponseMessageOut listResponseMessageOut = svix.getMessage().list(\"app_id\");"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "list_response_message_out = svix.message.list(\"app_id\")"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "let list_response_message_out = svix.message().list(\"app_id\", None).await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "var listResponseMessageOut = await svix.Message.ListAsync(\"app_id\");"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix message list \"app_id\""
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/msg' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n"
          }
        ]
      },
      "post": {
        "tags": [
          "Message"
        ],
        "summary": "Create Message",
        "description": "Creates a new message and dispatches it to all of the application's endpoints.\n\nThe `eventId` is an optional custom unique ID. It's verified to be unique only up to a day, after that no verification will be made.\n If a message with the same `eventId` already exists for the application, a 409 conflict error will be returned.\n\nThe `eventType` indicates the type and schema of the event. All messages of a certain `eventType` are expected to have the same schema. Endpoints can choose to only listen to specific event types.\nMessages can also have `channels`, which similar to event types let endpoints filter by them. Unlike event types, messages can have multiple channels, and channels don't imply a specific message content or schema.\n\nThe `payload` property is the webhook's body (the actual webhook message). Svix supports payload sizes of up to ~350kb, though it's generally a good idea to keep webhook payloads small, probably no larger than 40kb.",
        "operationId": "v1.message.create",
        "parameters": [
          {
            "in": "path",
            "name": "app_id",
            "description": "The Application's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Application's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "with_content",
            "description": "When `true`, message payloads are included in the response.",
            "schema": {
              "description": "When `true`, message payloads are included in the response.",
              "default": true,
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "in": "header",
            "name": "idempotency-key",
            "description": "The request's idempotency key",
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOut"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "413": {
            "description": "Payload too large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "const messageOut = await svix.message.create(\"app_id\", {\n    eventId: \"unique-identifier\",\n    eventType: \"user.signup\",\n    payload: {\"email\":\"test@example.com\",\"type\":\"user.created\",\"username\":\"test_user\"},\n    channels: [\"project_123\", \"group_2\"],\n    application: null,\n    tags: [\"my_tag\", \"other\"],\n    transformationsParams: null,\n    payloadRetentionPeriod: 90,\n    payloadRetentionHours: null\n});\n \n// Alternatively, with a raw string payload.\nconst messageOut = await svix.message.create(\n    \"app_id\",\n    svix.messageInRaw(\"user.signup\", \"This is a raw body.\", \"text/plain\"),\n);\n"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "const messageOut = await svix.message.create(\"app_id\", {\n    eventId: \"unique-identifier\",\n    eventType: \"user.signup\",\n    payload: {\"email\":\"test@example.com\",\"type\":\"user.created\",\"username\":\"test_user\"},\n    channels: [\"project_123\", \"group_2\"],\n    application: null,\n    tags: [\"my_tag\", \"other\"],\n    transformationsParams: null,\n    payloadRetentionPeriod: 90,\n    payloadRetentionHours: null\n});\n \n// Alternatively, with a raw string payload.\nconst messageOut = await svix.message.create(\n    \"app_id\",\n    svix.messageInRaw(\"user.signup\", \"This is a raw body.\", \"text/plain\"),\n);\n"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "message_out = svix.message.create(\"app_id\", MessageIn(\n    event_id=\"unique-identifier\",\n    event_type=\"user.signup\",\n    payload={\"email\": \"test@example.com\", \"type\": \"user.created\", \"username\": \"test_user\"},\n    channels=[\"project_123\", \"group_2\"],\n    application=None,\n    tags=[\"my_tag\", \"other\"],\n    transformations_params=None,\n    payload_retention_period=90,\n    payload_retention_hours=None\n), options=...)\n \n# Alternatively, with a raw string payload.\nmessage_out = svix.message.create(\"app_id\", svix.message_in_raw(\n    event_type=\"user.signup\",\n    payload=\"This is a raw body.\",\n    content_type=\"text/plain\",\n), options=...)\n"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "message_out = await svix.message.create(\"app_id\", MessageIn(\n    event_id=\"unique-identifier\",\n    event_type=\"user.signup\",\n    payload={\"email\": \"test@example.com\", \"type\": \"user.created\", \"username\": \"test_user\"},\n    channels=[\"project_123\", \"group_2\"],\n    application=None,\n    tags=[\"my_tag\", \"other\"],\n    transformations_params=None,\n    payload_retention_period=90,\n    payload_retention_hours=None\n), options=...)\n\n# Alternatively, with a raw string payload.\nmessage_out = await svix.message.create(\"app_id\", await svix.message_in_raw(\n    event_type=\"user.signup\",\n    payload=\"This is a raw body.\",\n    content_type=\"text/plain\",\n), options=...)\n"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "messageOut, err := svixClient.Message.Create(ctx, \"app_id\", &MessageIn{\n    EventId: \"unique-identifier\",\n    EventType: \"user.signup\",\n    Payload: map[string]interface{}{\"email\": \"test@example.com\", \"type\": \"user.created\", \"username\": \"test_user\"},\n    Channels: []string{\"project_123\", \"group_2\"},\n    Application: nil,\n    Tags: []string{\"my_tag\", \"other\"},\n    TransformationsParams: nil,\n    PayloadRetentionPeriod: 90,\n    PayloadRetentionHours: nil,\n})\n\n// Alternatively, with a raw string payload.\nmessageOut, err := svixClient.Message.Create(ctx, \"app_id\", &svix.NewMessageInRaw(\n    \"user.signup\",\n    \"This is a raw body.\",\n    svix.StaticNullableString(\"text/plain\"),\n))\n"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "val messageOut = svix.message.create(\"app_id\", MessageIn()\n    .eventId(\"unique-identifier\")\n    .eventType(\"user.signup\")\n    .payload(/* ... */)\n    .channels(arrayOf(\"project_123\", \"group_2\"))\n    .application(null)\n    .tags(arrayOf(\"my_tag\", \"other\"))\n    .transformationsParams(null)\n    .payloadRetentionPeriod(90)\n    .payloadRetentionHours(null)\n)\n\n// Alternatively, with a raw string payload.\nval messageOut = svix.message.create(\"app_id\", svix.messageInRaw(\n    eventType = \"user.signup\",\n    payload = \"This is a raw body.\",\n    contentType = \"text/plain\",\n))\n"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "MessageOut messageOut = svix.getMessage().create(\"app_id\", new MessageIn()\n    .eventId(\"unique-identifier\")\n    .eventType(\"user.signup\")\n    .payload(/* ... */)\n    .channels(new String[]{\"project_123\", \"group_2\"})\n    .application(null)\n    .tags(new String[]{\"my_tag\", \"other\"})\n    .transformationsParams(null)\n    .payloadRetentionPeriod(90)\n    .payloadRetentionHours(null)\n);\n\n// Alternatively, with a raw string payload.\nMessageOut messageOut = svix.getMessage().create(\n    \"app_id\",\n    Message.messageInRaw(\"This is a raw body.\", \"text/plain\")\n        .eventType(\"user.signup\")\n);\n"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "message_out = svix.message.create(\"app_id\", Svix::MessageIn.new({\n    \"event_id\": \"unique-identifier\",\n    \"event_type\": \"user.signup\",\n    \"payload\": {\"email\":\"test@example.com\",\"type\":\"user.created\",\"username\":\"test_user\"},\n    \"channels\": [\"project_123\", \"group_2\"],\n    \"application\": nil,\n    \"tags\": [\"my_tag\", \"other\"],\n    \"transformations_params\": nil,\n    \"payload_retention_period\" : 90,\n    \"payload_retention_hours\": nil\n}))\n\n# Alternatively, with a raw string payload.\nmessage_out = svix.message.create(\"app_id\", Svix.message_in_raw({\n    event_type: \"user.signup\",\n    payload: \"This is a raw body.\",\n    content_type: \"text/plain\",\n}))\n"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "let message_out = svix.message().create(\"app_id\", MessageIn {\n    event_id: Some(\"unique-identifier\".to_string()),\n    event_type: \"user.signup\".to_string(),\n    payload: json!({\"email\":\"test@example.com\",\"type\":\"user.created\",\"username\":\"test_user\"}),\n    channels: Some(vec![\"project_123\".to_string(), \"group_2\".to_string()]),\n    application: None,\n    tags: Some(vec![\"my_tag\".to_string(), \"other\".to_string()]),\n    transformations_params: None,\n    payload_retention_period: Some(90),\n    payload_retention_hours: None,\n}, None).await?;\n\n// Alternatively, with a raw string payload.\nlet message_out = svix.message().create(\n    \"app_id\",\n    MessageIn::new_raw_payload(\n        \"user.signup\".to_string(),\n        \"This is a raw body.\".to_string(),\n    ).with_content_type(\"text/plain\".to_string()),\n    None,\n).await?;\n"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "var messageOut = await svix.Message.CreateAsync(\"app_id\", new MessageIn{\n    eventId: \"unique-identifier\",\n    eventType: \"user.signup\",\n    payload: /* ... */,\n    channels: new string[] {\"project_123\", \"group_2\"},\n    application: null,\n    tags: new string[] {\"my_tag\" , \"other\"},\n    transformationsParams: null,\n    payloadRetentionPeriod: 90,\n    payloadRetentionHours: null\n});\n\n// Alternatively, with a raw string payload.\nvar messageOut = await svix.Message.CreateAsync(\n    \"app_id\",\n    svix.Message.messageInRaw(\n        eventType: \"user.signup\",\n        payload: \"This is a raw body.\",\n        contentType: \"text/plain\",\n    ),\n);\n"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix message create \"app_id\" '{\n    \"eventId\": \"unique-identifier\",\n    \"eventType\": \"user.signup\",\n    \"payload\": {\"email\":\"test@example.com\",\"type\":\"user.created\",\"username\":\"test_user\"},\n    \"channels\": [\"project_123\", \"group_2\"],\n    \"application\": null,\n    \"tags\": [\"my_tag\", \"other\"],\n    \"transformationsParams\": null,\n    \"payloadRetentionPeriod\": 90,\n    \"payloadRetentionHours\": null\n}'"
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/msg' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n \\\n  -d '{\n        \"eventId\": \"unique-identifier\",\n        \"eventType\": \"user.signup\",\n        \"payload\": {\"email\":\"test@example.com\",\"type\":\"user.created\",\"username\":\"test_user\"},\n        \"channels\": [\"project_123\", \"group_2\"],\n        \"application\": null,\n        \"tags\": [\"my_tag\", \"other\"],\n        \"transformationsParams\": null,\n        \"payloadRetentionPeriod\": 90,\n        \"payloadRetentionHours\": null\n    }'\n\n# Alternatively, with a raw string payload.\ncurl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/msg' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n      \"eventType\": \"user.signup\",\n      \"payload\": {},\n      \"transformationsParams\": {\n          \"rawPayload\": \"This is a raw body.\",\n          \"headers\": { \"content-type\": \"text/plain\" }\n      }\n  }'\n"
          }
        ]
      }
    },
    "/api/v1/app/{app_id}/msg/{msg_id}": {
      "get": {
        "tags": [
          "Message"
        ],
        "summary": "Get Message",
        "description": "Get a message by its ID or eventID.",
        "operationId": "v1.message.get",
        "parameters": [
          {
            "in": "path",
            "name": "app_id",
            "description": "The Application's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Application's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "msg_id",
            "description": "The Message's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Message's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "with_content",
            "description": "When `true` message payloads are included in the response.",
            "schema": {
              "description": "When `true` message payloads are included in the response.",
              "default": true,
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOut"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "const messageOut = await svix.message.get(\"app_id\", \"msg_id\");"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "const messageOut = await svix.message.get(\"app_id\", \"msg_id\");"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "message_out = svix.message.get(\"app_id\", \"msg_id\")"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "message_out = await svix.message.get(\"app_id\", \"msg_id\")"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "messageOut, err := svixClient.Message.Get(ctx, \"app_id\", \"msg_id\")"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "val messageOut = svix.message.get(\"app_id\", \"msg_id\")"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "MessageOut messageOut = svix.getMessage().get(\"app_id\", \"msg_id\");"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "message_out = svix.message.get(\"app_id\", \"msg_id\")"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "let message_out = svix.message().get(\"app_id\", \"msg_id\").await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "var messageOut = await svix.Message.GetAsync(\"app_id\", \"msg_id\");"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix message get \"app_id\" \"msg_id\""
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/msg/{msg_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n"
          }
        ]
      }
    },
    "/api/v1/app/{app_id}/msg/{msg_id}/content": {
      "delete": {
        "tags": [
          "Message"
        ],
        "summary": "Delete message payload",
        "description": "Delete the given message's payload.\n\nUseful in cases when a message was accidentally sent with sensitive content.\nThe message can't be replayed or resent once its payload has been deleted or expired.",
        "operationId": "v1.message.expunge-content",
        "parameters": [
          {
            "in": "path",
            "name": "app_id",
            "description": "The Application's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Application's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "msg_id",
            "description": "The Message's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Message's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "await svix.message.expungeContent(\"app_id\", \"msg_id\");"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "await svix.message.expungeContent(\"app_id\", \"msg_id\");"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "svix.message.expunge_content(\"app_id\", \"msg_id\")"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "await svix.message.expunge_content(\"app_id\", \"msg_id\")"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "err := svixClient.Message.ExpungeContent(ctx, \"app_id\", \"msg_id\")"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "svix.message.expungeContent(\"app_id\", \"msg_id\")"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "svix.getMessage().expungeContent(\"app_id\", \"msg_id\");"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "svix.message.expunge_content(\"app_id\", \"msg_id\")"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "svix.message().expunge_content(\"app_id\", \"msg_id\").await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "await svix.Message.ExpungeContentAsync(\"app_id\", \"msg_id\");"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix message expunge-content \"app_id\" \"msg_id\""
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'DELETE' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/msg/{msg_id}/content' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n"
          }
        ]
      }
    },
    "/api/v1/app/{app_id}/msg/expunge-all-contents": {
      "post": {
        "tags": [
          "Message"
        ],
        "summary": "Expunge all message contents",
        "description": "Delete all message payloads for the application.\n\nThis operation is only available in the <a href=\"https://svix.com/pricing\" target=\"_blank\">Enterprise</a> plan.",
        "operationId": "v1.message.expunge-all-contents",
        "parameters": [
          {
            "in": "path",
            "name": "app_id",
            "description": "The Application's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Application's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "idempotency-key",
            "description": "The request's idempotency key",
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "202": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpungeAllContentsOut"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "const expungeAllContentsOut = await svix.message.expungeAllContents(\"app_id\");"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "const expungeAllContentsOut = await svix.message.expungeAllContents(\"app_id\");"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "expunge_all_contents_out = svix.message.expunge_all_contents(\"app_id\", options=...)"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "expunge_all_contents_out = await svix.message.expunge_all_contents(\"app_id\", options=...)"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "expungeAllContentsOut, err := svixClient.Message.ExpungeAllContents(ctx, \"app_id\")"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "val expungeAllContentsOut = svix.message.expungeAllContents(\"app_id\")"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "ExpungeAllContentsOut expungeAllContentsOut = svix.getMessage().expungeAllContents(\"app_id\");"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "expunge_all_contents_out = svix.message.expunge_all_contents(\"app_id\")"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "let expunge_all_contents_out = svix.message().expunge_all_contents(\"app_id\", None).await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "var expungeAllContentsOut = await svix.Message.ExpungeAllContentsAsync(\"app_id\");"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix message expunge-all-contents \"app_id\""
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/msg/expunge-all-contents' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n"
          }
        ]
      }
    },
    "/api/v1/app/{app_id}/attempt/endpoint/{endpoint_id}": {
      "get": {
        "tags": [
          "Message Attempt"
        ],
        "summary": "List Attempts By Endpoint",
        "description": "List attempts by endpoint id\n\nNote that by default this endpoint is limited to retrieving 90 days' worth of data\nrelative to now or, if an iterator is provided, 90 days before/after the time indicated\nby the iterator ID. If you require data beyond those time ranges, you will need to explicitly\n set the `before` or `after` parameter as appropriate.\n",
        "operationId": "v1.message-attempt.list-by-endpoint",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the number of returned items",
            "schema": {
              "description": "Limit the number of returned items",
              "type": "integer",
              "format": "uint64",
              "maximum": 250.0,
              "minimum": 1.0
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "iterator",
            "description": "The iterator returned from a prior invocation",
            "schema": {
              "description": "The iterator returned from a prior invocation",
              "type": "string",
              "maxLength": 33,
              "minLength": 33,
              "pattern": "^atmpt_[A-Za-z0-9]{27}$",
              "example": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2",
              "nullable": true
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "status",
            "description": "Filter response based on the status of the attempt: Success (0), Pending (1), Failed (2), or Sending (3)",
            "schema": {
              "description": "Filter response based on the status of the attempt: Success (0), Pending (1), Failed (2), or Sending (3)",
              "$ref": "#/components/schemas/MessageStatus",
              "nullable": true
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "status_code_class",
            "description": "Filter response based on the HTTP status code",
            "schema": {
              "description": "Filter response based on the HTTP status code",
              "$ref": "#/components/schemas/StatusCodeClass",
              "nullable": true
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "channel",
            "description": "Filter response based on the channel",
            "schema": {
              "description": "Filter response based on the channel",
              "type": "string",
              "maxLength": 128,
              "pattern": "^[a-zA-Z0-9\\-_.:]+$",
              "example": "project_1337",
              "nullable": true
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "tag",
            "description": "Filter response based on the tag",
            "schema": {
              "description": "Filter response based on the tag",
              "type": "string",
              "maxLength": 128,
              "pattern": "^[a-zA-Z0-9\\-_./\\\\#]+$",
              "example": "project_1337",
              "nullable": true
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "before",
            "description": "Only include items created before a certain date",
            "schema": {
              "description": "Only include items created before a certain date",
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "after",
            "description": "Only include items created after a certain date",
            "schema": {
              "description": "Only include items created after a certain date",
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "with_content",
            "description": "When `true` attempt content is included in the response",
            "schema": {
              "description": "When `true` attempt content is included in the response",
              "default": true,
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "with_msg",
            "description": "When `true`, the message information is included in the response",
            "schema": {
              "description": "When `true`, the message information is included in the response",
              "default": false,
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "event_types",
            "description": "Filter response based on the event type",
            "schema": {
              "description": "Filter response based on the event type",
              "type": "array",
              "items": {
                "description": "The event type's name",
                "type": "string",
                "maxLength": 256,
                "pattern": "^[a-zA-Z0-9\\-_.]+$",
                "example": "user.signup"
              },
              "uniqueItems": true,
              "nullable": true
            },
            "style": "form"
          },
          {
            "in": "path",
            "name": "app_id",
            "description": "The Application's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Application's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "endpoint_id",
            "description": "The Endpoint's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Endpoint's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponse_MessageAttemptOut_"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "const listResponseMessageAttemptOut = await svix.messageAttempt.listByEndpoint(\"app_id\", \"endpoint_id\");"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "const listResponseMessageAttemptOut = await svix.messageAttempt.listByEndpoint(\"app_id\", \"endpoint_id\");"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "list_response_message_attempt_out = svix.message_attempt.list_by_endpoint(\"app_id\", \"endpoint_id\", options=...)"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "list_response_message_attempt_out = await svix.message_attempt.list_by_endpoint(\"app_id\", \"endpoint_id\", options=...)"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "listResponseMessageAttemptOut, err := svixClient.MessageAttempt.ListByEndpoint(ctx, \"app_id\", \"endpoint_id\", nil)"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "val listResponseMessageAttemptOut = svix.messageAttempt.listByEndpoint(\"app_id\", \"endpoint_id\")"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "ListResponseMessageAttemptOut listResponseMessageAttemptOut = svix.getMessageAttempt().listByEndpoint(\"app_id\", \"endpoint_id\");"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "list_response_message_attempt_out = svix.message_attempt.list_by_endpoint(\"app_id\", \"endpoint_id\")"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "let list_response_message_attempt_out = svix.message_attempt().list_by_endpoint(\"app_id\", \"endpoint_id\", None).await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "var listResponseMessageAttemptOut = await svix.MessageAttempt.ListByEndpointAsync(\"app_id\", \"endpoint_id\");"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix message-attempt list-by-endpoint \"app_id\" \"endpoint_id\""
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/attempt/endpoint/{endpoint_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n"
          }
        ]
      }
    },
    "/api/v1/app/{app_id}/attempt/msg/{msg_id}": {
      "get": {
        "tags": [
          "Message Attempt"
        ],
        "summary": "List Attempts By Msg",
        "description": "List attempts by message ID.\n\nNote that by default this endpoint is limited to retrieving 90 days' worth of data\nrelative to now or, if an iterator is provided, 90 days before/after the time indicated\nby the iterator ID. If you require data beyond those time ranges, you will need to explicitly\n set the `before` or `after` parameter as appropriate.",
        "operationId": "v1.message-attempt.list-by-msg",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the number of returned items",
            "schema": {
              "description": "Limit the number of returned items",
              "type": "integer",
              "format": "uint64",
              "maximum": 250.0,
              "minimum": 1.0
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "iterator",
            "description": "The iterator returned from a prior invocation",
            "schema": {
              "description": "The iterator returned from a prior invocation",
              "type": "string",
              "maxLength": 33,
              "minLength": 33,
              "pattern": "^atmpt_[A-Za-z0-9]{27}$",
              "example": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2",
              "nullable": true
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "status",
            "description": "Filter response based on the status of the attempt: Success (0), Pending (1), Failed (2), or Sending (3)",
            "schema": {
              "description": "Filter response based on the status of the attempt: Success (0), Pending (1), Failed (2), or Sending (3)",
              "$ref": "#/components/schemas/MessageStatus",
              "nullable": true
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "status_code_class",
            "description": "Filter response based on the HTTP status code",
            "schema": {
              "description": "Filter response based on the HTTP status code",
              "$ref": "#/components/schemas/StatusCodeClass",
              "nullable": true
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "channel",
            "description": "Filter response based on the channel",
            "schema": {
              "description": "Filter response based on the channel",
              "type": "string",
              "maxLength": 128,
              "pattern": "^[a-zA-Z0-9\\-_.:]+$",
              "example": "project_1337",
              "nullable": true
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "tag",
            "description": "Filter response based on the tag",
            "schema": {
              "description": "Filter response based on the tag",
              "type": "string",
              "maxLength": 128,
              "pattern": "^[a-zA-Z0-9\\-_./\\\\#]+$",
              "example": "project_1337",
              "nullable": true
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "endpoint_id",
            "description": "Filter the attempts based on the attempted endpoint",
            "schema": {
              "description": "Filter the attempts based on the attempted endpoint",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier",
              "nullable": true
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "before",
            "description": "Only include items created before a certain date",
            "schema": {
              "description": "Only include items created before a certain date",
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "after",
            "description": "Only include items created after a certain date",
            "schema": {
              "description": "Only include items created after a certain date",
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "with_content",
            "description": "When `true` attempt content is included in the response",
            "schema": {
              "description": "When `true` attempt content is included in the response",
              "default": true,
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "in": "path",
            "name": "app_id",
            "description": "The Application's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Application's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "msg_id",
            "description": "The Message's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Message's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "event_types",
            "description": "Filter response based on the event type",
            "schema": {
              "description": "Filter response based on the event type",
              "type": "array",
              "items": {
                "description": "The event type's name",
                "type": "string",
                "maxLength": 256,
                "pattern": "^[a-zA-Z0-9\\-_.]+$",
                "example": "user.signup"
              },
              "uniqueItems": true,
              "nullable": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponse_MessageAttemptOut_"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "const listResponseMessageAttemptOut = await svix.messageAttempt.listByMsg(\"app_id\", \"msg_id\");"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "const listResponseMessageAttemptOut = await svix.messageAttempt.listByMsg(\"app_id\", \"msg_id\");"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "list_response_message_attempt_out = svix.message_attempt.list_by_msg(\"app_id\", \"msg_id\", options=...)"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "list_response_message_attempt_out = await svix.message_attempt.list_by_msg(\"app_id\", \"msg_id\", options=...)"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "listResponseMessageAttemptOut, err := svixClient.MessageAttempt.ListByMsg(ctx, \"app_id\", \"msg_id\", nil)"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "val listResponseMessageAttemptOut = svix.messageAttempt.listByMsg(\"app_id\", \"msg_id\")"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "ListResponseMessageAttemptOut listResponseMessageAttemptOut = svix.getMessageAttempt().listByMsg(\"app_id\", \"msg_id\");"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "list_response_message_attempt_out = svix.message_attempt.list_by_msg(\"app_id\", \"msg_id\")"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "let list_response_message_attempt_out = svix.message_attempt().list_by_msg(\"app_id\", \"msg_id\", None).await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "var listResponseMessageAttemptOut = await svix.MessageAttempt.ListByMsgAsync(\"app_id\", \"msg_id\");"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix message-attempt list-by-msg \"app_id\" \"msg_id\""
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/attempt/msg/{msg_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n"
          }
        ]
      }
    },
    "/api/v1/app/{app_id}/endpoint/{endpoint_id}/msg": {
      "get": {
        "tags": [
          "Message Attempt"
        ],
        "summary": "List Attempted Messages",
        "description": "List messages for a particular endpoint. Additionally includes metadata about the latest message attempt.\n\nThe `before` parameter lets you filter all items created before a certain date and is ignored if an iterator is passed.\n\nNote that by default this endpoint is limited to retrieving 90 days' worth of data\nrelative to now or, if an iterator is provided, 90 days before/after the time indicated\nby the iterator ID. If you require data beyond those time ranges, you will need to explicitly\nset the `before` or `after` parameter as appropriate.\n",
        "operationId": "v1.message-attempt.list-attempted-messages",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the number of returned items",
            "schema": {
              "description": "Limit the number of returned items",
              "type": "integer",
              "format": "uint64",
              "maximum": 250.0,
              "minimum": 1.0
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "iterator",
            "description": "The iterator returned from a prior invocation",
            "schema": {
              "description": "The iterator returned from a prior invocation",
              "type": "string",
              "maxLength": 31,
              "minLength": 31,
              "pattern": "^msg_[A-Za-z0-9]{27}$",
              "example": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2",
              "nullable": true
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "channel",
            "description": "Filter response based on the channel",
            "schema": {
              "description": "Filter response based on the channel",
              "type": "string",
              "maxLength": 128,
              "pattern": "^[a-zA-Z0-9\\-_.:]+$",
              "example": "project_1337",
              "nullable": true
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "tag",
            "description": "Filter response based on the message tags",
            "schema": {
              "description": "Filter response based on the message tags",
              "type": "string",
              "maxLength": 128,
              "pattern": "^[a-zA-Z0-9\\-_./\\\\#]+$",
              "example": "project_1337",
              "nullable": true
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "status",
            "description": "Filter response based on the status of the attempt: Success (0), Pending (1), Failed (2), or Sending (3)",
            "schema": {
              "description": "Filter response based on the status of the attempt: Success (0), Pending (1), Failed (2), or Sending (3)",
              "$ref": "#/components/schemas/MessageStatus",
              "nullable": true
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "before",
            "description": "Only include items created before a certain date",
            "schema": {
              "description": "Only include items created before a certain date",
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "after",
            "description": "Only include items created after a certain date",
            "schema": {
              "description": "Only include items created after a certain date",
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "with_content",
            "description": "When `true` message payloads are included in the response",
            "schema": {
              "description": "When `true` message payloads are included in the response",
              "default": true,
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "in": "path",
            "name": "app_id",
            "description": "The Application's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Application's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "endpoint_id",
            "description": "The Endpoint's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Endpoint's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "event_types",
            "description": "Filter response based on the event type",
            "schema": {
              "description": "Filter response based on the event type",
              "type": "array",
              "items": {
                "description": "The event type's name",
                "type": "string",
                "maxLength": 256,
                "pattern": "^[a-zA-Z0-9\\-_.]+$",
                "example": "user.signup"
              },
              "uniqueItems": true,
              "nullable": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponse_EndpointMessageOut_"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "const listResponseEndpointMessageOut = await svix.messageAttempt.listAttemptedMessages(\"app_id\", \"endpoint_id\");"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "const listResponseEndpointMessageOut = await svix.messageAttempt.listAttemptedMessages(\"app_id\", \"endpoint_id\");"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "list_response_endpoint_message_out = svix.message_attempt.list_attempted_messages(\"app_id\", \"endpoint_id\", options=...)"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "list_response_endpoint_message_out = await svix.message_attempt.list_attempted_messages(\"app_id\", \"endpoint_id\", options=...)"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "listResponseEndpointMessageOut, err := svixClient.MessageAttempt.ListAttemptedMessages(ctx, \"app_id\", \"endpoint_id\", nil)"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "val listResponseEndpointMessageOut = svix.messageAttempt.listAttemptedMessages(\"app_id\", \"endpoint_id\")"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "ListResponseEndpointMessageOut listResponseEndpointMessageOut = svix.getMessageAttempt().listAttemptedMessages(\"app_id\", \"endpoint_id\");"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "list_response_endpoint_message_out = svix.message_attempt.list_attempted_messages(\"app_id\", \"endpoint_id\")"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "let list_response_endpoint_message_out = svix.message_attempt().list_attempted_messages(\"app_id\", \"endpoint_id\", None).await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "var listResponseEndpointMessageOut = await svix.MessageAttempt.ListAttemptedMessagesAsync(\"app_id\", \"endpoint_id\");"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix message-attempt list-attempted-messages \"app_id\" \"endpoint_id\""
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/endpoint/{endpoint_id}/msg' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n"
          }
        ]
      }
    },
    "/api/v1/app/{app_id}/msg/{msg_id}/endpoint": {
      "get": {
        "tags": [
          "Message Attempt"
        ],
        "summary": "List Attempted Destinations",
        "description": "List endpoints attempted by a given message.\n\nAdditionally includes metadata about the latest message attempt.\nBy default, endpoints are listed in ascending order by ID.",
        "operationId": "v1.message-attempt.list-attempted-destinations",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the number of returned items",
            "schema": {
              "description": "Limit the number of returned items",
              "type": "integer",
              "format": "uint64",
              "maximum": 250.0,
              "minimum": 1.0
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "iterator",
            "description": "The iterator returned from a prior invocation",
            "schema": {
              "description": "The iterator returned from a prior invocation",
              "type": "string",
              "maxLength": 30,
              "minLength": 30,
              "pattern": "^ep_[A-Za-z0-9]{27}$",
              "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
              "nullable": true
            },
            "style": "form"
          },
          {
            "in": "path",
            "name": "app_id",
            "description": "The Application's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Application's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "msg_id",
            "description": "The Message's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Message's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponse_MessageEndpointOut_"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "const listResponseMessageEndpointOut = await svix.messageAttempt.listAttemptedDestinations(\"app_id\", \"msg_id\");"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "const listResponseMessageEndpointOut = await svix.messageAttempt.listAttemptedDestinations(\"app_id\", \"msg_id\");"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "list_response_message_endpoint_out = svix.message_attempt.list_attempted_destinations(\"app_id\", \"msg_id\", options=...)"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "list_response_message_endpoint_out = await svix.message_attempt.list_attempted_destinations(\"app_id\", \"msg_id\", options=...)"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "listResponseMessageEndpointOut, err := svixClient.MessageAttempt.ListAttemptedDestinations(ctx, \"app_id\", \"msg_id\", nil)"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "val listResponseMessageEndpointOut = svix.messageAttempt.listAttemptedDestinations(\"app_id\", \"msg_id\")"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "ListResponseMessageEndpointOut listResponseMessageEndpointOut = svix.getMessageAttempt().listAttemptedDestinations(\"app_id\", \"msg_id\");"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "list_response_message_endpoint_out = svix.message_attempt.list_attempted_destinations(\"app_id\", \"msg_id\")"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "let list_response_message_endpoint_out = svix.message_attempt().list_attempted_destinations(\"app_id\", \"msg_id\", None).await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "var listResponseMessageEndpointOut = await svix.MessageAttempt.ListAttemptedDestinationsAsync(\"app_id\", \"msg_id\");"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix message-attempt list-attempted-destinations \"app_id\" \"msg_id\""
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/msg/{msg_id}/endpoint' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n"
          }
        ]
      }
    },
    "/api/v1/app/{app_id}/msg/{msg_id}/attempt/{attempt_id}": {
      "get": {
        "tags": [
          "Message Attempt"
        ],
        "summary": "Get Attempt",
        "description": "`msg_id`: Use a message id or a message `eventId`",
        "operationId": "v1.message-attempt.get",
        "parameters": [
          {
            "in": "path",
            "name": "app_id",
            "description": "The Application's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Application's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "msg_id",
            "description": "The Message's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Message's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "attempt_id",
            "description": "The MessageAttempt's ID.",
            "required": true,
            "schema": {
              "description": "The MessageAttempt's ID.",
              "type": "string",
              "maxLength": 33,
              "minLength": 33,
              "pattern": "^atmpt_[A-Za-z0-9]{27}$",
              "example": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageAttemptOut"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "const messageAttemptOut = await svix.messageAttempt.get(\"app_id\", \"msg_id\", \"attempt_id\");"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "const messageAttemptOut = await svix.messageAttempt.get(\"app_id\", \"msg_id\", \"attempt_id\");"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "message_attempt_out = svix.message_attempt.get(\"app_id\", \"msg_id\", \"attempt_id\")"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "message_attempt_out = await svix.message_attempt.get(\"app_id\", \"msg_id\", \"attempt_id\")"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "messageAttemptOut, err := svixClient.MessageAttempt.Get(ctx, \"app_id\", \"msg_id\", \"attempt_id\")"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "val messageAttemptOut = svix.messageAttempt.get(\"app_id\", \"msg_id\", \"attempt_id\")"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "MessageAttemptOut messageAttemptOut = svix.getMessageAttempt().get(\"app_id\", \"msg_id\", \"attempt_id\");"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "message_attempt_out = svix.message_attempt.get(\"app_id\", \"msg_id\", \"attempt_id\")"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "let message_attempt_out = svix.message_attempt().get(\"app_id\", \"msg_id\", \"attempt_id\").await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "var messageAttemptOut = await svix.MessageAttempt.GetAsync(\"app_id\", \"msg_id\", \"attempt_id\");"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix message-attempt get \"app_id\" \"msg_id\" \"attempt_id\""
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/msg/{msg_id}/attempt/{attempt_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n"
          }
        ]
      }
    },
    "/api/v1/app/{app_id}/msg/{msg_id}/attempt/{attempt_id}/content": {
      "delete": {
        "tags": [
          "Message Attempt"
        ],
        "summary": "Delete attempt response body",
        "description": "Deletes the given attempt's response body.\n\nUseful when an endpoint accidentally returned sensitive content.\nThe message can't be replayed or resent once its payload has been deleted or expired.",
        "operationId": "v1.message-attempt.expunge-content",
        "parameters": [
          {
            "in": "path",
            "name": "app_id",
            "description": "The Application's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Application's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "msg_id",
            "description": "The Message's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Message's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "attempt_id",
            "description": "The MessageAttempt's ID.",
            "required": true,
            "schema": {
              "description": "The MessageAttempt's ID.",
              "type": "string",
              "maxLength": 33,
              "minLength": 33,
              "pattern": "^atmpt_[A-Za-z0-9]{27}$",
              "example": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "await svix.messageAttempt.expungeContent(\"app_id\", \"msg_id\", \"attempt_id\");"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "await svix.messageAttempt.expungeContent(\"app_id\", \"msg_id\", \"attempt_id\");"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "svix.message_attempt.expunge_content(\"app_id\", \"msg_id\", \"attempt_id\")"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "await svix.message_attempt.expunge_content(\"app_id\", \"msg_id\", \"attempt_id\")"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "err := svixClient.MessageAttempt.ExpungeContent(ctx, \"app_id\", \"msg_id\", \"attempt_id\")"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "svix.messageAttempt.expungeContent(\"app_id\", \"msg_id\", \"attempt_id\")"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "svix.getMessageAttempt().expungeContent(\"app_id\", \"msg_id\", \"attempt_id\");"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "svix.message_attempt.expunge_content(\"app_id\", \"msg_id\", \"attempt_id\")"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "svix.message_attempt().expunge_content(\"app_id\", \"msg_id\", \"attempt_id\").await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "await svix.MessageAttempt.ExpungeContentAsync(\"app_id\", \"msg_id\", \"attempt_id\");"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix message-attempt expunge-content \"app_id\" \"msg_id\" \"attempt_id\""
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'DELETE' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/msg/{msg_id}/attempt/{attempt_id}/content' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n"
          }
        ]
      }
    },
    "/api/v1/app/{app_id}/msg/{msg_id}/endpoint/{endpoint_id}/resend": {
      "post": {
        "tags": [
          "Message Attempt"
        ],
        "summary": "Resend Webhook",
        "description": "Resend a message to the specified endpoint.",
        "operationId": "v1.message-attempt.resend",
        "parameters": [
          {
            "in": "path",
            "name": "app_id",
            "description": "The Application's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Application's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "msg_id",
            "description": "The Message's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Message's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "endpoint_id",
            "description": "The Endpoint's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Endpoint's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "idempotency-key",
            "description": "The request's idempotency key",
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "202": {
            "description": "no content"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "await svix.messageAttempt.resend(\"app_id\", \"msg_id\", \"endpoint_id\");"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "await svix.messageAttempt.resend(\"app_id\", \"msg_id\", \"endpoint_id\");"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "svix.message_attempt.resend(\"app_id\", \"msg_id\", \"endpoint_id\", options=...)"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "await svix.message_attempt.resend(\"app_id\", \"msg_id\", \"endpoint_id\", options=...)"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "err := svixClient.MessageAttempt.Resend(ctx, \"app_id\", \"msg_id\", \"endpoint_id\")"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "svix.messageAttempt.resend(\"app_id\", \"msg_id\", \"endpoint_id\")"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "svix.getMessageAttempt().resend(\"app_id\", \"msg_id\", \"endpoint_id\");"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "svix.message_attempt.resend(\"app_id\", \"msg_id\", \"endpoint_id\")"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "svix.message_attempt().resend(\"app_id\", \"msg_id\", \"endpoint_id\", None).await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "await svix.MessageAttempt.ResendAsync(\"app_id\", \"msg_id\", \"endpoint_id\");"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix message-attempt resend \"app_id\" \"msg_id\" \"endpoint_id\""
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/msg/{msg_id}/endpoint/{endpoint_id}/resend' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n"
          }
        ]
      }
    },
    "/api/v1/stats/usage/event-types": {
      "put": {
        "tags": [
          "Statistics"
        ],
        "summary": "Aggregate Event Types",
        "description": "Creates a background task to calculate the listed event types for all apps in the organization.\n\nNote that this endpoint is asynchronous. You will need to poll the `Get Background Task` endpoint to\nretrieve the results of the operation.",
        "operationId": "v1.statistics.aggregate-event-types",
        "responses": {
          "202": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AggregateEventTypesOut"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "const aggregateEventTypesOut = await svix.statistics.aggregateEventTypes();"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "const aggregateEventTypesOut = await svix.statistics.aggregateEventTypes();"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "aggregate_event_types_out = svix.statistics.aggregate_event_types()"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "aggregate_event_types_out = await svix.statistics.aggregate_event_types()"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "aggregateEventTypesOut, err := svixClient.Statistics.AggregateEventTypes(ctx)"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "val aggregateEventTypesOut = svix.statistics.aggregateEventTypes()"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "AggregateEventTypesOut aggregateEventTypesOut = svix.getStatistics().aggregateEventTypes();"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "aggregate_event_types_out = svix.statistics.aggregate_event_types()"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "let aggregate_event_types_out = svix.statistics().aggregate_event_types().await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "var aggregateEventTypesOut = await svix.Statistics.AggregateEventTypesAsync();"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix statistics aggregate-event-types "
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'PUT' \\\n  'https://api.eu.svix.com/api/v1/stats/usage/event-types' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n"
          }
        ]
      }
    },
    "/api/v1/stats/usage/app": {
      "post": {
        "tags": [
          "Statistics"
        ],
        "summary": "Aggregate App Stats",
        "description": "Creates a background task to calculate the message destinations for all applications in the environment.\n\nNote that this endpoint is asynchronous. You will need to poll the `Get Background Task` endpoint to\nretrieve the results of the operation.",
        "operationId": "v1.statistics.aggregate-app-stats",
        "parameters": [
          {
            "in": "header",
            "name": "idempotency-key",
            "description": "The request's idempotency key",
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppUsageStatsIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppUsageStatsOut"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "const appUsageStatsOut = await svix.statistics.aggregateAppStats({\n    appIds: null\n});"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "const appUsageStatsOut = await svix.statistics.aggregateAppStats({\n    appIds: null\n});"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "app_usage_stats_out = svix.statistics.aggregate_app_stats(AppUsageStatsIn(\n    app_ids=None\n), options=...)"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "app_usage_stats_out = await svix.statistics.aggregate_app_stats(AppUsageStatsIn(\n    app_ids=None\n), options=...)"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "appUsageStatsOut, err := svixClient.Statistics.AggregateAppStats(ctx, &AppUsageStatsIn{\n    AppIds: nil,\n})"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "val appUsageStatsOut = svix.statistics.aggregateAppStats(AppUsageStatsIn()\n    .appIds(null)\n)"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "AppUsageStatsOut appUsageStatsOut = svix.getStatistics().aggregateAppStats(new AppUsageStatsIn()\n    .appIds(null)\n);"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "app_usage_stats_out = svix.statistics.aggregate_app_stats(Svix::AppUsageStatsIn.new({\n    \"app_ids\": nil\n}))"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "let app_usage_stats_out = svix.statistics().aggregate_app_stats(AppUsageStatsIn {\n    app_ids: None,\n}, None).await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "var appUsageStatsOut = await svix.Statistics.AggregateAppStatsAsync(new AppUsageStatsIn{\n    appIds: null\n});"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix statistics aggregate-app-stats '{\n    \"appIds\": null\n}'"
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/stats/usage/app' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n \\\n  -d '{\n        \"appIds\": null\n    }'"
          }
        ]
      }
    },
    "/api/v1/app/{app_id}/integration": {
      "get": {
        "tags": [
          "Integration"
        ],
        "summary": "List Integrations",
        "description": "List the application's integrations.",
        "operationId": "v1.integration.list",
        "parameters": [
          {
            "in": "path",
            "name": "app_id",
            "description": "The Application's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Application's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the number of returned items",
            "schema": {
              "description": "Limit the number of returned items",
              "type": "integer",
              "format": "uint64",
              "maximum": 250.0,
              "minimum": 1.0
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "iterator",
            "description": "The iterator returned from a prior invocation",
            "schema": {
              "description": "The iterator returned from a prior invocation",
              "type": "string",
              "maxLength": 33,
              "minLength": 33,
              "pattern": "^integ_[A-Za-z0-9]{27}$",
              "example": "integ_1srOrx2ZWZBpBUvZwXKQmoEYga2",
              "nullable": true
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "order",
            "description": "The sorting order of the returned items",
            "schema": {
              "description": "The sorting order of the returned items",
              "$ref": "#/components/schemas/Ordering",
              "nullable": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponse_IntegrationOut_"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "const listResponseIntegrationOut = await svix.integration.list(\"app_id\");"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "const listResponseIntegrationOut = await svix.integration.list(\"app_id\");"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "list_response_integration_out = svix.integration.list(\"app_id\", options=...)"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "list_response_integration_out = await svix.integration.list(\"app_id\", options=...)"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "listResponseIntegrationOut, err := svixClient.Integration.List(ctx, \"app_id\", nil)"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "val listResponseIntegrationOut = svix.integration.list(\"app_id\")"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "ListResponseIntegrationOut listResponseIntegrationOut = svix.getIntegration().list(\"app_id\");"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "list_response_integration_out = svix.integration.list(\"app_id\")"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "let list_response_integration_out = svix.integration().list(\"app_id\", None).await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "var listResponseIntegrationOut = await svix.Integration.ListAsync(\"app_id\");"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix integration list \"app_id\""
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/integration' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n"
          }
        ]
      },
      "post": {
        "tags": [
          "Integration"
        ],
        "summary": "Create Integration",
        "description": "Create an integration.",
        "operationId": "v1.integration.create",
        "parameters": [
          {
            "in": "path",
            "name": "app_id",
            "description": "The Application's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Application's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "idempotency-key",
            "description": "The request's idempotency key",
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IntegrationIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationOut"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "const integrationOut = await svix.integration.create(\"app_id\", {\n    name: \"Example Integration\",\n    featureFlags: []\n});"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "const integrationOut = await svix.integration.create(\"app_id\", {\n    name: \"Example Integration\",\n    featureFlags: []\n});"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "integration_out = svix.integration.create(\"app_id\", IntegrationIn(\n    name=\"Example Integration\",\n    feature_flags=[]\n), options=...)"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "integration_out = await svix.integration.create(\"app_id\", IntegrationIn(\n    name=\"Example Integration\",\n    feature_flags=[]\n), options=...)"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "integrationOut, err := svixClient.Integration.Create(ctx, \"app_id\", &IntegrationIn{\n    Name: \"Example Integration\",\n    FeatureFlags: []interface{}{},\n})"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "val integrationOut = svix.integration.create(\"app_id\", IntegrationIn()\n    .name(\"Example Integration\")\n    .featureFlags(arrayOf())\n)"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "IntegrationOut integrationOut = svix.getIntegration().create(\"app_id\", new IntegrationIn()\n    .name(\"Example Integration\")\n    .featureFlags(new Object[]{})\n);"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "integration_out = svix.integration.create(\"app_id\", Svix::IntegrationIn.new({\n    \"name\": \"Example Integration\",\n    \"feature_flags\": []\n}))"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "let integration_out = svix.integration().create(\"app_id\", IntegrationIn {\n    name: \"Example Integration\".to_string(),\n    feature_flags: Some(vec![]),\n }, None).await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "var integrationOut = await svix.Integration.CreateAsync(\"app_id\", new IntegrationIn{\n    name: \"Example Integration\",\n    featureFlags: new Object[] {}\n});"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix integration create \"app_id\" '{\n    \"name\": \"Example Integration\",\n    \"featureFlags\": []\n}'"
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/integration' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n \\\n  -d '{\n        \"name\": \"Example Integration\",\n        \"featureFlags\": []\n    }'"
          }
        ]
      }
    },
    "/api/v1/app/{app_id}/integration/{integ_id}": {
      "get": {
        "tags": [
          "Integration"
        ],
        "summary": "Get Integration",
        "description": "Get an integration.",
        "operationId": "v1.integration.get",
        "parameters": [
          {
            "in": "path",
            "name": "app_id",
            "description": "The Application's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Application's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "integ_id",
            "description": "The Integration's ID.",
            "required": true,
            "schema": {
              "description": "The Integration's ID.",
              "type": "string",
              "maxLength": 33,
              "minLength": 33,
              "pattern": "^integ_[A-Za-z0-9]{27}$",
              "example": "integ_1srOrx2ZWZBpBUvZwXKQmoEYga2"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationOut"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "const integrationOut = await svix.integration.get(\"app_id\", \"integ_id\");"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "const integrationOut = await svix.integration.get(\"app_id\", \"integ_id\");"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "integration_out = svix.integration.get(\"app_id\", \"integ_id\")"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "integration_out = await svix.integration.get(\"app_id\", \"integ_id\")"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "integrationOut, err := svixClient.Integration.Get(ctx, \"app_id\", \"integ_id\")"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "val integrationOut = svix.integration.get(\"app_id\", \"integ_id\")"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "IntegrationOut integrationOut = svix.getIntegration().get(\"app_id\", \"integ_id\");"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "integration_out = svix.integration.get(\"app_id\", \"integ_id\")"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "let integration_out = svix.integration().get(\"app_id\", \"integ_id\").await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "var integrationOut = await svix.Integration.GetAsync(\"app_id\", \"integ_id\");"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix integration get \"app_id\" \"integ_id\""
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/integration/{integ_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n"
          }
        ]
      },
      "put": {
        "tags": [
          "Integration"
        ],
        "summary": "Update Integration",
        "description": "Update an integration.",
        "operationId": "v1.integration.update",
        "parameters": [
          {
            "in": "path",
            "name": "app_id",
            "description": "The Application's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Application's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "integ_id",
            "description": "The Integration's ID.",
            "required": true,
            "schema": {
              "description": "The Integration's ID.",
              "type": "string",
              "maxLength": 33,
              "minLength": 33,
              "pattern": "^integ_[A-Za-z0-9]{27}$",
              "example": "integ_1srOrx2ZWZBpBUvZwXKQmoEYga2"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IntegrationUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationOut"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "const integrationOut = await svix.integration.update(\"app_id\", \"integ_id\", {\n    name: \"Example Integration\",\n    featureFlags: []\n});"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "const integrationOut = await svix.integration.update(\"app_id\", \"integ_id\", {\n    name: \"Example Integration\",\n    featureFlags: []\n});"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "integration_out = svix.integration.update(\"app_id\", \"integ_id\", IntegrationUpdate(\n    name=\"Example Integration\",\n    feature_flags=[]\n))"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "integration_out = await svix.integration.update(\"app_id\", \"integ_id\", IntegrationUpdate(\n    name=\"Example Integration\",\n    feature_flags=[]\n))"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "integrationOut, err := svixClient.Integration.Update(ctx, \"app_id\", \"integ_id\", &IntegrationUpdate{\n    Name: \"Example Integration\",\n    FeatureFlags: []interface{}{},\n})"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "val integrationOut = svix.integration.update(\"app_id\", \"integ_id\", IntegrationUpdate()\n    .name(\"Example Integration\")\n    .featureFlags(arrayOf())\n)"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "IntegrationOut integrationOut = svix.getIntegration().update(\"app_id\", \"integ_id\", new IntegrationUpdate()\n    .name(\"Example Integration\")\n    .featureFlags(new Object[]{})\n);"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "integration_out = svix.integration.update(\"app_id\", \"integ_id\", Svix::IntegrationUpdate.new({\n    \"name\": \"Example Integration\",\n    \"feature_flags\": []\n}))"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "let integration_out = svix.integration().update(\"app_id\", \"integ_id\", IntegrationUpdate {\n    name: \"Example Integration\".to_string(),\n    feature_flags: Some(vec![]),\n}).await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "var integrationOut = await svix.Integration.UpdateAsync(\"app_id\", \"integ_id\", new IntegrationUpdate{\n    name: \"Example Integration\",\n    featureFlags: new Object[] {}\n});"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix integration update \"app_id\" \"integ_id\" '{\n    \"name\" : \"Example Integration\",\n    \"featureFlags\": []\n}'"
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'PUT' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/integration/{integ_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n \\\n  -d '{\n        \"name\": \"Example Integration\",\n        \"featureFlags\": []\n    }'"
          }
        ]
      },
      "delete": {
        "tags": [
          "Integration"
        ],
        "summary": "Delete Integration",
        "description": "Delete an integration.",
        "operationId": "v1.integration.delete",
        "parameters": [
          {
            "in": "path",
            "name": "app_id",
            "description": "The Application's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Application's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "integ_id",
            "description": "The Integration's ID.",
            "required": true,
            "schema": {
              "description": "The Integration's ID.",
              "type": "string",
              "maxLength": 33,
              "minLength": 33,
              "pattern": "^integ_[A-Za-z0-9]{27}$",
              "example": "integ_1srOrx2ZWZBpBUvZwXKQmoEYga2"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "await svix.integration.delete(\"app_id\", \"integ_id\");"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "await svix.integration.delete(\"app_id\", \"integ_id\");"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "svix.integration.delete(\"app_id\", \"integ_id\")"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "await svix.integration.delete(\"app_id\", \"integ_id\")"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "err := svixClient.Integration.Delete(ctx, \"app_id\", \"integ_id\")"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "svix.integration.delete(\"app_id\", \"integ_id\")"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "svix.getIntegration().delete(\"app_id\", \"integ_id\");"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "svix.integration.delete(\"app_id\", \"integ_id\")"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "svix.integration().delete(\"app_id\", \"integ_id\").await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "await svix.Integration.DeleteAsync(\"app_id\", \"integ_id\");"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix integration delete \"app_id\" \"integ_id\""
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'DELETE' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/integration/{integ_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n"
          }
        ]
      }
    },
    "/api/v1/app/{app_id}/integration/{integ_id}/key/rotate": {
      "post": {
        "tags": [
          "Integration"
        ],
        "summary": "Rotate Integration Key",
        "description": "Rotate the integration's key. The previous key will be immediately revoked.",
        "operationId": "v1.integration.rotate-key",
        "parameters": [
          {
            "in": "path",
            "name": "app_id",
            "description": "The Application's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Application's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "integ_id",
            "description": "The Integration's ID.",
            "required": true,
            "schema": {
              "description": "The Integration's ID.",
              "type": "string",
              "maxLength": 33,
              "minLength": 33,
              "pattern": "^integ_[A-Za-z0-9]{27}$",
              "example": "integ_1srOrx2ZWZBpBUvZwXKQmoEYga2"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "idempotency-key",
            "description": "The request's idempotency key",
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationKeyOut"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "const integrationKeyOut = await svix.integration.rotateKey(\"app_id\", \"integ_id\");"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "const integrationKeyOut = await svix.integration.rotateKey(\"app_id\", \"integ_id\");"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "integration_key_out = svix.integration.rotate_key(\"app_id\", \"integ_id\", options=...)"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "integration_key_out = await svix.integration.rotate_key(\"app_id\", \"integ_id\", options=...)"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "integrationKeyOut, err := svixClient.Integration.RotateKey(ctx, \"app_id\", \"integ_id\")"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "val integrationKeyOut = svix.integration.rotateKey(\"app_id\", \"integ_id\")"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "IntegrationKeyOut integrationKeyOut = svix.getIntegration().rotateKey(\"app_id\", \"integ_id\");"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "integration_key_out = svix.integration.rotate_key(\"app_id\", \"integ_id\")"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "let integration_key_out = svix.integration().rotate_key(\"app_id\", \"integ_id\", None).await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "var integrationKeyOut = await svix.Integration.RotateKeyAsync(\"app_id\", \"integ_id\");"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix integration rotate-key \"app_id\" \"integ_id\""
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/integration/{integ_id}/key/rotate' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n"
          }
        ]
      }
    },
    "/api/v1/app/{app_id}/integration/{integ_id}/key": {
      "get": {
        "tags": [
          "Integration"
        ],
        "summary": "Get Integration Key",
        "description": "Get an integration's key.",
        "operationId": "v1.integration.get-key",
        "parameters": [
          {
            "in": "path",
            "name": "app_id",
            "description": "The Application's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Application's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "integ_id",
            "description": "The Integration's ID.",
            "required": true,
            "schema": {
              "description": "The Integration's ID.",
              "type": "string",
              "maxLength": 33,
              "minLength": 33,
              "pattern": "^integ_[A-Za-z0-9]{27}$",
              "example": "integ_1srOrx2ZWZBpBUvZwXKQmoEYga2"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationKeyOut"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "const integrationKeyOut = await svix.integration.getKey(\"app_id\", \"integ_id\");"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "const integrationKeyOut = await svix.integration.getKey(\"app_id\", \"integ_id\");"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "integration_key_out = svix.integration.get_key(\"app_id\", \"integ_id\")"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "integration_key_out = await svix.integration.get_key(\"app_id\", \"integ_id\")"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "integrationKeyOut, err := svixClient.Integration.GetKey(ctx, \"app_id\", \"integ_id\")"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "val integrationKeyOut = svix.integration.getKey(\"app_id\", \"integ_id\")"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "IntegrationKeyOut integrationKeyOut = svix.getIntegration().getKey(\"app_id\", \"integ_id\");"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "integration_key_out = svix.integration.get_key(\"app_id\", \"integ_id\")"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "let integration_key_out = svix.integration().get_key(\"app_id\", \"integ_id\").await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "var integrationKeyOut = await svix.Integration.GetKeyAsync(\"app_id\", \"integ_id\");"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix integration get-key \"app_id\" \"integ_id\""
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/app/{app_id}/integration/{integ_id}/key' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n"
          }
        ]
      }
    },
    "/api/v1/environment/export": {
      "post": {
        "tags": [
          "Environment"
        ],
        "summary": "Export Environment Configuration",
        "description": "Download a JSON file containing all org-settings and event types.",
        "operationId": "v1.environment.export",
        "parameters": [
          {
            "in": "header",
            "name": "idempotency-key",
            "description": "The request's idempotency key",
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentOut"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "const environmentOut = await svix.environment.export();"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "const environmentOut = await svix.environment.export();"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "environment_out = svix.environment.export(options=...)"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "environment_out = await svix.environment.export(options=...)"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "environmentOut, err := svixClient.Environment.Export(ctx)"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "val environmentOut = svix.environment.export()"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "EnvironmentOut environmentOut = svix.getEnvironment().export();"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "environment_out = svix.environment.export()"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "let environment_out = svix.environment().export(None).await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "var environmentOut = await svix.Environment.ExportAsync();"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix environment export "
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/environment/export' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n"
          }
        ]
      }
    },
    "/api/v1/environment/import": {
      "post": {
        "tags": [
          "Environment"
        ],
        "summary": "Import Environment Configuration",
        "description": "Import a configuration into the active organization.\n\nIt doesn't delete anything, only adds / updates what was passed to it.",
        "operationId": "v1.environment.import",
        "parameters": [
          {
            "in": "header",
            "name": "idempotency-key",
            "description": "The request's idempotency key",
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnvironmentIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "no content"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "await svix.environment.import({\n    eventTypes: null,\n    settings: null,\n    connectors: null\n});"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "await svix.environment.import({\n    eventTypes: null,\n    settings: null,\n    connectors: null\n});"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "svix.environment.import(EnvironmentIn(\n    event_types=None,\n    settings=None,\n    connectors=None\n), options=...)"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "await svix.environment.import(EnvironmentIn(\n    event_types=None,\n    settings=None,\n    connectors=None\n), options=...)"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "err := svixClient.Environment.Import(ctx, &EnvironmentIn{\n    EventTypes: nil,\n    Settings: nil,\n    Connectors: nil,\n})"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "svix.environment.import(EnvironmentIn()\n    .eventTypes(null)\n    .settings(null)\n    .connectors(null)\n)"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "svix.getEnvironment().import(new EnvironmentIn()\n    .eventTypes(null)\n    .settings(null)\n    .connectors(null)\n);"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "svix.environment.import(Svix::EnvironmentIn.new({\n    \"event_types\": nil,\n    \"settings\": nil,\n    \"connectors\": nil\n}))"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "svix.environment().import(EnvironmentIn {\n    event_types: None,\n    settings: None,\n    connectors: None,\n}, None).await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "await svix.Environment.ImportAsync(new EnvironmentIn{\n    eventTypes: null,\n    settings: null,\n    connectors: null\n});"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix environment import '{\n    \"eventTypes\": null,\n    \"settings\": null,\n    \"connectors\": null\n}'"
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/environment/import' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n \\\n  -d '{\n        \"eventTypes\": null,\n        \"settings\": null,\n        \"connectors\": null\n    }'"
          }
        ]
      }
    },
    "/api/v1/background-task": {
      "get": {
        "tags": [
          "Background Task"
        ],
        "summary": "List Background Tasks",
        "description": "List background tasks executed in the past 90 days.",
        "operationId": "v1.background-task.list",
        "parameters": [
          {
            "in": "query",
            "name": "status",
            "description": "Filter the response based on the status.",
            "schema": {
              "description": "Filter the response based on the status.",
              "$ref": "#/components/schemas/BackgroundTaskStatus",
              "nullable": true
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "task",
            "description": "Filter the response based on the type.",
            "schema": {
              "description": "Filter the response based on the type.",
              "$ref": "#/components/schemas/BackgroundTaskType",
              "nullable": true
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the number of returned items",
            "schema": {
              "description": "Limit the number of returned items",
              "type": "integer",
              "format": "uint64",
              "maximum": 250.0,
              "minimum": 1.0
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "iterator",
            "description": "The iterator returned from a prior invocation",
            "schema": {
              "description": "The iterator returned from a prior invocation",
              "type": "string",
              "maxLength": 33,
              "minLength": 33,
              "pattern": "^qtask_[A-Za-z0-9]{27}$",
              "example": "qtask_1srOrx2ZWZBpBUvZwXKQmoEYga2",
              "nullable": true
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "order",
            "description": "The sorting order of the returned items",
            "schema": {
              "description": "The sorting order of the returned items",
              "$ref": "#/components/schemas/Ordering",
              "nullable": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponse_BackgroundTaskOut_"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "const listResponseBackgroundTaskOut = await svix.backgroundTask.list();"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "const listResponseBackgroundTaskOut = await svix.backgroundTask.list();"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "list_response_background_task_out = svix.background_task.list(options=...)"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "list_response_background_task_out = await svix.background_task.list(options=...)"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "listResponseBackgroundTaskOut, err := svixClient.BackgroundTask.List(ctx, nil)"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "val listResponseBackgroundTaskOut = svix.backgroundTask.list()"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "ListResponseBackgroundTaskOut listResponseBackgroundTaskOut = svix.getBackgroundTask().list();"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "list_response_background_task_out = svix.background_task.list()"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "let list_response_background_task_out = svix.background_task().list(None).await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "var listResponseBackgroundTaskOut = await svix.BackgroundTask.ListAsync();"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix background-task list "
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/background-task' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n"
          }
        ]
      }
    },
    "/api/v1/background-task/{task_id}": {
      "get": {
        "tags": [
          "Background Task"
        ],
        "summary": "Get Background Task",
        "description": "Get a background task by ID.",
        "operationId": "v1.background-task.get",
        "parameters": [
          {
            "in": "path",
            "name": "task_id",
            "description": "The QueueBackgroundTask's ID.",
            "required": true,
            "schema": {
              "description": "The QueueBackgroundTask's ID.",
              "type": "string",
              "maxLength": 33,
              "minLength": 33,
              "pattern": "^qtask_[A-Za-z0-9]{27}$",
              "example": "qtask_1srOrx2ZWZBpBUvZwXKQmoEYga2"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BackgroundTaskOut"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "JavaScript",
            "lang": "JavaScript",
            "source": "const backgroundTaskOut = await svix.backgroundTask.get(\"task_id\");"
          },
          {
            "label": "TypeScript",
            "lang": "JavaScript",
            "source": "const backgroundTaskOut = await svix.backgroundTask.get(\"task_id\");"
          },
          {
            "label": "Python",
            "lang": "Python",
            "source": "background_task_out = svix.background_task.get(\"task_id\")"
          },
          {
            "label": "Python (Async)",
            "lang": "Python",
            "source": "background_task_out = await svix.background_task.get(\"task_id\")"
          },
          {
            "label": "Go",
            "lang": "Go",
            "source": "backgroundTaskOut, err := svixClient.BackgroundTask.Get(ctx, \"task_id\")"
          },
          {
            "label": "Kotlin",
            "lang": "Kotlin",
            "source": "val backgroundTaskOut = svix.backgroundTask.get(\"task_id\")"
          },
          {
            "label": "Java",
            "lang": "Java",
            "source": "BackgroundTaskOut backgroundTaskOut = svix.getBackgroundTask().get(\"task_id\");"
          },
          {
            "label": "Ruby",
            "lang": "Ruby",
            "source": "background_task_out = svix.background_task.get(\"task_id\")"
          },
          {
            "label": "Rust",
            "lang": "Rust",
            "source": "let background_task_out = svix.background_task().get(\"task_id\").await?;"
          },
          {
            "label": "C#",
            "lang": "C#",
            "source": "var backgroundTaskOut = await svix.BackgroundTask.GetAsync(\"task_id\");"
          },
          {
            "label": "CLI",
            "lang": "Shell",
            "source": "svix background-task get \"task_id\""
          },
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/background-task/{task_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n"
          }
        ]
      }
    },
    "/api/v1/operational-webhook/endpoint": {
      "get": {
        "tags": [
          "Webhook Endpoint"
        ],
        "summary": "List Operational Webhook Endpoints",
        "description": "List operational webhook endpoints.",
        "operationId": "v1.operational-webhook.endpoint.list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the number of returned items",
            "schema": {
              "description": "Limit the number of returned items",
              "type": "integer",
              "format": "uint64",
              "maximum": 250.0,
              "minimum": 1.0
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "iterator",
            "description": "The iterator returned from a prior invocation",
            "schema": {
              "description": "The iterator returned from a prior invocation",
              "type": "string",
              "maxLength": 30,
              "minLength": 30,
              "pattern": "^ep_[A-Za-z0-9]{27}$",
              "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
              "nullable": true
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "order",
            "description": "The sorting order of the returned items",
            "schema": {
              "description": "The sorting order of the returned items",
              "$ref": "#/components/schemas/Ordering",
              "nullable": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponse_OperationalWebhookEndpointOut_"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/operational-webhook/endpoint' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n"
          }
        ]
      },
      "post": {
        "tags": [
          "Webhook Endpoint"
        ],
        "summary": "Create Operational Webhook Endpoint",
        "description": "Create an operational webhook endpoint.",
        "operationId": "v1.operational-webhook.endpoint.create",
        "parameters": [
          {
            "in": "header",
            "name": "idempotency-key",
            "description": "The request's idempotency key",
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OperationalWebhookEndpointIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationalWebhookEndpointOut"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/operational-webhook/endpoint' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n \\\n  -d '{\n        \"description\": \"An example endpoint name\",\n        \"rateLimit\": null,\n        \"uid\": \"unique-identifier\",\n        \"url\": \"https://example.com/webhook/\",\n        \"disabled\": false,\n        \"filterTypes\": [\"message.attempt.failing\"],\n        \"secret\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n    }'"
          }
        ]
      }
    },
    "/api/v1/operational-webhook/endpoint/{endpoint_id}": {
      "get": {
        "tags": [
          "Webhook Endpoint"
        ],
        "summary": "Get Operational Webhook Endpoint",
        "description": "Get an operational webhook endpoint.",
        "operationId": "v1.operational-webhook.endpoint.get",
        "parameters": [
          {
            "in": "path",
            "name": "endpoint_id",
            "description": "The Endpoint's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Endpoint's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationalWebhookEndpointOut"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/operational-webhook/endpoint/{endpoint_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n"
          }
        ]
      },
      "put": {
        "tags": [
          "Webhook Endpoint"
        ],
        "summary": "Update Operational Webhook Endpoint",
        "description": "Update an operational webhook endpoint.",
        "operationId": "v1.operational-webhook.endpoint.update",
        "parameters": [
          {
            "in": "path",
            "name": "endpoint_id",
            "description": "The Endpoint's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Endpoint's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OperationalWebhookEndpointUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationalWebhookEndpointOut"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'PUT' \\\n  'https://api.eu.svix.com/api/v1/operational-webhook/endpoint/{endpoint_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n \\\n  -d '{\n        \"description\": \"An example endpoint name\",\n        \"rateLimit\": null,\n        \"uid\": \"unique-identifier\",\n        \"url\": \"https://example.com/webhook/\",\n        \"disabled\": false,\n        \"filterTypes\": [\"message.attempt.failing\"]\n    }'"
          }
        ]
      },
      "delete": {
        "tags": [
          "Webhook Endpoint"
        ],
        "summary": "Delete Operational Webhook Endpoint",
        "description": "Delete an operational webhook endpoint.",
        "operationId": "v1.operational-webhook.endpoint.delete",
        "parameters": [
          {
            "in": "path",
            "name": "endpoint_id",
            "description": "The Endpoint's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Endpoint's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'DELETE' \\\n  'https://api.eu.svix.com/api/v1/operational-webhook/endpoint/{endpoint_id}' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n"
          }
        ]
      }
    },
    "/api/v1/operational-webhook/endpoint/{endpoint_id}/secret": {
      "get": {
        "tags": [
          "Webhook Endpoint"
        ],
        "summary": "Get Operational Webhook Endpoint Secret",
        "description": "Get an operational webhook endpoint's signing secret.\n\nThis is used to verify the authenticity of the webhook.\nFor more information please refer to [the consuming webhooks docs](https://docs.svix.com/consuming-webhooks/).",
        "operationId": "v1.operational-webhook.endpoint.get-secret",
        "parameters": [
          {
            "in": "path",
            "name": "endpoint_id",
            "description": "The Endpoint's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Endpoint's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationalWebhookEndpointSecretOut"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/operational-webhook/endpoint/{endpoint_id}/secret' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n"
          }
        ]
      }
    },
    "/api/v1/operational-webhook/endpoint/{endpoint_id}/secret/rotate": {
      "post": {
        "tags": [
          "Webhook Endpoint"
        ],
        "summary": "Rotate Operational Webhook Endpoint Secret",
        "description": "Rotates an operational webhook endpoint's signing secret.\n\n The previous secret will remain valid for the next 24 hours.",
        "operationId": "v1.operational-webhook.endpoint.rotate-secret",
        "parameters": [
          {
            "in": "path",
            "name": "endpoint_id",
            "description": "The Endpoint's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Endpoint's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "idempotency-key",
            "description": "The request's idempotency key",
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OperationalWebhookEndpointSecretIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "no content"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'POST' \\\n  'https://api.eu.svix.com/api/v1/operational-webhook/endpoint/{endpoint_id}/secret/rotate' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n \\\n  -d '{\n        \"key\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n    }'"
          }
        ]
      }
    },
    "/api/v1/operational-webhook/endpoint/{endpoint_id}/headers": {
      "get": {
        "tags": [
          "Webhook Endpoint"
        ],
        "summary": "Get Operational Webhook Endpoint Headers",
        "description": "Get the additional headers to be sent with the operational webhook.",
        "operationId": "v1.operational-webhook.endpoint.get-headers",
        "parameters": [
          {
            "in": "path",
            "name": "endpoint_id",
            "description": "The Endpoint's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Endpoint's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationalWebhookEndpointHeadersOut"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/operational-webhook/endpoint/{endpoint_id}/headers' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n"
          }
        ]
      },
      "put": {
        "tags": [
          "Webhook Endpoint"
        ],
        "summary": "Update Operational Webhook Endpoint Headers",
        "description": "Set the additional headers to be sent with the operational webhook.",
        "operationId": "v1.operational-webhook.endpoint.update-headers",
        "parameters": [
          {
            "in": "path",
            "name": "endpoint_id",
            "description": "The Endpoint's ID or UID.",
            "required": true,
            "schema": {
              "description": "The Endpoint's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OperationalWebhookEndpointHeadersIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "no content"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'PUT' \\\n  'https://api.eu.svix.com/api/v1/operational-webhook/endpoint/{endpoint_id}/headers' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n \\\n  -d '{\n        \"headers\": {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n    }'"
          }
        ]
      }
    },
    "/api/v1/health": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "Health",
        "description": "Verify the API server is up and running.",
        "operationId": "v1.health.get",
        "responses": {
          "204": {
            "description": "no content"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorOut"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "Shell",
            "source": "curl -X 'GET' \\\n  'https://api.eu.svix.com/api/v1/health' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'\n"
          }
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "HTTPBearer": {
        "type": "http",
        "scheme": "bearer",
        "description": "HTTP Bearer token passed in the `Authorization` header"
      }
    },
    "schemas": {
      "EndpointCreatedEvent": {
        "description": "Sent when an endpoint is created.",
        "type": "object",
        "required": [
          "data",
          "type"
        ],
        "properties": {
          "data": {
            "$ref": "#/components/schemas/EndpointCreatedEventData"
          },
          "type": {
            "default": "endpoint.created",
            "type": "string",
            "enum": [
              "endpoint.created"
            ]
          }
        }
      },
      "EndpointCreatedEventData": {
        "description": "Sent when an endpoint is created, updated, or deleted",
        "type": "object",
        "required": [
          "appId",
          "endpointId"
        ],
        "properties": {
          "appId": {
            "description": "The Application's ID.",
            "type": "string",
            "maxLength": 31,
            "minLength": 31,
            "pattern": "^app_[A-Za-z0-9]{27}$",
            "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2"
          },
          "appUid": {
            "description": "The Application's UID.",
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "endpointId": {
            "description": "The Endpoint's ID.",
            "type": "string",
            "maxLength": 30,
            "minLength": 30,
            "pattern": "^ep_[A-Za-z0-9]{27}$",
            "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2"
          },
          "endpointUid": {
            "description": "The Endpoint's UID.",
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "unique-identifier",
            "nullable": true
          }
        }
      },
      "EndpointDeletedEvent": {
        "description": "Sent when an endpoint is deleted.",
        "type": "object",
        "required": [
          "data",
          "type"
        ],
        "properties": {
          "data": {
            "$ref": "#/components/schemas/EndpointDeletedEventData"
          },
          "type": {
            "default": "endpoint.deleted",
            "type": "string",
            "enum": [
              "endpoint.deleted"
            ]
          }
        }
      },
      "EndpointDeletedEventData": {
        "description": "Sent when an endpoint is created, updated, or deleted",
        "type": "object",
        "required": [
          "appId",
          "endpointId"
        ],
        "properties": {
          "appId": {
            "description": "The Application's ID.",
            "type": "string",
            "maxLength": 31,
            "minLength": 31,
            "pattern": "^app_[A-Za-z0-9]{27}$",
            "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2"
          },
          "appUid": {
            "description": "The Application's UID.",
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "endpointId": {
            "description": "The Endpoint's ID.",
            "type": "string",
            "maxLength": 30,
            "minLength": 30,
            "pattern": "^ep_[A-Za-z0-9]{27}$",
            "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2"
          },
          "endpointUid": {
            "description": "The Endpoint's UID.",
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "unique-identifier",
            "nullable": true
          }
        }
      },
      "EndpointDisabledEvent": {
        "description": "Sent when an endpoint has been automatically disabled after continuous failures, or manually via an API call.",
        "type": "object",
        "required": [
          "data",
          "type"
        ],
        "properties": {
          "data": {
            "$ref": "#/components/schemas/EndpointDisabledEventData"
          },
          "type": {
            "default": "endpoint.disabled",
            "type": "string",
            "enum": [
              "endpoint.disabled"
            ]
          }
        }
      },
      "EndpointDisabledEventData": {
        "description": "Sent when an endpoint has been automatically disabled after continuous failures, or manually via an API call.",
        "type": "object",
        "required": [
          "appId",
          "endpointId"
        ],
        "properties": {
          "appId": {
            "description": "The Application's ID.",
            "type": "string",
            "maxLength": 31,
            "minLength": 31,
            "pattern": "^app_[A-Za-z0-9]{27}$",
            "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2"
          },
          "appUid": {
            "description": "The Application's UID.",
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "endpointId": {
            "description": "The Endpoint's ID.",
            "type": "string",
            "maxLength": 30,
            "minLength": 30,
            "pattern": "^ep_[A-Za-z0-9]{27}$",
            "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2"
          },
          "endpointUid": {
            "description": "The Endpoint's UID.",
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "failSince": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "trigger": {
            "default": "automatic",
            "$ref": "#/components/schemas/EndpointDisabledTrigger"
          }
        }
      },
      "EndpointDisabledTrigger": {
        "type": "string",
        "enum": [
          "manual",
          "automatic"
        ]
      },
      "EndpointEnabledEvent": {
        "description": "Sent when an endpoint has been enabled.",
        "type": "object",
        "required": [
          "data",
          "type"
        ],
        "properties": {
          "data": {
            "$ref": "#/components/schemas/EndpointEnabledEventData"
          },
          "type": {
            "default": "endpoint.enabled",
            "type": "string",
            "enum": [
              "endpoint.enabled"
            ]
          }
        }
      },
      "EndpointEnabledEventData": {
        "description": "Sent when an endpoint has been enabled.",
        "type": "object",
        "required": [
          "appId",
          "endpointId"
        ],
        "properties": {
          "appId": {
            "description": "The Application's ID.",
            "type": "string",
            "maxLength": 31,
            "minLength": 31,
            "pattern": "^app_[A-Za-z0-9]{27}$",
            "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2"
          },
          "appUid": {
            "description": "The Application's UID.",
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "endpointId": {
            "description": "The Endpoint's ID.",
            "type": "string",
            "maxLength": 30,
            "minLength": 30,
            "pattern": "^ep_[A-Za-z0-9]{27}$",
            "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2"
          },
          "endpointUid": {
            "description": "The Endpoint's UID.",
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "unique-identifier",
            "nullable": true
          }
        }
      },
      "EndpointUpdatedEvent": {
        "description": "Sent when an endpoint is updated.",
        "type": "object",
        "required": [
          "data",
          "type"
        ],
        "properties": {
          "data": {
            "$ref": "#/components/schemas/EndpointUpdatedEventData"
          },
          "type": {
            "default": "endpoint.updated",
            "type": "string",
            "enum": [
              "endpoint.updated"
            ]
          }
        }
      },
      "EndpointUpdatedEventData": {
        "description": "Sent when an endpoint is created, updated, or deleted",
        "type": "object",
        "required": [
          "appId",
          "endpointId"
        ],
        "properties": {
          "appId": {
            "description": "The Application's ID.",
            "type": "string",
            "maxLength": 31,
            "minLength": 31,
            "pattern": "^app_[A-Za-z0-9]{27}$",
            "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2"
          },
          "appUid": {
            "description": "The Application's UID.",
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "endpointId": {
            "description": "The Endpoint's ID.",
            "type": "string",
            "maxLength": 30,
            "minLength": 30,
            "pattern": "^ep_[A-Za-z0-9]{27}$",
            "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2"
          },
          "endpointUid": {
            "description": "The Endpoint's UID.",
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "unique-identifier",
            "nullable": true
          }
        }
      },
      "MessageAttemptExhaustedEvent": {
        "description": "Sent when a message delivery has failed (all of the retry attempts have been exhausted).",
        "type": "object",
        "required": [
          "data",
          "type"
        ],
        "properties": {
          "data": {
            "$ref": "#/components/schemas/MessageAttemptExhaustedEventData"
          },
          "type": {
            "default": "message.attempt.exhausted",
            "type": "string",
            "enum": [
              "message.attempt.exhausted"
            ]
          }
        }
      },
      "MessageAttemptExhaustedEventData": {
        "description": "Sent when a message delivery has failed (all of the retry attempts have been exhausted) as a \"message.attempt.exhausted\" type or after it's failed four times as a \"message.attempt.failing\" event.",
        "type": "object",
        "required": [
          "appId",
          "endpointId",
          "lastAttempt",
          "msgId"
        ],
        "properties": {
          "appId": {
            "description": "The Application's ID.",
            "type": "string",
            "maxLength": 31,
            "minLength": 31,
            "pattern": "^app_[A-Za-z0-9]{27}$",
            "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2"
          },
          "appUid": {
            "description": "The Application's UID.",
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "msgId": {
            "description": "The Message's ID.",
            "type": "string",
            "maxLength": 31,
            "minLength": 31,
            "pattern": "^msg_[A-Za-z0-9]{27}$",
            "example": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2"
          },
          "msgEventId": {
            "description": "The Message's UID.",
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "endpointId": {
            "description": "The Endpoint's ID.",
            "type": "string",
            "maxLength": 30,
            "minLength": 30,
            "pattern": "^ep_[A-Za-z0-9]{27}$",
            "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2"
          },
          "lastAttempt": {
            "$ref": "#/components/schemas/MessageAttemptFailedData"
          }
        }
      },
      "MessageAttemptFailedData": {
        "type": "object",
        "required": [
          "id",
          "responseStatusCode",
          "timestamp"
        ],
        "properties": {
          "id": {
            "description": "The MessageAttempt's ID.",
            "type": "string",
            "maxLength": 33,
            "minLength": 33,
            "pattern": "^atmpt_[A-Za-z0-9]{27}$",
            "example": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2"
          },
          "responseStatusCode": {
            "type": "integer",
            "format": "int16"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "MessageAttemptFailingEvent": {
        "description": "Sent after a message has been failing for a few times.\nIt's sent on the fourth failure. It complements `message.attempt.exhausted` which is sent after the last failure.",
        "type": "object",
        "required": [
          "data",
          "type"
        ],
        "properties": {
          "data": {
            "$ref": "#/components/schemas/MessageAttemptFailingEventData"
          },
          "type": {
            "default": "message.attempt.failing",
            "type": "string",
            "enum": [
              "message.attempt.failing"
            ]
          }
        }
      },
      "MessageAttemptFailingEventData": {
        "description": "Sent when a message delivery has failed (all of the retry attempts have been exhausted) as a \"message.attempt.exhausted\" type or after it's failed four times as a \"message.attempt.failing\" event.",
        "type": "object",
        "required": [
          "appId",
          "endpointId",
          "lastAttempt",
          "msgId"
        ],
        "properties": {
          "appId": {
            "description": "The Application's ID.",
            "type": "string",
            "maxLength": 31,
            "minLength": 31,
            "pattern": "^app_[A-Za-z0-9]{27}$",
            "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2"
          },
          "appUid": {
            "description": "The Application's UID.",
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "msgId": {
            "description": "The Message's ID.",
            "type": "string",
            "maxLength": 31,
            "minLength": 31,
            "pattern": "^msg_[A-Za-z0-9]{27}$",
            "example": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2"
          },
          "msgEventId": {
            "description": "The Message's UID.",
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "endpointId": {
            "description": "The Endpoint's ID.",
            "type": "string",
            "maxLength": 30,
            "minLength": 30,
            "pattern": "^ep_[A-Za-z0-9]{27}$",
            "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2"
          },
          "lastAttempt": {
            "$ref": "#/components/schemas/MessageAttemptFailedData"
          }
        }
      },
      "MessageAttemptRecoveredEvent": {
        "description": "Sent on a successful dispatch after an earlier failure op webhook has already been sent.",
        "type": "object",
        "required": [
          "data",
          "type"
        ],
        "properties": {
          "data": {
            "$ref": "#/components/schemas/MessageAttemptRecoveredEventData"
          },
          "type": {
            "default": "message.attempt.recovered",
            "type": "string",
            "enum": [
              "message.attempt.recovered"
            ]
          }
        }
      },
      "MessageAttemptRecoveredEventData": {
        "description": "Sent when a message delivery has failed (all of the retry attempts have been exhausted) as a \"message.attempt.exhausted\" type or after it's failed four times as a \"message.attempt.failing\" event.",
        "type": "object",
        "required": [
          "appId",
          "endpointId",
          "lastAttempt",
          "msgId"
        ],
        "properties": {
          "appId": {
            "description": "The Application's ID.",
            "type": "string",
            "maxLength": 31,
            "minLength": 31,
            "pattern": "^app_[A-Za-z0-9]{27}$",
            "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2"
          },
          "appUid": {
            "description": "The Application's UID.",
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "msgId": {
            "description": "The Message's ID.",
            "type": "string",
            "maxLength": 31,
            "minLength": 31,
            "pattern": "^msg_[A-Za-z0-9]{27}$",
            "example": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2"
          },
          "msgEventId": {
            "description": "The Message's UID.",
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "endpointId": {
            "description": "The Endpoint's ID.",
            "type": "string",
            "maxLength": 30,
            "minLength": 30,
            "pattern": "^ep_[A-Za-z0-9]{27}$",
            "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2"
          },
          "lastAttempt": {
            "$ref": "#/components/schemas/MessageAttemptFailedData"
          }
        }
      },
      "BackgroundTaskFinishedEvent": {
        "description": "Sent when a background task is finished.",
        "type": "object",
        "required": [
          "data",
          "type"
        ],
        "properties": {
          "data": {
            "$ref": "#/components/schemas/BackgroundTaskFinishedEvent2"
          },
          "type": {
            "default": "background_task.finished",
            "type": "string",
            "enum": [
              "background_task.finished"
            ]
          }
        }
      },
      "BackgroundTaskFinishedEvent2": {
        "type": "object",
        "required": [
          "data",
          "status",
          "task",
          "taskId"
        ],
        "properties": {
          "taskId": {
            "description": "The QueueBackgroundTask's ID.",
            "type": "string",
            "maxLength": 33,
            "minLength": 33,
            "pattern": "^qtask_[A-Za-z0-9]{27}$",
            "example": "qtask_1srOrx2ZWZBpBUvZwXKQmoEYga2"
          },
          "task": {
            "$ref": "#/components/schemas/BackgroundTaskType"
          },
          "status": {
            "$ref": "#/components/schemas/BackgroundTaskStatus"
          },
          "data": {
            "$ref": "#/components/schemas/Data"
          }
        }
      },
      "BackgroundTaskType": {
        "type": "string",
        "enum": [
          "endpoint.replay",
          "endpoint.recover",
          "application.stats",
          "message.broadcast",
          "sdk.generate",
          "event-type.aggregate",
          "application.purge_content"
        ]
      },
      "BackgroundTaskStatus": {
        "type": "string",
        "enum": [
          "running",
          "finished",
          "failed"
        ]
      },
      "Data": {
        "description": "A copy of [`backgroundtask::Data`], but serialized with camelCase fields for customers.",
        "anyOf": [
          {
            "type": "object",
            "required": [
              "messages_sent"
            ],
            "properties": {
              "messages_sent": {
                "type": "integer",
                "format": "uint",
                "minimum": 0.0
              }
            }
          },
          {
            "type": "object",
            "required": [
              "messages_sent"
            ],
            "properties": {
              "messages_sent": {
                "type": "integer",
                "format": "uint",
                "minimum": 0.0
              }
            }
          },
          {
            "type": "object",
            "required": [
              "app_stats"
            ],
            "properties": {
              "app_stats": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ApplicationStatsOut"
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "messages_created",
              "messages_failed"
            ],
            "properties": {
              "messages_created": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ApplicationMessageIdPair"
                }
              },
              "messages_failed": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ApplicationMessageFailure"
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "event_types"
            ],
            "properties": {
              "event_types": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AggregatedEventTypes"
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "messages_purged"
            ],
            "properties": {
              "messages_purged": {
                "type": "integer",
                "format": "uint",
                "minimum": 0.0
              }
            }
          }
        ]
      },
      "ApplicationStatsOut": {
        "description": "A copy of  [`backgroundtask::ApplicationStats`], but serialized with camelCase fields for customers.",
        "type": "object",
        "required": [
          "appId",
          "messageDestinations"
        ],
        "properties": {
          "messageDestinations": {
            "type": "integer",
            "format": "int64"
          },
          "appId": {
            "description": "The Application's ID.",
            "type": "string",
            "maxLength": 31,
            "minLength": 31,
            "pattern": "^app_[A-Za-z0-9]{27}$",
            "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2"
          },
          "appUid": {
            "description": "The Application's UID.",
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "unique-identifier",
            "nullable": true
          }
        }
      },
      "ApplicationMessageIdPair": {
        "type": "object",
        "required": [
          "appId",
          "msgId"
        ],
        "properties": {
          "appId": {
            "description": "The Application's ID.",
            "type": "string",
            "maxLength": 31,
            "minLength": 31,
            "pattern": "^app_[A-Za-z0-9]{27}$",
            "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2"
          },
          "msgId": {
            "description": "The Message's ID.",
            "type": "string",
            "maxLength": 31,
            "minLength": 31,
            "pattern": "^msg_[A-Za-z0-9]{27}$",
            "example": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2"
          }
        }
      },
      "ApplicationMessageFailure": {
        "type": "object",
        "required": [
          "appId",
          "reason"
        ],
        "properties": {
          "appId": {
            "description": "The Application's ID.",
            "type": "string",
            "maxLength": 31,
            "minLength": 31,
            "pattern": "^app_[A-Za-z0-9]{27}$",
            "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2"
          },
          "reason": {
            "type": "string"
          }
        }
      },
      "AggregatedEventTypes": {
        "type": "object",
        "required": [
          "appId",
          "explicitlySubscribedEventTypes",
          "hasCatchAllEndpoint"
        ],
        "properties": {
          "appId": {
            "description": "The Application's ID.",
            "type": "string",
            "maxLength": 31,
            "minLength": 31,
            "pattern": "^app_[A-Za-z0-9]{27}$",
            "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2"
          },
          "explicitlySubscribedEventTypes": {
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            },
            "uniqueItems": true
          },
          "hasCatchAllEndpoint": {
            "type": "boolean"
          }
        }
      },
      "Ordering": {
        "description": "Defines the ordering in a listing of results.",
        "type": "string",
        "enum": [
          "ascending",
          "descending"
        ]
      },
      "ListResponse_IngestSourceOut_": {
        "type": "object",
        "required": [
          "data",
          "done",
          "iterator"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IngestSourceOut"
            }
          },
          "iterator": {
            "type": "string",
            "nullable": true,
            "example": "iterator"
          },
          "prevIterator": {
            "type": "string",
            "nullable": true,
            "example": "-iterator"
          },
          "done": {
            "type": "boolean"
          }
        }
      },
      "IngestSourceOut": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/IngestSourceOut_generic-webhook"
          },
          {
            "$ref": "#/components/schemas/IngestSourceOut_cron"
          },
          {
            "$ref": "#/components/schemas/IngestSourceOut_adobe-sign"
          },
          {
            "$ref": "#/components/schemas/IngestSourceOut_beehiiv"
          },
          {
            "$ref": "#/components/schemas/IngestSourceOut_brex"
          },
          {
            "$ref": "#/components/schemas/IngestSourceOut_clerk"
          },
          {
            "$ref": "#/components/schemas/IngestSourceOut_docusign"
          },
          {
            "$ref": "#/components/schemas/IngestSourceOut_github"
          },
          {
            "$ref": "#/components/schemas/IngestSourceOut_guesty"
          },
          {
            "$ref": "#/components/schemas/IngestSourceOut_hubspot"
          },
          {
            "$ref": "#/components/schemas/IngestSourceOut_incident-io"
          },
          {
            "$ref": "#/components/schemas/IngestSourceOut_lithic"
          },
          {
            "$ref": "#/components/schemas/IngestSourceOut_nash"
          },
          {
            "$ref": "#/components/schemas/IngestSourceOut_pleo"
          },
          {
            "$ref": "#/components/schemas/IngestSourceOut_replicate"
          },
          {
            "$ref": "#/components/schemas/IngestSourceOut_resend"
          },
          {
            "$ref": "#/components/schemas/IngestSourceOut_safebase"
          },
          {
            "$ref": "#/components/schemas/IngestSourceOut_sardine"
          },
          {
            "$ref": "#/components/schemas/IngestSourceOut_segment"
          },
          {
            "$ref": "#/components/schemas/IngestSourceOut_shopify"
          },
          {
            "$ref": "#/components/schemas/IngestSourceOut_slack"
          },
          {
            "$ref": "#/components/schemas/IngestSourceOut_stripe"
          },
          {
            "$ref": "#/components/schemas/IngestSourceOut_stych"
          },
          {
            "$ref": "#/components/schemas/IngestSourceOut_svix"
          },
          {
            "$ref": "#/components/schemas/IngestSourceOut_zoom"
          }
        ],
        "required": [
          "createdAt",
          "id",
          "name",
          "updatedAt"
        ],
        "properties": {
          "id": {
            "description": "The Source's ID.",
            "type": "string",
            "maxLength": 26,
            "minLength": 26,
            "pattern": "^src_[A-Za-z0-9]{22}$",
            "example": "src_2yZwUhtgs5Ai8T9yRQJXA"
          },
          "uid": {
            "description": "The Source's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!src_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "ingestUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "discriminator": {
          "mapping": {
            "adobe-sign": "#/components/schemas/IngestSourceOut_adobe-sign",
            "beehiiv": "#/components/schemas/IngestSourceOut_beehiiv",
            "brex": "#/components/schemas/IngestSourceOut_brex",
            "clerk": "#/components/schemas/IngestSourceOut_clerk",
            "cron": "#/components/schemas/IngestSourceOut_cron",
            "docusign": "#/components/schemas/IngestSourceOut_docusign",
            "generic-webhook": "#/components/schemas/IngestSourceOut_generic-webhook",
            "github": "#/components/schemas/IngestSourceOut_github",
            "guesty": "#/components/schemas/IngestSourceOut_guesty",
            "hubspot": "#/components/schemas/IngestSourceOut_hubspot",
            "incident-io": "#/components/schemas/IngestSourceOut_incident-io",
            "lithic": "#/components/schemas/IngestSourceOut_lithic",
            "nash": "#/components/schemas/IngestSourceOut_nash",
            "pleo": "#/components/schemas/IngestSourceOut_pleo",
            "replicate": "#/components/schemas/IngestSourceOut_replicate",
            "resend": "#/components/schemas/IngestSourceOut_resend",
            "safebase": "#/components/schemas/IngestSourceOut_safebase",
            "sardine": "#/components/schemas/IngestSourceOut_sardine",
            "segment": "#/components/schemas/IngestSourceOut_segment",
            "shopify": "#/components/schemas/IngestSourceOut_shopify",
            "slack": "#/components/schemas/IngestSourceOut_slack",
            "stripe": "#/components/schemas/IngestSourceOut_stripe",
            "stych": "#/components/schemas/IngestSourceOut_stych",
            "svix": "#/components/schemas/IngestSourceOut_svix",
            "zoom": "#/components/schemas/IngestSourceOut_zoom"
          },
          "propertyName": "type"
        }
      },
      "CronConfig": {
        "type": "object",
        "required": [
          "payload",
          "schedule"
        ],
        "properties": {
          "schedule": {
            "type": "string"
          },
          "payload": {
            "type": "string"
          },
          "contentType": {
            "description": "Override the default content-type.\n\nRecommended if the payload is not JSON.",
            "type": "string",
            "nullable": true
          }
        }
      },
      "AdobeSignConfigOut": {
        "type": "object"
      },
      "SvixConfigOut": {
        "type": "object"
      },
      "DocusignConfigOut": {
        "type": "object"
      },
      "GithubConfigOut": {
        "type": "object"
      },
      "HubspotConfigOut": {
        "type": "object"
      },
      "SegmentConfigOut": {
        "type": "object"
      },
      "ShopifyConfigOut": {
        "type": "object"
      },
      "SlackConfigOut": {
        "type": "object"
      },
      "StripeConfigOut": {
        "type": "object"
      },
      "ZoomConfigOut": {
        "type": "object"
      },
      "HttpErrorOut": {
        "title": "HttpError",
        "type": "object",
        "required": [
          "code",
          "detail"
        ],
        "properties": {
          "code": {
            "type": "string"
          },
          "detail": {
            "type": "string"
          }
        }
      },
      "HTTPValidationError": {
        "type": "object",
        "required": [
          "detail"
        ],
        "properties": {
          "detail": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "ValidationError": {
        "description": "Validation errors have their own schema to provide context for invalid requests eg. mismatched types and out of bounds values. There may be any number of these per 422 UNPROCESSABLE ENTITY error.",
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "properties": {
          "loc": {
            "description": "The location as a [`Vec`] of [`String`]s -- often in the form `[\"body\", \"field_name\"]`, `[\"query\", \"field_name\"]`, etc. They may, however, be arbitrarily deep.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "msg": {
            "description": "The message accompanying the validation error item.",
            "type": "string"
          },
          "type": {
            "description": "The type of error, often \"type_error\" or \"value_error\", but sometimes with more context like as \"value_error.number.not_ge\"",
            "type": "string"
          }
        }
      },
      "IngestSourceIn": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/IngestSourceIn_generic-webhook"
          },
          {
            "$ref": "#/components/schemas/IngestSourceIn_cron"
          },
          {
            "$ref": "#/components/schemas/IngestSourceIn_adobe-sign"
          },
          {
            "$ref": "#/components/schemas/IngestSourceIn_beehiiv"
          },
          {
            "$ref": "#/components/schemas/IngestSourceIn_brex"
          },
          {
            "$ref": "#/components/schemas/IngestSourceIn_clerk"
          },
          {
            "$ref": "#/components/schemas/IngestSourceIn_docusign"
          },
          {
            "$ref": "#/components/schemas/IngestSourceIn_github"
          },
          {
            "$ref": "#/components/schemas/IngestSourceIn_guesty"
          },
          {
            "$ref": "#/components/schemas/IngestSourceIn_hubspot"
          },
          {
            "$ref": "#/components/schemas/IngestSourceIn_incident-io"
          },
          {
            "$ref": "#/components/schemas/IngestSourceIn_lithic"
          },
          {
            "$ref": "#/components/schemas/IngestSourceIn_nash"
          },
          {
            "$ref": "#/components/schemas/IngestSourceIn_pleo"
          },
          {
            "$ref": "#/components/schemas/IngestSourceIn_replicate"
          },
          {
            "$ref": "#/components/schemas/IngestSourceIn_resend"
          },
          {
            "$ref": "#/components/schemas/IngestSourceIn_safebase"
          },
          {
            "$ref": "#/components/schemas/IngestSourceIn_sardine"
          },
          {
            "$ref": "#/components/schemas/IngestSourceIn_segment"
          },
          {
            "$ref": "#/components/schemas/IngestSourceIn_shopify"
          },
          {
            "$ref": "#/components/schemas/IngestSourceIn_slack"
          },
          {
            "$ref": "#/components/schemas/IngestSourceIn_stripe"
          },
          {
            "$ref": "#/components/schemas/IngestSourceIn_stych"
          },
          {
            "$ref": "#/components/schemas/IngestSourceIn_svix"
          },
          {
            "$ref": "#/components/schemas/IngestSourceIn_zoom"
          }
        ],
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 256,
            "minLength": 2
          },
          "uid": {
            "description": "The Source's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!src_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          }
        },
        "discriminator": {
          "mapping": {
            "adobe-sign": "#/components/schemas/IngestSourceIn_adobe-sign",
            "beehiiv": "#/components/schemas/IngestSourceIn_beehiiv",
            "brex": "#/components/schemas/IngestSourceIn_brex",
            "clerk": "#/components/schemas/IngestSourceIn_clerk",
            "cron": "#/components/schemas/IngestSourceIn_cron",
            "docusign": "#/components/schemas/IngestSourceIn_docusign",
            "generic-webhook": "#/components/schemas/IngestSourceIn_generic-webhook",
            "github": "#/components/schemas/IngestSourceIn_github",
            "guesty": "#/components/schemas/IngestSourceIn_guesty",
            "hubspot": "#/components/schemas/IngestSourceIn_hubspot",
            "incident-io": "#/components/schemas/IngestSourceIn_incident-io",
            "lithic": "#/components/schemas/IngestSourceIn_lithic",
            "nash": "#/components/schemas/IngestSourceIn_nash",
            "pleo": "#/components/schemas/IngestSourceIn_pleo",
            "replicate": "#/components/schemas/IngestSourceIn_replicate",
            "resend": "#/components/schemas/IngestSourceIn_resend",
            "safebase": "#/components/schemas/IngestSourceIn_safebase",
            "sardine": "#/components/schemas/IngestSourceIn_sardine",
            "segment": "#/components/schemas/IngestSourceIn_segment",
            "shopify": "#/components/schemas/IngestSourceIn_shopify",
            "slack": "#/components/schemas/IngestSourceIn_slack",
            "stripe": "#/components/schemas/IngestSourceIn_stripe",
            "stych": "#/components/schemas/IngestSourceIn_stych",
            "svix": "#/components/schemas/IngestSourceIn_svix",
            "zoom": "#/components/schemas/IngestSourceIn_zoom"
          },
          "propertyName": "type"
        }
      },
      "AdobeSignConfig": {
        "type": "object",
        "required": [
          "clientId"
        ],
        "properties": {
          "clientId": {
            "type": "string"
          }
        }
      },
      "SvixConfig": {
        "type": "object",
        "required": [
          "secret"
        ],
        "properties": {
          "secret": {
            "type": "string"
          }
        }
      },
      "DocusignConfig": {
        "type": "object",
        "properties": {
          "secret": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "GithubConfig": {
        "type": "object",
        "properties": {
          "secret": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "HubspotConfig": {
        "type": "object",
        "properties": {
          "secret": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "SegmentConfig": {
        "type": "object",
        "properties": {
          "secret": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ShopifyConfig": {
        "type": "object",
        "required": [
          "secret"
        ],
        "properties": {
          "secret": {
            "type": "string"
          }
        }
      },
      "SlackConfig": {
        "type": "object",
        "required": [
          "secret"
        ],
        "properties": {
          "secret": {
            "type": "string"
          }
        }
      },
      "StripeConfig": {
        "type": "object",
        "required": [
          "secret"
        ],
        "properties": {
          "secret": {
            "type": "string"
          }
        }
      },
      "ZoomConfig": {
        "type": "object",
        "required": [
          "secret"
        ],
        "properties": {
          "secret": {
            "type": "string"
          }
        }
      },
      "RotateTokenOut": {
        "type": "object",
        "required": [
          "ingestUrl"
        ],
        "properties": {
          "ingestUrl": {
            "type": "string"
          }
        }
      },
      "IngestSourceConsumerPortalAccessIn": {
        "type": "object",
        "properties": {
          "expiry": {
            "description": "How long the token will be valid for, in seconds.\n\nValid values are between 1 hour and 7 days. The default is 7 days.",
            "type": "integer",
            "format": "uint64",
            "maximum": 604800.0,
            "minimum": 3600.0,
            "nullable": true
          },
          "readOnly": {
            "description": "Whether the app portal should be in read-only mode.",
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "DashboardAccessOut": {
        "type": "object",
        "required": [
          "token",
          "url"
        ],
        "properties": {
          "url": {
            "type": "string",
            "format": "uri",
            "maxLength": 65536,
            "minLength": 1,
            "example": "https://app.svix.com/login#key=eyJhcHBJZCI6ICJhcHBfMXRSdFl"
          },
          "token": {
            "type": "string",
            "example": "appsk_kV3ts5tKPNJN4Dl25cMTfUNdmabxbX0O"
          }
        }
      },
      "ListResponse_IngestLogOut_": {
        "type": "object",
        "required": [
          "data",
          "done",
          "iterator"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IngestLogOut"
            }
          },
          "iterator": {
            "type": "string",
            "nullable": true,
            "example": "iterator"
          },
          "prevIterator": {
            "type": "string",
            "nullable": true,
            "example": "-iterator"
          },
          "done": {
            "type": "boolean"
          }
        }
      },
      "IngestLogOut": {
        "type": "object",
        "required": [
          "created_at",
          "error_text",
          "headers",
          "id",
          "payload",
          "source_id",
          "status_code",
          "updated_at"
        ],
        "properties": {
          "id": {
            "description": "The ErrorLog's ID.",
            "type": "string",
            "maxLength": 25,
            "minLength": 25,
            "pattern": "^log[A-Za-z0-9]{22}$",
            "example": "log2yZwUhtgs5Ai8T9yRQJXA"
          },
          "source_id": {
            "description": "The Source's ID.",
            "type": "string",
            "maxLength": 26,
            "minLength": 26,
            "pattern": "^src_[A-Za-z0-9]{22}$",
            "example": "src_2yZwUhtgs5Ai8T9yRQJXA"
          },
          "status_code": {
            "type": "integer",
            "format": "int16"
          },
          "error_text": {
            "type": "string"
          },
          "headers": {
            "$ref": "#/components/schemas/IngestHeaders"
          },
          "payload": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "IngestHeaders": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        }
      },
      "ListResponse_IngestEndpointOut_": {
        "type": "object",
        "required": [
          "data",
          "done",
          "iterator"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IngestEndpointOut"
            }
          },
          "iterator": {
            "type": "string",
            "nullable": true,
            "example": "iterator"
          },
          "prevIterator": {
            "type": "string",
            "nullable": true,
            "example": "-iterator"
          },
          "done": {
            "type": "boolean"
          }
        }
      },
      "IngestEndpointOut": {
        "type": "object",
        "required": [
          "createdAt",
          "description",
          "id",
          "metadata",
          "updatedAt",
          "url"
        ],
        "properties": {
          "id": {
            "description": "The Endpoint's ID.",
            "type": "string",
            "maxLength": 30,
            "minLength": 30,
            "pattern": "^ep_[A-Za-z0-9]{27}$",
            "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2"
          },
          "description": {
            "description": "An example endpoint name.",
            "type": "string"
          },
          "rateLimit": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0.0,
            "nullable": true
          },
          "uid": {
            "description": "Optional unique identifier for the endpoint.",
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "maxLength": 65536,
            "minLength": 1,
            "example": "https://example.com/webhook/"
          },
          "disabled": {
            "default": false,
            "type": "boolean",
            "example": false
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "IngestEndpointIn": {
        "type": "object",
        "required": [
          "url"
        ],
        "properties": {
          "description": {
            "default": "",
            "type": "string",
            "example": "An example endpoint name"
          },
          "rateLimit": {
            "type": "integer",
            "format": "uint16",
            "minimum": 1.0,
            "nullable": true
          },
          "uid": {
            "description": "Optional unique identifier for the endpoint.",
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "maxLength": 65536,
            "minLength": 1,
            "example": "https://example.com/webhook/"
          },
          "disabled": {
            "default": false,
            "type": "boolean",
            "example": false
          },
          "secret": {
            "description": "The endpoint's verification secret.\n\nFormat: `base64` encoded random bytes optionally prefixed with `whsec_`.\nIt is recommended to not set this and let the server generate the secret.",
            "type": "string",
            "pattern": "^(whsec_)?[a-zA-Z0-9+/=]{32,100}$",
            "example": "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD",
            "nullable": true
          },
          "metadata": {
            "default": {},
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "IngestEndpointUpdate": {
        "type": "object",
        "required": [
          "url"
        ],
        "properties": {
          "description": {
            "default": "",
            "type": "string",
            "example": "An example endpoint name"
          },
          "rateLimit": {
            "type": "integer",
            "format": "uint16",
            "minimum": 1.0,
            "nullable": true
          },
          "uid": {
            "description": "Optional unique identifier for the endpoint.",
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "maxLength": 65536,
            "minLength": 1,
            "example": "https://example.com/webhook/"
          },
          "disabled": {
            "default": false,
            "type": "boolean",
            "example": false
          },
          "metadata": {
            "default": {},
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "IngestEndpointSecretOut": {
        "type": "object",
        "required": [
          "key"
        ],
        "properties": {
          "key": {
            "description": "The endpoint's verification secret.\n\nFormat: `base64` encoded random bytes optionally prefixed with `whsec_`.\nIt is recommended to not set this and let the server generate the secret.",
            "type": "string",
            "pattern": "^(whsec_)?[a-zA-Z0-9+/=]{32,100}$",
            "example": "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD"
          }
        }
      },
      "IngestEndpointSecretIn": {
        "type": "object",
        "properties": {
          "key": {
            "description": "The endpoint's verification secret.\n\nFormat: `base64` encoded random bytes optionally prefixed with `whsec_`.\nIt is recommended to not set this and let the server generate the secret.",
            "default": null,
            "type": "string",
            "pattern": "^(whsec_)?[a-zA-Z0-9+/=]{32,100}$",
            "example": "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD",
            "nullable": true
          }
        }
      },
      "IngestEndpointHeadersOut": {
        "type": "object",
        "required": [
          "headers",
          "sensitive"
        ],
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "example": {
              "X-Example": "123",
              "X-Foobar": "Bar"
            }
          },
          "sensitive": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "uniqueItems": true,
            "example": [
              "Authorization"
            ]
          }
        }
      },
      "IngestEndpointHeadersIn": {
        "type": "object",
        "required": [
          "headers"
        ],
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "example": {
              "X-Example": "123",
              "X-Foobar": "Bar"
            }
          }
        }
      },
      "IngestResponse": {
        "description": "Some providers need to generate responses to incoming ingest requests.",
        "anyOf": [
          {
            "type": "array",
            "items": [
              {
                "description": "The IngestMessageUid's ID.",
                "type": "string",
                "maxLength": 31,
                "minLength": 31,
                "pattern": "^whk_[A-Za-z0-9]{27}$",
                "example": "whk_1srOrx2ZWZBpBUvZwXKQmoEYga2"
              },
              {
                "description": "The Application's UID.",
                "type": "string",
                "maxLength": 256,
                "minLength": 1,
                "pattern": "^[a-zA-Z0-9\\-_.]+$",
                "example": "unique-identifier"
              }
            ],
            "maxItems": 2,
            "minItems": 2
          },
          {
            "$ref": "#/components/schemas/ZoomCrcResponse"
          },
          {
            "$ref": "#/components/schemas/SlackChallengeResponse"
          },
          {
            "$ref": "#/components/schemas/AdobeSignResponse"
          }
        ]
      },
      "ZoomCrcResponse": {
        "type": "object",
        "required": [
          "encryptedToken",
          "plainToken"
        ],
        "properties": {
          "plainToken": {
            "type": "string"
          },
          "encryptedToken": {
            "type": "string"
          }
        }
      },
      "SlackChallengeResponse": {
        "type": "object",
        "required": [
          "challenge"
        ],
        "properties": {
          "challenge": {
            "type": "string"
          }
        }
      },
      "AdobeSignResponse": {
        "type": "object",
        "required": [
          "xAdobeSignClientId"
        ],
        "properties": {
          "xAdobeSignClientId": {
            "type": "string"
          }
        }
      },
      "IngestPathWithToken": {
        "type": "object",
        "required": [
          "source_id",
          "token"
        ],
        "properties": {
          "source_id": {
            "description": "The Source's ID.",
            "type": "string",
            "maxLength": 26,
            "minLength": 26,
            "pattern": "^src_[A-Za-z0-9]{22}$",
            "example": "src_2yZwUhtgs5Ai8T9yRQJXA"
          },
          "token": {
            "type": "string",
            "maxLength": 16,
            "minLength": 16,
            "pattern": "^[A-Za-z0-9]+$"
          }
        }
      },
      "AppPortalAccessIn": {
        "type": "object",
        "properties": {
          "application": {
            "description": "Optionally creates a new application while generating the access link.\n\nIf the application id or uid that is used in the path already exists, this argument is ignored.",
            "$ref": "#/components/schemas/ApplicationIn",
            "nullable": true
          },
          "featureFlags": {
            "description": "The set of feature flags the created token will have access to.",
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "cool-new-feature"
            },
            "maxItems": 25,
            "minItems": 1,
            "uniqueItems": true,
            "example": []
          },
          "expiry": {
            "description": "How long the token will be valid for, in seconds.\n\nValid values are between 1 hour and 7 days. The default is 7 days.",
            "default": 604800,
            "type": "integer",
            "format": "uint64",
            "maximum": 604800.0,
            "minimum": 3600.0,
            "nullable": true
          },
          "readOnly": {
            "description": "Whether the app portal should be in read-only mode.",
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "ApplicationIn": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "example": "My first application"
          },
          "rateLimit": {
            "type": "integer",
            "format": "uint16",
            "minimum": 1.0,
            "nullable": true
          },
          "uid": {
            "description": "Optional unique identifier for the application.",
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "metadata": {
            "default": {},
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "AppPortalAccessOut": {
        "type": "object",
        "required": [
          "token",
          "url"
        ],
        "properties": {
          "url": {
            "type": "string",
            "format": "uri",
            "maxLength": 65536,
            "minLength": 1,
            "example": "https://app.svix.com/login#key=eyJhcHBJZCI6ICJhcHBfMXRSdFl"
          },
          "token": {
            "type": "string",
            "example": "appsk_kV3ts5tKPNJN4Dl25cMTfUNdmabxbX0O"
          }
        }
      },
      "ApplicationTokenExpireIn": {
        "type": "object",
        "properties": {
          "expiry": {
            "description": "How many seconds until the old key is expired.",
            "type": "integer",
            "format": "int64",
            "maximum": 259200.0,
            "minimum": 0.0,
            "nullable": true,
            "example": 60
          }
        }
      },
      "CreateTokenIn": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "The name of the token.",
            "type": "string"
          },
          "expiry": {
            "description": "How long the token will be valid for, in seconds.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0,
            "nullable": true
          }
        }
      },
      "ApiTokenOut": {
        "type": "object",
        "required": [
          "createdAt",
          "id",
          "token"
        ],
        "properties": {
          "token": {
            "type": "string"
          },
          "id": {
            "description": "The ApplicationToken's ID.",
            "type": "string",
            "maxLength": 31,
            "minLength": 31,
            "pattern": "^key_[A-Za-z0-9]{27}$",
            "example": "key_1srOrx2ZWZBpBUvZwXKQmoEYga2"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        }
      },
      "StreamPortalAccessIn": {
        "type": "object",
        "properties": {
          "featureFlags": {
            "description": "The set of feature flags the created token will have access to.",
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "cool-new-feature"
            },
            "maxItems": 25,
            "minItems": 1,
            "uniqueItems": true,
            "example": []
          },
          "expiry": {
            "description": "How long the token will be valid for, in seconds.\n\nValid values are between 1 hour and 7 days. The default is 7 days.",
            "default": 604800,
            "type": "integer",
            "format": "uint64",
            "maximum": 604800.0,
            "minimum": 3600.0,
            "nullable": true
          },
          "readOnly": {
            "description": "Whether the app portal should be in read-only mode.",
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "RotatePollerTokenIn": {
        "type": "object",
        "properties": {
          "expiry": {
            "description": "How long the token will be valid for, in seconds. Can be up to 31,536,000 seconds (1 year).",
            "type": "integer",
            "format": "int64",
            "maximum": 31536000.0,
            "minimum": 1.0,
            "nullable": true
          },
          "oldTokenExpiry": {
            "description": "Updates the previous token's expiration, in seconds.\n\nIf set to 0, the old token will immediately be revoked. Must be between 0 and 86,400 seconds (1 day).\n\nDefaults to 300 seconds (5 minutes).",
            "default": 300,
            "type": "integer",
            "format": "int64",
            "maximum": 86400.0,
            "minimum": 0.0
          }
        }
      },
      "ApplicationOut": {
        "type": "object",
        "required": [
          "createdAt",
          "id",
          "metadata",
          "name",
          "updatedAt"
        ],
        "properties": {
          "uid": {
            "description": "The Application's UID.",
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "name": {
            "type": "string",
            "example": "My first application"
          },
          "rateLimit": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0.0,
            "nullable": true
          },
          "id": {
            "description": "The Application's ID.",
            "type": "string",
            "maxLength": 31,
            "minLength": 31,
            "pattern": "^app_[A-Za-z0-9]{27}$",
            "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "ListResponse_ApplicationOut_": {
        "type": "object",
        "required": [
          "data",
          "done",
          "iterator"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationOut"
            }
          },
          "iterator": {
            "type": "string",
            "nullable": true,
            "example": "iterator"
          },
          "prevIterator": {
            "type": "string",
            "nullable": true,
            "example": "-iterator"
          },
          "done": {
            "type": "boolean"
          }
        }
      },
      "ApplicationPatch": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "rateLimit": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0.0,
            "nullable": true
          },
          "uid": {
            "description": "The Application's UID.",
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "ListResponse_ActiveApplicationOut_": {
        "type": "object",
        "required": [
          "data",
          "done",
          "iterator"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActiveApplicationOut"
            }
          },
          "iterator": {
            "type": "string",
            "nullable": true,
            "example": "iterator"
          },
          "prevIterator": {
            "type": "string",
            "nullable": true,
            "example": "-iterator"
          },
          "done": {
            "type": "boolean"
          }
        }
      },
      "ActiveApplicationOut": {
        "type": "object",
        "required": [
          "createdAt",
          "endpoints",
          "id",
          "name",
          "updatedAt"
        ],
        "properties": {
          "uid": {
            "description": "The Application's UID.",
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "name": {
            "type": "string",
            "example": "My first application"
          },
          "id": {
            "description": "The Application's ID.",
            "type": "string",
            "maxLength": 31,
            "minLength": 31,
            "pattern": "^app_[A-Za-z0-9]{27}$",
            "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "endpoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActiveEndpointOut"
            }
          }
        }
      },
      "ActiveEndpointOut": {
        "type": "object",
        "required": [
          "createdAt",
          "id",
          "updatedAt",
          "url"
        ],
        "properties": {
          "id": {
            "description": "The Endpoint's ID.",
            "type": "string",
            "maxLength": 30,
            "minLength": 30,
            "pattern": "^ep_[A-Za-z0-9]{27}$",
            "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "uid": {
            "description": "The Endpoint's UID.",
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "url": {
            "type": "string",
            "format": "uri"
          }
        }
      },
      "EndpointIn": {
        "type": "object",
        "required": [
          "url"
        ],
        "properties": {
          "description": {
            "default": "",
            "type": "string",
            "example": "An example endpoint name"
          },
          "rateLimit": {
            "type": "integer",
            "format": "uint16",
            "minimum": 1.0,
            "nullable": true
          },
          "uid": {
            "description": "Optional unique identifier for the endpoint.",
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "maxLength": 65536,
            "minLength": 1,
            "example": "https://example.com/webhook/"
          },
          "disabled": {
            "default": false,
            "type": "boolean",
            "example": false
          },
          "filterTypes": {
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            },
            "minItems": 1,
            "uniqueItems": true,
            "nullable": true,
            "example": [
              "user.signup",
              "user.deleted"
            ]
          },
          "channels": {
            "description": "List of message channels this endpoint listens to (omit for all).",
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 128,
              "pattern": "^[a-zA-Z0-9\\-_.:]+$",
              "example": "project_1337"
            },
            "maxItems": 10,
            "minItems": 1,
            "uniqueItems": true,
            "nullable": true,
            "example": [
              "project_123",
              "group_2"
            ]
          },
          "secret": {
            "description": "The endpoint's verification secret.\n\nFormat: `base64` encoded random bytes optionally prefixed with `whsec_`.\nIt is recommended to not set this and let the server generate the secret.",
            "type": "string",
            "pattern": "^(whsec_)?[a-zA-Z0-9+/=]{32,100}$",
            "example": "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD",
            "nullable": true
          },
          "metadata": {
            "default": {},
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true,
            "example": {
              "X-Example": "123",
              "X-Foobar": "Bar"
            }
          }
        }
      },
      "EndpointOut": {
        "type": "object",
        "required": [
          "createdAt",
          "description",
          "id",
          "metadata",
          "updatedAt",
          "url"
        ],
        "properties": {
          "id": {
            "description": "The Endpoint's ID.",
            "type": "string",
            "maxLength": 30,
            "minLength": 30,
            "pattern": "^ep_[A-Za-z0-9]{27}$",
            "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "description": {
            "description": "An example endpoint name.",
            "type": "string"
          },
          "rateLimit": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0.0,
            "nullable": true
          },
          "uid": {
            "description": "Optional unique identifier for the endpoint.",
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "maxLength": 65536,
            "minLength": 1,
            "example": "https://example.com/webhook/"
          },
          "disabled": {
            "default": false,
            "type": "boolean",
            "example": false
          },
          "filterTypes": {
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            },
            "minItems": 1,
            "uniqueItems": true,
            "nullable": true,
            "example": [
              "user.signup",
              "user.deleted"
            ]
          },
          "channels": {
            "description": "List of message channels this endpoint listens to (omit for all).",
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 128,
              "pattern": "^[a-zA-Z0-9\\-_.:]+$",
              "example": "project_1337"
            },
            "maxItems": 10,
            "minItems": 1,
            "uniqueItems": true,
            "nullable": true,
            "example": [
              "project_123",
              "group_2"
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ListResponse_EndpointOut_": {
        "type": "object",
        "required": [
          "data",
          "done",
          "iterator"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EndpointOut"
            }
          },
          "iterator": {
            "type": "string",
            "nullable": true,
            "example": "iterator"
          },
          "prevIterator": {
            "type": "string",
            "nullable": true,
            "example": "-iterator"
          },
          "done": {
            "type": "boolean"
          }
        }
      },
      "EndpointUpdate": {
        "type": "object",
        "required": [
          "url"
        ],
        "properties": {
          "description": {
            "default": "",
            "type": "string",
            "example": "An example endpoint name"
          },
          "rateLimit": {
            "type": "integer",
            "format": "uint16",
            "minimum": 1.0,
            "nullable": true
          },
          "uid": {
            "description": "Optional unique identifier for the endpoint.",
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "maxLength": 65536,
            "minLength": 1,
            "example": "https://example.com/webhook/"
          },
          "disabled": {
            "default": false,
            "type": "boolean",
            "example": false
          },
          "filterTypes": {
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            },
            "minItems": 1,
            "uniqueItems": true,
            "nullable": true,
            "example": [
              "user.signup",
              "user.deleted"
            ]
          },
          "channels": {
            "description": "List of message channels this endpoint listens to (omit for all).",
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 128,
              "pattern": "^[a-zA-Z0-9\\-_.:]+$",
              "example": "project_1337"
            },
            "maxItems": 10,
            "minItems": 1,
            "uniqueItems": true,
            "nullable": true,
            "example": [
              "project_123",
              "group_2"
            ]
          },
          "metadata": {
            "default": {},
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "EndpointPatch": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "rateLimit": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0.0,
            "nullable": true
          },
          "uid": {
            "description": "The Endpoint's UID.",
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "url": {
            "type": "string",
            "format": "uri"
          },
          "disabled": {
            "type": "boolean"
          },
          "filterTypes": {
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            },
            "uniqueItems": true,
            "nullable": true
          },
          "channels": {
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 128,
              "pattern": "^[a-zA-Z0-9\\-_.:]+$",
              "example": "project_1337"
            },
            "uniqueItems": true,
            "nullable": true
          },
          "secret": {
            "description": "The endpoint's verification secret.\n\nFormat: `base64` encoded random bytes optionally prefixed with `whsec_`.\nIt is recommended to not set this and let the server generate the secret.",
            "type": "string",
            "pattern": "^(whsec_)?[a-zA-Z0-9+/=]{32,100}$",
            "example": "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "EndpointSecretOut": {
        "type": "object",
        "required": [
          "key"
        ],
        "properties": {
          "key": {
            "description": "The endpoint's verification secret.\n\nFormat: `base64` encoded random bytes optionally prefixed with `whsec_`.\nIt is recommended to not set this and let the server generate the secret.",
            "type": "string",
            "pattern": "^(whsec_)?[a-zA-Z0-9+/=]{32,100}$",
            "example": "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD"
          }
        }
      },
      "EndpointSecretRotateIn": {
        "type": "object",
        "properties": {
          "key": {
            "description": "The endpoint's verification secret.\n\nFormat: `base64` encoded random bytes optionally prefixed with `whsec_`.\nIt is recommended to not set this and let the server generate the secret.",
            "default": null,
            "type": "string",
            "pattern": "^(whsec_)?[a-zA-Z0-9+/=]{32,100}$",
            "example": "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD",
            "nullable": true
          }
        }
      },
      "EndpointHeadersOut": {
        "description": "The value of the headers is returned in the `headers` field.\n \nSensitive headers that have been redacted are returned in the sensitive field.",
        "type": "object",
        "required": [
          "headers",
          "sensitive"
        ],
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "example": {
              "X-Example": "123",
              "X-Foobar": "Bar"
            }
          },
          "sensitive": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "uniqueItems": true,
            "example": [
              "Authorization"
            ]
          }
        }
      },
      "EndpointHeadersPatchIn": {
        "type": "object",
        "required": [
          "headers"
        ],
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "example": {
              "X-Example": "123",
              "X-Foobar": "Bar"
            }
          }
        }
      },
      "EndpointHeadersIn": {
        "type": "object",
        "required": [
          "headers"
        ],
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "example": {
              "X-Example": "123",
              "X-Foobar": "Bar"
            }
          }
        }
      },
      "EventExampleIn": {
        "type": "object",
        "required": [
          "eventType"
        ],
        "properties": {
          "eventType": {
            "description": "The event type's name",
            "type": "string",
            "maxLength": 256,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "user.signup"
          },
          "exampleIndex": {
            "description": "If the event type schema contains an array of examples, chooses which one to send.\n\nDefaults to the first example. Ignored if the schema doesn't contain an array of examples.",
            "default": 0,
            "type": "integer",
            "format": "uint",
            "minimum": 0.0
          }
        }
      },
      "MessageOut": {
        "type": "object",
        "required": [
          "eventType",
          "id",
          "payload",
          "timestamp"
        ],
        "properties": {
          "eventId": {
            "description": "Optional unique identifier for the message",
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "eventType": {
            "description": "The event type's name",
            "type": "string",
            "maxLength": 256,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "user.signup"
          },
          "payload": {
            "type": "object",
            "example": {
              "email": "test@example.com",
              "type": "user.created",
              "username": "test_user"
            }
          },
          "channels": {
            "description": "List of free-form identifiers that endpoints can filter by",
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 128,
              "pattern": "^[a-zA-Z0-9\\-_.:]+$",
              "example": "project_1337"
            },
            "maxItems": 10,
            "minItems": 1,
            "uniqueItems": true,
            "nullable": true,
            "example": [
              "project_123",
              "group_2"
            ]
          },
          "id": {
            "description": "The Message's ID.",
            "type": "string",
            "maxLength": 31,
            "minLength": 31,
            "pattern": "^msg_[A-Za-z0-9]{27}$",
            "example": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 128,
              "pattern": "^[a-zA-Z0-9\\-_./\\\\#]+$",
              "example": "project_1337"
            },
            "uniqueItems": true,
            "nullable": true
          }
        }
      },
      "EndpointTransformationOut": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "maxLength": 51200,
            "minLength": 10,
            "nullable": true
          },
          "enabled": {
            "default": false,
            "type": "boolean"
          }
        }
      },
      "EndpointTransformationIn": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "maxLength": 51200,
            "minLength": 10,
            "nullable": true
          },
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "ReplayIn": {
        "type": "object",
        "required": [
          "since"
        ],
        "properties": {
          "since": {
            "type": "string",
            "format": "date-time"
          },
          "until": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "ReplayOut": {
        "type": "object",
        "required": [
          "id",
          "status",
          "task"
        ],
        "properties": {
          "id": {
            "description": "The QueueBackgroundTask's ID.",
            "type": "string",
            "maxLength": 33,
            "minLength": 33,
            "pattern": "^qtask_[A-Za-z0-9]{27}$",
            "example": "qtask_1srOrx2ZWZBpBUvZwXKQmoEYga2"
          },
          "status": {
            "$ref": "#/components/schemas/BackgroundTaskStatus"
          },
          "task": {
            "$ref": "#/components/schemas/BackgroundTaskType"
          }
        }
      },
      "EndpointTransformationSimulateIn": {
        "type": "object",
        "required": [
          "code",
          "eventType",
          "payload"
        ],
        "properties": {
          "code": {
            "type": "string",
            "maxLength": 51200,
            "minLength": 10
          },
          "eventType": {
            "description": "The event type's name",
            "type": "string",
            "maxLength": 256,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "user.signup"
          },
          "channels": {
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 128,
              "pattern": "^[a-zA-Z0-9\\-_.:]+$",
              "example": "project_1337"
            },
            "uniqueItems": true,
            "nullable": true
          },
          "payload": {
            "type": "object"
          }
        }
      },
      "EndpointTransformationSimulateOut": {
        "type": "object",
        "required": [
          "payload",
          "url"
        ],
        "properties": {
          "url": {
            "type": "string",
            "format": "uri",
            "maxLength": 65536,
            "minLength": 1
          },
          "payload": {
            "type": "string"
          },
          "method": {
            "$ref": "#/components/schemas/TransformationHttpMethod",
            "nullable": true
          }
        }
      },
      "TransformationHttpMethod": {
        "type": "string",
        "enum": [
          "POST",
          "PUT",
          "PATCH"
        ]
      },
      "EndpointOauthConfigOut": {
        "type": "object",
        "required": [
          "authMethod",
          "clientId",
          "grantType",
          "tokenUrl"
        ],
        "properties": {
          "grantType": {
            "$ref": "#/components/schemas/Oauth2GrantTypeInOut"
          },
          "authMethod": {
            "$ref": "#/components/schemas/Oauth2AuthMethodInOut"
          },
          "clientId": {
            "type": "string"
          },
          "tokenUrl": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "extraParams": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          }
        }
      },
      "Oauth2GrantTypeInOut": {
        "type": "string",
        "enum": [
          "clientCredentials",
          "refreshToken"
        ]
      },
      "Oauth2AuthMethodInOut": {
        "description": "The method used for authenticating to the OAuth authorization server.\n\n`clientSecretJwt` will construct a JWT used for authentication with the oauth authorization server. This method is less commonly used and may not be supported by all oauth providers. `clientSecretBasic` will authenticate to the oauth authorization server using an `Authorization` header with the client secret as the value. This is the most common means of authentication. `clientSecretPost` will authenticate to the oauth authorization server by passing the client secret in a `client_secret` field in the request body. This method may not be supported by all oauth providers, and in general `clientSecretBasic` should be preferred.",
        "type": "string",
        "enum": [
          "clientSecretJwt",
          "clientSecretBasic",
          "clientSecretPost"
        ]
      },
      "EndpointOauthConfigIn": {
        "type": "object",
        "required": [
          "authMethod",
          "clientId",
          "grantType",
          "tokenUrl"
        ],
        "properties": {
          "grantType": {
            "description": "The OAuth grant type.",
            "$ref": "#/components/schemas/Oauth2GrantTypeInOut"
          },
          "authMethod": {
            "$ref": "#/components/schemas/Oauth2AuthMethodInOut"
          },
          "jwtParams": {
            "description": "Optional JWT parameters. Only required for `clientSecretJwt`",
            "$ref": "#/components/schemas/ClientSecretJwtParamsIn",
            "nullable": true
          },
          "clientId": {
            "description": "The client ID. Required for all authentication types.",
            "type": "string"
          },
          "clientSecret": {
            "description": "Optional client secret. This is only used for `clientSecretBasic` and `clientSecretPost`.\n\nFor `clientSecretBasic`, the secret will be appended to the `Authorization` header. For `clientSecretPost`, this will be added to the body in a `client_secret` parameter.",
            "type": "string",
            "nullable": true
          },
          "tokenUrl": {
            "description": "The URL of the authorization server.",
            "type": "string",
            "format": "uri"
          },
          "scopes": {
            "description": "Optional OAuth scopes added to the request body.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "extraParams": {
            "description": "Extra parameters added to the request body as key-value pairs.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "refreshToken": {
            "description": "For `refreshToken` grant type.",
            "type": "string",
            "nullable": true
          }
        }
      },
      "ClientSecretJwtParamsIn": {
        "type": "object",
        "required": [
          "secretBase64",
          "signingAlgorithm"
        ],
        "properties": {
          "secretBase64": {
            "description": "The base64-encoded secret used for signing the JWT.",
            "type": "string"
          },
          "signingAlgorithm": {
            "description": "The algorithm used to sign the JWT.",
            "$ref": "#/components/schemas/OauthJwsSigningAlgorithm"
          },
          "secretId": {
            "description": "Optional secret identifier. If supplied, this will be populated in the JWT header in the `kid` field.",
            "type": "string",
            "nullable": true
          },
          "tokenExpirySecs": {
            "description": "Optional number of seconds after which the JWT should expire. Defaults to 300 seconds.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0,
            "nullable": true
          }
        }
      },
      "OauthJwsSigningAlgorithm": {
        "type": "string",
        "enum": [
          "RS256"
        ]
      },
      "EndpointMtlsConfigOut": {
        "type": "object",
        "properties": {
          "serverCaCert": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "EndpointMtlsConfigIn": {
        "type": "object",
        "required": [
          "identity"
        ],
        "properties": {
          "identity": {
            "description": "A PEM encoded private key and X509 certificate to identify the webhook sender.",
            "type": "string"
          },
          "serverCaCert": {
            "description": "A PEM encoded X509 certificate used to verify the webhook receiver's certificate.",
            "type": "string",
            "nullable": true
          }
        }
      },
      "SinkIn": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/SinkIn_http"
          },
          {
            "$ref": "#/components/schemas/SinkIn_eventStream"
          }
        ],
        "properties": {
          "description": {
            "default": "",
            "type": "string",
            "example": "An example endpoint name"
          },
          "rateLimit": {
            "type": "integer",
            "format": "uint16",
            "minimum": 1.0,
            "nullable": true
          },
          "uid": {
            "description": "Optional unique identifier for the sink.",
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "secret": {
            "description": "The endpoint's verification secret.\n\nFormat: `base64` encoded random bytes optionally prefixed with `whsec_`.\nIt is recommended to not set this and let the server generate the secret.",
            "type": "string",
            "pattern": "^(whsec_)?[a-zA-Z0-9+/=]{32,100}$",
            "example": "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD",
            "nullable": true
          },
          "disabled": {
            "default": false,
            "type": "boolean",
            "example": false
          },
          "filterTypes": {
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            },
            "minItems": 1,
            "uniqueItems": true,
            "nullable": true,
            "example": [
              "user.signup",
              "user.deleted"
            ]
          },
          "channels": {
            "description": "List of message channels this sink listens to (omit for all).",
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 128,
              "pattern": "^[a-zA-Z0-9\\-_.:]+$",
              "example": "project_1337"
            },
            "maxItems": 10,
            "minItems": 1,
            "uniqueItems": true,
            "nullable": true,
            "example": [
              "project_123",
              "group_2"
            ]
          },
          "metadata": {
            "default": {},
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "discriminator": {
          "mapping": {
            "eventStream": "#/components/schemas/SinkIn_eventStream",
            "http": "#/components/schemas/SinkIn_http"
          },
          "propertyName": "type"
        }
      },
      "SinkOut": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/SinkOut_http"
          },
          {
            "$ref": "#/components/schemas/SinkOut_eventStream"
          }
        ],
        "required": [
          "createdAt",
          "description",
          "id",
          "metadata",
          "updatedAt"
        ],
        "properties": {
          "id": {
            "description": "The Endpoint's ID.",
            "type": "string",
            "maxLength": 30,
            "minLength": 30,
            "pattern": "^ep_[A-Za-z0-9]{27}$",
            "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "description": {
            "description": "An example endpoint name.",
            "type": "string"
          },
          "rateLimit": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0.0,
            "nullable": true
          },
          "uid": {
            "description": "Optional unique identifier for the endpoint.",
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "disabled": {
            "default": false,
            "type": "boolean",
            "example": false
          },
          "filterTypes": {
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            },
            "minItems": 1,
            "uniqueItems": true,
            "nullable": true,
            "example": [
              "user.signup",
              "user.deleted"
            ]
          },
          "channels": {
            "description": "List of message channels this endpoint listens to (omit for all).",
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 128,
              "pattern": "^[a-zA-Z0-9\\-_.:]+$",
              "example": "project_1337"
            },
            "maxItems": 10,
            "minItems": 1,
            "uniqueItems": true,
            "nullable": true,
            "example": [
              "project_123",
              "group_2"
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "discriminator": {
          "mapping": {
            "eventStream": "#/components/schemas/SinkOut_eventStream",
            "http": "#/components/schemas/SinkOut_http"
          },
          "propertyName": "type"
        }
      },
      "ListResponse_SinkOut_": {
        "type": "object",
        "required": [
          "data",
          "done",
          "iterator"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SinkOut"
            }
          },
          "iterator": {
            "type": "string",
            "nullable": true,
            "example": "iterator"
          },
          "prevIterator": {
            "type": "string",
            "nullable": true,
            "example": "-iterator"
          },
          "done": {
            "type": "boolean"
          }
        }
      },
      "EndpointStats": {
        "type": "object",
        "required": [
          "fail",
          "pending",
          "sending",
          "success"
        ],
        "properties": {
          "success": {
            "type": "integer",
            "format": "int64"
          },
          "pending": {
            "type": "integer",
            "format": "int64"
          },
          "sending": {
            "type": "integer",
            "format": "int64"
          },
          "fail": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "RecoverIn": {
        "type": "object",
        "required": [
          "since"
        ],
        "properties": {
          "since": {
            "type": "string",
            "format": "date-time"
          },
          "until": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "RecoverOut": {
        "type": "object",
        "required": [
          "id",
          "status",
          "task"
        ],
        "properties": {
          "id": {
            "description": "The QueueBackgroundTask's ID.",
            "type": "string",
            "maxLength": 33,
            "minLength": 33,
            "pattern": "^qtask_[A-Za-z0-9]{27}$",
            "example": "qtask_1srOrx2ZWZBpBUvZwXKQmoEYga2"
          },
          "status": {
            "$ref": "#/components/schemas/BackgroundTaskStatus"
          },
          "task": {
            "$ref": "#/components/schemas/BackgroundTaskType"
          }
        }
      },
      "EventTypeIn": {
        "type": "object",
        "required": [
          "description",
          "name"
        ],
        "properties": {
          "name": {
            "description": "The event type's name",
            "type": "string",
            "maxLength": 256,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "user.signup"
          },
          "description": {
            "type": "string",
            "example": "A user has signed up"
          },
          "archived": {
            "default": false,
            "type": "boolean",
            "example": false
          },
          "deprecated": {
            "default": false,
            "type": "boolean"
          },
          "schemas": {
            "description": "The schema for the event type for a specific version as a JSON schema.",
            "type": "object",
            "example": {
              "1": {
                "description": "An invoice was paid by a user",
                "properties": {
                  "invoiceId": {
                    "description": "The invoice id",
                    "type": "string"
                  },
                  "userId": {
                    "description": "The user id",
                    "type": "string"
                  }
                },
                "required": [
                  "invoiceId",
                  "userId"
                ],
                "title": "Invoice Paid Event",
                "type": "object"
              }
            },
            "nullable": true
          },
          "featureFlag": {
            "type": "string",
            "maxLength": 256,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "cool-new-feature",
            "nullable": true
          },
          "groupName": {
            "description": "The event type group's name",
            "type": "string",
            "maxLength": 256,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "user",
            "nullable": true
          }
        }
      },
      "EventTypeOut": {
        "type": "object",
        "required": [
          "createdAt",
          "deprecated",
          "description",
          "name",
          "updatedAt"
        ],
        "properties": {
          "name": {
            "description": "The event type's name",
            "type": "string",
            "maxLength": 256,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "user.signup"
          },
          "description": {
            "type": "string",
            "example": "A user has signed up"
          },
          "archived": {
            "default": false,
            "type": "boolean",
            "example": false
          },
          "deprecated": {
            "type": "boolean"
          },
          "schemas": {
            "description": "The schema for the event type for a specific version as a JSON schema.",
            "type": "object",
            "example": {
              "1": {
                "description": "An invoice was paid by a user",
                "properties": {
                  "invoiceId": {
                    "description": "The invoice id",
                    "type": "string"
                  },
                  "userId": {
                    "description": "The user id",
                    "type": "string"
                  }
                },
                "required": [
                  "invoiceId",
                  "userId"
                ],
                "title": "Invoice Paid Event",
                "type": "object"
              }
            },
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "featureFlag": {
            "type": "string",
            "maxLength": 256,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "cool-new-feature",
            "nullable": true
          },
          "groupName": {
            "description": "The event type group's name",
            "type": "string",
            "maxLength": 256,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "user",
            "nullable": true
          }
        }
      },
      "ListResponse_EventTypeOut_": {
        "type": "object",
        "required": [
          "data",
          "done",
          "iterator"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventTypeOut"
            }
          },
          "iterator": {
            "type": "string",
            "nullable": true,
            "example": "iterator"
          },
          "prevIterator": {
            "type": "string",
            "nullable": true,
            "example": "-iterator"
          },
          "done": {
            "type": "boolean"
          }
        }
      },
      "EventTypeImportOpenApiIn": {
        "description": "Import a list of event types from webhooks defined in an OpenAPI spec.\n\nThe OpenAPI spec can be specified as either `spec` given the spec as a JSON object, or as `specRaw` (a `string`) which will be parsed as YAML or JSON by the server. Sending neither or both is invalid, resulting in a `400` **Bad Request**.",
        "type": "object",
        "properties": {
          "dryRun": {
            "description": "If `true`, return the event types that would be modified without actually modifying them.",
            "default": false,
            "type": "boolean"
          },
          "replaceAll": {
            "description": "If `true`, all existing event types that are not in the spec will be archived.",
            "default": false,
            "type": "boolean"
          },
          "spec": {
            "description": "A pre-parsed JSON spec.",
            "type": "object",
            "nullable": true,
            "example": {
              "info": {
                "title": "Webhook Example",
                "version": "1.0.0"
              },
              "openapi": "3.1.0",
              "webhooks": {
                "pet.new": {
                  "post": {
                    "requestBody": {
                      "content": {
                        "application/json": {
                          "schema": {
                            "properties": {
                              "id": {
                                "format": "int64",
                                "type": "integer"
                              },
                              "name": {
                                "type": "string"
                              },
                              "tag": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "id",
                              "name"
                            ]
                          }
                        }
                      },
                      "description": "Information about a new pet in the system"
                    },
                    "responses": {
                      "200": {
                        "description": "Return a 200 status to indicate that the data was received successfully"
                      }
                    }
                  }
                }
              }
            }
          },
          "specRaw": {
            "description": "A string, parsed by the server as YAML or JSON.",
            "type": "string",
            "nullable": true,
            "example": "\n# Both YAML and JSON are supported\nopenapi: 3.1.0\ninfo:\n  title: Webhook Example\n  version: 1.0.0\n# Since OAS 3.1.0 the paths element isn't necessary. Now a valid OpenAPI Document can describe only paths, webhooks, or even only reusable components\nwebhooks:\n  # Each webhook needs a name\n  \"pet.new\":\n    # This is a Path Item Object, the only difference is that the request is initiated by the API provider\n    post:\n      requestBody:\n        description: Information about a new pet in the system\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Pet\"\n      responses:\n        \"200\":\n          description: Return a 200 status to indicate that the data was received successfully\n\ncomponents:\n  schemas:\n    Pet:\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n        tag:\n          type: string\n"
          }
        }
      },
      "EventTypeImportOpenApiOut": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "$ref": "#/components/schemas/EventTypeImportOpenApiOutData"
          }
        }
      },
      "EventTypeImportOpenApiOutData": {
        "type": "object",
        "required": [
          "modified"
        ],
        "properties": {
          "modified": {
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            }
          },
          "to_modify": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventTypeFromOpenApi"
            },
            "nullable": true
          }
        }
      },
      "EventTypeFromOpenApi": {
        "type": "object",
        "required": [
          "deprecated",
          "description",
          "name"
        ],
        "properties": {
          "name": {
            "description": "The event type's name",
            "type": "string",
            "maxLength": 256,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "user.signup"
          },
          "description": {
            "type": "string"
          },
          "schemas": {
            "type": "object",
            "example": {
              "description": "An invoice was paid by a user",
              "properties": {
                "invoiceId": {
                  "description": "The invoice id",
                  "type": "string"
                },
                "userId": {
                  "description": "The user id",
                  "type": "string"
                }
              },
              "required": [
                "invoiceId",
                "userId"
              ],
              "title": "Invoice Paid Event",
              "type": "object"
            },
            "nullable": true
          },
          "deprecated": {
            "type": "boolean"
          },
          "featureFlag": {
            "type": "string",
            "maxLength": 256,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "cool-new-feature",
            "nullable": true
          },
          "groupName": {
            "description": "The event type group's name",
            "type": "string",
            "maxLength": 256,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "user",
            "nullable": true
          }
        }
      },
      "RetryScheduleInOut": {
        "type": "object",
        "properties": {
          "retrySchedule": {
            "$ref": "#/components/schemas/RetrySchedule",
            "nullable": true
          }
        }
      },
      "RetrySchedule": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Duration"
        }
      },
      "Duration": {
        "type": "object",
        "required": [
          "nanos",
          "secs"
        ],
        "properties": {
          "secs": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "nanos": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          }
        }
      },
      "EventTypeUpdate": {
        "type": "object",
        "required": [
          "description"
        ],
        "properties": {
          "description": {
            "type": "string",
            "example": "A user has signed up"
          },
          "archived": {
            "default": false,
            "type": "boolean",
            "example": false
          },
          "deprecated": {
            "default": false,
            "type": "boolean"
          },
          "schemas": {
            "description": "The schema for the event type for a specific version as a JSON schema.",
            "type": "object",
            "example": {
              "1": {
                "description": "An invoice was paid by a user",
                "properties": {
                  "invoiceId": {
                    "description": "The invoice id",
                    "type": "string"
                  },
                  "userId": {
                    "description": "The user id",
                    "type": "string"
                  }
                },
                "required": [
                  "invoiceId",
                  "userId"
                ],
                "title": "Invoice Paid Event",
                "type": "object"
              }
            },
            "nullable": true
          },
          "featureFlag": {
            "type": "string",
            "maxLength": 256,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "cool-new-feature",
            "nullable": true
          },
          "groupName": {
            "description": "The event type group's name",
            "type": "string",
            "maxLength": 256,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "user",
            "nullable": true
          }
        }
      },
      "EventTypePatch": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          },
          "deprecated": {
            "type": "boolean"
          },
          "schemas": {
            "type": "object",
            "example": {
              "description": "An invoice was paid by a user",
              "properties": {
                "invoiceId": {
                  "description": "The invoice id",
                  "type": "string"
                },
                "userId": {
                  "description": "The user id",
                  "type": "string"
                }
              },
              "required": [
                "invoiceId",
                "userId"
              ],
              "title": "Invoice Paid Event",
              "type": "object"
            },
            "nullable": true
          },
          "featureFlag": {
            "type": "string",
            "maxLength": 256,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "cool-new-feature",
            "nullable": true
          },
          "groupName": {
            "description": "The event type group's name",
            "type": "string",
            "maxLength": 256,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "user",
            "nullable": true
          }
        }
      },
      "ExportEventTypeOut": {
        "type": "object",
        "required": [
          "id",
          "status",
          "task"
        ],
        "properties": {
          "id": {
            "description": "The QueueBackgroundTask's ID.",
            "type": "string",
            "maxLength": 33,
            "minLength": 33,
            "pattern": "^qtask_[A-Za-z0-9]{27}$",
            "example": "qtask_1srOrx2ZWZBpBUvZwXKQmoEYga2"
          },
          "status": {
            "$ref": "#/components/schemas/BackgroundTaskStatus"
          },
          "task": {
            "$ref": "#/components/schemas/BackgroundTaskType"
          }
        }
      },
      "ApiTokenExpireIn": {
        "type": "object",
        "properties": {
          "expiry": {
            "description": "How many seconds until the old key is expired.",
            "default": 0,
            "type": "integer",
            "format": "int32",
            "maximum": 259200.0,
            "minimum": 0.0
          }
        }
      },
      "ListResponse_ApiTokenCensoredOut_": {
        "type": "object",
        "required": [
          "data",
          "done",
          "iterator"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiTokenCensoredOut"
            }
          },
          "iterator": {
            "type": "string",
            "nullable": true,
            "example": "iterator"
          },
          "prevIterator": {
            "type": "string",
            "nullable": true,
            "example": "-iterator"
          },
          "done": {
            "type": "boolean"
          }
        }
      },
      "ApiTokenCensoredOut": {
        "type": "object",
        "required": [
          "censoredToken",
          "createdAt",
          "id"
        ],
        "properties": {
          "id": {
            "description": "The ApplicationToken's ID.",
            "type": "string",
            "maxLength": 31,
            "minLength": 31,
            "pattern": "^key_[A-Za-z0-9]{27}$",
            "example": "key_1srOrx2ZWZBpBUvZwXKQmoEYga2"
          },
          "censoredToken": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        }
      },
      "ApiTokenIn": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        }
      },
      "ListResponse_MessageOut_": {
        "type": "object",
        "required": [
          "data",
          "done",
          "iterator"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageOut"
            }
          },
          "iterator": {
            "type": "string",
            "nullable": true,
            "example": "iterator"
          },
          "prevIterator": {
            "type": "string",
            "nullable": true,
            "example": "-iterator"
          },
          "done": {
            "type": "boolean"
          }
        }
      },
      "MessageIn": {
        "type": "object",
        "required": [
          "eventType",
          "payload"
        ],
        "properties": {
          "eventId": {
            "description": "Optional unique identifier for the message",
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "eventType": {
            "description": "The event type's name",
            "type": "string",
            "maxLength": 256,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "user.signup"
          },
          "payload": {
            "description": "JSON payload to send as the request body of the webhook.\n \nWe also support sending non-JSON payloads. Please contact us for more information.",
            "type": "object",
            "example": {
              "email": "test@example.com",
              "type": "user.created",
              "username": "test_user"
            }
          },
          "channels": {
            "description": "List of free-form identifiers that endpoints can filter by",
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 128,
              "pattern": "^[a-zA-Z0-9\\-_.:]+$",
              "example": "project_1337"
            },
            "maxItems": 10,
            "minItems": 1,
            "uniqueItems": true,
            "nullable": true,
            "example": [
              "project_123",
              "group_2"
            ]
          },
          "application": {
            "description": "Optionally creates a new application alongside the message.\n \nIf the application id or uid that is used in the path already exists, this argument is ignored.",
            "$ref": "#/components/schemas/ApplicationIn",
            "nullable": true
          },
          "tags": {
            "description": "List of free-form tags that can be filtered by when listing messages",
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 128,
              "pattern": "^[a-zA-Z0-9\\-_./\\\\#]+$",
              "example": "project_1337"
            },
            "maxItems": 5,
            "uniqueItems": true,
            "nullable": true,
            "example": [
              "my_tag",
              "other"
            ]
          },
          "transformationsParams": {
            "description": "Extra parameters to pass to Transformations (for future use)",
            "type": "object",
            "nullable": true
          },
          "payloadRetentionPeriod": {
            "description": "Optional number of days to retain the message payload. Defaults to 90. Note that this is mutually exclusive with `payloadRetentionHours`.",
            "default": 90,
            "type": "integer",
            "format": "int64",
            "maximum": 90.0,
            "minimum": 1.0,
            "nullable": true,
            "example": 90
          },
          "payloadRetentionHours": {
            "description": "Optional number of hours to retain the message payload. Note that this is mutually exclusive with `payloadRetentionPeriod`.",
            "default": null,
            "type": "integer",
            "format": "int64",
            "maximum": 2160.0,
            "minimum": 1.0,
            "nullable": true
          }
        }
      },
      "MessagePrecheckIn": {
        "type": "object",
        "required": [
          "eventType"
        ],
        "properties": {
          "eventType": {
            "description": "The event type's name",
            "type": "string",
            "maxLength": 256,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "user.signup"
          },
          "channels": {
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 128,
              "pattern": "^[a-zA-Z0-9\\-_.:]+$",
              "example": "project_1337"
            },
            "maxItems": 10,
            "minItems": 1,
            "uniqueItems": true,
            "nullable": true,
            "example": [
              "project_123",
              "group_2"
            ]
          }
        }
      },
      "MessagePrecheckOut": {
        "type": "object",
        "required": [
          "active"
        ],
        "properties": {
          "active": {
            "type": "boolean"
          }
        }
      },
      "MessageEventsOut": {
        "type": "object",
        "required": [
          "data",
          "done",
          "iterator"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageOut"
            }
          },
          "iterator": {
            "type": "string"
          },
          "done": {
            "type": "boolean"
          }
        }
      },
      "PollingEndpointOut": {
        "type": "object",
        "required": [
          "data",
          "done",
          "iterator"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PollingEndpointMessageOut"
            }
          },
          "iterator": {
            "type": "string"
          },
          "done": {
            "type": "boolean"
          }
        }
      },
      "PollingEndpointMessageOut": {
        "description": "The MessageOut equivalent of polling endpoint",
        "type": "object",
        "required": [
          "eventType",
          "id",
          "payload",
          "timestamp"
        ],
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "eventId": {
            "description": "Optional unique identifier for the message",
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "eventType": {
            "description": "The event type's name",
            "type": "string",
            "maxLength": 256,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "user.signup"
          },
          "payload": {
            "type": "object",
            "example": {
              "email": "test@example.com",
              "type": "user.created",
              "username": "test_user"
            }
          },
          "channels": {
            "description": "List of free-form identifiers that endpoints can filter by",
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 128,
              "pattern": "^[a-zA-Z0-9\\-_.:]+$",
              "example": "project_1337"
            },
            "maxItems": 10,
            "minItems": 1,
            "uniqueItems": true,
            "nullable": true,
            "example": [
              "project_123",
              "group_2"
            ]
          },
          "id": {
            "description": "The Message's ID.",
            "type": "string",
            "maxLength": 31,
            "minLength": 31,
            "pattern": "^msg_[A-Za-z0-9]{27}$",
            "example": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 128,
              "pattern": "^[a-zA-Z0-9\\-_./\\\\#]+$",
              "example": "project_1337"
            },
            "uniqueItems": true,
            "nullable": true
          }
        }
      },
      "PollingEndpointConsumerSeekIn": {
        "type": "object",
        "required": [
          "after"
        ],
        "properties": {
          "after": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "PollingEndpointConsumerSeekOut": {
        "type": "object",
        "required": [
          "iterator"
        ],
        "properties": {
          "iterator": {
            "type": "string"
          }
        }
      },
      "ExpungeAllContentsOut": {
        "type": "object",
        "required": [
          "id",
          "status",
          "task"
        ],
        "properties": {
          "id": {
            "description": "The QueueBackgroundTask's ID.",
            "type": "string",
            "maxLength": 33,
            "minLength": 33,
            "pattern": "^qtask_[A-Za-z0-9]{27}$",
            "example": "qtask_1srOrx2ZWZBpBUvZwXKQmoEYga2"
          },
          "status": {
            "$ref": "#/components/schemas/BackgroundTaskStatus"
          },
          "task": {
            "$ref": "#/components/schemas/BackgroundTaskType"
          }
        }
      },
      "MessageRawPayloadOut": {
        "type": "object",
        "required": [
          "payload"
        ],
        "properties": {
          "payload": {
            "type": "string",
            "example": "{\"email\":\"test@example.com\",\"type\":\"user.created\",\"username\":\"test_user\"}"
          }
        }
      },
      "MessageAttemptOut": {
        "type": "object",
        "required": [
          "endpointId",
          "id",
          "msgId",
          "response",
          "responseDurationMs",
          "responseStatusCode",
          "status",
          "timestamp",
          "triggerType",
          "url"
        ],
        "properties": {
          "url": {
            "type": "string",
            "format": "uri",
            "maxLength": 65536,
            "minLength": 1,
            "example": "https://example.com/webhook/"
          },
          "response": {
            "type": "string",
            "example": "{}"
          },
          "responseStatusCode": {
            "type": "integer",
            "format": "int16",
            "example": 200
          },
          "responseDurationMs": {
            "description": "Response duration in milliseconds.",
            "type": "integer",
            "format": "int64"
          },
          "status": {
            "$ref": "#/components/schemas/MessageStatus"
          },
          "triggerType": {
            "$ref": "#/components/schemas/MessageAttemptTriggerType"
          },
          "msgId": {
            "description": "The Message's ID.",
            "type": "string",
            "maxLength": 31,
            "minLength": 31,
            "pattern": "^msg_[A-Za-z0-9]{27}$",
            "example": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2"
          },
          "endpointId": {
            "description": "The Endpoint's ID.",
            "type": "string",
            "maxLength": 30,
            "minLength": 30,
            "pattern": "^ep_[A-Za-z0-9]{27}$",
            "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2"
          },
          "id": {
            "description": "The MessageAttempt's ID.",
            "type": "string",
            "maxLength": 33,
            "minLength": 33,
            "pattern": "^atmpt_[A-Za-z0-9]{27}$",
            "example": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "msg": {
            "$ref": "#/components/schemas/MessageOut",
            "nullable": true
          }
        }
      },
      "MessageStatus": {
        "title": "MessageStatus",
        "description": "The sending status of the message:\n- Success = 0\n- Pending = 1\n- Fail = 2\n- Sending = 3",
        "type": "integer",
        "enum": [
          0,
          1,
          2,
          3
        ],
        "x-enum-varnames": [
          "Success",
          "Pending",
          "Fail",
          "Sending"
        ]
      },
      "MessageAttemptTriggerType": {
        "title": "MessageAttemptTriggerType",
        "description": "The reason an attempt was made:\n- Scheduled = 0\n- Manual = 1",
        "type": "integer",
        "enum": [
          0,
          1
        ],
        "x-enum-varnames": [
          "Scheduled",
          "Manual"
        ]
      },
      "StatusCodeClass": {
        "title": "StatusCodeClass",
        "description": "The different classes of HTTP status codes:\n- CodeNone = 0\n - Code1xx = 100\n- Code2xx = 200\n- Code3xx = 300\n- Code4xx = 400\n- Code5xx = 500",
        "type": "integer",
        "enum": [
          0,
          100,
          200,
          300,
          400,
          500
        ],
        "x-enum-varnames": [
          "CodeNone",
          "Code1xx",
          "Code2xx",
          "Code3xx",
          "Code4xx",
          "Code5xx"
        ]
      },
      "ListResponse_MessageAttemptOut_": {
        "type": "object",
        "required": [
          "data",
          "done",
          "iterator"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageAttemptOut"
            }
          },
          "iterator": {
            "type": "string",
            "nullable": true,
            "example": "iterator"
          },
          "prevIterator": {
            "type": "string",
            "nullable": true,
            "example": "-iterator"
          },
          "done": {
            "type": "boolean"
          }
        }
      },
      "CountOut": {
        "type": "object",
        "required": [
          "approximated",
          "count"
        ],
        "properties": {
          "count": {
            "description": "The count of attempts matching the query.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "approximated": {
            "description": "There's a ceiling to how many attempts we count. When the limit is reached, this will be `true` to indicate the actual count is higher than given.",
            "type": "boolean"
          }
        }
      },
      "ListResponse_EndpointMessageOut_": {
        "type": "object",
        "required": [
          "data",
          "done",
          "iterator"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EndpointMessageOut"
            }
          },
          "iterator": {
            "type": "string",
            "nullable": true,
            "example": "iterator"
          },
          "prevIterator": {
            "type": "string",
            "nullable": true,
            "example": "-iterator"
          },
          "done": {
            "type": "boolean"
          }
        }
      },
      "EndpointMessageOut": {
        "description": "A model containing information on a given message plus additional fields on the last attempt for that message.",
        "type": "object",
        "required": [
          "eventType",
          "id",
          "payload",
          "status",
          "timestamp"
        ],
        "properties": {
          "status": {
            "$ref": "#/components/schemas/MessageStatus"
          },
          "nextAttempt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "eventId": {
            "description": "Optional unique identifier for the message",
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "eventType": {
            "description": "The event type's name",
            "type": "string",
            "maxLength": 256,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "user.signup"
          },
          "payload": {
            "type": "object",
            "example": {
              "email": "test@example.com",
              "type": "user.created",
              "username": "test_user"
            }
          },
          "channels": {
            "description": "List of free-form identifiers that endpoints can filter by",
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 128,
              "pattern": "^[a-zA-Z0-9\\-_.:]+$",
              "example": "project_1337"
            },
            "maxItems": 10,
            "minItems": 1,
            "uniqueItems": true,
            "nullable": true,
            "example": [
              "project_123",
              "group_2"
            ]
          },
          "id": {
            "description": "The Message's ID.",
            "type": "string",
            "maxLength": 31,
            "minLength": 31,
            "pattern": "^msg_[A-Za-z0-9]{27}$",
            "example": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 128,
              "pattern": "^[a-zA-Z0-9\\-_./\\\\#]+$",
              "example": "project_1337"
            },
            "uniqueItems": true,
            "nullable": true
          }
        }
      },
      "ListResponse_MessageEndpointOut_": {
        "type": "object",
        "required": [
          "data",
          "done",
          "iterator"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageEndpointOut"
            }
          },
          "iterator": {
            "type": "string",
            "nullable": true,
            "example": "iterator"
          },
          "prevIterator": {
            "type": "string",
            "nullable": true,
            "example": "-iterator"
          },
          "done": {
            "type": "boolean"
          }
        }
      },
      "MessageEndpointOut": {
        "type": "object",
        "required": [
          "createdAt",
          "description",
          "id",
          "status",
          "updatedAt",
          "url"
        ],
        "properties": {
          "id": {
            "description": "The Endpoint's ID.",
            "type": "string",
            "maxLength": 30,
            "minLength": 30,
            "pattern": "^ep_[A-Za-z0-9]{27}$",
            "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2"
          },
          "status": {
            "$ref": "#/components/schemas/MessageStatus"
          },
          "nextAttempt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "description": {
            "description": "An example endpoint name.",
            "type": "string"
          },
          "rateLimit": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0.0,
            "nullable": true
          },
          "uid": {
            "description": "Optional unique identifier for the endpoint.",
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "maxLength": 65536,
            "minLength": 1,
            "example": "https://example.com/webhook/"
          },
          "disabled": {
            "default": false,
            "type": "boolean",
            "example": false
          },
          "filterTypes": {
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            },
            "minItems": 1,
            "uniqueItems": true,
            "nullable": true,
            "example": [
              "user.signup",
              "user.deleted"
            ]
          },
          "channels": {
            "description": "List of message channels this endpoint listens to (omit for all).",
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 128,
              "pattern": "^[a-zA-Z0-9\\-_.:]+$",
              "example": "project_1337"
            },
            "maxItems": 10,
            "minItems": 1,
            "uniqueItems": true,
            "nullable": true,
            "example": [
              "project_123",
              "group_2"
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ListResponse_MessageAttemptEndpointOut_": {
        "type": "object",
        "required": [
          "data",
          "done",
          "iterator"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageAttemptEndpointOut"
            }
          },
          "iterator": {
            "type": "string",
            "nullable": true,
            "example": "iterator"
          },
          "prevIterator": {
            "type": "string",
            "nullable": true,
            "example": "-iterator"
          },
          "done": {
            "type": "boolean"
          }
        }
      },
      "MessageAttemptEndpointOut": {
        "type": "object",
        "required": [
          "endpointId",
          "id",
          "msgId",
          "response",
          "responseDurationMs",
          "responseStatusCode",
          "status",
          "timestamp",
          "triggerType",
          "url"
        ],
        "properties": {
          "url": {
            "type": "string",
            "format": "uri",
            "maxLength": 65536,
            "minLength": 1,
            "example": "https://example.com/webhook/"
          },
          "response": {
            "type": "string",
            "example": "{}"
          },
          "responseStatusCode": {
            "type": "integer",
            "format": "int16",
            "example": 200
          },
          "responseDurationMs": {
            "description": "Response duration in milliseconds.",
            "type": "integer",
            "format": "int64"
          },
          "status": {
            "$ref": "#/components/schemas/MessageStatus"
          },
          "triggerType": {
            "$ref": "#/components/schemas/MessageAttemptTriggerType"
          },
          "msgId": {
            "description": "The Message's ID.",
            "type": "string",
            "maxLength": 31,
            "minLength": 31,
            "pattern": "^msg_[A-Za-z0-9]{27}$",
            "example": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2"
          },
          "endpointId": {
            "description": "The Endpoint's ID.",
            "type": "string",
            "maxLength": 30,
            "minLength": 30,
            "pattern": "^ep_[A-Za-z0-9]{27}$",
            "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2"
          },
          "id": {
            "description": "The MessageAttempt's ID.",
            "type": "string",
            "maxLength": 33,
            "minLength": 33,
            "pattern": "^atmpt_[A-Za-z0-9]{27}$",
            "example": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "msg": {
            "$ref": "#/components/schemas/MessageOut",
            "nullable": true
          }
        }
      },
      "MessageAttemptHeadersOut": {
        "type": "object",
        "required": [
          "sensitive",
          "sentHeaders"
        ],
        "properties": {
          "sentHeaders": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "responseHeaders": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "maxItems": 2,
              "minItems": 2
            },
            "nullable": true
          },
          "sensitive": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "uniqueItems": true
          }
        }
      },
      "AggregateEventTypesOut": {
        "type": "object",
        "required": [
          "id",
          "status",
          "task"
        ],
        "properties": {
          "id": {
            "description": "The QueueBackgroundTask's ID.",
            "type": "string",
            "maxLength": 33,
            "minLength": 33,
            "pattern": "^qtask_[A-Za-z0-9]{27}$",
            "example": "qtask_1srOrx2ZWZBpBUvZwXKQmoEYga2"
          },
          "status": {
            "$ref": "#/components/schemas/BackgroundTaskStatus"
          },
          "task": {
            "$ref": "#/components/schemas/BackgroundTaskType"
          }
        }
      },
      "AppUsageStatsIn": {
        "type": "object",
        "required": [
          "since",
          "until"
        ],
        "properties": {
          "since": {
            "type": "string",
            "format": "date-time"
          },
          "until": {
            "type": "string",
            "format": "date-time"
          },
          "appIds": {
            "description": "Specific app IDs or UIDs to aggregate stats for.\n\nNote that if none of the given IDs or UIDs are resolved, a 422 response will be given.",
            "type": "array",
            "items": {
              "description": "The Application's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "uniqueItems": true,
            "nullable": true
          }
        }
      },
      "AppUsageStatsOut": {
        "type": "object",
        "required": [
          "id",
          "status",
          "task",
          "unresolvedAppIds"
        ],
        "properties": {
          "unresolvedAppIds": {
            "description": "Any app IDs or UIDs received in the request that weren't found.\n \nStats will be produced for all the others.",
            "type": "array",
            "items": {
              "description": "The Application's ID or UID.",
              "type": "string",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "unique-identifier"
            },
            "uniqueItems": true
          },
          "id": {
            "description": "The QueueBackgroundTask's ID.",
            "type": "string",
            "maxLength": 33,
            "minLength": 33,
            "pattern": "^qtask_[A-Za-z0-9]{27}$",
            "example": "qtask_1srOrx2ZWZBpBUvZwXKQmoEYga2"
          },
          "status": {
            "$ref": "#/components/schemas/BackgroundTaskStatus"
          },
          "task": {
            "$ref": "#/components/schemas/BackgroundTaskType"
          }
        }
      },
      "ListResponse_IntegrationOut_": {
        "type": "object",
        "required": [
          "data",
          "done",
          "iterator"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IntegrationOut"
            }
          },
          "iterator": {
            "type": "string",
            "nullable": true,
            "example": "iterator"
          },
          "prevIterator": {
            "type": "string",
            "nullable": true,
            "example": "-iterator"
          },
          "done": {
            "type": "boolean"
          }
        }
      },
      "IntegrationOut": {
        "type": "object",
        "required": [
          "createdAt",
          "id",
          "name",
          "updatedAt"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "Example Integration"
          },
          "id": {
            "description": "The Integration's ID.",
            "type": "string",
            "maxLength": 33,
            "minLength": 33,
            "pattern": "^integ_[A-Za-z0-9]{27}$",
            "example": "integ_1srOrx2ZWZBpBUvZwXKQmoEYga2"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "featureFlags": {
            "description": "The set of feature flags the integration has access to.",
            "default": [],
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "cool-new-feature"
            },
            "maxItems": 25,
            "minItems": 1,
            "uniqueItems": true,
            "example": []
          }
        }
      },
      "IntegrationIn": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "Example Integration"
          },
          "featureFlags": {
            "description": "The set of feature flags the integration will have access to.",
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "cool-new-feature"
            },
            "maxItems": 25,
            "minItems": 1,
            "uniqueItems": true,
            "example": []
          }
        }
      },
      "IntegrationUpdate": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "Example Integration"
          },
          "featureFlags": {
            "description": "The set of feature flags the integration will have access to.",
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "cool-new-feature"
            },
            "maxItems": 25,
            "minItems": 1,
            "uniqueItems": true,
            "example": []
          }
        }
      },
      "IntegrationKeyOut": {
        "type": "object",
        "required": [
          "key"
        ],
        "properties": {
          "key": {
            "type": "string",
            "example": "integsk_kV3ts5tKPNJN4Dl25cMTfUNdmabxbX0O"
          }
        }
      },
      "EnvironmentSettingsOut": {
        "type": "object",
        "properties": {
          "customColor": {
            "type": "string",
            "format": "color",
            "nullable": true
          },
          "customLogoUrl": {
            "type": "string",
            "format": "uri",
            "maxLength": 65536,
            "minLength": 1,
            "nullable": true
          },
          "customFontFamily": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9\\-_ ]+$",
            "nullable": true,
            "example": "Open Sans"
          },
          "customFontFamilyUrl": {
            "type": "string",
            "format": "uri",
            "maxLength": 65536,
            "minLength": 1,
            "nullable": true
          },
          "customThemeOverride": {
            "$ref": "#/components/schemas/CustomThemeOverride",
            "nullable": true
          },
          "customStringsOverride": {
            "$ref": "#/components/schemas/CustomStringsOverride",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "nullable": true
          },
          "enableChannels": {
            "default": false,
            "type": "boolean"
          },
          "enableMessageTags": {
            "default": false,
            "type": "boolean"
          },
          "enableMessageStream": {
            "default": false,
            "type": "boolean"
          },
          "enableIntegrationManagement": {
            "default": false,
            "type": "boolean"
          },
          "enableTransformations": {
            "default": false,
            "type": "boolean"
          },
          "enableEndpointOauthConfig": {
            "default": false,
            "type": "boolean"
          },
          "enableEndpointMtlsConfig": {
            "default": false,
            "type": "boolean"
          },
          "colorPaletteLight": {
            "$ref": "#/components/schemas/CustomColorPalette",
            "nullable": true
          },
          "colorPaletteDark": {
            "$ref": "#/components/schemas/CustomColorPalette",
            "nullable": true
          },
          "showUseSvixPlay": {
            "default": true,
            "type": "boolean"
          },
          "wipeSuccessfulPayload": {
            "default": false,
            "type": "boolean"
          }
        }
      },
      "CustomThemeOverride": {
        "type": "object",
        "properties": {
          "borderRadius": {
            "$ref": "#/components/schemas/BorderRadiusConfig",
            "nullable": true
          },
          "fontSize": {
            "$ref": "#/components/schemas/FontSizeConfig",
            "nullable": true
          }
        }
      },
      "BorderRadiusConfig": {
        "type": "object",
        "properties": {
          "button": {
            "$ref": "#/components/schemas/BorderRadiusEnum",
            "nullable": true
          },
          "card": {
            "$ref": "#/components/schemas/BorderRadiusEnum",
            "nullable": true
          },
          "input": {
            "$ref": "#/components/schemas/BorderRadiusEnum",
            "nullable": true
          }
        }
      },
      "BorderRadiusEnum": {
        "type": "string",
        "enum": [
          "none",
          "lg",
          "md",
          "sm",
          "full"
        ]
      },
      "FontSizeConfig": {
        "type": "object",
        "properties": {
          "base": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0.0,
            "nullable": true
          }
        }
      },
      "CustomStringsOverride": {
        "type": "object",
        "properties": {
          "channelsOne": {
            "type": "string",
            "nullable": true
          },
          "channelsMany": {
            "type": "string",
            "nullable": true
          },
          "channelsHelp": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CustomColorPalette": {
        "type": "object",
        "properties": {
          "primary": {
            "type": "string",
            "format": "color",
            "nullable": true
          },
          "backgroundPrimary": {
            "type": "string",
            "format": "color",
            "nullable": true
          },
          "backgroundSecondary": {
            "type": "string",
            "format": "color",
            "nullable": true
          },
          "backgroundHover": {
            "type": "string",
            "format": "color",
            "nullable": true
          },
          "textPrimary": {
            "type": "string",
            "format": "color",
            "nullable": true
          },
          "textDanger": {
            "type": "string",
            "format": "color",
            "nullable": true
          },
          "interactiveAccent": {
            "type": "string",
            "format": "color",
            "nullable": true
          },
          "navigationAccent": {
            "type": "string",
            "format": "color",
            "nullable": true
          },
          "buttonPrimary": {
            "type": "string",
            "format": "color",
            "nullable": true
          }
        }
      },
      "EnvironmentOut": {
        "type": "object",
        "required": [
          "createdAt",
          "eventTypes",
          "settings",
          "transformationTemplates"
        ],
        "properties": {
          "version": {
            "default": 1,
            "type": "integer",
            "format": "int"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "eventTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventTypeOut"
            }
          },
          "settings": {
            "type": "object",
            "nullable": true
          },
          "transformationTemplates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConnectorOut"
            }
          }
        }
      },
      "ConnectorOut": {
        "type": "object",
        "required": [
          "createdAt",
          "description",
          "id",
          "instructions",
          "kind",
          "logo",
          "name",
          "orgId",
          "transformation",
          "updatedAt"
        ],
        "properties": {
          "id": {
            "description": "The TransformationTemplate's ID.",
            "type": "string",
            "maxLength": 34,
            "minLength": 34,
            "pattern": "^trtmpl_[A-Za-z0-9]{27}$",
            "example": "trtmpl_1srOrx2ZWZBpBUvZwXKQmoEYga2"
          },
          "orgId": {
            "description": "The Organization's ID.",
            "type": "string",
            "maxLength": 31,
            "minLength": 31,
            "pattern": "^org_[A-Za-z0-9]{27}$",
            "example": "org_1srOrx2ZWZBpBUvZwXKQmoEYga2"
          },
          "kind": {
            "$ref": "#/components/schemas/ConnectorKind"
          },
          "name": {
            "type": "string"
          },
          "logo": {
            "type": "string",
            "format": "uri"
          },
          "description": {
            "type": "string"
          },
          "instructions": {
            "type": "string"
          },
          "instructionsLink": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "filterTypes": {
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            },
            "minItems": 1,
            "uniqueItems": true,
            "nullable": true,
            "example": [
              "user.signup",
              "user.deleted"
            ]
          },
          "transformation": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "featureFlag": {
            "type": "string",
            "maxLength": 256,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "cool-new-feature",
            "nullable": true
          }
        }
      },
      "ConnectorKind": {
        "type": "string",
        "enum": [
          "Custom",
          "CustomerIO",
          "Discord",
          "Hubspot",
          "Inngest",
          "Salesforce",
          "Segment",
          "Slack",
          "Teams",
          "TriggerDev",
          "Windmill",
          "Zapier"
        ]
      },
      "EnvironmentIn": {
        "type": "object",
        "properties": {
          "eventTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventTypeIn"
            },
            "nullable": true
          },
          "settings": {
            "type": "object",
            "nullable": true
          },
          "connectors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConnectorIn"
            },
            "nullable": true
          }
        }
      },
      "ConnectorIn": {
        "type": "object",
        "required": [
          "logo",
          "name",
          "transformation"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "logo": {
            "type": "string",
            "format": "uri"
          },
          "description": {
            "default": "",
            "type": "string"
          },
          "kind": {
            "default": "Custom",
            "$ref": "#/components/schemas/ConnectorKind"
          },
          "instructions": {
            "default": "",
            "type": "string"
          },
          "instructionsLink": {
            "default": null,
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "filterTypes": {
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            },
            "minItems": 1,
            "uniqueItems": true,
            "nullable": true,
            "example": [
              "user.signup",
              "user.deleted"
            ]
          },
          "transformation": {
            "type": "string",
            "maxLength": 51200,
            "minLength": 10
          },
          "featureFlag": {
            "type": "string",
            "maxLength": 256,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "cool-new-feature",
            "nullable": true
          }
        }
      },
      "ListResponse_BackgroundTaskOut_": {
        "type": "object",
        "required": [
          "data",
          "done",
          "iterator"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BackgroundTaskOut"
            }
          },
          "iterator": {
            "type": "string",
            "nullable": true,
            "example": "iterator"
          },
          "prevIterator": {
            "type": "string",
            "nullable": true,
            "example": "-iterator"
          },
          "done": {
            "type": "boolean"
          }
        }
      },
      "BackgroundTaskOut": {
        "type": "object",
        "required": [
          "data",
          "id",
          "status",
          "task"
        ],
        "properties": {
          "data": {
            "type": "object"
          },
          "id": {
            "description": "The QueueBackgroundTask's ID.",
            "type": "string",
            "maxLength": 33,
            "minLength": 33,
            "pattern": "^qtask_[A-Za-z0-9]{27}$",
            "example": "qtask_1srOrx2ZWZBpBUvZwXKQmoEYga2"
          },
          "status": {
            "$ref": "#/components/schemas/BackgroundTaskStatus"
          },
          "task": {
            "$ref": "#/components/schemas/BackgroundTaskType"
          }
        }
      },
      "EventStreamOut": {
        "type": "object",
        "required": [
          "data",
          "done",
          "iterator"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventOut"
            }
          },
          "iterator": {
            "type": "string"
          },
          "done": {
            "type": "boolean"
          }
        }
      },
      "EventOut": {
        "type": "object",
        "required": [
          "payload",
          "timestamp"
        ],
        "properties": {
          "eventType": {
            "description": "The event type's name",
            "type": "string",
            "maxLength": 256,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "user.signup",
            "nullable": true
          },
          "payload": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CreateStreamIn": {
        "type": "object",
        "required": [
          "events"
        ],
        "properties": {
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventIn"
            }
          },
          "stream": {
            "description": "Optionally creates a new Stream alongside the events.\n\n If the stream id or uid that is used in the path already exists, this argument is ignored.",
            "$ref": "#/components/schemas/StreamIn",
            "nullable": true
          }
        }
      },
      "EventIn": {
        "type": "object",
        "required": [
          "payload"
        ],
        "properties": {
          "eventType": {
            "description": "The event type's name",
            "type": "string",
            "maxLength": 256,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "user.signup",
            "nullable": true
          },
          "payload": {
            "type": "string"
          }
        }
      },
      "StreamIn": {
        "type": "object",
        "required": [
          "description"
        ],
        "properties": {
          "description": {
            "description": "The stream's description.",
            "type": "string",
            "minLength": 1
          },
          "uid": {
            "description": "An optional unique identifier for the stream.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!strm_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          }
        }
      },
      "CreateStreamOut": {
        "type": "object"
      },
      "StreamOut": {
        "type": "object",
        "required": [
          "createdAt",
          "id",
          "updatedAt"
        ],
        "properties": {
          "id": {
            "description": "The stream's ID.",
            "type": "string",
            "maxLength": 27,
            "minLength": 27,
            "pattern": "^strm_[A-Za-z0-9]{22}$",
            "example": "strm_2yZwUhtgs5Ai8T9yRQJXA"
          },
          "uid": {
            "description": "The stream's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!strm_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "description": {
            "description": "The stream's description.",
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ListResponse_StreamOut_": {
        "type": "object",
        "required": [
          "data",
          "done",
          "iterator"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StreamOut"
            }
          },
          "iterator": {
            "type": "string",
            "nullable": true,
            "example": "iterator"
          },
          "prevIterator": {
            "type": "string",
            "nullable": true,
            "example": "-iterator"
          },
          "done": {
            "type": "boolean"
          }
        }
      },
      "StreamPatch": {
        "type": "object",
        "properties": {
          "description": {
            "description": "The Stream's description.",
            "type": "string"
          },
          "uid": {
            "description": "An optional unique identifier for the stream.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!strm_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          }
        }
      },
      "ListResponse_StreamSinkOut_": {
        "type": "object",
        "required": [
          "data",
          "done",
          "iterator"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StreamSinkOut"
            }
          },
          "iterator": {
            "type": "string",
            "nullable": true,
            "example": "iterator"
          },
          "prevIterator": {
            "type": "string",
            "nullable": true,
            "example": "-iterator"
          },
          "done": {
            "type": "boolean"
          }
        }
      },
      "StreamSinkOut": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/StreamSinkOut_azureBlobStorage"
          },
          {
            "$ref": "#/components/schemas/StreamSinkOut_otelV1HttpTrace"
          },
          {
            "$ref": "#/components/schemas/StreamSinkOut_http"
          },
          {
            "$ref": "#/components/schemas/StreamSinkOut_amazonS3"
          },
          {
            "$ref": "#/components/schemas/StreamSinkOut_snowflake"
          },
          {
            "$ref": "#/components/schemas/StreamSinkOut_googleCloudStorage"
          },
          {
            "$ref": "#/components/schemas/StreamSinkOut_redshift"
          },
          {
            "$ref": "#/components/schemas/StreamSinkOut_bigQuery"
          },
          {
            "$ref": "#/components/schemas/StreamSinkOut_rabbitMq"
          },
          {
            "$ref": "#/components/schemas/StreamSinkOut_sqs"
          },
          {
            "$ref": "#/components/schemas/StreamSinkOut_kafka"
          },
          {
            "$ref": "#/components/schemas/StreamSinkOut_eventBridge"
          },
          {
            "$ref": "#/components/schemas/StreamSinkOut_sns"
          }
        ],
        "required": [
          "batchSize",
          "createdAt",
          "format",
          "id",
          "maxWaitSecs",
          "status",
          "updatedAt"
        ],
        "properties": {
          "id": {
            "description": "The sink's ID.",
            "type": "string",
            "maxLength": 27,
            "minLength": 27,
            "pattern": "^sink_[A-Za-z0-9]{22}$",
            "example": "sink_2yZwUhtgs5Ai8T9yRQJXA"
          },
          "uid": {
            "description": "The sink's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!sink_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "format": {
            "$ref": "#/components/schemas/SinkPayloadFormat"
          },
          "status": {
            "$ref": "#/components/schemas/SinkStatus"
          },
          "currentIterator": {
            "type": "string",
            "nullable": true
          },
          "failureReason": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "batchSize": {
            "type": "integer",
            "format": "int32"
          },
          "maxWaitSecs": {
            "type": "integer",
            "format": "int32"
          },
          "eventTypes": {
            "default": [],
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            }
          }
        },
        "discriminator": {
          "mapping": {
            "amazonS3": "#/components/schemas/StreamSinkOut_amazonS3",
            "azureBlobStorage": "#/components/schemas/StreamSinkOut_azureBlobStorage",
            "bigQuery": "#/components/schemas/StreamSinkOut_bigQuery",
            "eventBridge": "#/components/schemas/StreamSinkOut_eventBridge",
            "googleCloudStorage": "#/components/schemas/StreamSinkOut_googleCloudStorage",
            "http": "#/components/schemas/StreamSinkOut_http",
            "kafka": "#/components/schemas/StreamSinkOut_kafka",
            "otelV1HttpTrace": "#/components/schemas/StreamSinkOut_otelV1HttpTrace",
            "rabbitMq": "#/components/schemas/StreamSinkOut_rabbitMq",
            "redshift": "#/components/schemas/StreamSinkOut_redshift",
            "snowflake": "#/components/schemas/StreamSinkOut_snowflake",
            "sns": "#/components/schemas/StreamSinkOut_sns",
            "sqs": "#/components/schemas/StreamSinkOut_sqs"
          },
          "propertyName": "type"
        }
      },
      "SinkPayloadFormat": {
        "type": "string",
        "enum": [
          "json"
        ]
      },
      "SinkStatus": {
        "type": "string",
        "enum": [
          "enabled",
          "paused",
          "disabled",
          "retrying"
        ]
      },
      "AzureBlobStorageConfig": {
        "type": "object",
        "required": [
          "accessKey",
          "account",
          "container"
        ],
        "properties": {
          "container": {
            "type": "string"
          },
          "account": {
            "type": "string"
          },
          "accessKey": {
            "type": "string"
          }
        }
      },
      "SinkOtelV1Config": {
        "type": "object",
        "required": [
          "url"
        ],
        "properties": {
          "url": {
            "type": "string",
            "format": "uri"
          }
        }
      },
      "SinkHttpConfig": {
        "type": "object",
        "required": [
          "url"
        ],
        "properties": {
          "url": {
            "type": "string",
            "format": "uri"
          },
          "headers": {
            "default": {},
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "key": {
            "default": null,
            "type": "string",
            "nullable": true
          }
        }
      },
      "S3Config": {
        "type": "object",
        "required": [
          "accessKeyId",
          "bucket",
          "region",
          "secretAccessKey"
        ],
        "properties": {
          "bucket": {
            "type": "string"
          },
          "accessKeyId": {
            "type": "string"
          },
          "secretAccessKey": {
            "type": "string"
          },
          "region": {
            "type": "string"
          }
        }
      },
      "SnowflakeConfig": {
        "description": "Configuration parameters for defining a Snowflake sink.",
        "type": "object",
        "required": [
          "accountIdentifier",
          "privateKey",
          "userId"
        ],
        "properties": {
          "privateKey": {
            "description": "PEM-encoded private key used for signing token-based requests to the Snowflake API.\n\nBeginning/end delimiters are not required.",
            "type": "string"
          },
          "accountIdentifier": {
            "description": "Snowflake account identifier, which includes both the organization and account IDs separated by a hyphen.",
            "type": "string"
          },
          "userId": {
            "description": "The Snowflake user id.",
            "type": "string"
          },
          "dbName": {
            "description": "Database name.\n\nOnly required if not using transformations.",
            "type": "string"
          },
          "schemaName": {
            "description": "Schema name.\n\nOnly required if not using transformations.",
            "type": "string"
          },
          "tableName": {
            "description": "Table name.\n\nOnly required if not using transformations.",
            "type": "string"
          }
        }
      },
      "GoogleCloudStorageConfig": {
        "description": "Configuration for a Google Cloud Storage sink.\n\nWrite stream events into the named bucket using the supplied Google Cloud credentials.",
        "type": "object",
        "required": [
          "bucket",
          "credentials"
        ],
        "properties": {
          "bucket": {
            "type": "string"
          },
          "credentials": {
            "description": "Google Cloud Credentials JSON Object as a string.",
            "type": "string"
          }
        }
      },
      "RedshiftConfig": {
        "description": "Configuration parameters for defining a Redshift sink.",
        "type": "object",
        "required": [
          "accessKeyId",
          "clusterIdentifier",
          "dbUser",
          "region",
          "secretAccessKey"
        ],
        "properties": {
          "accessKeyId": {
            "type": "string"
          },
          "secretAccessKey": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "dbUser": {
            "type": "string"
          },
          "clusterIdentifier": {
            "type": "string"
          },
          "dbName": {
            "description": "Database name.\n\nOnly required if not using transformations.",
            "type": "string"
          },
          "schemaName": {
            "description": "Schema name.\n\nOnly used if not using transformations.",
            "type": "string",
            "nullable": true
          },
          "tableName": {
            "description": "Table name.\n\nOnly required if not using transformations.",
            "type": "string"
          }
        }
      },
      "BigQueryConfig": {
        "description": "Configuration for a Google Cloud BigQuery sink.",
        "type": "object",
        "required": [
          "credentials",
          "datasetId",
          "projectId",
          "tableId"
        ],
        "properties": {
          "projectId": {
            "type": "string"
          },
          "datasetId": {
            "type": "string"
          },
          "tableId": {
            "type": "string"
          },
          "credentials": {
            "description": "Google Cloud Credentials JSON Object as a string.",
            "type": "string"
          }
        }
      },
      "RabbitMqConfig": {
        "description": "Configuration for a RabbitMq sink.",
        "type": "object",
        "required": [
          "routingKey",
          "uri"
        ],
        "properties": {
          "uri": {
            "type": "string"
          },
          "routingKey": {
            "type": "string"
          }
        }
      },
      "SqsConfig": {
        "description": "Configuration for an SQS sink.",
        "type": "object",
        "required": [
          "accessKeyId",
          "queueUrl",
          "region",
          "secretAccessKey"
        ],
        "properties": {
          "queueUrl": {
            "type": "string",
            "format": "uri"
          },
          "region": {
            "type": "string"
          },
          "accessKeyId": {
            "type": "string"
          },
          "secretAccessKey": {
            "type": "string"
          }
        }
      },
      "KafkaSinkConfig": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/KafkaSinkConfig_saslSsl"
          }
        ],
        "required": [
          "brokers",
          "topic"
        ],
        "properties": {
          "brokers": {
            "type": "string"
          },
          "topic": {
            "type": "string"
          }
        },
        "discriminator": {
          "mapping": {
            "saslSsl": "#/components/schemas/KafkaSinkConfig_saslSsl"
          },
          "propertyName": "securityProtocol"
        }
      },
      "EventBridgeConfig": {
        "type": "object",
        "required": [
          "accessKeyId",
          "eventBusName",
          "region",
          "secretAccessKey"
        ],
        "properties": {
          "eventBusName": {
            "description": "The name or ARN of the event bus to receive the event",
            "type": "string"
          },
          "detailType": {
            "description": "Free-form string, with a maximum of 128 characters",
            "default": "application/json",
            "type": "string",
            "maxLength": 128,
            "example": "ResourceGroups Resource State Change"
          },
          "accessKeyId": {
            "type": "string"
          },
          "secretAccessKey": {
            "type": "string"
          },
          "region": {
            "type": "string"
          }
        }
      },
      "SnsConfig": {
        "description": "Configuration for a SNS sink.",
        "type": "object",
        "required": [
          "accessKeyId",
          "region",
          "secretAccessKey",
          "topicArn"
        ],
        "properties": {
          "topicArn": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "accessKeyId": {
            "type": "string"
          },
          "secretAccessKey": {
            "type": "string"
          }
        }
      },
      "StreamSinkIn": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/StreamSinkIn_azureBlobStorage"
          },
          {
            "$ref": "#/components/schemas/StreamSinkIn_otelV1HttpTrace"
          },
          {
            "$ref": "#/components/schemas/StreamSinkIn_http"
          },
          {
            "$ref": "#/components/schemas/StreamSinkIn_amazonS3"
          },
          {
            "$ref": "#/components/schemas/StreamSinkIn_snowflake"
          },
          {
            "$ref": "#/components/schemas/StreamSinkIn_googleCloudStorage"
          },
          {
            "$ref": "#/components/schemas/StreamSinkIn_redshift"
          },
          {
            "$ref": "#/components/schemas/StreamSinkIn_bigQuery"
          },
          {
            "$ref": "#/components/schemas/StreamSinkIn_rabbitMq"
          },
          {
            "$ref": "#/components/schemas/StreamSinkIn_sqs"
          },
          {
            "$ref": "#/components/schemas/StreamSinkIn_kafka"
          },
          {
            "$ref": "#/components/schemas/StreamSinkIn_eventBridge"
          },
          {
            "$ref": "#/components/schemas/StreamSinkIn_sns"
          }
        ],
        "required": [
          "format"
        ],
        "properties": {
          "uid": {
            "description": "An optional unique identifier for the sink.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!sink_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "format": {
            "description": "The format of data sent to the sink. When events are dispatched to the sink, we will attempt to send them in the preferred format. (Note that for some sink types, such as `amazonS3`, the format is ignored.)",
            "$ref": "#/components/schemas/SinkPayloadFormat"
          },
          "status": {
            "description": "Whether the sink will receive events.\n\nIf the sink is `enabled`, any events posted to the stream will be dispatched to the Sink in the same order that events were posted to the stream.\n\nIf the sink is `paused`, events will *not* be dispatched to the sink until the sink is reenabled.",
            "default": "enabled",
            "$ref": "#/components/schemas/SinkStatusIn"
          },
          "batchSize": {
            "description": "How many events we will attempt to accumulate before sending a request to the Sink.",
            "default": 100,
            "type": "integer",
            "format": "uint16",
            "maximum": 1000.0,
            "minimum": 0.0
          },
          "maxWaitSecs": {
            "description": "How many seconds we will wait to accumulate events of `batchSize`, before sending a request to the Sink. For example, with a `batchSize` of 100 and `maxWaitSecs` of 10, we will wait _at most_ 10 seconds before sending a request to the Sink. If 100 events accumulate faster than 10 seconds, we will send the request to the Sink as soon as possible.",
            "default": 0,
            "type": "integer",
            "format": "uint16",
            "maximum": 3600.0,
            "minimum": 0.0
          },
          "eventTypes": {
            "description": "A list of event types that filter which events are dispatched to the Sink. An empty list (or null) will not filter out any events.",
            "default": [],
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            }
          }
        },
        "discriminator": {
          "mapping": {
            "amazonS3": "#/components/schemas/StreamSinkIn_amazonS3",
            "azureBlobStorage": "#/components/schemas/StreamSinkIn_azureBlobStorage",
            "bigQuery": "#/components/schemas/StreamSinkIn_bigQuery",
            "eventBridge": "#/components/schemas/StreamSinkIn_eventBridge",
            "googleCloudStorage": "#/components/schemas/StreamSinkIn_googleCloudStorage",
            "http": "#/components/schemas/StreamSinkIn_http",
            "kafka": "#/components/schemas/StreamSinkIn_kafka",
            "otelV1HttpTrace": "#/components/schemas/StreamSinkIn_otelV1HttpTrace",
            "rabbitMq": "#/components/schemas/StreamSinkIn_rabbitMq",
            "redshift": "#/components/schemas/StreamSinkIn_redshift",
            "snowflake": "#/components/schemas/StreamSinkIn_snowflake",
            "sns": "#/components/schemas/StreamSinkIn_sns",
            "sqs": "#/components/schemas/StreamSinkIn_sqs"
          },
          "propertyName": "type"
        }
      },
      "SinkStatusIn": {
        "type": "string",
        "enum": [
          "enabled",
          "disabled"
        ]
      },
      "StreamSinkPatch": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/StreamSinkPatch_azureBlobStorage"
          },
          {
            "$ref": "#/components/schemas/StreamSinkPatch_otelV1HttpTrace"
          },
          {
            "$ref": "#/components/schemas/StreamSinkPatch_http"
          },
          {
            "$ref": "#/components/schemas/StreamSinkPatch_amazonS3"
          },
          {
            "$ref": "#/components/schemas/StreamSinkPatch_snowflake"
          },
          {
            "$ref": "#/components/schemas/StreamSinkPatch_googleCloudStorage"
          },
          {
            "$ref": "#/components/schemas/StreamSinkPatch_redshift"
          },
          {
            "$ref": "#/components/schemas/StreamSinkPatch_bigQuery"
          },
          {
            "$ref": "#/components/schemas/StreamSinkPatch_rabbitMq"
          },
          {
            "$ref": "#/components/schemas/StreamSinkPatch_sqs"
          },
          {
            "$ref": "#/components/schemas/StreamSinkPatch_kafka"
          },
          {
            "$ref": "#/components/schemas/StreamSinkPatch_eventBridge"
          },
          {
            "$ref": "#/components/schemas/StreamSinkPatch_sns"
          }
        ],
        "properties": {
          "uid": {
            "description": "The StreamSink's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!sink_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "format": {
            "default": null,
            "$ref": "#/components/schemas/SinkPayloadFormat",
            "nullable": true
          },
          "status": {
            "default": null,
            "$ref": "#/components/schemas/SinkStatusIn",
            "nullable": true
          },
          "batchSize": {
            "default": null,
            "type": "integer",
            "format": "uint16",
            "maximum": 1000.0,
            "minimum": 0.0,
            "nullable": true
          },
          "maxWaitSecs": {
            "default": null,
            "type": "integer",
            "format": "uint16",
            "maximum": 3600.0,
            "minimum": 0.0,
            "nullable": true
          },
          "eventTypes": {
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            }
          }
        },
        "discriminator": {
          "mapping": {
            "amazonS3": "#/components/schemas/StreamSinkPatch_amazonS3",
            "azureBlobStorage": "#/components/schemas/StreamSinkPatch_azureBlobStorage",
            "bigQuery": "#/components/schemas/StreamSinkPatch_bigQuery",
            "eventBridge": "#/components/schemas/StreamSinkPatch_eventBridge",
            "googleCloudStorage": "#/components/schemas/StreamSinkPatch_googleCloudStorage",
            "http": "#/components/schemas/StreamSinkPatch_http",
            "kafka": "#/components/schemas/StreamSinkPatch_kafka",
            "otelV1HttpTrace": "#/components/schemas/StreamSinkPatch_otelV1HttpTrace",
            "rabbitMq": "#/components/schemas/StreamSinkPatch_rabbitMq",
            "redshift": "#/components/schemas/StreamSinkPatch_redshift",
            "snowflake": "#/components/schemas/StreamSinkPatch_snowflake",
            "sns": "#/components/schemas/StreamSinkPatch_sns",
            "sqs": "#/components/schemas/StreamSinkPatch_sqs"
          },
          "propertyName": "type"
        }
      },
      "SinkTransformationOut": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "nullable": true
          },
          "enabled": {
            "default": true,
            "type": "boolean"
          }
        }
      },
      "SinkTransformIn": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "maxLength": 51200,
            "minLength": 10,
            "nullable": true
          },
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "EmptyResponse": {
        "type": "object"
      },
      "SinkSecretOut": {
        "type": "object",
        "properties": {
          "key": {
            "description": "The endpoint's verification secret.\n\nFormat: `base64` encoded random bytes optionally prefixed with `whsec_`.\nIt is recommended to not set this and let the server generate the secret.",
            "type": "string",
            "pattern": "^(whsec_)?[a-zA-Z0-9+/=]{32,100}$",
            "example": "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD",
            "nullable": true
          }
        }
      },
      "HttpSinkHeadersPatchIn": {
        "type": "object",
        "required": [
          "headers"
        ],
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "example": {
              "X-Example": "123",
              "X-Foobar": "Bar"
            }
          }
        }
      },
      "StreamEventTypeIn": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "The event type's name",
            "type": "string",
            "maxLength": 256,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "user.signup"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "StreamEventTypeOut": {
        "type": "object",
        "required": [
          "createdAt",
          "name",
          "updatedAt"
        ],
        "properties": {
          "name": {
            "description": "The event type's name",
            "type": "string",
            "maxLength": 256,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "user.signup"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ListResponse_StreamEventTypeOut_": {
        "type": "object",
        "required": [
          "data",
          "done",
          "iterator"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StreamEventTypeOut"
            }
          },
          "iterator": {
            "type": "string",
            "nullable": true,
            "example": "iterator"
          },
          "prevIterator": {
            "type": "string",
            "nullable": true,
            "example": "-iterator"
          },
          "done": {
            "type": "boolean"
          }
        }
      },
      "StreamEventTypePatch": {
        "type": "object",
        "required": [
          "description"
        ],
        "properties": {
          "name": {
            "description": "The event type's name",
            "type": "string",
            "maxLength": 256,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "user.signup",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ListResponse_OperationalWebhookEndpointOut_": {
        "type": "object",
        "required": [
          "data",
          "done",
          "iterator"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OperationalWebhookEndpointOut"
            }
          },
          "iterator": {
            "type": "string",
            "nullable": true,
            "example": "iterator"
          },
          "prevIterator": {
            "type": "string",
            "nullable": true,
            "example": "-iterator"
          },
          "done": {
            "type": "boolean"
          }
        }
      },
      "OperationalWebhookEndpointOut": {
        "type": "object",
        "required": [
          "createdAt",
          "description",
          "id",
          "metadata",
          "updatedAt",
          "url"
        ],
        "properties": {
          "id": {
            "description": "The Endpoint's ID.",
            "type": "string",
            "maxLength": 30,
            "minLength": 30,
            "pattern": "^ep_[A-Za-z0-9]{27}$",
            "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2"
          },
          "description": {
            "description": "An example endpoint name.",
            "type": "string"
          },
          "rateLimit": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0.0,
            "nullable": true
          },
          "uid": {
            "description": "Optional unique identifier for the endpoint.",
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "maxLength": 65536,
            "minLength": 1,
            "example": "https://example.com/webhook/"
          },
          "disabled": {
            "default": false,
            "type": "boolean",
            "example": false
          },
          "filterTypes": {
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            },
            "minItems": 1,
            "uniqueItems": true,
            "nullable": true,
            "example": [
              "message.attempt.failing"
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "OperationalWebhookEndpointIn": {
        "type": "object",
        "required": [
          "url"
        ],
        "properties": {
          "description": {
            "default": "",
            "type": "string",
            "example": "An example endpoint name"
          },
          "rateLimit": {
            "type": "integer",
            "format": "uint16",
            "minimum": 1.0,
            "nullable": true
          },
          "uid": {
            "description": "Optional unique identifier for the endpoint.",
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "maxLength": 65536,
            "minLength": 1,
            "example": "https://example.com/webhook/"
          },
          "disabled": {
            "default": false,
            "type": "boolean",
            "example": false
          },
          "filterTypes": {
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            },
            "minItems": 1,
            "uniqueItems": true,
            "nullable": true,
            "example": [
              "message.attempt.failing"
            ]
          },
          "secret": {
            "description": "The endpoint's verification secret.\n\nFormat: `base64` encoded random bytes optionally prefixed with `whsec_`.\nIt is recommended to not set this and let the server generate the secret.",
            "type": "string",
            "pattern": "^(whsec_)?[a-zA-Z0-9+/=]{32,100}$",
            "example": "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD",
            "nullable": true
          },
          "metadata": {
            "default": {},
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "OperationalWebhookEndpointUpdate": {
        "type": "object",
        "required": [
          "url"
        ],
        "properties": {
          "description": {
            "default": "",
            "type": "string",
            "example": "An example endpoint name"
          },
          "rateLimit": {
            "type": "integer",
            "format": "uint16",
            "minimum": 1.0,
            "nullable": true
          },
          "uid": {
            "description": "Optional unique identifier for the endpoint.",
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "maxLength": 65536,
            "minLength": 1,
            "example": "https://example.com/webhook/"
          },
          "disabled": {
            "default": false,
            "type": "boolean",
            "example": false
          },
          "filterTypes": {
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            },
            "minItems": 1,
            "uniqueItems": true,
            "nullable": true,
            "example": [
              "message.attempt.failing"
            ]
          },
          "metadata": {
            "default": {},
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "OperationalWebhookEndpointSecretOut": {
        "type": "object",
        "required": [
          "key"
        ],
        "properties": {
          "key": {
            "description": "The endpoint's verification secret.\n\nFormat: `base64` encoded random bytes optionally prefixed with `whsec_`.\nIt is recommended to not set this and let the server generate the secret.",
            "type": "string",
            "pattern": "^(whsec_)?[a-zA-Z0-9+/=]{32,100}$",
            "example": "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD"
          }
        }
      },
      "OperationalWebhookEndpointSecretIn": {
        "type": "object",
        "properties": {
          "key": {
            "description": "The endpoint's verification secret.\n\nFormat: `base64` encoded random bytes optionally prefixed with `whsec_`.\nIt is recommended to not set this and let the server generate the secret.",
            "default": null,
            "type": "string",
            "pattern": "^(whsec_)?[a-zA-Z0-9+/=]{32,100}$",
            "example": "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD",
            "nullable": true
          }
        }
      },
      "OperationalWebhookEndpointHeadersOut": {
        "type": "object",
        "required": [
          "headers",
          "sensitive"
        ],
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "example": {
              "X-Example": "123",
              "X-Foobar": "Bar"
            }
          },
          "sensitive": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "uniqueItems": true,
            "example": [
              "Authorization"
            ]
          }
        }
      },
      "OperationalWebhookEndpointHeadersIn": {
        "type": "object",
        "required": [
          "headers"
        ],
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "example": {
              "X-Example": "123",
              "X-Foobar": "Bar"
            }
          }
        }
      },
      "ListResponse_ConnectorOut_": {
        "type": "object",
        "required": [
          "data",
          "done",
          "iterator"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConnectorOut"
            }
          },
          "iterator": {
            "type": "string",
            "nullable": true,
            "example": "iterator"
          },
          "prevIterator": {
            "type": "string",
            "nullable": true,
            "example": "-iterator"
          },
          "done": {
            "type": "boolean"
          }
        }
      },
      "TemplateUpdate": {
        "type": "object",
        "required": [
          "logo",
          "transformation"
        ],
        "properties": {
          "name": {
            "default": "",
            "type": "string"
          },
          "logo": {
            "type": "string",
            "format": "uri"
          },
          "description": {
            "default": "",
            "type": "string"
          },
          "kind": {
            "default": "Custom",
            "$ref": "#/components/schemas/ConnectorKind"
          },
          "instructions": {
            "default": "",
            "type": "string"
          },
          "instructionsLink": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "filterTypes": {
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            },
            "minItems": 1,
            "uniqueItems": true,
            "nullable": true,
            "example": [
              "user.signup",
              "user.deleted"
            ]
          },
          "transformation": {
            "type": "string",
            "maxLength": 51200,
            "minLength": 10
          },
          "featureFlag": {
            "type": "string",
            "maxLength": 256,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "cool-new-feature",
            "nullable": true
          }
        }
      },
      "ConnectorPatch": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "logo": {
            "type": "string",
            "format": "uri"
          },
          "description": {
            "type": "string"
          },
          "kind": {
            "$ref": "#/components/schemas/ConnectorKind"
          },
          "instructions": {
            "type": "string"
          },
          "instructionsLink": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "filterTypes": {
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            },
            "minItems": 1,
            "uniqueItems": true,
            "nullable": true,
            "example": [
              "user.signup",
              "user.deleted"
            ]
          },
          "transformation": {
            "type": "string",
            "maxLength": 51200,
            "minLength": 10
          },
          "featureFlag": {
            "type": "string",
            "maxLength": 256,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "cool-new-feature",
            "nullable": true
          }
        }
      },
      "TransformationSimulateIn": {
        "type": "object",
        "required": [
          "code",
          "eventType",
          "payload"
        ],
        "properties": {
          "code": {
            "type": "string",
            "maxLength": 51200,
            "minLength": 10
          },
          "eventType": {
            "description": "The event type's name",
            "type": "string",
            "maxLength": 256,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "user.signup"
          },
          "channels": {
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 128,
              "pattern": "^[a-zA-Z0-9\\-_.:]+$",
              "example": "project_1337"
            },
            "uniqueItems": true,
            "nullable": true
          },
          "payload": {
            "type": "object"
          }
        }
      },
      "TransformationSimulateOut": {
        "type": "object",
        "required": [
          "payload",
          "url"
        ],
        "properties": {
          "url": {
            "type": "string",
            "format": "uri",
            "maxLength": 65536,
            "minLength": 1
          },
          "payload": {
            "type": "string"
          },
          "method": {
            "$ref": "#/components/schemas/TransformationHttpMethod",
            "nullable": true
          }
        }
      },
      "GenerateIn": {
        "type": "object",
        "required": [
          "prompt"
        ],
        "properties": {
          "prompt": {
            "type": "string"
          }
        }
      },
      "GenerateOut": {
        "type": "object",
        "required": [
          "choices",
          "created",
          "id",
          "model",
          "object"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "object": {
            "type": "string"
          },
          "created": {
            "type": "integer",
            "format": "int64"
          },
          "model": {
            "type": "string"
          },
          "choices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompletionChoice"
            }
          }
        }
      },
      "CompletionChoice": {
        "type": "object",
        "required": [
          "finish_reason",
          "index",
          "message"
        ],
        "properties": {
          "message": {
            "$ref": "#/components/schemas/CompletionMessage"
          },
          "index": {
            "type": "integer",
            "format": "int64"
          },
          "finish_reason": {
            "type": "string"
          }
        }
      },
      "CompletionMessage": {
        "type": "object",
        "required": [
          "content",
          "role"
        ],
        "properties": {
          "content": {
            "type": "string"
          },
          "role": {
            "type": "string"
          }
        }
      },
      "OAuthPayloadIn": {
        "type": "object",
        "required": [
          "code",
          "redirectUri"
        ],
        "properties": {
          "code": {
            "type": "string"
          },
          "redirectUri": {
            "type": "string"
          }
        }
      },
      "IncomingWebhookPayloadOut": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "nullable": true
          },
          "incomingWebhookUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "channel": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "OAuthPayloadOut": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "nullable": true
          },
          "refreshToken": {
            "type": "string",
            "nullable": true
          },
          "error": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "HubspotOauthConfigIn": {
        "type": "object",
        "required": [
          "refresh_token"
        ],
        "properties": {
          "refresh_token": {
            "type": "string"
          }
        }
      },
      "MessageBroadcastIn": {
        "type": "object",
        "required": [
          "eventType",
          "payload"
        ],
        "properties": {
          "eventId": {
            "description": "Optional unique identifier for the message.",
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "eventType": {
            "description": "The event type's name",
            "type": "string",
            "maxLength": 256,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "user.signup"
          },
          "payload": {
            "type": "object",
            "example": {
              "email": "test@example.com",
              "type": "user.created",
              "username": "test_user"
            }
          },
          "channels": {
            "description": "List of free-form identifiers that endpoints can filter by.",
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 128,
              "pattern": "^[a-zA-Z0-9\\-_.:]+$",
              "example": "project_1337"
            },
            "maxItems": 10,
            "minItems": 1,
            "uniqueItems": true,
            "nullable": true,
            "example": [
              "project_123",
              "group_2"
            ]
          },
          "payloadRetentionPeriod": {
            "description": "Optional number of days to retain the message payload. Defaults to 90. Note that this is mutually exclusive with `payloadRetentionHours`.",
            "default": 90,
            "type": "integer",
            "format": "int64",
            "maximum": 90.0,
            "minimum": 1.0,
            "nullable": true,
            "example": 90
          },
          "payloadRetentionHours": {
            "description": "Optional number of hours to retain the message payload. Note that this is mutually exclusive with `payloadRetentionPeriod`.",
            "default": null,
            "type": "integer",
            "format": "int64",
            "maximum": 2160.0,
            "minimum": 1.0,
            "nullable": true
          }
        }
      },
      "MessageBroadcastOut": {
        "type": "object",
        "required": [
          "id",
          "status",
          "task"
        ],
        "properties": {
          "id": {
            "description": "The QueueBackgroundTask's ID.",
            "type": "string",
            "maxLength": 33,
            "minLength": 33,
            "pattern": "^qtask_[A-Za-z0-9]{27}$",
            "example": "qtask_1srOrx2ZWZBpBUvZwXKQmoEYga2"
          },
          "status": {
            "$ref": "#/components/schemas/BackgroundTaskStatus"
          },
          "task": {
            "$ref": "#/components/schemas/BackgroundTaskType"
          }
        }
      },
      "RotatedUrlOut": {
        "type": "object",
        "required": [
          "url"
        ],
        "properties": {
          "url": {
            "type": "string"
          }
        }
      },
      "OneTimeTokenIn": {
        "type": "object",
        "required": [
          "oneTimeToken"
        ],
        "properties": {
          "oneTimeToken": {
            "type": "string"
          }
        }
      },
      "OneTimeTokenOut": {
        "type": "object",
        "required": [
          "token"
        ],
        "properties": {
          "token": {
            "type": "string"
          }
        }
      },
      "InboundPathParams": {
        "type": "object",
        "required": [
          "app_id",
          "inbound_token"
        ],
        "properties": {
          "app_id": {
            "description": "The Application's ID or UID.",
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "unique-identifier"
          },
          "inbound_token": {
            "type": "string"
          }
        }
      },
      "IngestSourceOut_generic-webhook": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "generic-webhook"
            ]
          },
          "id": {
            "description": "The Source's ID.",
            "type": "string",
            "maxLength": 26,
            "minLength": 26,
            "pattern": "^src_[A-Za-z0-9]{22}$",
            "example": "src_2yZwUhtgs5Ai8T9yRQJXA"
          },
          "uid": {
            "description": "The Source's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!src_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "ingestUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "IngestSourceOut_cron": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "cron"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/CronConfig"
          },
          "id": {
            "description": "The Source's ID.",
            "type": "string",
            "maxLength": 26,
            "minLength": 26,
            "pattern": "^src_[A-Za-z0-9]{22}$",
            "example": "src_2yZwUhtgs5Ai8T9yRQJXA"
          },
          "uid": {
            "description": "The Source's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!src_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "ingestUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "IngestSourceOut_adobe-sign": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "adobe-sign"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/AdobeSignConfigOut"
          },
          "id": {
            "description": "The Source's ID.",
            "type": "string",
            "maxLength": 26,
            "minLength": 26,
            "pattern": "^src_[A-Za-z0-9]{22}$",
            "example": "src_2yZwUhtgs5Ai8T9yRQJXA"
          },
          "uid": {
            "description": "The Source's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!src_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "ingestUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "IngestSourceOut_beehiiv": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "beehiiv"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/SvixConfigOut"
          },
          "id": {
            "description": "The Source's ID.",
            "type": "string",
            "maxLength": 26,
            "minLength": 26,
            "pattern": "^src_[A-Za-z0-9]{22}$",
            "example": "src_2yZwUhtgs5Ai8T9yRQJXA"
          },
          "uid": {
            "description": "The Source's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!src_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "ingestUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "IngestSourceOut_brex": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "brex"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/SvixConfigOut"
          },
          "id": {
            "description": "The Source's ID.",
            "type": "string",
            "maxLength": 26,
            "minLength": 26,
            "pattern": "^src_[A-Za-z0-9]{22}$",
            "example": "src_2yZwUhtgs5Ai8T9yRQJXA"
          },
          "uid": {
            "description": "The Source's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!src_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "ingestUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "IngestSourceOut_clerk": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "clerk"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/SvixConfigOut"
          },
          "id": {
            "description": "The Source's ID.",
            "type": "string",
            "maxLength": 26,
            "minLength": 26,
            "pattern": "^src_[A-Za-z0-9]{22}$",
            "example": "src_2yZwUhtgs5Ai8T9yRQJXA"
          },
          "uid": {
            "description": "The Source's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!src_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "ingestUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "IngestSourceOut_docusign": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "docusign"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/DocusignConfigOut"
          },
          "id": {
            "description": "The Source's ID.",
            "type": "string",
            "maxLength": 26,
            "minLength": 26,
            "pattern": "^src_[A-Za-z0-9]{22}$",
            "example": "src_2yZwUhtgs5Ai8T9yRQJXA"
          },
          "uid": {
            "description": "The Source's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!src_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "ingestUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "IngestSourceOut_github": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "github"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/GithubConfigOut"
          },
          "id": {
            "description": "The Source's ID.",
            "type": "string",
            "maxLength": 26,
            "minLength": 26,
            "pattern": "^src_[A-Za-z0-9]{22}$",
            "example": "src_2yZwUhtgs5Ai8T9yRQJXA"
          },
          "uid": {
            "description": "The Source's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!src_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "ingestUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "IngestSourceOut_guesty": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "guesty"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/SvixConfigOut"
          },
          "id": {
            "description": "The Source's ID.",
            "type": "string",
            "maxLength": 26,
            "minLength": 26,
            "pattern": "^src_[A-Za-z0-9]{22}$",
            "example": "src_2yZwUhtgs5Ai8T9yRQJXA"
          },
          "uid": {
            "description": "The Source's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!src_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "ingestUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "IngestSourceOut_hubspot": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "hubspot"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/HubspotConfigOut"
          },
          "id": {
            "description": "The Source's ID.",
            "type": "string",
            "maxLength": 26,
            "minLength": 26,
            "pattern": "^src_[A-Za-z0-9]{22}$",
            "example": "src_2yZwUhtgs5Ai8T9yRQJXA"
          },
          "uid": {
            "description": "The Source's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!src_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "ingestUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "IngestSourceOut_incident-io": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "incident-io"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/SvixConfigOut"
          },
          "id": {
            "description": "The Source's ID.",
            "type": "string",
            "maxLength": 26,
            "minLength": 26,
            "pattern": "^src_[A-Za-z0-9]{22}$",
            "example": "src_2yZwUhtgs5Ai8T9yRQJXA"
          },
          "uid": {
            "description": "The Source's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!src_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "ingestUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "IngestSourceOut_lithic": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "lithic"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/SvixConfigOut"
          },
          "id": {
            "description": "The Source's ID.",
            "type": "string",
            "maxLength": 26,
            "minLength": 26,
            "pattern": "^src_[A-Za-z0-9]{22}$",
            "example": "src_2yZwUhtgs5Ai8T9yRQJXA"
          },
          "uid": {
            "description": "The Source's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!src_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "ingestUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "IngestSourceOut_nash": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "nash"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/SvixConfigOut"
          },
          "id": {
            "description": "The Source's ID.",
            "type": "string",
            "maxLength": 26,
            "minLength": 26,
            "pattern": "^src_[A-Za-z0-9]{22}$",
            "example": "src_2yZwUhtgs5Ai8T9yRQJXA"
          },
          "uid": {
            "description": "The Source's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!src_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "ingestUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "IngestSourceOut_pleo": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "pleo"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/SvixConfigOut"
          },
          "id": {
            "description": "The Source's ID.",
            "type": "string",
            "maxLength": 26,
            "minLength": 26,
            "pattern": "^src_[A-Za-z0-9]{22}$",
            "example": "src_2yZwUhtgs5Ai8T9yRQJXA"
          },
          "uid": {
            "description": "The Source's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!src_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "ingestUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "IngestSourceOut_replicate": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "replicate"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/SvixConfigOut"
          },
          "id": {
            "description": "The Source's ID.",
            "type": "string",
            "maxLength": 26,
            "minLength": 26,
            "pattern": "^src_[A-Za-z0-9]{22}$",
            "example": "src_2yZwUhtgs5Ai8T9yRQJXA"
          },
          "uid": {
            "description": "The Source's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!src_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "ingestUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "IngestSourceOut_resend": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "resend"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/SvixConfigOut"
          },
          "id": {
            "description": "The Source's ID.",
            "type": "string",
            "maxLength": 26,
            "minLength": 26,
            "pattern": "^src_[A-Za-z0-9]{22}$",
            "example": "src_2yZwUhtgs5Ai8T9yRQJXA"
          },
          "uid": {
            "description": "The Source's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!src_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "ingestUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "IngestSourceOut_safebase": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "safebase"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/SvixConfigOut"
          },
          "id": {
            "description": "The Source's ID.",
            "type": "string",
            "maxLength": 26,
            "minLength": 26,
            "pattern": "^src_[A-Za-z0-9]{22}$",
            "example": "src_2yZwUhtgs5Ai8T9yRQJXA"
          },
          "uid": {
            "description": "The Source's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!src_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "ingestUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "IngestSourceOut_sardine": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "sardine"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/SvixConfigOut"
          },
          "id": {
            "description": "The Source's ID.",
            "type": "string",
            "maxLength": 26,
            "minLength": 26,
            "pattern": "^src_[A-Za-z0-9]{22}$",
            "example": "src_2yZwUhtgs5Ai8T9yRQJXA"
          },
          "uid": {
            "description": "The Source's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!src_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "ingestUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "IngestSourceOut_segment": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "segment"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/SegmentConfigOut"
          },
          "id": {
            "description": "The Source's ID.",
            "type": "string",
            "maxLength": 26,
            "minLength": 26,
            "pattern": "^src_[A-Za-z0-9]{22}$",
            "example": "src_2yZwUhtgs5Ai8T9yRQJXA"
          },
          "uid": {
            "description": "The Source's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!src_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "ingestUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "IngestSourceOut_shopify": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "shopify"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/ShopifyConfigOut"
          },
          "id": {
            "description": "The Source's ID.",
            "type": "string",
            "maxLength": 26,
            "minLength": 26,
            "pattern": "^src_[A-Za-z0-9]{22}$",
            "example": "src_2yZwUhtgs5Ai8T9yRQJXA"
          },
          "uid": {
            "description": "The Source's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!src_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "ingestUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "IngestSourceOut_slack": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "slack"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/SlackConfigOut"
          },
          "id": {
            "description": "The Source's ID.",
            "type": "string",
            "maxLength": 26,
            "minLength": 26,
            "pattern": "^src_[A-Za-z0-9]{22}$",
            "example": "src_2yZwUhtgs5Ai8T9yRQJXA"
          },
          "uid": {
            "description": "The Source's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!src_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "ingestUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "IngestSourceOut_stripe": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "stripe"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/StripeConfigOut"
          },
          "id": {
            "description": "The Source's ID.",
            "type": "string",
            "maxLength": 26,
            "minLength": 26,
            "pattern": "^src_[A-Za-z0-9]{22}$",
            "example": "src_2yZwUhtgs5Ai8T9yRQJXA"
          },
          "uid": {
            "description": "The Source's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!src_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "ingestUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "IngestSourceOut_stych": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "stych"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/SvixConfigOut"
          },
          "id": {
            "description": "The Source's ID.",
            "type": "string",
            "maxLength": 26,
            "minLength": 26,
            "pattern": "^src_[A-Za-z0-9]{22}$",
            "example": "src_2yZwUhtgs5Ai8T9yRQJXA"
          },
          "uid": {
            "description": "The Source's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!src_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "ingestUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "IngestSourceOut_svix": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "svix"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/SvixConfigOut"
          },
          "id": {
            "description": "The Source's ID.",
            "type": "string",
            "maxLength": 26,
            "minLength": 26,
            "pattern": "^src_[A-Za-z0-9]{22}$",
            "example": "src_2yZwUhtgs5Ai8T9yRQJXA"
          },
          "uid": {
            "description": "The Source's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!src_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "ingestUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "IngestSourceOut_zoom": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "zoom"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/ZoomConfigOut"
          },
          "id": {
            "description": "The Source's ID.",
            "type": "string",
            "maxLength": 26,
            "minLength": 26,
            "pattern": "^src_[A-Za-z0-9]{22}$",
            "example": "src_2yZwUhtgs5Ai8T9yRQJXA"
          },
          "uid": {
            "description": "The Source's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!src_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "ingestUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "IngestSourceIn_generic-webhook": {
        "description": "Webhooks with no verification scheme or special handling.",
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "generic-webhook"
            ]
          },
          "name": {
            "type": "string",
            "maxLength": 256,
            "minLength": 2
          },
          "uid": {
            "description": "The Source's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!src_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          }
        }
      },
      "IngestSourceIn_cron": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "cron"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/CronConfig"
          },
          "name": {
            "type": "string",
            "maxLength": 256,
            "minLength": 2
          },
          "uid": {
            "description": "The Source's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!src_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          }
        }
      },
      "IngestSourceIn_adobe-sign": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "adobe-sign"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/AdobeSignConfig"
          },
          "name": {
            "type": "string",
            "maxLength": 256,
            "minLength": 2
          },
          "uid": {
            "description": "The Source's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!src_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          }
        }
      },
      "IngestSourceIn_beehiiv": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "beehiiv"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/SvixConfig"
          },
          "name": {
            "type": "string",
            "maxLength": 256,
            "minLength": 2
          },
          "uid": {
            "description": "The Source's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!src_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          }
        }
      },
      "IngestSourceIn_brex": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "brex"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/SvixConfig"
          },
          "name": {
            "type": "string",
            "maxLength": 256,
            "minLength": 2
          },
          "uid": {
            "description": "The Source's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!src_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          }
        }
      },
      "IngestSourceIn_clerk": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "clerk"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/SvixConfig"
          },
          "name": {
            "type": "string",
            "maxLength": 256,
            "minLength": 2
          },
          "uid": {
            "description": "The Source's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!src_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          }
        }
      },
      "IngestSourceIn_docusign": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "docusign"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/DocusignConfig"
          },
          "name": {
            "type": "string",
            "maxLength": 256,
            "minLength": 2
          },
          "uid": {
            "description": "The Source's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!src_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          }
        }
      },
      "IngestSourceIn_github": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "github"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/GithubConfig"
          },
          "name": {
            "type": "string",
            "maxLength": 256,
            "minLength": 2
          },
          "uid": {
            "description": "The Source's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!src_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          }
        }
      },
      "IngestSourceIn_guesty": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "guesty"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/SvixConfig"
          },
          "name": {
            "type": "string",
            "maxLength": 256,
            "minLength": 2
          },
          "uid": {
            "description": "The Source's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!src_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          }
        }
      },
      "IngestSourceIn_hubspot": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "hubspot"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/HubspotConfig"
          },
          "name": {
            "type": "string",
            "maxLength": 256,
            "minLength": 2
          },
          "uid": {
            "description": "The Source's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!src_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          }
        }
      },
      "IngestSourceIn_incident-io": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "incident-io"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/SvixConfig"
          },
          "name": {
            "type": "string",
            "maxLength": 256,
            "minLength": 2
          },
          "uid": {
            "description": "The Source's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!src_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          }
        }
      },
      "IngestSourceIn_lithic": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "lithic"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/SvixConfig"
          },
          "name": {
            "type": "string",
            "maxLength": 256,
            "minLength": 2
          },
          "uid": {
            "description": "The Source's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!src_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          }
        }
      },
      "IngestSourceIn_nash": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "nash"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/SvixConfig"
          },
          "name": {
            "type": "string",
            "maxLength": 256,
            "minLength": 2
          },
          "uid": {
            "description": "The Source's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!src_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          }
        }
      },
      "IngestSourceIn_pleo": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "pleo"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/SvixConfig"
          },
          "name": {
            "type": "string",
            "maxLength": 256,
            "minLength": 2
          },
          "uid": {
            "description": "The Source's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!src_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          }
        }
      },
      "IngestSourceIn_replicate": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "replicate"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/SvixConfig"
          },
          "name": {
            "type": "string",
            "maxLength": 256,
            "minLength": 2
          },
          "uid": {
            "description": "The Source's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!src_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          }
        }
      },
      "IngestSourceIn_resend": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "resend"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/SvixConfig"
          },
          "name": {
            "type": "string",
            "maxLength": 256,
            "minLength": 2
          },
          "uid": {
            "description": "The Source's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!src_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          }
        }
      },
      "IngestSourceIn_safebase": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "safebase"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/SvixConfig"
          },
          "name": {
            "type": "string",
            "maxLength": 256,
            "minLength": 2
          },
          "uid": {
            "description": "The Source's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!src_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          }
        }
      },
      "IngestSourceIn_sardine": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "sardine"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/SvixConfig"
          },
          "name": {
            "type": "string",
            "maxLength": 256,
            "minLength": 2
          },
          "uid": {
            "description": "The Source's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!src_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          }
        }
      },
      "IngestSourceIn_segment": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "segment"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/SegmentConfig"
          },
          "name": {
            "type": "string",
            "maxLength": 256,
            "minLength": 2
          },
          "uid": {
            "description": "The Source's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!src_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          }
        }
      },
      "IngestSourceIn_shopify": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "shopify"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/ShopifyConfig"
          },
          "name": {
            "type": "string",
            "maxLength": 256,
            "minLength": 2
          },
          "uid": {
            "description": "The Source's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!src_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          }
        }
      },
      "IngestSourceIn_slack": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "slack"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/SlackConfig"
          },
          "name": {
            "type": "string",
            "maxLength": 256,
            "minLength": 2
          },
          "uid": {
            "description": "The Source's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!src_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          }
        }
      },
      "IngestSourceIn_stripe": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "stripe"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/StripeConfig"
          },
          "name": {
            "type": "string",
            "maxLength": 256,
            "minLength": 2
          },
          "uid": {
            "description": "The Source's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!src_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          }
        }
      },
      "IngestSourceIn_stych": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "stych"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/SvixConfig"
          },
          "name": {
            "type": "string",
            "maxLength": 256,
            "minLength": 2
          },
          "uid": {
            "description": "The Source's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!src_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          }
        }
      },
      "IngestSourceIn_svix": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "svix"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/SvixConfig"
          },
          "name": {
            "type": "string",
            "maxLength": 256,
            "minLength": 2
          },
          "uid": {
            "description": "The Source's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!src_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          }
        }
      },
      "IngestSourceIn_zoom": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "zoom"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/ZoomConfig"
          },
          "name": {
            "type": "string",
            "maxLength": 256,
            "minLength": 2
          },
          "uid": {
            "description": "The Source's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!src_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          }
        }
      },
      "SinkIn_http": {
        "type": "object",
        "required": [
          "type",
          "url"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "http"
            ]
          },
          "url": {
            "type": "string",
            "format": "uri"
          },
          "description": {
            "default": "",
            "type": "string",
            "example": "An example endpoint name"
          },
          "rateLimit": {
            "type": "integer",
            "format": "uint16",
            "minimum": 1.0,
            "nullable": true
          },
          "uid": {
            "description": "Optional unique identifier for the sink.",
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "secret": {
            "description": "The endpoint's verification secret.\n\nFormat: `base64` encoded random bytes optionally prefixed with `whsec_`.\nIt is recommended to not set this and let the server generate the secret.",
            "type": "string",
            "pattern": "^(whsec_)?[a-zA-Z0-9+/=]{32,100}$",
            "example": "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD",
            "nullable": true
          },
          "disabled": {
            "default": false,
            "type": "boolean",
            "example": false
          },
          "filterTypes": {
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            },
            "minItems": 1,
            "uniqueItems": true,
            "nullable": true,
            "example": [
              "user.signup",
              "user.deleted"
            ]
          },
          "channels": {
            "description": "List of message channels this sink listens to (omit for all).",
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 128,
              "pattern": "^[a-zA-Z0-9\\-_.:]+$",
              "example": "project_1337"
            },
            "maxItems": 10,
            "minItems": 1,
            "uniqueItems": true,
            "nullable": true,
            "example": [
              "project_123",
              "group_2"
            ]
          },
          "metadata": {
            "default": {},
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "SinkIn_eventStream": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "eventStream"
            ]
          },
          "description": {
            "default": "",
            "type": "string",
            "example": "An example endpoint name"
          },
          "rateLimit": {
            "type": "integer",
            "format": "uint16",
            "minimum": 1.0,
            "nullable": true
          },
          "uid": {
            "description": "Optional unique identifier for the sink.",
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "secret": {
            "description": "The endpoint's verification secret.\n\nFormat: `base64` encoded random bytes optionally prefixed with `whsec_`.\nIt is recommended to not set this and let the server generate the secret.",
            "type": "string",
            "pattern": "^(whsec_)?[a-zA-Z0-9+/=]{32,100}$",
            "example": "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD",
            "nullable": true
          },
          "disabled": {
            "default": false,
            "type": "boolean",
            "example": false
          },
          "filterTypes": {
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            },
            "minItems": 1,
            "uniqueItems": true,
            "nullable": true,
            "example": [
              "user.signup",
              "user.deleted"
            ]
          },
          "channels": {
            "description": "List of message channels this sink listens to (omit for all).",
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 128,
              "pattern": "^[a-zA-Z0-9\\-_.:]+$",
              "example": "project_1337"
            },
            "maxItems": 10,
            "minItems": 1,
            "uniqueItems": true,
            "nullable": true,
            "example": [
              "project_123",
              "group_2"
            ]
          },
          "metadata": {
            "default": {},
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "SinkOut_http": {
        "type": "object",
        "required": [
          "type",
          "url"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "http"
            ]
          },
          "url": {
            "type": "string",
            "format": "uri"
          },
          "id": {
            "description": "The Endpoint's ID.",
            "type": "string",
            "maxLength": 30,
            "minLength": 30,
            "pattern": "^ep_[A-Za-z0-9]{27}$",
            "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "description": {
            "description": "An example endpoint name.",
            "type": "string"
          },
          "rateLimit": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0.0,
            "nullable": true
          },
          "uid": {
            "description": "Optional unique identifier for the endpoint.",
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "disabled": {
            "default": false,
            "type": "boolean",
            "example": false
          },
          "filterTypes": {
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            },
            "minItems": 1,
            "uniqueItems": true,
            "nullable": true,
            "example": [
              "user.signup",
              "user.deleted"
            ]
          },
          "channels": {
            "description": "List of message channels this endpoint listens to (omit for all).",
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 128,
              "pattern": "^[a-zA-Z0-9\\-_.:]+$",
              "example": "project_1337"
            },
            "maxItems": 10,
            "minItems": 1,
            "uniqueItems": true,
            "nullable": true,
            "example": [
              "project_123",
              "group_2"
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "SinkOut_eventStream": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "eventStream"
            ]
          },
          "id": {
            "description": "The Endpoint's ID.",
            "type": "string",
            "maxLength": 30,
            "minLength": 30,
            "pattern": "^ep_[A-Za-z0-9]{27}$",
            "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "description": {
            "description": "An example endpoint name.",
            "type": "string"
          },
          "rateLimit": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0.0,
            "nullable": true
          },
          "uid": {
            "description": "Optional unique identifier for the endpoint.",
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_.]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "disabled": {
            "default": false,
            "type": "boolean",
            "example": false
          },
          "filterTypes": {
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            },
            "minItems": 1,
            "uniqueItems": true,
            "nullable": true,
            "example": [
              "user.signup",
              "user.deleted"
            ]
          },
          "channels": {
            "description": "List of message channels this endpoint listens to (omit for all).",
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 128,
              "pattern": "^[a-zA-Z0-9\\-_.:]+$",
              "example": "project_1337"
            },
            "maxItems": 10,
            "minItems": 1,
            "uniqueItems": true,
            "nullable": true,
            "example": [
              "project_123",
              "group_2"
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "StreamSinkOut_azureBlobStorage": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "azureBlobStorage"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/AzureBlobStorageConfig"
          },
          "id": {
            "description": "The sink's ID.",
            "type": "string",
            "maxLength": 27,
            "minLength": 27,
            "pattern": "^sink_[A-Za-z0-9]{22}$",
            "example": "sink_2yZwUhtgs5Ai8T9yRQJXA"
          },
          "uid": {
            "description": "The sink's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!sink_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "format": {
            "$ref": "#/components/schemas/SinkPayloadFormat"
          },
          "status": {
            "$ref": "#/components/schemas/SinkStatus"
          },
          "currentIterator": {
            "type": "string",
            "nullable": true
          },
          "failureReason": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "batchSize": {
            "type": "integer",
            "format": "int32"
          },
          "maxWaitSecs": {
            "type": "integer",
            "format": "int32"
          },
          "eventTypes": {
            "default": [],
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            }
          }
        }
      },
      "StreamSinkOut_otelV1HttpTrace": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "otelV1HttpTrace"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/SinkOtelV1Config"
          },
          "id": {
            "description": "The sink's ID.",
            "type": "string",
            "maxLength": 27,
            "minLength": 27,
            "pattern": "^sink_[A-Za-z0-9]{22}$",
            "example": "sink_2yZwUhtgs5Ai8T9yRQJXA"
          },
          "uid": {
            "description": "The sink's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!sink_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "format": {
            "$ref": "#/components/schemas/SinkPayloadFormat"
          },
          "status": {
            "$ref": "#/components/schemas/SinkStatus"
          },
          "currentIterator": {
            "type": "string",
            "nullable": true
          },
          "failureReason": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "batchSize": {
            "type": "integer",
            "format": "int32"
          },
          "maxWaitSecs": {
            "type": "integer",
            "format": "int32"
          },
          "eventTypes": {
            "default": [],
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            }
          }
        }
      },
      "StreamSinkOut_http": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "http"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/SinkHttpConfig"
          },
          "id": {
            "description": "The sink's ID.",
            "type": "string",
            "maxLength": 27,
            "minLength": 27,
            "pattern": "^sink_[A-Za-z0-9]{22}$",
            "example": "sink_2yZwUhtgs5Ai8T9yRQJXA"
          },
          "uid": {
            "description": "The sink's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!sink_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "format": {
            "$ref": "#/components/schemas/SinkPayloadFormat"
          },
          "status": {
            "$ref": "#/components/schemas/SinkStatus"
          },
          "currentIterator": {
            "type": "string",
            "nullable": true
          },
          "failureReason": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "batchSize": {
            "type": "integer",
            "format": "int32"
          },
          "maxWaitSecs": {
            "type": "integer",
            "format": "int32"
          },
          "eventTypes": {
            "default": [],
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            }
          }
        }
      },
      "StreamSinkOut_amazonS3": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "amazonS3"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/S3Config"
          },
          "id": {
            "description": "The sink's ID.",
            "type": "string",
            "maxLength": 27,
            "minLength": 27,
            "pattern": "^sink_[A-Za-z0-9]{22}$",
            "example": "sink_2yZwUhtgs5Ai8T9yRQJXA"
          },
          "uid": {
            "description": "The sink's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!sink_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "format": {
            "$ref": "#/components/schemas/SinkPayloadFormat"
          },
          "status": {
            "$ref": "#/components/schemas/SinkStatus"
          },
          "currentIterator": {
            "type": "string",
            "nullable": true
          },
          "failureReason": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "batchSize": {
            "type": "integer",
            "format": "int32"
          },
          "maxWaitSecs": {
            "type": "integer",
            "format": "int32"
          },
          "eventTypes": {
            "default": [],
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            }
          }
        }
      },
      "StreamSinkOut_snowflake": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "snowflake"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/SnowflakeConfig"
          },
          "id": {
            "description": "The sink's ID.",
            "type": "string",
            "maxLength": 27,
            "minLength": 27,
            "pattern": "^sink_[A-Za-z0-9]{22}$",
            "example": "sink_2yZwUhtgs5Ai8T9yRQJXA"
          },
          "uid": {
            "description": "The sink's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!sink_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "format": {
            "$ref": "#/components/schemas/SinkPayloadFormat"
          },
          "status": {
            "$ref": "#/components/schemas/SinkStatus"
          },
          "currentIterator": {
            "type": "string",
            "nullable": true
          },
          "failureReason": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "batchSize": {
            "type": "integer",
            "format": "int32"
          },
          "maxWaitSecs": {
            "type": "integer",
            "format": "int32"
          },
          "eventTypes": {
            "default": [],
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            }
          }
        }
      },
      "StreamSinkOut_googleCloudStorage": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "googleCloudStorage"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/GoogleCloudStorageConfig"
          },
          "id": {
            "description": "The sink's ID.",
            "type": "string",
            "maxLength": 27,
            "minLength": 27,
            "pattern": "^sink_[A-Za-z0-9]{22}$",
            "example": "sink_2yZwUhtgs5Ai8T9yRQJXA"
          },
          "uid": {
            "description": "The sink's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!sink_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "format": {
            "$ref": "#/components/schemas/SinkPayloadFormat"
          },
          "status": {
            "$ref": "#/components/schemas/SinkStatus"
          },
          "currentIterator": {
            "type": "string",
            "nullable": true
          },
          "failureReason": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "batchSize": {
            "type": "integer",
            "format": "int32"
          },
          "maxWaitSecs": {
            "type": "integer",
            "format": "int32"
          },
          "eventTypes": {
            "default": [],
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            }
          }
        }
      },
      "StreamSinkOut_redshift": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "redshift"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/RedshiftConfig"
          },
          "id": {
            "description": "The sink's ID.",
            "type": "string",
            "maxLength": 27,
            "minLength": 27,
            "pattern": "^sink_[A-Za-z0-9]{22}$",
            "example": "sink_2yZwUhtgs5Ai8T9yRQJXA"
          },
          "uid": {
            "description": "The sink's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!sink_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "format": {
            "$ref": "#/components/schemas/SinkPayloadFormat"
          },
          "status": {
            "$ref": "#/components/schemas/SinkStatus"
          },
          "currentIterator": {
            "type": "string",
            "nullable": true
          },
          "failureReason": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "batchSize": {
            "type": "integer",
            "format": "int32"
          },
          "maxWaitSecs": {
            "type": "integer",
            "format": "int32"
          },
          "eventTypes": {
            "default": [],
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            }
          }
        }
      },
      "StreamSinkOut_bigQuery": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "bigQuery"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/BigQueryConfig"
          },
          "id": {
            "description": "The sink's ID.",
            "type": "string",
            "maxLength": 27,
            "minLength": 27,
            "pattern": "^sink_[A-Za-z0-9]{22}$",
            "example": "sink_2yZwUhtgs5Ai8T9yRQJXA"
          },
          "uid": {
            "description": "The sink's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!sink_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "format": {
            "$ref": "#/components/schemas/SinkPayloadFormat"
          },
          "status": {
            "$ref": "#/components/schemas/SinkStatus"
          },
          "currentIterator": {
            "type": "string",
            "nullable": true
          },
          "failureReason": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "batchSize": {
            "type": "integer",
            "format": "int32"
          },
          "maxWaitSecs": {
            "type": "integer",
            "format": "int32"
          },
          "eventTypes": {
            "default": [],
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            }
          }
        }
      },
      "StreamSinkOut_rabbitMq": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "rabbitMq"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/RabbitMqConfig"
          },
          "id": {
            "description": "The sink's ID.",
            "type": "string",
            "maxLength": 27,
            "minLength": 27,
            "pattern": "^sink_[A-Za-z0-9]{22}$",
            "example": "sink_2yZwUhtgs5Ai8T9yRQJXA"
          },
          "uid": {
            "description": "The sink's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!sink_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "format": {
            "$ref": "#/components/schemas/SinkPayloadFormat"
          },
          "status": {
            "$ref": "#/components/schemas/SinkStatus"
          },
          "currentIterator": {
            "type": "string",
            "nullable": true
          },
          "failureReason": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "batchSize": {
            "type": "integer",
            "format": "int32"
          },
          "maxWaitSecs": {
            "type": "integer",
            "format": "int32"
          },
          "eventTypes": {
            "default": [],
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            }
          }
        }
      },
      "StreamSinkOut_sqs": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "sqs"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/SqsConfig"
          },
          "id": {
            "description": "The sink's ID.",
            "type": "string",
            "maxLength": 27,
            "minLength": 27,
            "pattern": "^sink_[A-Za-z0-9]{22}$",
            "example": "sink_2yZwUhtgs5Ai8T9yRQJXA"
          },
          "uid": {
            "description": "The sink's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!sink_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "format": {
            "$ref": "#/components/schemas/SinkPayloadFormat"
          },
          "status": {
            "$ref": "#/components/schemas/SinkStatus"
          },
          "currentIterator": {
            "type": "string",
            "nullable": true
          },
          "failureReason": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "batchSize": {
            "type": "integer",
            "format": "int32"
          },
          "maxWaitSecs": {
            "type": "integer",
            "format": "int32"
          },
          "eventTypes": {
            "default": [],
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            }
          }
        }
      },
      "StreamSinkOut_kafka": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "kafka"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/KafkaSinkConfig"
          },
          "id": {
            "description": "The sink's ID.",
            "type": "string",
            "maxLength": 27,
            "minLength": 27,
            "pattern": "^sink_[A-Za-z0-9]{22}$",
            "example": "sink_2yZwUhtgs5Ai8T9yRQJXA"
          },
          "uid": {
            "description": "The sink's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!sink_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "format": {
            "$ref": "#/components/schemas/SinkPayloadFormat"
          },
          "status": {
            "$ref": "#/components/schemas/SinkStatus"
          },
          "currentIterator": {
            "type": "string",
            "nullable": true
          },
          "failureReason": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "batchSize": {
            "type": "integer",
            "format": "int32"
          },
          "maxWaitSecs": {
            "type": "integer",
            "format": "int32"
          },
          "eventTypes": {
            "default": [],
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            }
          }
        }
      },
      "StreamSinkOut_eventBridge": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "eventBridge"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/EventBridgeConfig"
          },
          "id": {
            "description": "The sink's ID.",
            "type": "string",
            "maxLength": 27,
            "minLength": 27,
            "pattern": "^sink_[A-Za-z0-9]{22}$",
            "example": "sink_2yZwUhtgs5Ai8T9yRQJXA"
          },
          "uid": {
            "description": "The sink's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!sink_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "format": {
            "$ref": "#/components/schemas/SinkPayloadFormat"
          },
          "status": {
            "$ref": "#/components/schemas/SinkStatus"
          },
          "currentIterator": {
            "type": "string",
            "nullable": true
          },
          "failureReason": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "batchSize": {
            "type": "integer",
            "format": "int32"
          },
          "maxWaitSecs": {
            "type": "integer",
            "format": "int32"
          },
          "eventTypes": {
            "default": [],
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            }
          }
        }
      },
      "StreamSinkOut_sns": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "sns"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/SnsConfig"
          },
          "id": {
            "description": "The sink's ID.",
            "type": "string",
            "maxLength": 27,
            "minLength": 27,
            "pattern": "^sink_[A-Za-z0-9]{22}$",
            "example": "sink_2yZwUhtgs5Ai8T9yRQJXA"
          },
          "uid": {
            "description": "The sink's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!sink_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "format": {
            "$ref": "#/components/schemas/SinkPayloadFormat"
          },
          "status": {
            "$ref": "#/components/schemas/SinkStatus"
          },
          "currentIterator": {
            "type": "string",
            "nullable": true
          },
          "failureReason": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "batchSize": {
            "type": "integer",
            "format": "int32"
          },
          "maxWaitSecs": {
            "type": "integer",
            "format": "int32"
          },
          "eventTypes": {
            "default": [],
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            }
          }
        }
      },
      "KafkaSinkConfig_saslSsl": {
        "type": "object",
        "required": [
          "password",
          "securityProtocol",
          "username"
        ],
        "properties": {
          "securityProtocol": {
            "type": "string",
            "enum": [
              "saslSsl"
            ]
          },
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "brokers": {
            "type": "string"
          },
          "topic": {
            "type": "string"
          }
        }
      },
      "StreamSinkIn_azureBlobStorage": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "azureBlobStorage"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/AzureBlobStorageConfig"
          },
          "uid": {
            "description": "An optional unique identifier for the sink.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!sink_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "format": {
            "description": "The format of data sent to the sink. When events are dispatched to the sink, we will attempt to send them in the preferred format. (Note that for some sink types, such as `amazonS3`, the format is ignored.)",
            "$ref": "#/components/schemas/SinkPayloadFormat"
          },
          "status": {
            "description": "Whether the sink will receive events.\n\nIf the sink is `enabled`, any events posted to the stream will be dispatched to the Sink in the same order that events were posted to the stream.\n\nIf the sink is `paused`, events will *not* be dispatched to the sink until the sink is reenabled.",
            "default": "enabled",
            "$ref": "#/components/schemas/SinkStatusIn"
          },
          "batchSize": {
            "description": "How many events we will attempt to accumulate before sending a request to the Sink.",
            "default": 100,
            "type": "integer",
            "format": "uint16",
            "maximum": 1000.0,
            "minimum": 0.0
          },
          "maxWaitSecs": {
            "description": "How many seconds we will wait to accumulate events of `batchSize`, before sending a request to the Sink. For example, with a `batchSize` of 100 and `maxWaitSecs` of 10, we will wait _at most_ 10 seconds before sending a request to the Sink. If 100 events accumulate faster than 10 seconds, we will send the request to the Sink as soon as possible.",
            "default": 0,
            "type": "integer",
            "format": "uint16",
            "maximum": 3600.0,
            "minimum": 0.0
          },
          "eventTypes": {
            "description": "A list of event types that filter which events are dispatched to the Sink. An empty list (or null) will not filter out any events.",
            "default": [],
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            }
          }
        }
      },
      "StreamSinkIn_otelV1HttpTrace": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "otelV1HttpTrace"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/SinkOtelV1Config"
          },
          "uid": {
            "description": "An optional unique identifier for the sink.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!sink_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "format": {
            "description": "The format of data sent to the sink. When events are dispatched to the sink, we will attempt to send them in the preferred format. (Note that for some sink types, such as `amazonS3`, the format is ignored.)",
            "$ref": "#/components/schemas/SinkPayloadFormat"
          },
          "status": {
            "description": "Whether the sink will receive events.\n\nIf the sink is `enabled`, any events posted to the stream will be dispatched to the Sink in the same order that events were posted to the stream.\n\nIf the sink is `paused`, events will *not* be dispatched to the sink until the sink is reenabled.",
            "default": "enabled",
            "$ref": "#/components/schemas/SinkStatusIn"
          },
          "batchSize": {
            "description": "How many events we will attempt to accumulate before sending a request to the Sink.",
            "default": 100,
            "type": "integer",
            "format": "uint16",
            "maximum": 1000.0,
            "minimum": 0.0
          },
          "maxWaitSecs": {
            "description": "How many seconds we will wait to accumulate events of `batchSize`, before sending a request to the Sink. For example, with a `batchSize` of 100 and `maxWaitSecs` of 10, we will wait _at most_ 10 seconds before sending a request to the Sink. If 100 events accumulate faster than 10 seconds, we will send the request to the Sink as soon as possible.",
            "default": 0,
            "type": "integer",
            "format": "uint16",
            "maximum": 3600.0,
            "minimum": 0.0
          },
          "eventTypes": {
            "description": "A list of event types that filter which events are dispatched to the Sink. An empty list (or null) will not filter out any events.",
            "default": [],
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            }
          }
        }
      },
      "StreamSinkIn_http": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "http"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/SinkHttpConfig"
          },
          "uid": {
            "description": "An optional unique identifier for the sink.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!sink_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "format": {
            "description": "The format of data sent to the sink. When events are dispatched to the sink, we will attempt to send them in the preferred format. (Note that for some sink types, such as `amazonS3`, the format is ignored.)",
            "$ref": "#/components/schemas/SinkPayloadFormat"
          },
          "status": {
            "description": "Whether the sink will receive events.\n\nIf the sink is `enabled`, any events posted to the stream will be dispatched to the Sink in the same order that events were posted to the stream.\n\nIf the sink is `paused`, events will *not* be dispatched to the sink until the sink is reenabled.",
            "default": "enabled",
            "$ref": "#/components/schemas/SinkStatusIn"
          },
          "batchSize": {
            "description": "How many events we will attempt to accumulate before sending a request to the Sink.",
            "default": 100,
            "type": "integer",
            "format": "uint16",
            "maximum": 1000.0,
            "minimum": 0.0
          },
          "maxWaitSecs": {
            "description": "How many seconds we will wait to accumulate events of `batchSize`, before sending a request to the Sink. For example, with a `batchSize` of 100 and `maxWaitSecs` of 10, we will wait _at most_ 10 seconds before sending a request to the Sink. If 100 events accumulate faster than 10 seconds, we will send the request to the Sink as soon as possible.",
            "default": 0,
            "type": "integer",
            "format": "uint16",
            "maximum": 3600.0,
            "minimum": 0.0
          },
          "eventTypes": {
            "description": "A list of event types that filter which events are dispatched to the Sink. An empty list (or null) will not filter out any events.",
            "default": [],
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            }
          }
        }
      },
      "StreamSinkIn_amazonS3": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "amazonS3"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/S3Config"
          },
          "uid": {
            "description": "An optional unique identifier for the sink.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!sink_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "format": {
            "description": "The format of data sent to the sink. When events are dispatched to the sink, we will attempt to send them in the preferred format. (Note that for some sink types, such as `amazonS3`, the format is ignored.)",
            "$ref": "#/components/schemas/SinkPayloadFormat"
          },
          "status": {
            "description": "Whether the sink will receive events.\n\nIf the sink is `enabled`, any events posted to the stream will be dispatched to the Sink in the same order that events were posted to the stream.\n\nIf the sink is `paused`, events will *not* be dispatched to the sink until the sink is reenabled.",
            "default": "enabled",
            "$ref": "#/components/schemas/SinkStatusIn"
          },
          "batchSize": {
            "description": "How many events we will attempt to accumulate before sending a request to the Sink.",
            "default": 100,
            "type": "integer",
            "format": "uint16",
            "maximum": 1000.0,
            "minimum": 0.0
          },
          "maxWaitSecs": {
            "description": "How many seconds we will wait to accumulate events of `batchSize`, before sending a request to the Sink. For example, with a `batchSize` of 100 and `maxWaitSecs` of 10, we will wait _at most_ 10 seconds before sending a request to the Sink. If 100 events accumulate faster than 10 seconds, we will send the request to the Sink as soon as possible.",
            "default": 0,
            "type": "integer",
            "format": "uint16",
            "maximum": 3600.0,
            "minimum": 0.0
          },
          "eventTypes": {
            "description": "A list of event types that filter which events are dispatched to the Sink. An empty list (or null) will not filter out any events.",
            "default": [],
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            }
          }
        }
      },
      "StreamSinkIn_snowflake": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "snowflake"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/SnowflakeConfig"
          },
          "uid": {
            "description": "An optional unique identifier for the sink.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!sink_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "format": {
            "description": "The format of data sent to the sink. When events are dispatched to the sink, we will attempt to send them in the preferred format. (Note that for some sink types, such as `amazonS3`, the format is ignored.)",
            "$ref": "#/components/schemas/SinkPayloadFormat"
          },
          "status": {
            "description": "Whether the sink will receive events.\n\nIf the sink is `enabled`, any events posted to the stream will be dispatched to the Sink in the same order that events were posted to the stream.\n\nIf the sink is `paused`, events will *not* be dispatched to the sink until the sink is reenabled.",
            "default": "enabled",
            "$ref": "#/components/schemas/SinkStatusIn"
          },
          "batchSize": {
            "description": "How many events we will attempt to accumulate before sending a request to the Sink.",
            "default": 100,
            "type": "integer",
            "format": "uint16",
            "maximum": 1000.0,
            "minimum": 0.0
          },
          "maxWaitSecs": {
            "description": "How many seconds we will wait to accumulate events of `batchSize`, before sending a request to the Sink. For example, with a `batchSize` of 100 and `maxWaitSecs` of 10, we will wait _at most_ 10 seconds before sending a request to the Sink. If 100 events accumulate faster than 10 seconds, we will send the request to the Sink as soon as possible.",
            "default": 0,
            "type": "integer",
            "format": "uint16",
            "maximum": 3600.0,
            "minimum": 0.0
          },
          "eventTypes": {
            "description": "A list of event types that filter which events are dispatched to the Sink. An empty list (or null) will not filter out any events.",
            "default": [],
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            }
          }
        }
      },
      "StreamSinkIn_googleCloudStorage": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "googleCloudStorage"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/GoogleCloudStorageConfig"
          },
          "uid": {
            "description": "An optional unique identifier for the sink.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!sink_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "format": {
            "description": "The format of data sent to the sink. When events are dispatched to the sink, we will attempt to send them in the preferred format. (Note that for some sink types, such as `amazonS3`, the format is ignored.)",
            "$ref": "#/components/schemas/SinkPayloadFormat"
          },
          "status": {
            "description": "Whether the sink will receive events.\n\nIf the sink is `enabled`, any events posted to the stream will be dispatched to the Sink in the same order that events were posted to the stream.\n\nIf the sink is `paused`, events will *not* be dispatched to the sink until the sink is reenabled.",
            "default": "enabled",
            "$ref": "#/components/schemas/SinkStatusIn"
          },
          "batchSize": {
            "description": "How many events we will attempt to accumulate before sending a request to the Sink.",
            "default": 100,
            "type": "integer",
            "format": "uint16",
            "maximum": 1000.0,
            "minimum": 0.0
          },
          "maxWaitSecs": {
            "description": "How many seconds we will wait to accumulate events of `batchSize`, before sending a request to the Sink. For example, with a `batchSize` of 100 and `maxWaitSecs` of 10, we will wait _at most_ 10 seconds before sending a request to the Sink. If 100 events accumulate faster than 10 seconds, we will send the request to the Sink as soon as possible.",
            "default": 0,
            "type": "integer",
            "format": "uint16",
            "maximum": 3600.0,
            "minimum": 0.0
          },
          "eventTypes": {
            "description": "A list of event types that filter which events are dispatched to the Sink. An empty list (or null) will not filter out any events.",
            "default": [],
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            }
          }
        }
      },
      "StreamSinkIn_redshift": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "redshift"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/RedshiftConfig"
          },
          "uid": {
            "description": "An optional unique identifier for the sink.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!sink_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "format": {
            "description": "The format of data sent to the sink. When events are dispatched to the sink, we will attempt to send them in the preferred format. (Note that for some sink types, such as `amazonS3`, the format is ignored.)",
            "$ref": "#/components/schemas/SinkPayloadFormat"
          },
          "status": {
            "description": "Whether the sink will receive events.\n\nIf the sink is `enabled`, any events posted to the stream will be dispatched to the Sink in the same order that events were posted to the stream.\n\nIf the sink is `paused`, events will *not* be dispatched to the sink until the sink is reenabled.",
            "default": "enabled",
            "$ref": "#/components/schemas/SinkStatusIn"
          },
          "batchSize": {
            "description": "How many events we will attempt to accumulate before sending a request to the Sink.",
            "default": 100,
            "type": "integer",
            "format": "uint16",
            "maximum": 1000.0,
            "minimum": 0.0
          },
          "maxWaitSecs": {
            "description": "How many seconds we will wait to accumulate events of `batchSize`, before sending a request to the Sink. For example, with a `batchSize` of 100 and `maxWaitSecs` of 10, we will wait _at most_ 10 seconds before sending a request to the Sink. If 100 events accumulate faster than 10 seconds, we will send the request to the Sink as soon as possible.",
            "default": 0,
            "type": "integer",
            "format": "uint16",
            "maximum": 3600.0,
            "minimum": 0.0
          },
          "eventTypes": {
            "description": "A list of event types that filter which events are dispatched to the Sink. An empty list (or null) will not filter out any events.",
            "default": [],
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            }
          }
        }
      },
      "StreamSinkIn_bigQuery": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "bigQuery"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/BigQueryConfig"
          },
          "uid": {
            "description": "An optional unique identifier for the sink.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!sink_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "format": {
            "description": "The format of data sent to the sink. When events are dispatched to the sink, we will attempt to send them in the preferred format. (Note that for some sink types, such as `amazonS3`, the format is ignored.)",
            "$ref": "#/components/schemas/SinkPayloadFormat"
          },
          "status": {
            "description": "Whether the sink will receive events.\n\nIf the sink is `enabled`, any events posted to the stream will be dispatched to the Sink in the same order that events were posted to the stream.\n\nIf the sink is `paused`, events will *not* be dispatched to the sink until the sink is reenabled.",
            "default": "enabled",
            "$ref": "#/components/schemas/SinkStatusIn"
          },
          "batchSize": {
            "description": "How many events we will attempt to accumulate before sending a request to the Sink.",
            "default": 100,
            "type": "integer",
            "format": "uint16",
            "maximum": 1000.0,
            "minimum": 0.0
          },
          "maxWaitSecs": {
            "description": "How many seconds we will wait to accumulate events of `batchSize`, before sending a request to the Sink. For example, with a `batchSize` of 100 and `maxWaitSecs` of 10, we will wait _at most_ 10 seconds before sending a request to the Sink. If 100 events accumulate faster than 10 seconds, we will send the request to the Sink as soon as possible.",
            "default": 0,
            "type": "integer",
            "format": "uint16",
            "maximum": 3600.0,
            "minimum": 0.0
          },
          "eventTypes": {
            "description": "A list of event types that filter which events are dispatched to the Sink. An empty list (or null) will not filter out any events.",
            "default": [],
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            }
          }
        }
      },
      "StreamSinkIn_rabbitMq": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "rabbitMq"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/RabbitMqConfig"
          },
          "uid": {
            "description": "An optional unique identifier for the sink.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!sink_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "format": {
            "description": "The format of data sent to the sink. When events are dispatched to the sink, we will attempt to send them in the preferred format. (Note that for some sink types, such as `amazonS3`, the format is ignored.)",
            "$ref": "#/components/schemas/SinkPayloadFormat"
          },
          "status": {
            "description": "Whether the sink will receive events.\n\nIf the sink is `enabled`, any events posted to the stream will be dispatched to the Sink in the same order that events were posted to the stream.\n\nIf the sink is `paused`, events will *not* be dispatched to the sink until the sink is reenabled.",
            "default": "enabled",
            "$ref": "#/components/schemas/SinkStatusIn"
          },
          "batchSize": {
            "description": "How many events we will attempt to accumulate before sending a request to the Sink.",
            "default": 100,
            "type": "integer",
            "format": "uint16",
            "maximum": 1000.0,
            "minimum": 0.0
          },
          "maxWaitSecs": {
            "description": "How many seconds we will wait to accumulate events of `batchSize`, before sending a request to the Sink. For example, with a `batchSize` of 100 and `maxWaitSecs` of 10, we will wait _at most_ 10 seconds before sending a request to the Sink. If 100 events accumulate faster than 10 seconds, we will send the request to the Sink as soon as possible.",
            "default": 0,
            "type": "integer",
            "format": "uint16",
            "maximum": 3600.0,
            "minimum": 0.0
          },
          "eventTypes": {
            "description": "A list of event types that filter which events are dispatched to the Sink. An empty list (or null) will not filter out any events.",
            "default": [],
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            }
          }
        }
      },
      "StreamSinkIn_sqs": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "sqs"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/SqsConfig"
          },
          "uid": {
            "description": "An optional unique identifier for the sink.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!sink_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "format": {
            "description": "The format of data sent to the sink. When events are dispatched to the sink, we will attempt to send them in the preferred format. (Note that for some sink types, such as `amazonS3`, the format is ignored.)",
            "$ref": "#/components/schemas/SinkPayloadFormat"
          },
          "status": {
            "description": "Whether the sink will receive events.\n\nIf the sink is `enabled`, any events posted to the stream will be dispatched to the Sink in the same order that events were posted to the stream.\n\nIf the sink is `paused`, events will *not* be dispatched to the sink until the sink is reenabled.",
            "default": "enabled",
            "$ref": "#/components/schemas/SinkStatusIn"
          },
          "batchSize": {
            "description": "How many events we will attempt to accumulate before sending a request to the Sink.",
            "default": 100,
            "type": "integer",
            "format": "uint16",
            "maximum": 1000.0,
            "minimum": 0.0
          },
          "maxWaitSecs": {
            "description": "How many seconds we will wait to accumulate events of `batchSize`, before sending a request to the Sink. For example, with a `batchSize` of 100 and `maxWaitSecs` of 10, we will wait _at most_ 10 seconds before sending a request to the Sink. If 100 events accumulate faster than 10 seconds, we will send the request to the Sink as soon as possible.",
            "default": 0,
            "type": "integer",
            "format": "uint16",
            "maximum": 3600.0,
            "minimum": 0.0
          },
          "eventTypes": {
            "description": "A list of event types that filter which events are dispatched to the Sink. An empty list (or null) will not filter out any events.",
            "default": [],
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            }
          }
        }
      },
      "StreamSinkIn_kafka": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "kafka"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/KafkaSinkConfig"
          },
          "uid": {
            "description": "An optional unique identifier for the sink.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!sink_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "format": {
            "description": "The format of data sent to the sink. When events are dispatched to the sink, we will attempt to send them in the preferred format. (Note that for some sink types, such as `amazonS3`, the format is ignored.)",
            "$ref": "#/components/schemas/SinkPayloadFormat"
          },
          "status": {
            "description": "Whether the sink will receive events.\n\nIf the sink is `enabled`, any events posted to the stream will be dispatched to the Sink in the same order that events were posted to the stream.\n\nIf the sink is `paused`, events will *not* be dispatched to the sink until the sink is reenabled.",
            "default": "enabled",
            "$ref": "#/components/schemas/SinkStatusIn"
          },
          "batchSize": {
            "description": "How many events we will attempt to accumulate before sending a request to the Sink.",
            "default": 100,
            "type": "integer",
            "format": "uint16",
            "maximum": 1000.0,
            "minimum": 0.0
          },
          "maxWaitSecs": {
            "description": "How many seconds we will wait to accumulate events of `batchSize`, before sending a request to the Sink. For example, with a `batchSize` of 100 and `maxWaitSecs` of 10, we will wait _at most_ 10 seconds before sending a request to the Sink. If 100 events accumulate faster than 10 seconds, we will send the request to the Sink as soon as possible.",
            "default": 0,
            "type": "integer",
            "format": "uint16",
            "maximum": 3600.0,
            "minimum": 0.0
          },
          "eventTypes": {
            "description": "A list of event types that filter which events are dispatched to the Sink. An empty list (or null) will not filter out any events.",
            "default": [],
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            }
          }
        }
      },
      "StreamSinkIn_eventBridge": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "eventBridge"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/EventBridgeConfig"
          },
          "uid": {
            "description": "An optional unique identifier for the sink.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!sink_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "format": {
            "description": "The format of data sent to the sink. When events are dispatched to the sink, we will attempt to send them in the preferred format. (Note that for some sink types, such as `amazonS3`, the format is ignored.)",
            "$ref": "#/components/schemas/SinkPayloadFormat"
          },
          "status": {
            "description": "Whether the sink will receive events.\n\nIf the sink is `enabled`, any events posted to the stream will be dispatched to the Sink in the same order that events were posted to the stream.\n\nIf the sink is `paused`, events will *not* be dispatched to the sink until the sink is reenabled.",
            "default": "enabled",
            "$ref": "#/components/schemas/SinkStatusIn"
          },
          "batchSize": {
            "description": "How many events we will attempt to accumulate before sending a request to the Sink.",
            "default": 100,
            "type": "integer",
            "format": "uint16",
            "maximum": 1000.0,
            "minimum": 0.0
          },
          "maxWaitSecs": {
            "description": "How many seconds we will wait to accumulate events of `batchSize`, before sending a request to the Sink. For example, with a `batchSize` of 100 and `maxWaitSecs` of 10, we will wait _at most_ 10 seconds before sending a request to the Sink. If 100 events accumulate faster than 10 seconds, we will send the request to the Sink as soon as possible.",
            "default": 0,
            "type": "integer",
            "format": "uint16",
            "maximum": 3600.0,
            "minimum": 0.0
          },
          "eventTypes": {
            "description": "A list of event types that filter which events are dispatched to the Sink. An empty list (or null) will not filter out any events.",
            "default": [],
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            }
          }
        }
      },
      "StreamSinkIn_sns": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "sns"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/SnsConfig"
          },
          "uid": {
            "description": "An optional unique identifier for the sink.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!sink_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "format": {
            "description": "The format of data sent to the sink. When events are dispatched to the sink, we will attempt to send them in the preferred format. (Note that for some sink types, such as `amazonS3`, the format is ignored.)",
            "$ref": "#/components/schemas/SinkPayloadFormat"
          },
          "status": {
            "description": "Whether the sink will receive events.\n\nIf the sink is `enabled`, any events posted to the stream will be dispatched to the Sink in the same order that events were posted to the stream.\n\nIf the sink is `paused`, events will *not* be dispatched to the sink until the sink is reenabled.",
            "default": "enabled",
            "$ref": "#/components/schemas/SinkStatusIn"
          },
          "batchSize": {
            "description": "How many events we will attempt to accumulate before sending a request to the Sink.",
            "default": 100,
            "type": "integer",
            "format": "uint16",
            "maximum": 1000.0,
            "minimum": 0.0
          },
          "maxWaitSecs": {
            "description": "How many seconds we will wait to accumulate events of `batchSize`, before sending a request to the Sink. For example, with a `batchSize` of 100 and `maxWaitSecs` of 10, we will wait _at most_ 10 seconds before sending a request to the Sink. If 100 events accumulate faster than 10 seconds, we will send the request to the Sink as soon as possible.",
            "default": 0,
            "type": "integer",
            "format": "uint16",
            "maximum": 3600.0,
            "minimum": 0.0
          },
          "eventTypes": {
            "description": "A list of event types that filter which events are dispatched to the Sink. An empty list (or null) will not filter out any events.",
            "default": [],
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            }
          }
        }
      },
      "StreamSinkPatch_azureBlobStorage": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "azureBlobStorage"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/AzureBlobStorageConfig"
          },
          "uid": {
            "description": "The StreamSink's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!sink_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "format": {
            "default": null,
            "$ref": "#/components/schemas/SinkPayloadFormat",
            "nullable": true
          },
          "status": {
            "default": null,
            "$ref": "#/components/schemas/SinkStatusIn",
            "nullable": true
          },
          "batchSize": {
            "default": null,
            "type": "integer",
            "format": "uint16",
            "maximum": 1000.0,
            "minimum": 0.0,
            "nullable": true
          },
          "maxWaitSecs": {
            "default": null,
            "type": "integer",
            "format": "uint16",
            "maximum": 3600.0,
            "minimum": 0.0,
            "nullable": true
          },
          "eventTypes": {
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            }
          }
        }
      },
      "StreamSinkPatch_otelV1HttpTrace": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "otelV1HttpTrace"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/SinkOtelV1Config"
          },
          "uid": {
            "description": "The StreamSink's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!sink_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "format": {
            "default": null,
            "$ref": "#/components/schemas/SinkPayloadFormat",
            "nullable": true
          },
          "status": {
            "default": null,
            "$ref": "#/components/schemas/SinkStatusIn",
            "nullable": true
          },
          "batchSize": {
            "default": null,
            "type": "integer",
            "format": "uint16",
            "maximum": 1000.0,
            "minimum": 0.0,
            "nullable": true
          },
          "maxWaitSecs": {
            "default": null,
            "type": "integer",
            "format": "uint16",
            "maximum": 3600.0,
            "minimum": 0.0,
            "nullable": true
          },
          "eventTypes": {
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            }
          }
        }
      },
      "StreamSinkPatch_http": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "http"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/SinkHttpConfig"
          },
          "uid": {
            "description": "The StreamSink's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!sink_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "format": {
            "default": null,
            "$ref": "#/components/schemas/SinkPayloadFormat",
            "nullable": true
          },
          "status": {
            "default": null,
            "$ref": "#/components/schemas/SinkStatusIn",
            "nullable": true
          },
          "batchSize": {
            "default": null,
            "type": "integer",
            "format": "uint16",
            "maximum": 1000.0,
            "minimum": 0.0,
            "nullable": true
          },
          "maxWaitSecs": {
            "default": null,
            "type": "integer",
            "format": "uint16",
            "maximum": 3600.0,
            "minimum": 0.0,
            "nullable": true
          },
          "eventTypes": {
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            }
          }
        }
      },
      "StreamSinkPatch_amazonS3": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "amazonS3"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/S3Config"
          },
          "uid": {
            "description": "The StreamSink's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!sink_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "format": {
            "default": null,
            "$ref": "#/components/schemas/SinkPayloadFormat",
            "nullable": true
          },
          "status": {
            "default": null,
            "$ref": "#/components/schemas/SinkStatusIn",
            "nullable": true
          },
          "batchSize": {
            "default": null,
            "type": "integer",
            "format": "uint16",
            "maximum": 1000.0,
            "minimum": 0.0,
            "nullable": true
          },
          "maxWaitSecs": {
            "default": null,
            "type": "integer",
            "format": "uint16",
            "maximum": 3600.0,
            "minimum": 0.0,
            "nullable": true
          },
          "eventTypes": {
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            }
          }
        }
      },
      "StreamSinkPatch_snowflake": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "snowflake"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/SnowflakeConfig"
          },
          "uid": {
            "description": "The StreamSink's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!sink_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "format": {
            "default": null,
            "$ref": "#/components/schemas/SinkPayloadFormat",
            "nullable": true
          },
          "status": {
            "default": null,
            "$ref": "#/components/schemas/SinkStatusIn",
            "nullable": true
          },
          "batchSize": {
            "default": null,
            "type": "integer",
            "format": "uint16",
            "maximum": 1000.0,
            "minimum": 0.0,
            "nullable": true
          },
          "maxWaitSecs": {
            "default": null,
            "type": "integer",
            "format": "uint16",
            "maximum": 3600.0,
            "minimum": 0.0,
            "nullable": true
          },
          "eventTypes": {
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            }
          }
        }
      },
      "StreamSinkPatch_googleCloudStorage": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "googleCloudStorage"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/GoogleCloudStorageConfig"
          },
          "uid": {
            "description": "The StreamSink's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!sink_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "format": {
            "default": null,
            "$ref": "#/components/schemas/SinkPayloadFormat",
            "nullable": true
          },
          "status": {
            "default": null,
            "$ref": "#/components/schemas/SinkStatusIn",
            "nullable": true
          },
          "batchSize": {
            "default": null,
            "type": "integer",
            "format": "uint16",
            "maximum": 1000.0,
            "minimum": 0.0,
            "nullable": true
          },
          "maxWaitSecs": {
            "default": null,
            "type": "integer",
            "format": "uint16",
            "maximum": 3600.0,
            "minimum": 0.0,
            "nullable": true
          },
          "eventTypes": {
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            }
          }
        }
      },
      "StreamSinkPatch_redshift": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "redshift"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/RedshiftConfig"
          },
          "uid": {
            "description": "The StreamSink's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!sink_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "format": {
            "default": null,
            "$ref": "#/components/schemas/SinkPayloadFormat",
            "nullable": true
          },
          "status": {
            "default": null,
            "$ref": "#/components/schemas/SinkStatusIn",
            "nullable": true
          },
          "batchSize": {
            "default": null,
            "type": "integer",
            "format": "uint16",
            "maximum": 1000.0,
            "minimum": 0.0,
            "nullable": true
          },
          "maxWaitSecs": {
            "default": null,
            "type": "integer",
            "format": "uint16",
            "maximum": 3600.0,
            "minimum": 0.0,
            "nullable": true
          },
          "eventTypes": {
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            }
          }
        }
      },
      "StreamSinkPatch_bigQuery": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "bigQuery"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/BigQueryConfig"
          },
          "uid": {
            "description": "The StreamSink's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!sink_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "format": {
            "default": null,
            "$ref": "#/components/schemas/SinkPayloadFormat",
            "nullable": true
          },
          "status": {
            "default": null,
            "$ref": "#/components/schemas/SinkStatusIn",
            "nullable": true
          },
          "batchSize": {
            "default": null,
            "type": "integer",
            "format": "uint16",
            "maximum": 1000.0,
            "minimum": 0.0,
            "nullable": true
          },
          "maxWaitSecs": {
            "default": null,
            "type": "integer",
            "format": "uint16",
            "maximum": 3600.0,
            "minimum": 0.0,
            "nullable": true
          },
          "eventTypes": {
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            }
          }
        }
      },
      "StreamSinkPatch_rabbitMq": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "rabbitMq"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/RabbitMqConfig"
          },
          "uid": {
            "description": "The StreamSink's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!sink_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "format": {
            "default": null,
            "$ref": "#/components/schemas/SinkPayloadFormat",
            "nullable": true
          },
          "status": {
            "default": null,
            "$ref": "#/components/schemas/SinkStatusIn",
            "nullable": true
          },
          "batchSize": {
            "default": null,
            "type": "integer",
            "format": "uint16",
            "maximum": 1000.0,
            "minimum": 0.0,
            "nullable": true
          },
          "maxWaitSecs": {
            "default": null,
            "type": "integer",
            "format": "uint16",
            "maximum": 3600.0,
            "minimum": 0.0,
            "nullable": true
          },
          "eventTypes": {
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            }
          }
        }
      },
      "StreamSinkPatch_sqs": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "sqs"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/SqsConfig"
          },
          "uid": {
            "description": "The StreamSink's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!sink_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "format": {
            "default": null,
            "$ref": "#/components/schemas/SinkPayloadFormat",
            "nullable": true
          },
          "status": {
            "default": null,
            "$ref": "#/components/schemas/SinkStatusIn",
            "nullable": true
          },
          "batchSize": {
            "default": null,
            "type": "integer",
            "format": "uint16",
            "maximum": 1000.0,
            "minimum": 0.0,
            "nullable": true
          },
          "maxWaitSecs": {
            "default": null,
            "type": "integer",
            "format": "uint16",
            "maximum": 3600.0,
            "minimum": 0.0,
            "nullable": true
          },
          "eventTypes": {
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            }
          }
        }
      },
      "StreamSinkPatch_kafka": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "kafka"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/KafkaSinkConfig"
          },
          "uid": {
            "description": "The StreamSink's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!sink_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "format": {
            "default": null,
            "$ref": "#/components/schemas/SinkPayloadFormat",
            "nullable": true
          },
          "status": {
            "default": null,
            "$ref": "#/components/schemas/SinkStatusIn",
            "nullable": true
          },
          "batchSize": {
            "default": null,
            "type": "integer",
            "format": "uint16",
            "maximum": 1000.0,
            "minimum": 0.0,
            "nullable": true
          },
          "maxWaitSecs": {
            "default": null,
            "type": "integer",
            "format": "uint16",
            "maximum": 3600.0,
            "minimum": 0.0,
            "nullable": true
          },
          "eventTypes": {
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            }
          }
        }
      },
      "StreamSinkPatch_eventBridge": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "eventBridge"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/EventBridgeConfig"
          },
          "uid": {
            "description": "The StreamSink's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!sink_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "format": {
            "default": null,
            "$ref": "#/components/schemas/SinkPayloadFormat",
            "nullable": true
          },
          "status": {
            "default": null,
            "$ref": "#/components/schemas/SinkStatusIn",
            "nullable": true
          },
          "batchSize": {
            "default": null,
            "type": "integer",
            "format": "uint16",
            "maximum": 1000.0,
            "minimum": 0.0,
            "nullable": true
          },
          "maxWaitSecs": {
            "default": null,
            "type": "integer",
            "format": "uint16",
            "maximum": 3600.0,
            "minimum": 0.0,
            "nullable": true
          },
          "eventTypes": {
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            }
          }
        }
      },
      "StreamSinkPatch_sns": {
        "type": "object",
        "required": [
          "config",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "sns"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/SnsConfig"
          },
          "uid": {
            "description": "The StreamSink's UID.",
            "type": "string",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "^(?!sink_)[a-zA-Z0-9_-]+$",
            "example": "unique-identifier",
            "nullable": true
          },
          "format": {
            "default": null,
            "$ref": "#/components/schemas/SinkPayloadFormat",
            "nullable": true
          },
          "status": {
            "default": null,
            "$ref": "#/components/schemas/SinkStatusIn",
            "nullable": true
          },
          "batchSize": {
            "default": null,
            "type": "integer",
            "format": "uint16",
            "maximum": 1000.0,
            "minimum": 0.0,
            "nullable": true
          },
          "maxWaitSecs": {
            "default": null,
            "type": "integer",
            "format": "uint16",
            "maximum": 3600.0,
            "minimum": 0.0,
            "nullable": true
          },
          "eventTypes": {
            "type": "array",
            "items": {
              "description": "The event type's name",
              "type": "string",
              "maxLength": 256,
              "pattern": "^[a-zA-Z0-9\\-_.]+$",
              "example": "user.signup"
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Application",
      "description": "Consumer Applications are where messages are sent to. In most cases you would want to have one application for each of your users."
    },
    {
      "name": "Message",
      "description": "Messages are the webhook events being sent."
    },
    {
      "name": "Message Attempt",
      "description": "Attempts to deliver `Message`s to `Endpoint`s."
    },
    {
      "name": "Endpoint",
      "description": "Endpoints are the URLs messages will be sent to. Each application can have up to 50 endpoints and each message sent to that application will be sent to all of them (unless they are not subscribed to the sent event type)."
    },
    {
      "name": "Integration",
      "description": "Integrations are services your users connect an application to. An integration can manage the application and its endpoints."
    },
    {
      "name": "Event Type",
      "description": "Event types are identifiers denoting the type of message being sent. Event types are primarily used to decide which events are sent to which endpoint."
    },
    {
      "name": "Authentication",
      "description": "Easily give your users access to our pre-built management UI."
    },
    {
      "name": "Health",
      "description": "Health checks for the API."
    },
    {
      "name": "Webhook",
      "description": "The webhooks the Svix service sends to notify you of events."
    },
    {
      "name": "Background Task",
      "description": "The background tasks that have been executed for your environment."
    },
    {
      "name": "Statistics",
      "description": "Generate statistics about your Svix utilization"
    },
    {
      "name": "Webhook Endpoint",
      "description": "Configure where operational webhooks are sent to."
    },
    {
      "name": "Environment",
      "description": "Manage your environments like development, staging and production."
    },
    {
      "name": "Ingest Endpoint",
      "description": "Configure where Svix Ingest sends messages."
    }
  ],
  "x-tagGroups": [
    {
      "name": "General",
      "tags": [
        "Application",
        "Event Type",
        "Background Task",
        "Environment"
      ]
    },
    {
      "name": "Application specific",
      "tags": [
        "Authentication",
        "Endpoint",
        "Message",
        "Message Attempt",
        "Integration"
      ]
    },
    {
      "name": "Ingest",
      "tags": [
        "Ingest Source",
        "Ingest Endpoint"
      ]
    },
    {
      "name": "Utility",
      "tags": [
        "Health"
      ]
    },
    {
      "name": "Operational Webhooks",
      "tags": [
        "Webhook",
        "Webhook Endpoint"
      ]
    },
    {
      "name": "Statistics",
      "tags": [
        "Statistics"
      ]
    }
  ],
  "x-webhooks": {
    "background_task.finished": {
      "post": {
        "description": "Sent when a background task is finished.",
        "operationId": "background_task.finished",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "data": {
                  "data": {
                    "appStats": [
                      {
                        "appId": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "appUid": null,
                        "messageDestinations": 343
                      }
                    ]
                  },
                  "status": "finished",
                  "task": "application.stats",
                  "taskId": "qtask_1srOrx2ZWZBpBUvZwXKQmoEYga2"
                },
                "type": "background_task.finished"
              },
              "schema": {
                "$ref": "#/components/schemas/BackgroundTaskFinishedEvent"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Return any 2XX status to indicate that the data was received successfully"
          }
        },
        "summary": "background_task.finished",
        "tags": [
          "Webhook"
        ]
      }
    },
    "endpoint.created": {
      "post": {
        "description": "Sent when an endpoint is created.",
        "operationId": "endpoint.created",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "data": {
                  "appId": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                  "appUid": "unique-app-identifier",
                  "endpointId": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                  "endpointUid": "unique-endpoint-identifier"
                },
                "type": "endpoint.created"
              },
              "schema": {
                "$ref": "#/components/schemas/EndpointCreatedEvent"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Return any 2XX status to indicate that the data was received successfully"
          }
        },
        "summary": "endpoint.created",
        "tags": [
          "Webhook"
        ]
      }
    },
    "endpoint.deleted": {
      "post": {
        "description": "Sent when an endpoint is deleted.",
        "operationId": "endpoint.deleted",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "data": {
                  "appId": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                  "appUid": "unique-app-identifier",
                  "endpointId": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                  "endpointUid": "unique-endpoint-identifier"
                },
                "type": "endpoint.deleted"
              },
              "schema": {
                "$ref": "#/components/schemas/EndpointDeletedEvent"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Return any 2XX status to indicate that the data was received successfully"
          }
        },
        "summary": "endpoint.deleted",
        "tags": [
          "Webhook"
        ]
      }
    },
    "endpoint.disabled": {
      "post": {
        "description": "Sent when an endpoint has been automatically disabled after continuous failures, or manually via an API call.",
        "operationId": "endpoint.disabled",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "data": {
                  "appId": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                  "appUid": "unique-app-identifier",
                  "endpointId": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                  "endpointUid": "unique-endpoint-identifier",
                  "failSince": "2022-11-06T15:04:05Z",
                  "trigger": "automatic"
                },
                "type": "endpoint.disabled"
              },
              "schema": {
                "$ref": "#/components/schemas/EndpointDisabledEvent"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Return any 2XX status to indicate that the data was received successfully"
          }
        },
        "summary": "endpoint.disabled",
        "tags": [
          "Webhook"
        ]
      }
    },
    "endpoint.enabled": {
      "post": {
        "description": "Sent when an endpoint has been enabled.",
        "operationId": "endpoint.enabled",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "data": {
                  "appId": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                  "appUid": "unique-app-identifier",
                  "endpointId": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                  "endpointUid": "unique-endpoint-identifier"
                },
                "type": "endpoint.disabled"
              },
              "schema": {
                "$ref": "#/components/schemas/EndpointEnabledEvent"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Return any 2XX status to indicate that the data was received successfully"
          }
        },
        "summary": "endpoint.enabled",
        "tags": [
          "Webhook"
        ]
      }
    },
    "endpoint.updated": {
      "post": {
        "description": "Sent when an endpoint is updated.",
        "operationId": "endpoint.updated",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "data": {
                  "appId": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                  "appUid": "unique-app-identifier",
                  "endpointId": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                  "endpointUid": "unique-endpoint-identifier"
                },
                "type": "endpoint.updated"
              },
              "schema": {
                "$ref": "#/components/schemas/EndpointUpdatedEvent"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Return any 2XX status to indicate that the data was received successfully"
          }
        },
        "summary": "endpoint.updated",
        "tags": [
          "Webhook"
        ]
      }
    },
    "message.attempt.exhausted": {
      "post": {
        "description": "Sent when a message delivery has failed (all of the retry attempts have been exhausted).",
        "operationId": "message.attempt.exhausted",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "data": {
                  "appId": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                  "appUid": "unique-app-identifier",
                  "endpointId": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                  "lastAttempt": {
                    "id": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                    "responseStatusCode": 500,
                    "timestamp": "2022-11-06T15:04:05Z"
                  },
                  "msgEventId": "unique-msg-identifier",
                  "msgId": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2"
                },
                "type": "message.attempt.exhausted"
              },
              "schema": {
                "$ref": "#/components/schemas/MessageAttemptExhaustedEvent"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Return any 2XX status to indicate that the data was received successfully"
          }
        },
        "summary": "message.attempt.exhausted",
        "tags": [
          "Webhook"
        ]
      }
    },
    "message.attempt.failing": {
      "post": {
        "description": "Sent after a message has been failing for a few times.\nIt's sent on the fourth failure. It complements `message.attempt.exhausted` which is sent after the last failure.",
        "operationId": "message.attempt.failing",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "data": {
                  "appId": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                  "appUid": "unique-app-identifier",
                  "endpointId": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                  "lastAttempt": {
                    "id": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                    "responseStatusCode": 500,
                    "timestamp": "2022-11-06T15:04:05Z"
                  },
                  "msgEventId": "unique-msg-identifier",
                  "msgId": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2"
                },
                "type": "message.attempt.failing"
              },
              "schema": {
                "$ref": "#/components/schemas/MessageAttemptFailingEvent"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Return any 2XX status to indicate that the data was received successfully"
          }
        },
        "summary": "message.attempt.failing",
        "tags": [
          "Webhook"
        ]
      }
    },
    "message.attempt.recovered": {
      "post": {
        "description": "Sent on a successful dispatch after an earlier failure op webhook has already been sent.",
        "operationId": "message.attempt.recovered",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "data": {
                  "appId": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                  "appUid": "unique-app-identifier",
                  "endpointId": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                  "lastAttempt": {
                    "id": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                    "responseStatusCode": 200,
                    "timestamp": "2022-11-06T15:04:05Z"
                  },
                  "msgEventId": "unique-msg-identifier",
                  "msgId": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2"
                },
                "type": "message.attempt.recovered"
              },
              "schema": {
                "$ref": "#/components/schemas/MessageAttemptRecoveredEvent"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Return any 2XX status to indicate that the data was received successfully"
          }
        },
        "summary": "message.attempt.recovered",
        "tags": [
          "Webhook"
        ]
      }
    }
  }
}