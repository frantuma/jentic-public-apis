{
  "openapi": "3.0.3",
  "info": {
    "title": "Jumpseller API",
    "description": "# Endpoint Structure\n\nAll URLs are in the format: \n\n```text\nhttps://api.jumpseller.com/v1/path.json  \n```\n\nThe path is prefixed by the API version.\n\nFor example, to request all the products at your store, you would append the products' index path to the base URL to create the following URL: \n \n```text\nhttps://api.jumpseller.com/v1/products.json\n```\n\n<br/><br/>\n***\n \n# Version\n\nThe current version of the API is **v1**.  \nIf we change the API in backward-incompatible ways, we'll increase the version number and maintain stable support for the old urls.\n<br/><br/>\n***\n\n# Authentication\n\nThe API uses a token-based authentication with a combination of a login key and an auth token. **Both parameters can be found on the left sidebar of the Account section, accessed from the main menu of your Admin Panel**. The auth token of the user can be reset on the same page.\n\n![Store Login](/images/support/api/apilogin.png)\n \nThe auth token is a **32 characters** string.\n\nTo make authenticated requests, you can either use Basic Authentication  (recommend method) or provide the login and auth token in the URL parameters (deprecated method).\n\nIf you are developing a Jumpseller App, the authentication should be done using [OAuth-2](/support/oauth-2). Please read the article [Build an App](/support/apps) for more information.\n <br/><br/>\n## Query Parameters (deprecated)\nAssuming login is *XXXXX* and authtoken is *YYYYY* we present the following examples (the real values can be found on the left sidebar of the Account section, accessed from the main menu of your Admin Panel):\n### Curl Examples\nIn curl, you can invoke that URL with:  \n\n```bash\n curl -X GET \"https://api.jumpseller.com/v1/products.json?login=XXXXX&authtoken=YYYYY\"\n```\n\nTo create a product, you will include the JSON data and specify the MIME Type:  \n\n```bash\ncurl -X POST -d '{ \"product\" : {\"name\": \"My new Product!\", \"price\": 100} }' \"https://api.jumpseller.com/v1/products.json?login=XXXXX&authtoken=YYYYY\" -H \"Content-Type:application/json\"\n```\n\nand to update the product identified with 123:  \n\n```bash\ncurl -X PUT -d '{ \"product\" : {\"name\": \"My updated Product!\", \"price\": 99} }' \"https://api.jumpseller.com/v1/products/123.json?login=XXXXX&authtoken=YYYYY\" -H \"Content-Type:application/json\"\n```\n\nor delete it:  \n\n```bash\ncurl -X DELETE \"https://api.jumpseller.com/v1/products/123.json?login=XXXXX&authtoken=YYYYY\" -H \"Content-Type:application/json\"\n```\n\n### PHP Examples\n```php\n$url = 'https://api.jumpseller.com/v1/products.json?login=XXXXX&authtoken=YYYYY';\n $ch = curl_init($url);\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json'));\n\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, \"POST\"); //post method\ncurl_setopt($ch, CURLOPT_POSTFIELDS, '{ \"product\" : {\"name\": \"My updated Product!\", \"price\": 99} }');\n\n$result = curl_exec($ch);\nprint_r($result);\ncurl_close($ch);\n```\n\n## Basic Authentication\n Assuming login is *XXXXX* and authtoken is *YYYYY* we present the following examples (the real values can be found on the left sidebar of the Account section, accessed from the main menu of your Admin Panel):\n### Curl Examples\nIn curl, you can invoke that URL with:  \n\n```bash\ncurl -u XXXXX:YYYYY -X GET \"https://api.jumpseller.com/v1/products.json\"\n```\n\nTo create a product, you will include the JSON data and specify the MIME Type:  \n\n```bash\ncurl -u XXXXX:YYYYY -X POST -d '{ \"product\" : {\"name\" : \"My new Product!\", \"price\": 100} }' \"https://api.jumpseller.com/v1/products.json\" -H \"Content-Type:application/json\"\n```\n\nand to update the product identified with 123:  \n\n```bash\ncurl -u XXXXX:YYYYY -X PUT -d '{ \"product\" : {\"name\": \"My updated Product!\", \"price\": 99} }' \"https://api.jumpseller.com/v1/products/123.json\" -H \"Content-Type:application/json\"\n```\n\nor delete it:  \n\n```bash\ncurl -u XXXXX:YYYYY -X DELETE \"https://api.jumpseller.com/v1/products/123.json\" -H \"Content-Type:application/json\"\n```\n\n### PHP Examples\n```php\n$login = 'XXXXX';\n $authtoken = 'YYYYY';\n$url = 'https://api.jumpseller.com/v1/products.json';\n $ch = curl_init($url);\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json'));\ncurl_setopt($ch, CURLOPT_USERPWD, $login . \":\" . $authtoken);\n\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, \"POST\"); //post method\ncurl_setopt($ch, CURLOPT_POSTFIELDS, '{ \"product\" : {\"name\": \"My updated Product!\", \"price\": 99} }');\n\n$result = curl_exec($ch);\n print_r($result);\ncurl_close($ch);\n```\n\n ## OAuth2\n OAuth 2 is the industry-standard protocol for authorization. Generally, OAuth provides to clients a secure delegated access to server resources on behalf of a resource owner. It specifies a process for resource owners to authorize third-party access to their server resources without sharing their credentials. Designed specifically to work with HTTP, OAuth essentially allows access tokens to be issued to third-party clients by an authorization server, with the approval of the resource owner. The third party then uses the access token to access the protected resources hosted by the resource server.\n \nRead more about this type of authentication and how to implement it in your Jumpseller App by clicking [here](/support/oauth-2).\n***\n\n<br/><br/>\n\n# Plain JSON only. No XML.\n\n* We only support JSON for data serialization.\n* Our node format has no root element.  \n* We use snake_case to describe attribute keys (like \"created_at\").  \n* All empty value are replaced with **null** strings.\n * All API URLs end in .json to indicate that they accept and return JSON.\n* POST and PUT methods require you to explicitly state the MIME type of your request's body content as **\"application/json\"**.\n<br/><br/>\n***\n\n# Rate Limit\nYou can perform a maximum of:\n\n+ 800 (eight hundred) requests per minute and\n+ 20 (twenty) requests per second \n\nIf you exceed this limit, you'll get a 429 Too Many Requests (Rate Limit Exceeded) response for subsequent requests.  \n\n The rate limits apply by IP address and by store. This means that multiple requests on different stores are not counted towards the same rate limit.\n\nThis limits are necessary to ensure resources are correctly used. Your application should be aware of this limits and retry any unsuccessful request, check the following Ruby stub:\n\n```ruby\ntries = 0; limit = 3;\nbegin\n  HTTParty.send(method, uri) # perform an API call.\n  tries += 1\nrescue # 403 response\n  unless tries >= limit\n    sleep 1.0 # wait the necessary time before retrying the call again.\n    retry\n  end\nend\n```\n\nFinally, you can review the Response Headers of each request:\n\n```text\nJumpseller-PerMinuteRateLimit-Limit: 800  \nJumpseller-PerMinuteRateLimit-Remaining: 799 # requests available on the per-minute interval  \nJumpseller-PerSecondRateLimit-Limit: 20  \nJumpseller-PerSecondRateLimit-Remaining: 19 # requests available on the per-second interval\n``` \n\nto better model your application requests intervals.\n \nAfter 2000 rate-limit hits, we will set a temporary ban. The Response Header `Jumpseller-BannedByRateLimit-Reset` informs you the time (UTC) when will your ban be reseted:\n\n```text\nJumpseller-BannedByRateLimit-Reset: 2024-05-23T16:13:47+00:00\n ``` \n\n<br/><br/>\n***\n\n# Pagination\n\nBy default we will return 50 objects (products, orders, etc) per page. There is a maximum of 100, using a query string `&limit=100`.\nIf the result set gets paginated it is your responsibility to check the next page for more objects -- you do this by using query strings `&page=2`, `&page=3` and so on.\n\n```text\nhttps://api.jumpseller.com/v1/products.json?page=3&limit=100\n ```\n<br/><br/>\n***\n\n# More\n* [Jumpseller API wrapper](https://gitlab.com/jumpseller-api/ruby) provides a public Ruby abstraction over our API;\n* [Apps Page](/apps) showcases external integrations with Jumpseller done by technical experts;\n* [Imgbb API](https://api.imgbb.com/) provides an easy way to upload and temporaly host for images and files.\n<br/><br/>\n***\n<br/><br/>\n",
    "version": "1.0.0",
    "x-logo": {
      "url": "https://api.jumpseller.com/images/jumpseller-logo-full.svg",
      "altText": "Jumpseller logo",
      "href": "/"
    },
    "x-jentic-source-url": "https://api.jumpseller.com/swagger.json"
  },
  "servers": [
    {
      "url": "https://api.jumpseller.com/v1"
    }
  ],
  "paths": {
    "/store/info.json": {
      "get": {
        "tags": [
          "Stores"
        ],
        "summary": "Retrieve Store Information.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Store"
                }
              }
            }
          }
        }
      }
    },
    "/store/languages.json": {
      "get": {
        "tags": [
          "Stores"
        ],
        "summary": "Retrieve Store Languages.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Language"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/hooks.json": {
      "get": {
        "tags": [
          "Hooks"
        ],
        "summary": "Retrieve all Hooks.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/LimitParam"
          },
          {
            "$ref": "#/components/parameters/PageParam"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Hooks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Hook"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Hooks"
        ],
        "summary": "Create a new Hook.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "description": "Hook parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HookEdit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Hook"
                }
              }
            }
          },
          "404": {
            "description": "Hook Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/hooks/{id}.json": {
      "get": {
        "tags": [
          "Hooks"
        ],
        "summary": "Retrieve a single Hook.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Hook",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Hook"
                }
              }
            }
          },
          "404": {
            "description": "Hook Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Hooks"
        ],
        "summary": "Update a Hook.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Hook",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Hook parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HookEdit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Hook"
                }
              }
            }
          },
          "404": {
            "description": "Hook Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Hooks"
        ],
        "summary": "Delete an existing Hook.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Hook",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Hook Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/jsapps.json": {
      "get": {
        "tags": [
          "Apps"
        ],
        "summary": "Retrieve all the Store's JSApps.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/App"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Apps"
        ],
        "summary": "Create a Store JSApp.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "description": "JSApp parameters to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JSAppEdit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JSApp"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/jsapps/{code}.json": {
      "get": {
        "tags": [
          "Apps"
        ],
        "summary": "Retrieve a JSApp.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "Code of the App",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JSApp"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Apps"
        ],
        "summary": "Delete an existing JSApp.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "Code of the App",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "App Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/products.json": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Retrieve all Products.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/LimitParam"
          },
          {
            "$ref": "#/components/parameters/PageParam"
          },
          {
            "$ref": "#/components/parameters/LocaleParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Create a new Product.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/LocaleParam"
          }
        ],
        "requestBody": {
          "description": "Product parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/products/count.json": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Count all Products.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Count"
                }
              }
            }
          }
        }
      }
    },
    "/products/after/{id}.json": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Retrieves Products after the given id.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ProductIDParam"
          },
          {
            "$ref": "#/components/parameters/LocaleParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Product Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/products/status/{status}.json": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Retrieve Products filtered by status.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/LocaleParam"
          },
          {
            "name": "status",
            "in": "path",
            "description": "Status of the Product used as filter",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "available",
                "not-available",
                "disabled"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Status Invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusInvalid"
                }
              }
            }
          }
        }
      }
    },
    "/products/category/{category_id}.json": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Retrieve Products filtered by category.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/LocaleParam"
          },
          {
            "name": "category_id",
            "in": "path",
            "description": "Category ID of the Product used as filter",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Product Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/products/status/{status}/count.json": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Count Products filtered by status.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/LocaleParam"
          },
          {
            "name": "status",
            "in": "path",
            "description": "Status of the Product used as filter",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "available",
                "not-available",
                "disabled"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Count"
                }
              }
            }
          },
          "404": {
            "description": "Status Invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusInvalid"
                }
              }
            }
          }
        }
      }
    },
    "/products/category/{category_id}/count.json": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Count Products filtered by category.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/LocaleParam"
          },
          {
            "name": "category_id",
            "in": "path",
            "description": "Category ID of the Product used as filter",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Count"
                }
              }
            }
          },
          "404": {
            "description": "Category Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/products/{id}.json": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Retrieve a single Product.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/LocaleParam"
          },
          {
            "$ref": "#/components/parameters/ProductIDParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "404": {
            "description": "Product Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Products"
        ],
        "summary": "Modify an existing Product.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ProductIDParam"
          },
          {
            "$ref": "#/components/parameters/LocaleParam"
          }
        ],
        "requestBody": {
          "description": "Product parameters to change",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductEdit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "404": {
            "description": "Product Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Products"
        ],
        "summary": "Delete an existing Product.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ProductIDParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Product Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/products/search.json": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Retrieve a Product List from a query.",
        "description": "Endpoint example: \n\n```text\nhttps://api.jumpseller.com/v1/products/search.json?query=test&fields=name,description \n```",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/LocaleParam"
          },
          {
            "name": "query",
            "in": "query",
            "description": "Text to query for the Product",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated values of the fields to query for the Product",
            "schema": {
              "type": "string",
              "format": "string",
              "enum": [
                "sku",
                "barcode",
                "brand",
                "name",
                "description",
                "variants",
                "option_name",
                "custom_fields",
                "custom_fields_selects"
              ]
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Product Status to query for the Product",
            "schema": {
              "type": "string",
              "format": "string",
              "enum": [
                "available",
                "not-available",
                "disabled",
                "featured"
              ]
            }
          },
          {
            "name": "categories",
            "in": "query",
            "description": "Comma separated values of the Category IDs to query for the Product",
            "schema": {
              "type": "string",
              "format": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of products",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invalid query.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/products/{id}/options.json": {
      "get": {
        "tags": [
          "Product Options"
        ],
        "summary": "Retrieve all Product Options.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ProductIDParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductOption"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Product Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Product Options"
        ],
        "summary": "Create a new Product Option.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ProductIDParam"
          }
        ],
        "requestBody": {
          "description": "Product Option parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductOptionEdit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductOption"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/products/{id}/options/count.json": {
      "get": {
        "tags": [
          "Product Options"
        ],
        "summary": "Count all Product Options.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ProductIDParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Count"
                }
              }
            }
          },
          "404": {
            "description": "Product Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/products/{id}/options/{option_id}.json": {
      "get": {
        "tags": [
          "Product Options"
        ],
        "summary": "Retrieve a single Product Option.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ProductIDParam"
          },
          {
            "name": "option_id",
            "in": "path",
            "description": "Id of the Product Option",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductOption"
                }
              }
            }
          },
          "404": {
            "description": "Product Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Product Options"
        ],
        "summary": "Modify an existing Product Option.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ProductIDParam"
          },
          {
            "name": "option_id",
            "in": "path",
            "description": "Id of the Product Option",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Product option parameters to change",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductOptionEdit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductOption"
                }
              }
            }
          },
          "404": {
            "description": "Product Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Product Options"
        ],
        "summary": "Delete a Product Option.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ProductIDParam"
          },
          {
            "name": "option_id",
            "in": "path",
            "description": "Id of the Product Option",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Product Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/products/{id}/options/{option_id}/values.json": {
      "get": {
        "tags": [
          "Product Option Values"
        ],
        "summary": "Retrieve all Product Option Values.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ProductIDParam"
          },
          {
            "name": "option_id",
            "in": "path",
            "description": "ID of the Product Option",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductOptionValue"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Product Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Product Option Values"
        ],
        "summary": "Create a new Product Option Value.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ProductIDParam"
          },
          {
            "name": "option_id",
            "in": "path",
            "description": "Id of the Product Option",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Product Option Value parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductOptionValueEdit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductOptionValue"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/products/{id}/options/{option_id}/values/count.json": {
      "get": {
        "tags": [
          "Product Option Values"
        ],
        "summary": "Count all Product Option Values.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ProductIDParam"
          },
          {
            "name": "option_id",
            "in": "path",
            "description": "ID of the Product Option",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Count"
                }
              }
            }
          },
          "404": {
            "description": "Product Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/products/{id}/options/{option_id}/values/{value_id}.json": {
      "get": {
        "tags": [
          "Product Option Values"
        ],
        "summary": "Retrieve a single Product Option Value.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ProductIDParam"
          },
          {
            "name": "option_id",
            "in": "path",
            "description": "Id of the Product Option",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "value_id",
            "in": "path",
            "description": "ID of the Product Option Value",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductOptionValue"
                }
              }
            }
          },
          "404": {
            "description": "Product Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Product Option Values"
        ],
        "summary": "Modify an existing Product Option Value.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ProductIDParam"
          },
          {
            "name": "option_id",
            "in": "path",
            "description": "Id of the Product Option",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "value_id",
            "in": "path",
            "description": "Id of the Product Option Value",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Product option value parameters to change",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductOptionValueEdit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductOptionValue"
                }
              }
            }
          },
          "404": {
            "description": "Product Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Product Option Values"
        ],
        "summary": "Delete a Product Option Value.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ProductIDParam"
          },
          {
            "name": "option_id",
            "in": "path",
            "description": "Id of the Product Option",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "value_id",
            "in": "path",
            "description": "ID of the Product Option Value",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Product Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/products/{id}/variants/{variant_id}.json": {
      "get": {
        "tags": [
          "Product Variants"
        ],
        "summary": "Retrieve a single Product Variant.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ProductIDParam"
          },
          {
            "name": "variant_id",
            "in": "path",
            "description": "Id of the Product Variant",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Variant"
                }
              }
            }
          },
          "404": {
            "description": "Product Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Product Variants"
        ],
        "summary": "Modify an existing Product Variant.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ProductIDParam"
          },
          {
            "name": "variant_id",
            "in": "path",
            "description": "Id of the Product Variant",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Product Variant parameters to change",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VariantEdit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Variant"
                }
              }
            }
          },
          "404": {
            "description": "Product Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/products/{id}/variants.json": {
      "get": {
        "tags": [
          "Product Variants"
        ],
        "summary": "Retrieve all Product Variants.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ProductIDParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Variant"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Product Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Product Variants"
        ],
        "summary": "Create a new Product Variant.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ProductIDParam"
          }
        ],
        "requestBody": {
          "description": "Product Variant parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VariantEdit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Variant"
                }
              }
            }
          },
          "404": {
            "description": "Product Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/products/{id}/variants/count.json": {
      "get": {
        "tags": [
          "Product Variants"
        ],
        "summary": "Count all Product Variants.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ProductIDParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Count"
                }
              }
            }
          },
          "404": {
            "description": "Product Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/products/{id}/images.json": {
      "get": {
        "tags": [
          "Product Images"
        ],
        "summary": "Retrieve all Product Images.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ProductIDParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Image"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Product Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Product Images"
        ],
        "summary": "Create a new Product Image.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ProductIDParam"
          }
        ],
        "requestBody": {
          "description": "Product Image parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImageEdit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Image"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "put": {
        "tags": [
          "Product Images"
        ],
        "summary": "Update a Product Image position.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ProductIDParam"
          },
          {
            "name": "image_id",
            "in": "path",
            "description": "Id of the Product Image",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "position",
            "in": "query",
            "description": "Desired position of the Product Image",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Image"
                }
              }
            }
          },
          "404": {
            "description": "Product or Image Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/products/{id}/images/count.json": {
      "get": {
        "tags": [
          "Product Images"
        ],
        "summary": "Count all Product Images.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ProductIDParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Count"
                }
              }
            }
          },
          "404": {
            "description": "Product Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/products/{id}/images/{image_id}.json": {
      "get": {
        "tags": [
          "Product Images"
        ],
        "summary": "Retrieve a single Product Image.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ProductIDParam"
          },
          {
            "name": "image_id",
            "in": "path",
            "description": "Id of the Product Image",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Image"
                }
              }
            }
          },
          "404": {
            "description": "Product Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Product Images"
        ],
        "summary": "Delete a Product Image.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ProductIDParam"
          },
          {
            "name": "image_id",
            "in": "path",
            "description": "Id of the Product Image",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Product Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/products/{id}/attachments.json": {
      "get": {
        "tags": [
          "Product Attachments"
        ],
        "summary": "Retrieve all Product Attachments.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ProductIDParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Attachment"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Product Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Product Attachments"
        ],
        "summary": "Create a new Product Attachment.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ProductIDParam"
          }
        ],
        "requestBody": {
          "description": "Product Attachment parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttachmentEdit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Attachment"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/products/{id}/attachments/count.json": {
      "get": {
        "tags": [
          "Product Attachments"
        ],
        "summary": "Count all Product Attachments.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ProductIDParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Count"
                }
              }
            }
          },
          "404": {
            "description": "Product Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/products/{id}/attachments/{attachment_id}.json": {
      "get": {
        "tags": [
          "Product Attachments"
        ],
        "summary": "Retrieve a single Product Attachment.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ProductIDParam"
          },
          {
            "name": "attachment_id",
            "in": "path",
            "description": "Id of the Product Attachment",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Attachment"
                }
              }
            }
          },
          "404": {
            "description": "Product Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Product Attachments"
        ],
        "summary": "Delete a Product Attachment.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ProductIDParam"
          },
          {
            "name": "attachment_id",
            "in": "path",
            "description": "Id of the Product Attachment",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Product Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/products/{id}/digital_products.json": {
      "get": {
        "tags": [
          "Product DigitalProducts"
        ],
        "summary": "Retrieve all Product DigitalProducts.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ProductIDParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DigitalProduct"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Product Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Product DigitalProducts"
        ],
        "summary": "Create a new Product DigitalProduct.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ProductIDParam"
          }
        ],
        "requestBody": {
          "description": "Product DigitalProduct parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DigitalProductEdit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DigitalProduct"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/products/{id}/digital_products/count.json": {
      "get": {
        "tags": [
          "Product DigitalProducts"
        ],
        "summary": "Count all Product DigitalProducts.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ProductIDParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Count"
                }
              }
            }
          },
          "404": {
            "description": "Product Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/products/{id}/digital_products/{digital_product_id}.json": {
      "get": {
        "tags": [
          "Product DigitalProducts"
        ],
        "summary": "Retrieve a single Product DigitalProduct.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ProductIDParam"
          },
          {
            "name": "digital_product_id",
            "in": "path",
            "description": "Id of the Product DigitalProduct",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DigitalProduct"
                }
              }
            }
          },
          "404": {
            "description": "Product Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Product DigitalProducts"
        ],
        "summary": "Delete a Product DigitalProduct.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ProductIDParam"
          },
          {
            "name": "digital_product_id",
            "in": "path",
            "description": "Id of the Product DigitalProduct",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Product Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/products/{id}/fields.json": {
      "get": {
        "tags": [
          "Product Custom Fields"
        ],
        "summary": "Retrieve all Product Custom Fields",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ProductIDParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductCustomField"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Product Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Product Custom Fields"
        ],
        "summary": "Add an existing Custom Field to a Product.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ProductIDParam"
          }
        ],
        "requestBody": {
          "description": "Product Custom Field parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddProductCustomField"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "404": {
            "description": "Product Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/products/{id}/fields/count.json": {
      "get": {
        "tags": [
          "Product Custom Fields"
        ],
        "summary": "Count all Product Custom Fields.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ProductIDParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Count"
                }
              }
            }
          },
          "404": {
            "description": "Product Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/products/{product_id}/fields/{field_id}.json": {
      "put": {
        "tags": [
          "Product Custom Fields"
        ],
        "summary": "Update value of Product Custom Field",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "description": "Id of the Product.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "Id of the Custom Field Value.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductCustomField"
                }
              }
            }
          },
          "404": {
            "description": "Product or Custom Field Value Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Product Custom Fields"
        ],
        "summary": "Delete value of Product Custom Field",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "description": "Id of the Product.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "Id of the Custom Field Value.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageObject"
                }
              }
            }
          },
          "404": {
            "description": "Product or Custom Field Value Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/categories.json": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Retrieve all Categories.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Categories"
        ],
        "summary": "Create a new Category.",
        "description": "Category's permalink is automatically generated from the given category's name.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "description": "Category parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryEdit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/categories/count.json": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Count all Categories.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Count"
                }
              }
            }
          }
        }
      }
    },
    "/categories/{id}.json": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Retrieve a single Category.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Category",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The selected Category.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "404": {
            "description": "Category Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Categories"
        ],
        "summary": "Modify an existing Category.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Category",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Category parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryEdit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "404": {
            "description": "Category Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Categories"
        ],
        "summary": "Delete an existing Category.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Category",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Category Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/orders.json": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Retrieve all Orders.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/LimitParam"
          },
          {
            "$ref": "#/components/parameters/PageParam"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Orders",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Order"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Create a new Order.",
        "description": "Orders created externally keep the given order product's values (bypassing internal promotion or product amounts).",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/LocaleParam"
          }
        ],
        "requestBody": {
          "description": "Order parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/orders/count.json": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Count all Orders.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Count"
                }
              }
            }
          }
        }
      }
    },
    "/orders/status/{status}.json": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Retrieve orders filtered by status.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "status",
            "in": "path",
            "description": "Status of the Order used as filter",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "abandoned",
                "canceled",
                "pending_payment",
                "paid"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Order"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Status Invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusInvalid"
                }
              }
            }
          }
        }
      }
    },
    "/orders/{id}.json": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Retrieve a single Order.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Order",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "404": {
            "description": "Order Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Orders"
        ],
        "summary": "Modify an existing Order.",
        "description": "Only `status`, `shipment_status`, `tracking_number`, `tracking_company`, `tracking_url`, `additional_information` and `additional_fields` are available for update. An email is send if `shipment_status` changes.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Order",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Order parameters to change",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderEdit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "404": {
            "description": "Order Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/orders/search.json": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Retrieve an Orders List from a query.",
        "description": "Endpoint example: \n\n```text\n https://api.jumpseller.com/v1/orders/search.json?fulfillment_filters=unfulfilled,fulfilled&status_filters[]=paid&status_filters[]=abandoned&dateFilter=last7days \n```",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/LocaleParam"
          },
          {
            "name": "query",
            "in": "query",
            "description": "Text to query for the Order",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          {
            "name": "status_filters[]",
            "in": "query",
            "description": "Order Status to query for the Order",
            "schema": {
              "type": "string",
              "format": "string",
              "enum": [
                "paid",
                "created",
                "pending_payment",
                "canceled",
                "abandoned"
              ]
            }
          },
          {
            "name": "fulfillment_filters",
            "in": "query",
            "description": "Comma separated values of the fulfillment filters to query for the Order",
            "schema": {
              "type": "string",
              "format": "string",
              "enum": [
                "unfulfilled",
                "fulfilled"
              ]
            }
          },
          {
            "name": "dateFilter",
            "in": "query",
            "description": "Date to query for the Order.",
            "schema": {
              "type": "string",
              "format": "string",
              "enum": [
                "today",
                "yesterday",
                "last30days",
                "last7days",
                "last90days",
                "customDate"
              ]
            }
          },
          {
            "name": "initialDate",
            "in": "query",
            "description": "Starting date to query for the Order in the format YYYY-MM-DD. CustomDate and finalDate need to be used",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          {
            "name": "finalDate",
            "in": "query",
            "description": "Starting date to query for the Order in the format YYYY-MM-DD. CustomDate and initialDate need to be used",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated values of the fields to query for the Order",
            "schema": {
              "type": "string",
              "format": "string",
              "enum": [
                "id",
                "tax",
                "..."
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of orders",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Order"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invalid query.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/orders/after/{id}.json": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Retrieve orders filtered by Order Id.",
        "description": "For example the GET /orders/after/5000 will return Order 5001, 5002, 5003, etc.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Order",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "404": {
            "description": "Order Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/orders/{id}/history.json": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Retrieve all Order History.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Order",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array with Order History",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderHistory"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Create a new Order History Entry.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the OrderHistory",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Order History parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderHistoryEdit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderHistory"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/orders/{id}/documents.json": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Retrieve all Documents from an  Order.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Order",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array with Documents",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Document"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Create a new Order Document Entry.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Order",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Document parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Document"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/orders/{id}/documents/{public_id}.json": {
      "put": {
        "tags": [
          "Orders"
        ],
        "summary": "Update a Document from an Order.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Order",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "public_id",
            "in": "path",
            "description": "Public Id of the Document",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Document parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentFieldsToUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "404": {
            "description": "Document Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Orders"
        ],
        "summary": "Delete a Document from an Order.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Order",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "public_id",
            "in": "path",
            "description": "Public Id of the Document",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Page Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/fulfillments/count.json": {
      "get": {
        "tags": [
          "Fulfillments"
        ],
        "summary": "Count all Fulfillments.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Count"
                }
              }
            }
          }
        }
      }
    },
    "/fulfillments.json": {
      "get": {
        "tags": [
          "Fulfillments"
        ],
        "summary": "Retrieve all Fulfillments.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/LimitParam"
          },
          {
            "$ref": "#/components/parameters/PageParam"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Fulfillments",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Fulfillment"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Fulfillments"
        ],
        "summary": "Create a new Fulfillment.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "description": "Fulfillment parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FulfillmentCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Fulfillment"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/fulfillments/{id}.json": {
      "get": {
        "tags": [
          "Fulfillments"
        ],
        "summary": "Retrieve a single Fulfillment.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Fulfillment",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Fulfillment"
                }
              }
            }
          },
          "404": {
            "description": "Fulfillment Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Fulfillments"
        ],
        "summary": "Modify an existing Fulfillment.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Fulfillment",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Fulfillment parameters to change",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FulfillmentEdit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Fulfillment"
                }
              }
            }
          },
          "404": {
            "description": "Fulfillment Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/order/{id}/fulfillments.json": {
      "get": {
        "tags": [
          "Fulfillments"
        ],
        "summary": "Retrieve the Fulfillments associated with the Order.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Order",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Fulfillment"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Fulfillment Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/pages.json": {
      "get": {
        "tags": [
          "Pages"
        ],
        "summary": "Retrieve all Pages.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/LimitParam"
          },
          {
            "$ref": "#/components/parameters/PageParam"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Pages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Page"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Pages"
        ],
        "summary": "Create a new Page.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "description": "Page parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PageModify"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/pages/count.json": {
      "get": {
        "tags": [
          "Pages"
        ],
        "summary": "Count all Pages.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Total number of pages",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Count"
                }
              }
            }
          }
        }
      }
    },
    "/pages/{id}.json": {
      "get": {
        "tags": [
          "Pages"
        ],
        "summary": "Retrieve a single Page by id.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Page",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page"
                }
              }
            }
          },
          "404": {
            "description": "Page Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Pages"
        ],
        "summary": "Update a Page.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Page",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Page parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PageModify"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page"
                }
              }
            }
          },
          "404": {
            "description": "Page Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Pages"
        ],
        "summary": "Delete an existing Page.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Page",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Page Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/customers.json": {
      "get": {
        "tags": [
          "Customers"
        ],
        "summary": "Retrieve all Customers.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/LimitParam"
          },
          {
            "$ref": "#/components/parameters/PageParam"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Orders",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Customer"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Customers"
        ],
        "summary": "Create a new Customer.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "description": "Customer parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerWithPasswordNoID"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          },
          "404": {
            "description": "Customer Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/customers/count.json": {
      "get": {
        "tags": [
          "Customers"
        ],
        "summary": "Count all Customers.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Count"
                }
              }
            }
          }
        }
      }
    },
    "/customers/email/{email}.json": {
      "get": {
        "tags": [
          "Customers"
        ],
        "summary": "Retrieve a single Customer by email.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "description": "Email of the Customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          },
          "404": {
            "description": "Customer Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/customers/{id}/orders.json": {
      "get": {
        "tags": [
          "Customers"
        ],
        "summary": "Retrieve all orders of single Customer",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Customer",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/LimitParam"
          },
          {
            "$ref": "#/components/parameters/PageParam"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Orders",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Order"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Customer Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/customers/{id}/orders/status/{status}.json": {
      "get": {
        "tags": [
          "Customers"
        ],
        "summary": "Retrieve all orders of single Customer",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Customer",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "status",
            "in": "path",
            "description": "Status of the Order used as filter",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "Abandoned",
                "Canceled",
                "Pending Payment",
                "Paid"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/LimitParam"
          },
          {
            "$ref": "#/components/parameters/PageParam"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Orders",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Order"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Customer Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/customers/{id}.json": {
      "get": {
        "tags": [
          "Customers"
        ],
        "summary": "Retrieve a single Customer by id.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomerIDParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          },
          "404": {
            "description": "Customer Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Customers"
        ],
        "summary": "Update a new Customer.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomerIDParam"
          }
        ],
        "requestBody": {
          "description": "Customer parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerWithPasswordNoID"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          },
          "404": {
            "description": "Customer Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Customers"
        ],
        "summary": "Delete an existing Customer.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomerIDParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Customer Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/customers/search.json": {
      "get": {
        "tags": [
          "Customers"
        ],
        "summary": "Retrieve a Customer List from a query.",
        "description": "Endpoint example: \n\n```text\nhttps://api.jumpseller.com/v1/customers/search.json?query=test&order=desc,description \n```",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Text to query for the Customer. If empty return all customers.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort Customers by creation date, 'asc' for ascending order or 'desc' for descending order.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "string",
              "default": "asc"
            }
          },
          {
            "$ref": "#/components/parameters/LimitParam"
          },
          {
            "$ref": "#/components/parameters/PageParam"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Customers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Customer"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customer_categories.json": {
      "get": {
        "tags": [
          "Customer Categories"
        ],
        "summary": "Retrieve all Customer Categories.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/LimitParam"
          },
          {
            "$ref": "#/components/parameters/PageParam"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Customer Categories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomerCategory"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Customer Categories"
        ],
        "summary": "Create a new CustomerCategory.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "description": "CustomerCategory parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerCategoryEdit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCategory"
                }
              }
            }
          },
          "404": {
            "description": "CustomerCategory Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/customer_categories/{id}.json": {
      "get": {
        "tags": [
          "Customer Categories"
        ],
        "summary": "Retrieve a single CustomerCategory.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the CustomerCategory",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCategory"
                }
              }
            }
          },
          "404": {
            "description": "CustomerCategory Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Customer Categories"
        ],
        "summary": "Update a CustomerCategory.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the CustomerCategory",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "CustomerCategory parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerCategoryEdit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCategory"
                }
              }
            }
          },
          "404": {
            "description": "CustomerCategory Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Customer Categories"
        ],
        "summary": "Delete an existing CustomerCategory.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the CustomerCategory",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "CustomerCategory Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/customer_categories/{id}/customers.json": {
      "get": {
        "tags": [
          "Customer Categories"
        ],
        "summary": "Retrieves the customers in a CustomerCategory.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the CustomerCategory",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Customer"
                  }
                }
              }
            }
          },
          "404": {
            "description": "CustomerCategory Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Customer Categories"
        ],
        "summary": "Adds Customers to a CustomerCategory.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the CustomerCategory",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Customer parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomersToCustomerCategory"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Array of Customers in the Customer Category",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Customer"
                  }
                }
              }
            }
          },
          "404": {
            "description": "CustomerCategory Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/customer_categories/{id}/customers/{customer_id}.json": {
      "delete": {
        "tags": [
          "Customer Categories"
        ],
        "summary": "Delete Customer from an existing CustomerCategory.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the CustomerCategory",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "customer_id",
            "in": "path",
            "description": "Id of the Customer",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "CustomerCategory or Customer Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/customers/{id}/fields": {
      "get": {
        "tags": [
          "Customer Additional Fields"
        ],
        "summary": "Retrieves the Customer Additional Field of a Customer.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomerIDParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomerAdditionalField"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Customer Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Customer Additional Fields"
        ],
        "summary": "Adds Customer Additional Fields to a Customer.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomerIDParam"
          }
        ],
        "requestBody": {
          "description": "Customer Additional Field parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerAdditionalFieldEdit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAdditionalField"
                }
              }
            }
          },
          "404": {
            "description": "Customer Additional Field Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/customers/{id}/fields/{field_id}": {
      "get": {
        "tags": [
          "Customer Additional Fields"
        ],
        "summary": "Retrieve a single Customer Additional Field.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomerIDParam"
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "Id of the Customer Additional Field",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAdditionalField"
                }
              }
            }
          },
          "404": {
            "description": "Customer Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Customer Additional Fields"
        ],
        "summary": "Update a Customer Additional Field.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomerIDParam"
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "Id of the Customer Additional Field",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Customer Additional Field parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerAdditionalFieldEdit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAdditionalField"
                }
              }
            }
          },
          "400": {
            "description": "Customer Additional Field Bad Parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadParams"
                }
              }
            }
          },
          "404": {
            "description": "Customer Additional Field Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Customer Additional Fields"
        ],
        "summary": "Delete a Customer Additional Field.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomerIDParam"
          },
          {
            "name": "field_id",
            "in": "path",
            "description": "Id of the Customer Additional Field",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Customer Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/promotions.json": {
      "get": {
        "tags": [
          "Promotions"
        ],
        "summary": "Retrieve all Promotions.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Promotions' list restriction (default: 50 | max: 200).",
            "schema": {
              "type": "integer",
              "format": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Promotions' list page (default: 1).",
            "schema": {
              "type": "integer",
              "format": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Promotions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Promotion"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Promotions"
        ],
        "summary": "Create a new Promotion.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "description": "Promotion parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PromotionEdit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Promotion"
                }
              }
            }
          },
          "404": {
            "description": "Promotion Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/promotions/{id}.json": {
      "get": {
        "tags": [
          "Promotions"
        ],
        "summary": "Retrieve a single Promotion.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Promotion",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Promotion"
                }
              }
            }
          },
          "404": {
            "description": "Promotion Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Promotions"
        ],
        "summary": "Update a Promotion.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Promotion",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Promotion parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PromotionEdit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Promotion"
                }
              }
            }
          },
          "404": {
            "description": "Promotion Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Promotions"
        ],
        "summary": "Delete an existing Promotion.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Promotion",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Promotion Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/payment_methods.json": {
      "get": {
        "tags": [
          "Payment Methods"
        ],
        "summary": "Retrieve all Store's Payment Methods.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "An array of Payment Methods",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentMethod"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/payment_methods/{id}.json": {
      "get": {
        "tags": [
          "Payment Methods"
        ],
        "summary": "Retrieve a single Payment Method.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Payment Method",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethod"
                }
              }
            }
          },
          "404": {
            "description": "PaymentMethod Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/shipping_methods.json": {
      "get": {
        "tags": [
          "Shipping Methods"
        ],
        "summary": "Retrieve all Store's Shipping Methods.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "enabled",
            "in": "path",
            "description": "If shipping method is enabled",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Shipping Methods",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ShippingMethod"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Shipping Methods"
        ],
        "summary": "Creates a Shipping Method.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "description": "Shipping Method parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShippingMethodEdit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShippingMethod"
                }
              }
            }
          },
          "404": {
            "description": "ShippingMethod Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/shipping_methods/{id}.json": {
      "get": {
        "tags": [
          "Shipping Methods"
        ],
        "summary": "Retrieve a single Shipping Method.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Shipping Method",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShippingMethod"
                }
              }
            }
          },
          "404": {
            "description": "ShippingMethod Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Shipping Methods"
        ],
        "summary": "Update a Shipping Method.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Shipping Method",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Shipping Method parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShippingMethodEdit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShippingMethod"
                }
              }
            }
          },
          "404": {
            "description": "Shipping Method Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Shipping Methods"
        ],
        "summary": "Delete an existing Shipping Method.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Shipping Method",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Shipping Method Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/locations.json": {
      "get": {
        "tags": [
          "Pickup Locations"
        ],
        "summary": "Retrieve all Store's Locations",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "An array of Pickup Locations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PickupLocation"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Pickup Locations"
        ],
        "summary": "Create a Pickup Location",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "description": "Location parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocationCreateFields"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "An array of Pickup Locations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PickupLocation"
                }
              }
            }
          }
        }
      }
    },
    "/locations/{id}.json": {
      "get": {
        "tags": [
          "Pickup Locations"
        ],
        "summary": "Retrieve a Store's Locations by ID",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ProductIDParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PickupLocation"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Location not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Pickup Locations"
        ],
        "summary": "Update a Pickup Location",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ProductIDParam"
          }
        ],
        "requestBody": {
          "description": "Location parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocationCreateFields"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "An array of Pickup Locations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PickupLocation"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Pickup Locations"
        ],
        "summary": "Delete a Store's Locations by ID",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ProductIDParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Location Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/custom_fields.json": {
      "get": {
        "tags": [
          "Custom Fields"
        ],
        "summary": "Retrieve all Store's Custom Fields.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "An array of Custom Fields",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomField"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Custom Fields"
        ],
        "summary": "Create a new Custom Field.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "description": "Custom Field parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldEdit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomField"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/custom_fields/{id}.json": {
      "get": {
        "tags": [
          "Custom Fields"
        ],
        "summary": "Retrieve a single CustomField.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the CustomField",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomField"
                }
              }
            }
          },
          "404": {
            "description": "CustomField Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Custom Fields"
        ],
        "summary": "Update a CustomField.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the CustomField",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "CustomField parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldEdit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomField"
                }
              }
            }
          },
          "404": {
            "description": "CustomField Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Custom Fields"
        ],
        "summary": "Delete an existing CustomField.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the CustomField",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "CustomField Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/custom_fields/{id}/select_options.json": {
      "get": {
        "tags": [
          "Custom Field Select Options"
        ],
        "summary": "Retrieve all Store's Custom Fields.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the CustomField",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Custom Fields Select Options",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomFieldSelectOption"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Custom Field Select Options"
        ],
        "summary": "Create a new Custom Field Select Option.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the CustomField",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Custom Field Select Option parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldSelectOptionEdit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldSelectOption"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/custom_fields/{id}/select_options/{custom_field_select_option_id}.json": {
      "get": {
        "tags": [
          "Custom Field Select Options"
        ],
        "summary": "Retrieve a single SelectOption from a CustomField.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the CustomField",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "custom_field_select_option_id",
            "in": "path",
            "description": "Id of the CustomFieldSelectOption",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldSelectOption"
                }
              }
            }
          },
          "404": {
            "description": "CustomFieldSelectOption Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Custom Field Select Options"
        ],
        "summary": "Update a SelectOption from a CustomField.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the CustomField",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "custom_field_select_option_id",
            "in": "path",
            "description": "Id of the CustomFieldSelectOption",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "CustomFieldSelectOption parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldSelectOptionEdit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldSelectOption"
                }
              }
            }
          },
          "404": {
            "description": "CustomFieldSelectOption Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Custom Fields"
        ],
        "summary": "Delete an existing CustomFieldSelectOption.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the CustomField",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "custom_field_select_option_id",
            "in": "path",
            "description": "Id of the CustomFieldSelectOption",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "CustomFieldSelectOption Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/checkout_custom_fields.json": {
      "get": {
        "tags": [
          "Checkout Custom Fields"
        ],
        "summary": "Retrieve all Checkout Custom Fields.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/LimitParam"
          },
          {
            "$ref": "#/components/parameters/PageParam"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Checkout Custom Fields",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CheckoutCustomField"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Checkout Custom Fields"
        ],
        "summary": "Create a new CheckoutCustomField.",
        "description": "Type values can be: input, selection, checkbox, date or text. Area values can be: contact, billing_shipping or other.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "description": "CheckoutCustomField parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckoutCustomFieldEdit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutCustomField"
                }
              }
            }
          },
          "404": {
            "description": "CheckoutCustomField Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/checkout_custom_fields/{id}.json": {
      "get": {
        "tags": [
          "Checkout Custom Fields"
        ],
        "summary": "Retrieve a single CheckoutCustomField.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the CheckoutCustomField",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutCustomField"
                }
              }
            }
          },
          "404": {
            "description": "CheckoutCustomField Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Checkout Custom Fields"
        ],
        "summary": "Update a CheckoutCustomField.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the CheckoutCustomField",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "CheckoutCustomField parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckoutCustomFieldEdit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutCustomField"
                }
              }
            }
          },
          "404": {
            "description": "CheckoutCustomField Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Checkout Custom Fields"
        ],
        "summary": "Delete an existing CheckoutCustomField.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the CheckoutCustomField",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "CheckoutCustomField Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/countries.json": {
      "get": {
        "tags": [
          "Countries"
        ],
        "summary": "Retrieve all Countries.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "An array of Countries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Country"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/countries/{country_code}.json": {
      "get": {
        "tags": [
          "Countries"
        ],
        "summary": "Retrieve a single Country information.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "country_code",
            "in": "path",
            "description": "ISO3166 Country Code",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A Country information object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Country"
                }
              }
            }
          },
          "404": {
            "description": "Country Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/countries/{country_code}/regions.json": {
      "get": {
        "tags": [
          "Countries",
          "Regions"
        ],
        "summary": "Retrieve all Regions from a single Country.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "country_code",
            "in": "path",
            "description": "ISO3166 Country Code",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Regions from a single Country",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Region"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Country Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/countries/{country_code}/regions/{region_code}/municipalities.json": {
      "get": {
        "tags": [
          "Countries",
          "Regions",
          "Municipalities"
        ],
        "summary": "Retrieve all Municipalities from a single Region.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "country_code",
            "in": "path",
            "description": "ISO3166 Country Code",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          {
            "name": "region_code",
            "in": "path",
            "description": "Region Code",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Municipalities from a single Region",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Municipality"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Country or Region Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/countries/{country_code}/regions/{region_code}.json": {
      "get": {
        "tags": [
          "Countries",
          "Regions"
        ],
        "summary": "Retrieve a single Region information object.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "country_code",
            "in": "path",
            "description": "ISO3166 Country Code",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          {
            "name": "region_code",
            "in": "path",
            "description": "Region Code",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A Region information object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Region"
                }
              }
            }
          },
          "404": {
            "description": "Country or Region not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/taxes.json": {
      "get": {
        "tags": [
          "Taxes"
        ],
        "summary": "Retrieve all Taxes.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "An array of Taxes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tax"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Taxes"
        ],
        "summary": "Create a new Tax.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "description": "Tax parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxEdit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tax"
                }
              }
            }
          },
          "404": {
            "description": "Tax Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/taxes/{id}.json": {
      "get": {
        "tags": [
          "Taxes"
        ],
        "summary": "Retrieve a single Tax information.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Tax",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A Tax information object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tax"
                }
              }
            }
          },
          "404": {
            "description": "Tax Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/store/create.json": {
      "post": {
        "tags": [
          "Partners"
        ],
        "summary": "Create a Partnered Store",
        "security": [
          {
            "BasicAuthentication": [
              "partner_code:auth_token"
            ]
          },
          {
            "partner_codeParameter": [],
            "auth_tokenParameter": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "description": "New partnered Store parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartnerStoreCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A Partner Store object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerStoreCode"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerError"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/store/check_status.json": {
      "get": {
        "tags": [
          "Partners"
        ],
        "summary": "Retrive store creation status.",
        "security": [
          {
            "BasicAuthentication": [
              "partner_code:auth_token"
            ]
          },
          {
            "partner_codeParameter": [],
            "auth_tokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "store_code",
            "in": "query",
            "description": "Store Code",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "ISO 3166-2 code of the language used in the response messages.",
            "schema": {
              "type": "string",
              "format": "string",
              "default": "en"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A Store status object if creation is still in progress. A new Partner Store object when creation is done.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PartnerStoreStatus"
                    },
                    {
                      "$ref": "#/components/schemas/NewPartnerStore"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerError"
                }
              }
            }
          }
        }
      }
    },
    "/partners/stores.json": {
      "get": {
        "tags": [
          "Partners"
        ],
        "summary": "Retrieve statistics.",
        "security": [
          {
            "BasicAuthentication": [
              "partner_code:auth_token"
            ]
          },
          {
            "partner_codeParameter": [],
            "auth_tokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageParam"
          },
          {
            "name": "from",
            "in": "query",
            "description": "Statistics start date. Should be in format 'Y-m-d'.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "Statistics end date. Should be in format 'Y-m-d'.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "sting"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of partner stores statistics.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StoreObject"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerError"
                }
              }
            }
          }
        }
      }
    },
    "/partners/subscriptions.json": {
      "get": {
        "tags": [
          "Partners"
        ],
        "summary": "Retrieve subscriptions and transactions.",
        "security": [
          {
            "BasicAuthentication": [
              "partner_code:auth_token"
            ]
          },
          {
            "partner_codeParameter": [],
            "auth_tokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of partner stores statistics.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PartnerStoresSubscription"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerError"
                }
              }
            }
          }
        }
      }
    },
    "/carts/{id}.json": {
      "get": {
        "tags": [
          "Cart"
        ],
        "summary": "Obtain information for a cart.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CartIDParam"
          },
          {
            "$ref": "#/components/parameters/LocaleParam"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Orders",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Order"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Cart Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/documents.json": {
      "get": {
        "tags": [
          "Documents"
        ],
        "summary": "Retrieve all Documents from a Store.",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/LimitParam"
          },
          {
            "$ref": "#/components/parameters/PageParam"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of documents",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Document"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/transaction_ledger/balance.json": {
      "get": {
        "tags": [
          "Transaction Ledgers"
        ],
        "summary": "Store Balance",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Store Balance Information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StoreBalance"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products_locations": {
      "get": {
        "tags": [
          "Products Locations"
        ],
        "summary": "Stock by Product and Location",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "parameters": [
          {
            "name": "location_ids",
            "in": "query",
            "description": "List of location IDs (comma separated)",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "maxItems": 50
            }
          },
          {
            "name": "product_ids",
            "in": "query",
            "description": "List of product IDs (comma separated)",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "maxItems": 50
            }
          },
          {
            "name": "variant_ids",
            "in": "query",
            "description": "List of variant IDs (comma separated)",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "maxItems": 50
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of products locations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductsLocationsWithoutStockUnlimited"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "put": {
        "tags": [
          "Products Locations"
        ],
        "summary": "Update Stock by Product and Location",
        "security": [
          {
            "BasicAuthentication": [
              "login:authtoken"
            ]
          },
          {
            "loginParameter": [],
            "authtokenParameter": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductsLocations"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Products locations updated successfully"
          },
          "400": {
            "description": "Bad request, check your parameters"
          },
          "500": {
            "description": "Error while updating stock error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Store": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Store Name"
          },
          "code": {
            "type": "string",
            "description": "Store Code"
          },
          "currency": {
            "type": "string",
            "description": "Store Currency"
          },
          "country": {
            "type": "string",
            "description": "Store Country"
          },
          "timezone": {
            "type": "string",
            "description": "Store Timezone"
          },
          "email": {
            "type": "string",
            "description": "Store Admin Email"
          },
          "hooks_token": {
            "type": "string",
            "description": "Store Hooks Auth token"
          },
          "url": {
            "type": "string",
            "description": "Store URL"
          },
          "logo": {
            "type": "string",
            "description": "Store Logo URL"
          },
          "weight_unit": {
            "type": "string",
            "description": "Store Weight Unit"
          },
          "subscription_status": {
            "type": "string",
            "description": "Subscription status"
          },
          "subscription_plan": {
            "type": "string",
            "description": "Subscription plan"
          },
          "fb_pixel_id": {
            "type": "string",
            "description": "Facebook Pixel Id"
          },
          "address": {
            "$ref": "#/components/schemas/StoreAddress"
          },
          "whatsapp_phone": {
            "type": "string",
            "description": "Store WhatsApp Phone"
          }
        }
      },
      "App": {
        "type": "object",
        "properties": {
          "apps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppFields"
            }
          }
        }
      },
      "AppFields": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code of the app"
          },
          "name": {
            "type": "string",
            "description": "Name of the app"
          },
          "author": {
            "type": "string",
            "description": "Author of the app"
          },
          "page": {
            "type": "string",
            "description": "Page of the app"
          },
          "description": {
            "type": "string",
            "description": "Description of the app"
          },
          "js": {
            "type": "boolean",
            "description": "True if the app is a jsapp",
            "default": false
          }
        }
      },
      "JSApp": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "Url of the HTML to inject"
          },
          "template": {
            "type": "string",
            "description": "Template of Store Theme to inject HTML"
          },
          "element": {
            "type": "string",
            "description": "Element of Template to inject HTML"
          }
        }
      },
      "JSAppEdit": {
        "type": "object",
        "properties": {
          "app": {
            "$ref": "#/components/schemas/JSApp"
          }
        }
      },
      "Hook": {
        "type": "object",
        "properties": {
          "hook": {
            "$ref": "#/components/schemas/HookFields"
          }
        }
      },
      "HookEdit": {
        "type": "object",
        "properties": {
          "hook": {
            "$ref": "#/components/schemas/HookEditFields"
          }
        }
      },
      "HookFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the Hook",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Hook name"
          },
          "event": {
            "type": "string",
            "description": "Event associated with Hook"
          },
          "url": {
            "type": "string",
            "description": "Hook URL to be notified"
          },
          "created_at": {
            "type": "string",
            "description": "Hook creation date"
          }
        }
      },
      "HookEditFields": {
        "required": [
          "event",
          "url"
        ],
        "type": "object",
        "properties": {
          "event": {
            "type": "string",
            "description": "Event associated with Hook",
            "enum": [
              "order_updated",
              "order_pending_payment",
              "order_paid",
              "order_shipped",
              "order_canceled",
              "order_abandoned",
              "product_created",
              "product_updated",
              "product_deleted",
              "customer_created",
              "customer_updated",
              "customer_deleted"
            ]
          },
          "url": {
            "type": "string",
            "description": "Hook URL to be notified"
          }
        }
      },
      "Page": {
        "type": "object",
        "properties": {
          "page": {
            "$ref": "#/components/schemas/PageFields"
          }
        }
      },
      "PageModify": {
        "type": "object",
        "properties": {
          "page": {
            "$ref": "#/components/schemas/PageModifyFields"
          }
        }
      },
      "PageFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the Page"
          },
          "title": {
            "type": "string",
            "description": "Title of the Page"
          },
          "body": {
            "type": "string",
            "description": "Body of the Page"
          },
          "status": {
            "type": "string",
            "description": "Status of the Page",
            "enum": [
              "public",
              "draft",
              "hidden"
            ]
          },
          "legal": {
            "type": "boolean",
            "description": "True if it is a legal page"
          },
          "page_title": {
            "type": "string",
            "description": "Meta title of the Page"
          },
          "meta_description": {
            "type": "string",
            "description": "Meta description of the Page"
          },
          "categories": {
            "type": "array",
            "description": "Page categories to which the Page belongs to",
            "items": {
              "$ref": "#/components/schemas/PageCategory"
            }
          },
          "template": {
            "$ref": "#/components/schemas/PageTemplate"
          },
          "permalink": {
            "type": "string",
            "description": "URL of the Page"
          },
          "image": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "url": {
                "type": "string"
              }
            },
            "description": "Image of the Page"
          }
        }
      },
      "PageModifyFields": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title of the Page"
          },
          "body": {
            "type": "string",
            "description": "Body of the Page"
          },
          "status": {
            "type": "string",
            "description": "Status of the Page",
            "enum": [
              "public",
              "draft",
              "hidden"
            ]
          },
          "page_title": {
            "type": "string",
            "description": "Meta title of the Page"
          },
          "meta_description": {
            "type": "string",
            "description": "Meta description of the Page"
          },
          "categories": {
            "type": "array",
            "description": "Page categories to which the Page belongs to",
            "items": {
              "$ref": "#/components/schemas/PageCategory"
            }
          },
          "template": {
            "type": "integer",
            "description": "ID of the Page template. Use null for the blank layout ('None')"
          },
          "permalink": {
            "type": "string",
            "description": "URL of the Page"
          },
          "image": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "url": {
                "type": "string"
              }
            },
            "description": "Image of the Page"
          }
        }
      },
      "PageCategory": {
        "type": "object",
        "properties": {
          "position": {
            "type": "integer"
          },
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "PageTemplate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        },
        "description": "Template of the Page"
      },
      "Product": {
        "type": "object",
        "properties": {
          "product": {
            "$ref": "#/components/schemas/ProductFields"
          }
        }
      },
      "ProductCreate": {
        "type": "object",
        "properties": {
          "product": {
            "$ref": "#/components/schemas/ProductCreateFields"
          }
        }
      },
      "ProductEdit": {
        "type": "object",
        "properties": {
          "product": {
            "$ref": "#/components/schemas/ProductEditFields"
          }
        }
      },
      "ProductFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the product",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name of the product"
          },
          "page_title": {
            "type": "string",
            "description": "SEO title of the product"
          },
          "description": {
            "type": "string",
            "description": "Description of the product"
          },
          "type": {
            "type": "string",
            "description": "Type of the product (physical, digital or gift_card)"
          },
          "days_to_expire": {
            "type": "integer",
            "description": "Number of days after the purchase date that the gift card will remain valid",
            "format": "int32",
            "default": 365
          },
          "price": {
            "type": "number",
            "description": "Price of the product",
            "format": "float"
          },
          "discount": {
            "type": "number",
            "description": "Discount of the product",
            "format": "float"
          },
          "weight": {
            "type": "number",
            "description": "Weight of the product",
            "format": "float",
            "default": 1
          },
          "stock": {
            "type": "integer",
            "description": "Quantity in stock for the product",
            "format": "int32",
            "default": 100
          },
          "stock_unlimited": {
            "type": "boolean",
            "description": "True if the Product has unlimited stock"
          },
          "stock_threshold": {
            "type": "integer",
            "description": "Low stock threshold quantity.",
            "format": "int32",
            "default": 0
          },
          "stock_notification": {
            "type": "boolean",
            "description": "True if the Product has low stock threshold quantity enabled"
          },
          "cost_per_item": {
            "type": "number",
            "description": "Cost per item of the product (only you can see this)."
          },
          "compare_at_price": {
            "type": "number",
            "description": "Used to show a sale price. Value must be higher than the price."
          },
          "sku": {
            "type": "string",
            "description": "Stock Keeping Unit of the product"
          },
          "brand": {
            "type": "string",
            "description": "Brand of the product"
          },
          "barcode": {
            "type": "string",
            "description": "Barcode of the product"
          },
          "google_product_category": {
            "type": "string",
            "description": "Category of a Product based on the Google product taxonomy"
          },
          "featured": {
            "type": "boolean",
            "description": "True if the product is featured",
            "default": false
          },
          "reviews_enabled": {
            "type": "boolean",
            "description": "True if the customer reviews are enabled for this product",
            "default": true
          },
          "status": {
            "type": "string",
            "description": "Status of the product",
            "default": "available",
            "enum": [
              "available",
              "not-available",
              "disabled"
            ]
          },
          "created_at": {
            "type": "string",
            "description": "Date of product creation"
          },
          "updated_at": {
            "type": "string",
            "description": "Date of the last product update"
          },
          "package_format": {
            "type": "string",
            "description": "Format the product package",
            "default": "box",
            "enum": [
              "box",
              "cylinder"
            ]
          },
          "length": {
            "type": "number",
            "description": "Length of the product",
            "format": "float"
          },
          "width": {
            "type": "number",
            "description": "Width of the product",
            "format": "float"
          },
          "height": {
            "type": "number",
            "description": "Height of the product",
            "format": "float"
          },
          "diameter": {
            "type": "number",
            "description": "Diameter of the product",
            "format": "float"
          },
          "permalink": {
            "type": "string",
            "description": "Product unique URL path"
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryFields"
            }
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImageFields"
            }
          },
          "variants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VariantFields"
            }
          }
        }
      },
      "ProductEditFields": {
        "required": [
          "name",
          "price"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the product"
          },
          "description": {
            "type": "string",
            "description": "Description of the product"
          },
          "page_title": {
            "type": "string",
            "description": "SEO title of the product"
          },
          "meta_description": {
            "type": "string",
            "description": "SEO meta description of the product"
          },
          "type": {
            "type": "string",
            "description": "Type of the product (physical, digital or gift_card)"
          },
          "days_to_expire": {
            "type": "integer",
            "description": "Number of days after the purchase date that the gift card will remain valid",
            "format": "int32",
            "default": 365
          },
          "price": {
            "type": "number",
            "description": "Price of the product",
            "format": "float"
          },
          "weight": {
            "type": "number",
            "description": "Weight of the product",
            "format": "float",
            "default": 1
          },
          "stock": {
            "type": "integer",
            "description": "Quantity in stock for the product",
            "format": "int32",
            "default": 100
          },
          "stock_unlimited": {
            "type": "boolean",
            "description": "True if the Product has unlimited stock"
          },
          "stock_threshold": {
            "type": "integer",
            "description": "Low stock threshold quantity.",
            "format": "int32",
            "default": 0
          },
          "stock_notification": {
            "type": "boolean",
            "description": "True if the Product has low stock threshold quantity enabled"
          },
          "cost_per_item": {
            "type": "number",
            "description": "Cost per item of the product (only you can see this)."
          },
          "compare_at_price": {
            "type": "number",
            "description": "Used to show a sale price. Value must be higher than the price."
          },
          "minimum_quantity": {
            "type": "number",
            "description": "Minimum amount of units required to proceed with the purchase. If present, must be bigger than 0."
          },
          "maximum_quantity": {
            "type": "number",
            "description": "Maximum amount of units that can be purchased per order. If present, must be bigger or equal to minimum_quantity."
          },
          "sku": {
            "type": "string",
            "description": "Stock Keeping Unit of the product"
          },
          "barcode": {
            "type": "string",
            "description": "Barcode of the product"
          },
          "google_product_category": {
            "type": "string",
            "description": "Category of a Product based on the Google product taxonomy"
          },
          "featured": {
            "type": "boolean",
            "description": "True if the product is featured",
            "default": false
          },
          "shipping_required": {
            "type": "boolean",
            "description": "False if the product is digital",
            "default": true
          },
          "status": {
            "type": "string",
            "description": "Status of the product",
            "default": "available",
            "enum": [
              "available",
              "not-available",
              "disabled"
            ]
          },
          "package_format": {
            "type": "string",
            "description": "Format the product package",
            "default": "box",
            "enum": [
              "box",
              "cylinder"
            ]
          },
          "length": {
            "type": "number",
            "description": "Length of the product",
            "format": "float"
          },
          "width": {
            "type": "number",
            "description": "Width of the product",
            "format": "float"
          },
          "height": {
            "type": "number",
            "description": "Height of the product",
            "format": "float"
          },
          "diameter": {
            "type": "number",
            "description": "Diameter of the product",
            "format": "float"
          },
          "permalink": {
            "type": "string",
            "description": "Product unique URL path"
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryFields"
            }
          },
          "variants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VariantFields"
            }
          }
        }
      },
      "LocationCreateFields": {
        "required": [
          "name",
          "email",
          "address",
          "city",
          "country"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the location"
          },
          "main": {
            "type": "boolean",
            "description": "Is the main location"
          },
          "email": {
            "type": "string",
            "description": "Email for the location"
          },
          "pickup_point": {
            "type": "boolean",
            "description": "Is a pickup_point"
          },
          "postal": {
            "type": "string",
            "description": "Postal code of the location"
          },
          "address": {
            "type": "string",
            "description": "Address of the location"
          },
          "city": {
            "type": "string",
            "description": "City of the location"
          },
          "country": {
            "type": "string",
            "description": "Country of the location"
          },
          "Region": {
            "type": "string",
            "description": "Region of the location"
          }
        }
      },
      "LocationUpdateFields": {
        "required": [],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the location"
          },
          "main": {
            "type": "boolean",
            "description": "Is the main location"
          },
          "email": {
            "type": "string",
            "description": "Email for the location"
          },
          "pickup_point": {
            "type": "boolean",
            "description": "Is a pickup_point"
          },
          "postal": {
            "type": "string",
            "description": "Postal code of the location"
          },
          "address": {
            "type": "string",
            "description": "Address of the location"
          },
          "city": {
            "type": "string",
            "description": "City of the location"
          },
          "country": {
            "type": "string",
            "description": "Country of the location"
          },
          "Region": {
            "type": "string",
            "description": "Region of the location"
          }
        }
      },
      "ProductCreateFields": {
        "required": [
          "name",
          "price"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the product"
          },
          "description": {
            "type": "string",
            "description": "Description of the product"
          },
          "page_title": {
            "type": "string",
            "description": "SEO title of the product"
          },
          "meta_description": {
            "type": "string",
            "description": "SEO meta description of the product"
          },
          "type": {
            "type": "string",
            "description": "Type of the product (physical, digital or gift_card)"
          },
          "days_to_expire": {
            "type": "integer",
            "description": "Number of days after the purchase date that the gift card will remain valid",
            "format": "int32",
            "default": 365
          },
          "price": {
            "type": "number",
            "description": "Price of the product",
            "format": "float"
          },
          "weight": {
            "type": "number",
            "description": "Weight of the product",
            "format": "float",
            "default": 1
          },
          "stock": {
            "type": "integer",
            "description": "Quantity in stock for the product",
            "format": "int32",
            "default": 100
          },
          "stock_unlimited": {
            "type": "boolean",
            "description": "True if the Product has unlimited stock"
          },
          "stock_threshold": {
            "type": "integer",
            "description": "Low stock threshold quantity.",
            "format": "int32",
            "default": 0
          },
          "stock_notification": {
            "type": "boolean",
            "description": "True if the Product has low stock threshold quantity enabled"
          },
          "cost_per_item": {
            "type": "number",
            "description": "Cost per item of the product (only you can see this)."
          },
          "compare_at_price": {
            "type": "number",
            "description": "Used to show a sale price. Value must be higher than the price."
          },
          "minimum_quantity": {
            "type": "number",
            "description": "Minimum amount of units required to proceed with the purchase. If present, must be bigger than 0."
          },
          "maximum_quantity": {
            "type": "number",
            "description": "Maximum amount of units that can be purchased per order. If present, must be bigger or equal to minimum_quantity."
          },
          "sku": {
            "type": "string",
            "description": "Stock Keeping Unit of the product"
          },
          "barcode": {
            "type": "string",
            "description": "Barcode of the product"
          },
          "google_product_category": {
            "type": "string",
            "description": "Category of a Product based on the Google product taxonomy"
          },
          "featured": {
            "type": "boolean",
            "description": "True if the product is featured",
            "default": false
          },
          "shipping_required": {
            "type": "boolean",
            "description": "False if the product is digital",
            "default": true
          },
          "status": {
            "type": "string",
            "description": "Status of the product",
            "default": "available",
            "enum": [
              "available",
              "not-available",
              "disabled"
            ]
          },
          "package_format": {
            "type": "string",
            "description": "Format the product package",
            "default": "box",
            "enum": [
              "box",
              "cylinder"
            ]
          },
          "length": {
            "type": "number",
            "description": "Length of the product",
            "format": "float"
          },
          "width": {
            "type": "number",
            "description": "Width of the product",
            "format": "float"
          },
          "height": {
            "type": "number",
            "description": "Height of the product",
            "format": "float"
          },
          "diameter": {
            "type": "number",
            "description": "Diameter of the product",
            "format": "float"
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryFields"
            }
          },
          "variants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VariantEdit"
            }
          }
        }
      },
      "ProductOption": {
        "type": "object",
        "properties": {
          "option": {
            "$ref": "#/components/schemas/ProductOptionFields"
          }
        }
      },
      "ProductOptionEdit": {
        "type": "object",
        "properties": {
          "option": {
            "$ref": "#/components/schemas/ProductOptionEditFields"
          }
        }
      },
      "ProductOptionVariantEdit": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the product option"
          },
          "option_type": {
            "type": "string",
            "description": "Type of the product option that generates variants",
            "enum": [
              "option",
              "color"
            ]
          },
          "value": {
            "type": "string",
            "description": "Value of the product option"
          },
          "custom": {
            "type": "string",
            "description": "Hexadecimal value of color. Only available for product option type 'Color'"
          },
          "product_option_position": {
            "type": "integer",
            "description": "position of product option",
            "format": "int32"
          },
          "product_value_position": {
            "type": "integer",
            "description": "position of product option value",
            "format": "int32"
          }
        }
      },
      "ProductOptionFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the product option",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name of the product option"
          },
          "position": {
            "type": "integer",
            "description": "Position of the product option",
            "format": "int32"
          },
          "option_type": {
            "type": "string",
            "description": "Type of the product option",
            "enum": [
              "option",
              "input",
              "text",
              "file",
              "color"
            ]
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductOptionValueFields"
            }
          }
        }
      },
      "ProductOptionEditFields": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the product option"
          },
          "position": {
            "type": "integer",
            "description": "Position of the product option",
            "format": "int32"
          },
          "option_type": {
            "type": "string",
            "description": "Type of the product option",
            "enum": [
              "option",
              "input",
              "text",
              "file",
              "color"
            ]
          }
        }
      },
      "ProductOptionValue": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/ProductOptionValueFields"
          }
        }
      },
      "ProductOptionValueEdit": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/ProductOptionValueEditFields"
          }
        }
      },
      "ProductOptionValueFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the product option value",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name of the product option value"
          },
          "custom": {
            "type": "string",
            "description": "Hexadecimal value of color. Only available for product option type 'Color'"
          },
          "position": {
            "type": "integer",
            "description": "Position of the product option value",
            "format": "int32"
          },
          "product_option": {
            "$ref": "#/components/schemas/ProductOption"
          },
          "variants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Variant"
            }
          }
        }
      },
      "ProductOptionValueEditFields": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the product option value"
          },
          "position": {
            "type": "integer",
            "description": "Position of the product option value",
            "format": "int32"
          },
          "custom": {
            "type": "string",
            "description": "Hexadecimal value of color. Only available for product option type 'Color'"
          }
        }
      },
      "Image": {
        "type": "object",
        "properties": {
          "image": {
            "$ref": "#/components/schemas/ImageFields"
          }
        }
      },
      "ImageEdit": {
        "type": "object",
        "properties": {
          "image": {
            "$ref": "#/components/schemas/ImageEditFields"
          }
        }
      },
      "ImageFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the image",
            "format": "int32"
          },
          "position": {
            "type": "integer",
            "description": "Position of the image",
            "format": "int32"
          },
          "url": {
            "type": "string",
            "description": "Complete URL of the image"
          }
        }
      },
      "ImageEditFields": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "Complete URL of the image"
          },
          "position": {
            "type": "integer",
            "description": "Position of the image",
            "format": "int32"
          }
        }
      },
      "Attachment": {
        "type": "object",
        "properties": {
          "attachment": {
            "$ref": "#/components/schemas/AttachmentFields"
          }
        }
      },
      "AttachmentEdit": {
        "type": "object",
        "properties": {
          "attachment": {
            "$ref": "#/components/schemas/AttachmentEditFields"
          }
        }
      },
      "AttachmentFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the attachment",
            "format": "int32"
          },
          "url": {
            "type": "string",
            "description": "Private URL of the attachment"
          }
        }
      },
      "AttachmentEditFields": {
        "type": "object",
        "properties": {
          "filename": {
            "type": "string",
            "description": "Filename of the attachment (with file extensison)"
          },
          "url": {
            "type": "string",
            "description": "Public accessible URL with the desired file contents. (LIMIT: 100MB)"
          }
        }
      },
      "DigitalProduct": {
        "type": "object",
        "properties": {
          "digital_product": {
            "$ref": "#/components/schemas/DigitalProductFields"
          }
        }
      },
      "DigitalProductEdit": {
        "type": "object",
        "properties": {
          "digital_product": {
            "$ref": "#/components/schemas/DigitalProductEditFields"
          }
        }
      },
      "DigitalProductFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the digital product",
            "format": "int32"
          },
          "url": {
            "type": "string",
            "description": "Private URL of the digital product"
          },
          "expiration_seconds": {
            "type": "integer",
            "description": "Time left in seconds before the current private URL expires",
            "format": "int32"
          }
        }
      },
      "DigitalProductEditFields": {
        "type": "object",
        "properties": {
          "filename": {
            "type": "string",
            "description": "Filename of the digital product (with file extensison)"
          },
          "url": {
            "type": "string",
            "description": "Public accessible URL with the desired file contents. (LIMIT: 100MB)"
          }
        }
      },
      "Variant": {
        "type": "object",
        "properties": {
          "variant": {
            "$ref": "#/components/schemas/VariantFields"
          }
        }
      },
      "VariantEdit": {
        "type": "object",
        "properties": {
          "variant": {
            "$ref": "#/components/schemas/VariantEditFields"
          }
        }
      },
      "VariantFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the product",
            "format": "int32"
          },
          "price": {
            "type": "number",
            "description": "Price of the product",
            "format": "float"
          },
          "sku": {
            "type": "string",
            "description": "Stock Keeping Unit of the Product's Variant"
          },
          "barcode": {
            "type": "string",
            "description": "Barcode of the Product's Variant"
          },
          "stock": {
            "type": "integer",
            "description": "Quantity in stock for the Product's Variant",
            "format": "int32",
            "default": 100
          },
          "stock_unlimited": {
            "type": "boolean",
            "description": "True if the Product's Variant has unlimited stock"
          },
          "stock_threshold": {
            "type": "integer",
            "description": "Low stock threshold quantity.",
            "format": "int32",
            "default": 0
          },
          "stock_notification": {
            "type": "boolean",
            "description": "True if the Product has low stock threshold quantity enabled"
          },
          "cost_per_item": {
            "type": "number",
            "description": "Cost per item for the Product's Variant (only you can see this)"
          },
          "compare_at_price": {
            "type": "number",
            "description": "Used to show a sale price. Value must be higher than the price"
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductOptionVariantEdit"
            }
          },
          "image": {
            "$ref": "#/components/schemas/ImageFields"
          }
        }
      },
      "VariantEditFields": {
        "type": "object",
        "properties": {
          "price": {
            "type": "number",
            "description": "Price of the product",
            "format": "float"
          },
          "sku": {
            "type": "string",
            "description": "Stock Keeping Unit of the Product's Variant"
          },
          "barcode": {
            "type": "string",
            "description": "Barcode of the Product's Variant",
            "default": 123456
          },
          "stock": {
            "type": "integer",
            "description": "Quantity in stock for the Product's Variant",
            "format": "int32",
            "default": 100
          },
          "stock_unlimited": {
            "type": "boolean",
            "description": "True if the Product's Variant has unlimited stock"
          },
          "stock_threshold": {
            "type": "integer",
            "description": "Low stock threshold quantity.",
            "format": "int32",
            "default": 0
          },
          "stock_notification": {
            "type": "boolean",
            "description": "True if the Product has low stock threshold quantity enabled"
          },
          "cost_per_item": {
            "type": "number",
            "description": "Cost per item for the Product's Variant (only you can see this)"
          },
          "compare_at_price": {
            "type": "number",
            "description": "Used to show a sale price. Value must be higher than the price"
          },
          "image_id": {
            "type": "integer",
            "description": "Unique identifier of the product image to associate with this variant",
            "format": "int32"
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductOptionVariantEdit"
            }
          }
        }
      },
      "Order": {
        "type": "object",
        "properties": {
          "order": {
            "$ref": "#/components/schemas/OrderFields"
          }
        }
      },
      "OrderCreate": {
        "type": "object",
        "properties": {
          "order": {
            "$ref": "#/components/schemas/OrderCreateFields"
          }
        }
      },
      "OrderEdit": {
        "type": "object",
        "properties": {
          "order": {
            "$ref": "#/components/schemas/OrderEditFields"
          }
        }
      },
      "OrderFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the Order",
            "format": "int32"
          },
          "source": {
            "$ref": "#/components/schemas/TrafficSource"
          },
          "created_at": {
            "type": "string",
            "description": "Order date"
          },
          "completed_at": {
            "type": "string",
            "description": "The date when the order was first completed."
          },
          "currency": {
            "type": "string",
            "description": "Currency of the Order"
          },
          "subtotal": {
            "type": "number",
            "description": "Subtotal value for the given Order. Excluding taxes, shipping and discounts",
            "format": "float"
          },
          "tax": {
            "type": "number",
            "description": "Tax value for the given order",
            "format": "float"
          },
          "shipping_tax": {
            "type": "number",
            "description": "Shipping Tax value for the given order",
            "format": "float"
          },
          "shipping": {
            "type": "number",
            "description": "Shipping value for the given Order",
            "format": "float"
          },
          "shipping_required": {
            "type": "boolean",
            "description": "False if the order is digital.",
            "default": true
          },
          "total": {
            "type": "number",
            "description": "Total value for the given Order. Including taxes, shipping and discounts",
            "format": "float"
          },
          "discount": {
            "type": "number",
            "description": "Discount value for the given Order",
            "format": "float"
          },
          "shipping_discount": {
            "type": "number",
            "description": "Shipping Discount value for the given order",
            "format": "float"
          },
          "gift_cards_discount": {
            "type": "number",
            "description": "Gift Cards Discount value for the given order",
            "format": "float"
          },
          "fulfillment_status": {
            "type": "string",
            "description": "Fulfillment Status for Order (translated)."
          },
          "shipping_method_id": {
            "type": "integer",
            "description": "Shipping method e.g. Royal Mail",
            "format": "int32"
          },
          "shipping_service_id": {
            "type": "integer",
            "description": "Shipping service",
            "format": "int32"
          },
          "shipping_method_name": {
            "type": "string",
            "description": "Shipping method e.g. Royal Mail"
          },
          "payment_method_name": {
            "type": "string",
            "description": "Payment Method name used e.g. PayPal"
          },
          "payment_method_type": {
            "type": "string",
            "description": "Payment Method type used e.g. paypal"
          },
          "payment_information": {
            "type": "string",
            "description": "Payment information for the given Order"
          },
          "additional_information": {
            "type": "string",
            "description": "Additional information for the given Order"
          },
          "duplicate_url": {
            "type": "string",
            "description": "Duplicate Order URL for the given Order"
          },
          "recovery_url": {
            "type": "string",
            "description": "Recovery Order URL for the given Order"
          },
          "review_url": {
            "type": "string",
            "description": "Review Order URL for the given Order"
          },
          "checkout_url": {
            "type": "string",
            "description": "Store Checkout Order URL for the given Order"
          },
          "coupons": {
            "type": "string",
            "description": "Promotion Coupons used on the given Order"
          },
          "promotions": {
            "type": "array",
            "description": "Promotions used on the given Order"
          },
          "customer": {
            "$ref": "#/components/schemas/CustomerSimpleFields"
          },
          "shipping_branch": {
            "$ref": "#/components/schemas/OrderShippingBranch"
          },
          "shipping_address": {
            "$ref": "#/components/schemas/OrderShippingAddress"
          },
          "billing_address": {
            "$ref": "#/components/schemas/OrderBillingAddress"
          },
          "pickup_address": {
            "$ref": "#/components/schemas/OrderPickupAddress"
          },
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderProduct"
            }
          },
          "additional_fields": {
            "type": "array",
            "description": "Array of additional fields for the given Order",
            "items": {
              "$ref": "#/components/schemas/OrderAdditionalFields"
            }
          },
          "shipping_taxes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderShippingTax"
            }
          },
          "status": {
            "type": "string",
            "description": "Status of the Order (translated).",
            "enum": [
              "Abandoned",
              "Canceled",
              "Pending Payment",
              "Paid"
            ]
          },
          "status_name": {
            "type": "string",
            "description": "Status of the Order (translated).",
            "enum": [
              "Abandoned",
              "Canceled",
              "Pending Payment",
              "Paid"
            ]
          },
          "status_enum": {
            "type": "string",
            "description": "Status of the Order (enum).",
            "enum": [
              "abandoned",
              "canceled",
              "pending_payment",
              "paid"
            ]
          },
          "tracking_url": {
            "type": "string",
            "description": "Tracking URL for Order Fulfillment."
          },
          "tracking_company": {
            "type": "string",
            "description": "Company Used for Order Fulfillment."
          },
          "tracking_number": {
            "type": "string",
            "description": "Tracking Number for Order Fulfillment."
          },
          "shipping_option": {
            "type": "string",
            "description": "Shipping option for this order.",
            "enum": [
              "delivery",
              "store_pickup",
              "no_shipping"
            ]
          },
          "same_day_delivery": {
            "type": "boolean",
            "description": "True if same day delivery was selected for the order, false otherwise.",
            "default": false
          },
          "shipment_status": {
            "type": "string",
            "description": "Shipment Status for Order and Order Fulfillment (translated).",
            "enum": [
              "Delivered",
              "Requested",
              "In Transit",
              "Failed",
              "Pickup Available",
              "Unfulfilled"
            ]
          },
          "shipment_status_enum": {
            "type": "string",
            "description": "Shipment Status for Order and Order Fulfillment (enum).",
            "enum": [
              "delivered",
              "requested",
              "in_transit",
              "failed",
              "pickup_available",
              "unfulfilled"
            ]
          },
          "recovered_from": {
            "type": "integer",
            "description": "Show id of the order that was recovered from this order",
            "format": "int32"
          },
          "external_shipping_rate_id": {
            "type": "string",
            "description": "Rate id for selected External Shipping Method rate"
          },
          "external_shipping_rate_description": {
            "type": "string",
            "description": "Rate description for selected External Shipping Method rate"
          },
          "billing_information": {
            "$ref": "#/components/schemas/BillingInformationFields"
          }
        }
      },
      "OrderCreateFields": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the Order",
            "enum": [
              "Abandoned",
              "Canceled",
              "Pending Payment",
              "Paid"
            ]
          },
          "shipping_method_id": {
            "type": "integer",
            "description": "Shipping method id",
            "format": "int32"
          },
          "shipping_method_name": {
            "type": "string",
            "description": "Shipping method name e.g. Royal Mail"
          },
          "shipping_price": {
            "type": "number",
            "description": "Shipping method's price (applicable if shipping_method_name is provided instead of a shipping_method_id)",
            "format": "float"
          },
          "shipping_required": {
            "type": "boolean",
            "description": "Order has shipping (false if an order does not required to require shipment information)",
            "required": "false"
          },
          "allow_missing_products": {
            "type": "boolean",
            "description": "Enables order creation with products that are not listed in the database",
            "required": "false"
          },
          "customer": {
            "$ref": "#/components/schemas/CustomerFieldsWithBillingAddressAndShippingAddressFields"
          },
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderProductOrderCreate"
            }
          },
          "billing_information": {
            "$ref": "#/components/schemas/BillingInformationFields"
          }
        }
      },
      "OrderEditFields": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the Order",
            "enum": [
              "Abandoned",
              "Canceled",
              "Pending Payment",
              "Paid"
            ]
          },
          "shipment_status": {
            "type": "string",
            "description": "Status of the Order Shipping",
            "enum": [
              "requested",
              "in_transit",
              "delivered",
              "failed",
              "pickup_available"
            ]
          },
          "tracking_number": {
            "type": "string",
            "description": "Shipping Tracking Number used for the given Order"
          },
          "tracking_company": {
            "type": "string",
            "description": "Shipping Company used for the given Order"
          },
          "tracking_url": {
            "type": "string",
            "description": "URL to check delivery information for the given Order"
          },
          "additional_information": {
            "type": "string",
            "description": "Additional information for the given Order"
          },
          "additional_fields": {
            "type": "array",
            "description": "Array of additional fields for the given Order",
            "items": {
              "$ref": "#/components/schemas/OrderAdditionalFields"
            }
          }
        }
      },
      "OrderAdditionalFields": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "description": "Label of the additional field",
            "format": "string"
          },
          "value": {
            "type": "string",
            "description": "Value of the additional field",
            "format": "string"
          },
          "id": {
            "type": "integer",
            "description": "Id of the additional field",
            "format": "int32"
          },
          "area": {
            "type": "string",
            "description": "Area of the additional field",
            "format": "string"
          }
        },
        "description": "Additional field of an order"
      },
      "OrderHistory": {
        "type": "object",
        "properties": {
          "order_history": {
            "$ref": "#/components/schemas/OrderHistoryFields"
          }
        }
      },
      "OrderHistoryEdit": {
        "type": "object",
        "properties": {
          "order_history": {
            "$ref": "#/components/schemas/OrderHistoryEditFields"
          }
        }
      },
      "OrderHistoryFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the Order History",
            "format": "int32"
          },
          "message": {
            "type": "string",
            "description": "Message of the Order History"
          },
          "created_at": {
            "type": "string",
            "description": "Creation date of the order history"
          }
        }
      },
      "OrderHistoryEditFields": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Message of the Order History"
          }
        }
      },
      "Fulfillment": {
        "type": "object",
        "properties": {
          "fulfillment": {
            "$ref": "#/components/schemas/FulfillmentFields"
          }
        }
      },
      "FulfillmentCreate": {
        "type": "object",
        "properties": {
          "fulfillment": {
            "$ref": "#/components/schemas/FulfillmentCreateFields"
          }
        }
      },
      "FulfillmentEdit": {
        "type": "object",
        "properties": {
          "fulfillment": {
            "$ref": "#/components/schemas/FulfillmentEditFields"
          }
        }
      },
      "FulfillmentFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the Fulfillment",
            "format": "int32"
          },
          "created_at": {
            "type": "string",
            "description": "Fulfillment creation date"
          },
          "updated_at": {
            "type": "string",
            "description": "Fulfillment last update date"
          },
          "tracking_number": {
            "type": "string",
            "description": "Tracking Number associated with the fulfillment"
          },
          "tracking_company": {
            "type": "string",
            "description": "Tracking company responsible for the fulfillment"
          },
          "type": {
            "type": "string",
            "description": "Type of fulfillment Service used"
          },
          "shipment_status": {
            "type": "string",
            "description": "Status of the fulfillment"
          },
          "label_url": {
            "type": "string",
            "description": "Temporary Url of the Label. (24 Hours Link Avaibility)"
          },
          "expected_arrival_from": {
            "type": "string",
            "description": "First date expected for the fulfillment to arrive at customer place"
          },
          "expected_arrival_to": {
            "type": "string",
            "description": "Last date expected for the fulfillment to arrive at customer place"
          },
          "fulfillment_address": {
            "type": "object",
            "description": "Information about the address used in the fulfillment",
            "properties": {
              "address": {
                "$ref": "#/components/schemas/FulfillmentAddress"
              }
            }
          },
          "order_id": {
            "type": "integer",
            "description": "Identifier of the order",
            "format": "int32"
          },
          "order": {
            "type": "object",
            "description": "Information about the order related to the fulfillment",
            "properties": {
              "order": {
                "$ref": "#/components/schemas/Order"
              }
            }
          }
        }
      },
      "FulfillmentCreateFields": {
        "required": [
          "order_id",
          "type"
        ],
        "type": "object",
        "properties": {
          "shipment_status": {
            "type": "string",
            "description": "Status of the Fulfillment",
            "enum": [
              "requested",
              "in_transit",
              "delivered",
              "failed"
            ]
          },
          "order_id": {
            "type": "string",
            "description": "Order associated with the fulfillment"
          },
          "type": {
            "type": "string",
            "description": "Type of fulfillment Service used",
            "enum": [
              "manual",
              "shipit",
              "chilexpress",
              "ctt",
              "correos_chile",
              "dhl",
              "servientrega",
              "starken",
              "bluexpress"
            ]
          },
          "tracking_number": {
            "type": "string",
            "description": "Tracking Number associated with the fulfillment"
          },
          "tracking_company": {
            "type": "string",
            "description": "Tracking company responsible for the fulfillment"
          },
          "tracking_url": {
            "type": "string",
            "description": "Tracking  URL, used only if tracking_company is set to 'other'"
          },
          "external_id": {
            "type": "string",
            "description": "Unique identifier of the Fulfillment used by the tracking company"
          },
          "service_type": {
            "type": "string",
            "description": "Type of Service requested to the tracking company"
          },
          "expected_arrival_from": {
            "type": "string",
            "description": "First date expected for the fulfillment to arrive at customer place"
          },
          "expected_arrival_to": {
            "type": "string",
            "description": "Last date expected for the fulfillment to arrive at customer place"
          },
          "send_email": {
            "type": "boolean",
            "description": "Send email to customer"
          }
        }
      },
      "FulfillmentEditFields": {
        "required": [
          "order_id"
        ],
        "type": "object",
        "properties": {
          "shipment_status": {
            "type": "string",
            "description": "Status of the Fulfillment",
            "enum": [
              "requested",
              "in_transit",
              "delivered",
              "failed"
            ]
          },
          "type": {
            "type": "string",
            "description": "Type of fulfillment Service used",
            "enum": [
              "manual",
              "shipit",
              "chilexpress",
              "ctt",
              "correos_chile",
              "dhl",
              "servientrega",
              "starken",
              "bluexpress"
            ]
          },
          "tracking_number": {
            "type": "string",
            "description": "Tracking Number associated with the fulfillment"
          },
          "tracking_company": {
            "type": "string",
            "description": "Tracking company responsible for the fulfillment"
          },
          "tracking_url": {
            "type": "string",
            "description": "Tracking  URL, used only if tracking_company is set to 'other'"
          },
          "external_id": {
            "type": "string",
            "description": "Unique identifier of the Fulfillment used by the tracking company"
          },
          "service_type": {
            "type": "string",
            "description": "Type of Service requested to the tracking company"
          },
          "expected_arrival_from": {
            "type": "string",
            "description": "First date expected for the fulfillment to arrive at customer place"
          },
          "expected_arrival_to": {
            "type": "string",
            "description": "Last date expected for the fulfillment to arrive at customer place"
          }
        }
      },
      "FulfillmentHistory": {
        "type": "object",
        "properties": {
          "fulfillment_history": {
            "$ref": "#/components/schemas/FulfillmentHistoryFields"
          }
        }
      },
      "FulfillmentHistoryEdit": {
        "type": "object",
        "properties": {
          "fulfillment_history": {
            "$ref": "#/components/schemas/FulfillmentHistoryEditFields"
          }
        }
      },
      "FulfillmentHistoryFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the Fulfillment History",
            "format": "int32"
          },
          "message": {
            "type": "string",
            "description": "Message of the Fulfillment History"
          },
          "status": {
            "type": "string",
            "description": "Status of the Fulfillment History"
          },
          "created_at": {
            "type": "string",
            "description": "Creation date of the Fulfillment history"
          }
        }
      },
      "FulfillmentHistoryEditFields": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Message of the Fulfillment History"
          },
          "status": {
            "type": "string",
            "description": "Status of the Fulfillment History",
            "enum": [
              "requested",
              "in_transit",
              "delivered",
              "failed"
            ]
          }
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "category": {
            "$ref": "#/components/schemas/CategoryFields"
          }
        }
      },
      "CategoryEdit": {
        "type": "object",
        "properties": {
          "category": {
            "$ref": "#/components/schemas/CategoryEditFields"
          }
        }
      },
      "CategoryFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the Category",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name of the Category"
          },
          "parent_id": {
            "type": "integer",
            "description": "Unique identifier of the Parent Category",
            "format": "int32"
          },
          "permalink": {
            "type": "string",
            "description": "Category unique URL path"
          }
        }
      },
      "CategoryEditFields": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the Category"
          },
          "parent_id": {
            "type": "integer",
            "description": "Unique identifier of the Parent Category",
            "format": "int32"
          }
        }
      },
      "Customer": {
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/CustomerFields"
          }
        }
      },
      "CustomerWithPassword": {
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/CustomerFieldsWithPassword"
          }
        }
      },
      "CustomerWithPasswordNoID": {
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/CustomerFieldsWithPasswordNoID"
          }
        }
      },
      "CustomerFieldsWithBillingAddressAndShippingAddressFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the Customer",
            "format": "int32"
          },
          "shipping_address": {
            "$ref": "#/components/schemas/ShippingAddress"
          },
          "billing_address": {
            "$ref": "#/components/schemas/BillingAddress"
          }
        }
      },
      "CustomerFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the Customer",
            "format": "int32"
          },
          "email": {
            "type": "string",
            "description": "Email of the Customer"
          },
          "phone": {
            "type": "string",
            "description": "Phone of the Customer"
          },
          "fullname": {
            "type": "string",
            "description": "Customer fullname retrieved from the default billing address. Defaults to customer email if no name is found."
          },
          "status": {
            "type": "string",
            "description": "Status of the Customer",
            "enum": [
              "approved",
              "pending",
              "disabled"
            ]
          },
          "accepts_marketing": {
            "type": "boolean",
            "description": "Indicates whether the Customer accepts marketing or not",
            "default": false
          },
          "accepted_marketing_at": {
            "type": "string",
            "description": "Marketing acceptation start date. Should be in format 'Y-m-d"
          },
          "cancelled_marketing_at": {
            "type": "string",
            "description": "Marketing cancelation start date. Should be in format 'Y-m-d"
          },
          "shipping_address": {
            "$ref": "#/components/schemas/ShippingAddress"
          },
          "billing_address": {
            "$ref": "#/components/schemas/BillingAddress"
          },
          "customer_categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerCategory"
            }
          },
          "customer_additional_fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerAdditionalField"
            }
          }
        }
      },
      "CustomerSimpleFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the Customer",
            "format": "int32"
          },
          "email": {
            "type": "string",
            "description": "Email of the Customer"
          },
          "phone": {
            "type": "string",
            "description": "Phone of the Customer"
          },
          "phone_prefix": {
            "type": "string",
            "description": "Phone prefix of the Customer"
          },
          "ip": {
            "type": "string",
            "description": "IP of the Customer"
          },
          "fullname": {
            "type": "string",
            "description": "Customer fullname retrieved from the default billing address. Defaults to customer email if no name is found."
          }
        }
      },
      "CustomerFieldsWithPassword": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the Customer",
            "format": "int32"
          },
          "email": {
            "type": "string",
            "description": "Email of the Customer"
          },
          "phone": {
            "type": "string",
            "description": "Phone of the Customer"
          },
          "password": {
            "type": "string",
            "description": "Password"
          },
          "status": {
            "type": "string",
            "description": "Status of the Customer",
            "enum": [
              "approved",
              "pending",
              "disabled"
            ]
          },
          "shipping_address": {
            "$ref": "#/components/schemas/ShippingAddress"
          },
          "billing_address": {
            "$ref": "#/components/schemas/BillingAddress"
          }
        }
      },
      "CustomerFieldsWithPasswordNoID": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email of the Customer"
          },
          "phone": {
            "type": "string",
            "description": "Phone of the Customer"
          },
          "password": {
            "type": "string",
            "description": "Password"
          },
          "status": {
            "type": "string",
            "description": "Status of the Customer",
            "enum": [
              "approved",
              "pending",
              "disabled"
            ]
          },
          "shipping_address": {
            "$ref": "#/components/schemas/ShippingAddress"
          },
          "billing_address": {
            "$ref": "#/components/schemas/BillingAddress"
          },
          "customer_category": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "CustomerCategory": {
        "type": "object",
        "properties": {
          "customer_category": {
            "$ref": "#/components/schemas/CustomerCategoryFields"
          }
        }
      },
      "CustomerCategoryEdit": {
        "type": "object",
        "properties": {
          "customer_category": {
            "$ref": "#/components/schemas/CustomerCategoryEditFields"
          }
        }
      },
      "CustomerCategoryFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the CustomerCategory",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name of the CustomerCategory"
          },
          "code": {
            "type": "string",
            "description": "Code of the CustomerCategory"
          }
        }
      },
      "CustomerCategoryEditFields": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the CustomerCategory"
          }
        }
      },
      "CustomersToCustomerCategory": {
        "type": "object",
        "properties": {
          "customers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerToCustomerCategory"
            }
          }
        }
      },
      "CustomerToCustomerCategory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the Customer",
            "format": "int32"
          },
          "email": {
            "type": "string",
            "description": "Email of the Customer"
          }
        }
      },
      "CustomerAdditionalField": {
        "type": "object",
        "properties": {
          "customer_additional_field": {
            "$ref": "#/components/schemas/CustomerAdditionalFieldFields"
          }
        }
      },
      "CustomerAdditionalFieldEdit": {
        "type": "object",
        "properties": {
          "customer_additional_field": {
            "$ref": "#/components/schemas/CustomerAdditionalFieldEditFields"
          }
        }
      },
      "CustomerAdditionalFieldFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the Customer Additional Field",
            "format": "int32"
          },
          "label": {
            "type": "string",
            "description": "Label of the Customer Additional Field"
          },
          "value": {
            "type": "string",
            "description": "Value of the Customer Additional Field"
          },
          "area": {
            "type": "string",
            "description": "Area of the Customer Additional Field"
          },
          "customer_id": {
            "type": "integer",
            "description": "Unique identifier of the Customer",
            "format": "int32"
          },
          "checkout_custom_field_id": {
            "type": "integer",
            "description": "Unique identifier of the Checkout Custom Field",
            "format": "int32"
          }
        }
      },
      "CustomerAdditionalFieldEditFields": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Value of the Customer Additional Field"
          },
          "checkout_custom_field_id": {
            "type": "integer",
            "description": "Unique identifier of the Checkout Custom Field",
            "format": "int32"
          }
        }
      },
      "Promotion": {
        "type": "object",
        "properties": {
          "promotion": {
            "$ref": "#/components/schemas/PromotionFields"
          }
        }
      },
      "PromotionEdit": {
        "type": "object",
        "properties": {
          "promotion": {
            "$ref": "#/components/schemas/PromotionEditFields"
          }
        }
      },
      "PromotionFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the product",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name of the product"
          },
          "status": {
            "type": "string",
            "description": "Status of the promotion ('active', 'expired')"
          },
          "enabled": {
            "type": "boolean",
            "description": "If the promotion is currently enabled",
            "default": true
          },
          "discount_target": {
            "type": "string",
            "description": "Where the promotion will be applied ('order', 'shipping', 'categories', 'buy_x_get_y)"
          },
          "condition_price": {
            "type": "number",
            "description": "Minimum order amount to validate the promotion",
            "format": "float"
          },
          "condition_qty": {
            "type": "integer",
            "description": "Minimum quantity of ordered itens to validate the promotion",
            "format": "int32"
          },
          "quantity_x": {
            "type": "integer",
            "description": "Number of sets of products_x needed to be able to apply the promotion (requires 'discount_target' param - 'buy_x_get_y')",
            "format": "int32"
          },
          "discount_amount_fix": {
            "type": "number",
            "description": "Fixed discount amount of the promotion",
            "format": "float"
          },
          "discount_amount_percent": {
            "type": "number",
            "description": "Percentual discount amount of the promotion",
            "format": "float"
          },
          "lasts": {
            "type": "string",
            "description": "Controls when the promotion will expire ('none', 'both', 'date', 'max_times_used')"
          },
          "begins_at": {
            "type": "string",
            "description": "Creation date of the promotion (requires 'lasts' param - 'date' or 'both)"
          },
          "expires_at": {
            "type": "string",
            "description": "Expiration date of the promotion (requires 'lasts' param - 'date' or 'both')"
          },
          "times_used": {
            "type": "integer",
            "description": "Amount of times the promotion was used",
            "format": "int32"
          },
          "max_times_used": {
            "type": "integer",
            "description": "Maximum amount a promotion can be used (requires 'lasts' param - 'max_times_used' or 'both)",
            "format": "int32"
          },
          "cumulative": {
            "type": "boolean",
            "description": "True if the promotion can be acumulated with others",
            "default": false
          },
          "categories": {
            "type": "array",
            "description": "Products Categories where the promotion will be applied (requires 'discount_target' param - 'categories')",
            "items": {
              "$ref": "#/components/schemas/Id"
            }
          },
          "customer_categories": {
            "type": "array",
            "description": "Customer Categories to whom the promotion will be applied (requires 'customers' param - 'categories')",
            "items": {
              "$ref": "#/components/schemas/Id"
            }
          },
          "products": {
            "type": "array",
            "description": "Products where the promotion will be applied (requires 'discount_target' param - 'categories' or 'buy_x_get_y')",
            "items": {
              "$ref": "#/components/schemas/Id"
            }
          },
          "products_x": {
            "type": "array",
            "description": "Products required to apply the promotion (requires 'discount_target' param - 'buy_x_get_y')",
            "items": {
              "$ref": "#/components/schemas/Id"
            }
          },
          "coupons": {
            "type": "array",
            "description": "Coupons associated to the promotion.",
            "items": {
              "$ref": "#/components/schemas/Coupon"
            }
          },
          "countries": {
            "type": "array",
            "description": "Country codes (ISO 3166-1 alpha-2) to apply the promotion (requires `discount_target` param - `shipping`). `*` means 'All Countries'.",
            "items": {
              "type": "string"
            }
          },
          "regions": {
            "type": "array",
            "description": "Region codes (Use the FIPS standard - http://www.geonames.org/countries/) to apply the promotion (requires `discount_target` param - `shipping`). Format as follows `country_region` (e.g. `CL_03` for region Antofagasta in Chile). `*_*` for 'All regions'.",
            "items": {
              "type": "string"
            }
          },
          "municipalities": {
            "type": "array",
            "description": "Municipality codes to apply the promotion (requires `discount_target` param - `shipping`). Format as follows `country_region_municipality` (e.g. `CL_03_8261495` for Calama municipality in Chile region Antofagasta). `*_*_*` for 'All municipalities'",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PromotionEditFields": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the product"
          },
          "enabled": {
            "type": "boolean",
            "description": "If the promotion is to be temporarily disabled",
            "default": true
          },
          "discount_target": {
            "type": "string",
            "description": "Where the promotion will be applied ('order', 'shipping', 'categories', 'buy_x_get_y)"
          },
          "buys_at_least": {
            "type": "string",
            "description": "Controls the promotion's condition ('none', 'price', 'qty, 'single_item')"
          },
          "condition_price": {
            "type": "number",
            "description": "Minimum order amount to validate the promotion (requires 'buys_at_least' param - 'price')",
            "format": "float"
          },
          "condition_qty": {
            "type": "integer",
            "description": "Minimum quantity of ordered itens to validate the promotion (requires 'buys_at_least' param - 'qty' or 'single_item')",
            "format": "int32"
          },
          "quantity_x": {
            "type": "integer",
            "description": "Number of sets of products_x needed to be able to apply the promotion (requires 'discount_target' param - 'buy_x_get_y')",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "description": "Controls if the discount will be a fixed area ('fix', 'percentage')"
          },
          "discount_amount_fix": {
            "type": "number",
            "description": "Fixed discount amount of the promotion (requires 'type' param - 'fix')",
            "format": "float"
          },
          "discount_amount_percent": {
            "type": "number",
            "description": "Percentual discount amount of the promotion (requires 'type' param - 'percentage')",
            "format": "float"
          },
          "lasts": {
            "type": "string",
            "description": "Controls when the promotion will expire ('none', 'date', 'max_times_used', 'both')"
          },
          "begins_at": {
            "type": "string",
            "description": "Creation date of the promotion (requires 'lasts' param - 'date' or 'both')"
          },
          "expires_at": {
            "type": "string",
            "description": "Expiration date of the promotion (requires 'lasts' param - 'date' or 'both')"
          },
          "max_times_used": {
            "type": "integer",
            "description": "Maximum amount a promotion can be used (requires 'lasts' param - 'max_times_used' or 'both')",
            "format": "int32"
          },
          "cumulative": {
            "type": "boolean",
            "description": "True if the promotion can be acumulated with others",
            "default": false
          },
          "customers": {
            "type": "string",
            "description": "Controls to which customers the promotion will be applied ('all', 'loggedin', 'categories', 'guests')"
          },
          "categories": {
            "type": "array",
            "description": "Products Categories where the promotion will be applied",
            "items": {
              "$ref": "#/components/schemas/Id"
            }
          },
          "categories_x": {
            "type": "array",
            "description": "Categories required to apply the promotion (requires 'discount_target' param - 'buy_x_get_y')",
            "items": {
              "$ref": "#/components/schemas/Id"
            }
          },
          "customer_categories": {
            "type": "array",
            "description": "Customer Categories to whom the promotion will be applied (requires 'customers' param - 'categories')",
            "items": {
              "$ref": "#/components/schemas/Id"
            }
          },
          "products": {
            "type": "array",
            "description": "Products where the promotion will be applied (requires 'discount_target' param - 'categories' or 'buy_x_get_y')",
            "items": {
              "$ref": "#/components/schemas/Id"
            }
          },
          "products_x": {
            "type": "array",
            "description": "Products required to apply the promotion (requires 'discount_target' param - 'buy_x_get_y')",
            "items": {
              "$ref": "#/components/schemas/Id"
            }
          },
          "coupons": {
            "type": "array",
            "description": "Coupons associated to the promotion.",
            "items": {
              "$ref": "#/components/schemas/CouponEditFields"
            }
          },
          "countries": {
            "type": "array",
            "description": "Country codes (ISO 3166-1 alpha-2) to apply the promotion (requires `discount_target` param - `shipping`). `*` means 'All Countries'.",
            "items": {
              "type": "string"
            }
          },
          "regions": {
            "type": "array",
            "description": "Region codes (Use the FIPS standard - http://www.geonames.org/countries/) to apply the promotion (requires `discount_target` param - `shipping`). Format as follows `country_region` (e.g. `CL_03` for region Antofagasta in Chile). `*_*` for 'All regions'.",
            "items": {
              "type": "string"
            }
          },
          "municipalities": {
            "type": "array",
            "description": "Municipality codes to apply the promotion (requires `discount_target` param - `shipping`). Format as follows `country_region_municipality` (e.g. `CL_03_8261495` for Calama municipality in Chile region Antofagasta). `*_*_*` for 'All municipalities'",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Coupon": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the coupon.",
            "format": "int32"
          },
          "code": {
            "type": "string",
            "description": "Unique code that can be used to activate the promotion."
          },
          "usage_limit": {
            "type": "integer",
            "description": "Maximum number of times the coupon can be used. Zero when there is no limit.",
            "format": "int32"
          },
          "times_used": {
            "type": "integer",
            "description": "Number of times the coupon has been used.",
            "format": "int32"
          }
        }
      },
      "CouponEditFields": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Unique code that can be used to activate the promotion."
          },
          "usage_limit": {
            "type": "integer",
            "description": "Maximum number of times the coupon can be used. Zero when there is no limit.",
            "format": "int32"
          }
        }
      },
      "ShippingAddress": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the Customer's Shipping Address"
          },
          "surname": {
            "type": "string",
            "description": "Surname of the Customer's Shipping Address"
          },
          "address": {
            "type": "string",
            "description": "Address of the Customer's Shipping Address"
          },
          "city": {
            "type": "string",
            "description": "City of the Customer's Shipping Address"
          },
          "postal": {
            "type": "string",
            "description": "Postal code of the Customer's Shipping Address"
          },
          "municipality": {
            "type": "string",
            "description": "Municipality of the Customer's Shipping Address"
          },
          "region": {
            "type": "string",
            "description": "Region code of the Customer's Shipping Address (Use the FIPS standard - http://www.geonames.org/countries/)"
          },
          "country": {
            "type": "string",
            "description": "Country code of the Customer's Shipping Address (ISO 3166-1 alpha-2)"
          }
        }
      },
      "OrderShippingBranch": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID of the Order's Shipping Branch",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name of the Order's Shipping Branch"
          }
        }
      },
      "OrderShippingAddress": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the Order's Shipping Address"
          },
          "surname": {
            "type": "string",
            "description": "Surname of the Order's Shipping Address"
          },
          "address": {
            "type": "string",
            "description": "Address of the Order's Shipping Address"
          },
          "city": {
            "type": "string",
            "description": "City of the Order's Shipping Address"
          },
          "postal": {
            "type": "string",
            "description": "Postal code of the Order's Shipping Address"
          },
          "region": {
            "type": "string",
            "description": "Region name of the Order's Shipping Address"
          },
          "country": {
            "type": "string",
            "description": "Country name of the Order's Shipping Address"
          },
          "country_code": {
            "type": "string",
            "description": "Country code of the Order's Shipping Address (ISO 3166-1 alpha-2)"
          },
          "region_code": {
            "type": "string",
            "description": "Region code of the Order's Shipping Address (Use the FIPS standard - http://www.geonames.org/countries/)"
          },
          "street_number": {
            "type": "number",
            "description": "Street number of the Order's Shipping Address"
          },
          "complement": {
            "type": "string",
            "description": "Complement of the Order's Shipping Address"
          },
          "latitude": {
            "type": "number",
            "description": "Latitude of the Order's Shipping Address"
          },
          "longitude": {
            "type": "number",
            "description": "Longitude of the Order's Shipping Address"
          },
          "municipality": {
            "type": "string",
            "description": "Municipality of the Order's Shipping Address"
          }
        }
      },
      "BillingAddress": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the Customer's Billing Address"
          },
          "surname": {
            "type": "string",
            "description": "Surname of the Customer's Billing Address"
          },
          "taxid": {
            "type": "string",
            "description": "Tax id of the Customer's Billing Address"
          },
          "address": {
            "type": "string",
            "description": "Address of the Customer's Billing Address"
          },
          "city": {
            "type": "string",
            "description": "City of the Customer's Billing Address"
          },
          "postal": {
            "type": "string",
            "description": "Postal code of the Customer's Billing Address"
          },
          "municipality": {
            "type": "string",
            "description": "Municipality of the Customer's Billing Address"
          },
          "region": {
            "type": "string",
            "description": "Region code of the Customer's Billing Address (Use the FIPS standard - http://www.geonames.org/countries/)"
          },
          "country": {
            "type": "string",
            "description": "Country code of the Customer's Billing Address (ISO 3166-1 alpha-2)"
          }
        }
      },
      "OrderBillingAddress": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the Order's Billing Address"
          },
          "surname": {
            "type": "string",
            "description": "Surname of the Order's Billing Address"
          },
          "taxid": {
            "type": "string",
            "description": "TaxID of the Order's Billing Address"
          },
          "address": {
            "type": "string",
            "description": "Address of the Order's Billing Address"
          },
          "city": {
            "type": "string",
            "description": "City of the Order's Billing Address"
          },
          "postal": {
            "type": "string",
            "description": "Postal code of the Order's Billing Address"
          },
          "region": {
            "type": "string",
            "description": "Region name of the Order's Billing Address"
          },
          "country": {
            "type": "string",
            "description": "Country name of the Order's Billing Address"
          },
          "country_code": {
            "type": "string",
            "description": "Country code of the Order's Billing Address (ISO 3166-1 alpha-2)"
          },
          "region_code": {
            "type": "string",
            "description": "Region code of the Order's Billing Address (Use the FIPS standard - http://www.geonames.org/countries/)"
          },
          "street_number": {
            "type": "number",
            "description": "Street number of the Order's Billing Address"
          },
          "complement": {
            "type": "string",
            "description": "Complement of the Order's Billing Address"
          },
          "municipality": {
            "type": "string",
            "description": "Municipality of the Order's Billing Address"
          }
        }
      },
      "OrderPickupAddress": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the Order's Pickup Address"
          },
          "surname": {
            "type": "string",
            "description": "Surname of the Order's Pickup Address"
          },
          "address": {
            "type": "string",
            "description": "Address of the Order's Pickup Address"
          },
          "city": {
            "type": "string",
            "description": "City of the Order's Pickup Address"
          },
          "postal": {
            "type": "string",
            "description": "Postal code of the Order's Pickup Address"
          },
          "region": {
            "type": "string",
            "description": "Region name of the Order's Pickup Address"
          },
          "country": {
            "type": "string",
            "description": "Country name of the Order's Pickup Address"
          },
          "country_code": {
            "type": "string",
            "description": "Country code of the Order's Pickup Address (ISO 3166-1 alpha-2)"
          },
          "region_code": {
            "type": "string",
            "description": "Region code of the Order's Pickup Address (Use the FIPS standard - http://www.geonames.org/countries/)"
          },
          "street_number": {
            "type": "number",
            "description": "Street number of the Order's Pickup Address"
          },
          "complement": {
            "type": "string",
            "description": "Complement of the Order's Pickup Address"
          },
          "municipality": {
            "type": "string",
            "description": "Municipality of the Order's Pickup Address"
          },
          "pickup_place_name": {
            "type": "string",
            "description": "Name of the Pickup Place"
          }
        }
      },
      "FulfillmentAddress": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the Fulfillment's Address"
          },
          "surname": {
            "type": "string",
            "description": "Surname of the Fulfillment's Address"
          },
          "address": {
            "type": "string",
            "description": "Address of the Fulfillment's Address"
          },
          "city": {
            "type": "string",
            "description": "City of the Fulfillment's Address"
          },
          "postal": {
            "type": "string",
            "description": "Postal code of the Fulfillment's Address"
          },
          "municipality": {
            "type": "string",
            "description": "Municipality of the Fulfillment's Address"
          },
          "region": {
            "type": "string",
            "description": "Region code of the Fulfillment's Address (Use the FIPS standard - http://www.geonames.org/countries/)"
          },
          "country": {
            "type": "string",
            "description": "Country code of the Fulfillment's Address (ISO 3166-1 alpha-2)"
          }
        }
      },
      "StoreAddress": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "Address of the Store's Address"
          },
          "city": {
            "type": "string",
            "description": "City of the Store's Address"
          },
          "postal": {
            "type": "string",
            "description": "Postal code of the Store's Address"
          },
          "region": {
            "type": "string",
            "description": "Region of the Store's Address"
          },
          "country": {
            "type": "string",
            "description": "Country of the Store's Address (ISO 3166-1 alpha-2)"
          },
          "region_code": {
            "type": "string",
            "description": "Region code of the Store's Address"
          },
          "country_code": {
            "type": "string",
            "description": "Country code of the Store's Address"
          }
        }
      },
      "OrderProductTax": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the Order Product Tax",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name of the category that the tax is associated with or the tax name"
          },
          "rate": {
            "type": "number",
            "description": "Tax rate",
            "format": "float"
          },
          "fixed": {
            "type": "boolean",
            "description": "False if rate is a percentage and true if rate is monetary",
            "default": false
          },
          "tax_on_product_price": {
            "type": "boolean",
            "description": "False if tax is not included on product price",
            "default": false
          }
        }
      },
      "OrderProductStockLocations": {
        "type": "object",
        "properties": {
          "location_id": {
            "type": "integer",
            "description": "Unique identifier of the Order Product Location",
            "format": "int32"
          },
          "stock": {
            "type": "integer",
            "description": "Quantity in stock for the product at the location"
          }
        }
      },
      "OrderShippingTax": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the Order Shipping Tax",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Tax name"
          },
          "country": {
            "type": "string",
            "description": "Code of the associated country"
          },
          "region": {
            "type": "string",
            "description": "Code of the associated region"
          },
          "rate": {
            "type": "number",
            "description": "Tax rate",
            "format": "float"
          },
          "fixed": {
            "type": "boolean",
            "description": "False if rate is a percentage and true if rate is monetary",
            "default": false
          },
          "tax_on_shipping_price": {
            "type": "boolean",
            "description": "False if shipping tax is not included on shipping price",
            "default": false
          }
        }
      },
      "OrderProductOrderCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the original Product",
            "format": "int32"
          },
          "variant_id": {
            "type": "integer",
            "description": "Unique identifier of the original Product Variant",
            "format": "int32"
          },
          "qty": {
            "type": "integer",
            "description": "Price of the Order Product",
            "format": "int32"
          },
          "price": {
            "type": "number",
            "description": "Price of the Order Product",
            "format": "float"
          },
          "discount": {
            "type": "number",
            "description": "Discount of the Order Product",
            "format": "float"
          }
        }
      },
      "OrderProduct": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the original Product",
            "format": "int32"
          },
          "variant_id": {
            "type": "integer",
            "description": "Unique identifier of the original Product Variant",
            "format": "int32"
          },
          "sku": {
            "type": "string",
            "description": "Stock Keeping Unit of the Order Product"
          },
          "name": {
            "type": "string",
            "description": "Name of the Order Product"
          },
          "image": {
            "type": "string",
            "description": "Image URL of the Order Product"
          },
          "qty": {
            "type": "integer",
            "description": "Price of the Order Product",
            "format": "int32"
          },
          "price": {
            "type": "number",
            "description": "Price of the Order Product",
            "format": "float"
          },
          "discount": {
            "type": "number",
            "description": "Discount of the Order Product",
            "format": "float"
          },
          "weight": {
            "type": "number",
            "description": "Weight of the Order Product",
            "format": "float",
            "default": 1
          },
          "taxes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderProductTax"
            }
          },
          "stock_locations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderProductStockLocations"
            }
          }
        }
      },
      "PaymentMethod": {
        "type": "object",
        "properties": {
          "payment_method": {
            "$ref": "#/components/schemas/PaymentMethodFields"
          }
        }
      },
      "PaymentMethodFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the Payment Method",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "description": "Type of the Payment Method",
            "enum": [
              "manual",
              "paypal",
              "pagseguro",
              "moneybookers",
              "webpay_cl",
              "easypay",
              "easypaycc",
              "ideal_basic",
              "hipay",
              "khipu",
              "mercado_pago",
              "ifthenpay",
              "eupago",
              "stripe",
              "payu",
              "servipag"
            ]
          },
          "name": {
            "type": "string",
            "description": "Name of the Payment Method"
          }
        }
      },
      "ShippingMethod": {
        "type": "object",
        "properties": {
          "shipping_method": {
            "$ref": "#/components/schemas/ShippingMethodFields"
          }
        }
      },
      "ShippingMethodFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the Shipping Method",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "description": "Type of the Shipping Method",
            "enum": [
              "free",
              "tables",
              "correiosbr",
              "correos_chile",
              "chilexpress",
              "flat",
              "ups",
              "external"
            ]
          },
          "name": {
            "type": "string",
            "description": "Name of the Shipping Method"
          },
          "enabled": {
            "type": "boolean",
            "description": "If the shipping method is active"
          },
          "free_shipping": {
            "type": "boolean",
            "description": "If the shipping method is free"
          },
          "free_shipping_minimum_purchase": {
            "type": "boolean",
            "description": "Minimum purchase price value to enable free shipping"
          },
          "fee": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShippingFee"
            }
          },
          "callback_url": {
            "type": "string",
            "description": "URL that receives the shipping data and returns rates"
          },
          "fetch_services_url": {
            "type": "string",
            "description": "URL that returns available shipping services"
          },
          "state": {
            "type": "string",
            "description": "State/Region code of origin"
          },
          "city": {
            "type": "string",
            "description": "City/Municipality name of origin"
          },
          "postal": {
            "type": "string",
            "description": "Postal/Zipcode of origin"
          },
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShippingService"
            }
          },
          "tables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShippingTables"
            }
          }
        }
      },
      "ShippingMethodEdit": {
        "type": "object",
        "properties": {
          "shipping_method": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Shipping Method"
              },
              "callback_url": {
                "type": "string",
                "description": "URL that receives the shipping data and returns rates"
              },
              "fetch_services_url": {
                "type": "string",
                "description": "URL that returns available shipping services"
              },
              "token": {
                "type": "string",
                "description": "Token used to authentica on the the fetch_services_url"
              },
              "state": {
                "type": "string",
                "description": "State/Region code of origin"
              },
              "city": {
                "type": "string",
                "description": "City/Municipality name of origin"
              },
              "postal": {
                "type": "string",
                "description": "Postal/Zipcode of origin"
              }
            }
          }
        }
      },
      "ShippingFee": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Shipping fee type can be fixed/percentage"
          },
          "value": {
            "type": "number",
            "description": "Shipping value as fixed/percentage value depeding on type",
            "format": "float"
          }
        }
      },
      "ShippingService": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the Shipping Service",
            "format": "int32"
          },
          "service_name": {
            "type": "string",
            "description": "Name of the Shipping Service"
          },
          "service_code": {
            "type": "string",
            "description": "Code of the Shipping Service"
          },
          "name": {
            "type": "string",
            "description": "Name of the Shipping Service"
          },
          "enabled": {
            "type": "boolean",
            "description": "If the service is active or not"
          },
          "original_service_name": {
            "type": "string",
            "description": "Original name of the Shipping Service"
          }
        }
      },
      "PickupLocation": {
        "type": "object",
        "properties": {
          "shipping_method": {
            "$ref": "#/components/schemas/PickupLocationFields"
          }
        }
      },
      "PickupLocationFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the Pickup Location",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name of the Pickup Location"
          },
          "email": {
            "type": "string",
            "description": "Email of the Pickup Location"
          },
          "active": {
            "type": "boolean",
            "description": "If Pickup Location is active"
          },
          "pickup_point": {
            "type": "boolean",
            "description": "If Pickup Location is a pickup point"
          },
          "is_stock_origin": {
            "type": "boolean",
            "description": "If Pickup Location is a stock origin"
          },
          "location_address": {
            "$ref": "#/components/schemas/PickupLocationAddress"
          }
        }
      },
      "PickupLocationAddress": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the Pickup Location Address",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name of the Pickup Location Address"
          },
          "surname": {
            "type": "string",
            "description": "Surname of the Pickup Location Address"
          },
          "address": {
            "type": "string",
            "description": "Address of the Pickup Location"
          },
          "street_number": {
            "type": "string",
            "description": "Street Number of the Pickup Location Address"
          },
          "complement": {
            "type": "string",
            "description": "Complement of the Pickup Location Address"
          },
          "city": {
            "type": "string",
            "description": "City of the Pickup Location Address"
          },
          "postal": {
            "type": "string",
            "description": "Postal of the Pickup Location Address"
          },
          "country": {
            "type": "string",
            "description": "Country code of the Pickup Location Address"
          },
          "region": {
            "type": "string",
            "description": "Region code of the Pickup Location Address"
          },
          "type": {
            "type": "string",
            "description": "Type of the Pickup Location Address"
          },
          "taxid": {
            "type": "string",
            "description": "Tax ID of the Pickup Location Address"
          },
          "taxid_type": {
            "type": "string",
            "description": "Tax Id Type of the Pickup Location Address"
          },
          "default": {
            "type": "boolean",
            "description": "If address is default"
          },
          "region_format": {
            "type": "string",
            "description": "Region Format of the Pickup Location Address"
          },
          "municipality": {
            "type": "string",
            "description": "Municipality Type of the Pickup Location Address"
          },
          "latitude": {
            "type": "number",
            "description": "Latitude of the Pickup Location Address",
            "format": "float"
          },
          "longitude": {
            "type": "number",
            "description": "Longitude of the Pickup Location Address",
            "format": "float"
          }
        }
      },
      "ShippingTables": {
        "type": "object",
        "properties": {
          "basedon": {
            "type": "string",
            "description": "Product property where shipping value tables are applied to"
          },
          "values": {
            "$ref": "#/components/schemas/ShippingTablesValue"
          },
          "locations": {
            "$ref": "#/components/schemas/ShippingTablesLocation"
          }
        }
      },
      "ShippingTablesValue": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Upper bound to limit which shipping fee should be applied depeding on the Basedon returned property",
            "format": "float"
          },
          "price": {
            "type": "number",
            "description": "Shipping price fee to apply",
            "format": "float"
          }
        }
      },
      "ShippingTablesLocation": {
        "type": "object",
        "properties": {
          "country": {
            "type": "string",
            "description": "Country where shipping table is applied"
          },
          "region": {
            "type": "integer",
            "description": "Region where shipping table is applied",
            "format": "int32"
          },
          "municipality": {
            "type": "string",
            "description": "Municipality where shipping table is applied"
          },
          "postal_code_range_start": {
            "type": "string",
            "description": "Postal code range start where shipping table is applied"
          },
          "postal_code_range_end": {
            "type": "string",
            "description": "Postal code range end where shipping table is applied"
          }
        }
      },
      "CustomField": {
        "type": "object",
        "properties": {
          "custom_field": {
            "$ref": "#/components/schemas/CustomFieldFields"
          }
        }
      },
      "CustomFieldEdit": {
        "type": "object",
        "properties": {
          "custom_field": {
            "$ref": "#/components/schemas/CustomFieldEditFields"
          }
        }
      },
      "CustomFieldFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the Custom Field",
            "format": "int32"
          },
          "label": {
            "type": "string",
            "description": "Label given to the Custom Field"
          },
          "type": {
            "type": "string",
            "description": "Type of the Custom Field",
            "enum": [
              "text",
              "selection",
              "input"
            ]
          },
          "values": {
            "type": "array",
            "description": "All the possible Values of the Custom Field (for type 'selection')",
            "items": {
              "type": "string"
            }
          },
          "product_visibility": {
            "type": "boolean",
            "description": "Visibility of the Custom Field in product's page"
          }
        }
      },
      "CustomFieldEditFields": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "description": "Label given to the Custom Field"
          },
          "type": {
            "type": "string",
            "description": "Type of the Custom Field",
            "enum": [
              "text",
              "selection",
              "input"
            ]
          },
          "values": {
            "type": "array",
            "description": "All the possible Values of the Custom Field (for type 'selection')",
            "items": {
              "type": "string"
            }
          },
          "product_visibility": {
            "type": "boolean",
            "description": "Visibility of the Custom Field in product's page"
          }
        }
      },
      "CustomFieldSelectOption": {
        "type": "object",
        "properties": {
          "custom_field_select_option": {
            "$ref": "#/components/schemas/CustomFieldSelectOptionFields"
          }
        }
      },
      "CustomFieldSelectOptionEdit": {
        "type": "object",
        "properties": {
          "custom_field_select_option": {
            "$ref": "#/components/schemas/CustomFieldSelectOptionEditFields"
          }
        }
      },
      "CustomFieldSelectOptionFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the Custom Field Select Option",
            "format": "int32"
          },
          "value": {
            "type": "string",
            "description": "Value given to the Custom Field Select Option"
          }
        }
      },
      "CustomFieldSelectOptionEditFields": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Value given to the Custom Field Select Option"
          }
        }
      },
      "ProductCustomField": {
        "type": "object",
        "properties": {
          "field": {
            "$ref": "#/components/schemas/ProductCustomFieldFields"
          }
        }
      },
      "ProductCustomFieldFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the ProductCustomField value",
            "format": "int32"
          },
          "custom_field_id": {
            "type": "integer",
            "description": "Unique identifier of the ProductCustomField",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "description": "The type of the ProductCustomField"
          },
          "label": {
            "type": "string",
            "description": "The label for the ProductCustomField"
          },
          "value": {
            "type": "string",
            "description": "The value for the ProductCustomField"
          },
          "value_id": {
            "type": "string",
            "description": "The value id for the ProductCustomField"
          },
          "variant_id": {
            "type": "integer",
            "description": "Unique identifier of the Product Variant",
            "format": "int32"
          }
        }
      },
      "AddProductCustomField": {
        "type": "object",
        "properties": {
          "field": {
            "$ref": "#/components/schemas/AddProductCustomFieldFields"
          }
        }
      },
      "AddProductCustomFieldFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the ProductCustomField (custom_field_id)",
            "format": "int32"
          },
          "value": {
            "type": "string",
            "description": "The value for the ProductCustomField"
          },
          "variants": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "Array of unique identifiers of the Product Variant"
          }
        }
      },
      "CheckoutCustomField": {
        "type": "object",
        "properties": {
          "checkout_custom_field": {
            "$ref": "#/components/schemas/CheckoutCustomFieldFields"
          }
        }
      },
      "CheckoutCustomFieldEdit": {
        "type": "object",
        "properties": {
          "checkout_custom_field": {
            "$ref": "#/components/schemas/CheckoutCustomFieldEditFields"
          }
        }
      },
      "CheckoutCustomFieldFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the CheckoutCustomField",
            "format": "int32"
          },
          "label": {
            "type": "string",
            "description": "Label given to the CheckoutCustomField"
          },
          "type": {
            "type": "string",
            "description": "Type of the CheckoutCustomField",
            "enum": [
              "text",
              "select",
              "input",
              "checkbox"
            ]
          },
          "area": {
            "type": "string",
            "description": "Area of the CheckoutCustomField",
            "enum": [
              "contact",
              "billing_shipping",
              "other"
            ]
          },
          "required": {
            "type": "boolean",
            "description": "True if the CheckoutCustomField is mandatory",
            "default": false
          },
          "position": {
            "type": "integer",
            "description": "Position of the CheckoutCustomField",
            "format": "int32"
          },
          "deletable": {
            "type": "boolean",
            "description": "True if the CheckoutCustomField can be removed from the store",
            "default": false
          },
          "custom_field_select_options": {
            "type": "array",
            "description": "The values for the CheckoutCustomField selection",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CheckoutCustomFieldEditFields": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "description": "Label given to the CheckoutCustomField"
          },
          "type": {
            "type": "string",
            "description": "Type of the CheckoutCustomField",
            "enum": [
              "text",
              "select",
              "input",
              "checkbox",
              "date"
            ]
          },
          "area": {
            "type": "string",
            "description": "Area of the CheckoutCustomField",
            "enum": [
              "contact",
              "billing_shipping",
              "other"
            ]
          },
          "required": {
            "type": "boolean",
            "description": "True if the CheckoutCustomField is mandatory",
            "default": false
          },
          "position": {
            "type": "integer",
            "description": "Position of the CheckoutCustomField",
            "format": "int32"
          },
          "deletable": {
            "type": "boolean",
            "description": "True if the CheckoutCustomField can be removed from the store",
            "default": false
          },
          "custom_field_select_options": {
            "type": "array",
            "description": "The values for the CheckoutCustomField selection",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Country": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "Region": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "iso": {
            "type": "string"
          }
        }
      },
      "Municipality": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "Language": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "Tax": {
        "type": "object",
        "properties": {
          "tax": {
            "$ref": "#/components/schemas/TaxFields"
          }
        }
      },
      "TaxEdit": {
        "type": "object",
        "properties": {
          "tax": {
            "$ref": "#/components/schemas/TaxEditFields"
          }
        }
      },
      "TaxFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the Tax",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name that identifies tax"
          },
          "country": {
            "type": "string",
            "description": "Country name where the Tax applies"
          },
          "region": {
            "type": "string",
            "description": "Region name where the Tax applies"
          },
          "category_id": {
            "type": "integer",
            "description": "Unique identifier of the category of the Tax",
            "format": "int32"
          },
          "tax_amount": {
            "type": "number",
            "description": "Tax value for the given Tax",
            "format": "float"
          },
          "fixed": {
            "type": "boolean",
            "description": "True if the tax has a fixed valued amount",
            "default": false
          },
          "shipping": {
            "type": "boolean",
            "description": "True if the tax should be applied to shipping costs",
            "default": false
          }
        }
      },
      "TaxEditFields": {
        "type": "object",
        "properties": {
          "country": {
            "type": "string",
            "description": "Country where the Tax applies"
          },
          "name": {
            "type": "string",
            "description": "Name that identifies tax"
          },
          "region": {
            "type": "string",
            "description": "Region where the Tax applies"
          },
          "category_id": {
            "type": "integer",
            "description": "Unique identifier of the category of the Tax",
            "format": "int32"
          },
          "tax": {
            "type": "number",
            "description": "Tax value for the given Tax",
            "format": "float"
          },
          "fixed": {
            "type": "boolean",
            "description": "True if the tax has a fixed valued amount",
            "default": false
          },
          "shipping": {
            "type": "boolean",
            "description": "True if the tax should be applied to shipping costs",
            "default": false
          }
        }
      },
      "TrafficSource": {
        "type": "object",
        "properties": {
          "source_name": {
            "type": "string",
            "description": "Where the checkout originated"
          },
          "medium": {
            "type": "string",
            "description": "The medium that referred the customer to the checkout"
          },
          "campaign": {
            "type": "string",
            "description": "The campaign that referred the customer to the checkout"
          },
          "referral_url": {
            "type": "string",
            "description": "The website that referred the customer to the checkout"
          },
          "referral_code": {
            "type": "string",
            "description": "The code that referred the customer to the checkout"
          },
          "user_agent": {
            "type": "string",
            "description": "User agent of the referred request to checkout"
          },
          "first_page_visited": {
            "type": "string",
            "description": "The first url visited by the customer"
          },
          "first_page_visited_at": {
            "type": "string",
            "description": "The date when the customer visited the first page"
          },
          "referral_source": {
            "type": "string",
            "description": "The source that referred the customer to the website"
          },
          "created_from": {
            "type": "string",
            "description": "From where the order was created: [checkout, api, admin, duplicate, recovery, pos]"
          },
          "created_from_app_code": {
            "type": "string",
            "description": "The code of the app that created the order if it was created by an app through the API"
          }
        }
      },
      "BillingInformationFields": {
        "type": "object",
        "properties": {
          "business_activity": {
            "type": "string",
            "description": "Giro"
          },
          "company_name": {
            "type": "string",
            "description": "Razon Social"
          },
          "taxpayer_type": {
            "type": "string",
            "description": "Tipo de Contribuinte"
          }
        }
      },
      "PartnerStoreCreate": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "New Store administrator email.",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "New Store administrator password.",
            "format": "string"
          },
          "store_name": {
            "type": "string",
            "description": "New Store name."
          },
          "plan_name": {
            "type": "string",
            "description": "New Store plan name.",
            "default": "pro",
            "enum": [
              "pro",
              "plus",
              "premium"
            ]
          },
          "aff": {
            "type": "string",
            "description": "Partner code."
          },
          "locale": {
            "type": "string",
            "description": "ISO3166-2 code for the store langauge.",
            "default": "en"
          },
          "reject_duplicates": {
            "type": "boolean",
            "description": "Indicates whether the request should fail if the Store name provided is already in use.",
            "default": false
          }
        }
      },
      "PartnerStoreCode": {
        "type": "object",
        "properties": {
          "store": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "description": "Store code."
              }
            }
          }
        }
      },
      "PartnerError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Message describing the error."
          },
          "field": {
            "type": "string",
            "description": "Field causing the error."
          },
          "error": {
            "type": "boolean",
            "description": "True when an error occurs."
          }
        }
      },
      "PartnerStoreStatus": {
        "type": "object",
        "properties": {
          "status": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "description": "Message describing the current creation status."
              },
              "percentage": {
                "type": "string",
                "description": "Percentage of the creation process that was already completed."
              }
            }
          }
        }
      },
      "NewPartnerStore": {
        "type": "object",
        "properties": {
          "store": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "description": "New Store code."
              },
              "name": {
                "type": "string",
                "description": "New Store name."
              },
              "redirect_url": {
                "type": "string",
                "description": "New Store redirect url."
              },
              "email_partner": {
                "type": "string",
                "description": "Partner email."
              }
            }
          }
        }
      },
      "DailyVisits": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "description": "Date"
          },
          "visits": {
            "type": "integer",
            "description": "Total number of visits for the specified date."
          }
        }
      },
      "BestSold": {
        "type": "object",
        "properties": {
          "product_id": {
            "type": "integer",
            "description": "Product ID."
          },
          "product_name": {
            "type": "string",
            "description": "Product name."
          },
          "count": {
            "type": "integer",
            "description": "Quantity sold."
          },
          "total": {
            "type": "number",
            "description": "Total sold amount."
          }
        }
      },
      "Referrer": {
        "type": "object",
        "properties": {
          "source": {
            "type": "string",
            "description": "Referrer source."
          },
          "count": {
            "type": "integer",
            "description": "Number of times referrer source was used."
          }
        }
      },
      "TrafficType": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Traffic name."
          },
          "count": {
            "type": "integer",
            "description": "Frequency of the specified traffic type."
          }
        }
      },
      "OrdersData": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "description": "Date"
          },
          "total": {
            "type": "number",
            "description": "Total amount in placed orders."
          },
          "count": {
            "type": "number",
            "description": "Total number of placed orders."
          },
          "paid": {
            "type": "number",
            "description": "Total amount paid."
          },
          "pending": {
            "type": "number",
            "description": "Total amount in pending orders."
          },
          "average": {
            "type": "number",
            "description": "Average order total."
          }
        }
      },
      "RegionOrders": {
        "type": "object",
        "properties": {
          "city": {
            "type": "string",
            "description": "City name."
          },
          "country": {
            "type": "integer",
            "description": "Number of region orders."
          },
          "code": {
            "type": "integer",
            "description": "Region code."
          }
        }
      },
      "CountryOrders": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Country code."
          },
          "country": {
            "type": "string",
            "description": "Country name."
          },
          "orders": {
            "type": "array",
            "description": "Orders per region.",
            "items": {
              "$ref": "#/components/schemas/RegionOrders"
            }
          },
          "count": {
            "type": "integer",
            "description": "Number of country orders."
          }
        }
      },
      "PaymentMethodFreq": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Payment method name."
          },
          "count": {
            "type": "string",
            "description": "Number of times payment method was used."
          }
        }
      },
      "ShippingMethodFreq": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Shipping method name."
          },
          "count": {
            "type": "string",
            "description": "Number of times shipping method was used."
          }
        }
      },
      "NewVsReturning": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "description": "Date."
          },
          "new": {
            "type": "integer",
            "description": "Total number of new."
          },
          "returning": {
            "type": "integer",
            "description": "Total number of returning."
          }
        }
      },
      "StoreStats": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "Statistics start date.",
            "format": "iso8601"
          },
          "to": {
            "type": "string",
            "description": "Statistics end date.",
            "format": "iso8601"
          },
          "currency": {
            "type": "string",
            "description": "Store currency."
          },
          "daily_visits": {
            "type": "array",
            "description": "Visits per day.",
            "items": {
              "$ref": "#/components/schemas/DailyVisits"
            }
          },
          "visits": {
            "type": "integer",
            "description": "Total number of visits."
          },
          "best_sold": {
            "type": "array",
            "description": "Top 10 best sold products.",
            "items": {
              "$ref": "#/components/schemas/BestSold"
            }
          },
          "referrers": {
            "type": "array",
            "description": "Top 10 referrer sources and their frequency.",
            "items": {
              "$ref": "#/components/schemas/Referrer"
            }
          },
          "traffic_type": {
            "type": "array",
            "description": "Type of store traffic and its frequency.",
            "items": {
              "$ref": "#/components/schemas/TrafficType"
            }
          },
          "orders": {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "description": "Orders data.",
                "items": {
                  "$ref": "#/components/schemas/OrdersData"
                }
              },
              "count": {
                "type": "integer",
                "description": "Total number of orders."
              },
              "total": {
                "type": "number",
                "description": "Total amount from all orders."
              },
              "average": {
                "type": "number",
                "description": "Average order amount."
              }
            }
          },
          "conversions": {
            "type": "object",
            "properties": {
              "added_to_cart": {
                "type": "number",
                "description": "Total add to cart conversions."
              },
              "checkout": {
                "type": "number",
                "description": "Total checkout conversions."
              },
              "paid": {
                "type": "number",
                "description": "Total paid conversions."
              }
            }
          },
          "region_orders": {
            "type": "object",
            "properties": {
              "display_mode": {
                "type": "string",
                "description": "Can be 'regions' when orders are specific of 1 country or 'auto'."
              },
              "regions_orders": {
                "type": "array",
                "description": "Orders per country and region(inside the country).",
                "items": {
                  "$ref": "#/components/schemas/CountryOrders"
                }
              }
            }
          },
          "payment_methods": {
            "type": "array",
            "description": "Store payment methods and their frequency.",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodFreq"
            }
          },
          "shipping_methods": {
            "type": "array",
            "description": "Store shipping methods and their frequency.",
            "items": {
              "$ref": "#/components/schemas/ShippingMethodFreq"
            }
          },
          "new_vs_returning_customers": {
            "type": "object",
            "properties": {
              "per_day": {
                "type": "array",
                "description": "Numbers of new and returning customers per day.",
                "items": {
                  "$ref": "#/components/schemas/NewVsReturning"
                }
              },
              "global": {
                "type": "integer",
                "description": "Global percentage of new vs returning customers."
              }
            }
          },
          "new_vs_returning_orders": {
            "type": "object",
            "properties": {
              "per_day": {
                "type": "array",
                "description": "Numbers of new and returning customers per day.",
                "items": {
                  "$ref": "#/components/schemas/NewVsReturning"
                }
              },
              "global": {
                "type": "integer",
                "description": "Global percentage of new vs returning customers."
              }
            }
          },
          "search_frequencies_all": {
            "type": "array",
            "description": "Number of times each search was conducted under the form of an aggregation query.",
            "items": {
              "$ref": "#/components/schemas/SearchFrequencies"
            }
          },
          "search_frequencies_without_results": {
            "type": "array",
            "description": "Number of times each search with zero results was conducted under the form of an aggregation query.",
            "items": {
              "$ref": "#/components/schemas/SearchFrequencies"
            }
          }
        }
      },
      "StoreObject": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Store code."
          },
          "stats": {
            "$ref": "#/components/schemas/StoreStats"
          }
        }
      },
      "PartnerStoresSubscription": {
        "type": "object",
        "properties": {
          "store": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "description": "Store code."
              },
              "url": {
                "type": "string",
                "description": "Store url."
              },
              "subscription": {
                "$ref": "#/components/schemas/Subscription"
              }
            }
          }
        }
      },
      "Subscription": {
        "type": "object",
        "properties": {
          "plan": {
            "type": "string",
            "description": "Subscription plan."
          },
          "amount": {
            "type": "number",
            "description": "Subscription amount",
            "format": "float"
          },
          "tax_amount": {
            "type": "number",
            "description": "Subscription tax amount",
            "format": "float"
          },
          "currency": {
            "type": "string",
            "description": "Subscription currency."
          },
          "payment_method": {
            "type": "string",
            "description": "Payment method."
          },
          "status": {
            "type": "string",
            "description": "Subscription status."
          },
          "recurring_period": {
            "type": "integer",
            "description": "subscription period."
          },
          "trial_period": {
            "type": "integer",
            "description": "Trial period."
          },
          "transactions": {
            "type": "array",
            "description": "Store transactions.",
            "items": {
              "$ref": "#/components/schemas/Transactions"
            }
          }
        }
      },
      "Transactions": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Transaction type."
          },
          "date": {
            "type": "string",
            "description": "Transaction date"
          },
          "recurring_period": {
            "type": "integer",
            "description": "Period"
          },
          "paid_amount": {
            "type": "number",
            "description": "Paid amount. amount + tax_amount - discount_amount"
          },
          "amount": {
            "type": "number",
            "description": "Transaction amount."
          },
          "tax_amount": {
            "type": "number",
            "description": "Transaction tax amount."
          },
          "discount_amount": {
            "type": "number",
            "description": "Transaction discount amount."
          },
          "credit_amount": {
            "type": "number",
            "description": "Transaction credit amount."
          },
          "currency": {
            "type": "string",
            "description": "Transaction currency."
          },
          "status": {
            "type": "string",
            "description": "Transaction status."
          },
          "payment_method": {
            "type": "string",
            "description": "Transaction payment method."
          }
        }
      },
      "SearchFrequencies": {
        "type": "object",
        "properties": {
          "terms": {
            "type": "string",
            "description": "Search term."
          },
          "freq": {
            "type": "integer",
            "description": "Frequency of search term."
          }
        }
      },
      "Id": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Count": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "MessageObject": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "NotFound": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "BadParams": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "StatusInvalid": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "Document": {
        "type": "object",
        "properties": {
          "document": {
            "$ref": "#/components/schemas/DocumentFields"
          }
        }
      },
      "DocumentFields": {
        "type": "object",
        "properties": {
          "document_type": {
            "type": "integer",
            "description": "Type of Document",
            "enum": [
              "0 - credit note",
              "1 - invoice"
            ]
          },
          "external_id": {
            "type": "string",
            "description": "Document ID on the external service"
          },
          "public_id": {
            "type": "string",
            "description": "Human recognizable document ID"
          },
          "url": {
            "type": "string",
            "description": "Document url"
          },
          "order_id": {
            "type": "integer",
            "description": "Id of the order the document belongs to"
          },
          "store_id": {
            "type": "integer",
            "description": "Id of the store the document belongs to"
          },
          "app_code": {
            "type": "string",
            "description": "Code of the app that generated the document"
          }
        }
      },
      "DocumentFieldsToUpdate": {
        "type": "object",
        "properties": {
          "document_type": {
            "type": "integer",
            "description": "Type of Document",
            "enum": [
              "0 - credit note",
              "1 - invoice"
            ]
          },
          "external_id": {
            "type": "string",
            "description": "Document ID on the external service"
          },
          "public_id": {
            "type": "string",
            "description": "Human recognizable document ID"
          },
          "url": {
            "type": "string",
            "description": "Document url"
          }
        }
      },
      "StoreBalance": {
        "type": "object",
        "properties": {
          "balance": {
            "type": "number",
            "description": "Store Balance",
            "format": "float",
            "default": 0.0
          },
          "currency": {
            "type": "string",
            "description": "Store Balance Currency"
          },
          "balance_formatted": {
            "type": "string",
            "description": "Store Balance Formatted"
          }
        }
      },
      "ProductsLocations": {
        "type": "object",
        "properties": {
          "location_id": {
            "type": "integer"
          },
          "product_id": {
            "type": "integer"
          },
          "variant_id": {
            "type": "integer"
          },
          "stock_unlimited": {
            "type": "boolean"
          },
          "stock": {
            "type": "integer"
          }
        },
        "required": [
          "location_id",
          "product_id",
          "stock_unlimited",
          "stock"
        ]
      },
      "ProductsLocationsWithoutStockUnlimited": {
        "type": "object",
        "properties": {
          "location_id": {
            "type": "integer"
          },
          "product_id": {
            "type": "integer"
          },
          "variant_id": {
            "type": "integer"
          },
          "stock": {
            "type": "integer"
          }
        }
      }
    },
    "securitySchemes": {
      "BasicAuthentication": {
        "type": "http",
        "scheme": "basic",
        "description": "Basic authentication in the format of `login:authtoken` or `partner_code:auth_token`."
      },
      "loginParameter": {
        "type": "apiKey",
        "in": "query",
        "name": "login",
        "description": "API OAuth login. Learn how to get yours [here](#section/Authentication)."
      },
      "authtokenParameter": {
        "type": "apiKey",
        "in": "query",
        "name": "authtoken",
        "description": "API OAuth token. Learn how to get yours [here](#section/Authentication)."
      },
      "partner_codeParameter": {
        "type": "apiKey",
        "in": "query",
        "name": "partner_code",
        "description": "Partner code."
      },
      "auth_tokenParameter": {
        "type": "apiKey",
        "in": "query",
        "name": "auth_token",
        "description": "Partner authentication token."
      }
    },
    "parameters": {
      "LoginParam": {
        "name": "login",
        "in": "query",
        "description": "API OAuth login.",
        "required": false,
        "schema": {
          "type": "string",
          "format": "string"
        }
      },
      "AuthtokenParam": {
        "name": "authtoken",
        "in": "query",
        "description": "API OAuth token.",
        "required": false,
        "schema": {
          "type": "string",
          "format": "string"
        }
      },
      "LimitParam": {
        "name": "limit",
        "in": "query",
        "description": "List restriction",
        "schema": {
          "maximum": 200,
          "type": "integer",
          "format": "integer",
          "default": 50
        }
      },
      "PageParam": {
        "name": "page",
        "in": "query",
        "description": "List page",
        "schema": {
          "type": "integer",
          "format": "integer",
          "default": 1
        }
      },
      "LocaleParam": {
        "name": "locale",
        "in": "query",
        "description": "Locale code of the translation",
        "schema": {
          "type": "string",
          "format": "string"
        }
      },
      "LocationIDParam": {
        "name": "id",
        "in": "path",
        "description": "Id of the location",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int32"
        }
      },
      "ProductIDParam": {
        "name": "id",
        "in": "path",
        "description": "Id of the Product",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int32"
        }
      },
      "CustomerIDParam": {
        "name": "id",
        "in": "path",
        "description": "Id of the Customer",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int32"
        }
      },
      "PartnerCodeParam": {
        "name": "partner_code",
        "in": "query",
        "description": "Partner code.",
        "required": false,
        "schema": {
          "type": "string",
          "format": "string"
        }
      },
      "PartnerAuthtokenParam": {
        "name": "auth_token",
        "in": "query",
        "description": "Partner authentication token.",
        "required": false,
        "schema": {
          "type": "string",
          "format": "string"
        }
      },
      "DocumentIDParam": {
        "name": "id",
        "in": "path",
        "description": "Id of the Document",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int32"
        }
      },
      "OrderIDParam": {
        "name": "id",
        "in": "path",
        "description": "Id of the Order",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int32"
        }
      }
    }
  }
}