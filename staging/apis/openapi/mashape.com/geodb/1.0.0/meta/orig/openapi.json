{
  "openapi": "3.0.0",
  "info": {
    "description": "The GeoDB API focuses on getting global places and regions. Easily obtain country, region, and place data for use\nin your apps! \n<ul>\n  <li>Filter places by name prefix, country, location, time-zone, and even minimum population.</li>\n  <li>Sort places by name, country code, elevation, and population - or any combination of these.</li> \n  <li>Get all country regions.</li> <li>Get all places in a given country or region.</li>\n  <li>\n    Display results in multiple languages.</li> <li>RESTful API adheres to industry best-practices, including\n    HATEOAS-style links to facilitate paging results.\n  </li> \n  <li>Backed by cloud-based load-balanced infrastructure.</li>\n  <li>Data is periodically refreshed from GeoNames and WikiData.</li>\n</ul>\n<p>Notes:\n<ul>\n  <li>\n    Since the database is periodically updated, this may <strong>very rarely</strong> result in certain places\n    being marked deleted (e.g., duplicates removed). By default, endpoints returning place data will exclude\n    places marked deleted. However, in the unlikely event that this occurs while your app is paging through a set\n    of affected results - and you care about the paged results suddenly changing underneath - specify \n    <tt>includeDeleted=SINCE_YESTERDAY</tt> (or <tt>SINCE_LAST_WEEK</tt> if you're really paranoid!).\n  </li>\n</ul>\n<hr/>\n<h3>Useful Resources</h3>\n<ul>\n  <li>\n    SDKs\n    <ul>\n      <li>\n        <a href='https://www.npmjs.com/package/wft-geodb-angular-client'>Angular</a>, \n        <a href='https://github.com/wirefreethought/geodb-sample-angular-app'>Sample App</a>\n      </li>\n      <li><a href='https://github.com/wirefreethought/geodb-java-client'>Java</a></li>\n      <li><a href='https://www.npmjs.com/package/wft-geodb-js-client'>JavaScript</a></li>\n    </ul>\n    <li><a href='swagger.json'>Swagger Docs</a></li>\n    <li><a href='http://creativecommons.org/licenses/by/3.0/'>Usage License</a></li>\n  </li>      \n</ul>\n",
    "license": {
      "name": "Creative Commons Attribution 3.0",
      "url": "http://creativecommons.org/licenses/by/3.0/"
    },
    "title": "GeoDB Cities API",
    "version": "1.0.0",
    "x-jentic-source-url": "https://wirefreethought.github.io/geodb-cities-api-docs/swagger.json"
  },
  "servers": [
    {
      "url": "https://wft-geo-db.p.rapidapi.com/v1"
    }
  ],
  "paths": {
    "/geo/adminDivisions": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/query.place.location.id"
          },
          {
            "$ref": "#/components/parameters/query.place.location.radiusOf"
          },
          {
            "$ref": "#/components/parameters/query.distanceUnit"
          },
          {
            "$ref": "#/components/parameters/query.place.countryIds"
          },
          {
            "$ref": "#/components/parameters/query.place.excludedCountryIds"
          },
          {
            "$ref": "#/components/parameters/query.place.minPopulation"
          },
          {
            "$ref": "#/components/parameters/query.place.maxPopulation"
          },
          {
            "$ref": "#/components/parameters/query.entity.namePrefix"
          },
          {
            "$ref": "#/components/parameters/query.entity.namePrefixDefaultLangResults"
          },
          {
            "$ref": "#/components/parameters/query.timeZoneIds"
          },
          {
            "$ref": "#/components/parameters/query.asciiMode"
          },
          {
            "$ref": "#/components/parameters/query.hateoasMode"
          },
          {
            "$ref": "#/components/parameters/query.languageCode"
          },
          {
            "$ref": "#/components/parameters/query.limit"
          },
          {
            "$ref": "#/components/parameters/query.offset"
          },
          {
            "$ref": "#/components/parameters/query.place.sort"
          },
          {
            "$ref": "#/components/parameters/query.includeDeleted"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PopulatedPlaces"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        },
        "tags": [
          "Geo"
        ],
        "description": "Find administrative divisions, filtering by optional criteria. If no criteria are set, you will get back all\nknown divisions.\n",
        "operationId": "findAdminDivisionsUsingGET",
        "summary": "Find admin divisions"
      }
    },
    "/geo/adminDivisions/{divisionId}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/path.divisionId"
          },
          {
            "$ref": "#/components/parameters/query.asciiMode"
          },
          {
            "$ref": "#/components/parameters/query.languageCode"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PopulatedPlace"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "tags": [
          "Geo"
        ],
        "description": "Get administrative division details such as location coordinates, population, and\nelevation above sea-level (if available).\n",
        "operationId": "getAdminDivisionUsingGET",
        "summary": "Get admin division details"
      }
    },
    "/geo/adminDivisions/{divisionId}/nearbyCities": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/path.divisionId"
          },
          {
            "$ref": "#/components/parameters/query.place.location.radiusOf"
          },
          {
            "$ref": "#/components/parameters/query.distanceUnit"
          },
          {
            "$ref": "#/components/parameters/query.place.countryIds"
          },
          {
            "$ref": "#/components/parameters/query.place.excludedCountryIds"
          },
          {
            "$ref": "#/components/parameters/query.place.minPopulation"
          },
          {
            "$ref": "#/components/parameters/query.place.maxPopulation"
          },
          {
            "$ref": "#/components/parameters/query.entity.namePrefix"
          },
          {
            "$ref": "#/components/parameters/query.entity.namePrefixDefaultLangResults"
          },
          {
            "$ref": "#/components/parameters/query.timeZoneIds"
          },
          {
            "$ref": "#/components/parameters/query.city.types"
          },
          {
            "$ref": "#/components/parameters/query.asciiMode"
          },
          {
            "$ref": "#/components/parameters/query.hateoasMode"
          },
          {
            "$ref": "#/components/parameters/query.languageCode"
          },
          {
            "$ref": "#/components/parameters/query.limit"
          },
          {
            "$ref": "#/components/parameters/query.offset"
          },
          {
            "$ref": "#/components/parameters/query.place.sort"
          },
          {
            "$ref": "#/components/parameters/query.includeDeleted"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PopulatedPlaces"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "tags": [
          "Geo"
        ],
        "description": "Find cities near the given administrative division, filtering by optional criteria. If no criteria are set, you\nwill get back all known cities.\n",
        "operationId": "findCitiesNearAdminDivisionUsingGET",
        "summary": "Find cities near division"
      }
    },
    "/geo/adminDivisions/{divisionId}/nearbyDivisions": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/path.divisionId"
          },
          {
            "$ref": "#/components/parameters/query.place.location.radiusOf"
          },
          {
            "$ref": "#/components/parameters/query.distanceUnit"
          },
          {
            "$ref": "#/components/parameters/query.place.countryIds"
          },
          {
            "$ref": "#/components/parameters/query.place.excludedCountryIds"
          },
          {
            "$ref": "#/components/parameters/query.place.minPopulation"
          },
          {
            "$ref": "#/components/parameters/query.place.maxPopulation"
          },
          {
            "$ref": "#/components/parameters/query.entity.namePrefix"
          },
          {
            "$ref": "#/components/parameters/query.entity.namePrefixDefaultLangResults"
          },
          {
            "$ref": "#/components/parameters/query.timeZoneIds"
          },
          {
            "$ref": "#/components/parameters/query.asciiMode"
          },
          {
            "$ref": "#/components/parameters/query.hateoasMode"
          },
          {
            "$ref": "#/components/parameters/query.languageCode"
          },
          {
            "$ref": "#/components/parameters/query.limit"
          },
          {
            "$ref": "#/components/parameters/query.offset"
          },
          {
            "$ref": "#/components/parameters/query.place.sort"
          },
          {
            "$ref": "#/components/parameters/query.includeDeleted"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PopulatedPlaces"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "tags": [
          "Geo"
        ],
        "description": "Find administrative divisions near the given division, filtering by optional criteria. If no criteria\nare set, you will get back all known divisions.\n",
        "operationId": "findDivisionsNearAdminDivisionUsingGET",
        "summary": "Find admin divisions near division"
      }
    },
    "/geo/adminDivisions/{divisionId}/nearbyPlaces": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/path.divisionId"
          },
          {
            "$ref": "#/components/parameters/query.place.location.radiusOf"
          },
          {
            "$ref": "#/components/parameters/query.distanceUnit"
          },
          {
            "$ref": "#/components/parameters/query.place.countryIds"
          },
          {
            "$ref": "#/components/parameters/query.place.excludedCountryIds"
          },
          {
            "$ref": "#/components/parameters/query.place.minPopulation"
          },
          {
            "$ref": "#/components/parameters/query.place.maxPopulation"
          },
          {
            "$ref": "#/components/parameters/query.entity.namePrefix"
          },
          {
            "$ref": "#/components/parameters/query.entity.namePrefixDefaultLangResults"
          },
          {
            "$ref": "#/components/parameters/query.timeZoneIds"
          },
          {
            "$ref": "#/components/parameters/query.place.types"
          },
          {
            "$ref": "#/components/parameters/query.asciiMode"
          },
          {
            "$ref": "#/components/parameters/query.hateoasMode"
          },
          {
            "$ref": "#/components/parameters/query.languageCode"
          },
          {
            "$ref": "#/components/parameters/query.limit"
          },
          {
            "$ref": "#/components/parameters/query.offset"
          },
          {
            "$ref": "#/components/parameters/query.place.sort"
          },
          {
            "$ref": "#/components/parameters/query.includeDeleted"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PopulatedPlaces"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "tags": [
          "Geo"
        ],
        "description": "Find places near the given administrative division, filtering by optional criteria. If no criteria are set, you\nwill get back all known places.\n",
        "operationId": "findPlacesNearAdminDivisionUsingGET",
        "summary": "Find places near division"
      }
    },
    "/geo/cities": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/query.place.location.id"
          },
          {
            "$ref": "#/components/parameters/query.place.location.radiusOf"
          },
          {
            "$ref": "#/components/parameters/query.distanceUnit"
          },
          {
            "$ref": "#/components/parameters/query.place.countryIds"
          },
          {
            "$ref": "#/components/parameters/query.place.excludedCountryIds"
          },
          {
            "$ref": "#/components/parameters/query.place.minPopulation"
          },
          {
            "$ref": "#/components/parameters/query.place.maxPopulation"
          },
          {
            "$ref": "#/components/parameters/query.entity.namePrefix"
          },
          {
            "$ref": "#/components/parameters/query.entity.namePrefixDefaultLangResults"
          },
          {
            "$ref": "#/components/parameters/query.timeZoneIds"
          },
          {
            "$ref": "#/components/parameters/query.city.types"
          },
          {
            "$ref": "#/components/parameters/query.asciiMode"
          },
          {
            "$ref": "#/components/parameters/query.hateoasMode"
          },
          {
            "$ref": "#/components/parameters/query.languageCode"
          },
          {
            "$ref": "#/components/parameters/query.limit"
          },
          {
            "$ref": "#/components/parameters/query.offset"
          },
          {
            "$ref": "#/components/parameters/query.place.sort"
          },
          {
            "$ref": "#/components/parameters/query.includeDeleted"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PopulatedPlaces"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        },
        "tags": [
          "Geo"
        ],
        "description": "Find cities, filtering by optional criteria. If no criteria are set, you will get back all known cities.\n",
        "operationId": "findCitiesUsingGET",
        "summary": "Find cities"
      }
    },
    "/geo/cities/{cityId}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/path.cityId"
          },
          {
            "$ref": "#/components/parameters/query.asciiMode"
          },
          {
            "$ref": "#/components/parameters/query.languageCode"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PopulatedPlace"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "tags": [
          "Geo"
        ],
        "description": "Get city details such as location coordinates, population, and elevation above sea-level\n(if available).\n",
        "operationId": "getCityUsingGET",
        "summary": "Get city details"
      }
    },
    "/geo/cities/{cityId}/dateTime": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/path.cityId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/DateTime"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "tags": [
          "Geo"
        ],
        "description": "Get city date-time",
        "operationId": "getCityDateTimeUsingGET",
        "summary": "Get city date-time"
      }
    },
    "/geo/cities/{cityId}/distance": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/path.cityId"
          },
          {
            "$ref": "#/components/parameters/query.toCityId"
          },
          {
            "$ref": "#/components/parameters/query.distanceUnit"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Distance"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "tags": [
          "Geo"
        ],
        "description": "Get distance from the given city",
        "operationId": "getCityDistanceUsingGET",
        "summary": "Get city distance"
      }
    },
    "/geo/cities/{cityId}/locatedIn": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/path.cityId"
          },
          {
            "$ref": "#/components/parameters/query.asciiMode"
          },
          {
            "$ref": "#/components/parameters/query.languageCode"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PopulatedPlace"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "tags": [
          "Geo"
        ],
        "description": "Get the details for the containing populated place (e.g., its county or other administrative division), including location coordinates, population, and elevation above sea-level\n(if available).\n",
        "operationId": "getCityLocatedInUsingGET",
        "summary": "Get city containing region"
      }
    },
    "/geo/cities/{cityId}/nearbyCities": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/path.cityId"
          },
          {
            "$ref": "#/components/parameters/query.place.location.radiusOf"
          },
          {
            "$ref": "#/components/parameters/query.distanceUnit"
          },
          {
            "$ref": "#/components/parameters/query.place.countryIds"
          },
          {
            "$ref": "#/components/parameters/query.place.excludedCountryIds"
          },
          {
            "$ref": "#/components/parameters/query.place.minPopulation"
          },
          {
            "$ref": "#/components/parameters/query.place.maxPopulation"
          },
          {
            "$ref": "#/components/parameters/query.entity.namePrefix"
          },
          {
            "$ref": "#/components/parameters/query.entity.namePrefixDefaultLangResults"
          },
          {
            "$ref": "#/components/parameters/query.timeZoneIds"
          },
          {
            "$ref": "#/components/parameters/query.city.types"
          },
          {
            "$ref": "#/components/parameters/query.asciiMode"
          },
          {
            "$ref": "#/components/parameters/query.hateoasMode"
          },
          {
            "$ref": "#/components/parameters/query.languageCode"
          },
          {
            "$ref": "#/components/parameters/query.limit"
          },
          {
            "$ref": "#/components/parameters/query.offset"
          },
          {
            "$ref": "#/components/parameters/query.place.sort"
          },
          {
            "$ref": "#/components/parameters/query.includeDeleted"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PopulatedPlaces"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "tags": [
          "Geo"
        ],
        "description": "Find cities near the given city, filtering by optional criteria. If no criteria are set, you will get\nback all cities within the default radius.\n",
        "operationId": "findCitiesNearCityUsingGET",
        "summary": "Find cities near city"
      }
    },
    "/geo/cities/{cityId}/nearbyDivisions": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/path.cityId"
          },
          {
            "$ref": "#/components/parameters/query.place.location.radiusOf"
          },
          {
            "$ref": "#/components/parameters/query.distanceUnit"
          },
          {
            "$ref": "#/components/parameters/query.place.countryIds"
          },
          {
            "$ref": "#/components/parameters/query.place.excludedCountryIds"
          },
          {
            "$ref": "#/components/parameters/query.place.minPopulation"
          },
          {
            "$ref": "#/components/parameters/query.place.maxPopulation"
          },
          {
            "$ref": "#/components/parameters/query.entity.namePrefix"
          },
          {
            "$ref": "#/components/parameters/query.entity.namePrefixDefaultLangResults"
          },
          {
            "$ref": "#/components/parameters/query.timeZoneIds"
          },
          {
            "$ref": "#/components/parameters/query.asciiMode"
          },
          {
            "$ref": "#/components/parameters/query.hateoasMode"
          },
          {
            "$ref": "#/components/parameters/query.languageCode"
          },
          {
            "$ref": "#/components/parameters/query.limit"
          },
          {
            "$ref": "#/components/parameters/query.offset"
          },
          {
            "$ref": "#/components/parameters/query.place.sort"
          },
          {
            "$ref": "#/components/parameters/query.includeDeleted"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PopulatedPlaces"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "tags": [
          "Geo"
        ],
        "description": "Find administrative divisions near the given city, filtering by optional criteria. If no criteria are set, you will get\nback all divisions within the default radius.\n",
        "operationId": "findDivisionsNearCityUsingGET",
        "summary": "Find admin divisions near city"
      }
    },
    "/geo/cities/{cityId}/nearbyPlaces": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/path.cityId"
          },
          {
            "$ref": "#/components/parameters/query.place.location.radiusOf"
          },
          {
            "$ref": "#/components/parameters/query.distanceUnit"
          },
          {
            "$ref": "#/components/parameters/query.place.countryIds"
          },
          {
            "$ref": "#/components/parameters/query.place.excludedCountryIds"
          },
          {
            "$ref": "#/components/parameters/query.place.minPopulation"
          },
          {
            "$ref": "#/components/parameters/query.place.maxPopulation"
          },
          {
            "$ref": "#/components/parameters/query.entity.namePrefix"
          },
          {
            "$ref": "#/components/parameters/query.entity.namePrefixDefaultLangResults"
          },
          {
            "$ref": "#/components/parameters/query.timeZoneIds"
          },
          {
            "$ref": "#/components/parameters/query.place.types"
          },
          {
            "$ref": "#/components/parameters/query.asciiMode"
          },
          {
            "$ref": "#/components/parameters/query.hateoasMode"
          },
          {
            "$ref": "#/components/parameters/query.languageCode"
          },
          {
            "$ref": "#/components/parameters/query.limit"
          },
          {
            "$ref": "#/components/parameters/query.offset"
          },
          {
            "$ref": "#/components/parameters/query.place.sort"
          },
          {
            "$ref": "#/components/parameters/query.includeDeleted"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PopulatedPlaces"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "tags": [
          "Geo"
        ],
        "description": "Find places near the given city, filtering by optional criteria. If no criteria are set, you will get\nback all places within the default radius.\n",
        "operationId": "findPlacesNearCityUsingGET",
        "summary": "Find places near city"
      }
    },
    "/geo/cities/{cityId}/time": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/path.cityId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Time"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "tags": [
          "Geo"
        ],
        "description": "Get city time",
        "operationId": "getCityTimeUsingGET",
        "summary": "Get city time"
      }
    },
    "/geo/countries": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/query.country.currencyCode"
          },
          {
            "$ref": "#/components/parameters/query.entity.namePrefix"
          },
          {
            "$ref": "#/components/parameters/query.entity.namePrefixDefaultLangResults"
          },
          {
            "$ref": "#/components/parameters/query.asciiMode"
          },
          {
            "$ref": "#/components/parameters/query.hateoasMode"
          },
          {
            "$ref": "#/components/parameters/query.languageCode"
          },
          {
            "$ref": "#/components/parameters/query.limit"
          },
          {
            "$ref": "#/components/parameters/query.offset"
          },
          {
            "$ref": "#/components/parameters/query.country.sort"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Countries"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        },
        "tags": [
          "Geo"
        ],
        "description": "Find countries, filtering by optional criteria. If no criteria are set, you will get back all known countries.\n",
        "operationId": "getCountriesUsingGET",
        "summary": "Find countries"
      }
    },
    "/geo/countries/{countryId}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/path.countryId"
          },
          {
            "$ref": "#/components/parameters/query.asciiMode"
          },
          {
            "$ref": "#/components/parameters/query.languageCode"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Country"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "tags": [
          "Geo"
        ],
        "description": "Get country details such as number of regions.",
        "operationId": "getCountryUsingGET",
        "summary": "Get country details"
      }
    },
    "/geo/countries/{countryId}/places": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/path.countryId"
          },
          {
            "$ref": "#/components/parameters/query.place.minPopulation"
          },
          {
            "$ref": "#/components/parameters/query.place.maxPopulation"
          },
          {
            "$ref": "#/components/parameters/query.entity.namePrefix"
          },
          {
            "$ref": "#/components/parameters/query.entity.namePrefixDefaultLangResults"
          },
          {
            "$ref": "#/components/parameters/query.timeZoneIds"
          },
          {
            "$ref": "#/components/parameters/query.place.types"
          },
          {
            "$ref": "#/components/parameters/query.asciiMode"
          },
          {
            "$ref": "#/components/parameters/query.hateoasMode"
          },
          {
            "$ref": "#/components/parameters/query.languageCode"
          },
          {
            "$ref": "#/components/parameters/query.limit"
          },
          {
            "$ref": "#/components/parameters/query.offset"
          },
          {
            "$ref": "#/components/parameters/query.place.sort.withinRegion"
          },
          {
            "$ref": "#/components/parameters/query.includeDeleted"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PopulatedPlaces"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "tags": [
          "Geo"
        ],
        "description": "Get the country's places. The country is omitted in the response.\n",
        "operationId": "findCountryPlacesUsingGET",
        "summary": "Find country places"
      }
    },
    "/geo/countries/{countryId}/regions": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/path.countryId"
          },
          {
            "$ref": "#/components/parameters/query.entity.namePrefix"
          },
          {
            "$ref": "#/components/parameters/query.entity.namePrefixDefaultLangResults"
          },
          {
            "$ref": "#/components/parameters/query.asciiMode"
          },
          {
            "$ref": "#/components/parameters/query.hateoasMode"
          },
          {
            "$ref": "#/components/parameters/query.languageCode"
          },
          {
            "$ref": "#/components/parameters/query.limit"
          },
          {
            "$ref": "#/components/parameters/query.offset"
          },
          {
            "$ref": "#/components/parameters/query.region.sort"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Regions"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "tags": [
          "Geo"
        ],
        "description": "Get the country's regions. These could be states, provinces, districts, or otherwise major\npolitical divisions.\n",
        "operationId": "getRegionsUsingGET",
        "summary": "Find country regions"
      }
    },
    "/geo/countries/{countryId}/regions/{regionCode}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/path.countryId"
          },
          {
            "$ref": "#/components/parameters/path.regionCode"
          },
          {
            "$ref": "#/components/parameters/query.asciiMode"
          },
          {
            "$ref": "#/components/parameters/query.languageCode"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Region"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "tags": [
          "Geo"
        ],
        "description": "Get country region details such as number of cities.",
        "operationId": "getRegionUsingGET",
        "summary": "Get region details"
      }
    },
    "/geo/countries/{countryId}/regions/{regionCode}/adminDivisions": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/path.countryId"
          },
          {
            "$ref": "#/components/parameters/path.regionCode"
          },
          {
            "$ref": "#/components/parameters/query.place.minPopulation"
          },
          {
            "$ref": "#/components/parameters/query.place.maxPopulation"
          },
          {
            "$ref": "#/components/parameters/query.entity.namePrefix"
          },
          {
            "$ref": "#/components/parameters/query.entity.namePrefixDefaultLangResults"
          },
          {
            "$ref": "#/components/parameters/query.timeZoneIds"
          },
          {
            "$ref": "#/components/parameters/query.asciiMode"
          },
          {
            "$ref": "#/components/parameters/query.hateoasMode"
          },
          {
            "$ref": "#/components/parameters/query.languageCode"
          },
          {
            "$ref": "#/components/parameters/query.limit"
          },
          {
            "$ref": "#/components/parameters/query.offset"
          },
          {
            "$ref": "#/components/parameters/query.place.sort.withinRegion"
          },
          {
            "$ref": "#/components/parameters/query.includeDeleted"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PopulatedPlaces"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "tags": [
          "Geo"
        ],
        "description": "Get country region administrative divisions. The country and region info is omitted in the\nresponse.\n",
        "operationId": "findRegionDivisionsUsingGET",
        "summary": "Find country region administrative divisions"
      }
    },
    "/geo/countries/{countryId}/regions/{regionCode}/cities": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/path.countryId"
          },
          {
            "$ref": "#/components/parameters/path.regionCode"
          },
          {
            "$ref": "#/components/parameters/query.place.minPopulation"
          },
          {
            "$ref": "#/components/parameters/query.place.maxPopulation"
          },
          {
            "$ref": "#/components/parameters/query.entity.namePrefix"
          },
          {
            "$ref": "#/components/parameters/query.entity.namePrefixDefaultLangResults"
          },
          {
            "$ref": "#/components/parameters/query.timeZoneIds"
          },
          {
            "$ref": "#/components/parameters/query.city.types"
          },
          {
            "$ref": "#/components/parameters/query.asciiMode"
          },
          {
            "$ref": "#/components/parameters/query.hateoasMode"
          },
          {
            "$ref": "#/components/parameters/query.languageCode"
          },
          {
            "$ref": "#/components/parameters/query.limit"
          },
          {
            "$ref": "#/components/parameters/query.offset"
          },
          {
            "$ref": "#/components/parameters/query.place.sort.withinRegion"
          },
          {
            "$ref": "#/components/parameters/query.includeDeleted"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PopulatedPlaces"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "tags": [
          "Geo"
        ],
        "description": "Get country region cities. The country and region info is omitted in the response.\n",
        "operationId": "findRegionCitiesUsingGET",
        "summary": "Find country region cities"
      }
    },
    "/geo/countries/{countryId}/regions/{regionCode}/places": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/path.countryId"
          },
          {
            "$ref": "#/components/parameters/path.regionCode"
          },
          {
            "$ref": "#/components/parameters/query.place.minPopulation"
          },
          {
            "$ref": "#/components/parameters/query.place.maxPopulation"
          },
          {
            "$ref": "#/components/parameters/query.entity.namePrefix"
          },
          {
            "$ref": "#/components/parameters/query.entity.namePrefixDefaultLangResults"
          },
          {
            "$ref": "#/components/parameters/query.timeZoneIds"
          },
          {
            "$ref": "#/components/parameters/query.place.types"
          },
          {
            "$ref": "#/components/parameters/query.asciiMode"
          },
          {
            "$ref": "#/components/parameters/query.hateoasMode"
          },
          {
            "$ref": "#/components/parameters/query.languageCode"
          },
          {
            "$ref": "#/components/parameters/query.limit"
          },
          {
            "$ref": "#/components/parameters/query.offset"
          },
          {
            "$ref": "#/components/parameters/query.place.sort.withinRegion"
          },
          {
            "$ref": "#/components/parameters/query.includeDeleted"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PopulatedPlaces"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "tags": [
          "Geo"
        ],
        "description": "Get country region places. The country and region info is omitted in the response.\n",
        "operationId": "findRegionPlacesUsingGET",
        "summary": "Find country region places"
      }
    },
    "/geo/locations/{locationId}/nearbyCities": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/path.location.id"
          },
          {
            "$ref": "#/components/parameters/query.place.location.radiusOf"
          },
          {
            "$ref": "#/components/parameters/query.distanceUnit"
          },
          {
            "$ref": "#/components/parameters/query.place.countryIds"
          },
          {
            "$ref": "#/components/parameters/query.place.excludedCountryIds"
          },
          {
            "$ref": "#/components/parameters/query.place.minPopulation"
          },
          {
            "$ref": "#/components/parameters/query.place.maxPopulation"
          },
          {
            "$ref": "#/components/parameters/query.entity.namePrefix"
          },
          {
            "$ref": "#/components/parameters/query.entity.namePrefixDefaultLangResults"
          },
          {
            "$ref": "#/components/parameters/query.timeZoneIds"
          },
          {
            "$ref": "#/components/parameters/query.city.types"
          },
          {
            "$ref": "#/components/parameters/query.asciiMode"
          },
          {
            "$ref": "#/components/parameters/query.hateoasMode"
          },
          {
            "$ref": "#/components/parameters/query.languageCode"
          },
          {
            "$ref": "#/components/parameters/query.limit"
          },
          {
            "$ref": "#/components/parameters/query.offset"
          },
          {
            "$ref": "#/components/parameters/query.place.sort"
          },
          {
            "$ref": "#/components/parameters/query.includeDeleted"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PopulatedPlaces"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        },
        "tags": [
          "Geo"
        ],
        "description": "Find cities near the given location, filtering by optional criteria. If no criteria are set, you will get back\nall cities within the default radius.\n",
        "operationId": "findCitiesNearLocationUsingGET",
        "summary": "Find cities near location"
      }
    },
    "/geo/locations/{locationId}/nearbyDivisions": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/path.location.id"
          },
          {
            "$ref": "#/components/parameters/query.place.location.radiusOf"
          },
          {
            "$ref": "#/components/parameters/query.distanceUnit"
          },
          {
            "$ref": "#/components/parameters/query.place.countryIds"
          },
          {
            "$ref": "#/components/parameters/query.place.excludedCountryIds"
          },
          {
            "$ref": "#/components/parameters/query.place.minPopulation"
          },
          {
            "$ref": "#/components/parameters/query.place.maxPopulation"
          },
          {
            "$ref": "#/components/parameters/query.entity.namePrefix"
          },
          {
            "$ref": "#/components/parameters/query.entity.namePrefixDefaultLangResults"
          },
          {
            "$ref": "#/components/parameters/query.timeZoneIds"
          },
          {
            "$ref": "#/components/parameters/query.asciiMode"
          },
          {
            "$ref": "#/components/parameters/query.hateoasMode"
          },
          {
            "$ref": "#/components/parameters/query.languageCode"
          },
          {
            "$ref": "#/components/parameters/query.limit"
          },
          {
            "$ref": "#/components/parameters/query.offset"
          },
          {
            "$ref": "#/components/parameters/query.place.sort"
          },
          {
            "$ref": "#/components/parameters/query.includeDeleted"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PopulatedPlaces"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        },
        "tags": [
          "Geo"
        ],
        "description": "Find administrative divisions near the given location, filtering by optional criteria. If no criteria are set,\nyou will get back all divisions within the default radius.\n",
        "operationId": "findDivisionsNearLocationUsingGET",
        "summary": "Find admin divisions near location"
      }
    },
    "/geo/locations/{locationId}/nearbyPlaces": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/path.location.id"
          },
          {
            "$ref": "#/components/parameters/query.place.location.radiusOf"
          },
          {
            "$ref": "#/components/parameters/query.distanceUnit"
          },
          {
            "$ref": "#/components/parameters/query.place.countryIds"
          },
          {
            "$ref": "#/components/parameters/query.place.excludedCountryIds"
          },
          {
            "$ref": "#/components/parameters/query.place.minPopulation"
          },
          {
            "$ref": "#/components/parameters/query.place.maxPopulation"
          },
          {
            "$ref": "#/components/parameters/query.entity.namePrefix"
          },
          {
            "$ref": "#/components/parameters/query.entity.namePrefixDefaultLangResults"
          },
          {
            "$ref": "#/components/parameters/query.timeZoneIds"
          },
          {
            "$ref": "#/components/parameters/query.place.types"
          },
          {
            "$ref": "#/components/parameters/query.asciiMode"
          },
          {
            "$ref": "#/components/parameters/query.hateoasMode"
          },
          {
            "$ref": "#/components/parameters/query.languageCode"
          },
          {
            "$ref": "#/components/parameters/query.limit"
          },
          {
            "$ref": "#/components/parameters/query.offset"
          },
          {
            "$ref": "#/components/parameters/query.place.sort"
          },
          {
            "$ref": "#/components/parameters/query.includeDeleted"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PopulatedPlaces"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        },
        "tags": [
          "Geo"
        ],
        "description": "Find places near the given location, filtering by optional criteria. If no criteria are set, you will get back\nall places within the default radius.\n",
        "operationId": "findPlacesNearLocationUsingGET",
        "summary": "Find places near location"
      }
    },
    "/geo/places": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/query.place.location.id"
          },
          {
            "$ref": "#/components/parameters/query.place.location.radiusOf"
          },
          {
            "$ref": "#/components/parameters/query.distanceUnit"
          },
          {
            "$ref": "#/components/parameters/query.place.countryIds"
          },
          {
            "$ref": "#/components/parameters/query.place.excludedCountryIds"
          },
          {
            "$ref": "#/components/parameters/query.place.minPopulation"
          },
          {
            "$ref": "#/components/parameters/query.place.maxPopulation"
          },
          {
            "$ref": "#/components/parameters/query.entity.namePrefix"
          },
          {
            "$ref": "#/components/parameters/query.entity.namePrefixDefaultLangResults"
          },
          {
            "$ref": "#/components/parameters/query.timeZoneIds"
          },
          {
            "$ref": "#/components/parameters/query.place.types"
          },
          {
            "$ref": "#/components/parameters/query.asciiMode"
          },
          {
            "$ref": "#/components/parameters/query.hateoasMode"
          },
          {
            "$ref": "#/components/parameters/query.languageCode"
          },
          {
            "$ref": "#/components/parameters/query.limit"
          },
          {
            "$ref": "#/components/parameters/query.offset"
          },
          {
            "$ref": "#/components/parameters/query.place.sort"
          },
          {
            "$ref": "#/components/parameters/query.includeDeleted"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PopulatedPlaces"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        },
        "tags": [
          "Geo"
        ],
        "description": "Find places, filtering by optional criteria. If no criteria are set, you will get back all known places.\n",
        "operationId": "findPlacesUsingGET",
        "summary": "Find places"
      }
    },
    "/geo/places/{placeId}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/path.placeId"
          },
          {
            "$ref": "#/components/parameters/query.asciiMode"
          },
          {
            "$ref": "#/components/parameters/query.languageCode"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PopulatedPlace"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "tags": [
          "Geo"
        ],
        "description": "Get place details such as location coordinates, population, and elevation above sea-level\n(if available).\n",
        "operationId": "getPlaceUsingGET",
        "summary": "Get place details"
      }
    },
    "/geo/places/{placeId}/dateTime": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/path.placeId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/DateTime"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "tags": [
          "Geo"
        ],
        "description": "Get place date-time",
        "operationId": "getPlaceDateTimeUsingGET",
        "summary": "Get place date-time"
      }
    },
    "/geo/places/{placeId}/distance": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/path.placeId"
          },
          {
            "$ref": "#/components/parameters/query.toPlaceId"
          },
          {
            "$ref": "#/components/parameters/query.distanceUnit"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Distance"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "tags": [
          "Geo"
        ],
        "description": "Get distance from the given place",
        "operationId": "getPlaceDistanceUsingGET",
        "summary": "Get place distance"
      }
    },
    "/geo/places/{placeId}/locatedIn": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/path.placeId"
          },
          {
            "$ref": "#/components/parameters/query.asciiMode"
          },
          {
            "$ref": "#/components/parameters/query.languageCode"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PopulatedPlace"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "tags": [
          "Geo"
        ],
        "description": "Get the details for the containing populated place (e.g., its county or other administrative division), including location coordinates, population, and elevation above sea-level\n(if available).\n",
        "operationId": "getPlaceLocatedInUsingGET",
        "summary": "Get place containing region"
      }
    },
    "/geo/places/{placeId}/nearbyPlaces": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/path.placeId"
          },
          {
            "$ref": "#/components/parameters/query.place.location.radiusOf"
          },
          {
            "$ref": "#/components/parameters/query.distanceUnit"
          },
          {
            "$ref": "#/components/parameters/query.place.countryIds"
          },
          {
            "$ref": "#/components/parameters/query.place.excludedCountryIds"
          },
          {
            "$ref": "#/components/parameters/query.place.minPopulation"
          },
          {
            "$ref": "#/components/parameters/query.place.maxPopulation"
          },
          {
            "$ref": "#/components/parameters/query.entity.namePrefix"
          },
          {
            "$ref": "#/components/parameters/query.entity.namePrefixDefaultLangResults"
          },
          {
            "$ref": "#/components/parameters/query.timeZoneIds"
          },
          {
            "$ref": "#/components/parameters/query.place.types"
          },
          {
            "$ref": "#/components/parameters/query.asciiMode"
          },
          {
            "$ref": "#/components/parameters/query.hateoasMode"
          },
          {
            "$ref": "#/components/parameters/query.languageCode"
          },
          {
            "$ref": "#/components/parameters/query.limit"
          },
          {
            "$ref": "#/components/parameters/query.offset"
          },
          {
            "$ref": "#/components/parameters/query.place.sort"
          },
          {
            "$ref": "#/components/parameters/query.includeDeleted"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PopulatedPlaces"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "tags": [
          "Geo"
        ],
        "description": "Find places near the given place, filtering by optional criteria. If no criteria are set, you will get\nback all places within the default radius.\n",
        "operationId": "findPlacesNearPlaceUsingGET",
        "summary": "Find places near place"
      }
    },
    "/geo/places/{placeId}/time": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/path.placeId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Time"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "tags": [
          "Geo"
        ],
        "description": "Get place time",
        "operationId": "getPlaceTimeUsingGET",
        "summary": "Get place time"
      }
    },
    "/locale/currencies": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/query.currency.countryId"
          },
          {
            "$ref": "#/components/parameters/query.hateoasMode"
          },
          {
            "$ref": "#/components/parameters/query.limit"
          },
          {
            "$ref": "#/components/parameters/query.offset"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Currencies"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        },
        "tags": [
          "Locale"
        ],
        "description": "Find currencies, filtering by optional criteria. If no criteria are set, you will get back all known currencies.",
        "operationId": "getCurrenciesUsingGET",
        "summary": "Find currencies"
      }
    },
    "/locale/languages": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/query.hateoasMode"
          },
          {
            "$ref": "#/components/parameters/query.limit"
          },
          {
            "$ref": "#/components/parameters/query.offset"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Languages"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        },
        "tags": [
          "Locale"
        ],
        "description": "Get all supported languages",
        "operationId": "getLanguagesUsingGET",
        "summary": "Get languages"
      }
    },
    "/locale/locales": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/query.hateoasMode"
          },
          {
            "$ref": "#/components/parameters/query.limit"
          },
          {
            "$ref": "#/components/parameters/query.offset"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Locales"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        },
        "tags": [
          "Locale"
        ],
        "description": "Get all known locales",
        "operationId": "getLocalesUsingGET",
        "summary": "Get locales"
      }
    },
    "/locale/timezones": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/query.hateoasMode"
          },
          {
            "$ref": "#/components/parameters/query.limit"
          },
          {
            "$ref": "#/components/parameters/query.offset"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TimeZones"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        },
        "tags": [
          "Locale"
        ],
        "description": "Get all known time-zones",
        "operationId": "getTimezonesUsingGET",
        "summary": "Get time-zones"
      }
    },
    "/locale/timezones/{zoneId}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/path.zoneId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TimeZone"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "tags": [
          "Locale"
        ],
        "description": "Get time-zone",
        "operationId": "getTimeZoneUsingGET",
        "summary": "Get time-zone"
      }
    },
    "/locale/timezones/{zoneId}/dateTime": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/path.zoneId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/DateTime"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "tags": [
          "Locale"
        ],
        "description": "Get time-zone date-time",
        "operationId": "getTimeZoneDateTimeUsingGET",
        "summary": "Get time-zone date-time"
      }
    },
    "/locale/timezones/{zoneId}/time": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/path.zoneId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Time"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "tags": [
          "Locale"
        ],
        "description": "Get time-zone time",
        "operationId": "getTimeZoneTimeUsingGET",
        "summary": "Get time-zone time"
      }
    }
  },
  "components": {
    "parameters": {
      "path.cityId": {
        "description": "A city id (either native 'id' or 'wikiDataId')",
        "in": "path",
        "name": "cityId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "path.countryId": {
        "description": "An ISO-3166 country code or WikiData id",
        "in": "path",
        "name": "countryId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "path.divisionId": {
        "description": "An admin-division id (either native 'id' or 'wikiDataId')",
        "in": "path",
        "name": "divisionId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "path.location.id": {
        "description": "A latitude/longitude in ISO-6709 format: \u00b1DD.DDDD\u00b1DDD.DDDD",
        "in": "path",
        "name": "locationId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "path.placeId": {
        "description": "A place id (either native 'id' or 'wikiDataId')",
        "in": "path",
        "name": "placeId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "path.regionCode": {
        "description": "An ISO-3166 or FIPS region code",
        "in": "path",
        "name": "regionCode",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "path.zoneId": {
        "description": "A time-zone id",
        "in": "path",
        "name": "zoneId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "query.asciiMode": {
        "description": "Display results using ASCII characters",
        "in": "query",
        "name": "asciiMode",
        "required": false,
        "schema": {
          "default": false,
          "type": "boolean"
        }
      },
      "query.city.types": {
        "description": "Only cities for these types (comma-delimited): ADM2 | CITY",
        "in": "query",
        "name": "types",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "query.country.currencyCode": {
        "description": "Only countries supporting this currency",
        "in": "query",
        "name": "currencyCode",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "query.country.sort": {
        "description": "How to sort countries. \nFormat: \u00b1SORT_FIELD \nwhere SORT_FIELD = code | name",
        "in": "query",
        "name": "sort",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "query.currency.countryId": {
        "description": "Currencies for this country id",
        "in": "query",
        "name": "countryId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "query.distanceUnit": {
        "description": "The unit of distance: MI | KM",
        "in": "query",
        "name": "distanceUnit",
        "required": false,
        "schema": {
          "default": "MI",
          "type": "string"
        }
      },
      "query.entity.namePrefix": {
        "description": "Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name\nas it appears in that language.\n",
        "in": "query",
        "name": "namePrefix",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "query.entity.namePrefixDefaultLangResults": {
        "description": "When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.\n",
        "in": "query",
        "name": "namePrefixDefaultLangResults",
        "required": false,
        "schema": {
          "default": true,
          "type": "boolean"
        }
      },
      "query.hateoasMode": {
        "description": "Include HATEOAS-style links in results",
        "in": "query",
        "name": "hateoasMode",
        "required": false,
        "schema": {
          "default": true,
          "type": "boolean"
        }
      },
      "query.includeDeleted": {
        "description": "Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE",
        "in": "query",
        "name": "includeDeleted",
        "required": false,
        "schema": {
          "default": "NONE",
          "type": "string"
        }
      },
      "query.languageCode": {
        "description": "Display results in this language",
        "in": "query",
        "name": "languageCode",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "query.limit": {
        "description": "The maximum number of results to retrieve",
        "in": "query",
        "name": "limit",
        "required": false,
        "schema": {
          "default": 10,
          "format": "int32",
          "type": "integer"
        }
      },
      "query.offset": {
        "description": "The zero-ary offset index into the results",
        "in": "query",
        "name": "offset",
        "required": false,
        "schema": {
          "default": 0,
          "format": "int32",
          "type": "integer"
        }
      },
      "query.place.countryIds": {
        "description": "Only places in these countries (comma-delimited country codes or WikiData ids)",
        "in": "query",
        "name": "countryIds",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "query.place.excludedCountryIds": {
        "description": "Only places NOT in these countries (comma-delimited country codes or WikiData ids)",
        "in": "query",
        "name": "excludedCountryIds",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "query.place.location.id": {
        "description": "Only places near this location. Latitude/longitude in ISO-6709 format: \u00b1DD.DDDD\u00b1DDD.DDDD",
        "in": "query",
        "name": "location",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "query.place.location.radiusOf": {
        "description": "The location radius within which to find places",
        "in": "query",
        "name": "radius",
        "required": false,
        "schema": {
          "format": "int32",
          "type": "integer"
        }
      },
      "query.place.maxPopulation": {
        "description": "Only places having no more than this population",
        "in": "query",
        "name": "maxPopulation",
        "required": false,
        "schema": {
          "format": "int32",
          "type": "integer"
        }
      },
      "query.place.minPopulation": {
        "description": "Only places having at least this population",
        "in": "query",
        "name": "minPopulation",
        "required": false,
        "schema": {
          "format": "int32",
          "type": "integer"
        }
      },
      "query.place.sort": {
        "description": "How to sort places. \nFormat: \u00b1SORT_FIELD,\u00b1SORT_FIELD \nwhere SORT_FIELD = countryCode | elevation | name | population\n",
        "in": "query",
        "name": "sort",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "query.place.sort.withinRegion": {
        "description": "How to sort place results. \n'Format: \u00b1SORT_FIELD,\u00b1SORT_FIELD' \nwhere SORT_FIELD = elevation | name | population\n",
        "in": "query",
        "name": "sort",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "query.place.types": {
        "description": "Only places for these types (comma-delimited): ADM2 | CITY | ISLAND",
        "in": "query",
        "name": "types",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "query.region.sort": {
        "description": "How to sort regions. \nFormat: \u00b1SORT_FIELD \nwhere SORT_FIELD = fipsCode | isoCode | name",
        "in": "query",
        "name": "sort",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "query.sort": {
        "description": "How to sort place results. \n'Format: \u00b1SORT_FIELD,\u00b1SORT_FIELD' \nwhere SORT_FIELD = countryCode | elevation | name | population\n",
        "in": "query",
        "name": "sort",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "query.timeZoneIds": {
        "description": "Only places in these time-zones (comma-delimited)",
        "in": "query",
        "name": "timeZoneIds",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "query.toCityId": {
        "description": "Distance to this city",
        "in": "query",
        "name": "toCityId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "query.toPlaceId": {
        "description": "Distance to this place",
        "in": "query",
        "name": "toPlaceId",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    },
    "responses": {
      "BadRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BadRequestResponse"
            }
          }
        },
        "description": "400 - Bad Request"
      },
      "Countries": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CountriesResponse"
            }
          }
        },
        "description": "A list of countries"
      },
      "Country": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CountryResponse"
            }
          }
        },
        "description": "Country detail"
      },
      "Currencies": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CurrenciesResponse"
            }
          }
        },
        "description": "A list of currencies"
      },
      "DateTime": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DateTimeResponse"
            }
          }
        },
        "description": "An ISO-6801 date-time"
      },
      "Distance": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DistanceResponse"
            }
          }
        },
        "description": "A decimal distance (in miles or kilometers)"
      },
      "Forbidden": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ForbiddenResponse"
            }
          }
        },
        "description": "403 - Forbidden"
      },
      "Languages": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/LanguagesResponse"
            }
          }
        },
        "description": "A list of languages supported by the system"
      },
      "Locales": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/LocalesResponse"
            }
          }
        },
        "description": "A list of locales"
      },
      "NotFound": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/NotFoundResponse"
            }
          }
        },
        "description": "404 - Not Found"
      },
      "PopulatedPlace": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PopulatedPlaceResponse"
            }
          }
        },
        "description": "Populated-place details"
      },
      "PopulatedPlaces": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PopulatedPlacesResponse"
            }
          }
        },
        "description": "A list of populated places"
      },
      "Region": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RegionResponse"
            }
          }
        },
        "description": "Country region details"
      },
      "Regions": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RegionsResponse"
            }
          }
        },
        "description": "A list of country regions"
      },
      "Time": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TimeResponse"
            }
          }
        },
        "description": "An ISO-8601 time response"
      },
      "TimeZone": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TimeZoneResponse"
            }
          }
        },
        "description": "A time-zone"
      },
      "TimeZones": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TimeZonesResponse"
            }
          }
        },
        "description": "A list of time-zones"
      },
      "Unauthorized": {
        "description": "401 - Unauthorized"
      }
    },
    "schemas": {
      "BadRequestResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ],
        "description": "Bad Request Response",
        "example": {
          "errors": [
            {
              "code": "PARAM_INVALID",
              "message": "Param [someParam] has invalid value: invalidValue"
            }
          ]
        },
        "title": "Bad Request Response",
        "type": "object"
      },
      "BaseCollectionResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "properties": {
              "links": {
                "items": {
                  "$ref": "#/components/schemas/Link"
                },
                "title": "Links",
                "type": "array"
              },
              "metadata": {
                "$ref": "#/components/schemas/Metadata",
                "title": "Metadata"
              }
            },
            "type": "object"
          }
        ],
        "description": "Common properties for all collection  responses",
        "example": {
          "links": [
            {
              "href": "/data/world/v1/some/resource?offset=0&limit=5",
              "rel": "first"
            },
            {
              "href": "/data/world/v1/some/resource?offset=0&limit=5",
              "rel": "prev"
            },
            {
              "href": "/data/world/v1/some/resource?offset=10&limit=5",
              "rel": "next"
            },
            {
              "href": "/data/world/v1/some/resource?offset=95&limit=5",
              "rel": "last"
            }
          ],
          "metadata": {
            "currentOffset": 5,
            "totalCount": 100
          }
        },
        "title": "Base Collection Response",
        "type": "object"
      },
      "BaseResponse": {
        "description": "Common properties for all responses",
        "example": {
          "errors": []
        },
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "title": "Errors",
            "type": "array"
          }
        },
        "title": "Base Response",
        "type": "object"
      },
      "CountriesResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseCollectionResponse"
          },
          {
            "properties": {
              "data": {
                "items": {
                  "$ref": "#/components/schemas/CountrySummary"
                },
                "title": "CountrySummaries",
                "type": "array"
              }
            },
            "type": "object"
          }
        ],
        "description": "A list of countries",
        "example": {
          "data": [
            {
              "code": "SM",
              "currencyCodes": [
                "EUR"
              ],
              "name": "San Marino",
              "wikiDataId": "Q238"
            },
            {
              "code": "NE",
              "currencyCodes": [
                "XOF"
              ],
              "name": "Niger",
              "wikiDataId": "Q1032"
            },
            {
              "code": "MT",
              "currencyCodes": [
                "EUR"
              ],
              "name": "Malta",
              "wikiDataId": "Q233"
            },
            {
              "code": "KZ",
              "currencyCodes": [
                "KZT"
              ],
              "name": "Kazakhstan",
              "wikiDataId": "Q232"
            },
            {
              "code": "KE",
              "currencyCodes": [
                "KES"
              ],
              "name": "Kenya",
              "wikiDataId": "Q114"
            }
          ],
          "links": [
            {
              "href": "/data/world/v1/geo/countries?offset=0&limit=5",
              "rel": "first"
            },
            {
              "href": "/data/world/v1/geo/countries?offset=0&limit=5",
              "rel": "prev"
            },
            {
              "href": "/data/world/v1/geo/countries?offset=10&limit=5",
              "rel": "next"
            },
            {
              "href": "/data/world/v1/geo/countries?offset=195&limit=5",
              "rel": "last"
            }
          ],
          "metadata": {
            "currentOffset": 5,
            "totalCount": 198
          }
        },
        "title": "Countries Response",
        "type": "object"
      },
      "CountryDetails": {
        "description": "Full country details",
        "example": {
          "callingCode": "+1",
          "code": "US",
          "currencyCodes": [
            "USD"
          ],
          "flagImageUri": "http://commons.wikimedia.org/wiki/Special:FilePath/Flag%20of%20the%20United%20States.svg",
          "name": "United States",
          "numRegions": 56,
          "wikiDataId": "Q30"
        },
        "properties": {
          "callingCode": {
            "description": "The country dialing prefix",
            "type": "string"
          },
          "code": {
            "description": "The ISO-3166 country code",
            "type": "string"
          },
          "currencyCodes": {
            "description": "A list of supported ISO-4217 currency codes",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "flagImageUri": {
            "description": "The country flag image",
            "type": "string"
          },
          "name": {
            "description": "The country name (varies by languageCode)",
            "type": "string"
          },
          "numRegions": {
            "description": "The number of regions in this country",
            "format": "int32",
            "type": "integer"
          },
          "wikiDataId": {
            "description": "The country WikiData id",
            "type": "string"
          }
        },
        "title": "Country Details",
        "type": "object"
      },
      "CountryResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "properties": {
              "data": {
                "$ref": "#/components/schemas/CountryDetails"
              }
            },
            "type": "object"
          }
        ],
        "description": "Country details response",
        "example": {
          "data": {
            "callingCode": "+1",
            "code": "US",
            "currencyCodes": [
              "USD"
            ],
            "flagImageUri": "http://commons.wikimedia.org/wiki/Special:FilePath/Flag%20of%20the%20United%20States.svg",
            "name": "United States",
            "numRegions": 56,
            "wikiDataId": "Q30"
          }
        },
        "title": "Country Response",
        "type": "object"
      },
      "CountrySummary": {
        "description": "Minimal country info",
        "example": {
          "code": "US",
          "currencyCodes": [
            "USD"
          ],
          "name": "United States",
          "wikiDataId": "Q30"
        },
        "properties": {
          "code": {
            "description": "The ISO-3166 country code",
            "type": "string"
          },
          "currencyCodes": {
            "description": "A list of supported ISO-4217 currency codes",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "description": "The country name (varies by languageCode)",
            "type": "string"
          },
          "wikiDataId": {
            "description": "The country WikiData id",
            "type": "string"
          }
        },
        "title": "Country Summary",
        "type": "object"
      },
      "CurrenciesResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseCollectionResponse"
          },
          {
            "properties": {
              "data": {
                "items": {
                  "$ref": "#/components/schemas/Currency"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ],
        "description": "A list of currencies",
        "example": {
          "data": [
            {
              "code": "AWG",
              "countryCodes": [
                "AW"
              ]
            },
            {
              "code": "AZN",
              "countryCodes": [
                "AZ"
              ]
            },
            {
              "code": "BAM",
              "countryCodes": [
                "BA"
              ]
            },
            {
              "code": "BBD",
              "countryCodes": [
                "BB"
              ]
            },
            {
              "code": "BDT",
              "countryCodes": [
                "BD"
              ]
            }
          ],
          "links": [
            {
              "href": "/data/world/v1/locale/currencies?offset=0&limit=5",
              "rel": "first"
            },
            {
              "href": "/data/world/v1/locale/currencies?offset=5&limit=5",
              "rel": "prev"
            },
            {
              "href": "/data/world/v1/locale/currencies?offset=15&limit=5",
              "rel": "next"
            },
            {
              "href": "/data/world/v1/locale/currencies?offset=200&limit=5",
              "rel": "last"
            }
          ],
          "metadata": {
            "currentOffset": 10,
            "totalCount": 205
          }
        },
        "title": "Currencies Response",
        "type": "object"
      },
      "Currency": {
        "description": "Currency info",
        "example": {
          "code": "USD",
          "countryCodes": [
            "PR",
            "MP",
            "IO",
            "FM",
            "PW",
            "GU",
            "BQ",
            "TC",
            "VG",
            "AS",
            "VI",
            "TL",
            "UM",
            "MH",
            "EC",
            "US"
          ],
          "symbol": "$"
        },
        "properties": {
          "code": {
            "description": "The ISO-4217 currency code",
            "type": "string"
          },
          "countryCodes": {
            "description": "A list of ISO-3166 country codes of countries supporting this currency",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "symbol": {
            "description": "The currency symbol",
            "type": "string"
          }
        },
        "title": "Currency",
        "type": "object"
      },
      "DateTimeResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "properties": {
              "data": {
                "description": "The date-time in ISO-6801 format: yyyyMMdd'T'HHmmssZ",
                "format": "date-time",
                "type": "string"
              }
            },
            "type": "object"
          }
        ],
        "description": "An ISO-6801 date-time response",
        "example": {
          "data": "2020-10-05T01:16:53.504604+04:30"
        },
        "title": "Date-Time Response",
        "type": "object"
      },
      "DistanceResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "properties": {
              "data": {
                "description": "The distance in units as set by the distanceUnit param (defaults to miles)",
                "format": "double",
                "type": "number"
              }
            },
            "type": "object"
          }
        ],
        "description": "A decimal distance (in miles or kilometers)",
        "example": {
          "data": 6707.9
        },
        "title": "Distance Response",
        "type": "object"
      },
      "Error": {
        "description": "An error that occurred processing the request",
        "example": {
          "code": "ENTITY_NOT_FOUND",
          "message": "Param [someParam] has invalid value: invalidValue"
        },
        "properties": {
          "code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "message": {
            "type": "string"
          }
        },
        "title": "Error",
        "type": "object"
      },
      "ErrorCode": {
        "description": "One of a set of enumerated error codes representing the types of errors that can occur processing a\nrequest\n",
        "enum": [
          "ACCESS_DENIED",
          "ENTITY_NOT_FOUND",
          "INCOMPATIBLE",
          "PARAM_INVALID",
          "PARAMS_MUTUALLY_EXCLUSIVE",
          "REQUEST_UNPROCESSABLE"
        ],
        "example": "ENTITY_NOT_FOUND",
        "title": "ErrorCode",
        "type": "string"
      },
      "ForbiddenResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ],
        "description": "Forbidden Response",
        "example": {
          "errors": [
            {
              "code": "ACCESS_DENIED",
              "message": "The reason why access was denied"
            }
          ]
        },
        "title": "Forbidden Response",
        "type": "object"
      },
      "LanguageDescriptor": {
        "description": "A language supported by the service",
        "example": {
          "code": "en",
          "name": "English"
        },
        "properties": {
          "code": {
            "enum": [
              "undefined",
              "aa",
              "ab",
              "ae",
              "af",
              "ak",
              "am",
              "an",
              "ar",
              "as",
              "av",
              "ay",
              "az",
              "ba",
              "be",
              "bg",
              "bh",
              "bi",
              "bm",
              "bn",
              "bo",
              "br",
              "bs",
              "ca",
              "ce",
              "ch",
              "co",
              "cr",
              "cs",
              "cu",
              "cv",
              "cy",
              "da",
              "de",
              "dv",
              "dz",
              "ee",
              "el",
              "en",
              "eo",
              "es",
              "et",
              "eu",
              "fa",
              "ff",
              "fi",
              "fj",
              "fo",
              "fr",
              "fy",
              "ga",
              "gd",
              "gl",
              "gn",
              "gu",
              "gv",
              "ha",
              "he",
              "hi",
              "ho",
              "hr",
              "ht",
              "hu",
              "hy",
              "hz",
              "ia",
              "id",
              "ie",
              "ig",
              "ii",
              "ik",
              "io",
              "is",
              "it",
              "iu",
              "ja",
              "jv",
              "ka",
              "kg",
              "ki",
              "kj",
              "kk",
              "kl",
              "km",
              "kn",
              "ko",
              "kr",
              "ks",
              "ku",
              "kv",
              "kw",
              "ky",
              "la",
              "lb",
              "lg",
              "li",
              "ln",
              "lo",
              "lt",
              "lu",
              "lv",
              "mg",
              "mh",
              "mi",
              "mk",
              "ml",
              "mn",
              "mr",
              "ms",
              "mt",
              "my",
              "na",
              "nb",
              "nd",
              "ne",
              "ng",
              "nl",
              "nn",
              "no",
              "nr",
              "nv",
              "ny",
              "oc",
              "oj",
              "om",
              "or",
              "os",
              "pa",
              "pi",
              "pl",
              "ps",
              "pt",
              "qu",
              "rm",
              "rn",
              "ro",
              "ru",
              "rw",
              "sa",
              "sc",
              "sd",
              "se",
              "sg",
              "si",
              "sk",
              "sl",
              "sm",
              "sn",
              "so",
              "sq",
              "sr",
              "ss",
              "st",
              "su",
              "sv",
              "sw",
              "ta",
              "te",
              "tg",
              "th",
              "ti",
              "tk",
              "tl",
              "tn",
              "to",
              "tr",
              "ts",
              "tt",
              "tw",
              "ty",
              "ug",
              "uk",
              "ur",
              "uz",
              "ve",
              "vi",
              "vo",
              "wa",
              "wo",
              "xh",
              "yi",
              "yo",
              "za",
              "zh",
              "zu"
            ],
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "title": "Language",
        "type": "object"
      },
      "LanguagesResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseCollectionResponse"
          },
          {
            "properties": {
              "data": {
                "items": {
                  "$ref": "#/components/schemas/LanguageDescriptor"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ],
        "description": "A list of languages supported by the system",
        "example": {
          "data": [
            {
              "code": "fr",
              "name": "French"
            },
            {
              "code": "it",
              "name": "Italian"
            },
            {
              "code": "pt",
              "name": "Portuguese"
            }
          ],
          "links": [
            {
              "href": "/data/world/v1/locale/languages?offset=0&limit=3",
              "rel": "first"
            },
            {
              "href": "/data/world/v1/locale/languages?offset=0&limit=3",
              "rel": "prev"
            },
            {
              "href": "/data/world/v1/locale/languages?offset=6&limit=3",
              "rel": "next"
            },
            {
              "href": "/data/world/v1/locale/languages?offset=6&limit=3",
              "rel": "last"
            }
          ],
          "metadata": {
            "currentOffset": 3,
            "totalCount": 8
          }
        },
        "title": "Languages Response",
        "type": "object"
      },
      "Link": {
        "description": "A HATEAOS link",
        "example": {
          "href": "/data/world/v1/geo/cities?offset=10&limit=10",
          "rel": "next"
        },
        "properties": {
          "href": {
            "type": "string"
          },
          "rel": {
            "type": "string"
          }
        },
        "title": "Link",
        "type": "object"
      },
      "Locale": {
        "description": "A locale representing a language/region combination",
        "example": {
          "code": "en_US"
        },
        "properties": {
          "code": {
            "description": "The locale code",
            "type": "string"
          }
        },
        "title": "Locale",
        "type": "object"
      },
      "LocalesResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseCollectionResponse"
          },
          {
            "properties": {
              "data": {
                "items": {
                  "$ref": "#/components/schemas/Locale"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ],
        "description": "A list of locales",
        "example": {
          "data": [
            {
              "code": "eu"
            },
            {
              "code": "ar_MR"
            },
            {
              "code": "es_DO"
            },
            {
              "code": "ru"
            },
            {
              "code": "az"
            }
          ],
          "links": [
            {
              "href": "/data/world/v1/locale/locales?offset=0&limit=5",
              "rel": "first"
            },
            {
              "href": "/data/world/v1/locale/locales?offset=45&limit=5",
              "rel": "prev"
            },
            {
              "href": "/data/world/v1/locale/locales?offset=55&limit=5",
              "rel": "next"
            },
            {
              "href": "/data/world/v1/locale/locales?offset=770&limit=5",
              "rel": "last"
            }
          ],
          "metadata": {
            "currentOffset": 50,
            "totalCount": 772
          }
        },
        "title": "Locales Response",
        "type": "object"
      },
      "Metadata": {
        "description": "Result metadata (currently only associated with collection results)",
        "example": {
          "currentOffset": 0,
          "totalCount": 100
        },
        "properties": {
          "currentOffset": {
            "description": "The zero-ary offset into the results (0 is the first result)",
            "format": "int64",
            "type": "integer"
          },
          "totalCount": {
            "description": "The total number of results across pages",
            "format": "int64",
            "type": "integer"
          }
        },
        "title": "Metadata",
        "type": "object"
      },
      "NotFoundResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ],
        "description": "Not Found Response",
        "example": {
          "errors": [
            {
              "code": "ENTITY_NOT_FOUND",
              "message": "Entity not found for id: someEntityId"
            }
          ]
        },
        "title": "Not Found Response",
        "type": "object"
      },
      "PopulatedPlaceDetails": {
        "description": "Full populated-place details",
        "example": {
          "country": "United States of America",
          "countryCode": "US",
          "deleted": false,
          "elevationMeters": 10,
          "id": 123214,
          "latitude": 40.67,
          "longitude": -73.94,
          "name": "New York City",
          "population": 8398748,
          "region": "New York",
          "regionCode": "NY",
          "timezone": "America__New_York",
          "type": "CITY",
          "wikiDataId": "Q60"
        },
        "properties": {
          "city": {
            "description": "The city name (legacy)",
            "nullable": "true",
            "type": "string"
          },
          "country": {
            "description": "The country name (varies by languageCode)",
            "type": "string"
          },
          "countryCode": {
            "description": "The ISO-3166 country code",
            "type": "string"
          },
          "deleted": {
            "description": "If this place has been soft-deleted",
            "type": "boolean"
          },
          "elevationMeters": {
            "description": "The place elevation (meters) above sea level",
            "format": "int32",
            "type": "integer"
          },
          "id": {
            "description": "The place GeoDB native id",
            "format": "int32",
            "type": "integer"
          },
          "latitude": {
            "description": "The place latittude (-90.0 to 90.0)",
            "format": "double",
            "type": "number"
          },
          "longitude": {
            "description": "The place longitude (-180.0 to 180.0)",
            "format": "double",
            "type": "number"
          },
          "name": {
            "description": "The place name (varies by languageCode)",
            "type": "string"
          },
          "population": {
            "description": "The place population",
            "format": "int32",
            "type": "integer"
          },
          "region": {
            "description": "The region name (varies by languageCode)",
            "type": "string"
          },
          "regionCode": {
            "description": "The ISO or FIPS region code",
            "type": "string"
          },
          "regionWdId": {
            "description": "The region Wikidata id",
            "type": "string"
          },
          "timezone": {
            "description": "The place timezone id",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/PopulatedPlaceType",
            "description": "The place type"
          },
          "wikiDataId": {
            "description": "The place WikiData id",
            "type": "string"
          }
        },
        "title": "Populated-Place Details",
        "type": "object"
      },
      "PopulatedPlaceResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "properties": {
              "data": {
                "$ref": "#/components/schemas/PopulatedPlaceDetails"
              }
            },
            "type": "object"
          }
        ],
        "description": "Populated-place details response",
        "example": {
          "data": {
            "country": "United States of America",
            "countryCode": "US",
            "deleted": false,
            "elevationMeters": 10,
            "id": 123214,
            "latitude": 40.67,
            "longitude": -73.94,
            "name": "New York City",
            "population": 8398748,
            "region": "New York",
            "regionCode": "NY",
            "timezone": "America__New_York",
            "type": "CITY",
            "wikiDataId": "Q60"
          }
        },
        "title": "Populated-Place Response",
        "type": "object"
      },
      "PopulatedPlaceSummary": {
        "description": "Minimal populated-place info",
        "example": {
          "country": "United States of America",
          "countryCode": "US",
          "id": 123214,
          "latitude": 40.67,
          "longitude": -73.94,
          "name": "New York City",
          "region": "New York",
          "regionCode": "NY",
          "type": "CITY",
          "wikiDataId": "Q60"
        },
        "properties": {
          "city": {
            "description": "The city name (legacy)",
            "nullable": "true",
            "type": "string"
          },
          "country": {
            "description": "The country name (varies by languageCode)",
            "type": "string"
          },
          "countryCode": {
            "description": "The ISO-3166 country code",
            "type": "string"
          },
          "distance": {
            "description": "Included if this is the result of a distance query",
            "format": "double",
            "type": "number"
          },
          "id": {
            "description": "The place GeoDB native id",
            "format": "int32",
            "type": "integer"
          },
          "latitude": {
            "description": "The place latittude (-90.0 to 90.0)",
            "format": "double",
            "type": "number"
          },
          "longitude": {
            "description": "The place longitude (-180.0 to 180.0)",
            "format": "double",
            "type": "number"
          },
          "name": {
            "description": "The place name (varies by languageCode)",
            "type": "string"
          },
          "population": {
            "description": "The place population",
            "format": "int32",
            "type": "integer"
          },
          "region": {
            "description": "The region name (varies by languageCode)",
            "type": "string"
          },
          "regionCode": {
            "description": "The ISO or FIPS region code",
            "type": "string"
          },
          "regionWdId": {
            "description": "The region Wikidata id",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/PopulatedPlaceType",
            "description": "The place type"
          },
          "wikiDataId": {
            "description": "The place WikiData id",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PopulatedPlaceType": {
        "description": "One of a set of enumerated populated-place types known by the service (currently only level-2 admin divisions and\ncities)\n",
        "enum": [
          "ADM2",
          "CITY",
          "ISLAND"
        ],
        "example": "CITY",
        "type": "string"
      },
      "PopulatedPlacesResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseCollectionResponse"
          },
          {
            "properties": {
              "data": {
                "items": {
                  "$ref": "#/components/schemas/PopulatedPlaceSummary"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ],
        "description": "A list of populated places",
        "example": {
          "data": [
            {
              "country": "Andorra",
              "countryCode": "AD",
              "id": 2987553,
              "latitude": 42.57777778,
              "longitude": 1.61944444,
              "name": "L'Aldosa de Canillo",
              "region": "Canillo",
              "regionCode": 2,
              "type": "CITY",
              "wikiDataId": "Q24371"
            },
            {
              "country": "Andorra",
              "countryCode": "AD",
              "id": 3086756,
              "latitude": 42.57667,
              "longitude": 1.51773,
              "name": "La Cortinada",
              "region": "Ordino",
              "regionCode": 5,
              "type": "CITY",
              "wikiDataId": "Q24486"
            },
            {
              "country": "Andorra",
              "countryCode": "AD",
              "id": 3056764,
              "latitude": 42.4859,
              "longitude": 1.49045,
              "name": "La Margineda",
              "region": "Andorra la Vella",
              "regionCode": 7,
              "type": "CITY",
              "wikiDataId": "Q2536296"
            },
            {
              "country": "Andorra",
              "countryCode": "AD",
              "id": 978,
              "latitude": 42.544354,
              "longitude": 1.515427,
              "name": "La Massana",
              "region": "La Massana",
              "regionCode": 4,
              "type": "CITY",
              "wikiDataId": "Q3820973"
            },
            {
              "country": "Andorra",
              "countryCode": "AD",
              "id": 759,
              "latitude": 42.5,
              "longitude": 1.53333333,
              "name": "Les Escaldes",
              "region": "Escaldes-Engordany",
              "regionCode": 8,
              "type": "CITY",
              "wikiDataId": "Q1050185"
            }
          ],
          "links": [
            {
              "href": "/data/world/v1/geo/cities?offset=0&limit=5",
              "rel": "first"
            },
            {
              "href": "/data/world/v1/geo/cities?offset=0&limit=5",
              "rel": "prev"
            },
            {
              "href": "/data/world/v1/geo/cities?offset=10&limit=5",
              "rel": "next"
            },
            {
              "href": "/data/world/v1/geo/cities?offset=273685&limit=5",
              "rel": "last"
            }
          ],
          "metadata": {
            "currentOffset": 5,
            "totalCount": 273690
          }
        },
        "title": "Populated-Places Response",
        "type": "object"
      },
      "RegionDetails": {
        "description": "Full country region details",
        "example": {
          "capital": "Sacramento",
          "countryCode": "US",
          "fipsCode": 6,
          "isoCode": "CA",
          "name": "California",
          "numCities": 1532,
          "wikiDataId": "Q99"
        },
        "properties": {
          "capital": {
            "description": "The region's capital city (varies by languageCode)",
            "type": "string"
          },
          "countryCode": {
            "description": "An ISO-3166 country code",
            "type": "string"
          },
          "fipsCode": {
            "description": "The FIPS 10-4 region code",
            "type": "string"
          },
          "isoCode": {
            "description": "The ISO region code",
            "type": "string"
          },
          "name": {
            "description": "The region name (varies by languageCode)",
            "type": "string"
          },
          "numCities": {
            "description": "The number of cities in this region",
            "format": "int32",
            "type": "integer"
          },
          "wikiDataId": {
            "description": "The region WikiData id",
            "type": "string"
          }
        },
        "title": "Country Region Details",
        "type": "object"
      },
      "RegionResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "properties": {
              "data": {
                "$ref": "#/components/schemas/RegionDetails"
              }
            },
            "type": "object"
          }
        ],
        "description": "Country region details response",
        "example": {
          "data": {
            "capital": "Sacramento",
            "countryCode": "US",
            "fipsCode": 6,
            "isoCode": "CA",
            "name": "California",
            "numCities": 1532,
            "wikiDataId": "Q99"
          }
        },
        "title": "Country Region Response",
        "type": "object"
      },
      "RegionSummary": {
        "description": "Minimal country region info",
        "example": {
          "countryCode": "US",
          "fipsCode": 6,
          "isoCode": "CA",
          "name": "California",
          "wikiDataId": "Q99"
        },
        "properties": {
          "countryCode": {
            "description": "An ISO-3166 country code",
            "type": "string"
          },
          "fipsCode": {
            "description": "The FIPS 10-4 region code",
            "type": "string"
          },
          "isoCode": {
            "description": "The ISO region code",
            "type": "string"
          },
          "name": {
            "description": "The region name (varies by languageCode)",
            "type": "string"
          },
          "wikiDataId": {
            "description": "The region WikiData id",
            "type": "string"
          }
        },
        "title": "Country Region Summary",
        "type": "object"
      },
      "RegionsResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseCollectionResponse"
          },
          {
            "properties": {
              "data": {
                "description": "A list of RegionSummaries",
                "items": {
                  "$ref": "#/components/schemas/RegionSummary"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ],
        "description": "A list of country regions",
        "example": {
          "data": [
            {
              "countryCode": "US",
              "fipsCode": 48,
              "isoCode": "TX",
              "name": "Texas",
              "wikiDataId": "Q1439"
            },
            {
              "countryCode": "US",
              "fipsCode": 39,
              "isoCode": "OH",
              "name": "Ohio",
              "wikiDataId": "Q1397"
            },
            {
              "countryCode": "US",
              "fipsCode": 31,
              "isoCode": "NE",
              "name": "Nebraska",
              "wikiDataId": "Q1553"
            },
            {
              "countryCode": "US",
              "fipsCode": 50,
              "isoCode": "VT",
              "name": "Vermont",
              "wikiDataId": "Q16551"
            },
            {
              "countryCode": "US",
              "fipsCode": 15,
              "isoCode": "HI",
              "name": "Hawaii",
              "wikiDataId": "Q782"
            }
          ],
          "links": [
            {
              "href": "/data/world/v1/geo/countries/US/regions?offset=0&limit=5",
              "rel": "first"
            },
            {
              "href": "/data/world/v1/geo/countries/US/regions?offset=0&limit=5",
              "rel": "prev"
            },
            {
              "href": "/data/world/v1/geo/countries/US/regions?offset=10&limit=5",
              "rel": "next"
            },
            {
              "href": "/data/world/v1/geo/countries/US/regions?offset=55&limit=5",
              "rel": "last"
            }
          ],
          "metadata": {
            "currentOffset": 5,
            "totalCount": 56
          }
        },
        "title": "Country Regions Response",
        "type": "object"
      },
      "TimeResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "properties": {
              "data": {
                "description": "The time in ISO-8601 format: HHmmss.SSSZ",
                "type": "string"
              }
            },
            "type": "object"
          }
        ],
        "description": "An ISO-8601 time response",
        "example": {
          "data": "19:21:38.796217"
        },
        "title": "Time Response",
        "type": "object"
      },
      "TimeZoneDescriptor": {
        "description": "A time-zone",
        "example": {
          "id": "Africa__Abidjan",
          "name": "Greenwich Mean Time",
          "rawUtcOffsetHours": 0
        },
        "properties": {
          "id": {
            "description": "The time-zone id",
            "type": "string"
          },
          "name": {
            "description": "The time-zone name",
            "type": "string"
          },
          "rawUtcOffsetHours": {
            "description": "The number of hours this time-zone is offset from UTC",
            "format": "int32",
            "type": "integer"
          }
        },
        "title": "Time-Zone",
        "type": "object"
      },
      "TimeZoneResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "properties": {
              "id": {
                "description": "The time-zone id",
                "type": "string"
              },
              "name": {
                "description": "The time-zone name",
                "type": "string"
              },
              "rawUtcOffsetHours": {
                "description": "The number of hours this time-zone is offset from UTC",
                "format": "int32",
                "type": "integer"
              }
            },
            "type": "object"
          }
        ],
        "description": "A time-zone",
        "example": {
          "data": {
            "id": "America__Marigot",
            "name": "Atlantic Standard Time",
            "rawUtcOffsetHours": -4
          }
        },
        "title": "Time-Zone Response",
        "type": "object"
      },
      "TimeZonesResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseCollectionResponse"
          },
          {
            "properties": {
              "data": {
                "items": {
                  "$ref": "#/components/schemas/TimeZoneDescriptor"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ],
        "description": "A list of time-zones",
        "example": {
          "data": [
            {
              "id": "America__Marigot",
              "name": "Atlantic Standard Time",
              "rawUtcOffsetHours": -4
            },
            {
              "id": "Asia__Aqtau",
              "name": "West Kazakhstan Time",
              "rawUtcOffsetHours": 5
            },
            {
              "id": "Pacific__Kwajalein",
              "name": "Marshall Islands Time",
              "rawUtcOffsetHours": 12
            },
            {
              "id": "America__El_Salvador",
              "name": "Central Standard Time",
              "rawUtcOffsetHours": -6
            },
            {
              "id": "Asia__Pontianak",
              "name": "Western Indonesia Time",
              "rawUtcOffsetHours": 7
            }
          ],
          "links": [
            {
              "href": "/data/world/v1/locale/timezones?offset=0&limit=5",
              "rel": "first"
            },
            {
              "href": "/data/world/v1/locale/timezones?offset=0&limit=5",
              "rel": "prev"
            },
            {
              "href": "/data/world/v1/locale/timezones?offset=10&limit=5",
              "rel": "next"
            },
            {
              "href": "/data/world/v1/locale/timezones?offset=595&limit=5",
              "rel": "last"
            }
          ],
          "metadata": {
            "currentOffset": 5,
            "totalCount": 600
          }
        },
        "title": "Time-Zones Response",
        "type": "object"
      }
    },
    "securitySchemes": {
      "UserSecurity": {
        "in": "header",
        "name": "X-RapidAPI-Key",
        "type": "apiKey"
      }
    }
  },
  "security": [
    {
      "UserSecurity": []
    }
  ],
  "tags": [
    {
      "description": "Geo Endpoints",
      "name": "Geo"
    },
    {
      "description": "Locale Endpoints",
      "name": "Locale"
    }
  ]
}