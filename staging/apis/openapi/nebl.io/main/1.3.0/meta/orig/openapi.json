{
  "openapi": "3.0.0",
  "info": {
    "title": "Neblio REST API Suite",
    "description": "APIs for Interacting with NTP1 Tokens & The Neblio Blockchain",
    "version": "1.3.0",
    "x-jentic-source-url": "https://raw.githubusercontent.com/NeblioTeam/neblio-api-swagger-docs/master/swagger.yaml"
  },
  "servers": [
    {
      "url": "https://ntp1node.nebl.io/"
    }
  ],
  "paths": {
    "/ntp1/tokenid/{tokensymbol}": {
      "get": {
        "summary": "Returns the tokenId representing a token",
        "description": "Translates a token symbol to a tokenId if a token exists with that symbol on the network\n",
        "operationId": "getTokenId",
        "parameters": [
          {
            "name": "tokensymbol",
            "in": "path",
            "description": "Token symbol",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "NTP1"
        ],
        "responses": {
          "200": {
            "description": "Object containing the token symbol and ID, if token symbol does not exist on network, empty object is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getTokenIdResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ntp1/broadcast": {
      "post": {
        "summary": "Broadcasts a signed raw transaction to the network",
        "description": "Broadcasts a signed raw transaction to the network. If successful returns the txid of the broadcast trasnaction.\n",
        "operationId": "broadcastTx",
        "requestBody": {
          "$ref": "#/components/requestBodies/broadcastTxRequest"
        },
        "tags": [
          "NTP1"
        ],
        "responses": {
          "200": {
            "description": "An object containing the TXID if the broadcast was successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/broadcastTxResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/ntp1/addressinfo/{address}": {
      "get": {
        "summary": "Information On a Neblio Address",
        "description": "Returns both NEBL and NTP1 token UTXOs held at the given address.\n",
        "operationId": "getAddressInfo",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Neblio Address to get information on.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "NTP1"
        ],
        "responses": {
          "200": {
            "description": "An object with an array of UTXOs for this address",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getAddressInfoResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/ntp1/transactioninfo/{txid}": {
      "get": {
        "summary": "Information On an NTP1 Transaction",
        "description": "Returns detailed information regarding an NTP1 transaction.\n",
        "operationId": "getTransactionInfo",
        "parameters": [
          {
            "name": "txid",
            "in": "path",
            "description": "Neblio txid to get information on.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "NTP1"
        ],
        "responses": {
          "200": {
            "description": "An object represending this transaction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getTransactionInfoResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/ntp1/tokenmetadata/{tokenid}": {
      "get": {
        "summary": "Get Metadata of Token",
        "description": "Returns the metadata associated with a token.\n",
        "operationId": "getTokenMetadata",
        "parameters": [
          {
            "name": "tokenid",
            "in": "path",
            "description": "TokenId to request metadata for",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "verbosity",
            "in": "query",
            "description": "0 (Default) is fastest, 1 contains token stats, 2 contains token holding addresses",
            "schema": {
              "type": "number"
            }
          }
        ],
        "tags": [
          "NTP1"
        ],
        "responses": {
          "200": {
            "description": "An object containing the metadata of a token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getTokenMetadataResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/ntp1/tokenmetadata/{tokenid}/{utxo}": {
      "get": {
        "summary": "Get UTXO Metadata of Token",
        "description": "Returns the metadata associated with a token for that specific utxo instead of the issuance transaction.\n",
        "operationId": "getTokenMetadataOfUtxo",
        "parameters": [
          {
            "name": "tokenid",
            "in": "path",
            "description": "TokenId to request metadata for",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "utxo",
            "in": "path",
            "description": "Specific UTXO to request metadata for",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "verbosity",
            "in": "query",
            "description": "0 (Default) is fastest, 1 contains token stats, 2 contains token holding addresses",
            "schema": {
              "type": "number"
            }
          }
        ],
        "tags": [
          "NTP1"
        ],
        "responses": {
          "200": {
            "description": "An object containing the metadata of a token for a UTXO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getTokenMetadataResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/ntp1/stakeholders/{tokenid}": {
      "get": {
        "summary": "Get Addresses Holding a Token",
        "description": "Returns the the the addresses holding a token and how many tokens are held\n",
        "operationId": "getTokenHolders",
        "parameters": [
          {
            "name": "tokenid",
            "in": "path",
            "description": "TokenId to request metadata for",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "NTP1"
        ],
        "responses": {
          "200": {
            "description": "An object containing all of the addresses holding a token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getTokenHoldersResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/ntp1/issue": {
      "post": {
        "summary": "Builds a transaction that issues a new NTP1 Token",
        "description": "Builds an unsigned raw transaction that issues a new NTP1 token on the Neblio blockchain.\n",
        "operationId": "issueToken",
        "requestBody": {
          "$ref": "#/components/requestBodies/issueTokenRequest"
        },
        "tags": [
          "NTP1"
        ],
        "responses": {
          "200": {
            "description": "An object representing the token created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/issueTokenResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/ntp1/sendtoken": {
      "post": {
        "summary": "Builds a transaction that sends an NTP1 Token",
        "description": "Builds an unsigned raw transaction that sends an NTP1 token on the Neblio blockchain.\n",
        "operationId": "sendToken",
        "requestBody": {
          "$ref": "#/components/requestBodies/sendTokenRequest"
        },
        "tags": [
          "NTP1"
        ],
        "responses": {
          "200": {
            "description": "An object representing the tx to send the token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sendTokenResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/ntp1/burntoken": {
      "post": {
        "summary": "Builds a transaction that burns an NTP1 Token",
        "description": "Builds an unsigned raw transaction that burns an NTP1 token on the Neblio blockchain.\n",
        "operationId": "burnToken",
        "requestBody": {
          "$ref": "#/components/requestBodies/burnTokenRequest"
        },
        "tags": [
          "NTP1"
        ],
        "responses": {
          "200": {
            "description": "An object representing the tx to burn the token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/burnTokenResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/ins/tx/send": {
      "post": {
        "summary": "Broadcasts a signed raw transaction to the network (not NTP1 specific)",
        "description": "Broadcasts a signed raw transaction to the network. If successful returns the txid of the broadcast trasnaction.\n",
        "operationId": "sendTx",
        "requestBody": {
          "$ref": "#/components/requestBodies/sendTxRequest"
        },
        "tags": [
          "Insight"
        ],
        "responses": {
          "200": {
            "description": "An object containing the TXID if the broadcast was successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/broadcastTxResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/ins/block/{blockhash}": {
      "get": {
        "summary": "Returns information regarding a Neblio block",
        "description": "Returns blockchain data for a given block based upon the block hash",
        "operationId": "getBlock",
        "parameters": [
          {
            "name": "blockhash",
            "in": "path",
            "description": "Block Hash",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Insight"
        ],
        "responses": {
          "200": {
            "description": "Object containing all information on a blockchain block",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getBlockResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ins/block-index/{blockindex}": {
      "get": {
        "summary": "Returns block hash of block",
        "description": "Returns the block hash of a block at a given block index",
        "operationId": "getBlockIndex",
        "parameters": [
          {
            "name": "blockindex",
            "in": "path",
            "description": "Block Index",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "tags": [
          "Insight"
        ],
        "responses": {
          "200": {
            "description": "Object containing block hash",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getBlockIndexResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ins/tx/{txid}": {
      "get": {
        "summary": "Returns transaction object",
        "description": "Returns NEBL transaction object representing a NEBL transaction",
        "operationId": "getTx",
        "parameters": [
          {
            "name": "txid",
            "in": "path",
            "description": "Transaction ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Insight"
        ],
        "responses": {
          "200": {
            "description": "Object containing transaction info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getTxResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ins/rawtx/{txid}": {
      "get": {
        "summary": "Returns raw transaction hex",
        "description": "Returns raw transaction hex representing a NEBL transaction",
        "operationId": "getRawTx",
        "parameters": [
          {
            "name": "txid",
            "in": "path",
            "description": "Transaction ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Insight"
        ],
        "responses": {
          "200": {
            "description": "Object containing raw hex of transaction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getRawTxResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ins/addr/{address}": {
      "get": {
        "summary": "Returns address object",
        "description": "Returns NEBL address object containing information on a specific address",
        "operationId": "getAddress",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Address",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Insight"
        ],
        "responses": {
          "200": {
            "description": "Object containing address info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getAddressResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ins/addr/{address}/balance": {
      "get": {
        "summary": "Returns address balance in sats",
        "description": "Returns NEBL address balance in satoshis",
        "operationId": "getAddressBalance",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Address",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Insight"
        ],
        "responses": {
          "200": {
            "description": "Address balance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getAddressBalanceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ins/addr/{address}/unconfirmedBalance": {
      "get": {
        "summary": "Returns address unconfirmed balance in sats",
        "description": "Returns NEBL address unconfirmed balance in satoshis",
        "operationId": "getAddressUnconfirmedBalance",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Address",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Insight"
        ],
        "responses": {
          "200": {
            "description": "Address unconfirmed balance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getAddressUnconfirmedBalanceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ins/addr/{address}/totalReceived": {
      "get": {
        "summary": "Returns total received by address in sats",
        "description": "Returns total NEBL received by address in satoshis",
        "operationId": "getAddressTotalReceived",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Address",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Insight"
        ],
        "responses": {
          "200": {
            "description": "Total received by address",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getAddressTotalReceivedResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ins/addr/{address}/utxo": {
      "get": {
        "summary": "Returns all UTXOs at a given address",
        "description": "Returns information on each Unspent Transaction Output contained at an address",
        "operationId": "getAddressUtxos",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Address",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Insight"
        ],
        "responses": {
          "200": {
            "description": "UTXOs at an address",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getAddressUtxosResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ins/addr/{address}/totalSent": {
      "get": {
        "summary": "Returns total sent by address in sats",
        "description": "Returns total NEBL sent by address in satoshis",
        "operationId": "getAddressTotalSent",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Address",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Insight"
        ],
        "responses": {
          "200": {
            "description": "Total sent by address",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getAddressTotalSentResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ins/txs": {
      "get": {
        "summary": "Get transactions by block or address",
        "description": "Returns all transactions by block or address",
        "operationId": "getTxs",
        "parameters": [
          {
            "name": "address",
            "in": "query",
            "description": "Address",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "block",
            "in": "query",
            "description": "Block Hash",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNum",
            "in": "query",
            "description": "Page number to display",
            "required": false,
            "schema": {
              "type": "number"
            }
          }
        ],
        "tags": [
          "Insight"
        ],
        "responses": {
          "200": {
            "description": "List of transactions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getTxsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ins/sync": {
      "get": {
        "summary": "Get node sync status",
        "description": "Returns information on the node's sync progress",
        "operationId": "getSync",
        "tags": [
          "Insight"
        ],
        "responses": {
          "200": {
            "description": "Sync Info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getSyncResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ins/status": {
      "get": {
        "summary": "Utility API for calling several blockchain node functions",
        "description": "Utility API for calling several blockchain node functions - getInfo, getDifficulty, getBestBlockHash, getLastBlockHash",
        "operationId": "getStatus",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Function to call, getInfo, getDifficulty, getBestBlockHash, or getLastBlockHash",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Insight"
        ],
        "responses": {
          "200": {
            "description": "Function Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getStatusResponse"
                }
              }
            }
          }
        }
      }
    },
    "/testnet/ins/tx/send": {
      "post": {
        "summary": "Broadcasts a signed raw transaction to the network (not NTP1 specific)",
        "description": "Broadcasts a signed raw transaction to the network. If successful returns the txid of the broadcast trasnaction.\n",
        "operationId": "testnet_sendTx",
        "requestBody": {
          "$ref": "#/components/requestBodies/sendTxRequest"
        },
        "tags": [
          "Testnet-Insight"
        ],
        "responses": {
          "200": {
            "description": "An object containing the TXID if the broadcast was successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/broadcastTxResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/testnet/ins/block/{blockhash}": {
      "get": {
        "summary": "Returns information regarding a Neblio block",
        "description": "Returns blockchain data for a given block based upon the block hash",
        "operationId": "testnet_getBlock",
        "parameters": [
          {
            "name": "blockhash",
            "in": "path",
            "description": "Block Hash",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Testnet-Insight"
        ],
        "responses": {
          "200": {
            "description": "Object containing all information on a blockchain block",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getBlockResponse"
                }
              }
            }
          }
        }
      }
    },
    "/testnet/ins/block-index/{blockindex}": {
      "get": {
        "summary": "Returns block hash of block",
        "description": "Returns the block hash of a block at a given block index",
        "operationId": "testnet_getBlockIndex",
        "parameters": [
          {
            "name": "blockindex",
            "in": "path",
            "description": "Block Index",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "tags": [
          "Testnet-Insight"
        ],
        "responses": {
          "200": {
            "description": "Object containing block hash",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getBlockIndexResponse"
                }
              }
            }
          }
        }
      }
    },
    "/testnet/ins/tx/{txid}": {
      "get": {
        "summary": "Returns transaction object",
        "description": "Returns NEBL transaction object representing a NEBL transaction",
        "operationId": "testnet_getTx",
        "parameters": [
          {
            "name": "txid",
            "in": "path",
            "description": "Transaction ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Testnet-Insight"
        ],
        "responses": {
          "200": {
            "description": "Object containing transaction info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getTxResponse"
                }
              }
            }
          }
        }
      }
    },
    "/testnet/ins/rawtx/{txid}": {
      "get": {
        "summary": "Returns raw transaction hex",
        "description": "Returns raw transaction hex representing a NEBL transaction",
        "operationId": "testnet_getRawTx",
        "parameters": [
          {
            "name": "txid",
            "in": "path",
            "description": "Transaction ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Testnet-Insight"
        ],
        "responses": {
          "200": {
            "description": "Object containing raw hex of transaction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getRawTxResponse"
                }
              }
            }
          }
        }
      }
    },
    "/testnet/ins/addr/{address}": {
      "get": {
        "summary": "Returns address object",
        "description": "Returns NEBL address object containing information on a specific address",
        "operationId": "testnet_getAddress",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Address",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Testnet-Insight"
        ],
        "responses": {
          "200": {
            "description": "Object containing address info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getAddressResponse"
                }
              }
            }
          }
        }
      }
    },
    "/testnet/ins/addr/{address}/balance": {
      "get": {
        "summary": "Returns address balance in sats",
        "description": "Returns NEBL address balance in satoshis",
        "operationId": "testnet_getAddressBalance",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Address",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Testnet-Insight"
        ],
        "responses": {
          "200": {
            "description": "Address balance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getAddressBalanceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/testnet/ins/addr/{address}/unconfirmedBalance": {
      "get": {
        "summary": "Returns address unconfirmed balance in sats",
        "description": "Returns NEBL address unconfirmed balance in satoshis",
        "operationId": "testnet_getAddressUnconfirmedBalance",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Address",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Testnet-Insight"
        ],
        "responses": {
          "200": {
            "description": "Address unconfirmed balance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getAddressUnconfirmedBalanceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/testnet/ins/addr/{address}/totalReceived": {
      "get": {
        "summary": "Returns total received by address in sats",
        "description": "Returns total NEBL received by address in satoshis",
        "operationId": "testnet_getAddressTotalReceived",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Address",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Testnet-Insight"
        ],
        "responses": {
          "200": {
            "description": "Total received by address",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getAddressTotalReceivedResponse"
                }
              }
            }
          }
        }
      }
    },
    "/testnet/ins/addr/{address}/utxo": {
      "get": {
        "summary": "Returns all UTXOs at a given address",
        "description": "Returns information on each Unspent Transaction Output contained at an address",
        "operationId": "testnet_getAddressUtxos",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Address",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Testnet-Insight"
        ],
        "responses": {
          "200": {
            "description": "UTXOs at an address",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getAddressUtxosResponse"
                }
              }
            }
          }
        }
      }
    },
    "/testnet/ins/addr/{address}/totalSent": {
      "get": {
        "summary": "Returns total sent by address in sats",
        "description": "Returns total NEBL sent by address in satoshis",
        "operationId": "testnet_getAddressTotalSent",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Address",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Testnet-Insight"
        ],
        "responses": {
          "200": {
            "description": "Total sent by address",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getAddressTotalSentResponse"
                }
              }
            }
          }
        }
      }
    },
    "/testnet/ins/txs": {
      "get": {
        "summary": "Get transactions by block or address",
        "description": "Returns all transactions by block or address",
        "operationId": "testnet_getTxs",
        "parameters": [
          {
            "name": "address",
            "in": "query",
            "description": "Address",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "block",
            "in": "query",
            "description": "Block Hash",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNum",
            "in": "query",
            "description": "Page number to display",
            "required": false,
            "schema": {
              "type": "number"
            }
          }
        ],
        "tags": [
          "Testnet-Insight"
        ],
        "responses": {
          "200": {
            "description": "List of transactions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getTxsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/testnet/ins/sync": {
      "get": {
        "summary": "Get node sync status",
        "description": "Returns information on the node's sync progress",
        "operationId": "testnet_getSync",
        "tags": [
          "Testnet-Insight"
        ],
        "responses": {
          "200": {
            "description": "Sync Info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getSyncResponse"
                }
              }
            }
          }
        }
      }
    },
    "/testnet/ins/status": {
      "get": {
        "summary": "Utility API for calling several blockchain node functions",
        "description": "Utility API for calling several blockchain node functions - getInfo, getDifficulty, getBestBlockHash, getLastBlockHash",
        "operationId": "testnet_getStatus",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Function to call, getInfo, getDifficulty, getBestBlockHash, or getLastBlockHash",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Testnet-Insight"
        ],
        "responses": {
          "200": {
            "description": "Function Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getStatusResponse"
                }
              }
            }
          }
        }
      }
    },
    "/testnet/ntp1/tokenid/{tokensymbol}": {
      "get": {
        "summary": "Returns the tokenId representing a token",
        "description": "Translates a token symbol to a tokenId if a token exists with that symbol on the network\n",
        "operationId": "testnet_getTokenId",
        "parameters": [
          {
            "name": "tokensymbol",
            "in": "path",
            "description": "Token symbol",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Testnet-NTP1"
        ],
        "responses": {
          "200": {
            "description": "Object containing the token symbol and ID, if token symbol does not exist on network, empty object is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getTokenIdResponse"
                }
              }
            }
          }
        }
      }
    },
    "/testnet/ntp1/broadcast": {
      "post": {
        "summary": "Broadcasts a signed raw transaction to the network",
        "description": "Broadcasts a signed raw transaction to the network. If successful returns the txid of the broadcast trasnaction.\n",
        "operationId": "testnet_broadcastTx",
        "requestBody": {
          "$ref": "#/components/requestBodies/broadcastTxRequest"
        },
        "tags": [
          "Testnet-NTP1"
        ],
        "responses": {
          "200": {
            "description": "An object containing the TXID if the broadcast was successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/broadcastTxResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/testnet/ntp1/addressinfo/{address}": {
      "get": {
        "summary": "Information On a Neblio Address",
        "description": "Returns both NEBL and NTP1 token UTXOs held at the given address.\n",
        "operationId": "testnet_getAddressInfo",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Neblio Address to get information on.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Testnet-NTP1"
        ],
        "responses": {
          "200": {
            "description": "An object with an array of UTXOs for this address",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getAddressInfoResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/testnet/ntp1/transactioninfo/{txid}": {
      "get": {
        "summary": "Information On an NTP1 Transaction",
        "description": "Returns detailed information regarding an NTP1 transaction.\n",
        "operationId": "testnet_getTransactionInfo",
        "parameters": [
          {
            "name": "txid",
            "in": "path",
            "description": "Neblio txid to get information on.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Testnet-NTP1"
        ],
        "responses": {
          "200": {
            "description": "An object represending this transaction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getTransactionInfoResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/testnet/ntp1/tokenmetadata/{tokenid}": {
      "get": {
        "summary": "Get Metadata of Token",
        "description": "Returns the metadata associated with a token.\n",
        "operationId": "testnet_getTokenMetadata",
        "parameters": [
          {
            "name": "tokenid",
            "in": "path",
            "description": "TokenId to request metadata for",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "verbosity",
            "in": "query",
            "description": "0 (Default) is fastest, 1 contains token stats, 2 contains token holding addresses",
            "schema": {
              "type": "number"
            }
          }
        ],
        "tags": [
          "Testnet-NTP1"
        ],
        "responses": {
          "200": {
            "description": "An object containing the metadata of a token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getTokenMetadataResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/testnet/ntp1/tokenmetadata/{tokenid}/{utxo}": {
      "get": {
        "summary": "Get UTXO Metadata of Token",
        "description": "Returns the metadata associated with a token for that specific utxo instead of the issuance transaction.\n",
        "operationId": "testnet_getTokenMetadataOfUtxo",
        "parameters": [
          {
            "name": "tokenid",
            "in": "path",
            "description": "TokenId to request metadata for",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "utxo",
            "in": "path",
            "description": "Specific UTXO to request metadata for",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "verbosity",
            "in": "query",
            "description": "0 (Default) is fastest, 1 contains token stats, 2 contains token holding addresses",
            "schema": {
              "type": "number"
            }
          }
        ],
        "tags": [
          "Testnet-NTP1"
        ],
        "responses": {
          "200": {
            "description": "An object containing the metadata of a token for a UTXO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getTokenMetadataResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/testnet/ntp1/stakeholders/{tokenid}": {
      "get": {
        "summary": "Get Addresses Holding a Token",
        "description": "Returns the the the addresses holding a token and how many tokens are held\n",
        "operationId": "testnet_getTokenHolders",
        "parameters": [
          {
            "name": "tokenid",
            "in": "path",
            "description": "TokenId to request metadata for",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Testnet-NTP1"
        ],
        "responses": {
          "200": {
            "description": "An object containing all of the addresses holding a token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getTokenHoldersResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/testnet/ntp1/issue": {
      "post": {
        "summary": "Builds a transaction that issues a new NTP1 Token",
        "description": "Builds an unsigned raw transaction that issues a new NTP1 token on the Neblio blockchain.\n",
        "operationId": "testnet_issueToken",
        "requestBody": {
          "$ref": "#/components/requestBodies/issueTokenRequest"
        },
        "tags": [
          "Testnet-NTP1"
        ],
        "responses": {
          "200": {
            "description": "An object representing the token created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/issueTokenResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/testnet/ntp1/sendtoken": {
      "post": {
        "summary": "Builds a transaction that sends an NTP1 Token",
        "description": "Builds an unsigned raw transaction that sends an NTP1 token on the Neblio blockchain.\n",
        "operationId": "testnet_sendToken",
        "requestBody": {
          "$ref": "#/components/requestBodies/sendTokenRequest"
        },
        "tags": [
          "Testnet-NTP1"
        ],
        "responses": {
          "200": {
            "description": "An object representing the tx to send the token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sendTokenResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/testnet/ntp1/burntoken": {
      "post": {
        "summary": "Builds a transaction that burns an NTP1 Token",
        "description": "Builds an unsigned raw transaction that burns an NTP1 token on the Neblio blockchain.\n",
        "operationId": "testnet_burnToken",
        "requestBody": {
          "$ref": "#/components/requestBodies/burnTokenRequest"
        },
        "tags": [
          "Testnet-NTP1"
        ],
        "responses": {
          "200": {
            "description": "An object representing the tx to burn the token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/burnTokenResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/testnet/faucet": {
      "get": {
        "summary": "Withdraws testnet NEBL to the specified address",
        "description": "Withdraw testnet NEBL to your Neblio Testnet address. By default amount is 1500000000 or 15 NEBL and has a max of 50 NEBL. Only 2 withdrawals allowed per 24 hour period.\n",
        "operationId": "testnet_getFaucet",
        "parameters": [
          {
            "name": "address",
            "in": "query",
            "description": "Your Neblio Testnet Address",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "amount",
            "in": "query",
            "description": "Amount of NEBL to withdrawal in satoshis",
            "required": false,
            "schema": {
              "type": "number"
            }
          }
        ],
        "tags": [
          "Testnet-Faucet"
        ],
        "responses": {
          "200": {
            "description": "Object containing the transaction ID of the withdrawal.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getFaucetResponse"
                }
              }
            }
          }
        }
      }
    },
    "/": {
      "post": {
        "security": [
          {
            "rpcAuth": []
          }
        ],
        "summary": "Send a JSON-RPC call to a localhost neblio-Qt or nebliod node",
        "description": "Call any Neblio RPC command from the Neblio API libraries. Useful for signing transactions with a local node and other functions. Will not work from a browser due to CORS restrictions. Requires a node to be running locally at 127.0.0.1",
        "operationId": "json_rpc",
        "servers": [
          {
            "url": "http://127.0.0.1:6326",
            "description": "Communicate with locally running Neblio node on Mainnet"
          },
          {
            "url": "http://127.0.0.1:16326",
            "description": "Communicate with locally running Neblio node on Testnet"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/rpcRequest"
              }
            }
          }
        },
        "tags": [
          "JSON-RPC"
        ],
        "responses": {
          "200": {
            "description": "Object containing the JSON response from the Neblio node.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication information is missing or invalid",
            "headers": {
              "WWW_Authenticate": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "rpcAuth": {
        "type": "http",
        "scheme": "basic"
      }
    },
    "requestBodies": {
      "sendTokenRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/sendTokenRequest"
            }
          }
        },
        "description": "Object representing the token to be sent",
        "required": true
      },
      "broadcastTxRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/broadcastTxRequest"
            }
          }
        },
        "description": "Object representing a transaction to broadcast",
        "required": true
      },
      "issueTokenRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/issueTokenRequest"
            }
          }
        },
        "description": "Object representing the token to be created",
        "required": true
      },
      "burnTokenRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/burnTokenRequest"
            }
          }
        },
        "description": "Object representing the token to be burned",
        "required": true
      },
      "sendTxRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/sendTxRequest"
            }
          }
        },
        "description": "Object representing a transaction to broadcast",
        "required": true
      }
    },
    "schemas": {
      "getTokenIdResponse": {
        "type": "object",
        "properties": {
          "tokenId": {
            "type": "string",
            "description": "Unique ID of the token"
          },
          "tokenName": {
            "type": "string",
            "description": "String representing the token Symbol"
          }
        }
      },
      "broadcastTxRequest": {
        "type": "object",
        "required": [
          "txHex"
        ],
        "properties": {
          "txHex": {
            "type": "string",
            "description": "Signed raw tx hex to broadcast"
          }
        }
      },
      "broadcastTxResponse": {
        "type": "object",
        "properties": {
          "txid": {
            "type": "string",
            "description": "Txid of successfully broadcasted transaction"
          }
        }
      },
      "getAddressInfoResponse": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "The Neblio Address"
          },
          "utxos": {
            "type": "array",
            "description": "Array of UTXOs held at this address.",
            "items": {
              "type": "object",
              "properties": {
                "index": {
                  "type": "number",
                  "description": "Index of the UTXO at this address"
                },
                "txid": {
                  "type": "string",
                  "description": "Txid of this UTXO"
                },
                "blockheight": {
                  "type": "number",
                  "description": "Blockheight of the UTXO"
                },
                "blocktime": {
                  "type": "number",
                  "description": "Blocktime of the UTXO"
                },
                "scriptPubKey": {
                  "type": "object",
                  "description": "Object representing the scruptPubKey of the UTXO"
                },
                "used": {
                  "type": "boolean",
                  "description": "Whether the UTXO has been used"
                },
                "value": {
                  "type": "number",
                  "description": "Value of the UTXO in NEBL satoshi"
                },
                "tokens": {
                  "type": "array",
                  "description": "Array of NTP1 tokens in this UTXO.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "tokenId": {
                        "type": "string",
                        "description": "Unique NTP1 identifier for this token"
                      },
                      "amount": {
                        "type": "number",
                        "description": "Number of Tokens"
                      },
                      "issueTxid": {
                        "type": "string",
                        "description": "TXID the token originally was issued in"
                      },
                      "divisibility": {
                        "type": "number",
                        "description": "Decimal places the token is divisible to"
                      },
                      "lockStatus": {
                        "type": "boolean",
                        "description": "Whether the token is locked, preventing more from being issued"
                      },
                      "aggregationPolicy": {
                        "type": "string",
                        "description": "Whether the tokens can be aggregated together"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "getTransactionInfoResponse": {
        "type": "object",
        "properties": {
          "hex": {
            "type": "string",
            "description": "Transaction in raw hex"
          },
          "txid": {
            "type": "string",
            "description": "TXID of transaction"
          },
          "version": {
            "type": "number",
            "description": "Transaction version"
          },
          "locktime": {
            "type": "number",
            "description": "Transaction locktime"
          },
          "vin": {
            "type": "array",
            "description": "Array of transaction inputs",
            "items": {
              "type": "object",
              "properties": {
                "txid": {
                  "type": "string",
                  "description": "TXID of the input"
                },
                "vout": {
                  "type": "number",
                  "description": "output index"
                },
                "scriptSig": {
                  "type": "object",
                  "properties": {
                    "asm": {
                      "type": "string"
                    },
                    "hex": {
                      "type": "string"
                    }
                  }
                },
                "sequence": {
                  "type": "number"
                },
                "previousOutput": {
                  "type": "object",
                  "properties": {
                    "asm": {
                      "type": "string"
                    },
                    "hex": {
                      "type": "string"
                    },
                    "reqSigs": {
                      "type": "number"
                    },
                    "type": {
                      "type": "string"
                    },
                    "addresses": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                },
                "tokens": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "tokenId": {
                        "type": "string",
                        "description": "ID of the token"
                      },
                      "amount": {
                        "type": "number",
                        "description": "Number of tokens"
                      },
                      "issueTxid": {
                        "type": "string",
                        "description": "TXID the token was issued in"
                      },
                      "divisibility": {
                        "type": "number",
                        "description": "Decimal places the token is divisible to"
                      },
                      "lockStatus": {
                        "type": "boolean",
                        "description": "Whether issuance of more tokens is locked"
                      },
                      "aggregationPolicy": {
                        "type": "string",
                        "description": "Whether the tokens are aggregatable"
                      }
                    }
                  }
                },
                "value": {
                  "type": "number",
                  "description": "Value of input in NEBL satoshi"
                }
              }
            }
          },
          "vout": {
            "type": "array",
            "description": "Array of transaction outputs",
            "items": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "number",
                  "description": "Value of the output in NEBL satoshi"
                },
                "n": {
                  "type": "number",
                  "description": "Output index"
                },
                "scriptPubKey": {
                  "type": "object",
                  "properties": {
                    "asm": {
                      "type": "string"
                    },
                    "hex": {
                      "type": "string"
                    },
                    "reqSigs": {
                      "type": "number"
                    },
                    "type": {
                      "type": "string"
                    },
                    "addresses": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                },
                "tokens": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "tokenId": {
                        "type": "string",
                        "description": "ID of the token"
                      },
                      "amount": {
                        "type": "number",
                        "description": "Number of tokens"
                      },
                      "issueTxid": {
                        "type": "string",
                        "description": "TXID the token was issued in"
                      },
                      "divisibility": {
                        "type": "number",
                        "description": "Decimal places the token is divisible to"
                      },
                      "lockStatus": {
                        "type": "boolean",
                        "description": "Whether issuance of more tokens is locked"
                      },
                      "aggregationPolicy": {
                        "type": "string",
                        "description": "Whether the tokens are aggregatable"
                      }
                    }
                  }
                },
                "used": {
                  "type": "boolean",
                  "description": "Whether this output has now been used"
                },
                "blockheight": {
                  "type": "number",
                  "description": "Blockheight of this transaction"
                },
                "usedBlockheight": {
                  "type": "number",
                  "description": "Blockheight this output was used in"
                },
                "usedTxid": {
                  "type": "string",
                  "description": "TXID this output was used in"
                }
              }
            }
          },
          "blocktime": {
            "type": "number",
            "description": "Block time of this transaction"
          },
          "blockheight": {
            "type": "number",
            "description": "Block height of this transaction"
          },
          "totalsent": {
            "type": "number",
            "description": "Total NEBL sent in this transaction in satoshis"
          },
          "fee": {
            "type": "number",
            "description": "Total NEBL used as fee for this transcation in satoshis"
          },
          "blockhash": {
            "type": "string",
            "description": "Hash of the block this transaction is in"
          },
          "time": {
            "type": "number",
            "description": "Transaction time"
          },
          "confirmations": {
            "type": "number",
            "description": "Number of transaction confirmations"
          }
        }
      },
      "getTokenMetadataResponse": {
        "type": "object",
        "properties": {
          "tokenId": {
            "type": "string",
            "description": "ID of the token"
          },
          "someUtxo": {
            "type": "string",
            "description": "Example UTXO containing this token."
          },
          "divisibility": {
            "type": "number",
            "description": "Decimal places the token is divisible to"
          },
          "lockStatus": {
            "type": "boolean",
            "description": "Whether issuance of more tokens is locked"
          },
          "aggregationPolicy": {
            "type": "string",
            "description": "Whether the tokens are aggregatable"
          },
          "initialIssuanceAmount": {
            "type": "number",
            "description": "Total tokens issued in initial issuance"
          },
          "totalSupply": {
            "type": "number",
            "description": "Total number of tokens in supply"
          },
          "numOfHolders": {
            "type": "number",
            "description": "Total number of addresses this token is held at"
          },
          "numOfTransfers": {
            "type": "number",
            "description": "Total number of transactions of this token"
          },
          "numOfIssuance": {
            "type": "number",
            "description": "Total number of times this token has been issued"
          },
          "numOfBurns": {
            "type": "number",
            "description": "Number of times tokens have been burned"
          },
          "firstBlock": {
            "type": "number",
            "description": "Block number token was issued in"
          },
          "issuanceTxid": {
            "type": "string",
            "description": "TXID the token was issued with"
          },
          "issueAddress": {
            "type": "string",
            "description": "Address that issued the tokens"
          },
          "metadataOfIssuance": {
            "type": "object",
            "description": "Metadata set at issuance",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "tokenName": {
                    "type": "string",
                    "description": "Token symbol"
                  },
                  "issuer": {
                    "type": "string",
                    "description": "Name of token issuer"
                  },
                  "description": {
                    "type": "string",
                    "description": "Token description"
                  },
                  "userData": {
                    "type": "object",
                    "description": "Metadata set by user on token",
                    "properties": {
                      "meta": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "key": {
                              "type": "string"
                            },
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "metadataOfUtxo": {
            "type": "object",
            "description": "Metadata set for UTXO",
            "properties": {
              "userData": {
                "type": "object",
                "description": "Metadata set by user on token for UTXO",
                "properties": {
                  "meta": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "getTokenHoldersResponse": {
        "type": "object",
        "properties": {
          "tokenId": {
            "type": "string",
            "description": "TokenId of the token"
          },
          "holders": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string"
                },
                "amount": {
                  "type": "number"
                }
              }
            }
          },
          "divibility": {
            "type": "number",
            "description": "How many decimal points the token is divisble to"
          },
          "lockStatus": {
            "type": "boolean",
            "description": "Whether new issuances of this token are locked"
          },
          "aggregationPolicy": {
            "type": "string",
            "description": "Whether the tokesn are aggregatable"
          },
          "someUtxo": {
            "type": "string",
            "description": "A UTXO of this token"
          }
        }
      },
      "issueTokenRequest": {
        "type": "object",
        "required": [
          "issueAddress",
          "amount",
          "divisibility",
          "fee",
          "reissuable",
          "transfer"
        ],
        "properties": {
          "issueAddress": {
            "type": "string",
            "description": "Address issuing the token"
          },
          "amount": {
            "type": "number",
            "description": "Number of tokens to issue"
          },
          "divisibility": {
            "type": "number",
            "description": "Number of decimal places the token should be divisble by (0-7)"
          },
          "fee": {
            "type": "number",
            "description": "Fee in satoshi to include in the issuance transaction min 1000000000 (10 NEBL)"
          },
          "reissuable": {
            "type": "boolean",
            "description": "whether the token should be reissuable"
          },
          "flags": {
            "type": "object",
            "description": "Object representing flags that potentialy modify this transaction",
            "properties": {
              "splitChange": {
                "type": "boolean",
                "description": "If true change will be split into 2 outputs, one for NEBL change and one for NTP1 change (recommended)"
              }
            }
          },
          "transfer": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string",
                  "description": "Address to send the amount of issued tokens to"
                },
                "amount": {
                  "type": "number"
                }
              }
            }
          },
          "metadata": {
            "type": "object",
            "description": "Object representing all metadata at token issuance",
            "properties": {
              "tokenName": {
                "type": "string",
                "description": "Token Symbol it will be identified by (ex. NIBBL)"
              },
              "issuer": {
                "type": "string",
                "description": "Name of token issuer"
              },
              "description": {
                "type": "string",
                "description": "Long name or description of token (ex. Nibble)"
              },
              "urls": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the URL"
                    },
                    "url": {
                      "type": "string",
                      "description": "Actual URL"
                    },
                    "mimeType": {
                      "type": "string",
                      "description": "mimeType of URL content"
                    },
                    "dataHash": {
                      "type": "string",
                      "description": "Hash of data at the URL, used for verification"
                    }
                  }
                }
              },
              "userData": {
                "type": "object",
                "description": "Metadata set by user on token",
                "properties": {
                  "meta": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "type": "string"
                        },
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "encryptions": {
                "type": "array",
                "description": "Array of encryption instruction objects for encrypting userData",
                "items": {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string",
                      "description": "userData key to encrypt"
                    },
                    "pubkey": {
                      "type": "string",
                      "description": "RSA public key used for encryption"
                    },
                    "format": {
                      "type": "string",
                      "description": "key format (pem or der)"
                    },
                    "type": {
                      "type": "string",
                      "description": "pkcs1 or pkcs8"
                    }
                  }
                }
              },
              "rules": {
                "type": "object",
                "description": "Object describing token rules",
                "properties": {
                  "fees": {
                    "type": "object",
                    "properties": {
                      "items": {
                        "type": "array",
                        "description": "Array of objects describing fee rules",
                        "items": {
                          "type": "object",
                          "properties": {
                            "address": {
                              "type": "string",
                              "description": "Address fee is auto sent to"
                            },
                            "tokenId": {
                              "type": "string",
                              "description": "How fee should be paid, either with a tokenId, or with NEBL if null"
                            },
                            "value": {
                              "type": "string",
                              "description": "Amount of NTP1 token, or NEBL (in satoshi) to pay as fee"
                            }
                          }
                        }
                      },
                      "locked": {
                        "type": "boolean",
                        "description": "Whether this rule can be modified in future transactions"
                      }
                    }
                  },
                  "holders": {
                    "type": "array",
                    "description": "Array of objects describing what addresses can hold the token",
                    "items": {
                      "type": "object",
                      "properties": {
                        "address": {
                          "type": "string",
                          "description": "Address that can hold the token"
                        },
                        "locked": {
                          "type": "boolean",
                          "description": "Whether this rule can be modified in future transactions"
                        }
                      }
                    }
                  },
                  "expiration": {
                    "type": "object",
                    "description": "Object describing expiration rules of the token",
                    "properties": {
                      "validUntil": {
                        "type": "number",
                        "description": "Blockheight at wh"
                      },
                      "locked": {
                        "type": "boolean",
                        "description": "Whether this rule can be modified in future transactions"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "issueTokenResponse": {
        "type": "object",
        "properties": {
          "tokenId": {
            "type": "string",
            "description": "TokenId of the to be issued token"
          },
          "txHex": {
            "type": "string",
            "description": "Unsigned, raw transaction hex of the transaction to issue the token"
          }
        }
      },
      "sendTokenRequest": {
        "type": "object",
        "required": [
          "fee",
          "to"
        ],
        "properties": {
          "fee": {
            "type": "number",
            "description": "Fee in satoshi to include in the issuance transaction min 10000 (0.0001 NEBL)"
          },
          "from": {
            "type": "array",
            "description": "Array of addresses to send the token from",
            "items": {
              "type": "string"
            }
          },
          "sendutxo": {
            "type": "array",
            "description": "Array of UTXOs to send the token from",
            "items": {
              "type": "string"
            }
          },
          "to": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string",
                  "description": "Address to transfer tokens to"
                },
                "amount": {
                  "type": "number",
                  "description": "Number of tokens to send"
                },
                "tokenId": {
                  "type": "string",
                  "description": "ID of token we are sending"
                }
              }
            }
          },
          "flags": {
            "type": "object",
            "description": "Object representing flags that potentialy modify this transaction",
            "properties": {
              "splitChange": {
                "type": "boolean",
                "description": "If true change will be split into 2 outputs, one for NEBL change and one for NTP1 change (recommended)"
              }
            }
          },
          "metadata": {
            "type": "object",
            "description": "Object representing all metadata at token issuance",
            "properties": {
              "tokenName": {
                "type": "string",
                "description": "Token Symbol it will be identified by (ex. NIBBL)"
              },
              "issuer": {
                "type": "string",
                "description": "Name of token issuer"
              },
              "description": {
                "type": "string",
                "description": "Long name or description of token (ex. Nibble)"
              },
              "urls": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the URL"
                    },
                    "url": {
                      "type": "string",
                      "description": "Actual URL"
                    },
                    "mimeType": {
                      "type": "string",
                      "description": "mimeType of URL content"
                    },
                    "dataHash": {
                      "type": "string",
                      "description": "Hash of data at the URL, used for verification"
                    }
                  }
                }
              },
              "userData": {
                "type": "object",
                "description": "Metadata set by user on token",
                "properties": {
                  "meta": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "type": "string"
                        },
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "encryptions": {
                "type": "array",
                "description": "Array of encryption instruction objects for encrypting userData",
                "items": {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string",
                      "description": "userData key to encrypt"
                    },
                    "pubkey": {
                      "type": "string",
                      "description": "RSA public key used for encryption"
                    },
                    "format": {
                      "type": "string",
                      "description": "key format (pem or der)"
                    },
                    "type": {
                      "type": "string",
                      "description": "pkcs1 or pkcs8"
                    }
                  }
                }
              },
              "rules": {
                "type": "object",
                "description": "Object describing token rules",
                "properties": {
                  "fees": {
                    "type": "object",
                    "properties": {
                      "items": {
                        "type": "array",
                        "description": "Array of objects describing fee rules",
                        "items": {
                          "type": "object",
                          "properties": {
                            "address": {
                              "type": "string",
                              "description": "Address fee is auto sent to"
                            },
                            "tokenId": {
                              "type": "string",
                              "description": "How fee should be paid, either with a tokenId, or with NEBL if null"
                            },
                            "value": {
                              "type": "string",
                              "description": "Amount of NTP1 token, or NEBL (in satoshi) to pay as fee"
                            }
                          }
                        }
                      },
                      "locked": {
                        "type": "boolean",
                        "description": "Whether this rule can be modified in future transactions"
                      }
                    }
                  },
                  "holders": {
                    "type": "array",
                    "description": "Array of objects describing what addresses can hold the token",
                    "items": {
                      "type": "object",
                      "properties": {
                        "address": {
                          "type": "string",
                          "description": "Address that can hold the token"
                        },
                        "locked": {
                          "type": "boolean",
                          "description": "Whether this rule can be modified in future transactions"
                        }
                      }
                    }
                  },
                  "expiration": {
                    "type": "object",
                    "description": "Object describing expiration rules of the token",
                    "properties": {
                      "validUntil": {
                        "type": "number",
                        "description": "Blockheight at wh"
                      },
                      "locked": {
                        "type": "boolean",
                        "description": "Whether this rule can be modified in future transactions"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "sendTokenResponse": {
        "type": "object",
        "properties": {
          "txHex": {
            "type": "string",
            "description": "Unsigned, raw transaction hex of the transaction to send the token"
          },
          "ntp1OutputIndexes": {
            "type": "array",
            "description": "Array of indexes transfering NTP1 tokens",
            "items": {
              "type": "number"
            }
          },
          "multisigOutputs": {
            "type": "array",
            "description": "Array of indexes of multisig outputs",
            "items": {
              "type": "number"
            }
          }
        }
      },
      "burnTokenRequest": {
        "type": "object",
        "required": [
          "fee",
          "burn"
        ],
        "properties": {
          "fee": {
            "type": "number",
            "description": "Fee in satoshi to include in the issuance transaction min 10000 (0.0001 NEBL)"
          },
          "from": {
            "type": "array",
            "description": "Array of addresses to send the token from",
            "items": {
              "type": "string"
            }
          },
          "transfer": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string",
                  "description": "Address to transfer tokens to"
                },
                "amount": {
                  "type": "number",
                  "description": "Number of tokens to send"
                },
                "tokenId": {
                  "type": "string",
                  "description": "ID of token we are sending"
                }
              }
            }
          },
          "burn": {
            "type": "array",
            "description": "Array of objects representing tokens to be burned",
            "items": {
              "type": "object",
              "properties": {
                "amount": {
                  "type": "number",
                  "description": "Amount of tokens to burn"
                },
                "tokenId": {
                  "type": "string",
                  "description": "Unique token id we are burning"
                }
              }
            }
          }
        }
      },
      "burnTokenResponse": {
        "type": "object",
        "properties": {
          "txHex": {
            "type": "string",
            "description": "Unsigned, raw transaction hex of the transaction to burn the token"
          },
          "ntp1OutputIndexes": {
            "type": "array",
            "description": "Array of indexes transfering NTP1 tokens",
            "items": {
              "type": "number"
            }
          },
          "multisigOutputs": {
            "type": "array",
            "description": "Array of indexes of multisig outputs",
            "items": {
              "type": "number"
            }
          }
        }
      },
      "getFaucetResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Whether the withdrawal was successful"
          },
          "data": {
            "type": "object",
            "properties": {
              "txId": {
                "type": "string",
                "description": "TXID of a successful withdrawal"
              }
            }
          }
        }
      },
      "sendTxRequest": {
        "type": "object",
        "required": [
          "rawtx"
        ],
        "properties": {
          "rawtx": {
            "type": "string",
            "description": "Signed raw tx hex to broadcast"
          }
        }
      },
      "getBlockResponse": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "description": "Block hash"
          },
          "confirmations": {
            "type": "number",
            "description": "Number of confirmations block has"
          },
          "size": {
            "type": "number",
            "description": "Block size in bytes"
          },
          "height": {
            "type": "number",
            "description": "Block height"
          },
          "version": {
            "type": "number",
            "description": "Block version"
          },
          "merkleroot": {
            "type": "string",
            "description": "Merkleroot of block"
          },
          "tx": {
            "type": "array",
            "description": "Array of tx ids in the block",
            "items": {
              "type": "string"
            }
          },
          "time": {
            "type": "number",
            "description": "Block time relative to epoch"
          },
          "nonce": {
            "type": "number",
            "description": "Block nonce"
          },
          "bits": {
            "type": "string",
            "description": "Block bits"
          },
          "difficulty": {
            "type": "number",
            "description": "Block difficulty"
          },
          "previousblockhash": {
            "type": "string",
            "description": "Hash of the previous block on the chain"
          },
          "nextblockhash": {
            "type": "string",
            "description": "Hash of the next block on the chain"
          },
          "reward": {
            "type": "number",
            "description": "Number of NEBL awarded in this block"
          }
        }
      },
      "getBlockIndexResponse": {
        "type": "object",
        "properties": {
          "blockHash": {
            "type": "string",
            "description": "Hash of the requested block"
          }
        }
      },
      "getTxResponse": {
        "type": "object",
        "properties": {
          "txid": {
            "type": "string",
            "description": "TXID of transaction"
          },
          "version": {
            "type": "number",
            "description": "Transaction version"
          },
          "locktime": {
            "type": "number",
            "description": "Transaction locktime"
          },
          "vin": {
            "type": "array",
            "description": "Array of transaction inputs",
            "items": {
              "type": "object",
              "properties": {
                "txid": {
                  "type": "string",
                  "description": "TXID of the input"
                },
                "vout": {
                  "type": "number",
                  "description": "output index"
                },
                "scriptSig": {
                  "type": "object",
                  "properties": {
                    "asm": {
                      "type": "string"
                    },
                    "hex": {
                      "type": "string"
                    }
                  }
                },
                "sequence": {
                  "type": "number"
                },
                "value": {
                  "type": "number",
                  "description": "Value of input in NEBL"
                },
                "valueSat": {
                  "type": "number",
                  "description": "Value of input in NEBL satoshi"
                },
                "n": {
                  "type": "number",
                  "description": "input index"
                }
              }
            }
          },
          "vout": {
            "type": "array",
            "description": "Array of transaction outputs",
            "items": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "number",
                  "description": "Value of the output in NEBL"
                },
                "n": {
                  "type": "number",
                  "description": "Output index"
                },
                "scriptPubKey": {
                  "type": "object",
                  "properties": {
                    "asm": {
                      "type": "string"
                    },
                    "hex": {
                      "type": "string"
                    },
                    "reqSigs": {
                      "type": "number"
                    },
                    "type": {
                      "type": "string"
                    },
                    "addresses": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                },
                "used": {
                  "type": "boolean",
                  "description": "Whether this output has now been used"
                },
                "blockheight": {
                  "type": "number",
                  "description": "Blockheight of this transaction"
                },
                "usedBlockheight": {
                  "type": "number",
                  "description": "Blockheight this output was used in"
                },
                "usedTxid": {
                  "type": "string",
                  "description": "TXID this output was used in"
                }
              }
            }
          },
          "blocktime": {
            "type": "number",
            "description": "Block time of this transaction"
          },
          "blockheight": {
            "type": "number",
            "description": "Block height of this transaction"
          },
          "totalsent": {
            "type": "number",
            "description": "Total NEBL sent in this transaction in satoshis"
          },
          "fee": {
            "type": "number",
            "description": "Total NEBL used as fee for this transcation in satoshis"
          },
          "blockhash": {
            "type": "string",
            "description": "Hash of the block this transaction is in"
          },
          "time": {
            "type": "number",
            "description": "Transaction time"
          },
          "confirmations": {
            "type": "number",
            "description": "Number of transaction confirmations"
          },
          "valueOut": {
            "type": "number",
            "description": "Total NEBL output in this transaction"
          },
          "valueIn": {
            "type": "number",
            "description": "Total NEBL input in this transaction"
          },
          "fees": {
            "type": "number",
            "description": "Total NEBL used in fees for this transaction"
          },
          "size": {
            "type": "number",
            "description": "Transcation size in bytes"
          }
        }
      },
      "getRawTxResponse": {
        "type": "object",
        "properties": {
          "rawtx": {
            "type": "string",
            "description": "Raw hex representing the transaction"
          }
        }
      },
      "getAddressResponse": {
        "type": "object",
        "properties": {
          "addrStr": {
            "type": "string",
            "description": "Address in string form"
          },
          "balance": {
            "type": "number",
            "description": "NEBL balance"
          },
          "balanceSat": {
            "type": "number",
            "description": "NEBL balance in satoshis"
          },
          "totalReceived": {
            "type": "number",
            "description": "Total NEBL received"
          },
          "totalReceivedSat": {
            "type": "number",
            "description": "Total NEBL received in satoshis"
          },
          "totalSent": {
            "type": "number",
            "description": "Total NEBL sent"
          },
          "totalSentSat": {
            "type": "number",
            "description": "Total NEBL sent satoshis"
          },
          "unconfirmedBalance": {
            "type": "number",
            "description": "Unconfirmed NEBL balance"
          },
          "unconfirmedBalanceSat": {
            "type": "number",
            "description": "Unconfirmed NEBL balance in satoshis"
          },
          "unconfirmedTxAppearances": {
            "type": "number",
            "description": "Number of unconfirmed transactions for this address"
          },
          "txAppearances": {
            "type": "number",
            "description": "Number of transactions for this address"
          },
          "transactions": {
            "type": "array",
            "description": "Array of transaction ids for this address",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "getAddressBalanceResponse": {
        "type": "number",
        "description": "Address balance in satoshis"
      },
      "getAddressUnconfirmedBalanceResponse": {
        "type": "number",
        "description": "Address unconfirmed balance in satoshis"
      },
      "getAddressTotalReceivedResponse": {
        "type": "number",
        "description": "Address total received in satoshis"
      },
      "getAddressTotalSentResponse": {
        "type": "number",
        "description": "Address total sent in satoshis"
      },
      "getAddressUtxosResponse": {
        "type": "array",
        "description": "Array of objects representing this address' UTXOs",
        "items": {
          "type": "object",
          "properties": {
            "address": {
              "type": "string",
              "description": "Address"
            },
            "txid": {
              "type": "string",
              "description": "Transaction ID"
            },
            "vout": {
              "type": "number",
              "description": "vout"
            },
            "ts": {
              "type": "number",
              "description": "Timestamp"
            },
            "scriptPubKey": {
              "type": "string",
              "description": "scriptPubKey"
            },
            "amount": {
              "type": "number",
              "description": "NEBL amount"
            },
            "confirmations": {
              "type": "number",
              "description": "Number of confirmations"
            }
          }
        }
      },
      "getTxsResponse": {
        "type": "object",
        "description": "Object containing an array of transaction objects",
        "properties": {
          "pagesTotal": {
            "type": "number",
            "description": "Number of pages of transactions"
          },
          "txs": {
            "type": "array",
            "description": "Array of transaction objects",
            "items": {
              "$ref": "#/components/schemas/getTxResponse"
            }
          }
        }
      },
      "getSyncResponse": {
        "type": "object",
        "description": "Object containing node sync status",
        "properties": {
          "status": {
            "type": "string",
            "description": "Current sync status"
          },
          "blockChainHeight": {
            "type": "number",
            "description": "Current blockchain height"
          },
          "syncPercentage": {
            "type": "number",
            "description": "Current sync percentage"
          },
          "height": {
            "type": "number",
            "description": "Height node is synced to"
          },
          "error": {
            "type": "string",
            "description": "Recent sync error messages"
          },
          "type": {
            "type": "string",
            "description": "Node type"
          }
        }
      },
      "getStatusResponse": {
        "type": "object",
        "description": "Depending on the function called, the structure and information contained in this object will vary"
      },
      "rpcRequest": {
        "type": "object",
        "required": [
          "jsonrpc",
          "id",
          "method",
          "params"
        ],
        "properties": {
          "jsonrpc": {
            "type": "string",
            "default": "1.0",
            "example": "1.0",
            "description": "JSON-RPC version"
          },
          "id": {
            "type": "string",
            "default": "neblio-apis",
            "example": "neblio-apis",
            "description": "Identifier of RCP caller"
          },
          "method": {
            "type": "string",
            "example": "getstakinginfo",
            "description": "Name of the Neblio RPC method to call"
          },
          "params": {
            "type": "array",
            "example": [],
            "description": "Array of string params that should be passed to the RPC method.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "rpcResponse": {
        "type": "object",
        "description": "Object containing the JSON response from the Neblio node.",
        "properties": {
          "result": {
            "type": "object",
            "description": "Object containing the response output."
          },
          "id": {
            "type": "string",
            "description": "Identifier of RCP caller"
          },
          "error": {
            "type": "object",
            "description": "Object containing any error information."
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "fields": {
            "type": "string"
          }
        }
      }
    }
  }
}