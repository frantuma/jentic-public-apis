{
  "openapi": "3.0.1",
  "info": {
    "title": "Portfolio Optimizer",
    "description": "Portfolio Optimizer is an [HTTP Web API](https://en.wikipedia.org/wiki/Web_API) to analyze and optimize financial portfolios (collection of financial assets: stocks, bonds, commodities, ETFs, crypto-currencies...) using a wide range of functionalities like modern portfolio theory (mean-variance analysis and optimization), risk parity, Value-At-Risk, hierarchical clustering, etc.\n\n# API General Information\n\n  Portfolio Optimizer is based on [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) for easy integration, uses [JSON](https://en.wikipedia.org/wiki/JSON) for the exchange of data and uses standard [HTTP verbs](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods) (`GET`, `POST`) to represent actions.\n\nPortfolio Optimizer is also as secured as a Web API could be: \n* [256-bit HTTPS Encryption](https://en.wikipedia.org/wiki/HTTPS)\n* No usage of cookies\n* No usage of personal data  \n\n## API Headers \nThe following HTTP header(s) are required when calling Portfolio Optimizer endpoints:\n* `Content-type: application/json`  \n  This header specifies that the data provided in input to the endpoint is in JSON format\n\nThe following HTTP header(s) are optional when calling Portfolio Optimizer endpoints:\n* `Content-Encoding: gzip`  \n  This header indicates that the data provided in input to the endpoint is compressed with gzip.\n* `X-API-Key: <private API key>`  \n  This header enables [authenticated users](#auth) to provide their private [API key](#overview--api-key) in order to [benefit from higher API limits](#overview--api-limits)\n\n## API Key\nPortfolio Optimizer is free to use, but not free to run.\n\nIn order to obtain an API key and benefit from [higher API limits](#overview--api-limits), a *small* participation to Portfolio Optimizer running costs is required.\n\nThis participation takes the form of coffee(s), with one coffee = one month of usage.\n\n<p><a href=\"https://www.buymeacoffee.com/portfolioopt\"><img src=\"https://img.buymeacoffee.com/button-api/?text=Buy me a coffee&emoji=&slug=portfolioopt&button_colour=6f777d&font_colour=ffffff&font_family=Cookie&outline_colour=000000&coffee_colour=FFDD00\"></a></p>\n\n\n> **Notes:** \n> * Please make sure not to expose your API key publicly!\n\n## API Limits \n\nPortfolio Optimizer comes with *fairly reasonable* API limits.\n\nFor anonymous users:  \n* The API requests are restricted to a subset of all the available endpoints and/or endpoints features  \n* The API requests are limited to 1 request per second for all the anonymous users combined, with concurrent requests rejected \n* The API requests are limited to 1 second of execution time\n* The API requests are limited to 20 assets, 250 portfolios, 500 series data points, 500 simulations and 5 factors\n\nFor authenticated users with an [API key](#overview--api-key):  \n* The API requests have access to all the available endpoints and endpoints features\n* The API requests are limited to 10000 requests per 24 hour per API key, with concurrent requests authorized\n* The API requests are limited to 2.5 seconds of execution time\n* The API requests are limited to 100 assets, 1250 portfolios, 2500 series data points, 2500 simulations and 25 factors\n\n> **Notes:** \n> * It is possible to further relax the API limits, or to disable the API limits alltogether; please [contact the support](https://portfoliooptimizer.io/contact/) for more details.\n> * Information on the API rate limits are provided in response messages HTTP headers `x-ratelimit-*`:  \n>   * `x-ratelimit-limit-second`, the limit on the number of API requests per second\n>   * `x-ratelimit-remaining-second`, the number of remaining API requests in the current second    \n>   * `x-ratelimit-limit-minute`, the limit on the number of API requests per minute\n>   * ...\n\n## API Regions\nPortfolio Optimizer servers are located in Western Europe.\n\n> **Notes:** \n> * It is possible to deploy Portfolio Optimizer in other geographical regions, for example to improve the API latency; please [contact the support](https://portfoliooptimizer.io/contact/) for more details. \n\n## API Response Codes       \n\nStandard [HTTP response codes](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) are used by Portfolio Optimizer to provide details on the status of API requests.\n\n| HTTP Code | Description | Notes |\n| --------- | ----------- | ----- |\n| 200 | Request successfully processed | - |\n| 400 | Request failed to be processed because of incorrect content | The response message body contains information on the incorrect content |\n| 401 | Request failed to be processed because of invalid API key | - |\n| 404 | Request failed to be processed because of non existing endpoint | The requested endpoint might exist, but needs to be accessed with another HTTP method (e.g., `POST` instead of `GET`) |\n| 429 | Request failed to be processed because of API limits violated | The response message HTTP headers `x-ratelimit-*` contain information on the [API limits](#overview--api-limits) |\n| 500 | Request failed to be processed because of an internal error | Something went wrong on Portfolio Optimizer side, do not hesitate to [report the issue](#overview--support) |\n| 502 | Request failed to be processed because of a temporary connectivity error | Something went wrong on Portfolio Optimizer side, please check the [API status](#overview--api-status) and do not hesitate to [report the issue](#overview--support) |\n\n## API Status  \n\nPortfolio Optimizer is monitored 24/7 by [UptimeRobot](https://stats.uptimerobot.com/wgW71SL1AW).\n\n# Support\n\nFor any issue or question about Portfolio Optimizer, please do not hesitate to [contact the support](https://portfoliooptimizer.io/contact/).\n",
    "termsOfService": "https://portfoliooptimizer.io/terms-of-service",
    "contact": {
      "name": "Support",
      "email": "contact@portfoliooptimizer.io",
      "url": "https://portfoliooptimizer.io/"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.10",
    "x-logo": {
      "url": "https://portfoliooptimizer.io/assets/images/88x88.png"
    },
    "x-jentic-source-url": "https://docs.portfoliooptimizer.io/openapi/portfoliooptimizer.yaml"
  },
  "externalDocs": {
    "description": "External documentation",
    "url": "https://docs.portfoliooptimizer.io/"
  },
  "servers": [
    {
      "url": "https://api.portfoliooptimizer.io/v1"
    },
    {
      "url": "https://eu-west-1.api.portfoliooptimizer.io/v1"
    }
  ],
  "security": [
    {
      "ApiKeyAuth": []
    }
  ],
  "paths": {
    "/markets/indicators/aiae/us": {
      "get": {
        "tags": [
          "Market Indicators"
        ],
        "summary": "U.S. AIAE",
        "description": "Retrieve the U.S. AIAE (Aggregate Investor Allocation to Equities) indicator, as well as the associated forecast of the future 10-year annualized U.S. stock market (geometric) return, which is computed using a variation of the methodology described in the first reference.\n\n> This endpoint requires an API key.\n\nReferences\n* [Micaletti, Raymond, Towards a Better Fed Model](https://ssrn.com/abstract=3704963)\n",
        "responses": {
          "401": {
            "description": "Access to the endpoint is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "message": "unauthorized, please upgrade your Portfolio Optimizer API key"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "aiaeIndicator"
                  ],
                  "properties": {
                    "aiaeIndicator": {
                      "type": "object",
                      "description": "The U.S. AIAE indicator forecasts",
                      "required": [
                        "aiaeRegion",
                        "aiaeComputationDate",
                        "aiaeReferenceDate",
                        "aiaeForecasts"
                      ],
                      "properties": {
                        "aiaeRegion": {
                          "type": "string",
                          "description": "The region associated to the U.S. AIAE forecasts; always equal to \"us\""
                        },
                        "aiaeComputationDate": {
                          "type": "string",
                          "description": "The computation date of the U.S. AIAE forecasts, in format YYYY-MM-DD"
                        },
                        "aiaeReferenceDate": {
                          "type": "string",
                          "description": "The end-of-quarter date of the latest quarterly Federal Reserve economic release \"Financial Accounts of the United States - Z.1\" used in the computation of the U.S. AIAE forecasts, in format YYYY-MM-DD"
                        },
                        "aiaeForecasts": {
                          "type": "array",
                          "description": "The U.S. AIAE forecasts for the future 41 quarters starting from the date aiaeReferenceDate",
                          "minItems": 41,
                          "maxItems": 41,
                          "items": {
                            "type": "object",
                            "required": [
                              "aiae",
                              "periodStartDate",
                              "periodEndDate",
                              "periodReturn",
                              "periodReturnLowerBound",
                              "periodReturnUpperBound"
                            ],
                            "properties": {
                              "aiae": {
                                "type": "number",
                                "description": "The value of the U.S. AIAE indicator, computed using the quarterly Federal Reserve economic release \"Financial Accounts of the United States - Z.1\" for the quarter ending at periodStartDate, in percent"
                              },
                              "periodStartDate": {
                                "type": "string",
                                "description": "The end-of-quarter date of the quarterly Federal Reserve economic release \"Financial Accounts of the United States - Z.1\" used to compute the U.S. AIAE indicator aiae, in format YYYY-MM-DD"
                              },
                              "periodEndDate": {
                                "type": "string",
                                "description": "The end-of-quarter date corresponding to the periodStartDate plus 10 years, in format YYYY-MM-DD"
                              },
                              "periodReturn": {
                                "type": "number",
                                "description": "The U.S. AIAE forecast of the annualized U.S. stock market (geometric) return over the 10-year period from periodStartDate to periodEndDate, in percent"
                              },
                              "periodReturnLowerBound": {
                                "type": "number",
                                "description": "The lower bound of a 95% confidence interval for the U.S. AIAE forecast periodReturn, in percent"
                              },
                              "periodReturnUpperBound": {
                                "type": "number",
                                "description": "The upper bound of a 95% confidence interval for the U.S. AIAE forecast periodReturn, in percent"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed U.S. AIAE and one associated forecast",
                    "value": {
                      "aiaeIndicator": {
                        "aiaeRegion": "us",
                        "aiaeComputationDate": "2023-06-06",
                        "aiaeReferenceDate": "2022-12-31",
                        "aiaeForecasts": [
                          {
                            "aiae": 0.35254722677535977,
                            "periodStartDate": "2012-12-31",
                            "periodEndDate": "2022-12-31",
                            "periodReturn": 0.096600837721317,
                            "periodReturnLowerBound": 0.06090063611566454,
                            "periodReturnUpperBound": 0.13807097281353742
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/markets/capital-assumptions/usd": {
      "get": {
        "tags": [
          "Capital Market Assumptions"
        ],
        "summary": "USD Capital Market Assumptions",
        "description": "Retrieve averaged 10-year capital market assumptions (arithmetic and geometric returns, standard deviations, correlations) computed in USD from misc. leading financial institutions and for selected asset classes.\n",
        "externalDocs": {
          "description": "More information on Portfolio Optimizer website...",
          "url": "https://portfoliooptimizer.io/blog/capital-market-assumptions-combining-institutions-forecasts-for-improved-accuracy/"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "capitalMarketAssumptions"
                  ],
                  "properties": {
                    "capitalMarketAssumptions": {
                      "type": "object",
                      "description": "The capital market assumptions",
                      "required": [
                        "cmaCurrency",
                        "cmaComputationDate",
                        "cmaHorizon",
                        "cmaReferenceDates",
                        "cmaInstitutions",
                        "cmaAssets",
                        "cmaAssetsCorrelationMatrixLabels",
                        "cmaAssetsCorrelationMatrix",
                        "cmaAssetsCorrelationMatrixLowerBounds",
                        "cmaAssetsCorrelationMatrixUpperBounds"
                      ],
                      "properties": {
                        "cmaCurrency": {
                          "type": "string",
                          "description": "The capital market assumptions currency; always equal to \"usd\""
                        },
                        "cmaComputationDate": {
                          "type": "string",
                          "description": "The capital market assumptions computation date, in format YYYY-MM-DD"
                        },
                        "cmaHorizon": {
                          "type": "string",
                          "description": "The capital market assumptions forecast horizon; always equal to \"10 years\""
                        },
                        "cmaInstitutions": {
                          "type": "array",
                          "description": "The names of the financial institutions from which capital market assumptions data have been sourced",
                          "minItems": 1,
                          "items": {
                            "type": "string"
                          }
                        },
                        "cmaReferenceDates": {
                          "type": "object",
                          "description": "The reference dates of the sourced capital market assumptions",
                          "required": [
                            "earliestReferenceDate",
                            "latestReferenceDate"
                          ],
                          "properties": {
                            "earliestReferenceDate": {
                              "type": "string",
                              "description": "The date of the oldest capital market assumptions data sourced, in format YYYY-MM-DD"
                            },
                            "latestReferenceDate": {
                              "type": "string",
                              "description": "The date of the most recent capital market assumptions data sourced, in format YYYY-MM-DD"
                            }
                          }
                        },
                        "cmaAssets": {
                          "type": "array",
                          "description": "The nominal return and standard deviation capital market assumptions computed from financial institutions and for selected asset classes",
                          "minItems": 2,
                          "items": {
                            "type": "object",
                            "required": [
                              "assetLabel",
                              "assetReturn",
                              "assetReturnLowerBound",
                              "assetReturnUpperBound",
                              "assetStandardDeviation",
                              "assetStandardDeviationLowerBound",
                              "assetStandardDeviationUpperBound",
                              "assetArithmeticReturn",
                              "assetArithmeticReturnLowerBound",
                              "assetArithmeticReturnUpperBound"
                            ],
                            "properties": {
                              "assetLabel": {
                                "type": "string",
                                "description": "The name of the asset class"
                              },
                              "assetReturn": {
                                "type": "number",
                                "description": "The average forecasted annualized (geometric) nominal return over the 10-year period starting from earliestReferenceDate, in percent"
                              },
                              "assetReturnLowerBound": {
                                "type": "number",
                                "description": "The lowest forecasted annualized (geometric) nominal return over the 10-year period starting from earliestReferenceDate, in percent"
                              },
                              "assetReturnUpperBound": {
                                "type": "number",
                                "description": "The highest forecasted annualized (geometric) nominal return over the 10-year period starting from earliestReferenceDate, in percent"
                              },
                              "assetStandardDeviation": {
                                "type": "number",
                                "description": "The average forecasted annualized standard deviation over the 10-year period starting from earliestReferenceDate, in percent"
                              },
                              "assetStandardDeviationLowerBound": {
                                "type": "number",
                                "description": "The lowest forecasted annualized standard deviation over the 10-year period starting from earliestReferenceDate, in percent"
                              },
                              "assetStandardDeviationUpperBound": {
                                "type": "number",
                                "description": "The highest forecasted annualized standard deviation over the 10-year period starting from earliestReferenceDate, in percent"
                              },
                              "assetArithmeticReturn": {
                                "type": "number",
                                "description": "The average forecasted annualized (arithmetic) nominal return over the 10-year period starting from earliestReferenceDate, computed from assetReturn and assetStandardDeviation, in percent"
                              },
                              "assetArithmeticReturnLowerBound": {
                                "type": "number",
                                "description": "The lowest forecasted annualized (arithmetic) nominal return over the 10-year period starting from earliestReferenceDate, computed from assetReturnLowerBound and assetStandardDeviationLowerBound, in percent"
                              },
                              "assetArithmeticReturnUpperBound": {
                                "type": "number",
                                "description": "The highest forecasted annualized (arithmetic) nominal return over the 10-year period starting from earliestReferenceDate, computed from assetReturnUpperBound and assetStandardDeviationUpperBound, in percent"
                              }
                            }
                          }
                        },
                        "cmaAssetsCorrelationMatrixLabels": {
                          "type": "array",
                          "description": "The name of the asset classes for which correlation capital market assumptions have been computed; the index of the name of an asset class in cmaAssetsCorrelationMatrixLabels correspond to the row and the column index of that asset class in cmaAssetsCorrelationMatrix, cmaAssetsCorrelationMatrixLowerBounds and cmaAssetsCorrelationMatrixUpperBounds",
                          "minItems": 2,
                          "items": {
                            "type": "string"
                          }
                        },
                        "cmaAssetsCorrelationMatrix": {
                          "description": "cmaAssetsCorrelationMatrix[i][j] is the average forecasted correlation between the asset class i and the asset class j, possibly equal to null in case no forecast exists for this pair of asset classes",
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "array",
                            "minItems": 2,
                            "items": {
                              "type": "number"
                            }
                          }
                        },
                        "cmaAssetsCorrelationMatrixLowerBounds": {
                          "description": "cmaAssetsCorrelationMatrixLowerBounds[i][j] is the lowest forecasted correlation between the asset class i and the asset class j, possibly equal to null in case no forecast exists for this pair of asset classes",
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "array",
                            "minItems": 2,
                            "items": {
                              "type": "number"
                            }
                          }
                        },
                        "cmaAssetsCorrelationMatrixUpperBounds": {
                          "description": "cmaAssetsCorrelationMatrixUpperBounds[i][j] is the highest forecasted correlation between the asset class i and the asset class j, possibly equal to null in case no forecast exists for this pair of asset classes",
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "array",
                            "minItems": 2,
                            "items": {
                              "type": "number"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed USD capital market assumptions for two institutions and two asset classes",
                    "value": {
                      "capitalMarketAssumptions": {
                        "cmaCurrency": "usd",
                        "cmaComputationDate": "2024-07-05",
                        "cmaReferenceDates": {
                          "earliestReferenceDate": "2023-06-30",
                          "latestReferenceDate": "2024-03-31"
                        },
                        "cmaInstitutions": [
                          "xxx",
                          "yyy"
                        ],
                        "cmaHorizon": "10 years",
                        "cmaAssets": [
                          {
                            "assetReturn": 0.04097639524999999,
                            "assetReturnLowerBound": 0.038,
                            "assetReturnUpperBound": 0.047,
                            "assetArithmeticReturn": 0.04250947065581947,
                            "assetArithmeticReturnLowerBound": 0.038534645,
                            "assetArithmeticReturnUpperBound": 0.0502,
                            "assetStandardDeviation": 0.0553728346,
                            "assetStandardDeviationLowerBound": 0.0327,
                            "assetStandardDeviationUpperBound": 0.08,
                            "assetLabel": "governmentBonds-us"
                          },
                          {
                            "assetReturn": 0.048175091859375,
                            "assetReturnLowerBound": 0.039030043,
                            "assetReturnUpperBound": 0.062,
                            "assetArithmeticReturn": 0.054903091859374996,
                            "assetArithmeticReturnLowerBound": 0.044542543,
                            "assetArithmeticReturnUpperBound": 0.0700645,
                            "assetStandardDeviation": 0.11599999999999999,
                            "assetStandardDeviationLowerBound": 0.105,
                            "assetStandardDeviationUpperBound": 0.127,
                            "assetLabel": "governmentBonds-eurozone"
                          }
                        ],
                        "cmaAssetsCorrelationMatrixLabels": [
                          "governmentBonds-us",
                          "governmentBonds-eurozone"
                        ],
                        "cmaAssetsCorrelationMatrix": [
                          [
                            1,
                            0.47
                          ],
                          [
                            0.47,
                            1
                          ]
                        ],
                        "cmaAssetsCorrelationMatrixLowerBounds": [
                          [
                            1,
                            0.47
                          ],
                          [
                            0.47,
                            1
                          ]
                        ],
                        "cmaAssetsCorrelationMatrixUpperBounds": [
                          [
                            1,
                            0.47
                          ],
                          [
                            0.47,
                            1
                          ]
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/markets/capital-assumptions/eur": {
      "get": {
        "tags": [
          "Capital Market Assumptions"
        ],
        "summary": "EUR Capital Market Assumptions",
        "description": "Retrieve averaged 10-year capital market assumptions (arithmetic and geometric returns, standard deviations, correlations) computed in EUR from misc. leading financial institutions and for selected asset classes.\n",
        "externalDocs": {
          "description": "More information on Portfolio Optimizer website...",
          "url": "https://portfoliooptimizer.io/blog/capital-market-assumptions-combining-institutions-forecasts-for-improved-accuracy/"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "capitalMarketAssumptions"
                  ],
                  "properties": {
                    "capitalMarketAssumptions": {
                      "type": "object",
                      "description": "The capital market assumptions",
                      "required": [
                        "cmaCurrency",
                        "cmaComputationDate",
                        "cmaHorizon",
                        "cmaReferenceDates",
                        "cmaInstitutions",
                        "cmaAssets",
                        "cmaAssetsCorrelationMatrixLabels",
                        "cmaAssetsCorrelationMatrix",
                        "cmaAssetsCorrelationMatrixLowerBounds",
                        "cmaAssetsCorrelationMatrixUpperBounds"
                      ],
                      "properties": {
                        "cmaCurrency": {
                          "type": "string",
                          "description": "The capital market assumptions currency; always equal to \"eur\""
                        },
                        "cmaComputationDate": {
                          "type": "string",
                          "description": "The capital market assumptions computation date, in format YYYY-MM-DD"
                        },
                        "cmaHorizon": {
                          "type": "string",
                          "description": "The capital market assumptions forecast horizon; always equal to \"10 years\""
                        },
                        "cmaInstitutions": {
                          "type": "array",
                          "description": "The names of the financial institutions from which capital market assumptions data have been sourced",
                          "minItems": 1,
                          "items": {
                            "type": "string"
                          }
                        },
                        "cmaReferenceDates": {
                          "type": "object",
                          "description": "The reference dates of the sourced capital market assumptions",
                          "required": [
                            "earliestReferenceDate",
                            "latestReferenceDate"
                          ],
                          "properties": {
                            "earliestReferenceDate": {
                              "type": "string",
                              "description": "The date of the oldest capital market assumptions data sourced, in format YYYY-MM-DD"
                            },
                            "latestReferenceDate": {
                              "type": "string",
                              "description": "The date of the most recent capital market assumptions data sourced, in format YYYY-MM-DD"
                            }
                          }
                        },
                        "cmaAssets": {
                          "type": "array",
                          "description": "The nominal return and standard deviation capital market assumptions computed from financial institutions and for selected asset classes",
                          "minItems": 2,
                          "items": {
                            "type": "object",
                            "required": [
                              "assetLabel",
                              "assetReturn",
                              "assetReturnLowerBound",
                              "assetReturnUpperBound",
                              "assetStandardDeviation",
                              "assetStandardDeviationLowerBound",
                              "assetStandardDeviationUpperBound",
                              "assetArithmeticReturn",
                              "assetArithmeticReturnLowerBound",
                              "assetArithmeticReturnUpperBound"
                            ],
                            "properties": {
                              "assetLabel": {
                                "type": "string",
                                "description": "The name of the asset class"
                              },
                              "assetReturn": {
                                "type": "number",
                                "description": "The average forecasted annualized (geometric) nominal return over the 10-year period starting from earliestReferenceDate, in percent"
                              },
                              "assetReturnLowerBound": {
                                "type": "number",
                                "description": "The lowest forecasted annualized (geometric) nominal return over the 10-year period starting from earliestReferenceDate, in percent"
                              },
                              "assetReturnUpperBound": {
                                "type": "number",
                                "description": "The highest forecasted annualized (geometric) nominal return over the 10-year period starting from earliestReferenceDate, in percent"
                              },
                              "assetStandardDeviation": {
                                "type": "number",
                                "description": "The average forecasted annualized standard deviation over the 10-year period starting from earliestReferenceDate, in percent"
                              },
                              "assetStandardDeviationLowerBound": {
                                "type": "number",
                                "description": "The lowest forecasted annualized standard deviation over the 10-year period starting from earliestReferenceDate, in percent"
                              },
                              "assetStandardDeviationUpperBound": {
                                "type": "number",
                                "description": "The highest forecasted annualized standard deviation over the 10-year period starting from earliestReferenceDate, in percent"
                              },
                              "assetArithmeticReturn": {
                                "type": "number",
                                "description": "The average forecasted annualized (arithmetic) nominal return over the 10-year period starting from earliestReferenceDate, computed from assetReturn and assetStandardDeviation, in percent"
                              },
                              "assetArithmeticReturnLowerBound": {
                                "type": "number",
                                "description": "The lowest forecasted annualized (arithmetic) nominal return over the 10-year period starting from earliestReferenceDate, computed from assetReturnLowerBound and assetStandardDeviationLowerBound, in percent"
                              },
                              "assetArithmeticReturnUpperBound": {
                                "type": "number",
                                "description": "The highest forecasted annualized (arithmetic) nominal return over the 10-year period starting from earliestReferenceDate, computed from assetReturnUpperBound and assetStandardDeviationUpperBound, in percent"
                              }
                            }
                          }
                        },
                        "cmaAssetsCorrelationMatrixLabels": {
                          "type": "array",
                          "description": "The name of the asset classes for which correlation capital market assumptions have been computed; the index of the name of an asset class in cmaAssetsCorrelationMatrixLabels correspond to the row and the column index of that asset class in cmaAssetsCorrelationMatrix, cmaAssetsCorrelationMatrixLowerBounds and cmaAssetsCorrelationMatrixUpperBounds",
                          "minItems": 2,
                          "items": {
                            "type": "string"
                          }
                        },
                        "cmaAssetsCorrelationMatrix": {
                          "description": "cmaAssetsCorrelationMatrix[i][j] is the average forecasted correlation between the asset class i and the asset class j, possibly equal to null in case no forecast exists for this pair of asset classes",
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "array",
                            "minItems": 2,
                            "items": {
                              "type": "number"
                            }
                          }
                        },
                        "cmaAssetsCorrelationMatrixLowerBounds": {
                          "description": "cmaAssetsCorrelationMatrixLowerBounds[i][j] is the lowest forecasted correlation between the asset class i and the asset class j, possibly equal to null in case no forecast exists for this pair of asset classes",
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "array",
                            "minItems": 2,
                            "items": {
                              "type": "number"
                            }
                          }
                        },
                        "cmaAssetsCorrelationMatrixUpperBounds": {
                          "description": "cmaAssetsCorrelationMatrixUpperBounds[i][j] is the highest forecasted correlation between the asset class i and the asset class j, possibly equal to null in case no forecast exists for this pair of asset classes",
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "array",
                            "minItems": 2,
                            "items": {
                              "type": "number"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed EUR capital market assumptions for two institutions and two asset classes",
                    "value": {
                      "capitalMarketAssumptions": {
                        "cmaCurrency": "eur",
                        "cmaComputationDate": "2024-07-05",
                        "cmaReferenceDates": {
                          "earliestReferenceDate": "2023-06-30",
                          "latestReferenceDate": "2024-03-31"
                        },
                        "cmaInstitutions": [
                          "xxx",
                          "yyy"
                        ],
                        "cmaHorizon": "10 years",
                        "cmaAssets": [
                          {
                            "assetReturn": 0.02489306191666667,
                            "assetReturnLowerBound": 0.022,
                            "assetReturnUpperBound": 0.033,
                            "assetArithmeticReturn": 0.02979356191666667,
                            "assetArithmeticReturnLowerBound": 0.0263245,
                            "assetArithmeticReturnUpperBound": 0.0385125,
                            "assetStandardDeviation": 0.099,
                            "assetStandardDeviationLowerBound": 0.093,
                            "assetStandardDeviationUpperBound": 0.105,
                            "assetLabel": "governmentBonds-us"
                          },
                          {
                            "assetReturn": 0.032050091859375,
                            "assetReturnLowerBound": 0.023030043,
                            "assetReturnUpperBound": 0.048,
                            "assetArithmeticReturn": 0.033704290479571276,
                            "assetArithmeticReturnLowerBound": 0.0242725217978619,
                            "assetArithmeticReturnUpperBound": 0.0505205,
                            "assetStandardDeviation": 0.057518668625,
                            "assetStandardDeviationLowerBound": 0.049849349,
                            "assetStandardDeviationUpperBound": 0.071,
                            "assetLabel": "governmentBonds-eurozone"
                          }
                        ],
                        "cmaAssetsCorrelationMatrixLabels": [
                          "governmentBonds-us",
                          "governmentBonds-eurozone"
                        ],
                        "cmaAssetsCorrelationMatrix": [
                          [
                            1,
                            null
                          ],
                          [
                            null,
                            1
                          ]
                        ],
                        "cmaAssetsCorrelationMatrixLowerBounds": [
                          [
                            1,
                            null
                          ],
                          [
                            null,
                            1
                          ]
                        ],
                        "cmaAssetsCorrelationMatrixUpperBounds": [
                          [
                            1,
                            null
                          ],
                          [
                            null,
                            1
                          ]
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/markets/indicators/bsrmb/us": {
      "get": {
        "tags": [
          "Market Indicators"
        ],
        "summary": "U.S. BSRM/B",
        "description": "Retrieve the U.S. BSRM/B (Bogle Sources of Return Model for Bonds) indicator, as well as the associated forecast of the future 10-year annualized 10-year constant maturity Treasury bond (geometric) return, which is computed using a variation of the methodology described in the first reference.\n\n> This endpoint requires an API key.\n\nReferences\n* [Bogle J., Nolan M., Occam\u2019s Razor Redux: Establishing Reasonable Expectations for Financial Market Returns, Journal of Portfolio Management, Vol. 42, No. 101, Sep Fall 2015](https://www.pm-research.com/content/iijpormgmt/42/1/119)\n",
        "responses": {
          "401": {
            "description": "Access to the endpoint is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "message": "unauthorized, please upgrade your Portfolio Optimizer API key"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "bsrmbIndicator"
                  ],
                  "properties": {
                    "bsrmbIndicator": {
                      "type": "object",
                      "description": "The U.S. BSRM/B indicator forecasts",
                      "required": [
                        "bsrmbRegion",
                        "bsrmbComputationDate",
                        "bsrmbReferenceDate",
                        "bsrmbForecasts"
                      ],
                      "properties": {
                        "bsrmbRegion": {
                          "type": "string",
                          "description": "The region associated to the BSRM/B forecasts; always equal to \"us\""
                        },
                        "bsrmbComputationDate": {
                          "type": "string",
                          "description": "The computation date of the U.S. BSRM/B forecasts, in format YYYY-MM-DD"
                        },
                        "bsrmbReferenceDate": {
                          "type": "string",
                          "description": "The end-of-month date of the latest Federal Reserve economic release \"Selected Interest Rates (Daily) - H.15\" used in the computation of the U.S. BSRM/B forecasts bsrmbForecasts, in format YYYY-MM-DD"
                        },
                        "bsrmbForecasts": {
                          "type": "array",
                          "description": "The U.S. BSRM/B forecasts for the future 121 months starting from the date bsrmbReferenceDate",
                          "minItems": 121,
                          "maxItems": 121,
                          "items": {
                            "type": "object",
                            "required": [
                              "bsrmb",
                              "periodStartDate",
                              "periodEndDate",
                              "periodReturn",
                              "periodReturnLowerBound",
                              "periodReturnUpperBound"
                            ],
                            "properties": {
                              "bsrmb": {
                                "type": "number",
                                "description": "The value of the U.S. BSRM/B indicator, computed using the Federal Reserve economic release \"Selected Interest Rates (Daily) - H.15\" for the month ending at periodStartDate, in percent; the value of the U.S. BSRM/B indicator corresponds to the value found in the economic series \"Market Yield on U.S. Treasury Securities at 10-Year Constant Maturity, Quoted on an Investment Basis\" included in the aforementioned Federal Reserve economic release."
                              },
                              "periodStartDate": {
                                "type": "string",
                                "description": "The end-of-month date of the Federal Reserve economic release \"Selected Interest Rates (Daily) - H.15\" used to compute the U.S. BSRM/B indicator bsrmb, in format YYYY-MM-DD"
                              },
                              "periodEndDate": {
                                "type": "string",
                                "description": "The end-of-month date corresponding to the periodStartDate plus 10 years, in format YYYY-MM-DD"
                              },
                              "periodReturn": {
                                "type": "number",
                                "description": "The U.S. BSRM/B forecast of the annualized U.S. 10-year constant maturity governement bond (geometric) return over the 10-year period from periodStartDate to periodEndDate, in percent"
                              },
                              "periodReturnLowerBound": {
                                "type": "number",
                                "description": "The lower bound of a 95% confidence interval for the U.S. BSRM/B forecast periodReturn, in percent"
                              },
                              "periodReturnUpperBound": {
                                "type": "number",
                                "description": "The upper bound of a 95% confidence interval for the U.S. BSRM/B forecast periodReturn, in percent"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed U.S. BSRM/B and one associated forecast",
                    "value": {
                      "bsrmbIndicator": {
                        "bsrmbRegion": "us",
                        "bsrmbComputationDate": "2023-06-08",
                        "bsrmbReferenceDate": "2023-05-31",
                        "bsrmbForecasts": [
                          {
                            "bsrmb": 0.0216,
                            "periodStartDate": "2013-05-31",
                            "periodEndDate": "2023-05-31",
                            "periodReturn": 0.02389737228476387,
                            "periodReturnLowerBound": -0.00017779579080120025,
                            "periodReturnUpperBound": 0.05256586220017154
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/factors/models/fama-french/us": {
      "get": {
        "tags": [
          "Factors / Risk Models"
        ],
        "summary": "U.S. Fama-French Model",
        "description": "Provides the end-of-month monthly USD returns of the following Fama-French U.S. factors:\n* MKT-RF\n* SMB\n* SMB5\n* HML\n* RMW\n* CMA\n* RF\n* MOM\n\n> This endpoint requires an API key.\n\nReferences\n* [Description of Fama/French Factors](https://mba.tuck.dartmouth.edu/pages/faculty/ken.french/Data_Library/f-f_factors.html)\n* [Description of Fama/French 5 Factors (2x3)](https://mba.tuck.dartmouth.edu/pages/faculty/ken.french/data_library/f-f_5_factors_2x3.html)\n* [Detail for Monthly Momentum Factor (Mom)](https://mba.tuck.dartmouth.edu/pages/faculty/ken.french/Data_Library/det_mom_factor.html)\n",
        "responses": {
          "401": {
            "description": "Access to the endpoint is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "message": "unauthorized, please upgrade your Portfolio Optimizer API key"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "famaFrenchFactors"
                  ],
                  "properties": {
                    "famaFrenchFactors": {
                      "type": "object",
                      "description": "The U.S. Fama-French factors",
                      "required": [
                        "factorsRegion",
                        "factorsComputationDate",
                        "factors"
                      ],
                      "properties": {
                        "factorsRegion": {
                          "type": "string",
                          "description": "The region associated to the Fama-French factors; always equal to \"us\""
                        },
                        "factorsComputationDate": {
                          "type": "string",
                          "description": "The computation date of the Fama-French factors, in format YYYY-MM-DD"
                        },
                        "factors": {
                          "type": "array",
                          "minItems": 1,
                          "items": {
                            "type": "object",
                            "required": [
                              "factorName",
                              "factorReturns"
                            ],
                            "properties": {
                              "factorName": {
                                "description": "The name of the factor",
                                "type": "string",
                                "enum": [
                                  "MKT-RF",
                                  "SMB",
                                  "SMB5",
                                  "HML",
                                  "RMW",
                                  "CMA",
                                  "RF",
                                  "MOM"
                                ]
                              },
                              "factorReturns": {
                                "type": "array",
                                "description": "factorReturns[t] contains return information for the factor factorName at the date t",
                                "minItems": 1,
                                "items": {
                                  "type": "object",
                                  "required": [
                                    "date",
                                    "factorReturn"
                                  ],
                                  "properties": {
                                    "date": {
                                      "description": "The date corresponding to the date t in format YYYY-MM-DD; all dates are distinct",
                                      "type": "string"
                                    },
                                    "factorReturn": {
                                      "description": "The monthly USD return of the factor at the date t; all the factorReturns arrays have the same length",
                                      "type": "array",
                                      "minItems": 1,
                                      "items": {
                                        "type": "number"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Sample of U.S. Fama-French factors",
                    "value": {
                      "famaFrenchFactors": {
                        "factorsRegion": "us",
                        "factorsComputationDate": "2023-11-06",
                        "factors": [
                          {
                            "factorName": "MKT-RF",
                            "factorReturns": [
                              {
                                "date": "1926-07-31",
                                "factorReturn": 0.0296
                              }
                            ]
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/factors/models/fama-french/developed-markets": {
      "get": {
        "tags": [
          "Factors / Risk Models"
        ],
        "summary": "Developed Markets Fama-French Model",
        "description": "Provides the end-of-month monthly USD returns of the following Fama-French developed markets factors:\n* MKT-RF\n* SMB\n* SMB5\n* HML\n* RMW\n* CMA\n* RF\n* WML\n\n> This endpoint requires an API key.\n\nReferences\n* [Description of Fama/French 3 Factors for Developed Markets](https://mba.tuck.dartmouth.edu/pages/faculty/ken.french/Data_Library/f-f_3developed.html)\n* [Description of Fama/French 5 Factors for Developed Markets](https://mba.tuck.dartmouth.edu/pages/faculty/ken.french/Data_Library/f-f_5developed.html)\n* [Description of Momentum Factors for Developed Markets](https://mba.tuck.dartmouth.edu/pages/faculty/ken.french/Data_Library/f-f_developed_mom.html)\n",
        "responses": {
          "401": {
            "description": "Access to the endpoint is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "message": "unauthorized, please upgrade your Portfolio Optimizer API key"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "famaFrenchFactors"
                  ],
                  "properties": {
                    "famaFrenchFactors": {
                      "type": "object",
                      "description": "The Developed Markets Fama-French factors",
                      "required": [
                        "factorsRegion",
                        "factorsComputationDate",
                        "factors"
                      ],
                      "properties": {
                        "factorsRegion": {
                          "type": "string",
                          "description": "The region associated to the Fama-French factors; always equal to \"developedMarkets\""
                        },
                        "factorsComputationDate": {
                          "type": "string",
                          "description": "The computation date of the Fama-French factors, in format YYYY-MM-DD"
                        },
                        "factors": {
                          "type": "array",
                          "minItems": 1,
                          "items": {
                            "type": "object",
                            "required": [
                              "factorName",
                              "factorReturns"
                            ],
                            "properties": {
                              "factorName": {
                                "description": "The name of the factor",
                                "type": "string",
                                "enum": [
                                  "MKT-RF",
                                  "SMB",
                                  "SMB5",
                                  "HML",
                                  "RMW",
                                  "CMA",
                                  "RF",
                                  "WML"
                                ]
                              },
                              "factorReturns": {
                                "type": "array",
                                "description": "factorReturns[t] contains return information for the factor factorName at the date t",
                                "minItems": 1,
                                "items": {
                                  "type": "object",
                                  "required": [
                                    "date",
                                    "factorReturn"
                                  ],
                                  "properties": {
                                    "date": {
                                      "description": "The date corresponding to the date t in format YYYY-MM-DD; all dates are distinct",
                                      "type": "string"
                                    },
                                    "factorReturn": {
                                      "description": "The monthly USD return of the factor at the date t; all the factorReturns arrays have the same length",
                                      "type": "array",
                                      "minItems": 1,
                                      "items": {
                                        "type": "number"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Sample of developed markets Fama-French factors",
                    "value": {
                      "famaFrenchFactors": {
                        "factorsRegion": "developedMarkets",
                        "factorsComputationDate": "2023-11-06",
                        "factors": [
                          {
                            "factorName": "MKT-RF",
                            "factorReturns": [
                              {
                                "date": "1990-07-31",
                                "factorReturn": 0.0077
                              }
                            ]
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/factors/models/fama-french/emerging-markets": {
      "get": {
        "tags": [
          "Factors / Risk Models"
        ],
        "summary": "Emerging Markets Fama-French Model",
        "description": "Provides the end-of-month monthly USD returns of the following Fama-French emerging markets factors:\n* MKT-RF\n* SMB5\n* HML\n* RMW\n* CMA\n* RF\n* WML\n\n> This endpoint requires an API key.\n\nReferences\n* [Description of Fama/French 5 Factors for Emerging Markets](https://mba.tuck.dartmouth.edu/pages/faculty/ken.french/Data_Library/f-f_5emerging.html)\n* [Description of Momentum Factor for Emerging Markets](https://mba.tuck.dartmouth.edu/pages/faculty/ken.french/Data_Library/f-f_emerging_mom.html)\n",
        "responses": {
          "401": {
            "description": "Access to the endpoint is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "message": "unauthorized, please upgrade your Portfolio Optimizer API key"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "famaFrenchFactors"
                  ],
                  "properties": {
                    "famaFrenchFactors": {
                      "type": "object",
                      "description": "The Emerging Markets Fama-French factors",
                      "required": [
                        "factorsRegion",
                        "factorsComputationDate",
                        "factors"
                      ],
                      "properties": {
                        "factorsRegion": {
                          "type": "string",
                          "description": "The region associated to the Fama-French factors; always equal to \"emergingMarkets\""
                        },
                        "factorsComputationDate": {
                          "type": "string",
                          "description": "The computation date of the Fama-French factors, in format YYYY-MM-DD"
                        },
                        "factors": {
                          "type": "array",
                          "minItems": 1,
                          "items": {
                            "type": "object",
                            "required": [
                              "factorName",
                              "factorReturns"
                            ],
                            "properties": {
                              "factorName": {
                                "description": "The name of the factor",
                                "type": "string",
                                "enum": [
                                  "MKT-RF",
                                  "SMB5",
                                  "HML",
                                  "RMW",
                                  "CMA",
                                  "RF",
                                  "WML"
                                ]
                              },
                              "factorReturns": {
                                "type": "array",
                                "description": "factorReturns[t] contains return information for the factor factorName at the date t",
                                "minItems": 1,
                                "items": {
                                  "type": "object",
                                  "required": [
                                    "date",
                                    "factorReturn"
                                  ],
                                  "properties": {
                                    "date": {
                                      "description": "The date corresponding to the date t in format YYYY-MM-DD; all dates are distinct",
                                      "type": "string"
                                    },
                                    "factorReturn": {
                                      "description": "The monthly USD return of the factor at the date t; all the factorReturns arrays have the same length",
                                      "type": "array",
                                      "minItems": 1,
                                      "items": {
                                        "type": "number"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Sample of developed markets Fama-French factors",
                    "value": {
                      "famaFrenchFactors": {
                        "factorsRegion": "emergingMarkets",
                        "factorsComputationDate": "2023-11-06",
                        "factors": [
                          {
                            "factorName": "MKT-RF",
                            "factorReturns": [
                              {
                                "date": "1989-07-31",
                                "factorReturn": 0.006
                              }
                            ]
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/factors/residualization": {
      "post": {
        "tags": [
          "Factors"
        ],
        "summary": "Residualization",
        "description": "Compute the residuals of a factor against a set of factors, using a returns-based linear regression analysis.\n\nReferences\n* [Factor Research, Factor Exposure Analysis: Exploring Residualization](https://insights.factorresearch.com/research-factor-exposure-analysis-exploring-residualization/)\n* [Catalina B. Garcia, Rom\u00e1n Salmeron, Claudia Garcia & Jose Garcia (2019): Residualization: justification, properties and application, Journal of Applied Statistics](https://doi.org/10.1080/02664763.2019.1701638)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "factors"
                ],
                "properties": {
                  "factors": {
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "object",
                      "required": [
                        "factorReturns"
                      ],
                      "properties": {
                        "factorReturns": {
                          "description": "factorReturns[t] is the return of the factor at the time t; all the factorReturns arrays must have the same length",
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        },
                        "factorResidualization": {
                          "description": "Whether to residualize the factor against all the other factors",
                          "type": "boolean",
                          "default": false
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Residualize the first factor among a set of 2 factors, observed during 3 time periods",
                  "value": {
                    "factors": [
                      {
                        "factorReturns": [
                          0.01,
                          0.02,
                          -0.01
                        ],
                        "factorResidualization": true
                      },
                      {
                        "factorReturns": [
                          0.025,
                          0.005,
                          -0.02
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "factors"
                  ],
                  "properties": {
                    "factors": {
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "type": "object",
                        "required": [
                          "residualizedFactorReturns"
                        ],
                        "properties": {
                          "residualizedFactorReturns": {
                            "description": "residualizedFactorReturns[t] is the return of the residualized factor at the time t",
                            "type": "array",
                            "items": {
                              "type": "number"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed returns of a residualized factor, observed during 3 time periods",
                    "value": {
                      "factors": [
                        {
                          "residualizedFactorReturns": [
                            -0.001885245901639342,
                            0.017622950819672134,
                            -0.0004918032786885261
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/clustering/hierarchical": {
      "post": {
        "tags": [
          "Assets / Clustering"
        ],
        "summary": "Hierarchical Clustering",
        "description": "Compute a partition of a universe of assets into clusters using the hierarchical clustering method from the hierarchical clustering-based risk parity portfolio optimization algorithm.\n\nReferences\n * [Thomas Raffinot, Hierarchical Clustering-Based Asset Allocation, The Journal of Portfolio Management Multi-Asset Special Issue 2018, 44 (2) 89-99](https://jpm.pm-research.com/content/44/2/89.abstract)\n * [Raffinot, Thomas, The Hierarchical Equal Risk Contribution Portfolio](https://ssrn.com/abstract=3237540)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets",
                  "assetsCorrelationMatrix"
                ],
                "properties": {
                  "assets": {
                    "description": "The number of assets",
                    "type": "integer",
                    "minimum": 2
                  },
                  "assetsCorrelationMatrix": {
                    "description": "assetsCorrelationMatrix[i][j] is the correlation between the asset i and the asset j",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "clusteringMethod": {
                    "type": "string",
                    "description": "The hierarchical clustering method to use",
                    "enum": [
                      "singleLinkage",
                      "averageLinkage",
                      "completeLinkage",
                      "wardLinkage"
                    ],
                    "default": "wardLinkage"
                  },
                  "clusters": {
                    "description": "The number of clusters to group the assets into; if not provided, it is computed using the gap statistic method, as described in the first reference",
                    "type": "integer",
                    "minimum": 1
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute a clustering representation of a universe of three assets",
                  "value": {
                    "assets": 3,
                    "assetsCorrelationMatrix": [
                      [
                        1,
                        0.7606306078350177,
                        0.15733356650676536
                      ],
                      [
                        0.7606306078350177,
                        1,
                        0.7606306078350177
                      ],
                      [
                        0.15733356650676536,
                        0.7606306078350177,
                        1
                      ]
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsGroups"
                  ],
                  "properties": {
                    "assetsGroups": {
                      "type": "array",
                      "description": "assetsGroups[k] is the indexes of the assets belonging to the assets group k",
                      "minItems": 1,
                      "uniqueItems": true,
                      "items": {
                        "type": "array",
                        "minItems": 1,
                        "uniqueItems": true,
                        "items": {
                          "type": "integer",
                          "minimum": 1
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed clustering representation of a universe of three assets",
                    "value": {
                      "assetsGroups": [
                        [
                          1
                        ],
                        [
                          2,
                          3
                        ]
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/clustering/ftca": {
      "post": {
        "tags": [
          "Assets / Clustering"
        ],
        "summary": "Fast Threshold Clustering",
        "description": "Compute a partition of a universe of assets into clusters using the fast threshold clustering algorithm (FTCA).\n\nReferences\n * [CSSA, Fast Threshold Clustering Algorithm (FTCA)](https://cssanalytics.wordpress.com/2013/11/26/fast-threshold-clustering-algorithm-ftca/)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets",
                  "assetsCorrelationMatrix"
                ],
                "properties": {
                  "assets": {
                    "description": "The number of assets",
                    "type": "integer",
                    "minimum": 2
                  },
                  "assetsCorrelationMatrix": {
                    "description": "assetsCorrelationMatrix[i][j] is the correlation between the asset i and the asset j",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "assetsCorrelationThreshold": {
                    "type": "number",
                    "minimum": -1,
                    "maximum": 1,
                    "default": 0.5,
                    "description": "The correlation threshold used to separate similar v.s. dissimilar assets"
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute a clustering representation of a universe of three assets, using the default correlation threshold of 0.5",
                  "value": {
                    "assets": 3,
                    "assetsCorrelationMatrix": [
                      [
                        1,
                        0.7606306078350177,
                        0.15733356650676536
                      ],
                      [
                        0.7606306078350177,
                        1,
                        0.7606306078350177
                      ],
                      [
                        0.15733356650676536,
                        0.7606306078350177,
                        1
                      ]
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsGroups"
                  ],
                  "properties": {
                    "assetsGroups": {
                      "type": "array",
                      "description": "assetsGroups[k] is the indexes of the assets belonging to the assets group k",
                      "minItems": 1,
                      "uniqueItems": true,
                      "items": {
                        "type": "array",
                        "minItems": 1,
                        "uniqueItems": true,
                        "items": {
                          "type": "integer",
                          "minimum": 1
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed clustering representation of a universe of three assets",
                    "value": {
                      "assetsGroups": [
                        [
                          1
                        ],
                        [
                          2,
                          3
                        ]
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/prices/adjusted": {
      "post": {
        "tags": [
          "Assets / Prices"
        ],
        "summary": "Adjusted Prices",
        "description": "Compute the backward-adjusted prices of one or several asset(s) for one or several date(s) from:\n* Unadjusted close prices\n* Capital distributions, like stock dividends\n* Splits, like stock splits\n\nThe adjustment base date is chosen to be the last date for which unadjusted prices are available, which implies that:\n* The price on the last date for which unadjusted prices are available is left unadjusted\n* The price on any other date is adjusted based on the capital distributions and the splits which occurred between this date and the last date for which unadjusted prices are available\n\nReferences\n* [Center for Research in Security Prices](https://www.crsp.org/products/documentation/crsp-calculations)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets"
                ],
                "properties": {
                  "assets": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "assetPrices"
                      ],
                      "properties": {
                        "assetPrices": {
                          "description": "assetPrices[t] contains price information for the asset at the date t",
                          "type": "array",
                          "minItems": 1,
                          "items": {
                            "type": "object",
                            "required": [
                              "date",
                              "close"
                            ],
                            "properties": {
                              "date": {
                                "type": "string",
                                "description": "The date corresponding to the date t in format YYYY-MM-DD; all dates must be distinct"
                              },
                              "open": {
                                "type": "number",
                                "description": "The open price of the asset at the date t; must be higher than or equal to the low price and lower than or equal to the high price",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              },
                              "high": {
                                "type": "number",
                                "description": "The high price of the asset at the date t; must be lower than or equal to the high price",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              },
                              "low": {
                                "type": "number",
                                "description": "The low price of the asset at the date t; must be higher than or equal to the low price",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              },
                              "close": {
                                "type": "number",
                                "description": "The close price of the asset at the date t; must be higher than or equal to the low price and lower than or equal to the high price",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              }
                            }
                          }
                        },
                        "assetDividends": {
                          "description": "assetDividends[t] contains dividend information for the asset at the date t",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "date",
                              "amount"
                            ],
                            "properties": {
                              "date": {
                                "type": "string",
                                "description": "The date corresponding to the date t in format YYYY-MM-DD, which is usually the ex-distribution date"
                              },
                              "amount": {
                                "type": "number",
                                "description": "The dividend amount distributed by the asset at the date t",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              }
                            }
                          }
                        },
                        "assetSplits": {
                          "description": "assetSplits[t] contains split information for the asset at the date t",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "date",
                              "factor"
                            ],
                            "properties": {
                              "date": {
                                "type": "string",
                                "description": "The date corresponding to the date t in format YYYY-MM-DD, which is usually the ex-distribution date"
                              },
                              "factor": {
                                "type": "number",
                                "description": "The split factor of the asset at the date t",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Illustrate the 1-to-5 TSLA stock split which took place on August 31, 2020",
                  "value": {
                    "assets": [
                      {
                        "assetPrices": [
                          {
                            "close": 2213.4,
                            "date": "2020-08-28"
                          },
                          {
                            "close": 498.32,
                            "date": "2020-08-31"
                          },
                          {
                            "close": 475.05,
                            "date": "2020-09-01"
                          }
                        ],
                        "assetSplits": [
                          {
                            "factor": 5,
                            "date": "2020-08-31"
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assets"
                  ],
                  "properties": {
                    "assets": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "assetAdjustedPrices"
                        ],
                        "properties": {
                          "assetAdjustedPrices": {
                            "description": "assetAdjustedPrices[t] contains adjusted price information for the asset at the date t",
                            "type": "array",
                            "minItems": 1,
                            "items": {
                              "type": "object",
                              "required": [
                                "date",
                                "fullyAdjustedClose"
                              ],
                              "properties": {
                                "date": {
                                  "type": "string",
                                  "description": "The date corresponding to the date t in format YYYY-MM-DD"
                                },
                                "fullyAdjustedClose": {
                                  "type": "number",
                                  "description": "The dividend(s) and split(s) adjusted close price of the asset at the date t",
                                  "minimum": 0,
                                  "exclusiveMinimum": true
                                },
                                "splitAdjustedClose": {
                                  "type": "number",
                                  "description": "The split(s) adjusted close price of the asset at the date t, only present if split(s) information are provided",
                                  "minimum": 0,
                                  "exclusiveMinimum": true
                                },
                                "dividendAdjustedClose": {
                                  "type": "number",
                                  "description": "The dividend(s) adjusted close price of the asset at the date t, only present if dividend(s) information are provided",
                                  "minimum": 0,
                                  "exclusiveMinimum": true
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Illustrate the 1-to-5 TSLA stock split which took place on August 31, 2020",
                    "value": {
                      "assets": [
                        {
                          "assetAdjustedPrices": [
                            {
                              "date": "2020-09-01",
                              "splitAdjustedClose": 475.05,
                              "fullyAdjustedClose": 475.05
                            },
                            {
                              "date": "2020-08-31",
                              "splitAdjustedClose": 498.32,
                              "fullyAdjustedClose": 498.32
                            },
                            {
                              "date": "2020-08-28",
                              "splitAdjustedClose": 442.68,
                              "fullyAdjustedClose": 442.68
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/prices/adjusted/forward": {
      "post": {
        "tags": [
          "Assets / Prices"
        ],
        "summary": "Forward-Adjusted Prices",
        "description": "Compute the forward-adjusted prices of one or several asset(s) for one or several date(s) from:\n* Unadjusted close prices\n* Capital distributions, like stock dividends\n* Splits, like stock splits\n\nThe adjustment base date is chosen to be the first date for which unadjusted prices are available, which implies that:\n* The price on the first date for which unadjusted prices are available is left unadjusted\n* The price on any other date is adjusted based on the capital distributions and the splits which occurred between this date and the first date for which unadjusted prices are available\n\nReferences\n* [Center for Research in Security Prices](https://www.crsp.org/products/documentation/crsp-calculations)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets"
                ],
                "properties": {
                  "assets": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "assetPrices"
                      ],
                      "properties": {
                        "assetPrices": {
                          "description": "assetPrices[t] contains price information for the asset at the date t",
                          "type": "array",
                          "minItems": 1,
                          "items": {
                            "type": "object",
                            "required": [
                              "date",
                              "close"
                            ],
                            "properties": {
                              "date": {
                                "type": "string",
                                "description": "The date corresponding to the date t in format YYYY-MM-DD; all dates must be distinct"
                              },
                              "open": {
                                "type": "number",
                                "description": "The open price of the asset at the date t; must be higher than or equal to the low price and lower than or equal to the high price",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              },
                              "high": {
                                "type": "number",
                                "description": "The high price of the asset at the date t; must be lower than or equal to the high price",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              },
                              "low": {
                                "type": "number",
                                "description": "The low price of the asset at the date t; must be higher than or equal to the low price",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              },
                              "close": {
                                "type": "number",
                                "description": "The close price of the asset at the date t; must be higher than or equal to the low price and lower than or equal to the high price",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              }
                            }
                          }
                        },
                        "assetDividends": {
                          "description": "assetDividends[t] contains dividend information for the asset at the date t",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "date",
                              "amount"
                            ],
                            "properties": {
                              "date": {
                                "type": "string",
                                "description": "The date corresponding to the date t in format YYYY-MM-DD, which is usually the ex-distribution date"
                              },
                              "amount": {
                                "type": "number",
                                "description": "The dividend amount distributed by the asset at the date t",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              }
                            }
                          }
                        },
                        "assetSplits": {
                          "description": "assetSplits[t] contains split information for the asset at the date t",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "date",
                              "factor"
                            ],
                            "properties": {
                              "date": {
                                "type": "string",
                                "description": "The date corresponding to the date t in format YYYY-MM-DD, which is usually the ex-distribution date"
                              },
                              "factor": {
                                "type": "number",
                                "description": "The split factor of the asset at the date t",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Illustrate the 1-to-5 TSLA stock split which took place on August 31, 2020",
                  "value": {
                    "assets": [
                      {
                        "assetPrices": [
                          {
                            "close": 2213.4,
                            "date": "2020-08-28"
                          },
                          {
                            "close": 498.32,
                            "date": "2020-08-31"
                          },
                          {
                            "close": 475.05,
                            "date": "2020-09-01"
                          }
                        ],
                        "assetSplits": [
                          {
                            "factor": 5,
                            "date": "2020-08-31"
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assets"
                  ],
                  "properties": {
                    "assets": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "assetAdjustedPrices"
                        ],
                        "properties": {
                          "assetAdjustedPrices": {
                            "description": "assetAdjustedPrices[t] contains adjusted price information for the asset at the date t",
                            "type": "array",
                            "minItems": 1,
                            "items": {
                              "type": "object",
                              "required": [
                                "date",
                                "fullyAdjustedClose"
                              ],
                              "properties": {
                                "date": {
                                  "type": "string",
                                  "description": "The date corresponding to the date t in format YYYY-MM-DD"
                                },
                                "fullyAdjustedClose": {
                                  "type": "number",
                                  "description": "The dividend(s) and split(s) adjusted close price of the asset at the date t",
                                  "minimum": 0,
                                  "exclusiveMinimum": true
                                },
                                "splitAdjustedClose": {
                                  "type": "number",
                                  "description": "The split(s) adjusted close price of the asset at the date t, only present if split(s) information are provided",
                                  "minimum": 0,
                                  "exclusiveMinimum": true
                                },
                                "dividendAdjustedClose": {
                                  "type": "number",
                                  "description": "The dividend(s) adjusted close price of the asset at the date t, only present if dividend(s) information are provided",
                                  "minimum": 0,
                                  "exclusiveMinimum": true
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Illustrate the 1-to-5 TSLA stock split which took place on August 31, 2020",
                    "value": {
                      "assets": [
                        {
                          "assetAdjustedPrices": [
                            {
                              "date": "2020-08-28",
                              "splitAdjustedClose": 2213.4,
                              "fullyAdjustedClose": 2213.4
                            },
                            {
                              "date": "2020-08-31",
                              "splitAdjustedClose": 2491.6,
                              "fullyAdjustedClose": 2491.6
                            },
                            {
                              "date": "2020-09-01",
                              "splitAdjustedClose": 2375.25,
                              "fullyAdjustedClose": 2375.25
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/returns": {
      "post": {
        "tags": [
          "Assets / Returns"
        ],
        "summary": "Arithmetic Returns",
        "description": "Compute the arithmetic return(s) of one or several asset(s) for one or several time period(s).\n\nReferences\n* [Wikipedia, Rate of Return](https://en.wikipedia.org/wiki/Rate_of_return#Return)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets"
                ],
                "properties": {
                  "assets": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "assetPrices"
                      ],
                      "properties": {
                        "assetPrices": {
                          "description": "assetPrices[t] is the price of the asset at the time t",
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number",
                            "minimum": 0,
                            "exclusiveMinimum": true
                          }
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute the arithmetic returns of two assets, one with prices 1,2 and the other with prices 2,3,6",
                  "value": {
                    "assets": [
                      {
                        "assetPrices": [
                          1,
                          2
                        ]
                      },
                      {
                        "assetPrices": [
                          2,
                          3,
                          6
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assets"
                  ],
                  "properties": {
                    "assets": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "assetReturns"
                        ],
                        "properties": {
                          "assetReturns": {
                            "description": "assetReturns[t] is the arithmetic return of the asset from the time t-1 to the time t, in percentage",
                            "type": "array",
                            "items": {
                              "type": "number"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed arithmetic returns for two assets",
                    "value": {
                      "assets": [
                        {
                          "assetReturns": [
                            1
                          ]
                        },
                        {
                          "assetReturns": [
                            0.5,
                            1
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/returns/logarithmic": {
      "post": {
        "tags": [
          "Assets / Returns"
        ],
        "summary": "Logarithmic Returns",
        "description": "Compute the logarithmic return(s) of one or several asset(s) for one or several time period(s).\n\nReferences\n* [Wikipedia, Logarithmic or continuously compounded return](https://en.wikipedia.org/wiki/Rate_of_return#Logarithmic_or_continuously_compounded_return)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets"
                ],
                "properties": {
                  "assets": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "assetPrices"
                      ],
                      "properties": {
                        "assetPrices": {
                          "description": "assetPrices[t] is the price of the asset at the time t",
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number",
                            "minimum": 0,
                            "exclusiveMinimum": true
                          }
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute the logarithmic returns of two assets, one with prices 1,2 and the other with prices 2,3,6",
                  "value": {
                    "assets": [
                      {
                        "assetPrices": [
                          1,
                          2
                        ]
                      },
                      {
                        "assetPrices": [
                          2,
                          3,
                          6
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assets"
                  ],
                  "properties": {
                    "assets": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "assetReturns"
                        ],
                        "properties": {
                          "assetReturns": {
                            "description": "assetReturns[t] is the logarithmic return of the asset from the time t-1 to the time t, in percentage",
                            "type": "array",
                            "items": {
                              "type": "number"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed logarithmic returns for two assets",
                    "value": {
                      "assets": [
                        {
                          "assetReturns": [
                            0.6931471805599453
                          ]
                        },
                        {
                          "assetReturns": [
                            0.4054651081081644,
                            0.6931471805599453
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/returns/mean": {
      "post": {
        "tags": [
          "Assets / Returns / Moments"
        ],
        "summary": "Mean",
        "description": "Compute the arithmetic average of the returns of an asset.\n\nReferences\n* [Wikipedia, Arithmetic Average Rate of Return](https://en.wikipedia.org/wiki/Rate_of_return#Arithmetic_average_rate_of_return)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets"
                ],
                "properties": {
                  "assets": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "assetReturns"
                      ],
                      "properties": {
                        "assetReturns": {
                          "description": "assetReturns[t] is the return of the asset at the time t",
                          "type": "array",
                          "minItems": 1,
                          "items": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute the arithmetic mean return of two assets, one with returns 10%, -5% and the other with returns 0%,-1%,1%",
                  "value": {
                    "assets": [
                      {
                        "assetReturns": [
                          0.1,
                          -0.05
                        ]
                      },
                      {
                        "assetReturns": [
                          0,
                          -0.01,
                          0.01
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assets"
                  ],
                  "properties": {
                    "assets": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "assetMean"
                        ],
                        "properties": {
                          "assetMean": {
                            "description": "The arithmetic mean of the returns of the asset",
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed average arithmetic mean of 2.5% for the first asset, and average arithmetic mean of 0% for the second asset",
                    "value": {
                      "assets": [
                        {
                          "assetMean": 0.025
                        },
                        {
                          "assetMean": 0
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/returns/backfilled": {
      "post": {
        "tags": [
          "Assets / Returns"
        ],
        "summary": "Backfilled Returns",
        "description": "Compute the missing return(s) of one or several asset(s) using the backfilling procedure described in the first reference, applied recursively as described in the second reference.\n\nReferences\n* [Sebastien Page (2013) How to Combine Long and Short Return Histories Efficiently, Financial Analysts Journal, 69:1, 45-52](https://www.tandfonline.com/doi/abs/10.2469/faj.v69.n1.3)\n* [Stambaugh, Robert F. 1997. Analyzing Investments Whose Histories Differ in Length. Journal of Financial Economics, vol. 45, no. 3 (September):285\u2013331.](https://www.sciencedirect.com/science/article/pii/S0304405X97000202)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets"
                ],
                "properties": {
                  "assets": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "assetReturns"
                      ],
                      "properties": {
                        "assetReturns": {
                          "description": "assetReturns[t] is the return of the asset at the time t; the last time of all assetReturns arrays is supposed to be a common time",
                          "type": "array",
                          "minItems": 1,
                          "items": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  },
                  "assetsReturnsBackfillingMethod": {
                    "type": "string",
                    "description": "The method to backfill (i.e., simulate) missing asset returns",
                    "enum": [
                      "betaAdjusting",
                      "conditionalSampling",
                      "residualsRecycling"
                    ],
                    "default": "residualsRecycling"
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Backfill the missing asset return (over the first time period) of the second asset",
                  "value": {
                    "assets": [
                      {
                        "assetReturns": [
                          0.05,
                          0.1,
                          0.09,
                          0.18
                        ]
                      },
                      {
                        "assetReturns": [
                          0.31,
                          0.14,
                          0.29
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assets"
                  ],
                  "properties": {
                    "assets": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "assetReturns"
                        ],
                        "properties": {
                          "assetReturns": {
                            "description": "assetReturns[t] is the backfilled return of the asset at the time t",
                            "type": "array",
                            "minItems": 1,
                            "items": {
                              "type": "number"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Backfilled missing asset return of the second asset",
                    "value": {
                      "assets": [
                        {
                          "assetReturns": [
                            0.05,
                            0.1,
                            0.09,
                            0.18
                          ]
                        },
                        {
                          "assetReturns": [
                            0.18,
                            0.31,
                            0.14,
                            0.29
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/returns/transformation/turbulence-partitioned": {
      "post": {
        "tags": [
          "Assets / Returns Transformation"
        ],
        "summary": "Turbulence-Partitioned Returns",
        "description": "Partition asset returns into several subsets based on the value of their turbulence index.\n\nReferences\n* [George Chow, Jacquier, E., Kritzman, M., & Kenneth Lowry. (1999). Optimal Portfolios in Good Times and Bad. Financial Analysts Journal, 55(3), 65\u201373.](https://www.jstor.org/stable/4480169)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets"
                ],
                "properties": {
                  "assets": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "assetReturns"
                      ],
                      "properties": {
                        "assetReturns": {
                          "description": "assetReturns[t] is the return of the asset at the time t; all assetReturns arrays must have the same length",
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  },
                  "turbulencePartitioningMethod": {
                    "type": "string",
                    "description": "The method to use to partition the asset returns from their turbulence value",
                    "enum": [
                      "thresholding",
                      "clustering"
                    ],
                    "default": "thresholding"
                  },
                  "turbulenceThresholds": {
                    "type": "array",
                    "description": "The turbulence threshold(s) in case the turbulence partitioning method is 'thresholding', in percentage; in case several turbulence thresholds are provided, they must be provided in increasing order",
                    "default": [
                      0.75
                    ],
                    "minItems": 1,
                    "maxItems": 4,
                    "items": {
                      "type": "number",
                      "minimum": 0,
                      "exclusiveMinimum": true,
                      "maximum": 1,
                      "exclusiveMaximum": true
                    }
                  },
                  "turbulenceThresholdsConversionMethod": {
                    "type": "string",
                    "description": "The method to convert the turbulence threshold(s) into turbulence score(s) in case the turbulence partitioning method is 'thresholding'",
                    "enum": [
                      "empiricalQuantileDistribution",
                      "chisquareInverseDistribution"
                    ],
                    "default": "chisquareInverseDistribution"
                  },
                  "turbulencePartitions": {
                    "type": "integer",
                    "description": "The number of desired partition(s) in case the turbulence partitioning method is 'clustering'",
                    "minimum": 2,
                    "maximum": 5,
                    "default": 2
                  },
                  "turbulencePartitioningConstraints": {
                    "type": "object",
                    "properties": {
                      "minimumPartitionsReturns": {
                        "type": "integer",
                        "description": "The minimum number of desired asset return(s) per partition",
                        "minimum": 0,
                        "default": 0
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example (turbulence thresholds)": {
                  "description": "Partition the asset returns of two assets, using two turbulence thresholds of 80% and 95%",
                  "value": {
                    "assets": [
                      {
                        "assetReturns": [
                          0,
                          0.1,
                          0.05,
                          -0.01,
                          0.025
                        ]
                      },
                      {
                        "assetReturns": [
                          0.005,
                          0.05,
                          0.1,
                          -0.02,
                          0
                        ]
                      }
                    ],
                    "turbulenceThresholds": [
                      0.8,
                      0.95
                    ]
                  }
                },
                "Example (number of turbulence partitions)": {
                  "description": "Partition the asset returns of two assets, using two turbulence partitions automatically determined",
                  "value": {
                    "assets": [
                      {
                        "assetReturns": [
                          0,
                          0.1,
                          0.05,
                          -0.01,
                          0.025
                        ]
                      },
                      {
                        "assetReturns": [
                          0.005,
                          0.05,
                          0.1,
                          -0.02,
                          0
                        ]
                      }
                    ],
                    "turbulencePartitioningMethod": "clustering",
                    "turbulencePartitions": 2
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "partitions"
                  ],
                  "properties": {
                    "partitions": {
                      "description": "partitions[k] corresponds to all the asset returns whose turbulence index is lower than or equal to the turbulence score associated with the turbulence threshold turbulenceThresholds[k]; the length of the array partitions is equal to the length of the array turbulenceThresholds plus 1",
                      "type": "array",
                      "minItems": 2,
                      "maxItems": 4,
                      "items": {
                        "type": "object",
                        "required": [
                          "assets"
                        ],
                        "properties": {
                          "assets": {
                            "type": "array",
                            "minItems": 1,
                            "items": {
                              "type": "object",
                              "required": [
                                "assetReturns"
                              ],
                              "properties": {
                                "assetReturns": {
                                  "description": "assetReturns[t] is the return of the asset at the time t; all assetReturns arrays have the same length; the array assetReturns is possibly empty in case no asset returns have a turbulence index lower than or equal to the turbulence score associated with the turbulence threshold turbulenceThresholds[k]",
                                  "type": "array",
                                  "minItems": 0,
                                  "items": {
                                    "type": "number"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed partitioning of the asset returns of two assets, using 2 turbulence thresholds",
                    "value": {
                      "partitions": [
                        {
                          "assets": [
                            {
                              "assetReturns": [
                                0,
                                -0.01,
                                0.025
                              ]
                            },
                            {
                              "assetReturns": [
                                0.005,
                                -0.02,
                                0
                              ]
                            }
                          ]
                        },
                        {
                          "assets": [
                            {
                              "assetReturns": [
                                0.1,
                                0.05
                              ]
                            },
                            {
                              "assetReturns": [
                                0.05,
                                0.1
                              ]
                            }
                          ]
                        },
                        {
                          "assets": [
                            {
                              "assetReturns": []
                            },
                            {
                              "assetReturns": []
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/returns/simulation/bootstrap": {
      "post": {
        "tags": [
          "Assets / Monte Carlo Returns Simulation"
        ],
        "summary": "Bootstrap",
        "description": "Simulate the return(s) of one or several asset(s) for one or several time period(s) using a bootstrap method.\n\nReferences\n* [Efron, B. (1979), Bootstrap methods: Another look at the jackknife, The Annals of Statistics 7, 1-26](https://projecteuclid.org/journals/annals-of-statistics/volume-7/issue-1/Bootstrap-Methods-Another-Look-at-the-Jackknife/10.1214/aos/1176344552.full)\n* [Politis, D. N. and Romano, J. P., A circular block resampling procedure for stationary data, in R. Lepage and L. Billard, eds, Exploring the Limits of Bootstrap, Wiley, New York, pp. 263-270](https://statistics.stanford.edu/technical-reports/circular-block-resampling-procedure-stationary-data)\n* [Politis, D. N. and Romano, J. P., The stationary bootstrap, Journal of the American Statistical Association 89, 1303-1313](https://www.jstor.org/stable/2290993)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets"
                ],
                "properties": {
                  "assets": {
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "object",
                      "required": [
                        "assetReturns"
                      ],
                      "properties": {
                        "assetReturns": {
                          "description": "assetReturns[t] is the return of the asset over the time period t; all assetReturns arrays must have the same length",
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  },
                  "bootstrapMethod": {
                    "type": "string",
                    "description": "The bootstrap method to use",
                    "enum": [
                      "iid",
                      "circularBlock",
                      "stationaryBlock"
                    ],
                    "default": "stationaryBlock"
                  },
                  "bootstrapBlockLength": {
                    "type": "integer",
                    "description": "The length of the blocks to use in case the bootstrap method is 'circularBlock', in time periods; if not provided, defaults to [3.15 * the common length of the assetReturns arrays^1/3]",
                    "minimum": 2
                  },
                  "bootstrapAverageBlockLength": {
                    "type": "number",
                    "description": "The average length of the blocks to use in case the bootstrap method is 'stationaryBlock', in time periods; if not provided, defaults to the inverse of 3.15 * the common length of the assetReturns arrays^1/3",
                    "minimum": 1
                  },
                  "simulations": {
                    "type": "integer",
                    "description": "The number of simulations to perform",
                    "minimum": 1,
                    "default": 1
                  },
                  "simulationsLength": {
                    "type": "integer",
                    "description": "The number of time period(s) to simulate per simulation; if not provided, defaults to the common length of the assetReturns arrays",
                    "minimum": 1
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Perform 5 simulations over 4 time periods of the returns of two assets using the circular block bootstrap method with a block length of 2 time periods.",
                  "value": {
                    "assets": [
                      {
                        "assetReturns": [
                          0.1,
                          -0.05,
                          0.01,
                          0.025,
                          -0.1
                        ]
                      },
                      {
                        "assetReturns": [
                          0,
                          0.01,
                          0.02,
                          -0.01,
                          0.05
                        ]
                      }
                    ],
                    "bootstrapMethod": "circularBlock",
                    "bootstrapBlockLength": 2,
                    "simulations": 5,
                    "simulationsLength": 4
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "simulations"
                  ],
                  "properties": {
                    "simulations": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "assets"
                        ],
                        "properties": {
                          "assets": {
                            "description": "assets[i] is the data for the i-th asset",
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "assetReturns"
                              ],
                              "properties": {
                                "assetReturns": {
                                  "description": "assetReturns[t] is the simulated return of the i-th asset for the t-th time period",
                                  "type": "array",
                                  "minItems": 1,
                                  "items": {
                                    "type": "number"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Results of 1 simulation of returns for two assets and for 2 time periods",
                    "value": {
                      "simulations": [
                        {
                          "assets": [
                            {
                              "assetReturns": [
                                0.01,
                                0.02
                              ]
                            },
                            {
                              "assetReturns": [
                                0.01,
                                -0.02
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/returns/simulation/monte-carlo/gaussian": {
      "post": {
        "tags": [
          "Assets / Monte Carlo Returns Simulation"
        ],
        "summary": "Gaussian Distribution",
        "description": "Simulate i.i.d. returns of one asset using a Gaussian distribution, optionally subject to an exact sample mean and (biased) sample variance constraint.\n\nReferences\n* [Wikipedia, Normal distribution](https://en.wikipedia.org/wiki/Normal_distribution)\n* [George Marsaglia & I.J. Good (1980) C69. Generating a normal sample with given sample mean and variance, Journal of Statistical Computation and Simulation, 11:1, 71-74](http://www.tandfonline.com/action/showCitFormats?doi=10.1080/00949658008810390)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assetMean",
                  "assetStandardDeviation"
                ],
                "properties": {
                  "assetMean": {
                    "type": "number",
                    "description": "The arithmetic average return of the asset, corresponding to the mean of the Gaussian distribution"
                  },
                  "assetStandardDeviation": {
                    "type": "number",
                    "description": "The volatility of the asset arithmetic returns, corresponding to the standard deviation of the Gaussian distribution",
                    "minimum": 0,
                    "exclusiveMinimum": true
                  },
                  "assetParameters": {
                    "type": "string",
                    "description": "Determine whether assetMean and assetStandardDeviation^2 are population parameters of the simulated Gaussian distribution or if they are sample parameters, in which case the sample mean and the (biased) sample variance of the simulated asset returns will exactly match assetMean and assetStandardDeviation^2, for each simulation",
                    "enum": [
                      "population",
                      "sample"
                    ],
                    "default": "population"
                  },
                  "simulations": {
                    "type": "integer",
                    "description": "The number of simulations to perform",
                    "minimum": 1,
                    "default": 1
                  },
                  "simulationsLength": {
                    "type": "integer",
                    "description": "The number of time period(s) to simulate per simulation",
                    "minimum": 1,
                    "default": 1
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Perform 5 simulations over 4 time periods using a Gaussian distribution with mean 5% and standard deviation 20%.",
                  "value": {
                    "assetMean": 0.05,
                    "assetStandardDeviation": 0.2,
                    "simulations": 5,
                    "simulationsLength": 4
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "simulations"
                  ],
                  "properties": {
                    "simulations": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "assets"
                        ],
                        "properties": {
                          "assets": {
                            "description": "assets[i] is the data for the i-th asset",
                            "type": "array",
                            "minItems": 1,
                            "maxItems": 1,
                            "items": {
                              "type": "object",
                              "required": [
                                "assetReturns"
                              ],
                              "properties": {
                                "assetReturns": {
                                  "description": "assetReturns[t] is the simulated return of the i-th asset for the t-th time period",
                                  "type": "array",
                                  "minItems": 1,
                                  "items": {
                                    "type": "number"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Results of 1 simulation of returns for 2 time periods",
                    "value": {
                      "simulations": [
                        {
                          "assets": [
                            {
                              "assetReturns": [
                                0.01,
                                0.02
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/returns/fitting/gaussian": {
      "post": {
        "tags": [
          "Assets / Returns Fitting"
        ],
        "summary": "Gaussian Distribution",
        "description": "Fit the returns of one asset using a Gaussian distribution.\n\nReferences\n* [Wikipedia, Normal distribution](https://en.wikipedia.org/wiki/Normal_distribution)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets"
                ],
                "properties": {
                  "assets": {
                    "type": "array",
                    "description": "assets[i] is the data for the i-th asset",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "assetReturns"
                      ],
                      "properties": {
                        "assetReturns": {
                          "description": "assetReturns[t] is the return of the i-th asset at the time t",
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Fit a Gaussian distribution to the returns of one asset",
                  "value": {
                    "assets": [
                      {
                        "assetReturns": [
                          0.01,
                          0.03,
                          -0.01,
                          0
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assets"
                  ],
                  "properties": {
                    "assets": {
                      "description": "assets[i] is the data for the i-th asset",
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "assetMean",
                          "assetStandardDeviation"
                        ],
                        "properties": {
                          "assetMean": {
                            "type": "number",
                            "description": "The mean of the Gaussian distribution fitted to the returns of the i-th asset, corresponding to the arithmetic average of the returns of the i-th asset"
                          },
                          "assetStandardDeviation": {
                            "type": "number",
                            "description": "The standard deviation of the Gaussian distribution fitted to the returns of the i-th asset, corresponding to the standard deviation of the returns of the i-th asset",
                            "minimum": 0,
                            "exclusiveMinimum": true
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Results of the fitting of a Gaussian distribution to the returns of one asset",
                    "value": {
                      "assets": [
                        {
                          "assetMean": 0.05,
                          "assetStandardDeviation": 0.005
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/returns/simulation/monte-carlo/gaussian/mixture": {
      "post": {
        "tags": [
          "Assets / Monte Carlo Returns Simulation"
        ],
        "summary": "Gaussian Mixture Distribution",
        "description": "Simulate i.i.d. return(s) of one asset for one or several time period(s) using a Gaussian mixture distribution.\n\nReferences\n* [Wikipedia, Mixture model, Gaussian mixture model](https://en.wikipedia.org/wiki/Mixture_model#Gaussian_mixture_model)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assetMixtureComponents"
                ],
                "properties": {
                  "assetMixtureComponents": {
                    "description": "assetMixtureComponents[i] is the data for the i-th component of the Gaussian mixture distribution",
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 5,
                    "items": {
                      "type": "object",
                      "required": [
                        "assetMixtureComponentWeight",
                        "assetMixtureComponentMean",
                        "assetMixtureComponentStandardDeviation"
                      ],
                      "properties": {
                        "assetMixtureComponentWeight": {
                          "description": "The weight of the i-th component of the Gaussian mixture distribution, in percentage; the sum of all the assetMixtureComponentWeight must be equal to 1",
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        },
                        "assetMixtureComponentMean": {
                          "description": "The mean of the i-th component of the Gaussian mixture distribution",
                          "type": "number"
                        },
                        "assetMixtureComponentStandardDeviation": {
                          "description": "The standard deviation of the i-th component of the Gaussian mixture distribution",
                          "type": "number",
                          "minimum": 0,
                          "exclusiveMinimum": true
                        }
                      }
                    }
                  },
                  "simulations": {
                    "type": "integer",
                    "description": "The number of simulations to perform",
                    "minimum": 1,
                    "default": 1
                  },
                  "simulationsLength": {
                    "type": "integer",
                    "description": "The number of time period(s) to simulate per simulation",
                    "minimum": 1,
                    "default": 1
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Perform 5 simulations over 4 time periods using a Gaussian mixture distribution with 2 components of respective mean 0%/5% and standard deviation 20%/10%.",
                  "value": {
                    "assetMixtureComponents": [
                      {
                        "assetMixtureComponentWeight": 0.6,
                        "assetMixtureComponentMean": 0,
                        "assetMixtureComponentStandardDeviation": 0.2
                      },
                      {
                        "assetMixtureComponentWeight": 0.4,
                        "assetMixtureComponentMean": 0.05,
                        "assetMixtureComponentStandardDeviation": 0.1
                      }
                    ],
                    "simulations": 5,
                    "simulationsLength": 4
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "simulations"
                  ],
                  "properties": {
                    "simulations": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "assets"
                        ],
                        "properties": {
                          "assets": {
                            "description": "assets[i] is the data for the i-th asset",
                            "type": "array",
                            "minItems": 1,
                            "maxItems": 1,
                            "items": {
                              "type": "object",
                              "required": [
                                "assetReturns"
                              ],
                              "properties": {
                                "assetReturns": {
                                  "description": "assetReturns[t] is the simulated return of the i-th asset for the t-th time period",
                                  "type": "array",
                                  "minItems": 1,
                                  "items": {
                                    "type": "number"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Results of 1 simulation of returns for 2 time periods",
                    "value": {
                      "simulations": [
                        {
                          "assets": [
                            {
                              "assetReturns": [
                                0.01,
                                0.02
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/returns/fitting/gaussian/mixture": {
      "post": {
        "tags": [
          "Assets / Returns Fitting"
        ],
        "summary": "Gaussian Mixture Distribution",
        "description": "Fit the returns of one asset using a Gaussian mixture distribution.\n\nReferences\n* [Wikipedia, Mixture model, Gaussian mixture model](https://en.wikipedia.org/wiki/Mixture_model#Gaussian_mixture_model)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets"
                ],
                "properties": {
                  "assets": {
                    "type": "array",
                    "description": "assets[i] is the data for the i-th asset",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "assetReturns"
                      ],
                      "properties": {
                        "assetReturns": {
                          "description": "assetReturns[t] is the return of the i-th asset at the time t",
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  },
                  "mixtureFittingMethod": {
                    "type": "string",
                    "description": "The method to use to fit the Gaussian mixture to the assets returns",
                    "enum": [
                      "turbulencePartitioning",
                      "expectationMaximization"
                    ],
                    "default": "turbulencePartitioning"
                  },
                  "mixtureFittingMethodParameters": {
                    "type": "object",
                    "properties": {
                      "turbulencePartitioningMethod": {
                        "type": "string",
                        "description": "The method to use to partition the assets returns from their turbulence value in case the Gaussian mixture fitting method is 'turbulencePartitioning'",
                        "enum": [
                          "thresholding",
                          "clustering"
                        ],
                        "default": "clustering"
                      },
                      "turbulenceThresholds": {
                        "type": "array",
                        "description": "The turbulence threshold(s) in case the Gaussian mixture fitting method is 'turbulencePartitioning' and the turbulence partitioning method is 'thresholding', in percentage; in case several turbulence thresholds are provided, they must be provided in increasing order",
                        "default": [
                          0.75
                        ],
                        "minItems": 1,
                        "maxItems": 4,
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "exclusiveMinimum": true,
                          "maximum": 1,
                          "exclusiveMaximum": true
                        }
                      },
                      "turbulenceThresholdsConversionMethod": {
                        "type": "string",
                        "description": "The method to convert the turbulence threshold(s) into turbulence score(s) in case the Gaussian mixture fitting method is 'turbulencePartitioning' and the turbulence partitioning method is 'thresholding'",
                        "enum": [
                          "empiricalQuantileDistribution",
                          "chisquareInverseDistribution"
                        ],
                        "default": "chisquareInverseDistribution"
                      },
                      "turbulencePartitions": {
                        "type": "integer",
                        "description": "The number of desired partition(s) in case the Gaussian mixture fitting method is 'turbulencePartitioning' and the turbulence partitioning method is 'clustering'",
                        "minimum": 2,
                        "maximum": 5
                      },
                      "turbulencePartitioningConstraints": {
                        "type": "object",
                        "properties": {
                          "minimumPartitionsReturns": {
                            "type": "integer",
                            "description": "The minimum number of desired assets returns per partition in case the Gaussian mixture fitting method is 'turbulencePartitioning'",
                            "minimum": 2,
                            "default": 2
                          }
                        }
                      },
                      "mixtureComponents": {
                        "type": "integer",
                        "description": "The number of desired Gaussian mixture components in case the Gaussian mixture fitting method is 'expectationMaximization'",
                        "minimum": 2,
                        "maximum": 5
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Fit a Gaussian mixture distribution to the returns of one asset, using default parameters",
                  "value": {
                    "assets": [
                      {
                        "assetReturns": [
                          0.01,
                          0.03,
                          -0.01,
                          0
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assets"
                  ],
                  "properties": {
                    "assets": {
                      "description": "assets[i] is the data for the i-th asset",
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "assetMixtureComponents"
                        ],
                        "properties": {
                          "assetMixtureComponents": {
                            "description": "assetMixtureComponents[j] is the data for the j-th component of the Gaussian mixture distribution fitted to the returns of the i-th asset",
                            "type": "array",
                            "minItems": 1,
                            "maxItems": 5,
                            "items": {
                              "type": "object",
                              "required": [
                                "assetMixtureComponentWeight",
                                "assetMixtureComponentMean",
                                "assetMixtureComponentStandardDeviation"
                              ],
                              "properties": {
                                "assetMixtureComponentWeight": {
                                  "description": "The weight of the j-th component of the Gaussian mixture distribution fitted to the returns of the i-th asset, in percentage; the sum of all the assetMixtureComponentWeight is equal to 1",
                                  "type": "number",
                                  "minimum": 0,
                                  "maximum": 1
                                },
                                "assetMixtureComponentMean": {
                                  "description": "The mean of the j-th component of the Gaussian mixture distribution fitted to the returns of the i-th asset",
                                  "type": "number"
                                },
                                "assetMixtureComponentStandardDeviation": {
                                  "description": "The standard deviation of the j-th component of the Gaussian mixture distribution fitted to the returns of the i-th asset",
                                  "type": "number",
                                  "minimum": 0,
                                  "exclusiveMinimum": true
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Results of the fitting of a Gaussian mixture distribution to the returns of one asset",
                    "value": {
                      "assets": [
                        {
                          "assetMixtureComponents": [
                            {
                              "assetMixtureComponentWeight": 0.75,
                              "assetMixtureComponentMean": 0.5,
                              "assetMixtureComponentStandardDeviation": 0.01
                            },
                            {
                              "assetMixtureComponentWeight": 0.25,
                              "assetMixtureComponentMean": 0,
                              "assetMixtureComponentStandardDeviation": 0.1
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/returns/simulation/monte-carlo/gaussian/multivariate": {
      "post": {
        "tags": [
          "Assets / Monte Carlo Returns Simulation"
        ],
        "summary": "Multivariate Gaussian Distribution",
        "description": "Simulate i.i.d. returns of several assets for one or several time period(s) using a multivariate Gaussian distribution, optionally subject to an exact sample mean vector and (biased) sample covariance matrix constraint.\n\nReferences\n* [Wikipedia, Normal distribution](https://en.wikipedia.org/wiki/Normal_distribution)\n* [K.-H. Li, Generation of random matrices with orthonormal columns and multivariate normal variates with given sample mean and covariance, J. Statist. Comput. Simulation 43 (1992) 11\u201318](https://www.tandfonline.com/doi/abs/10.1080/00949659208811424)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assetsMeans",
                  "assetsCovarianceMatrix"
                ],
                "properties": {
                  "assets": {
                    "type": "integer",
                    "description": "The number of assets",
                    "minimum": 2
                  },
                  "assetsMeans": {
                    "description": "assetsMeans[i] is the arithmetic average return of asset i, corresponding to the i-th component of the mean vector of the multivariate Gaussian distribution",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "number"
                    }
                  },
                  "assetsCovarianceMatrix": {
                    "description": "assetsCovarianceMatrix[i][j] is the covariance between the arithmetic returns of asset i and the arithmetic returns of asset j, corresponding to the i-th row and the j-th column of the covariance matrix of the multivariate Gaussian distribution",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "assetsParameters": {
                    "type": "string",
                    "description": "Determine whether assetsMeans and assetsCovarianceMatrix are population parameters of the simulated multivariate Gaussian distribution or if they are sample parameters, in which case the sample mean vector and the (biased) sample covariance matrix of the simulated assets returns will exactly match assetsMeans and assetsCovarianceMatrix, for each simulation",
                    "enum": [
                      "population",
                      "sample"
                    ],
                    "default": "population"
                  },
                  "simulations": {
                    "type": "integer",
                    "description": "The number of simulations to perform",
                    "minimum": 1,
                    "default": 1
                  },
                  "simulationsLength": {
                    "type": "integer",
                    "description": "The number of time period(s) to simulate per simulation; defaults to the minimum value of 1 in case assetsParameters equals to 'population' or to the minimum value of assets + 1 in case assetsParameters equals to 'sample'"
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Perform 5 simulations over 4 time periods using a multivariate Gaussian distribution with mean vector [5%, 0%] and covariance matrix [[0.04, 0],[0, 0.04]].",
                  "value": {
                    "assets": 2,
                    "assetsMeans": [
                      0.05,
                      0
                    ],
                    "assetsCovarianceMatrix": [
                      [
                        0.04,
                        0
                      ],
                      [
                        0,
                        0.04
                      ]
                    ],
                    "simulations": 5,
                    "simulationsLength": 4
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "simulations"
                  ],
                  "properties": {
                    "simulations": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "assets"
                        ],
                        "properties": {
                          "assets": {
                            "description": "assets[i] is the data for the i-th asset",
                            "type": "array",
                            "minItems": 2,
                            "items": {
                              "type": "object",
                              "required": [
                                "assetReturns"
                              ],
                              "properties": {
                                "assetReturns": {
                                  "description": "assetReturns[t] is the simulated return of the i-th asset for the t-th time period",
                                  "type": "array",
                                  "minItems": 1,
                                  "items": {
                                    "type": "number"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Results of 1 simulation of returns for two assets and 2 time periods",
                    "value": {
                      "simulations": [
                        {
                          "assets": [
                            {
                              "assetReturns": [
                                0.01,
                                0.02
                              ]
                            },
                            {
                              "assetReturns": [
                                -0.01,
                                -0.02
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/returns/fitting/gaussian/multivariate": {
      "post": {
        "tags": [
          "Assets / Returns Fitting"
        ],
        "summary": "Multivariate Gaussian Distribution",
        "description": "Fit the returns of several assets using a multivariate Gaussian distribution. \n\nReferences\n* [Wikipedia, Normal distribution](https://en.wikipedia.org/wiki/Normal_distribution)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets"
                ],
                "properties": {
                  "assets": {
                    "type": "array",
                    "description": "assets[i] is the data for the i-th asset",
                    "minItems": 2,
                    "items": {
                      "type": "object",
                      "required": [
                        "assetReturns"
                      ],
                      "properties": {
                        "assetReturns": {
                          "description": "assetReturns[t] is the return of the i-th asset at the time t; all assetReturns arrays must have the same length",
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Fit a multivariate Gaussian distribution to the returns of two assets",
                  "value": {
                    "assets": [
                      {
                        "assetReturns": [
                          0.01,
                          0.03,
                          -0.01,
                          0
                        ]
                      },
                      {
                        "assetReturns": [
                          0.02,
                          0.001,
                          -0.002,
                          0.01
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assets",
                    "assetsMeans",
                    "assetsCovarianceMatrix"
                  ],
                  "properties": {
                    "assets": {
                      "type": "integer",
                      "description": "The number of assets",
                      "minimum": 2
                    },
                    "assetsMeans": {
                      "description": "assetsMeans[i] is the i-th component of the mean vector of the multivariate Gaussian distribution, corresponding to the corresponding to the arithmetic average of the returns of the i-th asset",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number"
                      }
                    },
                    "assetsCovarianceMatrix": {
                      "description": "assetsCovarianceMatrix[i][j] is the i-th row and the j-th column of the covariance matrix of the multivariate Gaussian distribution, corresponding to the covariance between the returns of asset i and the returns of asset j",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "number"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Results of the fitting of a multivariate Gaussian distribution to the returns of two assets",
                    "value": {
                      "assets": 2,
                      "assetsMeans": [
                        0.05,
                        0.001
                      ],
                      "assetsCovarianceMatrix": [
                        [
                          0.010000000000000002,
                          -0.0025000000000000005
                        ],
                        [
                          -0.0025000000000000005,
                          0.0025000000000000005
                        ]
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/returns/simulation/monte-carlo/gaussian/multivariate/mixture": {
      "post": {
        "tags": [
          "Assets / Monte Carlo Returns Simulation"
        ],
        "summary": "Multivariate Gaussian Mixture Distribution",
        "description": "Simulate i.i.d. return(s) of several assets for one or several time period(s) using a multivariate Gaussian mixture distribution.\n\nReferences\n* [Wikipedia, Mixture model, Gaussian mixture model](https://en.wikipedia.org/wiki/Mixture_model#Gaussian_mixture_model)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assetsMixtureComponents"
                ],
                "properties": {
                  "assetsMixtureComponents": {
                    "description": "assetsMixtureComponents[i] is the data for the i-th component of the multivariate Gaussian mixture distribution",
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 5,
                    "items": {
                      "type": "object",
                      "required": [
                        "mixtureComponentWeight",
                        "mixtureComponentMeanReturns",
                        "mixtureComponentCovarianceMatrix"
                      ],
                      "properties": {
                        "mixtureComponentWeight": {
                          "description": "The weight of the i-th component of the multivariate Gaussian mixture distribution, in percentage; the sum of all the mixtureComponentWeight must be equal to 1",
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        },
                        "mixtureComponentMeanReturns": {
                          "description": "mixtureComponentMeanReturns[j] is the j-th component of the mean vector of the i-th component of the multivariate Gaussian mixture distribution",
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        },
                        "mixtureComponentCovarianceMatrix": {
                          "description": "mixtureComponentCovarianceMatrix[j][k] is the j-th row and the k-th column of the covariance matrix of the i-th component of the multivariate Gaussian mixture distribution",
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "array",
                            "minItems": 2,
                            "items": {
                              "type": "number"
                            }
                          }
                        }
                      }
                    }
                  },
                  "simulations": {
                    "type": "integer",
                    "description": "The number of simulations to perform",
                    "minimum": 1,
                    "default": 1
                  },
                  "simulationsLength": {
                    "type": "integer",
                    "description": "The number of time period(s) to simulate per simulation",
                    "minimum": 1,
                    "default": 1
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Perform 5 simulations over 4 time periods for two assets using a multivariate Gaussian mixture distribution with 2 components of respective mean vector [0%, 0%]/[5%, 5%] and and covariance matrix [[0.04, 0],[0, 0.04]]/[[0.01, 0],[0, 0.01]].",
                  "value": {
                    "assets": 2,
                    "assetsMixtureComponents": [
                      {
                        "mixtureComponentWeight": 0.6,
                        "mixtureComponentMeanReturns": [
                          0,
                          0
                        ],
                        "mixtureComponentCovarianceMatrix": [
                          [
                            0.04,
                            0
                          ],
                          [
                            0,
                            0.04
                          ]
                        ]
                      },
                      {
                        "mixtureComponentWeight": 0.4,
                        "mixtureComponentMeanReturns": [
                          0.05,
                          0.05
                        ],
                        "mixtureComponentCovarianceMatrix": [
                          [
                            0.01,
                            0
                          ],
                          [
                            0,
                            0.01
                          ]
                        ]
                      }
                    ],
                    "simulations": 5,
                    "simulationsLength": 4
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "simulations"
                  ],
                  "properties": {
                    "simulations": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "assets"
                        ],
                        "properties": {
                          "assets": {
                            "description": "assets[i] is the data for the i-th asset",
                            "type": "array",
                            "minItems": 2,
                            "items": {
                              "type": "object",
                              "required": [
                                "assetReturns"
                              ],
                              "properties": {
                                "assetReturns": {
                                  "description": "assetReturns[t] is the simulated return of the i-th asset for the t-th time period",
                                  "type": "array",
                                  "minItems": 1,
                                  "items": {
                                    "type": "number"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Results of 1 simulation of returns for 2 time periods",
                    "value": {
                      "simulations": [
                        {
                          "assets": [
                            {
                              "assetReturns": [
                                0.01,
                                0.02
                              ]
                            },
                            {
                              "assetReturns": [
                                -0.01,
                                -0.02
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/returns/simulation/monte-carlo/cornish-fisher": {
      "post": {
        "tags": [
          "Assets / Monte Carlo Returns Simulation"
        ],
        "summary": "Cornish-Fisher Distribution",
        "description": "Simulate i.i.d. returns of one asset for one or several time period(s) using a Cornish-Fisher distribution.\n\nReferences\n* [Maillard, Didier, A User\u2019s Guide to the Cornish Fisher Expansion](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=1997178)\n* [Lamb, John D., Maura E. Monville, and Kai-Hong Tee. Making Cornish\u2013Fisher Fit for Risk Measurement, Journal of Risk, Volume 21, Number 5, p. 53-81](http://doi.org/10.21314/JOR.2019.408)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assetMeanParameter",
                  "assetStandardDeviationParameter",
                  "assetSkewnessParameter",
                  "assetKurtosisParameter"
                ],
                "properties": {
                  "assetMeanParameter": {
                    "type": "number",
                    "description": "The mean parameter of the Cornish-Fisher distribution, corresponding to the arithmetic average return of the asset"
                  },
                  "assetStandardDeviationParameter": {
                    "type": "number",
                    "description": "The standard deviation parameter of the Cornish-Fisher distribution, corresponding approximately to the standard deviation of the asset arithmetic returns",
                    "minimum": 0,
                    "exclusiveMinimum": true
                  },
                  "assetSkewnessParameter": {
                    "type": "number",
                    "description": "The skewness parameter of the Cornish-Fisher distribution, corresponding approximately to the skewness of the asset arithmetic returns"
                  },
                  "assetKurtosisParameter": {
                    "type": "number",
                    "description": "The (excess) kurtosis parameter of the Cornish-Fisher distribution, corresponding approximately to the (excess) kurtosis of the asset arithmetic returns"
                  },
                  "simulations": {
                    "type": "integer",
                    "description": "The number of simulations to perform",
                    "minimum": 1,
                    "default": 1
                  },
                  "simulationsLength": {
                    "type": "integer",
                    "description": "The number of time period(s) to simulate per simulation",
                    "minimum": 1,
                    "default": 1
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Perform 5 simulations over 4 time periods using a Cornish-Fisher distribution with mean parameter 5%, standard deviation parameter 20%, skewness parameter 0.5 and (excess) kurtosis parameter 1.",
                  "value": {
                    "assetMeanParameter": 0.05,
                    "assetStandardDeviationParameter": 0.2,
                    "assetSkewnessParameter": 0.5,
                    "assetKurtosisParameter": 1,
                    "simulations": 5,
                    "simulationsLength": 4
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "simulations"
                  ],
                  "properties": {
                    "simulations": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "assets"
                        ],
                        "properties": {
                          "assets": {
                            "description": "assets[i] is the data for the i-th asset",
                            "type": "array",
                            "minItems": 1,
                            "maxItems": 1,
                            "items": {
                              "type": "object",
                              "required": [
                                "assetReturns"
                              ],
                              "properties": {
                                "assetReturns": {
                                  "description": "assetReturns[t] is the simulated return of the i-th asset for the t-th time period",
                                  "type": "array",
                                  "minItems": 1,
                                  "items": {
                                    "type": "number"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Results of 1 simulation of returns for 2 time periods",
                    "value": {
                      "simulations": [
                        {
                          "assets": [
                            {
                              "assetReturns": [
                                0.01,
                                0.02
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/returns/fitting/cornish-fisher": {
      "post": {
        "tags": [
          "Assets / Returns Fitting"
        ],
        "summary": "Cornish-Fisher Distribution",
        "description": "Fit the returns of one asset using a Cornish-Fisher distribution.\n\nReferences\n* [Maillard, Didier, A User\u2019s Guide to the Cornish Fisher Expansion](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=1997178)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets"
                ],
                "properties": {
                  "assets": {
                    "type": "array",
                    "description": "assets[i] is the data for the i-th asset",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "assetReturns"
                      ],
                      "properties": {
                        "assetReturns": {
                          "description": "assetReturns[t] is the return of the i-th asset at the time t",
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Fit a Cornish-Fisher distribution to the returns of one asset",
                  "value": {
                    "assets": [
                      {
                        "assetReturns": [
                          0.01,
                          0.03,
                          -0.01,
                          0
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assets"
                  ],
                  "properties": {
                    "assets": {
                      "description": "assets[i] is the data for the i-th asset",
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "assetMean",
                          "assetStandardDeviation",
                          "assetSkewness",
                          "assetKurtosis"
                        ],
                        "properties": {
                          "assetMean": {
                            "type": "number",
                            "description": "The mean parameter of the Cornish-Fisher distribution fitted to the returns of the i-th asset, corresponding to the arithmetic average of the returns of the i-th asset"
                          },
                          "assetStandardDeviation": {
                            "type": "number",
                            "description": "The standard deviation parameter of the Cornish-Fisher distribution fitted to the returns of the i-th asset, corresponding to the standard deviation of the returns of the i-th asset",
                            "minimum": 0,
                            "exclusiveMinimum": true
                          },
                          "assetSkewness": {
                            "type": "number",
                            "description": "The skewness parameter of the Cornish-Fisher distribution fitted to the returns of the i-th asset, corresponding to the skewness of the returns of the i-th asset"
                          },
                          "assetKurtosis": {
                            "type": "number",
                            "description": "The (excess) kurtosis parameter of the Cornish-Fisher distribution fitted to the returns of the i-th asset, corresponding to the kurtosis of the returns of the i-th asset"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Results of the fitting of a Cornish-Fisher distribution to the returns of one asset",
                    "value": {
                      "assets": [
                        {
                          "assetMean": 0.05,
                          "assetStandardDeviation": 0.2,
                          "assetSkewness": 0.5,
                          "assetKurtosis": 1
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/returns/simulation/monte-carlo/cornish-fisher/corrected": {
      "post": {
        "tags": [
          "Assets / Monte Carlo Returns Simulation"
        ],
        "summary": "Corrected Cornish-Fisher Distribution",
        "description": "Simulate i.i.d. returns of one asset for one or several time period(s) using a corrected Cornish-Fisher distribution.\n\nReferences\n* [Maillard, Didier, A User\u2019s Guide to the Cornish Fisher Expansion](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=1997178)\n* [Lamb, John D., Maura E. Monville, and Kai-Hong Tee. Making Cornish\u2013fisher Fit for Risk Measurement, Journal of Risk, Volume 21, Number 5, p. 53-81](http://doi.org/10.21314/JOR.2019.408)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assetMean",
                  "assetStandardDeviation",
                  "assetSkewness",
                  "assetKurtosis"
                ],
                "properties": {
                  "assetMean": {
                    "type": "number",
                    "description": "The arithmetic average return of the asset, corresponding to the mean of the corrected Cornish-Fisher distribution"
                  },
                  "assetStandardDeviation": {
                    "type": "number",
                    "description": "The standard deviation of the asset arithmetic returns, corresponding to the standard deviation of the corrected Cornish-Fisher distribution",
                    "minimum": 0,
                    "exclusiveMinimum": true
                  },
                  "assetSkewness": {
                    "type": "number",
                    "description": "The skewness of the asset arithmetic returns, corresponding to the skewness of the corrected Cornish-Fisher distribution"
                  },
                  "assetKurtosis": {
                    "type": "number",
                    "description": "The kurtosis of the asset arithmetic returns, corresponding to the kurtosis of the corrected Cornish-Fisher distribution"
                  },
                  "simulations": {
                    "type": "integer",
                    "description": "The number of simulations to perform",
                    "minimum": 1,
                    "default": 1
                  },
                  "simulationsLength": {
                    "type": "integer",
                    "description": "The number of time period(s) to simulate per simulation",
                    "minimum": 1,
                    "default": 1
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Perform 5 simulations over 4 time periods using a corrected Cornish-Fisher distribution with mean 5%, standard deviation 20%, skewness 0.5 and (excess) kurtosis 1.",
                  "value": {
                    "assetMean": 0.05,
                    "assetStandardDeviation": 0.2,
                    "assetSkewness": 0.5,
                    "assetKurtosis": 1,
                    "simulations": 5,
                    "simulationsLength": 4
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "simulations"
                  ],
                  "properties": {
                    "simulations": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "assets"
                        ],
                        "properties": {
                          "assets": {
                            "description": "assets[i] is the data for the i-th asset",
                            "type": "array",
                            "minItems": 1,
                            "maxItems": 1,
                            "items": {
                              "type": "object",
                              "required": [
                                "assetReturns"
                              ],
                              "properties": {
                                "assetReturns": {
                                  "description": "assetReturns[t] is the simulated return of the i-th asset for the t-th time period",
                                  "type": "array",
                                  "minItems": 1,
                                  "items": {
                                    "type": "number"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Results of 1 simulation of returns for 2 time periods",
                    "value": {
                      "simulations": [
                        {
                          "assets": [
                            {
                              "assetReturns": [
                                0.01,
                                0.02
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Failed computation of the Cornish-Fisher skewness and (excess) kurtosis parameters corresponding to the asset skewness and (excess) kurtosis",
            "content": {
              "application/json": {
                "examples": {
                  "Example": {
                    "description": "Failed computation of skewness and kurtosis parameters",
                    "value": {
                      "message": "internal error: impossible to compute accurate Cornish-Fisher parameters"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/returns/fitting/cornish-fisher/corrected": {
      "post": {
        "tags": [
          "Assets / Returns Fitting"
        ],
        "summary": "Corrected Cornish-Fisher Distribution",
        "description": "Fit the returns of one asset using a corrected Cornish-Fisher distribution.\n\nReferences\n* [Maillard, Didier, A User\u2019s Guide to the Cornish Fisher Expansion](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=1997178)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets"
                ],
                "properties": {
                  "assets": {
                    "type": "array",
                    "description": "assets[i] is the data for the i-th asset",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "assetReturns"
                      ],
                      "properties": {
                        "assetReturns": {
                          "description": "assetReturns[t] is the return of the i-th asset at the time t",
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Impoosible to fit a corrected Cornish-Fisher distribution to the returns of one asset",
                  "value": {
                    "assets": [
                      {
                        "assetReturns": [
                          0.01,
                          0.03,
                          -0.01,
                          0
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assets"
                  ],
                  "properties": {
                    "assets": {
                      "description": "assets[i] is the data for the i-th asset",
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "assetMeanParameter",
                          "assetStandardDeviationParameter",
                          "assetSkewnessParameter",
                          "assetKurtosisParameter"
                        ],
                        "properties": {
                          "assetMeanParameter": {
                            "type": "number",
                            "description": "The mean of the corrected Cornish-Fisher distribution fitted to the returns of the i-th asset, corresponding to the arithmetic average of the returns of the i-th asset"
                          },
                          "assetStandardDeviationParameter": {
                            "type": "number",
                            "description": "The standard deviation of the corrected Cornish-Fisher distribution fitted to the returns of the i-th asset, corresponding approximately to the standard deviation of the returns of the i-th asset",
                            "minimum": 0,
                            "exclusiveMinimum": true
                          },
                          "assetSkewnessParameter": {
                            "type": "number",
                            "description": "The skewness of the corrected Cornish-Fisher distribution fitted to the returns of the i-th asset, corresponding approximately to the skewness of the returns of the i-th asset"
                          },
                          "assetKurtosisParameter": {
                            "type": "number",
                            "description": "The (excess) kurtosis of the corrected Cornish-Fisher distribution fitted to the returns of the i-th asset, corresponding approximately to the kurtosis of the returns of the i-th asset"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Results of the fitting of a corrected Cornish-Fisher distribution to the returns of one asset",
                    "value": {
                      "assets": [
                        {
                          "assetMeanParameter": 0.05,
                          "assetStandardDeviationParameter": 0.2,
                          "assetSkewnessParameter": 0.5,
                          "assetKurtosisParameter": 1
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Failed computation of the Cornish-Fisher skewness and (excess) kurtosis parameters corresponding to an asset skewness and (excess) kurtosis",
            "content": {
              "application/json": {
                "examples": {
                  "Example": {
                    "description": "Failed computation of skewness and kurtosis parameters",
                    "value": {
                      "message": "internal error: impossible to compute accurate Cornish-Fisher parameters"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/covariance/matrix": {
      "post": {
        "tags": [
          "Assets / Covariance Matrix"
        ],
        "summary": "Covariance Matrix",
        "description": "Compute the covariance matrix of assets from either:  \n* The asset correlation matrix and their standard deviations\n* The asset correlation matrix and their variances\n\nReferences\n* [Wikipedia, Covariance Matrix](https://en.wikipedia.org/wiki/Covariance_matrix)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "assets",
                      "assetsCorrelationMatrix",
                      "assetsVariances"
                    ],
                    "properties": {
                      "assets": {
                        "type": "integer",
                        "description": "The number of assets",
                        "minimum": 2
                      },
                      "assetsCorrelationMatrix": {
                        "type": "array",
                        "description": "assetsCorrelationMatrix[i][j] is the correlation between the asset i and the asset j",
                        "minItems": 2,
                        "items": {
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "assetsVariances": {
                        "type": "array",
                        "description": "assetsVariances[i] is the variance of the asset i",
                        "minItems": 2,
                        "items": {
                          "type": "number",
                          "minimum": 0
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": [
                      "assets",
                      "assetsCorrelationMatrix",
                      "assetsVolatilities"
                    ],
                    "properties": {
                      "assets": {
                        "type": "integer",
                        "description": "The number of assets",
                        "minimum": 2
                      },
                      "assetsCorrelationMatrix": {
                        "type": "array",
                        "description": "assetsCorrelationMatrix[i][j] is the correlation between the asset i and the asset j",
                        "minItems": 2,
                        "items": {
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "assetsVolatilities": {
                        "type": "array",
                        "description": "assetsVolatilities[i] is the volatility of the asset i",
                        "minItems": 2,
                        "items": {
                          "type": "number",
                          "minimum": 0
                        }
                      }
                    }
                  }
                ]
              },
              "examples": {
                "From asset correlation matrix and standard deviations": {
                  "description": "Compute the covariance matrix of two assets based on their correlation matrix and their standard deviations",
                  "value": {
                    "assets": 2,
                    "assetsCorrelationMatrix": [
                      [
                        1,
                        -0.5
                      ],
                      [
                        -0.5,
                        1
                      ]
                    ],
                    "assetsVolatilities": [
                      0.1,
                      0.05
                    ]
                  }
                },
                "From asset correlation matrix and variances": {
                  "description": "Compute the covariance matrix of two assets based on their correlation matrix and their variances",
                  "value": {
                    "assets": 2,
                    "assetsCorrelationMatrix": [
                      [
                        1,
                        -0.5
                      ],
                      [
                        -0.5,
                        1
                      ]
                    ],
                    "assetsVariances": [
                      0.01,
                      0.0025
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsCovarianceMatrix"
                  ],
                  "properties": {
                    "assetsCovarianceMatrix": {
                      "description": "assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "number"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed covariance matrix",
                    "value": {
                      "assetsCovarianceMatrix": [
                        [
                          0.010000000000000002,
                          -0.0025000000000000005
                        ],
                        [
                          -0.0025000000000000005,
                          0.0025000000000000005
                        ]
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/covariance/matrix/estimation/empirical": {
      "post": {
        "tags": [
          "Assets / Covariance Matrix Estimation"
        ],
        "summary": "Empirical Covariance Matrix",
        "description": "Estimate an asset empirical covariance matrix, from either:\n* Asset returns\n* Asset close-to-close prices, from which asset logarithmic returns are computed\n\nReferences\n* [Wikipedia, Covariance Matrix](https://en.wikipedia.org/wiki/Covariance_matrix)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "assets"
                    ],
                    "properties": {
                      "assets": {
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "object",
                          "required": [
                            "assetReturns"
                          ],
                          "properties": {
                            "assetReturns": {
                              "description": "assetReturns[t] is the return of the asset at the time t; all assetReturns arrays must have the same length",
                              "type": "array",
                              "minItems": 2,
                              "items": {
                                "type": "number"
                              }
                            }
                          }
                        }
                      },
                      "covarianceProxy": {
                        "type": "string",
                        "description": "The covariance proxy to use",
                        "enum": [
                          "periodToPeriodReturnsOuterProduct",
                          "demeanedPeriodToPeriodReturnsOuterProduct"
                        ],
                        "default": "demeanedPeriodToPeriodReturnsOuterProduct"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": [
                      "assets"
                    ],
                    "properties": {
                      "assets": {
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "object",
                          "required": [
                            "assetPrices"
                          ],
                          "properties": {
                            "assetPrices": {
                              "description": "assetPrices[t] contains price information for the asset at the date t",
                              "type": "array",
                              "minItems": 2,
                              "items": {
                                "type": "object",
                                "required": [
                                  "date",
                                  "close"
                                ],
                                "properties": {
                                  "date": {
                                    "type": "string",
                                    "description": "The date corresponding to the date t in format YYYY-MM-DD; all dates must be distinct"
                                  },
                                  "open": {
                                    "type": "number",
                                    "description": "The open price of the asset at the date t; must be higher than or equal to the low price and lower than or equal to the high price; not used",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  },
                                  "high": {
                                    "type": "number",
                                    "description": "The high price of the asset at the date t; must be lower than or equal to the high price; not used",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  },
                                  "low": {
                                    "type": "number",
                                    "description": "The low price of the asset at the date t; must be higher than or equal to the low price; not used",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  },
                                  "close": {
                                    "type": "number",
                                    "description": "The close price of the asset at the date t; must be higher than or equal to the low price and lower than or equal to the high price",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "covarianceProxy": {
                        "type": "string",
                        "description": "The covariance proxy to use",
                        "enum": [
                          "closeToCloseReturnsOuterProduct",
                          "demeanedCloseToCloseReturnsOuterProduct"
                        ],
                        "default": "closeToCloseReturnsOuterProduct"
                      }
                    }
                  }
                ]
              },
              "examples": {
                "From assets returns": {
                  "description": "Compute the covariance matrix of two assets based on 4 returns per asset",
                  "value": {
                    "assets": [
                      {
                        "assetReturns": [
                          0.01,
                          0,
                          0.02,
                          -0.03
                        ]
                      },
                      {
                        "assetReturns": [
                          0.01,
                          0,
                          0.02,
                          -0.03
                        ]
                      }
                    ]
                  }
                },
                "From non-demeaned assets returns": {
                  "description": "Compute the covariance matrix of two assets based on 4 non-demeaned returns per asset",
                  "value": {
                    "assets": [
                      {
                        "assetReturns": [
                          0.01,
                          0,
                          0.02,
                          -0.03
                        ]
                      },
                      {
                        "assetReturns": [
                          0.01,
                          0,
                          0.02,
                          -0.03
                        ]
                      }
                    ],
                    "covarianceProxy": "crossPeriodToPeriodReturns"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsCovarianceMatrix"
                  ],
                  "properties": {
                    "assetsCovarianceMatrix": {
                      "description": "assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "number"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed covariance matrix",
                    "value": {
                      "assetsCovarianceMatrix": [
                        [
                          0.00035,
                          0.00035
                        ],
                        [
                          0.00035,
                          0.00035
                        ]
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/covariance/matrix/estimation/empirical/shrunk": {
      "post": {
        "tags": [
          "Assets / Covariance Matrix Estimation"
        ],
        "summary": "Shrunk Empirical Covariance Matrix",
        "description": "Compute a linearly shrunk empirical asset covariance matrix, which is a convex combination of the empirical covariance matrix of these assets and a target covariance matrix.\n\nReferences\n* [Olivier Ledoit, Michael Wolf, The Power of (Non-)Linear Shrinking: A Review and Guide to Covariance Matrix Estimation, Journal of Financial Econometrics, Volume 20, Issue 1, Winter 2022, Pages 187\u2013218](https://academic.oup.com/jfec/article-abstract/20/1/187/5861007?redirectedFrom=fulltext)\n* [Gianluca De Nard, Oops! I Shrunk the Sample Covariance Matrix Again: Blockbuster Meets Shrinkage, Journal of Financial Econometrics, Volume 20, Issue 4, Fall 2022, Pages 569\u2013611](https://academic.oup.com/jfec/article-abstract/20/4/569/5960228)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "assets"
                    ],
                    "properties": {
                      "assets": {
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "object",
                          "required": [
                            "assetReturns"
                          ],
                          "properties": {
                            "assetReturns": {
                              "description": "assetReturns[t] is the return of the asset at the time t; all assetReturns arrays must have the same length",
                              "type": "array",
                              "minItems": 2,
                              "items": {
                                "type": "number"
                              }
                            }
                          }
                        }
                      },
                      "covarianceProxy": {
                        "type": "string",
                        "description": "The covariance proxy to use",
                        "enum": [
                          "periodToPeriodReturnsOuterProduct",
                          "demeanedPeriodToPeriodReturnsOuterProduct"
                        ],
                        "default": "demeanedPeriodToPeriodReturnsOuterProduct"
                      },
                      "shrinkageMethod": {
                        "type": "string",
                        "description": "The shrinkage method to apply to the empirical covariance matrix of the assets returns",
                        "enum": [
                          "constantVarianceShinkage",
                          "constantVarianceCovarianceShinkage"
                        ],
                        "default": "constantVarianceShinkage"
                      },
                      "shrinkageFactor": {
                        "description": "The shrinkage factor to apply to the empirical covariance matrix of the assets returns; if not provided, defaults to the optimal asymptotic shrinkage factor established in the first reference",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": [
                      "assets"
                    ],
                    "properties": {
                      "assets": {
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "object",
                          "required": [
                            "assetPrices"
                          ],
                          "properties": {
                            "assetPrices": {
                              "description": "assetPrices[t] contains price information for the asset at the date t",
                              "type": "array",
                              "minItems": 2,
                              "items": {
                                "type": "object",
                                "required": [
                                  "date",
                                  "close"
                                ],
                                "properties": {
                                  "date": {
                                    "type": "string",
                                    "description": "The date corresponding to the date t in format YYYY-MM-DD; all dates must be distinct"
                                  },
                                  "open": {
                                    "type": "number",
                                    "description": "The open price of the asset at the date t; must be higher than or equal to the low price and lower than or equal to the high price; not used",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  },
                                  "high": {
                                    "type": "number",
                                    "description": "The high price of the asset at the date t; must be lower than or equal to the high price; not used",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  },
                                  "low": {
                                    "type": "number",
                                    "description": "The low price of the asset at the date t; must be higher than or equal to the low price; not used",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  },
                                  "close": {
                                    "type": "number",
                                    "description": "The close price of the asset at the date t; must be higher than or equal to the low price and lower than or equal to the high price",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "covarianceProxy": {
                        "type": "string",
                        "description": "The covariance proxy to use",
                        "enum": [
                          "closeToCloseReturnsOuterProduct",
                          "demeanedCloseToCloseReturnsOuterProduct"
                        ],
                        "default": "closeToCloseReturnsOuterProduct"
                      },
                      "shrinkageMethod": {
                        "type": "string",
                        "description": "The shrinkage method to apply to the empirical covariance matrix of the assets returns",
                        "enum": [
                          "constantVarianceShinkage",
                          "constantVarianceCovarianceShinkage"
                        ],
                        "default": "constantVarianceShinkage"
                      },
                      "shrinkageFactor": {
                        "description": "The shrinkage factor to apply to the empirical covariance matrix of the assets returns; if not provided, defaults to the optimal asymptotic shrinkage factor established in the first reference",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    }
                  }
                ]
              },
              "examples": {
                "Shrinkage using a constant variance-covariance method": {
                  "description": "Compute the shrunk covariance matrix of two assets based on 4 non-demeaned returns per asset, using a constant variance-covariance shrinkage method and the associated optimal shrinkage factor",
                  "value": {
                    "assets": [
                      {
                        "assetReturns": [
                          0.01,
                          0,
                          0.02,
                          -0.03
                        ]
                      },
                      {
                        "assetReturns": [
                          0.01,
                          0,
                          0.02,
                          -0.03
                        ]
                      }
                    ],
                    "shrinkageMethod": "constantVarianceCovarianceShinkage",
                    "covarianceProxy": "crossPeriodToPeriodReturns"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsCovarianceMatrix"
                  ],
                  "properties": {
                    "assetsCovarianceMatrix": {
                      "description": "assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "number"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed covariance matrix",
                    "value": {
                      "assetsCovarianceMatrix": [
                        [
                          0.00035,
                          0.00035
                        ],
                        [
                          0.00035,
                          0.00035
                        ]
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/covariance/matrix/estimation/empirical/shrunk/clustering-based": {
      "post": {
        "tags": [
          "Assets / Covariance Matrix Estimation"
        ],
        "summary": "Clustering-based Shrunk Empirical Covariance Matrix",
        "description": "Compute a clustering-based linearly shrunk empirical asset covariance matrix, which is a convex combination of the empirical covariance matrix of these assets' and a clustering-based target covariance matrix.\n\nReferences\n* [Olivier Ledoit, Michael Wolf, The Power of (Non-)Linear Shrinking: A Review and Guide to Covariance Matrix Estimation, Journal of Financial Econometrics, Volume 20, Issue 1, Winter 2022, Pages 187\u2013218](https://academic.oup.com/jfec/article-abstract/20/1/187/5861007?redirectedFrom=fulltext)\n* [Gianluca De Nard, Oops! I Shrunk the Sample Covariance Matrix Again: Blockbuster Meets Shrinkage, Journal of Financial Econometrics, Volume 20, Issue 4, Fall 2022, Pages 569\u2013611](https://academic.oup.com/jfec/article-abstract/20/4/569/5960228)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "assets",
                      "assetsGroups"
                    ],
                    "properties": {
                      "assets": {
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "object",
                          "required": [
                            "assetReturns"
                          ],
                          "properties": {
                            "assetReturns": {
                              "description": "assetReturns[t] is the return of the asset at the time t; all assetReturns arrays must have the same length",
                              "type": "array",
                              "minItems": 2,
                              "items": {
                                "type": "number"
                              }
                            }
                          }
                        }
                      },
                      "assetsGroups": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "array",
                          "description": "assetsGroups[k] is the indexes of the assets belonging to the assets group k",
                          "minItems": 1,
                          "uniqueItems": true,
                          "items": {
                            "type": "integer",
                            "minimum": 1
                          }
                        }
                      },
                      "covarianceProxy": {
                        "type": "string",
                        "description": "The covariance proxy to use",
                        "enum": [
                          "periodToPeriodReturnsOuterProduct",
                          "demeanedPeriodToPeriodReturnsOuterProduct"
                        ],
                        "default": "demeanedPeriodToPeriodReturnsOuterProduct"
                      },
                      "shrinkageMethod": {
                        "type": "string",
                        "description": "The shrinkage method to apply to the empirical covariance matrix of the assets returns",
                        "enum": [
                          "constantVarianceShinkage",
                          "constantVarianceCovarianceShinkage"
                        ],
                        "default": "constantVarianceShinkage"
                      },
                      "shrinkageFactor": {
                        "description": "The shrinkage factor to apply to the empirical covariance matrix of the assets returns; if not provided, defaults to the optimal asymptotic shrinkage factor established in the first reference",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": [
                      "assets",
                      "assetsGroups"
                    ],
                    "properties": {
                      "assets": {
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "object",
                          "required": [
                            "assetPrices"
                          ],
                          "properties": {
                            "assetPrices": {
                              "description": "assetPrices[t] contains price information for the asset at the date t",
                              "type": "array",
                              "minItems": 2,
                              "items": {
                                "type": "object",
                                "required": [
                                  "date",
                                  "close"
                                ],
                                "properties": {
                                  "date": {
                                    "type": "string",
                                    "description": "The date corresponding to the date t in format YYYY-MM-DD; all dates must be distinct"
                                  },
                                  "open": {
                                    "type": "number",
                                    "description": "The open price of the asset at the date t; must be higher than or equal to the low price and lower than or equal to the high price; not used",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  },
                                  "high": {
                                    "type": "number",
                                    "description": "The high price of the asset at the date t; must be lower than or equal to the high price; not used",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  },
                                  "low": {
                                    "type": "number",
                                    "description": "The low price of the asset at the date t; must be higher than or equal to the low price; not used",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  },
                                  "close": {
                                    "type": "number",
                                    "description": "The close price of the asset at the date t; must be higher than or equal to the low price and lower than or equal to the high price",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "assetsGroups": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "array",
                          "description": "assetsGroups[k] is the indexes of the assets belonging to the assets group k",
                          "minItems": 1,
                          "uniqueItems": true,
                          "items": {
                            "type": "integer",
                            "minimum": 1
                          }
                        }
                      },
                      "covarianceProxy": {
                        "type": "string",
                        "description": "The covariance proxy to use",
                        "enum": [
                          "closeToCloseReturnsOuterProduct",
                          "demeanedCloseToCloseReturnsOuterProduct"
                        ],
                        "default": "closeToCloseReturnsOuterProduct"
                      },
                      "shrinkageMethod": {
                        "type": "string",
                        "description": "The shrinkage method to apply to the empirical covariance matrix of the assets returns",
                        "enum": [
                          "constantVarianceShinkage",
                          "constantVarianceCovarianceShinkage"
                        ],
                        "default": "constantVarianceShinkage"
                      },
                      "shrinkageFactor": {
                        "description": "The shrinkage factor to apply to the empirical covariance matrix of the assets returns; if not provided, defaults to the optimal asymptotic shrinkage factor established in the first reference",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    }
                  }
                ]
              },
              "examples": {
                "Shrinkage using a constant variance-covariance method, with the last two assets grouped together": {
                  "description": "Compute the shrunk covariance matrix of three assets grouped into 2 clusters, based on 4 non-demeaned returns per asset, using a constant variance-covariance shrinkage method and the associated optimal shrinkage factor",
                  "value": {
                    "assets": [
                      {
                        "assetReturns": [
                          0.01695979899,
                          0.00264713668,
                          0.0007040394262,
                          0.004221264621
                        ]
                      },
                      {
                        "assetReturns": [
                          0.02669404517,
                          0.001,
                          0.001248751249,
                          -0.003242703916
                        ]
                      },
                      {
                        "assetReturns": [
                          0.02566735113,
                          0.006006006006,
                          0.003980099502,
                          -0.008919722498
                        ]
                      }
                    ],
                    "assetsGroups": [
                      [
                        1
                      ],
                      [
                        2,
                        3
                      ]
                    ],
                    "shrinkageMethod": "constantVarianceCovarianceShinkage",
                    "covarianceProxy": "crossPeriodToPeriodReturns"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsCovarianceMatrix"
                  ],
                  "properties": {
                    "assetsCovarianceMatrix": {
                      "description": "assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "number"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed covariance matrix",
                    "value": {
                      "assetsCovarianceMatrix": [
                        [
                          0.00035,
                          0.00035
                        ],
                        [
                          0.00035,
                          0.00035
                        ]
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/covariance/matrix/estimation/gerber": {
      "post": {
        "tags": [
          "Assets / Covariance Matrix Estimation"
        ],
        "summary": "Gerber Covariance Matrix",
        "description": "Compute the Gerber asset covariance matrix, from asset returns.\n\nReferences\n* [Gerber, S., B. Javid, H. Markowitz, P. Sargen, and D. Starer (2022). The gerber statistic: A robust co-movement measure for portfolio optimization. The Journal of Portfolio Management 48(2), 87\u2013102](https://www.doi.org/10.3905/jpm.2021.1.316)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets"
                ],
                "properties": {
                  "assets": {
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "object",
                      "required": [
                        "assetReturns"
                      ],
                      "properties": {
                        "assetReturns": {
                          "description": "assetReturns[t] is the return of the asset at the time t; all assetReturns arrays must have the same length",
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  },
                  "gerberThreshold": {
                    "description": "The Gerber threshold",
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1,
                    "default": 0.5
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Computes the Gerber covariance matrix of two assets based on 4 returns per asset",
                  "value": {
                    "assets": [
                      {
                        "assetReturns": [
                          0.01,
                          0,
                          0.02,
                          -0.03
                        ]
                      },
                      {
                        "assetReturns": [
                          0.01,
                          0,
                          0.02,
                          -0.03
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsCovarianceMatrix"
                  ],
                  "properties": {
                    "assetsCovarianceMatrix": {
                      "description": "assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "number"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed covariance matrix",
                    "value": {
                      "assetsCovarianceMatrix": [
                        [
                          0.00035,
                          0.00035
                        ],
                        [
                          0.00035,
                          0.00035
                        ]
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/covariance/matrix/estimation/exponentially-weighted": {
      "post": {
        "tags": [
          "Assets / Covariance Matrix Estimation"
        ],
        "summary": "Exponentially Weighted Covariance Matrix",
        "description": "Estimate an asset exponentially weighted covariance matrix, from either:\n* Asset returns\n* Asset close-to-close prices, from which asset logarithmic returns are computed\n\nReferences\n* [RiskMetrics Group. Longerstaey, J. (1996). RiskMetrics technical document, Technical Report fourth edition](https://www.msci.com/documents/10199/5915b101-4206-4ba0-aee2-3449d5c7e95a)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "assets"
                    ],
                    "properties": {
                      "assets": {
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "object",
                          "required": [
                            "assetReturns"
                          ],
                          "properties": {
                            "assetReturns": {
                              "description": "assetReturns[t] is the return of the asset at the time t; all assetReturns arrays must have the same length",
                              "type": "array",
                              "minItems": 2,
                              "items": {
                                "type": "number"
                              }
                            }
                          }
                        }
                      },
                      "covarianceProxy": {
                        "type": "string",
                        "description": "The covariance proxy to use",
                        "enum": [
                          "periodToPeriodReturnsOuterProduct",
                          "demeanedPeriodToPeriodReturnsOuterProduct"
                        ],
                        "default": "demeanedPeriodToPeriodReturnsOuterProduct"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": [
                      "assets"
                    ],
                    "properties": {
                      "assets": {
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "object",
                          "required": [
                            "assetPrices"
                          ],
                          "properties": {
                            "assetPrices": {
                              "description": "assetPrices[t] contains price information for the asset at the date t",
                              "type": "array",
                              "minItems": 2,
                              "items": {
                                "type": "object",
                                "required": [
                                  "date",
                                  "close"
                                ],
                                "properties": {
                                  "date": {
                                    "type": "string",
                                    "description": "The date corresponding to the date t in format YYYY-MM-DD; all dates must be distinct"
                                  },
                                  "open": {
                                    "type": "number",
                                    "description": "The open price of the asset at the date t; must be higher than or equal to the low price and lower than or equal to the high price; not used",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  },
                                  "high": {
                                    "type": "number",
                                    "description": "The high price of the asset at the date t; must be lower than or equal to the high price; not used",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  },
                                  "low": {
                                    "type": "number",
                                    "description": "The low price of the asset at the date t; must be higher than or equal to the low price; not used",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  },
                                  "close": {
                                    "type": "number",
                                    "description": "The close price of the asset at the date t; must be higher than or equal to the low price and lower than or equal to the high price",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "covarianceProxy": {
                        "type": "string",
                        "description": "The covariance proxy to use",
                        "enum": [
                          "closeToCloseReturnsOuterProduct",
                          "demeanedCloseToCloseReturnsOuterProduct"
                        ],
                        "default": "closeToCloseReturnsOuterProduct"
                      },
                      "covarianceProxyDecayFactor": {
                        "description": "The decay factor of the exponentially weighted moving average",
                        "type": "number",
                        "minimum": 0,
                        "exclusiveMinimum": true,
                        "maximum": 1,
                        "exclusiveMaximum": true,
                        "default": 0.94
                      }
                    }
                  }
                ]
              },
              "examples": {
                "Example": {
                  "description": "Computes an exponentially weighted covariance matrix of two assets based on 4 returns per asset and a decay factor of 0.5",
                  "value": {
                    "assets": [
                      {
                        "assetReturns": [
                          0.01,
                          0.01,
                          0.02,
                          0.01
                        ]
                      },
                      {
                        "assetReturns": [
                          -0.02,
                          -0.02,
                          -0.04,
                          -0.02
                        ]
                      }
                    ],
                    "covarianceProxyDecayFactor": 0.5
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsCovarianceMatrix"
                  ],
                  "properties": {
                    "assetsCovarianceMatrix": {
                      "description": "assetsCovarianceMatrix[i][j] is the sample covariance between the asset i returns and the asset j returns",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "number"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed exponentially weighted covariance matrix",
                    "value": {
                      "assetsCovarianceMatrix": [
                        [
                          1.9583333333333333e-05,
                          -3.9166666666666665e-05
                        ],
                        [
                          -3.9166666666666665e-05,
                          7.833333333333333e-05
                        ]
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/covariance/matrix/forecast/ewma": {
      "post": {
        "tags": [
          "Assets / Covariance Matrix Forecast"
        ],
        "summary": "Exponentially Weighted Moving Average Model (EWMA)",
        "description": "Forecast an (averaged) asset covariance matrix using an exponentially weighted moving average (EWMA) model.\n\nReferences\n* [Kasper Johansson, Mehmet G. Ogut, Markus Pelger, Thomas Schmelzer and Stephen Boyd (2023), A Simple Method for Predicting Covariance Matrices of Financial Returns, Foundations and Trends\u00ae in Econometrics: Vol. 12: No. 4, pp 324-407](https://www.nowpublishers.com/article/Details/ECO-047)\n* [Gianluca De Nard, Olivier Ledoit, Michael Wolf, Factor Models for Portfolio Selection in Large Dimensions: The Good, the Better and the Ugly, Journal of Financial Econometrics, Volume 19, Issue 2, Spring 2021, Pages 236\u2013257](https://academic.oup.com/jfec/article/19/2/236/5285483)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "assets"
                    ],
                    "properties": {
                      "assets": {
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "object",
                          "required": [
                            "assetReturns"
                          ],
                          "properties": {
                            "assetReturns": {
                              "description": "assetReturns[t] is the return of the asset at the time t; all assetReturns arrays must have the same length",
                              "type": "array",
                              "minItems": 2,
                              "items": {
                                "type": "number"
                              }
                            }
                          }
                        }
                      },
                      "covarianceProxy": {
                        "type": "string",
                        "description": "The covariance proxy to use",
                        "enum": [
                          "periodToPeriodReturnsOuterProduct",
                          "demeanedPeriodToPeriodReturnsOuterProduct"
                        ],
                        "default": "demeanedPeriodToPeriodReturnsOuterProduct"
                      },
                      "covarianceForecastHorizon": {
                        "description": "The forecast horizon, corresponding to the number of multi-steps ahead covariance matrix forecasts to compute and average together",
                        "type": "integer",
                        "minimum": 1,
                        "default": 1
                      },
                      "covarianceProxyDecayFactor": {
                        "description": "The decay factor of the exponentially weighted moving average; by default, the value of the best decay factor is automatically computed",
                        "oneOf": [
                          {
                            "type": "number",
                            "minimum": 0,
                            "exclusiveMinimum": true,
                            "maximum": 1,
                            "exclusiveMaximum": true
                          },
                          {
                            "type": "string",
                            "enum": [
                              "auto"
                            ],
                            "default": "auto"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": [
                      "assets"
                    ],
                    "properties": {
                      "assets": {
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "object",
                          "required": [
                            "assetPrices"
                          ],
                          "properties": {
                            "assetPrices": {
                              "description": "assetPrices[t] contains price information for the asset at the date t",
                              "type": "array",
                              "minItems": 3,
                              "items": {
                                "type": "object",
                                "required": [
                                  "date",
                                  "close"
                                ],
                                "properties": {
                                  "date": {
                                    "type": "string",
                                    "description": "The date corresponding to the date t in format YYYY-MM-DD; all dates must be distinct"
                                  },
                                  "open": {
                                    "type": "number",
                                    "description": "The open price of the asset at the date t; must be higher than or equal to the low price and lower than or equal to the high price; not used",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  },
                                  "high": {
                                    "type": "number",
                                    "description": "The high price of the asset at the date t; must be lower than or equal to the high price; not used",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  },
                                  "low": {
                                    "type": "number",
                                    "description": "The low price of the asset at the date t; must be higher than or equal to the low price; not used",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  },
                                  "close": {
                                    "type": "number",
                                    "description": "The close price of the asset at the date t; must be higher than or equal to the low price and lower than or equal to the high price",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "covarianceProxy": {
                        "type": "string",
                        "description": "The covariance proxy to use",
                        "enum": [
                          "closeToCloseReturnsOuterProduct",
                          "demeanedCloseToCloseReturnsOuterProduct"
                        ],
                        "default": "closeToCloseReturnsOuterProduct"
                      },
                      "covarianceForecastHorizon": {
                        "description": "The forecast horizon, corresponding to the number of multi-steps ahead covariance matrix forecasts to compute and average together",
                        "type": "integer",
                        "minimum": 1,
                        "default": 1
                      },
                      "covarianceProxyDecayFactor": {
                        "description": "The decay factor of the exponentially weighted moving average; by default, the value of the best decay factor is automatically computed",
                        "oneOf": [
                          {
                            "type": "number",
                            "minimum": 0,
                            "exclusiveMinimum": true,
                            "maximum": 1,
                            "exclusiveMaximum": true
                          },
                          {
                            "type": "string",
                            "enum": [
                              "auto"
                            ],
                            "default": "auto"
                          }
                        ]
                      }
                    }
                  }
                ]
              },
              "examples": {
                "Example": {
                  "description": "Computes the (averaged) covariance matrix forecast of 2 assets using an exponentially weighted moving average model with cross close-to-close (log) asset returns - assumed to have a 0 mean - and at a 2-day horizon",
                  "value": {
                    "assets": [
                      {
                        "assetPrices": [
                          {
                            "date": "2020-01-01",
                            "close": 3.08
                          },
                          {
                            "date": "2020-01-02",
                            "close": 3.11
                          },
                          {
                            "date": "2020-01-03",
                            "close": 3.09
                          },
                          {
                            "date": "2020-01-04",
                            "close": 3.1
                          },
                          {
                            "date": "2020-01-05",
                            "close": 3.11
                          },
                          {
                            "date": "2020-01-06",
                            "close": 3.16
                          },
                          {
                            "date": "2020-01-07",
                            "close": 3.22
                          },
                          {
                            "date": "2020-01-08",
                            "close": 3.23
                          },
                          {
                            "date": "2020-01-09",
                            "close": 3.32
                          },
                          {
                            "date": "2020-01-10",
                            "close": 3.3
                          }
                        ]
                      },
                      {
                        "assetPrices": [
                          {
                            "date": "2020-01-01",
                            "close": 5.08
                          },
                          {
                            "date": "2020-01-02",
                            "close": 5.11
                          },
                          {
                            "date": "2020-01-03",
                            "close": 5.09
                          },
                          {
                            "date": "2020-01-04",
                            "close": 5.1
                          },
                          {
                            "date": "2020-01-05",
                            "close": 5.11
                          },
                          {
                            "date": "2020-01-06",
                            "close": 5.16
                          },
                          {
                            "date": "2020-01-07",
                            "close": 5.22
                          },
                          {
                            "date": "2020-01-08",
                            "close": 5.23
                          },
                          {
                            "date": "2020-01-09",
                            "close": 5.32
                          },
                          {
                            "date": "2020-01-10",
                            "close": 5.3
                          }
                        ]
                      }
                    ],
                    "covarianceForecastHorizon": 2
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsCovarianceMatrix"
                  ],
                  "properties": {
                    "assetsCovarianceMatrix": {
                      "description": "assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "number"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed asset covariance matrix",
                    "value": {
                      "assetsCovarianceMatrix": [
                        [
                          1.9583333333333333e-05,
                          -3.9166666666666665e-05
                        ],
                        [
                          -3.9166666666666665e-05,
                          7.833333333333333e-05
                        ]
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/covariance/matrix/forecast/iewma": {
      "post": {
        "tags": [
          "Assets / Covariance Matrix Forecast"
        ],
        "summary": "Iterated Exponentially Weighted Moving Average Model (IEWMA)",
        "description": "Forecast an (averaged) asset covariance matrix using an iterated exponentially weighted moving average (IEWMA) model.\n\nReferences\n* [Kasper Johansson, Mehmet G. Ogut, Markus Pelger, Thomas Schmelzer and Stephen Boyd (2023), A Simple Method for Predicting Covariance Matrices of Financial Returns, Foundations and Trends\u00ae in Econometrics: Vol. 12: No. 4, pp 324-407](https://www.nowpublishers.com/article/Details/ECO-047)\n* [Gianluca De Nard, Olivier Ledoit, Michael Wolf, Factor Models for Portfolio Selection in Large Dimensions: The Good, the Better and the Ugly, Journal of Financial Econometrics, Volume 19, Issue 2, Spring 2021, Pages 236\u2013257](https://academic.oup.com/jfec/article/19/2/236/5285483)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "assets"
                    ],
                    "properties": {
                      "assets": {
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "object",
                          "required": [
                            "assetReturns"
                          ],
                          "properties": {
                            "assetReturns": {
                              "description": "assetReturns[t] is the return of the asset at the time t; all assetReturns arrays must have the same length",
                              "type": "array",
                              "minItems": 2,
                              "items": {
                                "type": "number"
                              }
                            }
                          }
                        }
                      },
                      "covarianceProxy": {
                        "type": "string",
                        "description": "The covariance proxy to use",
                        "enum": [
                          "periodToPeriodReturnsOuterProduct",
                          "demeanedPeriodToPeriodReturnsOuterProduct"
                        ],
                        "default": "demeanedPeriodToPeriodReturnsOuterProduct"
                      },
                      "covarianceForecastHorizon": {
                        "description": "The forecast horizon, corresponding to the number of multi-steps ahead covariance matrix forecasts to compute and average together",
                        "type": "integer",
                        "minimum": 1,
                        "default": 1
                      },
                      "varianceProxyDecayFactor": {
                        "description": "The decay factor used to compute volatility forecasts through a multivariate exponentially weighted moving average model applied to the covariance proxies; by default, the value of the best decay factor is automatically computed; exclusive with varianceProxyDecayFactors",
                        "oneOf": [
                          {
                            "type": "number",
                            "minimum": 0,
                            "exclusiveMinimum": true,
                            "maximum": 1,
                            "exclusiveMaximum": true
                          },
                          {
                            "type": "string",
                            "enum": [
                              "auto"
                            ],
                            "default": "auto"
                          }
                        ]
                      },
                      "varianceProxyDecayFactors": {
                        "description": "The decay factors used to compute volatility forecasts through individual exponentially weighted moving average models applied to the covariance proxies; the number of decay factors must be equal to the number of assets; exclusive with varianceProxyDecayFactor",
                        "type": "array",
                        "items": {
                          "oneOf": [
                            {
                              "type": "number",
                              "minimum": 0,
                              "exclusiveMinimum": true,
                              "maximum": 1,
                              "exclusiveMaximum": true
                            },
                            {
                              "type": "string",
                              "enum": [
                                "auto"
                              ]
                            }
                          ]
                        }
                      },
                      "volatilityStandardizedCovarianceProxyDecayFactor": {
                        "description": "The decay factor used to compute correlation matrix forecasts through a multivariate exponentially weighted moving average model applied to the volatility-standardized covariance proxies; by default, the value of the best decay factor is automatically computed",
                        "oneOf": [
                          {
                            "type": "number",
                            "minimum": 0,
                            "exclusiveMinimum": true,
                            "maximum": 1,
                            "exclusiveMaximum": true
                          },
                          {
                            "type": "string",
                            "enum": [
                              "auto"
                            ],
                            "default": "auto"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": [
                      "assets"
                    ],
                    "properties": {
                      "assets": {
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "object",
                          "required": [
                            "assetPrices"
                          ],
                          "properties": {
                            "assetPrices": {
                              "description": "assetPrices[t] contains price information for the asset at the date t",
                              "type": "array",
                              "minItems": 3,
                              "items": {
                                "type": "object",
                                "required": [
                                  "date",
                                  "close"
                                ],
                                "properties": {
                                  "date": {
                                    "type": "string",
                                    "description": "The date corresponding to the date t in format YYYY-MM-DD; all dates must be distinct"
                                  },
                                  "open": {
                                    "type": "number",
                                    "description": "The open price of the asset at the date t; must be higher than or equal to the low price and lower than or equal to the high price; not used",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  },
                                  "high": {
                                    "type": "number",
                                    "description": "The high price of the asset at the date t; must be lower than or equal to the high price; not used",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  },
                                  "low": {
                                    "type": "number",
                                    "description": "The low price of the asset at the date t; must be higher than or equal to the low price; not used",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  },
                                  "close": {
                                    "type": "number",
                                    "description": "The close price of the asset at the date t; must be higher than or equal to the low price and lower than or equal to the high price",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "covarianceProxy": {
                        "type": "string",
                        "description": "The covariance proxy to use",
                        "enum": [
                          "closeToCloseReturnsOuterProduct",
                          "demeanedCloseToCloseReturnsOuterProduct"
                        ],
                        "default": "closeToCloseReturnsOuterProduct"
                      },
                      "covarianceForecastHorizon": {
                        "description": "The forecast horizon, corresponding to the number of multi-steps ahead covariance matrix forecasts to compute and average together",
                        "type": "integer",
                        "minimum": 1,
                        "default": 1
                      },
                      "varianceProxyDecayFactor": {
                        "description": "The decay factor used to compute volatility forecasts through a multivariate exponentially weighted moving average model applied to the covariance proxies; by default, the value of the best decay factor is automatically computed; exclusive with varianceProxyDecayFactors",
                        "oneOf": [
                          {
                            "type": "number",
                            "minimum": 0,
                            "exclusiveMinimum": true,
                            "maximum": 1,
                            "exclusiveMaximum": true
                          },
                          {
                            "type": "string",
                            "enum": [
                              "auto"
                            ],
                            "default": "auto"
                          }
                        ]
                      },
                      "varianceProxyDecayFactors": {
                        "description": "The decay factors used to compute volatility forecasts through individual exponentially weighted moving average models applied to the covariance proxies; the number of decay factors must be equal to the number of assets; exclusive with varianceProxyDecayFactor",
                        "type": "array",
                        "items": {
                          "oneOf": [
                            {
                              "type": "number",
                              "minimum": 0,
                              "exclusiveMinimum": true,
                              "maximum": 1,
                              "exclusiveMaximum": true
                            },
                            {
                              "type": "string",
                              "enum": [
                                "auto"
                              ]
                            }
                          ]
                        }
                      },
                      "volatilityStandardizedCovarianceProxyDecayFactor": {
                        "description": "The decay factor used to compute correlation matrix forecasts through a multivariate exponentially weighted moving average model applied to the volatility-standardized covariance proxies; by default, the value of the best decay factor is automatically computed",
                        "oneOf": [
                          {
                            "type": "number",
                            "minimum": 0,
                            "exclusiveMinimum": true,
                            "maximum": 1,
                            "exclusiveMaximum": true
                          },
                          {
                            "type": "string",
                            "enum": [
                              "auto"
                            ],
                            "default": "auto"
                          }
                        ]
                      }
                    }
                  }
                ]
              },
              "examples": {
                "Example (common decay factor for volatility forecasts)": {
                  "description": "Computes the (averaged) covariance matrix forecast of 2 assets using an iterated exponentially weighted moving average model with cross close-to-close (log) asset returns - assumed to have a 0 mean - and at a 2-day horizon, using a common automatically determined decay factor for forecasting assets volatilities",
                  "value": {
                    "assets": [
                      {
                        "assetPrices": [
                          {
                            "date": "2020-01-01",
                            "close": 3.08
                          },
                          {
                            "date": "2020-01-02",
                            "close": 3.11
                          },
                          {
                            "date": "2020-01-03",
                            "close": 3.09
                          },
                          {
                            "date": "2020-01-04",
                            "close": 3.1
                          },
                          {
                            "date": "2020-01-05",
                            "close": 3.11
                          },
                          {
                            "date": "2020-01-06",
                            "close": 3.16
                          },
                          {
                            "date": "2020-01-07",
                            "close": 3.22
                          },
                          {
                            "date": "2020-01-08",
                            "close": 3.23
                          },
                          {
                            "date": "2020-01-09",
                            "close": 3.32
                          },
                          {
                            "date": "2020-01-10",
                            "close": 3.3
                          }
                        ]
                      },
                      {
                        "assetPrices": [
                          {
                            "date": "2020-01-01",
                            "close": 5.08
                          },
                          {
                            "date": "2020-01-02",
                            "close": 5.11
                          },
                          {
                            "date": "2020-01-03",
                            "close": 5.09
                          },
                          {
                            "date": "2020-01-04",
                            "close": 5.1
                          },
                          {
                            "date": "2020-01-05",
                            "close": 5.11
                          },
                          {
                            "date": "2020-01-06",
                            "close": 5.16
                          },
                          {
                            "date": "2020-01-07",
                            "close": 5.22
                          },
                          {
                            "date": "2020-01-08",
                            "close": 5.23
                          },
                          {
                            "date": "2020-01-09",
                            "close": 5.32
                          },
                          {
                            "date": "2020-01-10",
                            "close": 5.3
                          }
                        ]
                      }
                    ],
                    "covarianceForecastHorizon": 2
                  }
                },
                "Example (asset-specific decay factors for volatility forecasts)": {
                  "description": "Computes the (averaged) covariance matrix forecast of 2 assets using an iterated exponentially weighted moving average model with cross close-to-close (log) asset returns - assumed to have a 0 mean - and at a 2-day horizon, using asset-specific automatically determined decay factors for forecasting assets volatilities",
                  "value": {
                    "assets": [
                      {
                        "assetPrices": [
                          {
                            "date": "2020-01-01",
                            "close": 3.08
                          },
                          {
                            "date": "2020-01-02",
                            "close": 3.11
                          },
                          {
                            "date": "2020-01-03",
                            "close": 3.09
                          },
                          {
                            "date": "2020-01-04",
                            "close": 3.1
                          },
                          {
                            "date": "2020-01-05",
                            "close": 3.11
                          },
                          {
                            "date": "2020-01-06",
                            "close": 3.16
                          },
                          {
                            "date": "2020-01-07",
                            "close": 3.22
                          },
                          {
                            "date": "2020-01-08",
                            "close": 3.23
                          },
                          {
                            "date": "2020-01-09",
                            "close": 3.32
                          },
                          {
                            "date": "2020-01-10",
                            "close": 3.3
                          }
                        ]
                      },
                      {
                        "assetPrices": [
                          {
                            "date": "2020-01-01",
                            "close": 5.08
                          },
                          {
                            "date": "2020-01-02",
                            "close": 5.11
                          },
                          {
                            "date": "2020-01-03",
                            "close": 5.09
                          },
                          {
                            "date": "2020-01-04",
                            "close": 5.1
                          },
                          {
                            "date": "2020-01-05",
                            "close": 5.11
                          },
                          {
                            "date": "2020-01-06",
                            "close": 5.16
                          },
                          {
                            "date": "2020-01-07",
                            "close": 5.22
                          },
                          {
                            "date": "2020-01-08",
                            "close": 5.23
                          },
                          {
                            "date": "2020-01-09",
                            "close": 5.32
                          },
                          {
                            "date": "2020-01-10",
                            "close": 5.3
                          }
                        ]
                      }
                    ],
                    "covarianceForecastHorizon": 2,
                    "varianceProxyDecayFactors": [
                      "auto",
                      "auto"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsCovarianceMatrix"
                  ],
                  "properties": {
                    "assetsCovarianceMatrix": {
                      "description": "assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "number"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed asset covariance matrix",
                    "value": {
                      "assetsCovarianceMatrix": [
                        [
                          1.9583333333333333e-05,
                          -3.9166666666666665e-05
                        ],
                        [
                          -3.9166666666666665e-05,
                          7.833333333333333e-05
                        ]
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/correlation/matrix/forecast/iewma": {
      "post": {
        "tags": [
          "Assets / Correlation Matrix Forecast"
        ],
        "summary": "Iterated Exponentially Weighted Moving Average Model (IEWMA)",
        "description": "Forecast an (averaged) asset correlation matrix using an iterated exponentially weighted moving average (IEWMA) model.\n\nReferences\n* [Kasper Johansson, Mehmet G. Ogut, Markus Pelger, Thomas Schmelzer and Stephen Boyd (2023), A Simple Method for Predicting Covariance Matrices of Financial Returns, Foundations and Trends\u00ae in Econometrics: Vol. 12: No. 4, pp 324-407](https://www.nowpublishers.com/article/Details/ECO-047)\n* [Gianluca De Nard, Olivier Ledoit, Michael Wolf, Factor Models for Portfolio Selection in Large Dimensions: The Good, the Better and the Ugly, Journal of Financial Econometrics, Volume 19, Issue 2, Spring 2021, Pages 236\u2013257](https://academic.oup.com/jfec/article/19/2/236/5285483)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "assets"
                    ],
                    "properties": {
                      "assets": {
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "object",
                          "required": [
                            "assetReturns"
                          ],
                          "properties": {
                            "assetReturns": {
                              "description": "assetReturns[t] is the return of the asset at the time t; all assetReturns arrays must have the same length",
                              "type": "array",
                              "minItems": 2,
                              "items": {
                                "type": "number"
                              }
                            }
                          }
                        }
                      },
                      "covarianceProxy": {
                        "type": "string",
                        "description": "The covariance proxy to use",
                        "enum": [
                          "periodToPeriodReturnsOuterProduct",
                          "demeanedPeriodToPeriodReturnsOuterProduct"
                        ],
                        "default": "demeanedPeriodToPeriodReturnsOuterProduct"
                      },
                      "correlationForecastHorizon": {
                        "description": "The forecast horizon, corresponding to the number of multi-steps ahead correlation matrix forecasts to compute and average together",
                        "type": "integer",
                        "minimum": 1,
                        "default": 1
                      },
                      "varianceProxyDecayFactor": {
                        "description": "The decay factor used to compute volatility forecasts through a multivariate exponentially weighted moving average model applied to the covariance proxies; by default, the value of the best decay factor is automatically computed; exclusive with varianceProxyDecayFactors",
                        "oneOf": [
                          {
                            "type": "number",
                            "minimum": 0,
                            "exclusiveMinimum": true,
                            "maximum": 1,
                            "exclusiveMaximum": true
                          },
                          {
                            "type": "string",
                            "enum": [
                              "auto"
                            ],
                            "default": "auto"
                          }
                        ]
                      },
                      "varianceProxyDecayFactors": {
                        "description": "The decay factors used to compute volatility forecasts through individual exponentially weighted moving average models applied to the covariance proxies; the number of decay factors must be equal to the number of assets; exclusive with varianceProxyDecayFactor",
                        "type": "array",
                        "items": {
                          "oneOf": [
                            {
                              "type": "number",
                              "minimum": 0,
                              "exclusiveMinimum": true,
                              "maximum": 1,
                              "exclusiveMaximum": true
                            },
                            {
                              "type": "string",
                              "enum": [
                                "auto"
                              ]
                            }
                          ]
                        }
                      },
                      "volatilityStandardizedCovarianceProxyDecayFactor": {
                        "description": "The decay factor used to compute correlation matrix forecasts through a multivariate exponentially weighted moving average model applied to the volatility-standardized covariance proxies; by default, the value of the best decay factor is automatically computed",
                        "oneOf": [
                          {
                            "type": "number",
                            "minimum": 0,
                            "exclusiveMinimum": true,
                            "maximum": 1,
                            "exclusiveMaximum": true
                          },
                          {
                            "type": "string",
                            "enum": [
                              "auto"
                            ],
                            "default": "auto"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": [
                      "assets"
                    ],
                    "properties": {
                      "assets": {
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "object",
                          "required": [
                            "assetPrices"
                          ],
                          "properties": {
                            "assetPrices": {
                              "description": "assetPrices[t] contains price information for the asset at the date t",
                              "type": "array",
                              "minItems": 3,
                              "items": {
                                "type": "object",
                                "required": [
                                  "date",
                                  "close"
                                ],
                                "properties": {
                                  "date": {
                                    "type": "string",
                                    "description": "The date corresponding to the date t in format YYYY-MM-DD; all dates must be distinct"
                                  },
                                  "open": {
                                    "type": "number",
                                    "description": "The open price of the asset at the date t; must be higher than or equal to the low price and lower than or equal to the high price; not used",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  },
                                  "high": {
                                    "type": "number",
                                    "description": "The high price of the asset at the date t; must be lower than or equal to the high price; not used",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  },
                                  "low": {
                                    "type": "number",
                                    "description": "The low price of the asset at the date t; must be higher than or equal to the low price; not used",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  },
                                  "close": {
                                    "type": "number",
                                    "description": "The close price of the asset at the date t; must be higher than or equal to the low price and lower than or equal to the high price",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "covarianceProxy": {
                        "type": "string",
                        "description": "The covariance proxy to use",
                        "enum": [
                          "closeToCloseReturnsOuterProduct",
                          "demeanedCloseToCloseReturnsOuterProduct"
                        ],
                        "default": "closeToCloseReturnsOuterProduct"
                      },
                      "correlationForecastHorizon": {
                        "description": "The forecast horizon, corresponding to the number of multi-steps ahead correlation matrix forecasts to compute and average together",
                        "type": "integer",
                        "minimum": 1,
                        "default": 1
                      },
                      "varianceProxyDecayFactor": {
                        "description": "The decay factor used to compute volatility forecasts through a multivariate exponentially weighted moving average model applied to the covariance proxies; by default, the value of the best decay factor is automatically computed; exclusive with varianceProxyDecayFactors",
                        "oneOf": [
                          {
                            "type": "number",
                            "minimum": 0,
                            "exclusiveMinimum": true,
                            "maximum": 1,
                            "exclusiveMaximum": true
                          },
                          {
                            "type": "string",
                            "enum": [
                              "auto"
                            ],
                            "default": "auto"
                          }
                        ]
                      },
                      "varianceProxyDecayFactors": {
                        "description": "The decay factors used to compute volatility forecasts through individual exponentially weighted moving average models applied to the covariance proxies; the number of decay factors must be equal to the number of assets; exclusive with varianceProxyDecayFactor",
                        "type": "array",
                        "items": {
                          "oneOf": [
                            {
                              "type": "number",
                              "minimum": 0,
                              "exclusiveMinimum": true,
                              "maximum": 1,
                              "exclusiveMaximum": true
                            },
                            {
                              "type": "string",
                              "enum": [
                                "auto"
                              ]
                            }
                          ]
                        }
                      },
                      "volatilityStandardizedCovarianceProxyDecayFactor": {
                        "description": "The decay factor used to compute correlation matrix forecasts through a multivariate exponentially weighted moving average model applied to the volatility-standardized covariance proxies; by default, the value of the best decay factor is automatically computed",
                        "oneOf": [
                          {
                            "type": "number",
                            "minimum": 0,
                            "exclusiveMinimum": true,
                            "maximum": 1,
                            "exclusiveMaximum": true
                          },
                          {
                            "type": "string",
                            "enum": [
                              "auto"
                            ],
                            "default": "auto"
                          }
                        ]
                      }
                    }
                  }
                ]
              },
              "examples": {
                "Example (common decay factor for volatility forecasts)": {
                  "description": "Computes the (averaged) correlation matrix forecast of 2 assets using an iterated exponentially weighted moving average model with cross close-to-close (log) asset returns - assumed to have a 0 mean - and at a 2-day horizon, using a common automatically determined decay factor for forecasting assets volatilities",
                  "value": {
                    "assets": [
                      {
                        "assetPrices": [
                          {
                            "date": "2020-01-01",
                            "close": 3.08
                          },
                          {
                            "date": "2020-01-02",
                            "close": 3.11
                          },
                          {
                            "date": "2020-01-03",
                            "close": 3.09
                          },
                          {
                            "date": "2020-01-04",
                            "close": 3.1
                          },
                          {
                            "date": "2020-01-05",
                            "close": 3.11
                          },
                          {
                            "date": "2020-01-06",
                            "close": 3.16
                          },
                          {
                            "date": "2020-01-07",
                            "close": 3.22
                          },
                          {
                            "date": "2020-01-08",
                            "close": 3.23
                          },
                          {
                            "date": "2020-01-09",
                            "close": 3.32
                          },
                          {
                            "date": "2020-01-10",
                            "close": 3.3
                          }
                        ]
                      },
                      {
                        "assetPrices": [
                          {
                            "date": "2020-01-01",
                            "close": 5.08
                          },
                          {
                            "date": "2020-01-02",
                            "close": 5.11
                          },
                          {
                            "date": "2020-01-03",
                            "close": 5.09
                          },
                          {
                            "date": "2020-01-04",
                            "close": 5.1
                          },
                          {
                            "date": "2020-01-05",
                            "close": 5.11
                          },
                          {
                            "date": "2020-01-06",
                            "close": 5.16
                          },
                          {
                            "date": "2020-01-07",
                            "close": 5.22
                          },
                          {
                            "date": "2020-01-08",
                            "close": 5.23
                          },
                          {
                            "date": "2020-01-09",
                            "close": 5.32
                          },
                          {
                            "date": "2020-01-10",
                            "close": 5.3
                          }
                        ]
                      }
                    ],
                    "correlationForecastHorizon": 2
                  }
                },
                "Example (asset-specific decay factors for volatility forecasts)": {
                  "description": "Computes the (averaged) correlation matrix forecast of 2 assets using an iterated exponentially weighted moving average model with cross close-to-close (log) asset returns - assumed to have a 0 mean - and at a 2-day horizon, using asset-specific automatically determined decay factors for forecasting assets volatilities",
                  "value": {
                    "assets": [
                      {
                        "assetPrices": [
                          {
                            "date": "2020-01-01",
                            "close": 3.08
                          },
                          {
                            "date": "2020-01-02",
                            "close": 3.11
                          },
                          {
                            "date": "2020-01-03",
                            "close": 3.09
                          },
                          {
                            "date": "2020-01-04",
                            "close": 3.1
                          },
                          {
                            "date": "2020-01-05",
                            "close": 3.11
                          },
                          {
                            "date": "2020-01-06",
                            "close": 3.16
                          },
                          {
                            "date": "2020-01-07",
                            "close": 3.22
                          },
                          {
                            "date": "2020-01-08",
                            "close": 3.23
                          },
                          {
                            "date": "2020-01-09",
                            "close": 3.32
                          },
                          {
                            "date": "2020-01-10",
                            "close": 3.3
                          }
                        ]
                      },
                      {
                        "assetPrices": [
                          {
                            "date": "2020-01-01",
                            "close": 5.08
                          },
                          {
                            "date": "2020-01-02",
                            "close": 5.11
                          },
                          {
                            "date": "2020-01-03",
                            "close": 5.09
                          },
                          {
                            "date": "2020-01-04",
                            "close": 5.1
                          },
                          {
                            "date": "2020-01-05",
                            "close": 5.11
                          },
                          {
                            "date": "2020-01-06",
                            "close": 5.16
                          },
                          {
                            "date": "2020-01-07",
                            "close": 5.22
                          },
                          {
                            "date": "2020-01-08",
                            "close": 5.23
                          },
                          {
                            "date": "2020-01-09",
                            "close": 5.32
                          },
                          {
                            "date": "2020-01-10",
                            "close": 5.3
                          }
                        ]
                      }
                    ],
                    "correlationForecastHorizon": 2,
                    "varianceProxyDecayFactors": [
                      "auto",
                      "auto"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsCorrelationMatrix"
                  ],
                  "properties": {
                    "assetsCorrelationMatrix": {
                      "description": "assetsCorrelationMatrix[i][j] is the correlation between the asset i and the asset j",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "number"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed asset correlation matrix",
                    "value": {
                      "assetsCorrelationMatrix": [
                        [
                          1.9583333333333333e-05,
                          -3.9166666666666665e-05
                        ],
                        [
                          -3.9166666666666665e-05,
                          7.833333333333333e-05
                        ]
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/covariance/matrix/forecast/sma": {
      "post": {
        "tags": [
          "Assets / Covariance Matrix Forecast"
        ],
        "summary": "Simple Moving Average Model (SMA)",
        "description": "Forecast an (averaged) asset covariance matrix using a simple moving average (SMA) model.\n\nReferences\n* [Kasper Johansson, Mehmet G. Ogut, Markus Pelger, Thomas Schmelzer and Stephen Boyd (2023), A Simple Method for Predicting Covariance Matrices of Financial Returns, Foundations and Trends\u00ae in Econometrics: Vol. 12: No. 4, pp 324-407](https://www.nowpublishers.com/article/Details/ECO-047)\n* [Gianluca De Nard, Olivier Ledoit, Michael Wolf, Factor Models for Portfolio Selection in Large Dimensions: The Good, the Better and the Ugly, Journal of Financial Econometrics, Volume 19, Issue 2, Spring 2021, Pages 236\u2013257](https://academic.oup.com/jfec/article/19/2/236/5285483)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "assets"
                    ],
                    "properties": {
                      "assets": {
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "object",
                          "required": [
                            "assetReturns"
                          ],
                          "properties": {
                            "assetReturns": {
                              "description": "assetReturns[t] is the return of the asset at the time t; all assetReturns arrays must have the same length",
                              "type": "array",
                              "minItems": 2,
                              "items": {
                                "type": "number"
                              }
                            }
                          }
                        }
                      },
                      "covarianceProxy": {
                        "type": "string",
                        "description": "The covariance proxy to use",
                        "enum": [
                          "periodToPeriodReturnsOuterProduct",
                          "demeanedPeriodToPeriodReturnsOuterProduct"
                        ],
                        "default": "demeanedPeriodToPeriodReturnsOuterProduct"
                      },
                      "covarianceForecastHorizon": {
                        "description": "The forecast horizon, corresponding to the number of multi-steps ahead covariance matrix forecasts to compute and average together",
                        "type": "integer",
                        "minimum": 1,
                        "default": 1
                      },
                      "covarianceProxyWindowSize": {
                        "description": "The window size of the simple moving average, corresponding to the number of covariance proxy observations to be averaged",
                        "type": "integer",
                        "minimum": 1
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": [
                      "assets"
                    ],
                    "properties": {
                      "assets": {
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "object",
                          "required": [
                            "assetPrices"
                          ],
                          "properties": {
                            "assetPrices": {
                              "description": "assetPrices[t] contains price information for the asset at the date t",
                              "type": "array",
                              "minItems": 3,
                              "items": {
                                "type": "object",
                                "required": [
                                  "date",
                                  "close"
                                ],
                                "properties": {
                                  "date": {
                                    "type": "string",
                                    "description": "The date corresponding to the date t in format YYYY-MM-DD; all dates must be distinct"
                                  },
                                  "open": {
                                    "type": "number",
                                    "description": "The open price of the asset at the date t; must be higher than or equal to the low price and lower than or equal to the high price; not used",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  },
                                  "high": {
                                    "type": "number",
                                    "description": "The high price of the asset at the date t; must be lower than or equal to the high price; not used",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  },
                                  "low": {
                                    "type": "number",
                                    "description": "The low price of the asset at the date t; must be higher than or equal to the low price; not used",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  },
                                  "close": {
                                    "type": "number",
                                    "description": "The close price of the asset at the date t; must be higher than or equal to the low price and lower than or equal to the high price",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "covarianceProxy": {
                        "type": "string",
                        "description": "The covariance proxy to use",
                        "enum": [
                          "closeToCloseReturnsOuterProduct",
                          "demeanedCloseToCloseReturnsOuterProduct"
                        ],
                        "default": "closeToCloseReturnsOuterProduct"
                      },
                      "covarianceForecastHorizon": {
                        "description": "The forecast horizon, corresponding to the number of multi-steps ahead covariance matrix forecasts to compute and average together",
                        "type": "integer",
                        "minimum": 1,
                        "default": 1
                      },
                      "covarianceProxyWindowSize": {
                        "description": "The window size of the simple moving average, corresponding to the number of covariance proxy observations to be averaged",
                        "type": "integer",
                        "minimum": 1
                      }
                    }
                  }
                ]
              },
              "examples": {
                "Example": {
                  "description": "Computes the (averaged) covariance matrix forecast of 2 assets using a simple moving average model with cross close-to-close (log) asset returns - assumed to have a 0 mean - and at a 2-day window size",
                  "value": {
                    "assets": [
                      {
                        "assetPrices": [
                          {
                            "date": "2020-01-01",
                            "close": 3.08
                          },
                          {
                            "date": "2020-01-02",
                            "close": 3.11
                          },
                          {
                            "date": "2020-01-03",
                            "close": 3.09
                          },
                          {
                            "date": "2020-01-04",
                            "close": 3.1
                          },
                          {
                            "date": "2020-01-05",
                            "close": 3.11
                          },
                          {
                            "date": "2020-01-06",
                            "close": 3.16
                          },
                          {
                            "date": "2020-01-07",
                            "close": 3.22
                          },
                          {
                            "date": "2020-01-08",
                            "close": 3.23
                          },
                          {
                            "date": "2020-01-09",
                            "close": 3.32
                          },
                          {
                            "date": "2020-01-10",
                            "close": 3.3
                          }
                        ]
                      },
                      {
                        "assetPrices": [
                          {
                            "date": "2020-01-01",
                            "close": 5.08
                          },
                          {
                            "date": "2020-01-02",
                            "close": 5.11
                          },
                          {
                            "date": "2020-01-03",
                            "close": 5.09
                          },
                          {
                            "date": "2020-01-04",
                            "close": 5.1
                          },
                          {
                            "date": "2020-01-05",
                            "close": 5.11
                          },
                          {
                            "date": "2020-01-06",
                            "close": 5.16
                          },
                          {
                            "date": "2020-01-07",
                            "close": 5.22
                          },
                          {
                            "date": "2020-01-08",
                            "close": 5.23
                          },
                          {
                            "date": "2020-01-09",
                            "close": 5.32
                          },
                          {
                            "date": "2020-01-10",
                            "close": 5.3
                          }
                        ]
                      }
                    ],
                    "covarianceProxyWindowSize": 2
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsCovarianceMatrix"
                  ],
                  "properties": {
                    "assetsCovarianceMatrix": {
                      "description": "assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "number"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed asset covariance matrix",
                    "value": {
                      "assetsCovarianceMatrix": [
                        [
                          1.9583333333333333e-05,
                          -3.9166666666666665e-05
                        ],
                        [
                          -3.9166666666666665e-05,
                          7.833333333333333e-05
                        ]
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/correlation/matrix/forecast/ewma": {
      "post": {
        "tags": [
          "Assets / Correlation Matrix Forecast"
        ],
        "summary": "Exponentially Weighted Moving Average Model (EWMA)",
        "description": "Forecast an (averaged) asset correlation matrix using an exponentially weighted moving average (EWMA) model.\n\nReferences\n* [Kasper Johansson, Mehmet G. Ogut, Markus Pelger, Thomas Schmelzer and Stephen Boyd (2023), A Simple Method for Predicting Covariance Matrices of Financial Returns, Foundations and Trends\u00ae in Econometrics: Vol. 12: No. 4, pp 324-407](https://www.nowpublishers.com/article/Details/ECO-047)\n* [Gianluca De Nard, Olivier Ledoit, Michael Wolf, Factor Models for Portfolio Selection in Large Dimensions: The Good, the Better and the Ugly, Journal of Financial Econometrics, Volume 19, Issue 2, Spring 2021, Pages 236\u2013257](https://academic.oup.com/jfec/article/19/2/236/5285483)\n* [RiskMetrics. Technical Document, J.P.Morgan/Reuters, New York, 1996. Fourth Edition](https://www.msci.com/documents/10199/5915b101-4206-4ba0-aee2-3449d5c7e95a)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "assets"
                    ],
                    "properties": {
                      "assets": {
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "object",
                          "required": [
                            "assetReturns"
                          ],
                          "properties": {
                            "assetReturns": {
                              "description": "assetReturns[t] is the return of the asset at the time t; all assetReturns arrays must have the same length",
                              "type": "array",
                              "minItems": 2,
                              "items": {
                                "type": "number"
                              }
                            }
                          }
                        }
                      },
                      "covarianceProxy": {
                        "type": "string",
                        "description": "The covariance proxy to use",
                        "enum": [
                          "periodToPeriodReturnsOuterProduct",
                          "demeanedPeriodToPeriodReturnsOuterProduct"
                        ],
                        "default": "demeanedPeriodToPeriodReturnsOuterProduct"
                      },
                      "correlationForecastHorizon": {
                        "description": "The forecast horizon, corresponding to the number of multi-steps ahead correlation matrix forecasts to compute and average together",
                        "type": "integer",
                        "minimum": 1,
                        "default": 1
                      },
                      "covarianceProxyDecayFactor": {
                        "description": "The decay factor of the exponentially weighted moving average; by default, the value of the best decay factor is automatically computed",
                        "oneOf": [
                          {
                            "type": "number",
                            "minimum": 0,
                            "exclusiveMinimum": true,
                            "maximum": 1,
                            "exclusiveMaximum": true
                          },
                          {
                            "type": "string",
                            "enum": [
                              "auto"
                            ],
                            "default": "auto"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": [
                      "assets"
                    ],
                    "properties": {
                      "assets": {
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "object",
                          "required": [
                            "assetPrices"
                          ],
                          "properties": {
                            "assetPrices": {
                              "description": "assetPrices[t] contains price information for the asset at the date t",
                              "type": "array",
                              "minItems": 3,
                              "items": {
                                "type": "object",
                                "required": [
                                  "date",
                                  "close"
                                ],
                                "properties": {
                                  "date": {
                                    "type": "string",
                                    "description": "The date corresponding to the date t in format YYYY-MM-DD; all dates must be distinct"
                                  },
                                  "open": {
                                    "type": "number",
                                    "description": "The open price of the asset at the date t; must be higher than or equal to the low price and lower than or equal to the high price; not used",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  },
                                  "high": {
                                    "type": "number",
                                    "description": "The high price of the asset at the date t; must be lower than or equal to the high price; not used",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  },
                                  "low": {
                                    "type": "number",
                                    "description": "The low price of the asset at the date t; must be higher than or equal to the low price; not used",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  },
                                  "close": {
                                    "type": "number",
                                    "description": "The close price of the asset at the date t; must be higher than or equal to the low price and lower than or equal to the high price",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "covarianceProxy": {
                        "type": "string",
                        "description": "The covariance proxy to use",
                        "enum": [
                          "closeToCloseReturnsOuterProduct",
                          "demeanedCloseToCloseReturnsOuterProduct"
                        ],
                        "default": "closeToCloseReturnsOuterProduct"
                      },
                      "correlationForecastHorizon": {
                        "description": "The forecast horizon, corresponding to the number of multi-steps ahead correlation matrix forecasts to compute and average together",
                        "type": "integer",
                        "minimum": 1,
                        "default": 1
                      },
                      "covarianceProxyDecayFactor": {
                        "description": "The decay factor of the exponentially weighted moving average; by default, the value of the best decay factor is automatically computed",
                        "oneOf": [
                          {
                            "type": "number",
                            "minimum": 0,
                            "exclusiveMinimum": true,
                            "maximum": 1,
                            "exclusiveMaximum": true
                          },
                          {
                            "type": "string",
                            "enum": [
                              "auto"
                            ],
                            "default": "auto"
                          }
                        ]
                      }
                    }
                  }
                ]
              },
              "examples": {
                "Example": {
                  "description": "Computes the (averaged) correlation matrix forecast of 2 assets using an exponentially weighted moving average model with cross close-to-close (log) asset returns - assumed to have a 0 mean - and at a 2-day horizon",
                  "value": {
                    "assets": [
                      {
                        "assetPrices": [
                          {
                            "date": "2020-01-01",
                            "close": 3.08
                          },
                          {
                            "date": "2020-01-02",
                            "close": 3.11
                          },
                          {
                            "date": "2020-01-03",
                            "close": 3.09
                          },
                          {
                            "date": "2020-01-04",
                            "close": 3.1
                          },
                          {
                            "date": "2020-01-05",
                            "close": 3.11
                          },
                          {
                            "date": "2020-01-06",
                            "close": 3.16
                          },
                          {
                            "date": "2020-01-07",
                            "close": 3.22
                          },
                          {
                            "date": "2020-01-08",
                            "close": 3.23
                          },
                          {
                            "date": "2020-01-09",
                            "close": 3.32
                          },
                          {
                            "date": "2020-01-10",
                            "close": 3.3
                          }
                        ]
                      },
                      {
                        "assetPrices": [
                          {
                            "date": "2020-01-01",
                            "close": 5.08
                          },
                          {
                            "date": "2020-01-02",
                            "close": 5.11
                          },
                          {
                            "date": "2020-01-03",
                            "close": 5.09
                          },
                          {
                            "date": "2020-01-04",
                            "close": 5.1
                          },
                          {
                            "date": "2020-01-05",
                            "close": 5.11
                          },
                          {
                            "date": "2020-01-06",
                            "close": 5.16
                          },
                          {
                            "date": "2020-01-07",
                            "close": 5.22
                          },
                          {
                            "date": "2020-01-08",
                            "close": 5.23
                          },
                          {
                            "date": "2020-01-09",
                            "close": 5.32
                          },
                          {
                            "date": "2020-01-10",
                            "close": 5.3
                          }
                        ]
                      }
                    ],
                    "correlationForecastHorizon": 2
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsCorrelationMatrix"
                  ],
                  "properties": {
                    "assetsCorrelationMatrix": {
                      "description": "assetsCorrelationMatrix[i][j] is the correlation between the asset i and the asset j",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "number"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed asset correlation matrix",
                    "value": {
                      "assetsCorrelationMatrix": [
                        [
                          1.9583333333333333e-05,
                          -3.9166666666666665e-05
                        ],
                        [
                          -3.9166666666666665e-05,
                          7.833333333333333e-05
                        ]
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/correlation/matrix/forecast/sma": {
      "post": {
        "tags": [
          "Assets / Correlation Matrix Forecast"
        ],
        "summary": "Simple Moving Average Model (SMA)",
        "description": "Forecast an (averaged) asset correlation matrix using a simple moving average (SMA) model.\n\nReferences\n* [Kasper Johansson, Mehmet G. Ogut, Markus Pelger, Thomas Schmelzer and Stephen Boyd (2023), A Simple Method for Predicting Covariance Matrices of Financial Returns, Foundations and Trends\u00ae in Econometrics: Vol. 12: No. 4, pp 324-407](https://www.nowpublishers.com/article/Details/ECO-047)\n* [Gianluca De Nard, Olivier Ledoit, Michael Wolf, Factor Models for Portfolio Selection in Large Dimensions: The Good, the Better and the Ugly, Journal of Financial Econometrics, Volume 19, Issue 2, Spring 2021, Pages 236\u2013257](https://academic.oup.com/jfec/article/19/2/236/5285483)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "assets"
                    ],
                    "properties": {
                      "assets": {
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "object",
                          "required": [
                            "assetReturns"
                          ],
                          "properties": {
                            "assetReturns": {
                              "description": "assetReturns[t] is the return of the asset at the time t; all assetReturns arrays must have the same length",
                              "type": "array",
                              "minItems": 2,
                              "items": {
                                "type": "number"
                              }
                            }
                          }
                        }
                      },
                      "covarianceProxy": {
                        "type": "string",
                        "description": "The covariance proxy to use",
                        "enum": [
                          "periodToPeriodReturnsOuterProduct",
                          "demeanedPeriodToPeriodReturnsOuterProduct"
                        ],
                        "default": "demeanedPeriodToPeriodReturnsOuterProduct"
                      },
                      "correlationForecastHorizon": {
                        "description": "The forecast horizon, corresponding to the number of multi-steps ahead correlation matrix forecasts to compute and average together",
                        "type": "integer",
                        "minimum": 1,
                        "default": 1
                      },
                      "covarianceProxyWindowSize": {
                        "description": "The window size of the simple moving average, corresponding to the number of covariance proxy observations to be averaged",
                        "type": "integer",
                        "minimum": 1
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": [
                      "assets"
                    ],
                    "properties": {
                      "assets": {
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "object",
                          "required": [
                            "assetPrices"
                          ],
                          "properties": {
                            "assetPrices": {
                              "description": "assetPrices[t] contains price information for the asset at the date t",
                              "type": "array",
                              "minItems": 3,
                              "items": {
                                "type": "object",
                                "required": [
                                  "date",
                                  "close"
                                ],
                                "properties": {
                                  "date": {
                                    "type": "string",
                                    "description": "The date corresponding to the date t in format YYYY-MM-DD; all dates must be distinct"
                                  },
                                  "open": {
                                    "type": "number",
                                    "description": "The open price of the asset at the date t; must be higher than or equal to the low price and lower than or equal to the high price; not used",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  },
                                  "high": {
                                    "type": "number",
                                    "description": "The high price of the asset at the date t; must be lower than or equal to the high price; not used",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  },
                                  "low": {
                                    "type": "number",
                                    "description": "The low price of the asset at the date t; must be higher than or equal to the low price; not used",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  },
                                  "close": {
                                    "type": "number",
                                    "description": "The close price of the asset at the date t; must be higher than or equal to the low price and lower than or equal to the high price",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "covarianceProxy": {
                        "type": "string",
                        "description": "The covariance proxy to use",
                        "enum": [
                          "closeToCloseReturnsOuterProduct",
                          "demeanedCloseToCloseReturnsOuterProduct"
                        ],
                        "default": "closeToCloseReturnsOuterProduct"
                      },
                      "correlationForecastHorizon": {
                        "description": "The forecast horizon, corresponding to the number of multi-steps ahead correlation matrix forecasts to compute and average together",
                        "type": "integer",
                        "minimum": 1,
                        "default": 1
                      },
                      "covarianceProxyWindowSize": {
                        "description": "The window size of the simple moving average, corresponding to the number of covariance proxy observations to be averaged",
                        "type": "integer",
                        "minimum": 1
                      }
                    }
                  }
                ]
              },
              "examples": {
                "Example": {
                  "description": "Computes the (averaged) correlation matrix forecast of 2 assets using a simple moving average model with cross close-to-close (log) asset returns - assumed to have a 0 mean - and at a 2-day window size",
                  "value": {
                    "assets": [
                      {
                        "assetPrices": [
                          {
                            "date": "2020-01-01",
                            "close": 3.08
                          },
                          {
                            "date": "2020-01-02",
                            "close": 3.11
                          },
                          {
                            "date": "2020-01-03",
                            "close": 3.09
                          },
                          {
                            "date": "2020-01-04",
                            "close": 3.1
                          },
                          {
                            "date": "2020-01-05",
                            "close": 3.11
                          },
                          {
                            "date": "2020-01-06",
                            "close": 3.16
                          },
                          {
                            "date": "2020-01-07",
                            "close": 3.22
                          },
                          {
                            "date": "2020-01-08",
                            "close": 3.23
                          },
                          {
                            "date": "2020-01-09",
                            "close": 3.32
                          },
                          {
                            "date": "2020-01-10",
                            "close": 3.3
                          }
                        ]
                      },
                      {
                        "assetPrices": [
                          {
                            "date": "2020-01-01",
                            "close": 5.08
                          },
                          {
                            "date": "2020-01-02",
                            "close": 5.11
                          },
                          {
                            "date": "2020-01-03",
                            "close": 5.09
                          },
                          {
                            "date": "2020-01-04",
                            "close": 5.1
                          },
                          {
                            "date": "2020-01-05",
                            "close": 5.11
                          },
                          {
                            "date": "2020-01-06",
                            "close": 5.16
                          },
                          {
                            "date": "2020-01-07",
                            "close": 5.22
                          },
                          {
                            "date": "2020-01-08",
                            "close": 5.23
                          },
                          {
                            "date": "2020-01-09",
                            "close": 5.32
                          },
                          {
                            "date": "2020-01-10",
                            "close": 5.3
                          }
                        ]
                      }
                    ],
                    "covarianceProxyWindowSize": 2
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsCorrelationMatrix"
                  ],
                  "properties": {
                    "assetsCorrelationMatrix": {
                      "description": "assetsCorrelationMatrix[i][j] is the correlation between the asset i and the asset j",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "number"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed asset correlation matrix",
                    "value": {
                      "assetsCorrelationMatrix": [
                        [
                          1.9583333333333333e-05,
                          -3.9166666666666665e-05
                        ],
                        [
                          -3.9166666666666665e-05,
                          7.833333333333333e-05
                        ]
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/covariance/matrix/validation": {
      "post": {
        "tags": [
          "Assets / Covariance Matrix"
        ],
        "summary": "Covariance Matrix Validation",
        "description": "Validate whether a matrix is a covariance matrix.\n\nReferences\n* [Wikipedia, Covariance Matrix](https://en.wikipedia.org/wiki/Covariance_matrix)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets",
                  "assetsCovarianceMatrix"
                ],
                "properties": {
                  "assets": {
                    "type": "integer",
                    "description": "The number of assets",
                    "minimum": 2
                  },
                  "assetsCovarianceMatrix": {
                    "description": "assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number"
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Validate whether the provided matrix is a covariance matrix",
                  "value": {
                    "assets": 2,
                    "assetsCovarianceMatrix": [
                      [
                        0.00035,
                        -0.00035
                      ],
                      [
                        -0.00035,
                        0.00035
                      ]
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "description": "Indicates whether the matrix is a valid covariance matrix",
                      "type": "string",
                      "enum": [
                        "valid covariance matrix",
                        "invalid covariance matrix - non symmetric matrix",
                        "invalid covariance matrix - non positive diagonal elements",
                        "invalid covariance matrix - non positive semi-definite matrix"
                      ]
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Valid covariance matrix",
                    "value": {
                      "message": "valid covariance matrix"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/covariance/matrix/effective-rank": {
      "post": {
        "tags": [
          "Assets / Covariance Matrix"
        ],
        "summary": "Covariance Matrix Effective Rank",
        "description": "Compute the effective rank of an asset covariance matrix.\n\nReferences\n* [Olivier Roy and Martin Vetterli, The effective rank: A measure of effective dimensionality, 15th European Signal Processing Conference, 2007](https://ieeexplore.ieee.org/document/7098875)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "assets",
                  "assetsCovarianceMatrix"
                ],
                "properties": {
                  "assets": {
                    "type": "integer",
                    "description": "The number of assets",
                    "minimum": 2
                  },
                  "assetsCovarianceMatrix": {
                    "description": "assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number"
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute the effective rank of a covariance matrix of two assets",
                  "value": {
                    "assets": 2,
                    "assetsCovarianceMatrix": [
                      [
                        0.00035,
                        -0.00035
                      ],
                      [
                        -0.00035,
                        0.00035
                      ]
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsCovarianceMatrixEffectiveRank"
                  ],
                  "properties": {
                    "assetsCovarianceMatrixEffectiveRank": {
                      "description": "The effective rank of the asset covariance matrix",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "number"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed effective rank",
                    "value": {
                      "assetsCovarianceMatrixEffectiveRank": 1
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/returns/standard-deviation": {
      "post": {
        "tags": [
          "Assets / Returns / Moments"
        ],
        "summary": "Standard Deviation",
        "description": "Compute the standard deviation of the returns of an asset, from either:\n* The asset returns\n* The variance of the asset returns\n\nAlternatively, compute the standard deviation of the returns of several assets from the covariance matrix of the returns of these assets.\n\nReferences\n* [Wikipedia, Standard Deviation](https://en.wikipedia.org/wiki/Standard_deviation)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "assets"
                    ],
                    "properties": {
                      "assets": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "required": [
                            "assetReturns"
                          ],
                          "properties": {
                            "assetReturns": {
                              "description": "assetReturns[t] is the return of the asset at the time t",
                              "type": "array",
                              "minItems": 2,
                              "items": {
                                "type": "number"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": [
                      "assets",
                      "assetsCovarianceMatrix"
                    ],
                    "properties": {
                      "assets": {
                        "type": "integer",
                        "description": "The number of assets",
                        "minimum": 2
                      },
                      "assetsCovarianceMatrix": {
                        "type": "array",
                        "description": "assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j",
                        "minItems": 2,
                        "items": {
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": [
                      "assets"
                    ],
                    "properties": {
                      "assets": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "required": [
                            "assetVariance"
                          ],
                          "properties": {
                            "assetVariance": {
                              "description": "The asset variance",
                              "type": "number",
                              "minimum": 0
                            }
                          }
                        }
                      }
                    }
                  }
                ]
              },
              "examples": {
                "From asset returns": {
                  "description": "Compute the standard deviation of two assets based on 4 returns per asset",
                  "value": {
                    "assets": [
                      {
                        "assetReturns": [
                          0.01,
                          0,
                          0.02,
                          -0.03
                        ]
                      },
                      {
                        "assetReturns": [
                          0.01,
                          0,
                          0.02,
                          -0.03
                        ]
                      }
                    ]
                  }
                },
                "From asset covariance matrix": {
                  "description": "Compute the standard deviation of two assets based on their covariance matrix",
                  "value": {
                    "assets": 2,
                    "assetsCovarianceMatrix": [
                      [
                        0.01,
                        -0.0025
                      ],
                      [
                        -0.0025,
                        0.0025
                      ]
                    ]
                  }
                },
                "From asset variance": {
                  "description": "Compute the standard deviation of two assets based on their variance",
                  "value": {
                    "assets": [
                      {
                        "assetVariance": 0.01
                      },
                      {
                        "assetVariance": 0.0025
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assets"
                  ],
                  "properties": {
                    "assets": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "assetStandardDeviation"
                        ],
                        "properties": {
                          "assetStandardDeviation": {
                            "description": "The standard deviation of the asset",
                            "type": "number",
                            "minimum": 0
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed standard deviation of two assets",
                    "value": {
                      "assets": [
                        {
                          "assetStandardDeviation": 0.01870828693386971
                        },
                        {
                          "assetStandardDeviation": 0.01870828693386971
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/volatility/estimation/close-to-close": {
      "post": {
        "tags": [
          "Assets / Volatility Estimation"
        ],
        "summary": "Close-to-Close Volatility",
        "description": "Compute the close-to-close volatility of an asset over a given time period, using close prices.\n\nReferences\n* [Colin Bennett, Trading Volatility, Correlation, Term Structure and Skew](https://www.trading-volatility.com/)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets"
                ],
                "properties": {
                  "assets": {
                    "type": "array",
                    "minItems": 3,
                    "items": {
                      "type": "object",
                      "required": [
                        "assetPrices"
                      ],
                      "properties": {
                        "assetPrices": {
                          "description": "assetPrices[t] contains price information for the asset at the date t",
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "object",
                            "required": [
                              "date",
                              "close"
                            ],
                            "properties": {
                              "date": {
                                "type": "string",
                                "description": "The date corresponding to the date t in format YYYY-MM-DD; all dates must be distinct"
                              },
                              "open": {
                                "type": "number",
                                "description": "The open price of the asset at the date t; must be higher than or equal to the low price and lower than or equal to the high price; not used",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              },
                              "high": {
                                "type": "number",
                                "description": "The high price of the asset at the date t; must be lower than or equal to the high price; not used",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              },
                              "low": {
                                "type": "number",
                                "description": "The low price of the asset at the date t; must be higher than or equal to the low price; not used",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              },
                              "close": {
                                "type": "number",
                                "description": "The close price of the asset at the date t; must be higher than or equal to the low price and lower than or equal to the high price",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              }
                            }
                          }
                        },
                        "assetReturnsDemeaning": {
                          "type": "boolean",
                          "description": "Whether to de-mean the raw asset close-to-close logarithmic returns before squaring them (true) or not (false); not de-meaning the raw returns implicitely assumes that the average asset close-to-close logarithmic return is zero; if true, the minimum number of items in assetPrices becomes 3 instead of 2",
                          "default": false
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute the close to close volatility using first 10 data of the TTR R package",
                  "value": {
                    "assets": [
                      {
                        "assetPrices": [
                          {
                            "date": "2020-01-01",
                            "close": 3.08
                          },
                          {
                            "date": "2020-01-02",
                            "close": 3.11
                          },
                          {
                            "date": "2020-01-03",
                            "close": 3.09
                          },
                          {
                            "date": "2020-01-04",
                            "close": 3.1
                          },
                          {
                            "date": "2020-01-05",
                            "close": 3.11
                          },
                          {
                            "date": "2020-01-06",
                            "close": 3.16
                          },
                          {
                            "date": "2020-01-07",
                            "close": 3.22
                          },
                          {
                            "date": "2020-01-08",
                            "close": 3.23
                          },
                          {
                            "date": "2020-01-09",
                            "close": 3.32
                          },
                          {
                            "date": "2020-01-10",
                            "close": 3.3
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assets"
                  ],
                  "properties": {
                    "assets": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "assetVolatility"
                        ],
                        "properties": {
                          "assetVolatility": {
                            "description": "The volatility of the asset",
                            "type": "number",
                            "minimum": 0
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed volatility of 1 asset",
                    "value": {
                      "assets": [
                        {
                          "assetVolatility": 0.011385807
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/volatility/estimation/garman-klass": {
      "post": {
        "tags": [
          "Assets / Volatility Estimation"
        ],
        "summary": "Garman-Klass Volatility",
        "description": "Compute the Garman-Klass volatility of an asset over a given time period, using open, high, low and close prices.\n\nReferences\n* [Colin Bennett, Trading Volatility, Correlation, Term Structure and Skew](https://www.trading-volatility.com/)\n* [Garman, M. B., and M. J. Klass, 1980, On the Estimation of Security Price Volatilities from Historical Data, Journal of Business 53:67\u201378](https://www.jstor.org/stable/2352358)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets"
                ],
                "properties": {
                  "assets": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "assetPrices"
                      ],
                      "properties": {
                        "assetPrices": {
                          "description": "assetPrices[t] contains price information for the asset at the date t",
                          "type": "array",
                          "minItems": 1,
                          "items": {
                            "type": "object",
                            "required": [
                              "date",
                              "open",
                              "high",
                              "low",
                              "close"
                            ],
                            "properties": {
                              "date": {
                                "type": "string",
                                "description": "The date corresponding to the date t in format YYYY-MM-DD; all dates must be distinct"
                              },
                              "open": {
                                "type": "number",
                                "description": "The open price of the asset at the date t; must be higher than or equal to the low price and lower than or equal to the high price",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              },
                              "high": {
                                "type": "number",
                                "description": "The high price of the asset at the date t; must be lower than or equal to the high price",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              },
                              "low": {
                                "type": "number",
                                "description": "The low price of the asset at the date t; must be higher than or equal to the low price",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              },
                              "close": {
                                "type": "number",
                                "description": "The close price of the asset at the date t; must be higher than or equal to the low price and lower than or equal to the high price",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute the Garman-Klass volatility using first 10 data of the TTR R package",
                  "value": {
                    "assets": [
                      {
                        "assetPrices": [
                          {
                            "date": "2020-01-01",
                            "open": 3.18,
                            "high": 3.18,
                            "low": 3.08,
                            "close": 3.08
                          },
                          {
                            "date": "2020-01-02",
                            "open": 3.09,
                            "high": 3.15,
                            "low": 3.09,
                            "close": 3.11
                          },
                          {
                            "date": "2020-01-03",
                            "open": 3.11,
                            "high": 3.12,
                            "low": 3.08,
                            "close": 3.09
                          },
                          {
                            "date": "2020-01-04",
                            "open": 3.09,
                            "high": 3.12,
                            "low": 3.07,
                            "close": 3.1
                          },
                          {
                            "date": "2020-01-05",
                            "open": 3.1,
                            "high": 3.12,
                            "low": 3.08,
                            "close": 3.11
                          },
                          {
                            "date": "2020-01-06",
                            "open": 3.12,
                            "high": 3.17,
                            "low": 3.1,
                            "close": 3.16
                          },
                          {
                            "date": "2020-01-07",
                            "open": 3.16,
                            "high": 3.23,
                            "low": 3.14,
                            "close": 3.22
                          },
                          {
                            "date": "2020-01-08",
                            "open": 3.23,
                            "high": 3.29,
                            "low": 3.2,
                            "close": 3.23
                          },
                          {
                            "date": "2020-01-09",
                            "open": 3.23,
                            "high": 3.33,
                            "low": 3.22,
                            "close": 3.32
                          },
                          {
                            "date": "2020-01-10",
                            "open": 3.32,
                            "high": 3.33,
                            "low": 3.28,
                            "close": 3.3
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assets"
                  ],
                  "properties": {
                    "assets": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "assetVolatility"
                        ],
                        "properties": {
                          "assetVolatility": {
                            "description": "The volatility of the asset",
                            "type": "number",
                            "minimum": 0
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed volatility of 1 asset",
                    "value": {
                      "assets": [
                        {
                          "assetVolatility": 0.013283288
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/volatility/estimation/garman-klass/jump-adjusted": {
      "post": {
        "tags": [
          "Assets / Volatility Estimation"
        ],
        "summary": "Garman-Klass Volatility (jump-adjusted)",
        "description": "Compute the jump-adjusted Garman-Klass volatility of an asset over a given time period, using open, high, low and close prices.\n\nReferences\n* [Colin Bennett, Trading Volatility, Correlation, Term Structure and Skew](https://www.trading-volatility.com/)\n* [Garman, M. B., and M. J. Klass, 1980, On the Estimation of Security Price Volatilities from Historical Data, Journal of Business 53:67\u201378](https://www.jstor.org/stable/2352358)\n* [Yang, D., and Q. Zhang, 2000, Drift-Independent Volatility Estimation Based on High, Low, Open, and Close Prices, Journal of Business 73:477\u2013491](https://www.jstor.org/stable/10.1086/209650)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets"
                ],
                "properties": {
                  "assets": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "assetPrices"
                      ],
                      "properties": {
                        "assetPrices": {
                          "description": "assetPrices[t] contains price information for the asset at the date t",
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "object",
                            "required": [
                              "date",
                              "open",
                              "high",
                              "low",
                              "close"
                            ],
                            "properties": {
                              "date": {
                                "type": "string",
                                "description": "The date corresponding to the date t in format YYYY-MM-DD; all dates must be distinct"
                              },
                              "open": {
                                "type": "number",
                                "description": "The open price of the asset at the date t; must be higher than or equal to the low price and lower than or equal to the high price",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              },
                              "high": {
                                "type": "number",
                                "description": "The high price of the asset at the date t; must be lower than or equal to the high price",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              },
                              "low": {
                                "type": "number",
                                "description": "The low price of the asset at the date t; must be higher than or equal to the low price",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              },
                              "close": {
                                "type": "number",
                                "description": "The close price of the asset at the date t; must be higher than or equal to the low price and lower than or equal to the high price",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute the jump-adjusted Garman-Klass volatility using first 10 data of the TTR R package",
                  "value": {
                    "assets": [
                      {
                        "assetPrices": [
                          {
                            "date": "2020-01-01",
                            "open": 3.18,
                            "high": 3.18,
                            "low": 3.08,
                            "close": 3.08
                          },
                          {
                            "date": "2020-01-02",
                            "open": 3.09,
                            "high": 3.15,
                            "low": 3.09,
                            "close": 3.11
                          },
                          {
                            "date": "2020-01-03",
                            "open": 3.11,
                            "high": 3.12,
                            "low": 3.08,
                            "close": 3.09
                          },
                          {
                            "date": "2020-01-04",
                            "open": 3.09,
                            "high": 3.12,
                            "low": 3.07,
                            "close": 3.1
                          },
                          {
                            "date": "2020-01-05",
                            "open": 3.1,
                            "high": 3.12,
                            "low": 3.08,
                            "close": 3.11
                          },
                          {
                            "date": "2020-01-06",
                            "open": 3.12,
                            "high": 3.17,
                            "low": 3.1,
                            "close": 3.16
                          },
                          {
                            "date": "2020-01-07",
                            "open": 3.16,
                            "high": 3.23,
                            "low": 3.14,
                            "close": 3.22
                          },
                          {
                            "date": "2020-01-08",
                            "open": 3.23,
                            "high": 3.29,
                            "low": 3.2,
                            "close": 3.23
                          },
                          {
                            "date": "2020-01-09",
                            "open": 3.23,
                            "high": 3.33,
                            "low": 3.22,
                            "close": 3.32
                          },
                          {
                            "date": "2020-01-10",
                            "open": 3.32,
                            "high": 3.33,
                            "low": 3.28,
                            "close": 3.3
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assets"
                  ],
                  "properties": {
                    "assets": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "assetVolatility"
                        ],
                        "properties": {
                          "assetVolatility": {
                            "description": "The volatility of the asset",
                            "type": "number",
                            "minimum": 0
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed volatility of 1 asset",
                    "value": {
                      "assets": [
                        {
                          "assetVolatility": 0.013657731891730711
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/volatility/estimation/garman-klass/original": {
      "post": {
        "tags": [
          "Assets / Volatility Estimation"
        ],
        "summary": "Garman-Klass Volatility (original)",
        "description": "Compute the original Garman-Klass volatility of an asset over a given time period, using open, high, low and close prices.\n\nReferences\n* [Colin Bennett, Trading Volatility, Correlation, Term Structure and Skew](https://www.trading-volatility.com/)\n* [Garman, M. B., and M. J. Klass, 1980, On the Estimation of Security Price Volatilities from Historical Data, Journal of Business 53:67\u201378](https://www.jstor.org/stable/2352358)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets"
                ],
                "properties": {
                  "assets": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "assetPrices"
                      ],
                      "properties": {
                        "assetPrices": {
                          "description": "assetPrices[t] contains price information for the asset at the date t",
                          "type": "array",
                          "minItems": 1,
                          "items": {
                            "type": "object",
                            "required": [
                              "date",
                              "open",
                              "high",
                              "low",
                              "close"
                            ],
                            "properties": {
                              "date": {
                                "type": "string",
                                "description": "The date corresponding to the date t in format YYYY-MM-DD; all dates must be distinct"
                              },
                              "open": {
                                "type": "number",
                                "description": "The open price of the asset at the date t; must be higher than or equal to the low price and lower than or equal to the high price",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              },
                              "high": {
                                "type": "number",
                                "description": "The high price of the asset at the date t; must be lower than or equal to the high price",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              },
                              "low": {
                                "type": "number",
                                "description": "The low price of the asset at the date t; must be higher than or equal to the low price",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              },
                              "close": {
                                "type": "number",
                                "description": "The close price of the asset at the date t; must be higher than or equal to the low price and lower than or equal to the high price",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute the original Garman-Klass volatility using first 10 data of the TTR R package",
                  "value": {
                    "assets": [
                      {
                        "assetPrices": [
                          {
                            "date": "2020-01-01",
                            "open": 3.18,
                            "high": 3.18,
                            "low": 3.08,
                            "close": 3.08
                          },
                          {
                            "date": "2020-01-02",
                            "open": 3.09,
                            "high": 3.15,
                            "low": 3.09,
                            "close": 3.11
                          },
                          {
                            "date": "2020-01-03",
                            "open": 3.11,
                            "high": 3.12,
                            "low": 3.08,
                            "close": 3.09
                          },
                          {
                            "date": "2020-01-04",
                            "open": 3.09,
                            "high": 3.12,
                            "low": 3.07,
                            "close": 3.1
                          },
                          {
                            "date": "2020-01-05",
                            "open": 3.1,
                            "high": 3.12,
                            "low": 3.08,
                            "close": 3.11
                          },
                          {
                            "date": "2020-01-06",
                            "open": 3.12,
                            "high": 3.17,
                            "low": 3.1,
                            "close": 3.16
                          },
                          {
                            "date": "2020-01-07",
                            "open": 3.16,
                            "high": 3.23,
                            "low": 3.14,
                            "close": 3.22
                          },
                          {
                            "date": "2020-01-08",
                            "open": 3.23,
                            "high": 3.29,
                            "low": 3.2,
                            "close": 3.23
                          },
                          {
                            "date": "2020-01-09",
                            "open": 3.23,
                            "high": 3.33,
                            "low": 3.22,
                            "close": 3.32
                          },
                          {
                            "date": "2020-01-10",
                            "open": 3.32,
                            "high": 3.33,
                            "low": 3.28,
                            "close": 3.3
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assets"
                  ],
                  "properties": {
                    "assets": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "assetVolatility"
                        ],
                        "properties": {
                          "assetVolatility": {
                            "description": "The volatility of the asset",
                            "type": "number",
                            "minimum": 0
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed volatility of 1 asset",
                    "value": {
                      "assets": [
                        {
                          "assetVolatility": 0.013283288
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/volatility/estimation/garman-klass/original/jump-adjusted": {
      "post": {
        "tags": [
          "Assets / Volatility Estimation"
        ],
        "summary": "Garman-Klass Volatility (original, jump-adjusted)",
        "description": "Compute the jump-adjusted original Garman-Klass volatility of an asset over a given time period, using open, high, low and close prices.\n\nReferences\n* [Colin Bennett, Trading Volatility, Correlation, Term Structure and Skew](https://www.trading-volatility.com/)\n* [Garman, M. B., and M. J. Klass, 1980, On the Estimation of Security Price Volatilities from Historical Data, Journal of Business 53:67\u201378](https://www.jstor.org/stable/2352358)\n* [Yang, D., and Q. Zhang, 2000, Drift-Independent Volatility Estimation Based on High, Low, Open, and Close Prices, Journal of Business 73:477\u2013491](https://www.jstor.org/stable/10.1086/209650)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets"
                ],
                "properties": {
                  "assets": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "assetPrices"
                      ],
                      "properties": {
                        "assetPrices": {
                          "description": "assetPrices[t] contains price information for the asset at the date t",
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "object",
                            "required": [
                              "date",
                              "open",
                              "high",
                              "low",
                              "close"
                            ],
                            "properties": {
                              "date": {
                                "type": "string",
                                "description": "The date corresponding to the date t in format YYYY-MM-DD; all dates must be distinct"
                              },
                              "open": {
                                "type": "number",
                                "description": "The open price of the asset at the date t; must be higher than or equal to the low price and lower than or equal to the high price",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              },
                              "high": {
                                "type": "number",
                                "description": "The high price of the asset at the date t; must be lower than or equal to the high price",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              },
                              "low": {
                                "type": "number",
                                "description": "The low price of the asset at the date t; must be higher than or equal to the low price",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              },
                              "close": {
                                "type": "number",
                                "description": "The close price of the asset at the date t; must be higher than or equal to the low price and lower than or equal to the high price",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute the jump-adjusted original Garman-Klass volatility using first 10 data of the TTR R package",
                  "value": {
                    "assets": [
                      {
                        "assetPrices": [
                          {
                            "date": "2020-01-01",
                            "open": 3.18,
                            "high": 3.18,
                            "low": 3.08,
                            "close": 3.08
                          },
                          {
                            "date": "2020-01-02",
                            "open": 3.09,
                            "high": 3.15,
                            "low": 3.09,
                            "close": 3.11
                          },
                          {
                            "date": "2020-01-03",
                            "open": 3.11,
                            "high": 3.12,
                            "low": 3.08,
                            "close": 3.09
                          },
                          {
                            "date": "2020-01-04",
                            "open": 3.09,
                            "high": 3.12,
                            "low": 3.07,
                            "close": 3.1
                          },
                          {
                            "date": "2020-01-05",
                            "open": 3.1,
                            "high": 3.12,
                            "low": 3.08,
                            "close": 3.11
                          },
                          {
                            "date": "2020-01-06",
                            "open": 3.12,
                            "high": 3.17,
                            "low": 3.1,
                            "close": 3.16
                          },
                          {
                            "date": "2020-01-07",
                            "open": 3.16,
                            "high": 3.23,
                            "low": 3.14,
                            "close": 3.22
                          },
                          {
                            "date": "2020-01-08",
                            "open": 3.23,
                            "high": 3.29,
                            "low": 3.2,
                            "close": 3.23
                          },
                          {
                            "date": "2020-01-09",
                            "open": 3.23,
                            "high": 3.33,
                            "low": 3.22,
                            "close": 3.32
                          },
                          {
                            "date": "2020-01-10",
                            "open": 3.32,
                            "high": 3.33,
                            "low": 3.28,
                            "close": 3.3
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assets"
                  ],
                  "properties": {
                    "assets": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "assetVolatility"
                        ],
                        "properties": {
                          "assetVolatility": {
                            "description": "The volatility of the asset",
                            "type": "number",
                            "minimum": 0
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed volatility of 1 asset",
                    "value": {
                      "assets": [
                        {
                          "assetVolatility": 0.013657731891730711
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/volatility/estimation/parkinson": {
      "post": {
        "tags": [
          "Assets / Volatility Estimation"
        ],
        "summary": "Parkinson Volatility",
        "description": "Compute the Parkinson volatility of an asset over a given time period, using open, high, low and close prices.\n\nReferences\n* [Colin Bennett, Trading Volatility, Correlation, Term Structure and Skew](https://www.trading-volatility.com/)\n* [Parkinson, Michael H., The Extreme Value Method for Estimating the Variance of the Rate of Return, The Journal of Business 53 (1980), 61-65](https://www.jstor.org/stable/2352357)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets"
                ],
                "properties": {
                  "assets": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "assetPrices"
                      ],
                      "properties": {
                        "assetPrices": {
                          "description": "assetPrices[t] contains price information for the asset at the date t",
                          "type": "array",
                          "minItems": 1,
                          "items": {
                            "type": "object",
                            "required": [
                              "date",
                              "high",
                              "low"
                            ],
                            "properties": {
                              "date": {
                                "type": "string",
                                "description": "The date corresponding to the date t in format YYYY-MM-DD; all dates must be distinct"
                              },
                              "open": {
                                "type": "number",
                                "description": "The open price of the asset at the date t; must be higher than or equal to the low price and lower than or equal to the high price; not used",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              },
                              "high": {
                                "type": "number",
                                "description": "The high price of the asset at the date t; must be lower than or equal to the high price",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              },
                              "low": {
                                "type": "number",
                                "description": "The low price of the asset at the date t; must be higher than or equal to the low price",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              },
                              "close": {
                                "type": "number",
                                "description": "The close price of the asset at the date t; must be higher than or equal to the low price and lower than or equal to the high price; not used",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute the Parkinson volatility using first 10 data of the TTR R package",
                  "value": {
                    "assets": [
                      {
                        "assetPrices": [
                          {
                            "date": "2020-01-01",
                            "high": 3.18,
                            "low": 3.08
                          },
                          {
                            "date": "2020-01-02",
                            "high": 3.15,
                            "low": 3.09
                          },
                          {
                            "date": "2020-01-03",
                            "high": 3.12,
                            "low": 3.08
                          },
                          {
                            "date": "2020-01-04",
                            "high": 3.12,
                            "low": 3.07
                          },
                          {
                            "date": "2020-01-05",
                            "high": 3.12,
                            "low": 3.08
                          },
                          {
                            "date": "2020-01-06",
                            "high": 3.17,
                            "low": 3.1
                          },
                          {
                            "date": "2020-01-07",
                            "high": 3.23,
                            "low": 3.14
                          },
                          {
                            "date": "2020-01-08",
                            "high": 3.29,
                            "low": 3.2
                          },
                          {
                            "date": "2020-01-09",
                            "high": 3.33,
                            "low": 3.22
                          },
                          {
                            "date": "2020-01-10",
                            "high": 3.33,
                            "low": 3.28
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assets"
                  ],
                  "properties": {
                    "assets": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "assetVolatility"
                        ],
                        "properties": {
                          "assetVolatility": {
                            "description": "The volatility of the asset",
                            "type": "number",
                            "minimum": 0
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed volatility of 1 asset",
                    "value": {
                      "assets": [
                        {
                          "assetVolatility": 0.013966763
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/assets/volatility/estimation/parkinson/jump-adjusted": {
      "post": {
        "tags": [
          "Assets / Volatility Estimation"
        ],
        "summary": "Parkinson Volatility (jump-adjusted)",
        "description": "Compute the jump-adjusted Parkinson volatility of an asset over a given time period, using open, high, low and close prices.\n\nReferences\n* [Colin Bennett, Trading Volatility, Correlation, Term Structure and Skew](https://www.trading-volatility.com/)\n* [Parkinson, Michael H., The Extreme Value Method for Estimating the Variance of the Rate of Return, The Journal of Business 53 (1980), 61-65](https://www.jstor.org/stable/2352357)\n* [Yang, D., and Q. Zhang, 2000, Drift-Independent Volatility Estimation Based on High, Low, Open, and Close Prices, Journal of Business 73:477\u2013491](https://www.jstor.org/stable/10.1086/209650)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets"
                ],
                "properties": {
                  "assets": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "assetPrices"
                      ],
                      "properties": {
                        "assetPrices": {
                          "description": "assetPrices[t] contains price information for the asset at the date t",
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "object",
                            "required": [
                              "date",
                              "open",
                              "high",
                              "low",
                              "close"
                            ],
                            "properties": {
                              "date": {
                                "type": "string",
                                "description": "The date corresponding to the date t in format YYYY-MM-DD; all dates must be distinct"
                              },
                              "open": {
                                "type": "number",
                                "description": "The open price of the asset at the date t; must be higher than or equal to the low price and lower than or equal to the high price",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              },
                              "high": {
                                "type": "number",
                                "description": "The high price of the asset at the date t; must be lower than or equal to the high price",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              },
                              "low": {
                                "type": "number",
                                "description": "The low price of the asset at the date t; must be higher than or equal to the low price",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              },
                              "close": {
                                "type": "number",
                                "description": "The close price of the asset at the date t; must be higher than or equal to the low price and lower than or equal to the high price",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute the jump-adjusted Parkinson volatility using first 10 data of the TTR R package",
                  "value": {
                    "assets": [
                      {
                        "assetPrices": [
                          {
                            "date": "2020-01-01",
                            "open": 3.18,
                            "high": 3.18,
                            "low": 3.08,
                            "close": 3.08
                          },
                          {
                            "date": "2020-01-02",
                            "open": 3.09,
                            "high": 3.15,
                            "low": 3.09,
                            "close": 3.11
                          },
                          {
                            "date": "2020-01-03",
                            "open": 3.11,
                            "high": 3.12,
                            "low": 3.08,
                            "close": 3.09
                          },
                          {
                            "date": "2020-01-04",
                            "open": 3.09,
                            "high": 3.12,
                            "low": 3.07,
                            "close": 3.1
                          },
                          {
                            "date": "2020-01-05",
                            "open": 3.1,
                            "high": 3.12,
                            "low": 3.08,
                            "close": 3.11
                          },
                          {
                            "date": "2020-01-06",
                            "open": 3.12,
                            "high": 3.17,
                            "low": 3.1,
                            "close": 3.16
                          },
                          {
                            "date": "2020-01-07",
                            "open": 3.16,
                            "high": 3.23,
                            "low": 3.14,
                            "close": 3.22
                          },
                          {
                            "date": "2020-01-08",
                            "open": 3.23,
                            "high": 3.29,
                            "low": 3.2,
                            "close": 3.23
                          },
                          {
                            "date": "2020-01-09",
                            "open": 3.23,
                            "high": 3.33,
                            "low": 3.22,
                            "close": 3.32
                          },
                          {
                            "date": "2020-01-10",
                            "open": 3.32,
                            "high": 3.33,
                            "low": 3.28,
                            "close": 3.3
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assets"
                  ],
                  "properties": {
                    "assets": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "assetVolatility"
                        ],
                        "properties": {
                          "assetVolatility": {
                            "description": "The volatility of the asset",
                            "type": "number",
                            "minimum": 0
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed volatility of 1 asset",
                    "value": {
                      "assets": [
                        {
                          "assetVolatility": 0.01338705475287114
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/assets/volatility/estimation/rogers-satchell": {
      "post": {
        "tags": [
          "Assets / Volatility Estimation"
        ],
        "summary": "Rogers-Satchell Volatility",
        "description": "Compute the Rogers-Satchell volatility of an asset over a time given period, using open, high, low and close prices.\n\nReferences\n* [Colin Bennett, Trading Volatility, Correlation, Term Structure and Skew](https://www.trading-volatility.com/)\n* [Rogers, L., S. Satchell, and Y. Yoon, 1994, Estimating the Volatility of Stock Prices: A Comparison of Methods that Use High and Low Prices, Applied Financial Economics 4:241\u2013247](https://www.tandfonline.com/doi/abs/10.1080/758526905)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets"
                ],
                "properties": {
                  "assets": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "assetPrices"
                      ],
                      "properties": {
                        "assetPrices": {
                          "description": "assetPrices[t] contains price information for the asset at the date t",
                          "type": "array",
                          "minItems": 1,
                          "items": {
                            "type": "object",
                            "required": [
                              "date",
                              "open",
                              "high",
                              "low",
                              "close"
                            ],
                            "properties": {
                              "date": {
                                "type": "string",
                                "description": "The date corresponding to the date t in format YYYY-MM-DD; all dates must be distinct"
                              },
                              "open": {
                                "type": "number",
                                "description": "The open price of the asset at the date t; must be higher than or equal to the low price and lower than or equal to the high price",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              },
                              "high": {
                                "type": "number",
                                "description": "The high price of the asset at the date t; must be lower than or equal to the high price",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              },
                              "low": {
                                "type": "number",
                                "description": "The low price of the asset at the date t; must be higher than or equal to the low price",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              },
                              "close": {
                                "type": "number",
                                "description": "The close price of the asset at the date t; must be higher than or equal to the low price and lower than or equal to the high price",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute the Rogers-Satchell volatility using first 10 data of the TTR R package",
                  "value": {
                    "assets": [
                      {
                        "assetPrices": [
                          {
                            "date": "2020-01-01",
                            "open": 3.18,
                            "high": 3.18,
                            "low": 3.08,
                            "close": 3.08
                          },
                          {
                            "date": "2020-01-02",
                            "open": 3.09,
                            "high": 3.15,
                            "low": 3.09,
                            "close": 3.11
                          },
                          {
                            "date": "2020-01-03",
                            "open": 3.11,
                            "high": 3.12,
                            "low": 3.08,
                            "close": 3.09
                          },
                          {
                            "date": "2020-01-04",
                            "open": 3.09,
                            "high": 3.12,
                            "low": 3.07,
                            "close": 3.1
                          },
                          {
                            "date": "2020-01-05",
                            "open": 3.1,
                            "high": 3.12,
                            "low": 3.08,
                            "close": 3.11
                          },
                          {
                            "date": "2020-01-06",
                            "open": 3.12,
                            "high": 3.17,
                            "low": 3.1,
                            "close": 3.16
                          },
                          {
                            "date": "2020-01-07",
                            "open": 3.16,
                            "high": 3.23,
                            "low": 3.14,
                            "close": 3.22
                          },
                          {
                            "date": "2020-01-08",
                            "open": 3.23,
                            "high": 3.29,
                            "low": 3.2,
                            "close": 3.23
                          },
                          {
                            "date": "2020-01-09",
                            "open": 3.23,
                            "high": 3.33,
                            "low": 3.22,
                            "close": 3.32
                          },
                          {
                            "date": "2020-01-10",
                            "open": 3.32,
                            "high": 3.33,
                            "low": 3.28,
                            "close": 3.3
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assets"
                  ],
                  "properties": {
                    "assets": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "assetVolatility"
                        ],
                        "properties": {
                          "assetVolatility": {
                            "description": "The volatility of the asset",
                            "type": "number",
                            "minimum": 0
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed volatility of 1 asset",
                    "value": {
                      "assets": [
                        {
                          "assetVolatility": 0.01277236
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/volatility/estimation/rogers-satchell/jump-adjusted": {
      "post": {
        "tags": [
          "Assets / Volatility Estimation"
        ],
        "summary": "Rogers-Satchell Volatility (jump-adjusted)",
        "description": "Compute the jump-adjusted Rogers-Satchell volatility of an asset over a time given period, using open, high, low and close prices.\n\nReferences\n* [Colin Bennett, Trading Volatility, Correlation, Term Structure and Skew](https://www.trading-volatility.com/)\n* [Rogers, L., S. Satchell, and Y. Yoon, 1994, Estimating the Volatility of Stock Prices: A Comparison of Methods that Use High and Low Prices, Applied Financial Economics 4:241\u2013247](https://www.tandfonline.com/doi/abs/10.1080/758526905)\n* [Yang, D., and Q. Zhang, 2000, Drift-Independent Volatility Estimation Based on High, Low, Open, and Close Prices, Journal of Business 73:477\u2013491](https://www.jstor.org/stable/10.1086/209650)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets"
                ],
                "properties": {
                  "assets": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "assetPrices"
                      ],
                      "properties": {
                        "assetPrices": {
                          "description": "assetPrices[t] contains price information for the asset at the date t",
                          "type": "array",
                          "minItems": 3,
                          "items": {
                            "type": "object",
                            "required": [
                              "date",
                              "open",
                              "high",
                              "low",
                              "close"
                            ],
                            "properties": {
                              "date": {
                                "type": "string",
                                "description": "The date corresponding to the date t in format YYYY-MM-DD; all dates must be distinct"
                              },
                              "open": {
                                "type": "number",
                                "description": "The open price of the asset at the date t; must be higher than or equal to the low price and lower than or equal to the high price",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              },
                              "high": {
                                "type": "number",
                                "description": "The high price of the asset at the date t; must be lower than or equal to the high price",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              },
                              "low": {
                                "type": "number",
                                "description": "The low price of the asset at the date t; must be higher than or equal to the low price",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              },
                              "close": {
                                "type": "number",
                                "description": "The close price of the asset at the date t; must be higher than or equal to the low price and lower than or equal to the high price",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute the jump-adjusted Rogers-Satchell volatility using first 10 data of the TTR R package",
                  "value": {
                    "assets": [
                      {
                        "assetPrices": [
                          {
                            "date": "2020-01-01",
                            "open": 3.18,
                            "high": 3.18,
                            "low": 3.08,
                            "close": 3.08
                          },
                          {
                            "date": "2020-01-02",
                            "open": 3.09,
                            "high": 3.15,
                            "low": 3.09,
                            "close": 3.11
                          },
                          {
                            "date": "2020-01-03",
                            "open": 3.11,
                            "high": 3.12,
                            "low": 3.08,
                            "close": 3.09
                          },
                          {
                            "date": "2020-01-04",
                            "open": 3.09,
                            "high": 3.12,
                            "low": 3.07,
                            "close": 3.1
                          },
                          {
                            "date": "2020-01-05",
                            "open": 3.1,
                            "high": 3.12,
                            "low": 3.08,
                            "close": 3.11
                          },
                          {
                            "date": "2020-01-06",
                            "open": 3.12,
                            "high": 3.17,
                            "low": 3.1,
                            "close": 3.16
                          },
                          {
                            "date": "2020-01-07",
                            "open": 3.16,
                            "high": 3.23,
                            "low": 3.14,
                            "close": 3.22
                          },
                          {
                            "date": "2020-01-08",
                            "open": 3.23,
                            "high": 3.29,
                            "low": 3.2,
                            "close": 3.23
                          },
                          {
                            "date": "2020-01-09",
                            "open": 3.23,
                            "high": 3.33,
                            "low": 3.22,
                            "close": 3.32
                          },
                          {
                            "date": "2020-01-10",
                            "open": 3.32,
                            "high": 3.33,
                            "low": 3.28,
                            "close": 3.3
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assets"
                  ],
                  "properties": {
                    "assets": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "assetVolatility"
                        ],
                        "properties": {
                          "assetVolatility": {
                            "description": "The volatility of the asset",
                            "type": "number",
                            "minimum": 0
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed volatility of 1 asset",
                    "value": {
                      "assets": [
                        {
                          "assetVolatility": 0.01355710937852759
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/volatility/estimation/yang-zhang": {
      "post": {
        "tags": [
          "Assets / Volatility Estimation"
        ],
        "summary": "Yang-Zhang Volatility",
        "description": "Compute the Yang-Zhang volatility of an asset over a given time period, using open, high, low and close prices.\n\nReferences\n* [Colin Bennett, Trading Volatility, Correlation, Term Structure and Skew](https://www.trading-volatility.com/)\n* [Yang, D., and Q. Zhang, 2000, Drift-Independent Volatility Estimation Based on High, Low, Open, and Close Prices, Journal of Business 73:477\u2013491](https://www.jstor.org/stable/10.1086/209650)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets"
                ],
                "properties": {
                  "assets": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "assetPrices"
                      ],
                      "properties": {
                        "assetPrices": {
                          "description": "assetPrices[t] contains price information for the asset at the date t",
                          "type": "array",
                          "minItems": 3,
                          "items": {
                            "type": "object",
                            "required": [
                              "date",
                              "open",
                              "high",
                              "low",
                              "close"
                            ],
                            "properties": {
                              "date": {
                                "type": "string",
                                "description": "The date corresponding to the date t in format YYYY-MM-DD; all dates must be distinct"
                              },
                              "open": {
                                "type": "number",
                                "description": "The open price of the asset at the date t; must be higher than or equal to the low price and lower than or equal to the high price",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              },
                              "high": {
                                "type": "number",
                                "description": "The high price of the asset at the date t; must be lower than or equal to the high price",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              },
                              "low": {
                                "type": "number",
                                "description": "The low price of the asset at the date t; must be higher than or equal to the low price",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              },
                              "close": {
                                "type": "number",
                                "description": "The close price of the asset at the date t; must be higher than or equal to the low price and lower than or equal to the high price",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute the Yang-Zhang volatility using first 10 data of the TTR R package",
                  "value": {
                    "assets": [
                      {
                        "assetPrices": [
                          {
                            "date": "2020-01-01",
                            "open": 3.18,
                            "high": 3.18,
                            "low": 3.08,
                            "close": 3.08
                          },
                          {
                            "date": "2020-01-02",
                            "open": 3.09,
                            "high": 3.15,
                            "low": 3.09,
                            "close": 3.11
                          },
                          {
                            "date": "2020-01-03",
                            "open": 3.11,
                            "high": 3.12,
                            "low": 3.08,
                            "close": 3.09
                          },
                          {
                            "date": "2020-01-04",
                            "open": 3.09,
                            "high": 3.12,
                            "low": 3.07,
                            "close": 3.1
                          },
                          {
                            "date": "2020-01-05",
                            "open": 3.1,
                            "high": 3.12,
                            "low": 3.08,
                            "close": 3.11
                          },
                          {
                            "date": "2020-01-06",
                            "open": 3.12,
                            "high": 3.17,
                            "low": 3.1,
                            "close": 3.16
                          },
                          {
                            "date": "2020-01-07",
                            "open": 3.16,
                            "high": 3.23,
                            "low": 3.14,
                            "close": 3.22
                          },
                          {
                            "date": "2020-01-08",
                            "open": 3.23,
                            "high": 3.29,
                            "low": 3.2,
                            "close": 3.23
                          },
                          {
                            "date": "2020-01-09",
                            "open": 3.23,
                            "high": 3.33,
                            "low": 3.22,
                            "close": 3.32
                          },
                          {
                            "date": "2020-01-10",
                            "open": 3.32,
                            "high": 3.33,
                            "low": 3.28,
                            "close": 3.3
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assets"
                  ],
                  "properties": {
                    "assets": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "assetVolatility"
                        ],
                        "properties": {
                          "assetVolatility": {
                            "description": "The volatility of the asset",
                            "type": "number",
                            "minimum": 0
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed volatility of 1 asset",
                    "value": {
                      "assets": [
                        {
                          "assetVolatility": 0.013293894
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/volatility/forecast/sma": {
      "post": {
        "tags": [
          "Assets / Volatility Forecast"
        ],
        "summary": "Simple Moving Average Model (SMA)",
        "description": "Compute volatility forecasts for an asset using a simple moving average (SMA) model.\n\nReferences\n* [Jacob Boudoukh, Matthew Richardson, Robert F. Whitelaw, Investigation of a Class of Volatility Estimators, The Journal of Derivatives, Spring 1997, 4 (3) 63 - 71](https://www.pm-research.com/content/iijderiv/4/3/63)\n* [Figlewski, Stephen, Forecasting Volatility Using Historical Data (May 1994). NYU Working Paper No. FIN-94-032](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=1299461)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets"
                ],
                "properties": {
                  "assets": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "assetPrices",
                        "varianceProxyWindowSize"
                      ],
                      "properties": {
                        "assetPrices": {
                          "description": "assetPrices[t] contains price information for the asset at the date t",
                          "type": "array",
                          "minItems": 3,
                          "items": {
                            "type": "object",
                            "required": [
                              "date"
                            ],
                            "properties": {
                              "date": {
                                "type": "string",
                                "description": "The date corresponding to the date t in format YYYY-MM-DD; all dates must be distinct"
                              },
                              "open": {
                                "type": "number",
                                "description": "The open price of the asset at the date t; must be higher than or equal to the low price and lower than or equal to the high price; required if varianceProxy is jumpAdjustedParkinsonRange",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              },
                              "high": {
                                "type": "number",
                                "description": "The high price of the asset at the date t; must be lower than or equal to the high price; required if varianceProxy is parkinsonRange or jumpAdjustedParkinsonRange",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              },
                              "low": {
                                "type": "number",
                                "description": "The low price of the asset at the date t; must be higher than or equal to the low price; required if varianceProxy is parkinsonRange or jumpAdjustedParkinsonRange",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              },
                              "close": {
                                "type": "number",
                                "description": "The close price of the asset at the date t; must be higher than or equal to the low price and lower than or equal to the high price; required if varianceProxyWindowSizes is defined or if varianceProxy is squaredCloseToCloseReturns, demeanedSquaredCloseToCloseReturns or jumpAdjustedParkinsonRange",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              }
                            }
                          }
                        },
                        "varianceProxy": {
                          "type": "string",
                          "description": "The variance proxy to use",
                          "enum": [
                            "squaredCloseToCloseReturns",
                            "demeanedSquaredCloseToCloseReturns",
                            "parkinsonRange",
                            "jumpAdjustedParkinsonRange"
                          ],
                          "default": "squaredCloseToCloseReturns"
                        },
                        "varianceProxyWindowSize": {
                          "description": "The window size of the simple moving average, corresponding to the number of variance proxy observations to be averaged",
                          "type": "integer",
                          "minimum": 1
                        },
                        "volatilityForecastHorizon": {
                          "description": "The forecast horizon, corresponding to the number of multi-steps ahead volatility forecasts to compute; if varianceProxyWindowSizes is defined, volatilityForecastHorizon maximum value is half the length of the array assetPrices",
                          "type": "integer",
                          "minimum": 1,
                          "default": 1
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "Fixed window size": {
                  "description": "Compute volatility forecasts over an horizon of 20 days using a window size of 5 days and squared close-to-close returns as variance proxy",
                  "value": {
                    "assets": [
                      {
                        "assetPrices": [
                          {
                            "date": "2020-01-01",
                            "close": 3.08
                          },
                          {
                            "date": "2020-01-02",
                            "close": 3.11
                          },
                          {
                            "date": "2020-01-03",
                            "close": 3.09
                          },
                          {
                            "date": "2020-01-04",
                            "close": 3.1
                          },
                          {
                            "date": "2020-01-05",
                            "close": 3.11
                          },
                          {
                            "date": "2020-01-06",
                            "close": 3.16
                          },
                          {
                            "date": "2020-01-07",
                            "close": 3.22
                          },
                          {
                            "date": "2020-01-08",
                            "close": 3.23
                          },
                          {
                            "date": "2020-01-09",
                            "close": 3.32
                          },
                          {
                            "date": "2020-01-10",
                            "close": 3.3
                          }
                        ],
                        "varianceProxyWindowSize": 5,
                        "volatilityForecastHorizon": 20
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assets"
                  ],
                  "properties": {
                    "assets": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "assetVolatilityForecasts",
                          "assetAggregatedVolatilityForecast"
                        ],
                        "properties": {
                          "assetVolatilityForecasts": {
                            "description": "assetVolatilityForecasts[t] contains the asset (t+1)-steps ahead volatility forecast",
                            "type": "array",
                            "minItems": 1,
                            "items": {
                              "type": "number",
                              "minimum": 0
                            }
                          },
                          "assetAggregatedVolatilityForecast": {
                            "description": "The asset aggregated volatility forecast over the forecast horizon, corresponding to the aggregation of all the multi-steps ahead volatility forecasts contained in assetVolatilityForecasts",
                            "type": "number",
                            "minimum": 0
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed volatility forecast of 1 asset over a forecast horizon of 2 days",
                    "value": {
                      "assets": [
                        {
                          "assetVolatilityForecasts": [
                            0.008350368904247745,
                            0.016344420052190625
                          ],
                          "assetAggregatedVolatilityForecast": 0.01867199250709839
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/volatility/forecast/ewma": {
      "post": {
        "tags": [
          "Assets / Volatility Forecast"
        ],
        "summary": "Exponentially Weighted Moving Average Model (EWMA)",
        "description": "Compute volatility forecasts for an asset using an exponentially weighted moving average (EWMA) model.\n\nReferences\n* [Jacob Boudoukh, Matthew Richardson, Robert F. Whitelaw, Investigation of a Class of Volatility Estimators, The Journal of Derivatives, Spring 1997, 4 (3) 63 - 71](https://www.pm-research.com/content/iijderiv/4/3/63)\n* [RiskMetrics. Technical Document, J.P.Morgan/Reuters, New York, 1996. Fourth Edition](https://www.msci.com/documents/10199/5915b101-4206-4ba0-aee2-3449d5c7e95a)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets"
                ],
                "properties": {
                  "assets": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "assetPrices"
                      ],
                      "properties": {
                        "assetPrices": {
                          "description": "assetPrices[t] contains price information for the asset at the date t",
                          "type": "array",
                          "minItems": 3,
                          "items": {
                            "type": "object",
                            "required": [
                              "date"
                            ],
                            "properties": {
                              "date": {
                                "type": "string",
                                "description": "The date corresponding to the date t in format YYYY-MM-DD; all dates must be distinct"
                              },
                              "open": {
                                "type": "number",
                                "description": "The open price of the asset at the date t; must be higher than or equal to the low price and lower than or equal to the high price; required if varianceProxy is jumpAdjustedParkinsonRange",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              },
                              "high": {
                                "type": "number",
                                "description": "The high price of the asset at the date t; must be lower than or equal to the high price; required if varianceProxy is parkinsonRange or jumpAdjustedParkinsonRange",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              },
                              "low": {
                                "type": "number",
                                "description": "The low price of the asset at the date t; must be higher than or equal to the low price; required if varianceProxy is parkinsonRange or jumpAdjustedParkinsonRange",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              },
                              "close": {
                                "type": "number",
                                "description": "The close price of the asset at the date t; must be higher than or equal to the low price and lower than or equal to the high price; required if varianceProxyDecayFactor is undefined or if varianceProxy is squaredCloseToCloseReturns, demeanedSquaredCloseToCloseReturns or jumpAdjustedParkinsonRange",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              }
                            }
                          }
                        },
                        "varianceProxy": {
                          "type": "string",
                          "description": "The variance proxy to use",
                          "enum": [
                            "squaredCloseToCloseReturns",
                            "demeanedSquaredCloseToCloseReturns",
                            "parkinsonRange",
                            "jumpAdjustedParkinsonRange"
                          ],
                          "default": "squaredCloseToCloseReturns"
                        },
                        "varianceProxyDecayFactor": {
                          "description": "The decay factor of the exponentially weighted moving average; by default, the value of the best decay factor is automatically computed"
                        },
                        "oneOf": [
                          {
                            "type": "number",
                            "minimum": 0,
                            "exclusiveMinimum": true,
                            "maximum": 1,
                            "exclusiveMaximum": true
                          },
                          {
                            "type": "string",
                            "enum": [
                              "auto"
                            ],
                            "default": "auto"
                          }
                        ],
                        "volatilityForecastHorizon": {
                          "description": "The forecast horizon, corresponding to the number of multi-steps ahead volatility forecasts to compute",
                          "type": "integer",
                          "minimum": 1,
                          "default": 1
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "Fixed decay factor": {
                  "description": "Compute volatility forecasts over an horizon of 20 days using a decay factor of 0.94 and squared close-to-close returns as variance proxy",
                  "value": {
                    "assets": [
                      {
                        "assetPrices": [
                          {
                            "date": "2020-01-01",
                            "close": 3.08
                          },
                          {
                            "date": "2020-01-02",
                            "close": 3.11
                          },
                          {
                            "date": "2020-01-03",
                            "close": 3.09
                          },
                          {
                            "date": "2020-01-04",
                            "close": 3.1
                          },
                          {
                            "date": "2020-01-05",
                            "close": 3.11
                          },
                          {
                            "date": "2020-01-06",
                            "close": 3.16
                          },
                          {
                            "date": "2020-01-07",
                            "close": 3.22
                          },
                          {
                            "date": "2020-01-08",
                            "close": 3.23
                          },
                          {
                            "date": "2020-01-09",
                            "close": 3.32
                          },
                          {
                            "date": "2020-01-10",
                            "close": 3.3
                          }
                        ],
                        "varianceProxyDecayFactor": 0.94,
                        "volatilityForecastHorizon": 20
                      }
                    ]
                  }
                },
                "Optimal decay factor": {
                  "description": "Compute volatility forecasts over an horizon of 5 days, using the best decay factor and the Parkinson range as variance proxy",
                  "value": {
                    "assets": [
                      {
                        "assetPrices": [
                          {
                            "date": "2020-01-01",
                            "high": 3.18,
                            "low": 3.08,
                            "close": 3.08
                          },
                          {
                            "date": "2020-01-02",
                            "high": 3.15,
                            "low": 3.09,
                            "close": 3.11
                          },
                          {
                            "date": "2020-01-03",
                            "high": 3.12,
                            "low": 3.08,
                            "close": 3.09
                          },
                          {
                            "date": "2020-01-04",
                            "high": 3.12,
                            "low": 3.07,
                            "close": 3.1
                          },
                          {
                            "date": "2020-01-05",
                            "high": 3.12,
                            "low": 3.08,
                            "close": 3.11
                          },
                          {
                            "date": "2020-01-06",
                            "high": 3.17,
                            "low": 3.1,
                            "close": 3.16
                          },
                          {
                            "date": "2020-01-07",
                            "high": 3.23,
                            "low": 3.14,
                            "close": 3.22
                          },
                          {
                            "date": "2020-01-08",
                            "high": 3.29,
                            "low": 3.2,
                            "close": 3.23
                          },
                          {
                            "date": "2020-01-09",
                            "high": 3.33,
                            "low": 3.22,
                            "close": 3.32
                          },
                          {
                            "date": "2020-01-10",
                            "high": 3.33,
                            "low": 3.28,
                            "close": 3.3
                          }
                        ],
                        "varianceProxy": "parkinsonRange",
                        "volatilityForecastHorizon": 5
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assets"
                  ],
                  "properties": {
                    "assets": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "assetVolatilityForecasts",
                          "assetAggregatedVolatilityForecast"
                        ],
                        "properties": {
                          "assetVolatilityForecasts": {
                            "description": "assetVolatilityForecasts[t] contains the asset (t+1)-steps ahead volatility forecast",
                            "type": "array",
                            "minItems": 1,
                            "items": {
                              "type": "number",
                              "minimum": 0
                            }
                          },
                          "assetAggregatedVolatilityForecast": {
                            "description": "The asset aggregated volatility forecast over the forecast horizon, corresponding to the aggregation of all the multi-steps ahead volatility forecasts contained in assetVolatilityForecasts",
                            "type": "number",
                            "minimum": 0
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed volatility forecast of 1 asset over a forecast horizon of 2 days",
                    "value": {
                      "assets": [
                        {
                          "assetVolatilityForecasts": [
                            0.008350368904247745,
                            0.016344420052190625
                          ],
                          "assetAggregatedVolatilityForecast": 0.01867199250709839
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/volatility/forecast/garch": {
      "post": {
        "tags": [
          "Assets / Volatility Forecast"
        ],
        "summary": "Generalized AutoRegressive Conditional Heteroscedasticity Model (GARCH(1,1))",
        "description": "Compute volatility forecasts for an asset using a generalized autoregressive conditional heteroscedasticity (GARCH(1,1)) model.\n\nReferences\n* [Peter Molnar (2016): High-low range in GARCH models of stock return volatility, Applied Economics](https://www.tandfonline.com/doi/full/10.1080/00036846.2016.1170929)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets"
                ],
                "properties": {
                  "assets": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "assetPrices"
                      ],
                      "properties": {
                        "assetPrices": {
                          "description": "assetPrices[t] contains price information for the asset at the date t",
                          "type": "array",
                          "minItems": 3,
                          "items": {
                            "type": "object",
                            "required": [
                              "date",
                              "close"
                            ],
                            "properties": {
                              "date": {
                                "type": "string",
                                "description": "The date corresponding to the date t in format YYYY-MM-DD; all dates must be distinct"
                              },
                              "open": {
                                "type": "number",
                                "description": "The open price of the asset at the date t; must be higher than or equal to the low price and lower than or equal to the high price; required if varianceProxy is jumpAdjustedParkinsonRange",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              },
                              "high": {
                                "type": "number",
                                "description": "The high price of the asset at the date t; must be lower than or equal to the high price; required if varianceProxy is parkinsonRange or jumpAdjustedParkinsonRange",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              },
                              "low": {
                                "type": "number",
                                "description": "The low price of the asset at the date t; must be higher than or equal to the low price; required if varianceProxy is parkinsonRange or jumpAdjustedParkinsonRange",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              },
                              "close": {
                                "type": "number",
                                "description": "The close price of the asset at the date t; must be higher than or equal to the low price and lower than or equal to the high price",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              }
                            }
                          }
                        },
                        "varianceProxy": {
                          "type": "string",
                          "description": "The variance proxy to use",
                          "enum": [
                            "squaredCloseToCloseReturns",
                            "demeanedSquaredCloseToCloseReturns",
                            "parkinsonRange",
                            "jumpAdjustedParkinsonRange"
                          ],
                          "default": "squaredCloseToCloseReturns"
                        },
                        "volatilityForecastHorizon": {
                          "description": "The forecast horizon, corresponding to the number of multi-steps ahead volatility forecasts to compute; due to automated fitting of the GARCH(1,1) model, volatilityForecastHorizon maximum value is half the length of the array assetPrices",
                          "type": "integer",
                          "minimum": 1,
                          "default": 1
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute GARCH(1,1) volatility forecasts over an horizon of 5 days, using squared close-to-close returns as variance proxy",
                  "value": {
                    "assets": [
                      {
                        "assetPrices": [
                          {
                            "date": "2020-01-01",
                            "close": 3.08
                          },
                          {
                            "date": "2020-01-02",
                            "close": 3.11
                          },
                          {
                            "date": "2020-01-03",
                            "close": 3.09
                          },
                          {
                            "date": "2020-01-04",
                            "close": 3.1
                          },
                          {
                            "date": "2020-01-05",
                            "close": 3.11
                          },
                          {
                            "date": "2020-01-06",
                            "close": 3.16
                          },
                          {
                            "date": "2020-01-07",
                            "close": 3.22
                          },
                          {
                            "date": "2020-01-08",
                            "close": 3.23
                          },
                          {
                            "date": "2020-01-09",
                            "close": 3.32
                          },
                          {
                            "date": "2020-01-10",
                            "close": 3.3
                          }
                        ],
                        "volatilityForecastHorizon": 5
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assets"
                  ],
                  "properties": {
                    "assets": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "assetVolatilityForecasts",
                          "assetAggregatedVolatilityForecast"
                        ],
                        "properties": {
                          "assetVolatilityForecasts": {
                            "description": "assetVolatilityForecasts[t] contains the asset (t+1)-steps ahead volatility forecast",
                            "type": "array",
                            "minItems": 1,
                            "items": {
                              "type": "number",
                              "minimum": 0
                            }
                          },
                          "assetAggregatedVolatilityForecast": {
                            "description": "The asset aggregated volatility forecast over the forecast horizon, corresponding to the aggregation of all the multi-steps ahead volatility forecasts contained in assetVolatilityForecasts",
                            "type": "number",
                            "minimum": 0
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed volatility forecast of 1 asset over a forecast horizon of 2 days",
                    "value": {
                      "assets": [
                        {
                          "assetVolatilityForecasts": [
                            0.008350368904247745,
                            0.016344420052190625
                          ],
                          "assetAggregatedVolatilityForecast": 0.01867199250709839
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/volatility/forecast/har": {
      "post": {
        "tags": [
          "Assets / Volatility Forecast"
        ],
        "summary": "Heterogeneous AutoRegressive Model (HAR)",
        "description": "Compute volatility forecasts for an asset using an heterogeneous autoregressive (HAR) model.\n\nReferences\n* [Fulvio Corsi, A Simple Approximate Long-Memory Model of Realized Volatility, Journal of Financial Econometrics, Volume 7, Issue 2, Spring 2009, Pages 174\u2013196](https://academic.oup.com/jfec/article-abstract/7/2/174/856522)\n* [Adam Clements, Daniel P.A. Preve, A Practical Guide to harnessing the HAR volatility model, Journal of Banking & Finance, Volume 133, 2021](https://www.sciencedirect.com/science/article/abs/pii/S0378426621002417)\n* [Giuseppe Buccheri, Fulvio Corsi, HARK the SHARK: Realized Volatility Modeling with Measurement Errors and Nonlinear Dependencies, Journal of Financial Econometrics, Volume 19, Issue 4, Fall 2021, Pages 614\u2013649](https://academic.oup.com/jfec/article-abstract/19/4/614/5553055?redirectedFrom=fulltext)\n* [Tim Bollerslev, Benjamin Hood, John Huss, Lasse Heje Pedersen, Risk Everywhere: Modeling and Managing Volatility, The Review of Financial Studies, Volume 31, Issue 7, July 2018, Pages 2729\u20132773](https://academic.oup.com/rfs/article/31/7/2729/5001472)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "assets"
                    ],
                    "properties": {
                      "assets": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "required": [
                            "assetPrices"
                          ],
                          "properties": {
                            "assetPrices": {
                              "description": "assetPrices[t] contains price information for the asset at the date t",
                              "type": "array",
                              "minItems": 3,
                              "items": {
                                "type": "object",
                                "required": [
                                  "date",
                                  "close"
                                ],
                                "properties": {
                                  "date": {
                                    "type": "string",
                                    "description": "The date corresponding to the date t in format YYYY-MM-DD; all dates must be distinct"
                                  },
                                  "open": {
                                    "type": "number",
                                    "description": "The open price of the asset at the date t; must be higher than or equal to the low price and lower than or equal to the high price; required if varianceProxy is jumpAdjustedParkinsonRange",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  },
                                  "high": {
                                    "type": "number",
                                    "description": "The high price of the asset at the date t; must be lower than or equal to the high price; required if varianceProxy is parkinsonRange or jumpAdjustedParkinsonRange",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  },
                                  "low": {
                                    "type": "number",
                                    "description": "The low price of the asset at the date t; must be higher than or equal to the low price; required if varianceProxy is parkinsonRange or jumpAdjustedParkinsonRange",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  },
                                  "close": {
                                    "type": "number",
                                    "description": "The close price of the asset at the date t; must be higher than or equal to the low price and lower than or equal to the high price",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  }
                                }
                              }
                            },
                            "varianceProxy": {
                              "type": "string",
                              "description": "The variance proxy to use",
                              "enum": [
                                "squaredCloseToCloseReturns",
                                "demeanedSquaredCloseToCloseReturns",
                                "parkinsonRange",
                                "jumpAdjustedParkinsonRange"
                              ],
                              "default": "squaredCloseToCloseReturns"
                            },
                            "volatilityForecastHorizon": {
                              "description": "The forecast horizon, corresponding to the number of multi-steps ahead volatility forecasts to compute",
                              "type": "integer",
                              "minimum": 1,
                              "default": 1
                            },
                            "varianceProxyLogTransformation": {
                              "description": "Whether to use the raw variance proxies if false or to apply a log transformation to the variance proxies if true",
                              "type": "boolean",
                              "default": false
                            },
                            "varianceProxyCentering": {
                              "description": "Whether to center the variance proxies around their long run average",
                              "type": "boolean",
                              "default": false
                            },
                            "varianceProxyLags": {
                              "description": "varianceProxyLags[k] is the index of the k-th lagged variance proxy to include in the HAR model; defaults to [1, 5, 22]",
                              "type": "array",
                              "minItems": 1,
                              "maxItems": 5,
                              "uniqueItems": true,
                              "items": {
                                "type": "integer",
                                "minimum": 1
                              }
                            },
                            "harParametersEstimationMethod": {
                              "description": "The method to use to estimate the HAR model parameters",
                              "type": "string",
                              "enum": [
                                "ordinaryLeastSquares",
                                "weightedLeastSquares",
                                "robustLeastSquares"
                              ],
                              "default": "ordinaryLeastSquares"
                            }
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": [
                      "assets"
                    ],
                    "properties": {
                      "assets": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "required": [
                            "assetPrices"
                          ],
                          "properties": {
                            "assetPrices": {
                              "description": "assetPrices[t] contains price information for the asset at the date t",
                              "type": "array",
                              "minItems": 3,
                              "items": {
                                "type": "object",
                                "required": [
                                  "date",
                                  "close"
                                ],
                                "properties": {
                                  "date": {
                                    "type": "string",
                                    "description": "The date corresponding to the date t in format YYYY-MM-DD; all dates must be distinct"
                                  },
                                  "open": {
                                    "type": "number",
                                    "description": "The open price of the asset at the date t; must be higher than or equal to the low price and lower than or equal to the high price; required if varianceProxy is jumpAdjustedParkinsonRange",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  },
                                  "high": {
                                    "type": "number",
                                    "description": "The high price of the asset at the date t; must be lower than or equal to the high price; required if varianceProxy is parkinsonRange or jumpAdjustedParkinsonRange",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  },
                                  "low": {
                                    "type": "number",
                                    "description": "The low price of the asset at the date t; must be higher than or equal to the low price; required if varianceProxy is parkinsonRange or jumpAdjustedParkinsonRange",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  },
                                  "close": {
                                    "type": "number",
                                    "description": "The close price of the asset at the date t; must be higher than or equal to the low price and lower than or equal to the high price",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "varianceProxy": {
                        "type": "string",
                        "description": "The variance proxy to use; common to all assets in assets; if parkinsonRange, the minimum number of items in assetPrices becomes 1 instead of 3; if demeanedSquaredCloseToCloseReturns or jumpAdjustedParkinsonRange, the minimum number of items in assetPrices becomes 2 instead of 3",
                        "enum": [
                          "squaredCloseToCloseReturns",
                          "demeanedSquaredCloseToCloseReturns",
                          "parkinsonRange",
                          "jumpAdjustedParkinsonRange"
                        ],
                        "default": "squaredCloseToCloseReturns"
                      },
                      "volatilityForecastHorizon": {
                        "description": "The forecast horizon, corresponding to the number of multi-steps ahead volatility forecasts to compute; common to all assets in assets",
                        "type": "integer",
                        "minimum": 1,
                        "default": 1
                      },
                      "varianceProxyLogTransformation": {
                        "description": "Whether to use the raw variance proxies if false or to apply a log transformation to the variance proxies if true; common to all assets in assets",
                        "type": "boolean",
                        "default": false
                      },
                      "varianceProxyCentering": {
                        "description": "Whether to center the variance proxies around their long run average; common to all assets in assets",
                        "type": "boolean",
                        "default": false
                      },
                      "varianceProxyLags": {
                        "description": "varianceProxyLags[k] is the index of the k-th lagged variance proxy to include in the HAR model; defaults to [1, 5, 22]",
                        "type": "array",
                        "minItems": 1,
                        "maxItems": 5,
                        "uniqueItems": true,
                        "items": {
                          "type": "integer",
                          "minimum": 1
                        }
                      },
                      "harParametersEstimationMethod": {
                        "description": "The method to use to estimate the HAR model parameters",
                        "type": "string",
                        "enum": [
                          "ordinaryLeastSquares",
                          "weightedLeastSquares",
                          "robustLeastSquares"
                        ],
                        "default": "ordinaryLeastSquares"
                      },
                      "harParametersEstimationType": {
                        "description": "The type of the method to use to estimate the HAR model parameters; in case harParametersEstimationType equals to 'panel', the minimum number of assets in assets must be 2 and all assetPrices arrays must be consistent",
                        "type": "string",
                        "enum": [
                          "individual",
                          "panel"
                        ],
                        "default": "individual"
                      }
                    }
                  }
                ]
              },
              "examples": {
                "Example (individual-based parameters estimation)": {
                  "description": "Compute HAR volatility forecasts over an horizon of 5 days for one asset, using the log of squared close-to-close returns as variance proxy and including lags of 1 and 5 of that variance proxy",
                  "value": {
                    "assets": [
                      {
                        "assetPrices": [
                          {
                            "date": "2020-01-01",
                            "close": 3.08
                          },
                          {
                            "date": "2020-01-02",
                            "close": 3.11
                          },
                          {
                            "date": "2020-01-03",
                            "close": 3.09
                          },
                          {
                            "date": "2020-01-04",
                            "close": 3.1
                          },
                          {
                            "date": "2020-01-05",
                            "close": 3.11
                          },
                          {
                            "date": "2020-01-06",
                            "close": 3.16
                          },
                          {
                            "date": "2020-01-07",
                            "close": 3.22
                          },
                          {
                            "date": "2020-01-08",
                            "close": 3.23
                          },
                          {
                            "date": "2020-01-09",
                            "close": 3.32
                          },
                          {
                            "date": "2020-01-10",
                            "close": 3.3
                          }
                        ],
                        "volatilityForecastHorizon": 5,
                        "varianceProxyLogTransformation": true,
                        "varianceProxyLags": [
                          1,
                          5
                        ]
                      }
                    ]
                  }
                },
                "Example (panel-based parameters estimation)": {
                  "description": "Compute HAR volatility forecasts over an horizon of 5 days for two assets using a panel-based estimation procedure, using the squared close-to-close returns as variance proxy and including lags of 1 and 5 of that variance proxy",
                  "value": {
                    "assets": [
                      {
                        "assetPrices": [
                          {
                            "date": "2020-01-01",
                            "close": 3.08
                          },
                          {
                            "date": "2020-01-02",
                            "close": 3.11
                          },
                          {
                            "date": "2020-01-03",
                            "close": 3.09
                          },
                          {
                            "date": "2020-01-04",
                            "close": 3.1
                          },
                          {
                            "date": "2020-01-05",
                            "close": 3.11
                          },
                          {
                            "date": "2020-01-06",
                            "close": 3.16
                          },
                          {
                            "date": "2020-01-07",
                            "close": 3.22
                          },
                          {
                            "date": "2020-01-08",
                            "close": 3.23
                          },
                          {
                            "date": "2020-01-09",
                            "close": 3.32
                          },
                          {
                            "date": "2020-01-10",
                            "close": 3.3
                          }
                        ]
                      },
                      {
                        "assetPrices": [
                          {
                            "date": "2020-01-01",
                            "close": 5.08
                          },
                          {
                            "date": "2020-01-02",
                            "close": 5.11
                          },
                          {
                            "date": "2020-01-03",
                            "close": 5.09
                          },
                          {
                            "date": "2020-01-04",
                            "close": 5.1
                          },
                          {
                            "date": "2020-01-05",
                            "close": 5.11
                          },
                          {
                            "date": "2020-01-06",
                            "close": 5.16
                          },
                          {
                            "date": "2020-01-07",
                            "close": 5.22
                          },
                          {
                            "date": "2020-01-08",
                            "close": 5.23
                          },
                          {
                            "date": "2020-01-09",
                            "close": 5.32
                          },
                          {
                            "date": "2020-01-10",
                            "close": 5.3
                          }
                        ]
                      }
                    ],
                    "volatilityForecastHorizon": 5,
                    "varianceProxyLags": [
                      1,
                      5
                    ],
                    "harParametersEstimationType": "panel"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assets"
                  ],
                  "properties": {
                    "assets": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "assetVolatilityForecasts",
                          "assetAggregatedVolatilityForecast"
                        ],
                        "properties": {
                          "assetVolatilityForecasts": {
                            "description": "assetVolatilityForecasts[t] contains the asset (t+1)-steps ahead volatility forecast",
                            "type": "array",
                            "minItems": 1,
                            "items": {
                              "type": "number",
                              "minimum": 0
                            }
                          },
                          "assetAggregatedVolatilityForecast": {
                            "description": "The asset aggregated volatility forecast over the forecast horizon, corresponding to the aggregation of all the multi-steps ahead volatility forecasts contained in assetVolatilityForecasts",
                            "type": "number",
                            "minimum": 0
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed volatility forecast of 1 asset over a forecast horizon of 2 days",
                    "value": {
                      "assets": [
                        {
                          "assetVolatilityForecasts": [
                            0.008350368904247745,
                            0.016344420052190625
                          ],
                          "assetAggregatedVolatilityForecast": 0.01867199250709839
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/volatility/forecast/hexp": {
      "post": {
        "tags": [
          "Assets / Volatility Forecast"
        ],
        "summary": "Heterogeneous Exponential Model (HExp)",
        "description": "Compute volatility forecasts for an asset using an heterogeneous exponential (HExp) model.\n\nReferences\n* [Tim Bollerslev, Benjamin Hood, John Huss, Lasse Heje Pedersen, Risk Everywhere: Modeling and Managing Volatility, The Review of Financial Studies, Volume 31, Issue 7, July 2018, Pages 2729\u20132773](https://academic.oup.com/rfs/article/31/7/2729/5001472)\n* [Giuseppe Buccheri, Fulvio Corsi, HARK the SHARK: Realized Volatility Modeling with Measurement Errors and Nonlinear Dependencies, Journal of Financial Econometrics, Volume 19, Issue 4, Fall 2021, Pages 614\u2013649](https://academic.oup.com/jfec/article-abstract/19/4/614/5553055?redirectedFrom=fulltext)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "assets"
                    ],
                    "properties": {
                      "assets": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "required": [
                            "assetPrices"
                          ],
                          "properties": {
                            "assetPrices": {
                              "description": "assetPrices[t] contains price information for the asset at the date t",
                              "type": "array",
                              "minItems": 3,
                              "items": {
                                "type": "object",
                                "required": [
                                  "date",
                                  "close"
                                ],
                                "properties": {
                                  "date": {
                                    "type": "string",
                                    "description": "The date corresponding to the date t in format YYYY-MM-DD; all dates must be distinct"
                                  },
                                  "open": {
                                    "type": "number",
                                    "description": "The open price of the asset at the date t; must be higher than or equal to the low price and lower than or equal to the high price; required if varianceProxy is jumpAdjustedParkinsonRange",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  },
                                  "high": {
                                    "type": "number",
                                    "description": "The high price of the asset at the date t; must be lower than or equal to the high price; required if varianceProxy is parkinsonRange or jumpAdjustedParkinsonRange",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  },
                                  "low": {
                                    "type": "number",
                                    "description": "The low price of the asset at the date t; must be higher than or equal to the low price; required if varianceProxy is parkinsonRange or jumpAdjustedParkinsonRange",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  },
                                  "close": {
                                    "type": "number",
                                    "description": "The close price of the asset at the date t; must be higher than or equal to the low price and lower than or equal to the high price",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  }
                                }
                              }
                            },
                            "varianceProxy": {
                              "type": "string",
                              "description": "The variance proxy to use",
                              "enum": [
                                "squaredCloseToCloseReturns",
                                "demeanedSquaredCloseToCloseReturns",
                                "parkinsonRange",
                                "jumpAdjustedParkinsonRange"
                              ],
                              "default": "squaredCloseToCloseReturns"
                            },
                            "volatilityForecastHorizon": {
                              "description": "The forecast horizon, corresponding to the number of multi-steps ahead volatility forecasts to compute",
                              "type": "integer",
                              "minimum": 1,
                              "default": 1
                            },
                            "varianceProxyLogTransformation": {
                              "description": "Whether to use the raw variance proxies if false or to apply a log transformation to the variance proxies if true",
                              "type": "boolean",
                              "default": false
                            },
                            "varianceProxyCentering": {
                              "description": "Whether to center the variance proxies around their long run average",
                              "type": "boolean",
                              "default": false
                            },
                            "varianceProxyCentersOfMass": {
                              "description": "varianceProxyCentersOfMass[k] is the k-th center of mass of the variance proxies to include in the HExp model; defaults to [1, 5, 25]",
                              "type": "array",
                              "minItems": 1,
                              "maxItems": 5,
                              "uniqueItems": true,
                              "items": {
                                "type": "integer",
                                "minimum": 1
                              }
                            },
                            "hexpParametersEstimationMethod": {
                              "description": "The method to use to estimate the Hexp model parameters",
                              "type": "string",
                              "enum": [
                                "ordinaryLeastSquares",
                                "weightedLeastSquares",
                                "robustLeastSquares"
                              ],
                              "default": "ordinaryLeastSquares"
                            }
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": [
                      "assets"
                    ],
                    "properties": {
                      "assets": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "required": [
                            "assetPrices"
                          ],
                          "properties": {
                            "assetPrices": {
                              "description": "assetPrices[t] contains price information for the asset at the date t",
                              "type": "array",
                              "minItems": 3,
                              "items": {
                                "type": "object",
                                "required": [
                                  "date",
                                  "close"
                                ],
                                "properties": {
                                  "date": {
                                    "type": "string",
                                    "description": "The date corresponding to the date t in format YYYY-MM-DD; all dates must be distinct"
                                  },
                                  "open": {
                                    "type": "number",
                                    "description": "The open price of the asset at the date t; must be higher than or equal to the low price and lower than or equal to the high price; required if varianceProxy is jumpAdjustedParkinsonRange",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  },
                                  "high": {
                                    "type": "number",
                                    "description": "The high price of the asset at the date t; must be lower than or equal to the high price; required if varianceProxy is parkinsonRange or jumpAdjustedParkinsonRange",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  },
                                  "low": {
                                    "type": "number",
                                    "description": "The low price of the asset at the date t; must be higher than or equal to the low price; required if varianceProxy is parkinsonRange or jumpAdjustedParkinsonRange",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  },
                                  "close": {
                                    "type": "number",
                                    "description": "The close price of the asset at the date t; must be higher than or equal to the low price and lower than or equal to the high price",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "varianceProxy": {
                        "type": "string",
                        "description": "The variance proxy to use; common to all assets in assets; if parkinsonRange, the minimum number of items in assetPrices becomes 1 instead of 3; if demeanedSquaredCloseToCloseReturns or jumpAdjustedParkinsonRange, the minimum number of items in assetPrices becomes 2 instead of 3",
                        "enum": [
                          "squaredCloseToCloseReturns",
                          "demeanedSquaredCloseToCloseReturns",
                          "parkinsonRange",
                          "jumpAdjustedParkinsonRange"
                        ],
                        "default": "squaredCloseToCloseReturns"
                      },
                      "volatilityForecastHorizon": {
                        "description": "The forecast horizon, corresponding to the number of multi-steps ahead volatility forecasts to compute; common to all assets in assets",
                        "type": "integer",
                        "minimum": 1,
                        "default": 1
                      },
                      "varianceProxyLogTransformation": {
                        "description": "Whether to use the raw variance proxies if false or to apply a log transformation to the variance proxies if true; common to all assets in assets",
                        "type": "boolean",
                        "default": false
                      },
                      "varianceProxyCentering": {
                        "description": "Whether to center the variance proxies around their long run average; common to all assets in assets",
                        "type": "boolean",
                        "default": false
                      },
                      "varianceProxyCentersOfMass": {
                        "description": "varianceProxyCentersOfMass[k] is the k-th center of mass of the variance proxies to include in the HExp model; defaults to [1, 5, 25]; common to all assets in assets",
                        "type": "array",
                        "minItems": 1,
                        "maxItems": 5,
                        "uniqueItems": true,
                        "items": {
                          "type": "integer",
                          "minimum": 1
                        }
                      },
                      "hexpParametersEstimationMethod": {
                        "description": "The method to use to estimate the HExp model parameters; common to all assets in assets",
                        "type": "string",
                        "enum": [
                          "ordinaryLeastSquares",
                          "weightedLeastSquares",
                          "robustLeastSquares"
                        ],
                        "default": "ordinaryLeastSquares"
                      },
                      "hexpParametersEstimationType": {
                        "description": "The type of the method to use to estimate the HExp model parameters; in case hexpParametersEstimationType equals to 'panel', the minimum number of assets in assets must be 2 and all assetPrices arrays must be consistent",
                        "type": "string",
                        "enum": [
                          "individual",
                          "panel"
                        ],
                        "default": "individual"
                      }
                    }
                  }
                ]
              },
              "examples": {
                "Example (individual-based parameters estimation)": {
                  "description": "Compute HExp volatility forecasts over an horizon of 5 days for one asset, using the log of squared close-to-close returns as variance proxy and including centers of mass 1 and 5 of that variance proxy",
                  "value": {
                    "assets": [
                      {
                        "assetPrices": [
                          {
                            "date": "2020-01-01",
                            "close": 3.08
                          },
                          {
                            "date": "2020-01-02",
                            "close": 3.11
                          },
                          {
                            "date": "2020-01-03",
                            "close": 3.09
                          },
                          {
                            "date": "2020-01-04",
                            "close": 3.1
                          },
                          {
                            "date": "2020-01-05",
                            "close": 3.11
                          },
                          {
                            "date": "2020-01-06",
                            "close": 3.16
                          },
                          {
                            "date": "2020-01-07",
                            "close": 3.22
                          },
                          {
                            "date": "2020-01-08",
                            "close": 3.23
                          },
                          {
                            "date": "2020-01-09",
                            "close": 3.32
                          },
                          {
                            "date": "2020-01-10",
                            "close": 3.3
                          }
                        ],
                        "volatilityForecastHorizon": 5,
                        "varianceProxyLogTransformation": true,
                        "varianceProxyCentersOfMass": [
                          1,
                          5
                        ]
                      }
                    ]
                  }
                },
                "Example (panel-based parameters estimation)": {
                  "description": "Compute HExp volatility forecasts over an horizon of 5 days for two assets using a panel-based estimation procedure, using the squared close-to-close returns as variance proxy and including centers of mass 1 and 5 of that variance proxy",
                  "value": {
                    "assets": [
                      {
                        "assetPrices": [
                          {
                            "date": "2020-01-01",
                            "close": 3.08
                          },
                          {
                            "date": "2020-01-02",
                            "close": 3.11
                          },
                          {
                            "date": "2020-01-03",
                            "close": 3.09
                          },
                          {
                            "date": "2020-01-04",
                            "close": 3.1
                          },
                          {
                            "date": "2020-01-05",
                            "close": 3.11
                          },
                          {
                            "date": "2020-01-06",
                            "close": 3.16
                          },
                          {
                            "date": "2020-01-07",
                            "close": 3.22
                          },
                          {
                            "date": "2020-01-08",
                            "close": 3.23
                          },
                          {
                            "date": "2020-01-09",
                            "close": 3.32
                          },
                          {
                            "date": "2020-01-10",
                            "close": 3.3
                          }
                        ]
                      },
                      {
                        "assetPrices": [
                          {
                            "date": "2020-01-01",
                            "close": 5.08
                          },
                          {
                            "date": "2020-01-02",
                            "close": 5.11
                          },
                          {
                            "date": "2020-01-03",
                            "close": 5.09
                          },
                          {
                            "date": "2020-01-04",
                            "close": 5.1
                          },
                          {
                            "date": "2020-01-05",
                            "close": 5.11
                          },
                          {
                            "date": "2020-01-06",
                            "close": 5.16
                          },
                          {
                            "date": "2020-01-07",
                            "close": 5.22
                          },
                          {
                            "date": "2020-01-08",
                            "close": 5.23
                          },
                          {
                            "date": "2020-01-09",
                            "close": 5.32
                          },
                          {
                            "date": "2020-01-10",
                            "close": 5.3
                          }
                        ]
                      }
                    ],
                    "volatilityForecastHorizon": 5,
                    "varianceProxyCentersOfMass": [
                      1,
                      5
                    ],
                    "hexpParametersEstimationType": "panel"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assets"
                  ],
                  "properties": {
                    "assets": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "assetVolatilityForecasts",
                          "assetAggregatedVolatilityForecast"
                        ],
                        "properties": {
                          "assetVolatilityForecasts": {
                            "description": "assetVolatilityForecasts[t] contains the asset (t+1)-steps ahead volatility forecast",
                            "type": "array",
                            "minItems": 1,
                            "items": {
                              "type": "number",
                              "minimum": 0
                            }
                          },
                          "assetAggregatedVolatilityForecast": {
                            "description": "The asset aggregated volatility forecast over the forecast horizon, corresponding to the aggregation of all the multi-steps ahead volatility forecasts contained in assetVolatilityForecasts",
                            "type": "number",
                            "minimum": 0
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed volatility forecast of 1 asset over a forecast horizon of 2 days",
                    "value": {
                      "assets": [
                        {
                          "assetVolatilityForecasts": [
                            0.008350368904247745,
                            0.016344420052190625
                          ],
                          "assetAggregatedVolatilityForecast": 0.01867199250709839
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/returns/variance": {
      "post": {
        "tags": [
          "Assets / Returns / Moments"
        ],
        "summary": "Variance",
        "description": "Compute the variance of the returns of an asset, from either:\n* The asset returns\n* The standard deviation of the asset returns\n\nAlternatively, compute the variance of the returns of several assets from the covariance matrix of the returns of these assets.\n\nReferences\n* [Wikipedia, Variance](https://en.wikipedia.org/wiki/Variance)        \n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "assets"
                    ],
                    "properties": {
                      "assets": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "required": [
                            "assetReturns"
                          ],
                          "properties": {
                            "assetReturns": {
                              "description": "assetReturns[t] is the return of the asset at the time t",
                              "type": "array",
                              "minItems": 2,
                              "items": {
                                "type": "number"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": [
                      "assets",
                      "assetsCovarianceMatrix"
                    ],
                    "properties": {
                      "assets": {
                        "type": "integer",
                        "description": "The number of assets",
                        "minimum": 2
                      },
                      "assetsCovarianceMatrix": {
                        "type": "array",
                        "description": "assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j",
                        "minItems": 2,
                        "items": {
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": [
                      "assets"
                    ],
                    "properties": {
                      "assets": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "required": [
                            "assetStandardDeviation"
                          ],
                          "properties": {
                            "assetVolatility": {
                              "assetStandardDeviation": "The asset standard deviation",
                              "type": "number",
                              "minimum": 0
                            }
                          }
                        }
                      }
                    }
                  }
                ]
              },
              "examples": {
                "From asset returns": {
                  "description": "Compute the variance of two assets based on 4 returns per asset",
                  "value": {
                    "assets": [
                      {
                        "assetReturns": [
                          0.01,
                          0,
                          0.02,
                          -0.03
                        ]
                      },
                      {
                        "assetReturns": [
                          0.01,
                          0,
                          0.02,
                          -0.03
                        ]
                      }
                    ]
                  }
                },
                "From asset covariance matrix": {
                  "description": "Compute the variance of two assets based on their covariance matrix",
                  "value": {
                    "assets": 2,
                    "assetsCovarianceMatrix": [
                      [
                        0.01,
                        -0.0025
                      ],
                      [
                        -0.0025,
                        0.0025
                      ]
                    ]
                  }
                },
                "From asset standard deviations": {
                  "description": "Compute the variance of two assets based on their standard deviation",
                  "value": {
                    "assets": [
                      {
                        "assetStandardDeviation": 1
                      },
                      {
                        "assetStandardDeviation": 0.05
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assets"
                  ],
                  "properties": {
                    "assets": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "assetVariance"
                        ],
                        "properties": {
                          "assetVariance": {
                            "description": "The variance of the asset",
                            "type": "number",
                            "minimum": 0
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "From returns": {
                    "description": "Computed variance of two assets",
                    "value": {
                      "assets": [
                        {
                          "assetVariance": 0.00035
                        },
                        {
                          "assetVariance": 0.00035
                        }
                      ]
                    }
                  },
                  "From covariance matrix": {
                    "description": "Computed variance of two assets",
                    "value": {
                      "assets": [
                        {
                          "assetVariance": 0.01
                        },
                        {
                          "assetVariance": 0.0025
                        }
                      ]
                    }
                  },
                  "From volatilities": {
                    "description": "Computed variance of two assets",
                    "value": {
                      "assets": [
                        {
                          "assetVariance": 0.010000000000000002
                        },
                        {
                          "assetVariance": 0.0025000000000000005
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/returns/skewness": {
      "post": {
        "tags": [
          "Assets / Returns / Moments"
        ],
        "summary": "Skewness",
        "description": "Compute the skewness of the return(s) of one or several asset(s).\n\nReferences\n* [Wikipedia, Skewness](https://en.wikipedia.org/wiki/Skewness)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets"
                ],
                "properties": {
                  "assets": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "assetReturns"
                      ],
                      "properties": {
                        "assetReturns": {
                          "description": "assetReturns[t] is the return of the asset at the time t",
                          "type": "array",
                          "minItems": 3,
                          "items": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute the skewness of 1 asset based on 4 returns",
                  "value": {
                    "assets": [
                      {
                        "assetReturns": [
                          0.01,
                          0,
                          0.02,
                          -0.03
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assets"
                  ],
                  "properties": {
                    "assets": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "assetSkewness"
                        ],
                        "properties": {
                          "assetSkewness": {
                            "description": "The skewness of the returns of the asset",
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed skewness of 1 assetx",
                    "value": {
                      "assets": [
                        {
                          "assetSkewness": -0.6872431934890911
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/returns/kurtosis": {
      "post": {
        "tags": [
          "Assets / Returns / Moments"
        ],
        "summary": "Kurtosis",
        "description": "Compute the kurtosis of the return(s) of one or several asset(s).\n\nReferences\n* [Wikipedia, Kurtosis](https://en.wikipedia.org/wiki/Kurtosis)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets"
                ],
                "properties": {
                  "assets": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "assetReturns"
                      ],
                      "properties": {
                        "assetReturns": {
                          "description": "assetReturns[t] is the return of the asset at the time t",
                          "type": "array",
                          "minItems": 4,
                          "items": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute the kurtosis of 1 asset based on 4 returns",
                  "value": {
                    "assets": [
                      {
                        "assetReturns": [
                          0.01,
                          0,
                          0.02,
                          -0.03
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assets"
                  ],
                  "properties": {
                    "assets": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "assetKurtosis"
                        ],
                        "properties": {
                          "assetKurtosis": {
                            "description": "The kurtosis of the returns of the asset",
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed kurtosis of 1 assetx",
                    "value": {
                      "assets": [
                        {
                          "assetKurtosis": 2
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/analysis/turbulence-index": {
      "post": {
        "tags": [
          "Assets / Analysis"
        ],
        "summary": "Turbulence Index",
        "description": "Compute the turbulence index associated to a universe of assets.\n\nReferences\n* [M. Kritzman, Y. Li, Skulls, Financial Turbulence, and Risk Management,Financial Analysts Journal, Volume 66, Number 5, Pages 30-41, Year 2010](https://www.tandfonline.com/doi/abs/10.2469/faj.v66.n5.3)\n* [Kinlaw, W., Turkington, D. Correlation surprise. J Asset Manag 14, 385\u2013399 (2013)](https://link.springer.com/article/10.1057/jam.2013.27)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets",
                  "assetsCovarianceMatrix",
                  "assetsMeans",
                  "assetsReturns"
                ],
                "properties": {
                  "assets": {
                    "description": "The number of assets",
                    "type": "integer",
                    "minimum": 1
                  },
                  "assetsCovarianceMatrix": {
                    "description": "assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j over an historical reference period",
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "assetsMeans": {
                    "description": "assetsMeans[i] is the arithmetic average return of asset i over an historical reference period",
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "number"
                    }
                  },
                  "assetsReturns": {
                    "description": "assetsReturns[i] is the return of asset i over a period different from the historical reference period",
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "number"
                    }
                  }
                }
              },
              "examples": {
                "Example (two assets)": {
                  "description": "Compute the turbulence index of two assets",
                  "value": {
                    "assets": 2,
                    "assetsCovarianceMatrix": [
                      [
                        9,
                        1
                      ],
                      [
                        1,
                        1
                      ]
                    ],
                    "assetsMeans": [
                      1,
                      1
                    ],
                    "assetsReturns": [
                      1,
                      0
                    ]
                  }
                },
                "Example (1 asset)": {
                  "description": "Compute the turbulence index of 1 asset",
                  "value": {
                    "assets": 1,
                    "assetsCovarianceMatrix": [
                      [
                        1
                      ]
                    ],
                    "assetsMeans": [
                      0.5
                    ],
                    "assetsReturns": [
                      1
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsTurbulenceIndex"
                  ],
                  "properties": {
                    "assetsTurbulenceIndex": {
                      "description": "the turbulence index of the universe of assets",
                      "type": "number"
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed turbulence index",
                    "value": {
                      "assetsTurbulenceIndex": 0.5624999999999999
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/analysis/absorption-ratio": {
      "post": {
        "tags": [
          "Assets / Analysis"
        ],
        "summary": "Absorption Ratio",
        "description": "Compute the absorption ratio associated to a universe of assets.\n\nReferences\n* [Mark Kritzman, Yuanzhen Li, Sebastien Page and Roberto Rigobon, Principal Components as a Measure of Systemic Risk, The Journal of Portfolio Management Summer 2011, 37 (4) 112-126](https://jpm.pm-research.com/content/37/4/112)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets",
                  "assetsCovarianceMatrix"
                ],
                "properties": {
                  "assets": {
                    "description": "The number of assets",
                    "type": "integer",
                    "minimum": 1
                  },
                  "assetsCovarianceMatrix": {
                    "description": "assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "assetsCovarianceMatrixEigenvectors": {
                    "type": "object",
                    "properties": {
                      "eigenvectorsRetained": {
                        "type": "integer",
                        "minimum": 1,
                        "description": "The number of eigenvectors to retain in the numerator of the absorption ratio, which must be lower than the number of assets; defaults to [1/5-th] the number of assets"
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute the absorption ratio of two assets",
                  "value": {
                    "assets": 2,
                    "assetsCovarianceMatrix": [
                      [
                        9,
                        1
                      ],
                      [
                        1,
                        1
                      ]
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsAbsorptionRatio"
                  ],
                  "properties": {
                    "assetsAbsorptionRatio": {
                      "description": "The absorption ratio of the universe of assets",
                      "type": "number"
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed absorption ratio of two assets",
                    "value": {
                      "assetsAbsorptionRatio": 0.9123105625617661
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/correlation/matrix": {
      "post": {
        "tags": [
          "Assets / Correlation Matrix"
        ],
        "summary": "Correlation Matrix",
        "description": "Either compute the Pearson asset correlation matrix from asset returns or extract the asset correlation matrix from the asset covariance matrix.\n\nReferences\n* [Wikipedia, Correlation and Dependence](https://en.wikipedia.org/wiki/Correlation_and_dependence#Correlation_matrices)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "assets"
                    ],
                    "properties": {
                      "assets": {
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "object",
                          "required": [
                            "assetReturns"
                          ],
                          "properties": {
                            "assetReturns": {
                              "description": "assetReturns[t] is the return of the asset at the time t; all assetReturns arrays must have the same length",
                              "type": "array",
                              "minItems": 2,
                              "items": {
                                "type": "number"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": [
                      "assets",
                      "assetsCovarianceMatrix"
                    ],
                    "properties": {
                      "assets": {
                        "type": "integer",
                        "description": "The number of assets",
                        "minimum": 2
                      },
                      "assetsCovarianceMatrix": {
                        "type": "array",
                        "description": "assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j",
                        "minItems": 2,
                        "items": {
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                ]
              },
              "examples": {
                "From returns": {
                  "description": "Computes the correlation matrix of two assets based on 4 returns per asset",
                  "value": {
                    "assets": [
                      {
                        "assetReturns": [
                          0.01,
                          0,
                          0.02,
                          -0.03
                        ]
                      },
                      {
                        "assetReturns": [
                          0.01,
                          0,
                          0.02,
                          -0.03
                        ]
                      }
                    ]
                  }
                },
                "From covariance matrix": {
                  "description": "Computes the correlation matrix of two assets based on their covariance matrix",
                  "value": {
                    "assets": 2,
                    "assetsCovarianceMatrix": [
                      [
                        0.01,
                        -0.0025
                      ],
                      [
                        -0.0025,
                        0.0025
                      ]
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsCorrelationMatrix"
                  ],
                  "properties": {
                    "assetsCorrelationMatrix": {
                      "description": "assetsCorrelationMatrix[i][j] is the correlation between the asset i and the asset j",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "number"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed correlation matrix",
                    "value": {
                      "assetsCorrelationMatrix": [
                        [
                          1,
                          0.5
                        ],
                        [
                          0.5,
                          1
                        ]
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/correlation/matrix/spearman": {
      "post": {
        "tags": [
          "Assets / Correlation Matrix"
        ],
        "summary": "Spearman Correlation Matrix",
        "description": "Compute the Spearman asset correlation matrix from asset returns.\n\nReferences\n* [Wikipedia, Spearman's rank correlation coefficient](https://en.wikipedia.org/wiki/Spearman%27s_rank_correlation_coefficient)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets"
                ],
                "properties": {
                  "assets": {
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "object",
                      "required": [
                        "assetReturns"
                      ],
                      "properties": {
                        "assetReturns": {
                          "description": "assetReturns[t] is the return of the asset at the time t; all assetReturns arrays must have the same length",
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Computes the Spearman correlation matrix of two assets based on 4 returns per asset",
                  "value": {
                    "assets": [
                      {
                        "assetReturns": [
                          0.01,
                          0,
                          0.02,
                          -0.03
                        ]
                      },
                      {
                        "assetReturns": [
                          0.01,
                          0,
                          0.02,
                          -0.03
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsCorrelationMatrix"
                  ],
                  "properties": {
                    "assetsCorrelationMatrix": {
                      "description": "assetsCorrelationMatrix[i][j] is the correlation between the asset i and the asset j",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "number"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed correlation matrix",
                    "value": {
                      "assetsCorrelationMatrix": [
                        [
                          1,
                          0.5
                        ],
                        [
                          0.5,
                          1
                        ]
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/correlation/matrix/gerber": {
      "post": {
        "tags": [
          "Assets / Correlation Matrix"
        ],
        "summary": "Gerber Correlation Matrix",
        "description": "Compute the Gerber asset correlation matrix from asset returns.\n\nReferences\n* [Gerber, S., B. Javid, H. Markowitz, P. Sargen, and D. Starer (2022). The gerber statistic: A robust co-movement measure for portfolio optimization. The Journal of Portfolio Management 48(2), 87\u2013102](https://www.doi.org/10.3905/jpm.2021.1.316)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets"
                ],
                "properties": {
                  "assets": {
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "object",
                      "required": [
                        "assetReturns"
                      ],
                      "properties": {
                        "assetReturns": {
                          "description": "assetReturns[t] is the return of the asset at the time t; all assetReturns arrays must have the same length",
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  },
                  "gerberThreshold": {
                    "description": "The Gerber threshold",
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1,
                    "default": 0.5
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Computes the Gerber correlation matrix of two assets based on 4 returns per asset",
                  "value": {
                    "assets": [
                      {
                        "assetReturns": [
                          0.01,
                          0,
                          0.02,
                          -0.03
                        ]
                      },
                      {
                        "assetReturns": [
                          0.01,
                          0,
                          0.02,
                          -0.03
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsCorrelationMatrix"
                  ],
                  "properties": {
                    "assetsCorrelationMatrix": {
                      "description": "assetsCorrelationMatrix[i][j] is the correlation between the asset i and the asset j",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "number"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed correlation matrix",
                    "value": {
                      "assetsCorrelationMatrix": [
                        [
                          1,
                          0.5
                        ],
                        [
                          0.5,
                          1
                        ]
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/correlation/matrix/validation": {
      "post": {
        "tags": [
          "Assets / Correlation Matrix"
        ],
        "summary": "Correlation Matrix Validation",
        "description": "Validate whether a matrix is an asset correlation matrix.\n\nReferences\n* [Wikipedia, Correlation and Dependence](https://en.wikipedia.org/wiki/Correlation_and_dependence#Correlation_matrices)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets",
                  "assetsCorrelationMatrix"
                ],
                "properties": {
                  "assets": {
                    "description": "The number of assets",
                    "type": "integer",
                    "minimum": 2
                  },
                  "assetsCorrelationMatrix": {
                    "description": "assetsCorrelationMatrix[i][j] is the correlation between the asset i and the asset j",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number"
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Validate whether the provided matrix is a correlation matrix",
                  "value": {
                    "assets": 2,
                    "assetsCorrelationMatrix": [
                      [
                        1,
                        -0.00035
                      ],
                      [
                        -0.00035,
                        1
                      ]
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "description": "Indicates whether the matrix is a valid correlation matrix",
                      "type": "string",
                      "enum": [
                        "valid correlation matrix",
                        "invalid correlation matrix - non symmetric matrix",
                        "invalid correlation matrix - non positive diagonal elements",
                        "invalid correlation matrix - non positive semi-definite matrix"
                      ]
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Valid correlation matrix",
                    "value": {
                      "message": "valid correlation matrix"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/correlation/matrix/theory-implied": {
      "post": {
        "tags": [
          "Assets / Correlation Matrix"
        ],
        "summary": "Theory-Implied Correlation Matrix",
        "description": "Compute the theory-implied asset correlation matrix associated with:\n* A hierarchical classification of a universe of assets\n* An asset correlation matrix\n\nReferences\n* [Lopez de Prado, Marcos Estimation of Theory-Implied Correlation Matrices (November 9, 2019)](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3484152)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets",
                  "assetsCorrelationMatrix"
                ],
                "properties": {
                  "assets": {
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "object",
                      "required": [
                        "assetHierarchicalClassification"
                      ],
                      "properties": {
                        "assetHierarchicalClassification": {
                          "description": "assetHierarchicalClassification[i] is the i+1-th level of the hierarchical classification of the asset, from the most generic classification to the most specific classification; all the assetHierarchicalClassification arrays must have the same length",
                          "type": "array",
                          "minItems": 1,
                          "maxItems": 4,
                          "items": {
                            "oneOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "integer"
                              }
                            ]
                          }
                        }
                      }
                    }
                  },
                  "assetsCorrelationMatrix": {
                    "description": "assetsCorrelationMatrix[i][j] is the correlation between the asset i and the asset j",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "clusteringMethod": {
                    "type": "string",
                    "description": "The hierarchical clustering method to use",
                    "enum": [
                      "singleLinkage",
                      "averageLinkage",
                      "completeLinkage",
                      "wardLinkage"
                    ],
                    "default": "averageLinkage"
                  }
                }
              },
              "examples": {
                "Example (integers)": {
                  "description": "Compute the theory-implied asset correlation matrix of two assets, using their GICS hierarchical classification",
                  "value": {
                    "assets": [
                      {
                        "assetHierarchicalClassification": [
                          35,
                          3510,
                          351010,
                          35101010
                        ]
                      },
                      {
                        "assetHierarchicalClassification": [
                          20,
                          2030,
                          203020,
                          20302010
                        ]
                      }
                    ],
                    "assetsCorrelationMatrix": [
                      [
                        1,
                        -0.00035
                      ],
                      [
                        -0.00035,
                        1
                      ]
                    ]
                  }
                },
                "Example (strings)": {
                  "description": "Compute the theory-implied asset correlation matrix of three assets, using their MSCI ACWI hierarchical classification",
                  "value": {
                    "assets": [
                      {
                        "assetHierarchicalClassification": [
                          "acwi",
                          "dm",
                          "americas"
                        ]
                      },
                      {
                        "assetHierarchicalClassification": [
                          "acwi",
                          "dm",
                          "americas"
                        ]
                      },
                      {
                        "assetHierarchicalClassification": [
                          "standalone",
                          "",
                          "americas"
                        ]
                      }
                    ],
                    "assetsCorrelationMatrix": [
                      [
                        1,
                        0.95,
                        0.6
                      ],
                      [
                        0.95,
                        1,
                        0.65
                      ],
                      [
                        0.6,
                        0.65,
                        1
                      ]
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsCorrelationMatrix"
                  ],
                  "properties": {
                    "assetsCorrelationMatrix": {
                      "description": "assetsCorrelationMatrix[i][j] is the correlation between the asset i and the asset j",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "number"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed theory-implied asset correlation matrix",
                    "value": {
                      "assetsCorrelationMatrix": [
                        [
                          1,
                          -0.00034999999999985043
                        ],
                        [
                          -0.00034999999999985043,
                          1
                        ]
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/correlation/matrix/random": {
      "post": {
        "tags": [
          "Assets / Correlation Matrix"
        ],
        "summary": "Random Correlation Matrix",
        "description": "Generate an asset correlation matrix uniformly at random over the space of positive definite correlation matrices.\n\nReferences\n* [Joe, H., Generating random correlation matrices based on partial correlations. Journal of Multivariate Analysis, 2006, 97, 2177-2189](https://www.sciencedirect.com/science/article/pii/S0047259X05000886)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets"
                ],
                "properties": {
                  "assets": {
                    "description": "The number of assets",
                    "type": "integer",
                    "minimum": 2
                  },
                  "simulations": {
                    "type": "integer",
                    "description": "The number of simulations to perform",
                    "minimum": 1,
                    "default": 1
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Generate a 2x2 correlation matrix",
                  "value": {
                    "assets": 2
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "simulations"
                  ],
                  "properties": {
                    "simulations": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "assetsCorrelationMatrix"
                        ],
                        "properties": {
                          "assetsCorrelationMatrix": {
                            "description": "assetsCorrelationMatrix[i][j] is the correlation between the asset i and the asset j",
                            "type": "array",
                            "minItems": 2,
                            "items": {
                              "type": "array",
                              "minItems": 2,
                              "items": {
                                "type": "number"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed random correlation matrix",
                    "value": {
                      "simulations": [
                        {
                          "assetsCorrelationMatrix": [
                            [
                              1,
                              0.7606306078350177,
                              0.15733356650676536
                            ],
                            [
                              0.7606306078350177,
                              1,
                              0.7606306078350177
                            ],
                            [
                              0.15733356650676536,
                              0.7606306078350177,
                              1
                            ]
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/correlation/matrix/perturbed": {
      "post": {
        "tags": [
          "Assets / Correlation Matrix"
        ],
        "summary": "Perturbed Correlation Matrix",
        "description": "Generate a randomly perturbed version of an asset correlation matrix.\n\nReferences\n* [Opdyke, JD, Full Probabilistic Control for Direct and Robust, Generalized and Targeted Stressing of the Correlation Matrix (Even When Eigenvalues are Empirically Challenging) (May 30, 2020)](https://ssrn.com/abstract=3673362)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets"
                ],
                "properties": {
                  "assets": {
                    "description": "The number of assets",
                    "type": "integer",
                    "minimum": 2
                  },
                  "assetsCorrelationMatrix": {
                    "description": "assetsCorrelationMatrix[i][j] is the correlation between the asset i and the asset j",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "noiseLevel": {
                    "description": "The exact level of noise that the coefficients of the asset correlation matrix assetsCorrelationMatrix must be perturbed with; exclusive with maximumNoiseLevel",
                    "type": "number",
                    "minimum": 0,
                    "maximum": 2
                  },
                  "maximumNoiseLevel": {
                    "description": "The maximum level of noise that the coefficients of the asset correlation matrix assetsCorrelationMatrix must be perturbed with; exclusive with noiseLevel",
                    "type": "number",
                    "minimum": 0,
                    "maximum": 2
                  },
                  "simulations": {
                    "type": "integer",
                    "description": "The number of simulations to perform",
                    "minimum": 1,
                    "default": 1
                  }
                }
              },
              "examples": {
                "Perturbation of the identity matrix": {
                  "description": "Perturb the 3x3 identity correlation matrix",
                  "value": {
                    "assets": 3,
                    "assetsCorrelationMatrix": [
                      [
                        1,
                        0,
                        0
                      ],
                      [
                        0,
                        1,
                        0
                      ],
                      [
                        0,
                        0,
                        1
                      ]
                    ]
                  }
                },
                "Perturbation of the identity matrix with exact noise": {
                  "description": "Perturb the 3x3 identity correlation matrix with an exact noise",
                  "value": {
                    "assets": 3,
                    "assetsCorrelationMatrix": [
                      [
                        1,
                        0,
                        0
                      ],
                      [
                        0,
                        1,
                        0
                      ],
                      [
                        0,
                        0,
                        1
                      ]
                    ],
                    "noiseLevel": 0.05
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "simulations"
                  ],
                  "properties": {
                    "simulations": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "assetsCorrelationMatrix"
                        ],
                        "properties": {
                          "assetsCorrelationMatrix": {
                            "description": "assetsCorrelationMatrix[i][j] is the correlation between the asset i and the asset j",
                            "type": "array",
                            "minItems": 2,
                            "items": {
                              "type": "array",
                              "minItems": 2,
                              "items": {
                                "type": "number"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed perturbed correlation matrix",
                    "value": {
                      "simulations": [
                        {
                          "assetsCorrelationMatrix": [
                            [
                              1,
                              0.7606306078350177,
                              0.15733356650676536
                            ],
                            [
                              0.7606306078350177,
                              1,
                              0.7606306078350177
                            ],
                            [
                              0.15733356650676536,
                              0.7606306078350177,
                              1
                            ]
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/correlation/matrix/nearest": {
      "post": {
        "tags": [
          "Assets / Correlation Matrix"
        ],
        "summary": "Nearest Correlation Matrix",
        "description": "Compute the _closest_ - in terms of [the Frobenius norm](https://en.wikipedia.org/wiki/Matrix_norm#Frobenius_norm) - asset correlation matrix to an approximate asset correlation matrix, optionally keeping a selected number of correlations fixed.\n\nReferences\n* [Nicholas J. Higham, Computing the Nearest Correlation Matrix\u2014A Problem from Finance, IMA J. Numer. Anal. 22, 329\u2013343, 2002.](http://www.maths.manchester.ac.uk/~higham/narep/narep369.pdf)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets",
                  "assetsApproximateCorrelationMatrix"
                ],
                "properties": {
                  "assets": {
                    "description": "The number of assets",
                    "type": "integer",
                    "minimum": 2
                  },
                  "assetsApproximateCorrelationMatrix": {
                    "description": "assetsApproximateCorrelationMatrix[i][i] is the approximate correlation between the asset i and the asset j",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "assetsFixedCorrelations": {
                    "description": "assetsFixedCorrelations[k] is the couple of indices (i,j) of the assets i and j for which to keep the approximate correlation assetsApproximateCorrelationMatrix[i][j] fixed",
                    "type": "array",
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "maxItems": 2,
                      "items": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "examples": {
                "Nearest correlation matrix": {
                  "description": "Compute the nearest correlation matrix to an approximate correlation matrix",
                  "value": {
                    "assets": 3,
                    "assetsApproximateCorrelationMatrix": [
                      [
                        1,
                        1,
                        0
                      ],
                      [
                        1,
                        1,
                        1
                      ],
                      [
                        0,
                        1,
                        1
                      ]
                    ]
                  }
                },
                "Nearest correlation matrix with fixed a correlation": {
                  "description": "Compute the nearest correlation matrix to an approximate correlation matrix, keeping one correlation coefficient fixed",
                  "value": {
                    "assets": 3,
                    "assetsApproximateCorrelationMatrix": [
                      [
                        1,
                        0.5,
                        0.9
                      ],
                      [
                        0.5,
                        1,
                        -0.2
                      ],
                      [
                        0.9,
                        -0.2,
                        1
                      ]
                    ],
                    "assetsFixedCorrelations": [
                      [
                        2,
                        3
                      ]
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsCorrelationMatrix"
                  ],
                  "properties": {
                    "assetsCorrelationMatrix": {
                      "description": "assetsCorrelationMatrix[i][j] is the correlation between the asset i and the asset j",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "number"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Nearest correlation matrix": {
                    "description": "Computed nearest correlation matrix",
                    "value": {
                      "assetsCorrelationMatrix": [
                        [
                          1,
                          0.7606306078350177,
                          0.15733356650676536
                        ],
                        [
                          0.7606306078350177,
                          1,
                          0.7606306078350177
                        ],
                        [
                          0.15733356650676536,
                          0.7606306078350177,
                          1
                        ]
                      ]
                    }
                  },
                  "Nearest correlation matrix with fixed a correlation": {
                    "description": "Computed nearest correlation matrix keeping one correlation coefficient fixed",
                    "value": {
                      "assetsCorrelationMatrix": [
                        [
                          1,
                          0.4314569968899409,
                          0.7974943959465133
                        ],
                        [
                          0.4314569968899409,
                          1,
                          -0.2
                        ],
                        [
                          0.7974943959465133,
                          -0.2,
                          1
                        ]
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/correlation/matrix/shrinkage": {
      "post": {
        "tags": [
          "Assets / Correlation Matrix"
        ],
        "summary": "Correlation Matrix Shrinkage",
        "description": "Compute an asset correlation matrix as a convex linear combination of an asset correlation matrix and a target correlation matrix, the target correlation matrix being either:  \n * An equicorrelation matrix made of 1\n * An equicorrelation matrix made of 0\n * An equicorrelation matrix made of -1/(n-1), with n the number of assets\n * An equicorrelation matrix made of the average correlation of the elements of the asset correlation matrix\n * A provided correlation matrix\n \n References\n * [Steiner, Andreas, Manipulating Valid Correlation Matrices](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=1878165)\n * [Kwan, Clarence C. Y. (2017) Shrinkage of the Sample Correlation Matrix of Returns Towards a Constant Correlation Target: A Pedagogic Illustration Based on Dow Jones Stock Returns, Spreadsheets in Education (eJSiE): Vol. 10: Iss. 1, Article 3.](http://epublications.bond.edu.au/ejsie/vol10/iss1/3)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "assets",
                      "assetsCorrelationMatrix",
                      "targetEquicorrelationMatrix",
                      "shrinkageFactor"
                    ],
                    "properties": {
                      "assets": {
                        "type": "integer",
                        "minimum": 2
                      },
                      "assetsCorrelationMatrix": {
                        "description": "assetsCorrelationMatrix[i][j] is the correlation between the asset i and the asset j",
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "targetEquicorrelationMatrix": {
                        "description": "The shrinkage target correlation matrix",
                        "type": "string",
                        "enum": [
                          "minimumEquicorrelationMatrix",
                          "zeroEquicorrelationMatrix",
                          "averageEquicorrelationMatrix",
                          "maximumEquicorrelationMatrix"
                        ]
                      },
                      "shrinkageFactor": {
                        "description": "The shrinkage factor",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": [
                      "assets",
                      "assetsCorrelationMatrix",
                      "targetCorrelationMatrix",
                      "shrinkageFactor"
                    ],
                    "properties": {
                      "assets": {
                        "type": "integer",
                        "minimum": 2
                      },
                      "assetsCorrelationMatrix": {
                        "description": "assetsCorrelationMatrix[i][j] is the correlation between the asset i and the asset j",
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "targetCorrelationMatrix": {
                        "description": "targetCorrelationMatrix[i][j] is the target correlation between the asset i and the asset j",
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "shrinkageFactor": {
                        "description": "The shrinkage factor",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    }
                  }
                ]
              },
              "examples": {
                "Shrinkage toward an equicorrelation matrix": {
                  "description": "Shrinkage toward the equicorrelation matrix made of 1",
                  "value": {
                    "assets": 3,
                    "assetsCorrelationMatrix": [
                      [
                        1,
                        0.5,
                        0.9
                      ],
                      [
                        0.5,
                        1,
                        0.7
                      ],
                      [
                        0.9,
                        0.7,
                        1
                      ]
                    ],
                    "targetEquicorrelationMatrix": "maximumEquicorrelationMatrix",
                    "shrinkageFactor": 0.5
                  }
                },
                "Shrinkage toward a provided correlation matrix": {
                  "description": "Shrinkage toward a provided correlation matrix, here the identity matrix",
                  "value": {
                    "assets": 3,
                    "assetsCorrelationMatrix": [
                      [
                        1,
                        0.5,
                        0.9
                      ],
                      [
                        0.5,
                        1,
                        0.7
                      ],
                      [
                        0.9,
                        0.7,
                        1
                      ]
                    ],
                    "targetCorrelationMatrix": [
                      [
                        1,
                        0,
                        0
                      ],
                      [
                        0,
                        1,
                        0
                      ],
                      [
                        0,
                        0,
                        1
                      ]
                    ],
                    "shrinkageFactor": 0.5
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsCorrelationMatrix"
                  ],
                  "properties": {
                    "assetsCorrelationMatrix": {
                      "description": "assetsCorrelationMatrix[i][j] is the correlation between the asset i and the asset j",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "number"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Shrinkage": {
                    "description": "Shrunk correlation matrix",
                    "value": {
                      "assetsCorrelationMatrix": [
                        [
                          1,
                          0.75,
                          0.95
                        ],
                        [
                          0.75,
                          1,
                          0.85
                        ],
                        [
                          0.95,
                          0.85,
                          1
                        ]
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/correlation/matrix/denoised": {
      "post": {
        "tags": [
          "Assets / Correlation Matrix"
        ],
        "summary": "Denoised Correlation Matrix",
        "description": "Compute a denoised asset correlation matrix, using one of the following methods:\n * The eigenvalues clipping method, described in the first reference, which is based on random matrix theory\n \n References\n * [Laurent Laloux, Pierre Cizeau, Jean-Philippe Bouchaud, and Marc Potters, Noise Dressing of Financial Correlation Matrices, Phys. Rev. Lett. 83, 1467](https://journals.aps.org/prl/abstract/10.1103/PhysRevLett.83.1467)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets",
                  "assetsCorrelationMatrix",
                  "assetsCorrelationMatrixAspectRatio"
                ],
                "properties": {
                  "assets": {
                    "type": "integer",
                    "minimum": 2
                  },
                  "assetsCorrelationMatrix": {
                    "description": "assetsCorrelationMatrix[i][j] is the correlation between the asset i and the asset j",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "assetsCorrelationMatrixAspectRatio": {
                    "description": "The aspect ratio of the asset correlation matrix, defined as the number of assets divided by the number of asset returns per asset used to compute the asset correlation matrix",
                    "type": "number",
                    "minimum": 0,
                    "exclusiveMinimum": true
                  },
                  "denoisingMethod": {
                    "description": "The method used to denoise the asset correlation matrix",
                    "type": "string",
                    "enum": [
                      "eigenvaluesClipping"
                    ],
                    "default": "eigenvaluesClipping"
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Denoise an asset correlation matrix of three assets",
                  "value": {
                    "assets": 3,
                    "assetsCorrelationMatrix": [
                      [
                        1,
                        0.5,
                        0.9
                      ],
                      [
                        0.5,
                        1,
                        0.7
                      ],
                      [
                        0.9,
                        0.7,
                        1
                      ]
                    ],
                    "assetsCorrelationMatrixAspectRatio": 0.5
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsCorrelationMatrix"
                  ],
                  "properties": {
                    "assetsCorrelationMatrix": {
                      "description": "assetsCorrelationMatrix[i][j] is the correlation between the asset i and the asset j; assetsCorrelationMatrix is possibly null in case the denoising method did not manage to denoise the provided asset correlation matrix",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "number"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Denoised correlation matrix",
                    "value": {
                      "assetsCorrelationMatrix": [
                        [
                          1,
                          0.6838346015086407,
                          0.7246659534718176
                        ],
                        [
                          0.6838346015086407,
                          1,
                          0.6978824315038066
                        ],
                        [
                          0.7246659534718176,
                          0.6978824315038066,
                          1
                        ]
                      ]
                    }
                  },
                  "Example of failing denoising method": {
                    "description": "No denoised correlation matrix",
                    "value": {
                      "assetsCorrelationMatrix": null
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/correlation/matrix/distance": {
      "post": {
        "tags": [
          "Assets / Correlation Matrix"
        ],
        "summary": "Correlation Matrix Distance",
        "description": "Compute the distance between an asset correlation matrix and a reference correlation matrix, using one of the following distance metrics:\n* Euclidean distance (default), which is the distance induced by [the Frobenius norm](https://en.wikipedia.org/wiki/Matrix_norm#Frobenius_norm)\n* Correlation matrix distance, defined in the first reference, which corresponds to [the cosine distance](https://en.wikipedia.org/wiki/Cosine_similarity) between the two vectorized asset correlation matrices\n* Bures distance, defined in the second reference\n\n References\n * [M. Herdin, N. Czink, H. Ozcelik and E. Bonek, Correlation matrix distance, a meaningful measure for evaluation of non-stationary MIMO channels, 2005 IEEE 61st Vehicular Technology Conference, 2005, pp. 136-140 Vol. 1](https://ieeexplore.ieee.org/document/1543265)\n * [Rajendra Bhatia, Tanvi Jain, Yongdo Lim, On the Bures\u2013Wasserstein distance between positive definite matrices, Expositiones Mathematicae, Volume 37, Issue 2, 2019](https://www.sciencedirect.com/science/article/pii/S0723086918300021)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "assets",
                  "assetsCorrelationMatrix",
                  "referenceCorrelationMatrix"
                ],
                "properties": {
                  "assets": {
                    "type": "integer",
                    "minimum": 2
                  },
                  "assetsCorrelationMatrix": {
                    "description": "assetsCorrelationMatrix[i][j] is the correlation between the asset i and the asset j",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "referenceCorrelationMatrix": {
                    "description": "referenceCorrelationMatrix[i][j] is the reference correlation between the asset i and the asset j",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "distanceMetric": {
                    "type": "string",
                    "description": "The distance metric to use to compute the distance between the asset correlation matrix and the reference correlation matrix",
                    "enum": [
                      "euclidean",
                      "correlationMatrix",
                      "bures"
                    ],
                    "default": "euclidean"
                  }
                }
              },
              "examples": {
                "Example (euclidean distance)": {
                  "description": "Compute the euclidean distance between an asset correlation matrix and an equicorrelation matrix",
                  "value": {
                    "assets": 3,
                    "assetsCorrelationMatrix": [
                      [
                        1,
                        0.5,
                        0.9
                      ],
                      [
                        0.5,
                        1,
                        0.7
                      ],
                      [
                        0.9,
                        0.7,
                        1
                      ]
                    ],
                    "referenceCorrelationMatrix": [
                      [
                        1,
                        1,
                        1
                      ],
                      [
                        1,
                        1,
                        1
                      ],
                      [
                        1,
                        1,
                        1
                      ]
                    ]
                  }
                },
                "Example (correlation matrix distance)": {
                  "description": "Compute the correlation matrix distance between an asset correlation matrix and an equicorrelation matrix",
                  "value": {
                    "assets": 3,
                    "assetsCorrelationMatrix": [
                      [
                        1,
                        0.5,
                        0.9
                      ],
                      [
                        0.5,
                        1,
                        0.7
                      ],
                      [
                        0.9,
                        0.7,
                        1
                      ]
                    ],
                    "referenceCorrelationMatrix": [
                      [
                        1,
                        1,
                        1
                      ],
                      [
                        1,
                        1,
                        1
                      ],
                      [
                        1,
                        1,
                        1
                      ]
                    ],
                    "distanceMetric": "correlationMatrix"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsCorrelationMatrixDistance"
                  ],
                  "properties": {
                    "assetsCorrelationMatrixDistance": {
                      "description": "The computed distance between the two correlation matrices",
                      "type": "number",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed distance",
                    "value": {
                      "assetsCorrelationMatrixDistance": 0.8366600265340757
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/correlation/matrix/informativeness": {
      "post": {
        "tags": [
          "Assets / Correlation Matrix"
        ],
        "summary": "Correlation Matrix Informativeness",
        "description": "Compute the informativeness of an asset correlation matrix, using one of the following distance metrics:\n* Euclidean distance (default), which is the distance induced by [the Frobenius norm](https://en.wikipedia.org/wiki/Matrix_norm#Frobenius_norm)\n* Correlation matrix distance, defined in the second reference, which corresponds to [the cosine distance](https://en.wikipedia.org/wiki/Cosine_similarity) between the two vectorized asset correlation matrices\n* Bures distance, defined in the third reference\n\n References\n * [Austin J. Brockmeier and Tingting Mu and Sophia Ananiadou and John Y. Goulermas, Quantifying the Informativeness of Similarity Measurements, Journal of Machine Learning Research, 2017](http://jmlr.org/papers/v18/16-296.html)\n * [M. Herdin, N. Czink, H. Ozcelik and E. Bonek, Correlation matrix distance, a meaningful measure for evaluation of non-stationary MIMO channels, 2005 IEEE 61st Vehicular Technology Conference, 2005, pp. 136-140 Vol. 1](https://ieeexplore.ieee.org/document/1543265)\n * [Rajendra Bhatia, Tanvi Jain, Yongdo Lim, On the Bures\u2013Wasserstein distance between positive definite matrices, Expositiones Mathematicae, Volume 37, Issue 2, 2019](https://www.sciencedirect.com/science/article/pii/S0723086918300021)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "assets",
                  "assetsCorrelationMatrix"
                ],
                "properties": {
                  "assets": {
                    "type": "integer",
                    "minimum": 2
                  },
                  "assetsCorrelationMatrix": {
                    "description": "assetsCorrelationMatrix[i][j] is the correlation between the asset i and the asset j",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "distanceMetric": {
                    "type": "string",
                    "description": "The distance metric to use to compute the informativeness of the asset correlation matrix",
                    "enum": [
                      "euclidean",
                      "correlationMatrix",
                      "bures"
                    ],
                    "default": "euclidean"
                  }
                }
              },
              "examples": {
                "Example (euclidean distance)": {
                  "description": "Compute the informativeness of an asset correlation matrix usingn the euclidean distance",
                  "value": {
                    "assets": 3,
                    "assetsCorrelationMatrix": [
                      [
                        1,
                        0.5,
                        0.9
                      ],
                      [
                        0.5,
                        1,
                        0.7
                      ],
                      [
                        0.9,
                        0.7,
                        1
                      ]
                    ]
                  }
                },
                "Example (Bures distance)": {
                  "description": "Compute the informativeness of an asset correlation matrix usingn the Bures distance",
                  "value": {
                    "assets": 3,
                    "assetsCorrelationMatrix": [
                      [
                        1,
                        0.5,
                        0.9
                      ],
                      [
                        0.5,
                        1,
                        0.7
                      ],
                      [
                        0.9,
                        0.7,
                        1
                      ]
                    ],
                    "distanceMetric": "bures"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsCorrelationMatrixInformativeness"
                  ],
                  "properties": {
                    "assetsCorrelationMatrixInformativeness": {
                      "description": "The informativeness of the asset correlation matrix",
                      "type": "number",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed informativeness",
                    "value": {
                      "assetsCorrelationMatrixInformativeness": 0.020539611658192996
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/correlation/matrix/bounds": {
      "post": {
        "tags": [
          "Assets / Correlation Matrix"
        ],
        "summary": "Correlation Matrix Bounds",
        "description": "Compute the lower bounds and the upper bounds of an asset correlation matrix associated to a selected group of assets, as described in the first reference.\n \n References\n * [Kawee Numpacharoen & Kornkanok Bunwong (2013) Boundaries of Correlation Adjustment with Applications to Financial Risk Management, Applied Mathematical Finance, 20:4, 403-414](http://dx.doi.org/10.1080/1350486X.2012.723517).\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "assets",
                  "assetsCorrelationMatrix",
                  "assetsGroup"
                ],
                "properties": {
                  "assets": {
                    "type": "integer",
                    "minimum": 2
                  },
                  "assetsCorrelationMatrix": {
                    "description": "assetsCorrelationMatrix[i][j] is the correlation between the asset i and the asset j",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "assetsGroup": {
                    "type": "array",
                    "description": "assetsGroup[k] is the index of the (k+1)-th asset belonging to the selected group of assets",
                    "minItems": 2,
                    "uniqueItems": true,
                    "items": {
                      "type": "integer",
                      "minimum": 1
                    }
                  }
                }
              },
              "examples": {
                "Example (bounds for two assets)": {
                  "description": "Compute the lower and upper bounds of a 4x4 correlation matrix associated to the group of the 2 last assets",
                  "value": {
                    "assets": 4,
                    "assetsCorrelationMatrix": [
                      [
                        1,
                        0.5,
                        0.5,
                        0
                      ],
                      [
                        0.5,
                        1,
                        0.5,
                        0.3
                      ],
                      [
                        0.5,
                        0.5,
                        1,
                        -0.1
                      ],
                      [
                        0,
                        0.3,
                        -0.1,
                        1
                      ]
                    ],
                    "assetsGroup": [
                      3,
                      4
                    ]
                  }
                },
                "Example (bounds for three assets)": {
                  "description": "Compute the lower and upper bounds of a 4x4 correlation matrix associated to the group of the 3 last assets",
                  "value": {
                    "assets": 4,
                    "assetsCorrelationMatrix": [
                      [
                        1,
                        -0.55,
                        -0.15,
                        -0.1
                      ],
                      [
                        -0.55,
                        1,
                        0.4,
                        0.3
                      ],
                      [
                        -0.15,
                        0.4,
                        1,
                        0.5
                      ],
                      [
                        -0.1,
                        0.3,
                        0.5,
                        1
                      ]
                    ],
                    "assetsGroup": [
                      2,
                      3,
                      4
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsCorrelationMatrixLowerBounds",
                    "assetsCorrelationMatrixUpperBounds"
                  ],
                  "properties": {
                    "assetsCorrelationMatrixLowerBounds": {
                      "description": "assetsCorrelationMatrixLowerBounds[i][j] is the lower bound of the correlation between the asset i and the asset j",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "number"
                        }
                      }
                    },
                    "assetsCorrelationMatrixUpperBounds": {
                      "description": "assetsCorrelationMatrixUpperBounds[i][j] is the upper bound of the correlation between the asset i and the asset j",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "number"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example (bounds for two assets)": {
                    "description": "Computed lower and upper bounds of a 4x4 correlation matrix associated to the group of the last two assets",
                    "value": {
                      "assetsCorrelationMatrixLowerBounds": [
                        [
                          1,
                          0.5,
                          0.5,
                          0
                        ],
                        [
                          0.5,
                          1,
                          0.5,
                          0.3
                        ],
                        [
                          0.5,
                          0.5,
                          1,
                          -0.6659
                        ],
                        [
                          0,
                          0.3,
                          -0.6659,
                          1
                        ]
                      ],
                      "assetsCorrelationMatrixUpperBounds": [
                        [
                          1,
                          0.5,
                          0.5,
                          0
                        ],
                        [
                          0.5,
                          1,
                          0.5,
                          0.3
                        ],
                        [
                          0.5,
                          0.5,
                          1,
                          0.8659
                        ],
                        [
                          0,
                          0.3,
                          0.8659,
                          1
                        ]
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/correlation/matrix/effective-rank": {
      "post": {
        "tags": [
          "Assets / Correlation Matrix"
        ],
        "summary": "Correlation Matrix Effective Rank",
        "description": "Compute the effective rank of an asset correlation matrix.\n\nReferences\n* [Olivier Roy and Martin Vetterli, The effective rank: A measure of effective dimensionality, 15th European Signal Processing Conference, 2007](https://ieeexplore.ieee.org/document/7098875)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "assets",
                  "assetsCorrelationMatrix"
                ],
                "properties": {
                  "assets": {
                    "type": "integer",
                    "description": "The number of assets",
                    "minimum": 2
                  },
                  "assetsCorrelationMatrix": {
                    "description": "assetsCorrelationMatrix[i][j] is the correlation between the asset i and the asset j",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number"
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute the effective rank of a correlation matrix of two assets",
                  "value": {
                    "assets": 2,
                    "assetsCorrelationMatrix": [
                      [
                        1,
                        0
                      ],
                      [
                        0,
                        1
                      ]
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsCorrelationMatrixEffectiveRank"
                  ],
                  "properties": {
                    "assetsCorrelationMatrixEffectiveRank": {
                      "description": "The effective rank of the asset correlation matrix",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "number"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed effective rank",
                    "value": {
                      "assetsCorrelationMatrixEffectiveRank": 2
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolios/simulation/random": {
      "post": {
        "tags": [
          "Portfolio Simulation"
        ],
        "summary": "Random Portfolio Simulation",
        "description": "Simulate random assets weights, optionally subject to: \n* Minimum and maximum number of assets constraint\n* Minimum and maximum weights constraints\n* Minimum and maximum group weights constraints\n* Minimum and maximum portfolio exposure constraints\n\n> Due to the nature of the endpoint, subsequent calls with the same input data will result in different output data.\n\nReferences\n* [Surz, R. J. 1994. Portfolio opportunity distributions: an innovation in performance evaluation. The Journal of Investing, 3(2): 36-41](https://www.pm-research.com/content/iijinvest/3/2/36)\n* [Burns, P. (2007). Random Portfolios for Performance Measurement. In: Kontoghiorghes, E.J., Gatu, C. (eds) Optimisation, Econometric and Financial Analysis. Advances in Computational Management Science, vol 9. Springer, Berlin, Heidelberg](https://link.springer.com/chapter/10.1007/3-540-36626-1_11)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets"
                ],
                "properties": {
                  "assets": {
                    "description": "The number of assets",
                    "type": "integer",
                    "minimum": 1
                  },
                  "simulations": {
                    "type": "integer",
                    "description": "The number of simulations to perform",
                    "minimum": 1,
                    "default": 1
                  },
                  "constraints": {
                    "type": "object",
                    "properties": {
                      "minimumAssets": {
                        "description": "The minimum number of assets present in the portfolio",
                        "type": "integer",
                        "minimum": 1
                      },
                      "maximumAssets": {
                        "description": "The maximum number of assets present in the portfolio",
                        "type": "integer",
                        "minimum": 1
                      },
                      "minimumAssetsWeights": {
                        "description": "minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "maximumAssetsWeights": {
                        "description": "maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "assetsGroups": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "array",
                          "description": "assetsGroups[k] is the indexes of the assets belonging to the assets group k in the portfolio; exclusive with assetsGroupsMatrix",
                          "minItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": "integer",
                            "minimum": 1
                          }
                        }
                      },
                      "assetsGroupsMatrix": {
                        "description": "assetsGroupsMatrix[k][i] is the weight of the asset i in the group of assets k; exclusive with assetsGroups",
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "maximumAssetsGroupsWeights": {
                        "description": "maximumAssetsGroupsWeights[k] is the maximum weight of the assets group k in the portfolio, in percentage between 0 and 1 if assetsGroups is provided",
                        "type": "array",
                        "items": {
                          "type": "number"
                        }
                      },
                      "minimumPortfolioExposure": {
                        "description": "The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1
                      },
                      "maximumPortfolioExposure": {
                        "description": "The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Simulate the asset weights of 2 random portfolios, each made of three assets",
                  "value": {
                    "assets": 3,
                    "simulations": 2
                  }
                },
                "Example (cardinality constraints)": {
                  "description": "Simulate the asset weights of 2 random portfolios, each made of 3 assets with a maximum of 2 assets present simultaneously",
                  "value": {
                    "assets": 3,
                    "simulations": 2,
                    "constraints": {
                      "minimumAssets": 1,
                      "maximumAssets": 2
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "simulations"
                  ],
                  "properties": {
                    "simulations": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "portfolios"
                        ],
                        "properties": {
                          "portfolios": {
                            "type": "array",
                            "minItems": 1,
                            "maxItems": 1,
                            "items": {
                              "type": "object",
                              "required": [
                                "assetsWeights"
                              ],
                              "properties": {
                                "assetsWeights": {
                                  "description": "assetsWeights[i] is the weight of the asset i in the portfolio, in percentage",
                                  "minItems": 1,
                                  "type": "array",
                                  "items": {
                                    "type": "number",
                                    "minimum": 0,
                                    "maximum": 1
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "2 simulated random portfolios, each made of three assets",
                    "value": {
                      "simulations": [
                        {
                          "portfolios": [
                            {
                              "assetsWeights": [
                                0.11429744284625785,
                                0.0038592674702259393,
                                0.8818432896835162
                              ]
                            }
                          ]
                        },
                        {
                          "portfolios": [
                            {
                              "assetsWeights": [
                                0.546026607601722,
                                0.07707923859010406,
                                0.376894153808174
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolios/simulation/evolution": {
      "post": {
        "tags": [
          "Portfolio Simulation"
        ],
        "summary": "Portfolio Evolution Simulation",
        "description": "Simulate the evolution of the value of a portfolio over time.\n\nReferences\n* [Robert D. Arnott, Robert D. Lovell, Rebalancing Why? When? How Often?, The Journal of Investing, Spring 1993, 2 (1) 5 - 10](https://www.pm-research.com/content/iijinvest/2/1/5)\n* [Gobind Daryanani, Opportunistic Rebalancing: A New Paradigm for Wealth Managers, Journal of Financial Planning, January 2008](https://www.financialplanningassociation.org/article/journal/JAN08-opportunistic-rebalancing-new-paradigm-wealth-managers)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets",
                  "portfolios"
                ],
                "properties": {
                  "assets": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "assetPrices"
                      ],
                      "properties": {
                        "assetPrices": {
                          "description": "assetPrices[t] is the price of the asset at the time t",
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number",
                            "minimum": 0,
                            "exclusiveMinimum": true
                          }
                        }
                      }
                    }
                  },
                  "portfolios": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "assetsWeights"
                      ],
                      "properties": {
                        "assetsWeights": {
                          "description": "assetsWeights[i] is the initial weight of the asset i in the portfolio, in percentage",
                          "type": "array",
                          "minItems": 1,
                          "items": {
                            "type": "number",
                            "minimum": 0,
                            "maximum": 1
                          }
                        },
                        "portfolioRebalancingMethod": {
                          "description": "The method used to rebalance the asset weights of the simulated portfolio at each time t",
                          "type": "string",
                          "enum": [
                            "noRebalancing",
                            "continuouRebalancing",
                            "thresholdRebalancing"
                          ],
                          "default": "noRebalancing"
                        },
                        "portfolioRebalancingThreshold": {
                          "description": "The threshold beyond which the asset weights of the simulated portfolio are rebalanced at each time t in case the portfolio rebalancing method is 'thresholdRebalancing', in percentage",
                          "type": "number",
                          "minimum": 0,
                          "default": 0
                        },
                        "portfolioRebalancingThresholdType": {
                          "description": "The type of the threshold beyond which the asset weights of the simulated portfolio are rebalanced at each time t in case the portfolio rebalancing method is 'thresholdRebalancing'",
                          "type": "string",
                          "enum": [
                            "absoluteThreshold",
                            "relativeThreshold",
                            "turnoverThreshold"
                          ],
                          "default": "absoluteThreshold"
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example (buy and hold)": {
                  "description": "Simulate the evolution of 3 buy and hold portfolios, each made of three assets with only one asset invested",
                  "value": {
                    "assets": [
                      {
                        "assetPrices": [
                          100,
                          105,
                          110
                        ]
                      },
                      {
                        "assetPrices": [
                          15,
                          12.5,
                          11.25
                        ]
                      },
                      {
                        "assetPrices": [
                          0.5,
                          0.51,
                          0.49
                        ]
                      }
                    ],
                    "portfolios": [
                      {
                        "assetsWeights": [
                          1,
                          0,
                          0
                        ]
                      },
                      {
                        "assetsWeights": [
                          0,
                          1,
                          0
                        ]
                      },
                      {
                        "assetsWeights": [
                          0,
                          0,
                          1
                        ]
                      }
                    ]
                  }
                },
                "Example (band-based rebalancing)": {
                  "description": "Simulate the evolution of 1 portfolio of three assets with a +/-5% band rebalancing strategy",
                  "value": {
                    "assets": [
                      {
                        "assetPrices": [
                          100,
                          105,
                          110
                        ]
                      },
                      {
                        "assetPrices": [
                          15,
                          12.5,
                          11.25
                        ]
                      },
                      {
                        "assetPrices": [
                          0.5,
                          0.51,
                          0.49
                        ]
                      }
                    ],
                    "portfolios": [
                      {
                        "assetsWeights": [
                          0.25,
                          0.25,
                          0.5
                        ],
                        "portfolioRebalancingMethod": "thresholdRebalancing",
                        "portfolioRebalancingThreshold": 0.05
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "simulations"
                  ],
                  "properties": {
                    "simulations": {
                      "type": "array",
                      "minItems": 1,
                      "maxItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "portfolios"
                        ],
                        "properties": {
                          "portfolios": {
                            "type": "array",
                            "minItems": 1,
                            "items": {
                              "type": "object",
                              "required": [
                                "portfolioValues"
                              ],
                              "properties": {
                                "portfolioValues": {
                                  "description": "portfolioValues[t] is the value of the portfolio at the time t",
                                  "type": "array",
                                  "items": {
                                    "type": "number",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Simulated portfolios over 2 time periods",
                    "value": {
                      "simulations": [
                        {
                          "portfolios": [
                            {
                              "portfolioValues": [
                                100,
                                105,
                                110
                              ]
                            },
                            {
                              "portfolioValues": [
                                100,
                                83.33333333333334,
                                75
                              ]
                            },
                            {
                              "portfolioValues": [
                                100,
                                102,
                                98
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolios/simulation/evolution/random": {
      "post": {
        "tags": [
          "Portfolio Simulation"
        ],
        "summary": "Random Portfolio Evolution Simulation",
        "description": "Simulate the evolution of the value of a random portfolio over time, with the asset weights of the random portfolio optionally subject to: \n* Minimum and maximum number of assets constraint\n* Minimum and maximum weights constraints\n* Minimum and maximum group weights constraints\n* Minimum and maximum portfolio exposure constraints\n\n> Due to the nature of the endpoint, subsequent calls with the same input data will result in different output data.\n\nReferences\n* [Surz, R. J. 1994. Portfolio opportunity distributions: an innovation in performance evaluation. The Journal of Investing, 3(2): 36-41](https://www.pm-research.com/content/iijinvest/3/2/36)\n* [Burns, P. (2007). Random Portfolios for Performance Measurement. In: Kontoghiorghes, E.J., Gatu, C. (eds) Optimisation, Econometric and Financial Analysis. Advances in Computational Management Science, vol 9. Springer, Berlin, Heidelberg](https://link.springer.com/chapter/10.1007/3-540-36626-1_11)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets"
                ],
                "properties": {
                  "assets": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "assetPrices"
                      ],
                      "properties": {
                        "assetPrices": {
                          "description": "assetPrices[t] is the price of the asset at the time t",
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number",
                            "minimum": 0,
                            "exclusiveMinimum": true
                          }
                        }
                      }
                    }
                  },
                  "simulations": {
                    "type": "integer",
                    "description": "The number of simulations to perform",
                    "minimum": 1,
                    "default": 1
                  },
                  "portfolioRebalancingMethod": {
                    "description": "The method used to rebalance the asset weights of the simulated portfolio at each time t",
                    "type": "string",
                    "enum": [
                      "noRebalancing",
                      "continuousRebalancing",
                      "randomRebalancing"
                    ],
                    "default": "noRebalancing"
                  },
                  "constraints": {
                    "type": "object",
                    "properties": {
                      "minimumAssets": {
                        "description": "The minimum number of assets present in the portfolio",
                        "type": "integer",
                        "minimum": 1
                      },
                      "maximumAssets": {
                        "description": "The maximum number of assets present in the portfolio",
                        "type": "integer",
                        "minimum": 1
                      },
                      "minimumAssetsWeights": {
                        "description": "minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "maximumAssetsWeights": {
                        "description": "maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "assetsGroups": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "array",
                          "description": "assetsGroups[k] is the indexes of the assets belonging to the assets group k in the portfolio; exclusive with assetsGroupsMatrix",
                          "minItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": "integer",
                            "minimum": 1
                          }
                        }
                      },
                      "assetsGroupsMatrix": {
                        "description": "assetsGroupsMatrix[k][i] is the weight of the asset i in the group of assets k; exclusive with assetsGroups",
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "maximumAssetsGroupsWeights": {
                        "description": "maximumAssetsGroupsWeights[k] is the maximum weight of the assets group k in the portfolio, in percentage between 0 and 1 if assetsGroups is provided",
                        "type": "array",
                        "items": {
                          "type": "number"
                        }
                      },
                      "minimumPortfolioExposure": {
                        "description": "The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1
                      },
                      "maximumPortfolioExposure": {
                        "description": "The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Simulate the evolution over time of 1 random portfolio made of 2 assets",
                  "value": {
                    "assets": [
                      {
                        "assetPrices": [
                          100,
                          95,
                          110
                        ]
                      },
                      {
                        "assetPrices": [
                          100,
                          105,
                          100
                        ]
                      }
                    ]
                  }
                },
                "Example (cardinality constraints)": {
                  "description": "Simulate the evolution over time of 1 random portfolio made of 3 assets but containing a maximum of 2 assets at any rebalance time",
                  "value": {
                    "assets": [
                      {
                        "assetPrices": [
                          100,
                          95,
                          110
                        ]
                      },
                      {
                        "assetPrices": [
                          100,
                          105,
                          100
                        ]
                      },
                      {
                        "assetPrices": [
                          100,
                          95,
                          99
                        ]
                      }
                    ],
                    "constraints": {
                      "minimumAssets": 1,
                      "maximumAssets": 2
                    },
                    "portfolioRebalancingMethod": "randomRebalancing"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "simulations"
                  ],
                  "properties": {
                    "simulations": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "portfolios"
                        ],
                        "properties": {
                          "portfolios": {
                            "type": "array",
                            "minItems": 1,
                            "maxItems": 1,
                            "items": {
                              "type": "object",
                              "required": [
                                "portfolioValues"
                              ],
                              "properties": {
                                "portfolioValues": {
                                  "description": "portfolioValues[t] is the value of the portfolio at the time t",
                                  "type": "array",
                                  "items": {
                                    "type": "number",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "2 simulated random portfolios, each made of three assets",
                    "value": {
                      "simulations": [
                        {
                          "portfolios": [
                            {
                              "portfolioValues": [
                                100,
                                101,
                                102
                              ]
                            }
                          ]
                        },
                        {
                          "portfolios": [
                            {
                              "portfolioValues": [
                                100,
                                99,
                                103
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolio/construction/investable": {
      "post": {
        "tags": [
          "Portfolio Construction"
        ],
        "summary": "Investable Portfolio",
        "description": "Compute an investable portfolio as close as possible, in terms of assets weights, to a desired portfolio, taking into account:\n* The desired assets weights\n* The desired assets groups weights\n* The desired maximum assets groups weights\n* The prices of the assets\n* The portfolio value\n* The requirement to purchase some assets by round lots or by odd lots\n* The possibility to purchase some assets by a fractional quantity of shares\n* The requirement to purchase a minimum number of shares, or a minimum monetary value, for some assets\n\nReferences\n* [Steiner, Andreas, Accuracy and Rounding in Portfolio Construction](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=2261131)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets",
                  "assetsPrices",
                  "portfolioValue"
                ],
                "properties": {
                  "assets": {
                    "description": "The number of assets",
                    "type": "integer",
                    "minimum": 2
                  },
                  "assetsWeights": {
                    "description": "assetsWeights[i] is the desired weight of the asset i in the portfolio, in percentage (can be null to indicate no specific desire)",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "number",
                      "minimum": 0,
                      "maximum": 1
                    }
                  },
                  "assetsGroups": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "array",
                      "description": "assetsGroups[k] is the indexes of the assets belonging to the assets group k in the portfolio; requires either assetsGroupsWeights or maximumAssetsGroupsWeights to be present",
                      "minItems": 2,
                      "uniqueItems": true,
                      "items": {
                        "type": "integer",
                        "minimum": 1
                      }
                    }
                  },
                  "assetsGroupsWeights": {
                    "description": "assetsGroupsWeights[i] is the desired weight of the assets group k in the portfolio, in percentage (can be null to indicate no specific desire); requires assetsGroups to be present",
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "number",
                      "minimum": 0,
                      "maximum": 1
                    }
                  },
                  "maximumAssetsGroupsWeights": {
                    "description": "maximumAssetsGroupsWeights[k] is the maximum desired weight of the assets group k in the portfolio, in percentage (can be null to indicate no specific desire); requires assetsGroups to be present",
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "number",
                      "minimum": 0,
                      "maximum": 1
                    }
                  },
                  "portfolioValue": {
                    "description": "The monetary value of the portfolio",
                    "type": "number",
                    "minimum": 0,
                    "exclusiveMinimum": true
                  },
                  "assetsPrices": {
                    "description": "assetsPrices[i] is the price of the asset i",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "number",
                      "minimum": 0,
                      "exclusiveMinimum": true
                    }
                  },
                  "assetsSizeLots": {
                    "description": "assetsSizeLots[i] is the number of shares by which it is required to purchase the asset i (usual values are 1 if the asset needs to be purchased share by share, 100 if the asset needs to be purchased by an integer multiple of 100 shares, and 1/1000000 - e.g. for Robinhood broker - if the asset can be purchased by fractional shares)",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "number",
                      "default": 1,
                      "minimum": 0,
                      "exclusiveMinimum": true
                    }
                  },
                  "assetsMinimumPositions": {
                    "description": "assetsMinimumPositions[i] is the minimum number of shares of the asset i that is required to purchase when the asset i is included in the portfolio (usual values are the same as for assetsSizeLots)",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "number",
                      "default": 1,
                      "minimum": 0,
                      "exclusiveMinimum": true
                    }
                  },
                  "assetsMinimumNotionalValues": {
                    "description": "assetsMinimumNotionalValues[i] is the minimum monetary value that the position in the asset i is required to represent when the asset i is included in the portfolio",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "number",
                      "default": 0,
                      "minimum": 0
                    }
                  }
                }
              },
              "examples": {
                "Example (no groups weights)": {
                  "description": "Construct an investable portfolio of 10,000$ made of three assets",
                  "value": {
                    "assets": 3,
                    "assetsPrices": [
                      10,
                      25,
                      500
                    ],
                    "assetsWeights": [
                      0.05,
                      0.6,
                      0.35
                    ],
                    "portfolioValue": 10000
                  }
                },
                "Example (groups weights)": {
                  "description": "Construct an investable portfolio of 10,000$ made of 4 assets with assets groups weights",
                  "value": {
                    "assets": 4,
                    "assetsPrices": [
                      10,
                      25,
                      100,
                      500
                    ],
                    "assetsWeights": [
                      0.2,
                      null,
                      null,
                      null
                    ],
                    "assetsGroups": [
                      [
                        1,
                        2
                      ],
                      [
                        3,
                        4
                      ]
                    ],
                    "assetsGroupsWeights": [
                      0.4,
                      0.4
                    ],
                    "portfolioValue": 10000
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsPositions",
                    "assetsWeights"
                  ],
                  "properties": {
                    "assetsPositions": {
                      "description": "assetsPositions[i] is the number of shares of the asset i in the portfolio",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number",
                        "minimum": 0
                      }
                    },
                    "assetsWeights": {
                      "description": "assetsWeights[i] is the weight of the asset i in the portfolio, in percentage",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    }
                  }
                },
                "examples": {
                  "Example (no groups weights)": {
                    "description": "Computed investable portfolio with three assets fully invested",
                    "value": {
                      "assetsPositions": [
                        50,
                        240,
                        7
                      ],
                      "assetsWeights": [
                        0.05,
                        0.6,
                        0.35
                      ]
                    }
                  },
                  "Example (groups weights)": {
                    "description": "Computed investable portfolio with 4 assets not fully invested",
                    "value": {
                      "assetsPositions": [
                        200,
                        80,
                        20,
                        4
                      ],
                      "assetsWeights": [
                        0.2,
                        0.2,
                        0.2,
                        0.2
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolios/post-optimization/rounding": {
      "post": {
        "tags": [
          "Portfolio Post-Optimization"
        ],
        "summary": "Portfolio Weights Rounding",
        "description": "Round the asset weights of a portfolio, optionally subject to:\n* Minimum and maximum weights constraints \n* Minimum and maximum group weights constraints\n* Minimum and maximum portfolio exposure constraints\n\nReferences\n* [M. Bomze, S. Gollowitzer, and E.A. Yildirim, Rounding on the unit simplex: Regular grids for global optimization, J. Global Optim. 59 (2014), pp. 243\u2013258](https://doi.org/10.1007/s10898-013-0126-2)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "portfolios"
                ],
                "properties": {
                  "portfolios": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "assets",
                        "assetsWeights"
                      ],
                      "properties": {
                        "assets": {
                          "description": "The number of assets",
                          "type": "integer",
                          "minimum": 2
                        },
                        "assetsWeights": {
                          "description": "assetsWeights[i] is the weight of the asset i in the portfolio, in percentage",
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        },
                        "constraints": {
                          "type": "object",
                          "properties": {
                            "minimumAssetsWeights": {
                              "description": "minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage",
                              "type": "array",
                              "items": {
                                "type": "number",
                                "minimum": 0,
                                "maximum": 1
                              }
                            },
                            "maximumAssetsWeights": {
                              "description": "maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage",
                              "type": "array",
                              "items": {
                                "type": "number",
                                "minimum": 0,
                                "maximum": 1
                              }
                            },
                            "assetsGroups": {
                              "type": "array",
                              "minItems": 1,
                              "items": {
                                "type": "array",
                                "description": "assetsGroups[k] is the indexes of the assets belonging to the assets group k in the portfolio; exclusive with assetsGroupsMatrix",
                                "minItems": 2,
                                "uniqueItems": true,
                                "items": {
                                  "type": "integer",
                                  "minimum": 1
                                }
                              }
                            },
                            "assetsGroupsMatrix": {
                              "description": "assetsGroupsMatrix[k][i] is the weight of the asset i in the group of assets k; exclusive with assetsGroups",
                              "type": "array",
                              "minItems": 1,
                              "items": {
                                "type": "array",
                                "minItems": 2,
                                "items": {
                                  "type": "number"
                                }
                              }
                            },
                            "maximumAssetsGroupsWeights": {
                              "description": "maximumAssetsGroupsWeights[k] is the maximum weight of the assets group k in the portfolio, in percentage between 0 and 1 if assetsGroups is provided",
                              "type": "array",
                              "items": {
                                "type": "number"
                              }
                            },
                            "minimumPortfolioExposure": {
                              "description": "The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure",
                              "type": "number",
                              "minimum": 0,
                              "maximum": 1,
                              "default": 1
                            },
                            "maximumPortfolioExposure": {
                              "description": "The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure",
                              "type": "number",
                              "minimum": 0,
                              "maximum": 1,
                              "default": 1
                            },
                            "portfolioWeightIncrement": {
                              "description": "The portfolio weight increment, that is, the minimum additional asset weight allowed in the portfolio, in percentage between 0 and 1",
                              "type": "number",
                              "minimum": 0,
                              "maximum": 1,
                              "exclusiveMaximum": true,
                              "default": 0.01
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example (default)": {
                  "description": "Round the asset weights of a three-asset portfolio, using increments of 1%",
                  "value": {
                    "portfolios": [
                      {
                        "assets": 3,
                        "assetsWeights": [
                          0.3333333333333333,
                          0,
                          0.6666666666666666
                        ]
                      }
                    ]
                  }
                },
                "Example (5% weight increments and maximum asset weights)": {
                  "description": "Round the asset weights of a three-asset portfolio, using increments of 5%, and additionally subject to maximum asset weights constraints",
                  "value": {
                    "portfolios": [
                      {
                        "assets": 3,
                        "assetsWeights": [
                          0.3333333333333333,
                          0,
                          0.6666666666666666
                        ],
                        "constraints": {
                          "portfolioWeightIncrement": 0.05,
                          "maximumAssetsWeights": [
                            0.5,
                            0.5,
                            0.5
                          ]
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "portfolios"
                  ],
                  "properties": {
                    "portfolios": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "assetsWeights"
                        ],
                        "properties": {
                          "assetsWeights": {
                            "description": "assetsWeights[i] is the weight of the asset i in the portfolio, in percentage",
                            "type": "array",
                            "minItems": 2,
                            "items": {
                              "type": "number",
                              "minimum": 0,
                              "maximum": 1
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed rounded weights for a portfolio of three assets, using increments of 1%",
                    "value": {
                      "portfolios": [
                        {
                          "assetsWeights": [
                            0.33,
                            0,
                            0.67
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolios/replication/index-tracking": {
      "post": {
        "tags": [
          "Portfolio Replication"
        ],
        "summary": "Index Tracking Portfolio",
        "description": "Construct a portfolio as close as possible, in terms of returns, to a benchmark, optionally subject to:\n* Minimum and maximum weights constraints\n* Minimum and maximum group weights constraints\n* Minimum and maximum portfolio exposure constraints\n\nReferences \n* Konstantinos Benidis, Yiyong Feng, Daniel P. Palomar, Optimization Methods for Financial Index Tracking: From Theory to Practice, now publishers Inc (7 juin 2018)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets",
                  "benchmarkReturns"
                ],
                "properties": {
                  "assets": {
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "object",
                      "required": [
                        "assetReturns"
                      ],
                      "properties": {
                        "assetReturns": {
                          "description": "assetReturns[t] is the return of the asset at the time t; all assetReturns arrays must have the same length",
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  },
                  "benchmarkReturns": {
                    "description": "benchmarkReturns[t] is the return of the benchmark at the time t; the benchmarkReturns array must have the same length as all the assetReturns arrays",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "number"
                    }
                  },
                  "constraints": {
                    "type": "object",
                    "properties": {
                      "minimumAssetsWeights": {
                        "description": "minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "maximumAssetsWeights": {
                        "description": "maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "assetsGroups": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "array",
                          "description": "assetsGroups[k] is the indexes of the assets belonging to the assets group k in the portfolio; exclusive with assetsGroupsMatrix",
                          "minItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": "integer",
                            "minimum": 1
                          }
                        }
                      },
                      "assetsGroupsMatrix": {
                        "description": "assetsGroupsMatrix[k][i] is the weight of the asset i in the group of assets k; exclusive with assetsGroups",
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "maximumAssetsGroupsWeights": {
                        "description": "maximumAssetsGroupsWeights[k] is the maximum weight of the assets group k in the portfolio, in percentage between 0 and 1 if assetsGroups is provided",
                        "type": "array",
                        "items": {
                          "type": "number"
                        }
                      },
                      "minimumPortfolioExposure": {
                        "description": "The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1
                      },
                      "maximumPortfolioExposure": {
                        "description": "The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Construct a portfolio mimicking a benchmark with null returns, using two assets with opposite returns",
                  "value": {
                    "assets": [
                      {
                        "assetReturns": [
                          0.01,
                          0.02,
                          0.03
                        ]
                      },
                      {
                        "assetReturns": [
                          -0.01,
                          -0.02,
                          -0.03
                        ]
                      }
                    ],
                    "benchmarkReturns": [
                      0,
                      0,
                      0
                    ]
                  }
                },
                "Example with group constraints": {
                  "description": "Construct a portfolio mimicking a benchmark using three assets and the constraint that the first two assets taken together cannot represent more than 35% of the portfolio",
                  "value": {
                    "assets": [
                      {
                        "assetReturns": [
                          0.01,
                          0.02,
                          0.03
                        ]
                      },
                      {
                        "assetReturns": [
                          -0.01,
                          0.04,
                          0.01
                        ]
                      },
                      {
                        "assetReturns": [
                          0.05,
                          -0.01,
                          0.0
                        ]
                      }
                    ],
                    "benchmarkReturns": [
                      0.02,
                      0.01,
                      0.06
                    ],
                    "constraints": {
                      "assetsGroups": [
                        [
                          1,
                          2
                        ]
                      ],
                      "maximumAssetsGroupsWeights": [
                        0.35
                      ]
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsWeights"
                  ],
                  "properties": {
                    "assetsWeights": {
                      "description": "assetsWeights[i] is the weight of the asset i in the portfolio, in percentage",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Constructed mimicking portfolio is invested equally in the two assets",
                    "value": {
                      "assetsWeights": [
                        0.5,
                        0.5
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolios/replication/index-tracking/sparse": {
      "post": {
        "tags": [
          "Portfolio Replication"
        ],
        "summary": "Sparse Index Tracking Portfolio",
        "description": "Construct a portfolio as close as possible, in terms of returns, to a benchmark, optionally subject to:\n* A maximum number of assets constraint\n* Minimum and maximum weights constraints\n* Minimum and maximum group weights constraints\n* Minimum and maximum portfolio exposure constraints\n\nReferences \n* Konstantinos Benidis, Yiyong Feng, Daniel P. Palomar, Optimization Methods for Financial Index Tracking: From Theory to Practice, now publishers Inc (7 juin 2018)\n* [Purity Mutunge and Dag Haugland. Minimizing the tracking error of cardinality constrained portfolios. Computers & Operations Research Volume 90, February 2018, Pages 33-41](https://doi.org/10.1016/j.cor.2017.09.002)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets",
                  "benchmarkReturns"
                ],
                "properties": {
                  "assets": {
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "object",
                      "required": [
                        "assetReturns"
                      ],
                      "properties": {
                        "assetReturns": {
                          "description": "assetReturns[t] is the return of the asset at the time t; all assetReturns arrays must have the same length",
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  },
                  "benchmarkReturns": {
                    "description": "benchmarkReturns[t] is the return of the benchmark at the time t; the benchmarkReturns array must have the same length as all the assetReturns arrays",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "number"
                    }
                  },
                  "constraints": {
                    "type": "object",
                    "properties": {
                      "maximumAssets": {
                        "description": "The maximum number of assets present in the portfolio",
                        "type": "integer",
                        "minimum": 1
                      },
                      "minimumAssetsWeights": {
                        "description": "minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "maximumAssetsWeights": {
                        "description": "maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "assetsGroups": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "array",
                          "description": "assetsGroups[k] is the indexes of the assets belonging to the assets group k in the portfolio; exclusive with assetsGroupsMatrix",
                          "minItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": "integer",
                            "minimum": 1
                          }
                        }
                      },
                      "assetsGroupsMatrix": {
                        "description": "assetsGroupsMatrix[k][i] is the weight of the asset i in the group of assets k; exclusive with assetsGroups",
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "maximumAssetsGroupsWeights": {
                        "description": "maximumAssetsGroupsWeights[k] is the maximum weight of the assets group k in the portfolio, in percentage between 0 and 1 if assetsGroups is provided",
                        "type": "array",
                        "items": {
                          "type": "number"
                        }
                      },
                      "minimumPortfolioExposure": {
                        "description": "The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1
                      },
                      "maximumPortfolioExposure": {
                        "description": "The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Construct a portfolio mimicking a benchmark with a maximum of two assets among 4 assets",
                  "value": {
                    "assets": [
                      {
                        "assetReturns": [
                          0.078129363,
                          0.03663478,
                          0.028787879,
                          0.031491869,
                          -0.019533386,
                          -0.042308288,
                          -0.062133001,
                          -0.103910104,
                          -0.027053038,
                          0.082179315,
                          0.004579357,
                          -0.049970429
                        ]
                      },
                      {
                        "assetReturns": [
                          0.05289784,
                          0.065017266,
                          0.028012939,
                          -0.019089773,
                          0.025592817,
                          -0.03893898,
                          0.026564726,
                          -0.07927768,
                          -0.033253707,
                          0.090633334,
                          0.04075,
                          -0.044859476
                        ]
                      },
                      {
                        "assetReturns": [
                          0.055323183,
                          0.065000264,
                          0.027985908,
                          -0.019018198,
                          0.025635979,
                          -0.038860104,
                          0.026504942,
                          -0.079552638,
                          -0.033599239,
                          0.090526431,
                          0.041004562,
                          -0.044589974
                        ]
                      },
                      {
                        "assetReturns": [
                          0.078085397,
                          0.036893028,
                          0.02912706,
                          0.031861707,
                          -0.019134434,
                          -0.041778299,
                          -0.0617737,
                          -0.103650587,
                          -0.026909091,
                          0.082105488,
                          0.005130735,
                          -0.049278492
                        ]
                      }
                    ],
                    "benchmarkReturns": [
                      0.055518502,
                      0.062009871,
                      0.028003081,
                      -0.013945023,
                      0.020509392,
                      -0.03935567,
                      0.017029792,
                      -0.081809115,
                      -0.032750097,
                      0.089738414,
                      0.037148934,
                      -0.045498531
                    ],
                    "constraints": {
                      "maximumAssets": 2
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsWeights"
                  ],
                  "properties": {
                    "assetsWeights": {
                      "description": "assetsWeights[i] is the weight of the asset i in the portfolio, in percentage",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Constructed mimicking portfolio invested in two assets among 4",
                    "value": {
                      "assetsWeights": [
                        0.1085697099856619,
                        0.891430290014338,
                        0,
                        0
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolios/analysis/factors/exposures": {
      "post": {
        "tags": [
          "Portfolio Analysis"
        ],
        "summary": "Factor Exposures",
        "description": "Compute the exposures of a portfolio to a set of factors, using a returns-based linear regression analysis.\n\nReferences\n* [Measuring Factor Exposures: Uses and Abuses, Ronen Israel and Adrienne Ross, The Journal of Alternative Investments Summer 2017, 20 (1) 10-25](https://jai.pm-research.com/content/20/1/10.short) \n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "factors",
                      "portfolios"
                    ],
                    "properties": {
                      "factors": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "required": [
                            "factorReturns"
                          ],
                          "properties": {
                            "factorReturns": {
                              "description": "factorReturns[t] is the return of the factor at the time t; all the factorReturns arrays must have the same length, equal to the common length of the portfolioReturns arrays",
                              "type": "array",
                              "minItems": 2,
                              "items": {
                                "type": "number"
                              }
                            }
                          }
                        }
                      },
                      "portfolios": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "required": [
                            "portfolioReturns"
                          ],
                          "properties": {
                            "portfolioReturns": {
                              "description": "portfolioReturns[t] is the return of the portfolio at the time t; all the portfolioReturns arrays must have the same length, equal to the common length of the factorReturns arrays",
                              "type": "array",
                              "minItems": 2,
                              "items": {
                                "type": "number"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": [
                      "factors",
                      "portfolios"
                    ],
                    "properties": {
                      "factors": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "required": [
                            "factorReturns"
                          ],
                          "properties": {
                            "factorReturns": {
                              "description": "factorReturns[t] is the return of the factor at the time t",
                              "type": "array",
                              "minItems": 2,
                              "items": {
                                "type": "object",
                                "required": [
                                  "date",
                                  "return"
                                ],
                                "properties": {
                                  "date": {
                                    "type": "string",
                                    "description": "The date corresponding to the date t in format YYYY-MM-DD; all dates must be distinct"
                                  },
                                  "return": {
                                    "type": "number",
                                    "description": "The return of the factor at the date t"
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "portfolios": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "required": [
                            "portfolioReturns"
                          ],
                          "properties": {
                            "portfolioReturns": {
                              "description": "portfolioReturns[t] is the return of the portfolio at the time t",
                              "type": "array",
                              "minItems": 2,
                              "items": {
                                "type": "object",
                                "required": [
                                  "date",
                                  "return"
                                ],
                                "properties": {
                                  "date": {
                                    "type": "string",
                                    "description": "The date corresponding to the date t in format YYYY-MM-DD; all dates must be distinct"
                                  },
                                  "return": {
                                    "type": "number",
                                    "description": "The return of the portfolio at the date t; only used in the regression analysis if the return's date is present in all the factorReturns arrays"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": [
                      "factorModelRegion",
                      "factorModel",
                      "portfolios"
                    ],
                    "properties": {
                      "factorModel": {
                        "description": "The factor model to use, within the region specified in factorModelRegion; not all factor models are available in all regions",
                        "type": "string",
                        "enum": [
                          "capmFactorModel",
                          "famaFrenchThreeFactorModel",
                          "famaFrenchCarhartFourFactorModel",
                          "famaFrenchFiveFactorModel"
                        ]
                      },
                      "factorModelRegion": {
                        "description": "The region of the factor model specified in factorModel",
                        "type": "string",
                        "enum": [
                          "us",
                          "developedMarkets",
                          "emergingMarkets"
                        ]
                      },
                      "portfolios": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "required": [
                            "portfolioReturns"
                          ],
                          "properties": {
                            "portfolioReturns": {
                              "description": "portfolioReturns[t] is the return of the portfolio at the time t",
                              "type": "array",
                              "minItems": 2,
                              "items": {
                                "type": "object",
                                "required": [
                                  "date",
                                  "return"
                                ],
                                "properties": {
                                  "date": {
                                    "type": "string",
                                    "description": "The date corresponding to the date t in format YYYY-MM-DD"
                                  },
                                  "return": {
                                    "type": "number",
                                    "description": "The return of the portfolio at the date t; only used in the regression analysis if the return's date is present in all the internal factor model factors"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                ]
              },
              "examples": {
                "Example (provided factor returns, all returns as numbers)": {
                  "description": "Compute the exposures of one portfolio to two factors",
                  "value": {
                    "factors": [
                      {
                        "factorReturns": [
                          -0.00414169934,
                          0.01201656108,
                          0.0087181369
                        ]
                      },
                      {
                        "factorReturns": [
                          -0.01387258782,
                          -0.01097961581,
                          0.01742002062
                        ]
                      }
                    ],
                    "portfolios": [
                      {
                        "portfolioReturns": [
                          -0.04302,
                          0.01310372213,
                          0.06482589323
                        ]
                      }
                    ]
                  }
                },
                "Example (internal factor model returns, portfolio returns as objects)": {
                  "description": "Compute the exposures of one portfolio to the internal one-factor U.S. CAPM model",
                  "value": {
                    "factorModel": "capmFactorModel",
                    "factorModelRegion": "us",
                    "portfolios": [
                      {
                        "portfolioReturns": [
                          {
                            "date": "2019-12-31",
                            "return": 0.003
                          },
                          {
                            "date": "2020-01-31",
                            "return": 0.026
                          },
                          {
                            "date": "2020-02-29",
                            "return": 0.011
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "required": [
                        "portfolios"
                      ],
                      "properties": {
                        "portfolios": {
                          "type": "array",
                          "minItems": 1,
                          "items": {
                            "type": "object",
                            "required": [
                              "portfolioAlpha",
                              "portfolioBetas",
                              "portfolioRSquared"
                            ],
                            "properties": {
                              "portfolioAlpha": {
                                "description": "The portfolio alpha, which correponds to the portion of the portfolio returns that cannot be explained by the portfolio factor exposures",
                                "type": "number"
                              },
                              "portfolioBetas": {
                                "description": "The portfolio betas, which correspond to the portfolio factor exposures",
                                "type": "array",
                                "minItems": 1,
                                "items": {
                                  "type": "number"
                                }
                              },
                              "portfolioRSquared": {
                                "description": "The portfolio R^2, which indicates how much of the variability in the portfolio returns can be explained by the portfolio factor exposures; generally, the higher the R^2 the better the portfolio factor exposures explain the portfolio returns",
                                "type": "number"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": [
                        "portfolios"
                      ],
                      "properties": {
                        "portfolios": {
                          "type": "array",
                          "minItems": 1,
                          "items": {
                            "type": "object",
                            "required": [
                              "portfolioAlpha",
                              "portfolioBetas",
                              "portfolioRSquared",
                              "portfolioReturns",
                              "portfolioReturnsDates"
                            ],
                            "properties": {
                              "portfolioAlpha": {
                                "description": "The portfolio alpha, which correponds to the portion of the portfolio returns that cannot be explained by the portfolio factor exposures",
                                "type": "number"
                              },
                              "portfolioBetas": {
                                "description": "The portfolio betas, which correspond to the portfolio factor exposures",
                                "type": "array",
                                "minItems": 1,
                                "items": {
                                  "type": "number"
                                }
                              },
                              "portfolioRSquared": {
                                "description": "The portfolio R^2, which indicates how much of the variability in the portfolio returns can be explained by the portfolio factor exposures; generally, the higher the R^2 the better the portfolio factor exposures explain the portfolio returns",
                                "type": "number"
                              },
                              "portfolioReturns": {
                                "description": "The number of portfolio returns used in the regression analysis",
                                "type": "number"
                              },
                              "portfolioReturnsDates": {
                                "type": "object",
                                "description": "The oldest and latest dates of the portfolio returns used in the regression analysis",
                                "required": [
                                  "earliestPortfolioReturnDate",
                                  "latestPortfolioReturnDate"
                                ],
                                "properties": {
                                  "earliestPortfolioReturnDate": {
                                    "type": "string",
                                    "description": "The date of the earliest portfolio return used in the regression analysis, in format YYYY-MM-DD"
                                  },
                                  "latestPortfolioReturnDate": {
                                    "type": "string",
                                    "description": "The date of the most recent portfolio return used in the regression analysis, in format YYYY-MM-DD"
                                  }
                                }
                              },
                              "portfolioFactorsNames": {
                                "type": "array",
                                "description": "The names of the the factors used in the regression analysis, in case of an internal factor model",
                                "minItems": 1,
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "Example (provided factor returns, all returns as numbers)": {
                    "description": "Computed exposures of one portfolio to two factors",
                    "value": {
                      "portfolios": [
                        {
                          "portfolioAlpha": -1.7563172006410804e-05,
                          "portfolioBetas": [
                            3.083191766752847,
                            2.17931822921701
                          ],
                          "portfolioRSquared": 1
                        }
                      ]
                    }
                  },
                  "Example (internal factor model returns, portfolio returns as objects)": {
                    "description": "Computed exposures of one portfolio to the internal one-factor U.S. CAPM model",
                    "value": {
                      "portfolios": [
                        {
                          "portfolioAlpha": -1.7563172006410804e-05,
                          "portfolioBetas": [
                            3.083191766752847
                          ],
                          "portfolioRSquared": 1,
                          "portfolioFactorsNames": [
                            "MKT-RF"
                          ],
                          "portfolioReturns": 3,
                          "portfolioReturnsDates": {
                            "earliestPortfolioReturnDate": "2019-12-31",
                            "latestPortfolioReturnDate": "2020-02-29"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolio/analysis/effective-number-of-bets": {
      "post": {
        "tags": [
          "Portfolio Analysis"
        ],
        "summary": "Effective Number of Bets",
        "description": "Compute the effective number of bets of one or several portfolio(s).\n\nReferences\n* [Meucci, Attilio and Santangelo, Alberto and Deguest, Romain, Risk Budgeting and Diversification Based on Optimized Uncorrelated Factors (November 10, 2015)](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=2276632)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets",
                  "assetsCovarianceMatrix",
                  "portfolios"
                ],
                "properties": {
                  "assets": {
                    "description": "The number of assets",
                    "type": "integer",
                    "minimum": 2
                  },
                  "assetsCovarianceMatrix": {
                    "description": "assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "factorsComputationMethod": {
                    "description": "The method used to compute the uncorrelated risk factors from the asset covariance matrix",
                    "type": "string",
                    "enum": [
                      "principalComponentAnalysis",
                      "exactMinimumLinearTorsion",
                      "approximateMinimumLinearTorsion"
                    ],
                    "default": "exactMinimumLinearTorsion"
                  },
                  "portfolios": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "assetsWeights"
                      ],
                      "properties": {
                        "assetsWeights": {
                          "description": "assetsWeights[i] is the weight of the asset i in the portfolio, in percentage",
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute the effective number of bets of a portfolio made of three assets",
                  "value": {
                    "assets": 3,
                    "assetsCovarianceMatrix": [
                      [
                        1,
                        0,
                        0
                      ],
                      [
                        0,
                        286.31,
                        100.79
                      ],
                      [
                        0,
                        100.79,
                        601.36
                      ]
                    ],
                    "portfolios": [
                      {
                        "assetsWeights": [
                          10.96,
                          1.06,
                          0.22
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "portfolios"
                  ],
                  "properties": {
                    "portfolios": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "portfolioEffectiveNumberOfBets"
                        ],
                        "properties": {
                          "portfolioEffectiveNumberOfBets": {
                            "description": "The effective number of bets of the portfolio",
                            "type": "number",
                            "minimum": 0
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed effective number of bets of a portfolio of three assets",
                    "value": {
                      "portfolios": [
                        {
                          "portfolioEffectiveNumberOfBets": 2.3564325389900276
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolios/analysis/alpha": {
      "post": {
        "tags": [
          "Portfolio Analysis"
        ],
        "summary": "Jensen's Alpha",
        "description": "Compute the Jensen\u2019s alpha of a portfolio in the Capital Asset Pricing Model (CAPM).\n\nReferences\n* [Jensen, Michael C., The Performance of Mutual Funds in the Period 1945-1964 (May 1, 1967). Journal of Finance, Vol. 23, No. 2, pp. 389-416, 1967](https://onlinelibrary.wiley.com/doi/full/10.1111/j.1540-6261.1968.tb00815.x)\n* Carl R. Bacon, Practical Portfolio Performance Measurement and Attribution  \n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "benchmarkReturns",
                  "portfolios"
                ],
                "properties": {
                  "benchmarkReturns": {
                    "description": "benchmarkReturns[t] is the return of the benchmark at the time t; the benchmarkReturns array must have the same length as all the portfolioReturns arrays",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "number"
                    }
                  },
                  "portfolios": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "portfolioReturns"
                      ],
                      "properties": {
                        "portfolioReturns": {
                          "description": "portfolioReturns[t] is the return of the portfolio at the time t, all the portfolioReturns arrays must have the same length, equal to the length of the benchmarkReturns array",
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  },
                  "riskFreeRate": {
                    "description": "The risk free rate, assumed to be constant for any time t; exclusive with riskFreeReturns",
                    "type": "number",
                    "default": 0
                  },
                  "riskFreeReturns": {
                    "description": "riskFreeReturns[t] is the risk free return at the time t; the riskFreeReturns array must have the same length as all the portfolioReturns arrays; exclusive with riskFreeRate",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "number"
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute the Jensen\u2019s alpha of one portfolio",
                  "value": {
                    "benchmarkReturns": [
                      0.002,
                      0.025,
                      0.018,
                      -0.011,
                      0.014
                    ],
                    "riskFreeRate": 0.01,
                    "portfolios": [
                      {
                        "portfolioReturns": [
                          0.003,
                          0.026,
                          0.011,
                          -0.01,
                          0.015
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "portfolios"
                  ],
                  "properties": {
                    "portfolios": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "portfolioAlpha"
                        ],
                        "properties": {
                          "portfolioAlpha": {
                            "description": "The portfolio Jensen's alpha, which correponds to the portfolio excess return adjusted for the systematic risk in the Capital Asset Pricing Model (CAPM)",
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed Jensen's alpha of one portfolio",
                    "value": {
                      "portfolios": [
                        {
                          "portfolioAlpha": -0.0006332179930795853
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolios/analysis/beta": {
      "post": {
        "tags": [
          "Portfolio Analysis"
        ],
        "summary": "Beta",
        "description": "Compute the beta of a portfolio in the Capital Asset Pricing Model (CAPM).\n\nReferences\n* [Jensen, Michael C., The Performance of Mutual Funds in the Period 1945-1964 (May 1, 1967). Journal of Finance, Vol. 23, No. 2, pp. 389-416, 1967](https://onlinelibrary.wiley.com/doi/full/10.1111/j.1540-6261.1968.tb00815.x)\n* Carl R. Bacon, Practical Portfolio Performance Measurement and Attribution  \n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "benchmarkReturns",
                  "portfolios"
                ],
                "properties": {
                  "benchmarkReturns": {
                    "description": "benchmarkReturns[t] is the return of the benchmark at the time t; the benchmarkReturns array must have the same length as all the portfolioReturns arrays",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "number"
                    }
                  },
                  "portfolios": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "portfolioReturns"
                      ],
                      "properties": {
                        "portfolioReturns": {
                          "description": "portfolioReturns[t] is the return of the portfolio at the time t, all the portfolioReturns arrays must have the same length, equal to the length of the benchmarkReturns array",
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  },
                  "riskFreeRate": {
                    "description": "The risk free rate, assumed to be constant for any time t; exclusive with riskFreeReturns",
                    "type": "number",
                    "default": 0
                  },
                  "riskFreeReturns": {
                    "description": "riskFreeReturns[t] is the risk free return at the time t; the riskFreeReturns array must have the same length as all the portfolioReturns arrays; exclusive with riskFreeRate",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "number"
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute the beta of one portfolio",
                  "value": {
                    "benchmarkReturns": [
                      0.002,
                      0.025,
                      0.018,
                      -0.011,
                      0.014
                    ],
                    "riskFreeRate": 0.01,
                    "portfolios": [
                      {
                        "portfolioReturns": [
                          0.003,
                          0.026,
                          0.011,
                          -0.01,
                          0.015
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "portfolios"
                  ],
                  "properties": {
                    "portfolios": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "portfolioBeta"
                        ],
                        "properties": {
                          "portfolioBeta": {
                            "description": "The portfolio beta, which correponds to the portfolio systematic risk in the Capital Asset Pricing Model (CAPM)",
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed beta of one portfolio",
                    "value": {
                      "portfolios": [
                        {
                          "portfolioBeta": 0.9169550173010382
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolios/analysis/tracking-error-variance": {
      "post": {
        "tags": [
          "Portfolio Analysis"
        ],
        "summary": "Tracking Error Variance",
        "description": "Compute the tracking error variance between a benchmark and one or several portfolio(s) from either:\n* Portfolio assets arithmetic returns and benchmark arithmetic returns\n* Portfolio arithmetic returns and benchmark arithmetic returns\n\nReferences\n* Carl R. Bacon, Practical Portfolio Performance Measurement and Attribution \n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "benchmarkReturns",
                      "assets",
                      "portfolios"
                    ],
                    "properties": {
                      "benchmarkReturns": {
                        "description": "benchmarkReturns[t] is the arithmetic return of the benchmark at the time t; the benchmarkReturns array must have the same length as all the portfolioReturns arrays and all the assetReturns arrays",
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "number"
                        }
                      },
                      "assets": {
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "object",
                          "required": [
                            "assetReturns"
                          ],
                          "properties": {
                            "assetReturns": {
                              "description": "assetReturns[t] is the arithmetic return of the asset at the time t; all assetReturns arrays must have the same length; all assetReturns arrays must have the same length as the benchmarkReturns array",
                              "type": "array",
                              "minItems": 2,
                              "items": {
                                "type": "number"
                              }
                            }
                          }
                        }
                      },
                      "portfolios": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "required": [
                            "assetsWeights"
                          ],
                          "properties": {
                            "assetsWeights": {
                              "description": "assetsWeights[i] is the weight of the asset i in the portfolio, in percentage; all the assetsWeights arrays must have the same length as the assets array",
                              "type": "array",
                              "minItems": 1,
                              "items": {
                                "type": "number"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": [
                      "benchmarkReturns",
                      "portfolios"
                    ],
                    "properties": {
                      "benchmarkReturns": {
                        "description": "benchmarkReturns[t] is the arithmetic return of the benchmark at the time t; the benchmarkReturns array must have the same length as all the portfolioReturns arrays",
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "number"
                        }
                      },
                      "portfolios": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "required": [
                            "portfolioReturns"
                          ],
                          "properties": {
                            "portfolioReturns": {
                              "description": "portfolioReturns[t] is the arithmetic return of the portfolio at the time t; all the portfolioReturns arrays must have the same length as the benchmarkReturns array",
                              "type": "array",
                              "minItems": 2,
                              "items": {
                                "type": "number"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                ]
              },
              "examples": {
                "Example": {
                  "description": "Computes the tracking error variance using the example in Bacon's book",
                  "value": {
                    "benchmarkReturns": [
                      0.002,
                      0.025,
                      0.018,
                      -0.011,
                      0.014,
                      0.018,
                      0.014,
                      0.065,
                      -0.015,
                      0.042,
                      -0.006,
                      0.083,
                      0.039,
                      -0.038,
                      -0.062,
                      0.015,
                      -0.048,
                      0.021,
                      0.06,
                      0.056,
                      -0.067,
                      0.019,
                      -0.003,
                      0
                    ],
                    "portfolios": [
                      {
                        "portfolioReturns": [
                          0.003,
                          0.026,
                          0.011,
                          -0.01,
                          0.015,
                          0.025,
                          0.016,
                          0.067,
                          -0.014,
                          0.04,
                          -0.005,
                          0.081,
                          0.04,
                          -0.037,
                          -0.061,
                          0.017,
                          -0.049,
                          -0.022,
                          0.07,
                          0.058,
                          -0.065,
                          0.024,
                          -0.005,
                          -0.009
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "portfolios"
                  ],
                  "properties": {
                    "portfolios": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "portfolioTrackingErrorVariance"
                        ],
                        "properties": {
                          "portfolioTrackingErrorVariance": {
                            "description": "The tracking error variance of the portfolio",
                            "type": "number",
                            "minimum": 0
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "The computed tracking error variance using the example in Bacon's book",
                    "value": {
                      "portfolios": [
                        {
                          "portfolioTrackingErrorVariance": 9.037326e-05
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolios/analysis/empirical-tracking-error": {
      "post": {
        "tags": [
          "Portfolio Analysis"
        ],
        "summary": "Empirical Tracking Error",
        "description": "Compute the empirical tracking error between a benchmark and one or several portfolio(s) from either:\n* Portfolio assets arithmetic returns and benchmark arithmetic returns\n* Portfolio arithmetic returns and benchmark arithmetic returns\n\nReferences\n* [Konstantinos Benidis; Yiyong Feng; Daniel P. Palomar, Optimization Methods for Financial Index Tracking: From Theory to Practice , now, 2018.](https://ieeexplore.ieee.org/document/8384194)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "benchmarkReturns",
                      "assets",
                      "portfolios"
                    ],
                    "properties": {
                      "benchmarkReturns": {
                        "description": "benchmarkReturns[t] is the arithmetic return of the benchmark at the time t; the benchmarkReturns array must have the same length as all the portfolioReturns arrays and all the assetReturns arrays",
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "number"
                        }
                      },
                      "assets": {
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "object",
                          "required": [
                            "assetReturns"
                          ],
                          "properties": {
                            "assetReturns": {
                              "description": "assetReturns[t] is the arithmetic return of the asset at the time t; all assetReturns arrays must have the same length; all assetReturns arrays must have the same length as the benchmarkReturns array",
                              "type": "array",
                              "minItems": 2,
                              "items": {
                                "type": "number"
                              }
                            }
                          }
                        }
                      },
                      "portfolios": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "required": [
                            "assetsWeights"
                          ],
                          "properties": {
                            "assetsWeights": {
                              "description": "assetsWeights[i] is the weight of the asset i in the portfolio, in percentage; all the assetsWeights arrays must have the same length as the assets array",
                              "type": "array",
                              "minItems": 1,
                              "items": {
                                "type": "number"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": [
                      "benchmarkReturns",
                      "portfolios"
                    ],
                    "properties": {
                      "benchmarkReturns": {
                        "description": "benchmarkReturns[t] is the arithmetic return of the benchmark at the time t; the benchmarkReturns array must have the same length as all the portfolioReturns arrays",
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "number"
                        }
                      },
                      "portfolios": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "required": [
                            "portfolioReturns"
                          ],
                          "properties": {
                            "portfolioReturns": {
                              "description": "portfolioReturns[t] is the arithmetic return of the portfolio at the time t; all the portfolioReturns arrays must have the same length as the benchmarkReturns array",
                              "type": "array",
                              "minItems": 2,
                              "items": {
                                "type": "number"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                ]
              },
              "examples": {
                "Example": {
                  "description": "Computes the tracking error using the example in Bacon's book",
                  "value": {
                    "benchmarkReturns": [
                      0.002,
                      0.025,
                      0.018,
                      -0.011,
                      0.014,
                      0.018,
                      0.014,
                      0.065,
                      -0.015,
                      0.042,
                      -0.006,
                      0.083,
                      0.039,
                      -0.038,
                      -0.062,
                      0.015,
                      -0.048,
                      0.021,
                      0.06,
                      0.056,
                      -0.067,
                      0.019,
                      -0.003,
                      0
                    ],
                    "portfolios": [
                      {
                        "portfolioReturns": [
                          0.003,
                          0.026,
                          0.011,
                          -0.01,
                          0.015,
                          0.025,
                          0.016,
                          0.067,
                          -0.014,
                          0.04,
                          -0.005,
                          0.081,
                          0.04,
                          -0.037,
                          -0.061,
                          0.017,
                          -0.049,
                          -0.022,
                          0.07,
                          0.058,
                          -0.065,
                          0.024,
                          -0.005,
                          -0.009
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "portfolios"
                  ],
                  "properties": {
                    "portfolios": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "portfolioEmpiricalTrackingError"
                        ],
                        "properties": {
                          "portfolioEmpiricalTrackingError": {
                            "description": "The empirical tracking error of the portfolio v.s. the benchmark",
                            "type": "number",
                            "minimum": 0
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "The computed empirical tracking error using the example in Bacon's book",
                    "value": {
                      "portfolios": [
                        {
                          "portfolioEmpiricalTrackingError": 9.14583333e-05
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolio/analysis/drawdowns": {
      "post": {
        "tags": [
          "Portfolio Analysis"
        ],
        "summary": "Drawdowns",
        "description": "Compute the drawdown function - also called the underwater equity curve -, as well as the worst 10 drawdowns of one or several portfolio(s).\n\nReferences\n* [Wikipedia, Drawdown](https://en.wikipedia.org/wiki/Drawdown_(economics))        \n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "portfolios"
                ],
                "properties": {
                  "portfolios": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "portfolioValues"
                      ],
                      "properties": {
                        "portfolioValues": {
                          "description": "portfolioValues[t] is the value of the portfolio at the time t",
                          "type": "array",
                          "items": {
                            "type": "number",
                            "minimum": 0,
                            "exclusiveMinimum": true
                          }
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Computes the drawdown (underwater) curve and the worst 10 drawdowns of a portfolio",
                  "value": {
                    "portfolios": [
                      {
                        "portfolioValues": [
                          100,
                          95,
                          100,
                          90,
                          85,
                          70
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "portfolios"
                  ],
                  "properties": {
                    "portfolios": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "portfolioDrawdowns",
                          "portfolioWorstDrawdowns"
                        ],
                        "properties": {
                          "portfolioDrawdowns": {
                            "description": "portfolioDrawdowns[t] is the value of the drawdown function at the time t",
                            "type": "array",
                            "minItems": 1,
                            "items": {
                              "type": "number",
                              "minimum": 0
                            }
                          },
                          "portfolioWorstDrawdowns": {
                            "type": "array",
                            "minItems": 1,
                            "items": {
                              "type": "object",
                              "required": [
                                "drawdownDepth",
                                "drawdownStart",
                                "drawdownBottom",
                                "drawdownEnd"
                              ],
                              "properties": {
                                "drawdownDepth": {
                                  "type": "number",
                                  "minimum": 0
                                },
                                "drawdownStart": {
                                  "type": "integer",
                                  "minimum": 0
                                },
                                "drawdownBottom": {
                                  "type": "integer",
                                  "minimum": 0
                                },
                                "drawdownEnd": {
                                  "type": "integer",
                                  "minimum": 0
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed a maximum drawdown of 30%, which began in the third period, which reached its bottom in the sixth period, and which is not ended yet",
                    "value": {
                      "portfolios": [
                        {
                          "portfolioDrawdowns": [
                            0,
                            0.05,
                            0,
                            0.1,
                            0.15,
                            0.3
                          ],
                          "portfolioWorstDrawdowns": [
                            {
                              "drawdownDepth": 0.3,
                              "drawdownStart": 3,
                              "drawdownBottom": 6,
                              "drawdownEnd": 0
                            },
                            {
                              "drawdownDepth": 0.05,
                              "drawdownStart": 1,
                              "drawdownBottom": 2,
                              "drawdownEnd": 3
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolio/analysis/mean-variance/efficient-frontier": {
      "post": {
        "tags": [
          "Portfolio Analysis"
        ],
        "summary": "Mean-Variance Efficient Frontier",
        "description": "Compute the discretized mean-variance efficient frontier associated to a list of assets, optionally subject to:\n* Minimum and maximum weights constraints\n* Minimum and maximum group weights constraints\n* Minimum and maximum portfolio exposure constraint\n\nReferences\n * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets",
                  "assetsReturns",
                  "assetsCovarianceMatrix"
                ],
                "properties": {
                  "assets": {
                    "description": "The number of assets",
                    "type": "integer",
                    "minimum": 2
                  },
                  "assetsReturns": {
                    "description": "assetsReturns[i] is the arithmetic return of asset i",
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "number"
                    }
                  },
                  "assetsCovarianceMatrix": {
                    "description": "assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "portfolios": {
                    "description": "The number of portfolios to compute on the mean-variance efficient frontier",
                    "type": "integer",
                    "minimum": 2,
                    "default": 25
                  },
                  "constraints": {
                    "type": "object",
                    "properties": {
                      "minimumAssetsWeights": {
                        "description": "minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "maximumAssetsWeights": {
                        "description": "maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "assetsGroups": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "array",
                          "description": "assetsGroups[k] is the indexes of the assets belonging to the assets group k in the portfolio; exclusive with assetsGroupsMatrix",
                          "minItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": "integer",
                            "minimum": 1
                          }
                        }
                      },
                      "assetsGroupsMatrix": {
                        "description": "assetsGroupsMatrix[k][i] is the weight of the asset i in the group of assets k; exclusive with assetsGroups",
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "maximumAssetsGroupsWeights": {
                        "description": "maximumAssetsGroupsWeights[k] is the maximum weight of the assets group k in the portfolio, in percentage between 0 and 1 if assetsGroups is provided",
                        "type": "array",
                        "items": {
                          "type": "number"
                        }
                      },
                      "minimumPortfolioExposure": {
                        "description": "The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1
                      },
                      "maximumPortfolioExposure": {
                        "description": "The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute 3 portfolios belonging to the mean-variance efficient frontier",
                  "value": {
                    "assets": 2,
                    "assetsReturns": [
                      0.01,
                      0.05
                    ],
                    "assetsCovarianceMatrix": [
                      [
                        0.0025,
                        0.0005
                      ],
                      [
                        0.0005,
                        0.01
                      ]
                    ],
                    "portfolios": 3,
                    "constraints": {
                      "minimumAssetsWeights": [
                        0.2,
                        0
                      ]
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "portfolios"
                  ],
                  "properties": {
                    "portfolios": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "assetsWeights",
                          "portfolioReturn",
                          "portfolioVolatility"
                        ],
                        "properties": {
                          "assetsWeights": {
                            "description": "assetsWeights[i] is the weight of the asset i in the portfolio, in percentage",
                            "minItems": 2,
                            "type": "array",
                            "items": {
                              "type": "number",
                              "minimum": 0,
                              "maximum": 1
                            }
                          },
                          "portfolioReturn": {
                            "description": "The arithmetic return of the portfolio",
                            "type": "number"
                          },
                          "portfolioVolatility": {
                            "description": "The volatility of the portfolio",
                            "type": "number",
                            "minimum": 0
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed 3 mean-variance efficient portfolios",
                    "value": {
                      "portfolios": [
                        {
                          "assetsWeights": [
                            0.8260869565217391,
                            0.17391304347826086
                          ],
                          "portfolioReturn": 0.016956521739130433,
                          "portfolioVolatility": 0.0463915284620315
                        },
                        {
                          "assetsWeights": [
                            0.5130434782608696,
                            0.48695652173913045
                          ],
                          "portfolioReturn": 0.02947826086956522,
                          "portfolioVolatility": 0.05726369211623199
                        },
                        {
                          "assetsWeights": [
                            0.2,
                            0.8
                          ],
                          "portfolioReturn": 0.04200000000000001,
                          "portfolioVolatility": 0.08160882305241265
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolios/analysis/mean-variance/efficient-frontier/resampling-based": {
      "post": {
        "tags": [
          "Portfolio Analysis"
        ],
        "summary": "Resampling-Based Mean-Variance Efficient Frontier",
        "description": "Compute the discretized resampling-based mean-variance efficient frontier associated to a list of assets, using a mix of the methodologies described in the first and the second references, optionally subject to:\n* Minimum and maximum weights constraints\n* Minimum and maximum group weights constraints\n* Minimum and maximum portfolio exposure constraint\n\nReferences\n * [Richard O Michaud, Robert O Michaud, Efficient Asset Management: A Practical Guide to Stock Portfolio Optimization and Asset Allocation](https://academic.oup.com/book/52209/chapter-abstract/421081595?redirectedFrom=fulltext)       \n * [F. Fabozzi, P. Kolm, D. Pachamanova, and S. Focardi. Robust portfolio optimization and management. John Wiley & Sons, 2007](https://www.wiley.com/en-us/Robust+Portfolio+Optimization+and+Management-p-9780471921226)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets",
                  "assetsReturns",
                  "assetsCovarianceMatrix"
                ],
                "properties": {
                  "assets": {
                    "description": "The number of assets",
                    "type": "integer",
                    "minimum": 2
                  },
                  "assetsReturns": {
                    "description": "assetsReturns[i] is the arithmetic return of asset i",
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "number"
                    }
                  },
                  "assetsCovarianceMatrix": {
                    "description": "assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "simulatedEfficientFrontiers": {
                    "description": "The number of efficient frontiers to simulate",
                    "type": "integer",
                    "minimum": 1,
                    "default": 128
                  },
                  "simulatedEfficientFrontiersAggregationMethod": {
                    "description": "The method to aggregate the simulated efficient frontiers",
                    "type": "string",
                    "enum": [
                      "average",
                      "median"
                    ],
                    "default": "average"
                  },
                  "simulatedEfficientFrontiersDiscretizationMethod": {
                    "description": "The method to discretize the simulated efficient frontiers",
                    "type": "string",
                    "enum": [
                      "rankAssociation",
                      "lambdaAssociation"
                    ],
                    "default": "lambdaAssociation"
                  },
                  "assetsReturnsUncertaintyIntervals": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "array",
                      "description": "assetsReturnsUncertaintyIntervals[i][0] (resp. assetsReturnsUncertaintyIntervals[i][1]) is the lower (resp. upper) bound of the uncertainty interval around the i-th asset arithmetic return assetsReturns[i]; defaults to the interval [0.95* assetsReturns[i], 1.05 * assetsReturns[i]]",
                      "minItems": 2,
                      "maxItems": 2,
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "assetsStandardDeviationsUncertaintyIntervals": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "array",
                      "description": "assetsStandardDeviationsUncertaintyIntervals[i][0] (resp. assetsStandardDeviationsUncertaintyIntervals[i][1]) is the lower (resp. upper) bound of the uncertainty interval around the i-th asset standard deviation sqrt(assetsCovarianceMatrix[i][i]); defaults to the interval [0.95 * sqrt(assetsCovarianceMatrix[i][i]), 1.05 * sqrt(assetsCovarianceMatrix[i][i])]",
                      "minItems": 2,
                      "maxItems": 2,
                      "items": {
                        "type": "number",
                        "minimum": 0
                      }
                    }
                  },
                  "assetsCorrelationMatrixUncertaintyLevel": {
                    "description": "The uncertainty level on the coefficients of the asset correlation matrix associated to assetsCovarianceMatrix; defaults to 0.10",
                    "type": "number",
                    "minimum": 0,
                    "maximum": 2
                  },
                  "constraints": {
                    "type": "object",
                    "properties": {
                      "minimumAssetsWeights": {
                        "description": "minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "maximumAssetsWeights": {
                        "description": "maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "assetsGroups": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "array",
                          "description": "assetsGroups[k] is the indexes of the assets belonging to the assets group k in the portfolio; exclusive with assetsGroupsMatrix",
                          "minItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": "integer",
                            "minimum": 1
                          }
                        }
                      },
                      "assetsGroupsMatrix": {
                        "description": "assetsGroupsMatrix[k][i] is the weight of the asset i in the group of assets k; exclusive with assetsGroups",
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "maximumAssetsGroupsWeights": {
                        "description": "maximumAssetsGroupsWeights[k] is the maximum weight of the assets group k in the portfolio, in percentage between 0 and 1 if assetsGroups is provided",
                        "type": "array",
                        "items": {
                          "type": "number"
                        }
                      },
                      "minimumPortfolioExposure": {
                        "description": "The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1
                      },
                      "maximumPortfolioExposure": {
                        "description": "The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute 3 portfolios belonging to the resampling-based mean-variance efficient frontier, with a 10% uncertainty around the first and the third asset returns and an uncertainty level of 0.25 around the asset correlations",
                  "value": {
                    "assets": 3,
                    "assetsReturns": [
                      0.01,
                      0.02,
                      0.03
                    ],
                    "assetsReturnsUncertaintyIntervals": [
                      [
                        0.009,
                        0.011
                      ],
                      [
                        0.02,
                        0.02
                      ],
                      [
                        0.027,
                        0.033
                      ]
                    ],
                    "assetsCovarianceMatrix": [
                      [
                        1,
                        0.3,
                        -0.2
                      ],
                      [
                        0.3,
                        1,
                        0.2
                      ],
                      [
                        -0.2,
                        0.2,
                        1
                      ]
                    ],
                    "assetsCorrelationMatrixUncertaintyLevel": 0.25,
                    "portfolios": 3
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "portfolios"
                  ],
                  "properties": {
                    "portfolios": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "assetsWeights",
                          "portfolioReturn",
                          "portfolioVolatility"
                        ],
                        "properties": {
                          "assetsWeights": {
                            "description": "assetsWeights[i] is the weight of the asset i in the portfolio, in percentage",
                            "minItems": 2,
                            "type": "array",
                            "items": {
                              "type": "number",
                              "minimum": 0,
                              "maximum": 1
                            }
                          },
                          "portfolioReturn": {
                            "description": "The arithmetic return of the portfolio",
                            "type": "number"
                          },
                          "portfolioVolatility": {
                            "description": "The volatility of the portfolio",
                            "type": "number",
                            "minimum": 0
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed 3 resampling-based mean-variance efficient portfolios",
                    "value": {
                      "portfolios": [
                        {
                          "assetsWeights": [
                            0.8260869565217391,
                            0.17391304347826086
                          ],
                          "portfolioReturn": 0.016956521739130433,
                          "portfolioVolatility": 0.0463915284620315
                        },
                        {
                          "assetsWeights": [
                            0.5130434782608696,
                            0.48695652173913045
                          ],
                          "portfolioReturn": 0.02947826086956522,
                          "portfolioVolatility": 0.05726369211623199
                        },
                        {
                          "assetsWeights": [
                            0.2,
                            0.8
                          ],
                          "portfolioReturn": 0.04200000000000001,
                          "portfolioVolatility": 0.08160882305241265
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolio/analysis/mean-variance/minimum-variance-frontier": {
      "post": {
        "tags": [
          "Portfolio Analysis"
        ],
        "summary": "Mean-Variance Minimum Variance Frontier",
        "description": "Compute the discretized mean-variance minimum variance frontier associated to a list of assets, optionally subject to:\n* Minimum and maximum weights constraints\n* Minimum and maximum group weights constraints\n* Minimum and maximum portfolio exposure constraint\n\n> This endpoint is similar to the endpoint [`/portfolio/analysis/mean-variance/efficient-frontier`](#post-/portfolio/analysis/mean-variance/efficient-frontier), because the mean-variance efficient frontier is the \"top\" portion of the mean-variance minimum variance frontier.\n\nReferences\n * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets",
                  "assetsReturns",
                  "assetsCovarianceMatrix"
                ],
                "properties": {
                  "assets": {
                    "description": "The number of assets",
                    "type": "integer",
                    "minimum": 2
                  },
                  "assetsReturns": {
                    "description": "assetsReturns[i] is the arithmetic return of asset i",
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "number"
                    }
                  },
                  "assetsCovarianceMatrix": {
                    "description": "assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "portfolios": {
                    "description": "The number of portfolios to compute on the mean-variance minimum variance frontier",
                    "type": "integer",
                    "minimum": 2,
                    "default": 25
                  },
                  "constraints": {
                    "type": "object",
                    "properties": {
                      "minimumAssetsWeights": {
                        "description": "minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "maximumAssetsWeights": {
                        "description": "maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "assetsGroups": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "array",
                          "description": "assetsGroups[k] is the indexes of the assets belonging to the assets group k in the portfolio; exclusive with assetsGroupsMatrix",
                          "minItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": "integer",
                            "minimum": 1
                          }
                        }
                      },
                      "assetsGroupsMatrix": {
                        "description": "assetsGroupsMatrix[k][i] is the weight of the asset i in the group of assets k; exclusive with assetsGroups",
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "maximumAssetsGroupsWeights": {
                        "description": "maximumAssetsGroupsWeights[k] is the maximum weight of the assets group k in the portfolio, in percentage between 0 and 1 if assetsGroups is provided",
                        "type": "array",
                        "items": {
                          "type": "number"
                        }
                      },
                      "minimumPortfolioExposure": {
                        "description": "The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1
                      },
                      "maximumPortfolioExposure": {
                        "description": "The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute 4 portfolios belonging to the mean-variance minimum variance frontier",
                  "value": {
                    "assets": 2,
                    "assetsReturns": [
                      0.01,
                      0.05
                    ],
                    "assetsCovarianceMatrix": [
                      [
                        0.0025,
                        0.0005
                      ],
                      [
                        0.0005,
                        0.01
                      ]
                    ],
                    "portfolios": 4,
                    "constraints": {
                      "minimumAssetsWeights": [
                        0.2,
                        0
                      ]
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "portfolios"
                  ],
                  "properties": {
                    "portfolios": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "assetsWeights",
                          "portfolioReturn",
                          "portfolioVolatility"
                        ],
                        "properties": {
                          "assetsWeights": {
                            "description": "assetsWeights[i] is the weight of the asset i in the portfolio, in percentage",
                            "type": "array",
                            "minItems": 2,
                            "items": {
                              "type": "number",
                              "minimum": 0,
                              "maximum": 1
                            }
                          },
                          "portfolioReturn": {
                            "description": "The arithmetic return of the portfolio",
                            "type": "number"
                          },
                          "portfolioVolatility": {
                            "description": "The volatility of the portfolio",
                            "type": "number",
                            "minimum": 0
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed 4 mean-variance minimum variance portfolios",
                    "value": {
                      "portfolios": [
                        {
                          "assetsWeights": [
                            1,
                            0
                          ],
                          "portfolioReturn": 0.01,
                          "portfolioVolatility": 0.05
                        },
                        {
                          "assetsWeights": [
                            0.7333333333333333,
                            0.2666666666666667
                          ],
                          "portfolioReturn": 0.02066666666666667,
                          "portfolioVolatility": 0.04744587559642156
                        },
                        {
                          "assetsWeights": [
                            0.4666666666666667,
                            0.5333333333333333
                          ],
                          "portfolioReturn": 0.03133333333333334,
                          "portfolioVolatility": 0.06031399321697891
                        },
                        {
                          "assetsWeights": [
                            0.2,
                            0.8
                          ],
                          "portfolioReturn": 0.04200000000000001,
                          "portfolioVolatility": 0.08160882305241265
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolio/analysis/returns/average": {
      "post": {
        "tags": [
          "Portfolio Analysis"
        ],
        "summary": "Average Return",
        "description": "Compute the arithmetic average of the returns of a portfolio.\n\nReferences\n* [Wikipedia, Arithmetic Average Rate of Return](https://en.wikipedia.org/wiki/Rate_of_return#Arithmetic_average_rate_of_return)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "portfolios"
                ],
                "properties": {
                  "portfolios": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "portfolioValues"
                      ],
                      "properties": {
                        "portfolioValues": {
                          "description": "portfolioValues[t] is the value of the portfolio at the time t",
                          "type": "array",
                          "items": {
                            "type": "number",
                            "minimum": 0,
                            "exclusiveMinimum": true
                          }
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "From portfolio values": {
                  "description": "Compute the arithmetic average return of a portfolio",
                  "value": {
                    "portfolios": [
                      {
                        "portfolioValues": [
                          100,
                          95,
                          100,
                          90,
                          85,
                          70
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "portfolios"
                  ],
                  "properties": {
                    "portfolios": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "portfolioAverageReturn"
                        ],
                        "properties": {
                          "portfolioAverageReturn": {
                            "description": "The arithmetic average return of the portfolio",
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed average arithmetic return of 1% for the first portfolio",
                    "value": {
                      "portfolios": [
                        {
                          "portfolioAverageReturn": 0.01
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolio/analysis/ulcer-index": {
      "post": {
        "tags": [
          "Portfolio Analysis"
        ],
        "summary": "Ulcer Index",
        "description": "Compute the Ulcer Index of one or several portfolio(s).\n\nReferences\n* Carl R. Bacon, Practical Portfolio Performance Measurement and Attribution\n* [Peter G. Martin, Ulcer Index, An Alternative Approach to the Measurement of Investment Risk & Risk-Adjusted Performance](http://www.tangotools.com/ui/ui.htm)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "portfolios",
                  "riskFreeRate"
                ],
                "properties": {
                  "riskFreeRate": {
                    "description": "The arithmetic risk free rate",
                    "type": "number"
                  },
                  "portfolios": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "portfolioValues"
                      ],
                      "properties": {
                        "portfolioValues": {
                          "description": "portfolioValues[t] is the value of the portfolio at the time t",
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number",
                            "minimum": 0,
                            "exclusiveMinimum": true
                          }
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "From portfolio values": {
                  "description": "Compute the Ulcer Index of a portfolio based on portfolio values",
                  "value": {
                    "portfolios": [
                      {
                        "portfolioValues": [
                          100,
                          95,
                          100,
                          90,
                          85,
                          70
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "portfolios"
                  ],
                  "properties": {
                    "portfolios": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "portfolioUlcerIndex"
                        ],
                        "properties": {
                          "portfolioUlcerIndex": {
                            "description": "The Ulcer Index of the portfolio",
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed Ulcer Index of a portfolio",
                    "value": {
                      "portfolios": [
                        {
                          "portfolioUlcerIndex": 0.14433756729740643
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolio/analysis/ulcer-performance-index": {
      "post": {
        "tags": [
          "Portfolio Analysis"
        ],
        "summary": "Ulcer Performance Index",
        "description": "Compute the Ulcer Performance Index of one or several portfolio(s).\n\nReferences\n* Carl R. Bacon, Practical Portfolio Performance Measurement and Attribution\n* [Peter G. Martin, Ulcer Index, An Alternative Approach to the Measurement of Investment Risk & Risk-Adjusted Performance](http://www.tangotools.com/ui/ui.htm)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "portfolios",
                  "riskFreeRate"
                ],
                "properties": {
                  "riskFreeRate": {
                    "description": "The arithmetic risk free rate",
                    "type": "number"
                  },
                  "portfolios": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "portfolioValues"
                      ],
                      "properties": {
                        "portfolioValues": {
                          "description": "portfolioValues[t] is the value of the portfolio at the time t",
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number",
                            "minimum": 0,
                            "exclusiveMinimum": true
                          }
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "From portfolio values": {
                  "description": "Compute the Ulcer Performance Index of a portfolio based on portfolio values",
                  "value": {
                    "riskFreeRate": 0,
                    "portfolios": [
                      {
                        "portfolioValues": [
                          100,
                          95,
                          100,
                          90,
                          85,
                          70
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "portfolios"
                  ],
                  "properties": {
                    "portfolios": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "portfolioUlcerPerformanceIndex"
                        ],
                        "properties": {
                          "portfolioUlcerPerformanceIndex": {
                            "description": "The Ulcer Performance Index of the portfolio",
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed Ulcer Performance Index of a portfolio",
                    "value": {
                      "portfolios": [
                        {
                          "portfolioUlcerPerformanceIndex": -0.45642249763676057
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolio/analysis/return": {
      "post": {
        "tags": [
          "Portfolio Analysis"
        ],
        "summary": "Arithmetic Return",
        "description": "Compute the arithmetic return of a portfolio from either:  \n* Portfolio assets arithmetic returns\n* Portfolio values\n\nReferences\n* [Wikipedia, Rate of Return](https://en.wikipedia.org/wiki/Rate_of_return#Return)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "portfolios",
                      "assets",
                      "assetsReturns"
                    ],
                    "properties": {
                      "assets": {
                        "description": "The number of assets",
                        "type": "integer",
                        "minimum": 1
                      },
                      "assetsReturns": {
                        "description": "assetsReturns[i] is the arithmetic return of asset i",
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "number"
                        }
                      },
                      "portfolios": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "required": [
                            "assetsWeights"
                          ],
                          "properties": {
                            "assetsWeights": {
                              "description": "assetsWeights[i] is the weight of the asset i in the portfolio, in percentage",
                              "type": "array",
                              "minItems": 1,
                              "items": {
                                "type": "number",
                                "minimum": 0,
                                "maximum": 1
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": [
                      "portfolios"
                    ],
                    "properties": {
                      "portfolios": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "required": [
                            "portfolioValues"
                          ],
                          "properties": {
                            "portfolioValues": {
                              "description": "portfolioValues[t] is the value of the portfolio at the time t",
                              "type": "array",
                              "minItems": 2,
                              "items": {
                                "type": "number",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                ]
              },
              "examples": {
                "From assets arithmetic returns": {
                  "description": "Compute the arithmetic return of 2 portfolios based on the assets arithmetic returns",
                  "value": {
                    "assets": 2,
                    "assetsReturns": [
                      0.01,
                      0.05
                    ],
                    "portfolios": [
                      {
                        "assetsWeights": [
                          1,
                          0
                        ]
                      },
                      {
                        "assetsWeights": [
                          0,
                          1
                        ]
                      }
                    ]
                  }
                },
                "From portfolio values": {
                  "description": "Compute the arithmetic return of a portfolio based on portfolio values",
                  "value": {
                    "portfolios": [
                      {
                        "portfolioValues": [
                          100,
                          95,
                          100,
                          90,
                          85,
                          70
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "portfolios"
                  ],
                  "properties": {
                    "portfolios": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "portfolioReturn"
                        ],
                        "properties": {
                          "portfolioReturn": {
                            "description": "The arithmetic return of the portfolio",
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed arithmetic return of 2 portfolios",
                    "value": {
                      "portfolios": [
                        {
                          "portfolioReturn": 0.01
                        },
                        {
                          "portfolioReturn": 0.05
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolios/analysis/return/time-weighted": {
      "post": {
        "tags": [
          "Portfolio Analysis"
        ],
        "summary": "Time-Weighted Return",
        "description": "Compute the time-weighted return (TWR) of a portfolio from portfolio values and portfolio contributions/withdrawals.\n\nReferences\n* [Wikipedia, Time-weighted return](https://en.wikipedia.org/wiki/Time-weighted_return)\n* Carl R. Bacon, Practical Portfolio Performance Measurement and Attribution\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "portfolios"
                ],
                "properties": {
                  "portfolios": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "portfolioValues"
                      ],
                      "properties": {
                        "portfolioValues": {
                          "description": "portfolioValues[t] contains portfolio value information at the date t",
                          "type": "array",
                          "minItems": 1,
                          "items": {
                            "type": "object",
                            "required": [
                              "date",
                              "portfolioValue"
                            ],
                            "properties": {
                              "date": {
                                "description": "The date corresponding to the date t in format YYYY-MM-DD; all dates are distinct",
                                "type": "string"
                              },
                              "portfolioValue": {
                                "description": "The value of the portfolio at the date t, excluding any potential contribution or withdrawal possibly made at the same date",
                                "type": "number",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              }
                            }
                          }
                        },
                        "portfolioContributions": {
                          "description": "portfolioValues[t] contains portfolio contributions information at the date t",
                          "type": "array",
                          "minItems": 1,
                          "items": {
                            "type": "object",
                            "required": [
                              "date",
                              "contributionAmount"
                            ],
                            "properties": {
                              "date": {
                                "description": "The date corresponding to the date t in format YYYY-MM-DD; all dates are distinct; the date must be found in the array portfolioValues",
                                "type": "string"
                              },
                              "contributionAmount": {
                                "description": "The amount contributed to the portfolio at the date t",
                                "type": "number",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              }
                            }
                          }
                        },
                        "portfolioWithdrawals": {
                          "description": "portfolioValues[t] contains portfolio withdrawals information at the date t",
                          "type": "array",
                          "minItems": 1,
                          "items": {
                            "type": "object",
                            "required": [
                              "date",
                              "withdrawalAmount"
                            ],
                            "properties": {
                              "date": {
                                "description": "The date corresponding to the date t in format YYYY-MM-DD; all dates are distinct; the date must be found in the array portfolioValues",
                                "type": "string"
                              },
                              "withdrawalAmount": {
                                "description": "The amount withdrew from the portfolio at the date t",
                                "type": "number",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute the time-weighted return of a portfolio with two contributions and one withdrawal",
                  "value": {
                    "portfolios": [
                      {
                        "portfolioValues": [
                          {
                            "date": "2010-01-01",
                            "portfolioValue": 100
                          },
                          {
                            "date": "2010-04-01",
                            "portfolioValue": 110
                          },
                          {
                            "date": "2010-07-01",
                            "portfolioValue": 105
                          },
                          {
                            "date": "2010-08-01",
                            "portfolioValue": 130
                          },
                          {
                            "date": "2011-01-01",
                            "portfolioValue": 100
                          }
                        ],
                        "portfolioContributions": [
                          {
                            "date": "2010-04-01",
                            "contributionAmount": 100
                          },
                          {
                            "date": "2010-07-01",
                            "contributionAmount": 100
                          }
                        ],
                        "portfolioWithdrawals": [
                          {
                            "date": "2010-08-01",
                            "withdrawalAmount": 50
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "portfolios"
                  ],
                  "properties": {
                    "portfolios": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "portfolioTimeWeightedReturn",
                          "portfolioAnnualizedTimeWeightedReturn"
                        ],
                        "properties": {
                          "portfolioTimeWeightedReturn": {
                            "description": "The time-weighted return of the portfolio, in percentage",
                            "type": "number"
                          },
                          "portfolioAnnualizedTimeWeightedReturn": {
                            "description": "The annualized time-weighted return of the portfolio, in percentage, using the Actual/Actual Day Count Fraction ISDA convention for the computation of year fractions",
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed time-weighted return of a portfolio",
                    "value": {
                      "portfolios": [
                        {
                          "portfolioTimeWeightedReturn": 0.1,
                          "portfolioAnnualizedTimeWeightedReturn": 0.05
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolios/analysis/return/money-weighted": {
      "post": {
        "tags": [
          "Portfolio Analysis"
        ],
        "summary": "Money-Weighted Return",
        "description": "Compute the money-weighted return (MWR) of a portfolio from portfolio values and portfolio contributions/withdrawals.\n\nReferences\n* [Wikipedia, Money-weighted_rate_of_return](https://en.wikipedia.org/wiki/Rate_of_return#Money-weighted_rate_of_return)\n* Carl R. Bacon, Practical Portfolio Performance Measurement and Attribution\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "portfolios"
                ],
                "properties": {
                  "portfolios": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "portfolioValues"
                      ],
                      "properties": {
                        "portfolioValues": {
                          "description": "portfolioValues[t] contains portfolio value information at the date t",
                          "type": "array",
                          "minItems": 1,
                          "items": {
                            "type": "object",
                            "required": [
                              "date",
                              "portfolioValue"
                            ],
                            "properties": {
                              "date": {
                                "description": "The date corresponding to the date t in format YYYY-MM-DD; all dates are distinct",
                                "type": "string"
                              },
                              "portfolioValue": {
                                "description": "The value of the portfolio at the date t, excluding any potential contribution or withdrawal possibly made at the same date",
                                "type": "number",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              }
                            }
                          }
                        },
                        "portfolioContributions": {
                          "description": "portfolioValues[t] contains portfolio contributions information at the date t",
                          "type": "array",
                          "minItems": 1,
                          "items": {
                            "type": "object",
                            "required": [
                              "date",
                              "contributionAmount"
                            ],
                            "properties": {
                              "date": {
                                "description": "The date corresponding to the date t in format YYYY-MM-DD; all dates are distinct; the date must be found in the array portfolioValues",
                                "type": "string"
                              },
                              "contributionAmount": {
                                "description": "The amount contributed to the portfolio at the date t",
                                "type": "number",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              }
                            }
                          }
                        },
                        "portfolioWithdrawals": {
                          "description": "portfolioValues[t] contains portfolio withdrawals information at the date t",
                          "type": "array",
                          "minItems": 1,
                          "items": {
                            "type": "object",
                            "required": [
                              "date",
                              "withdrawalAmount"
                            ],
                            "properties": {
                              "date": {
                                "description": "The date corresponding to the date t in format YYYY-MM-DD; all dates are distinct; the date must be found in the array portfolioValues",
                                "type": "string"
                              },
                              "withdrawalAmount": {
                                "description": "The amount withdrew from the portfolio at the date t",
                                "type": "number",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "moneyWeightedReturnComputationMethod": {
                    "description": "The method to compute the portfolios money-weighted return",
                    "type": "string",
                    "enum": [
                      "irr",
                      "modifiedDietz"
                    ],
                    "default": "irr"
                  }
                }
              },
              "examples": {
                "Example (IRR)": {
                  "description": "Compute the money-weighted return of a portfolio with two contributions and one withdrawal using the IRR method",
                  "value": {
                    "portfolios": [
                      {
                        "portfolioValues": [
                          {
                            "date": "2010-01-01",
                            "portfolioValue": 100
                          },
                          {
                            "date": "2010-04-01",
                            "portfolioValue": 110
                          },
                          {
                            "date": "2010-07-01",
                            "portfolioValue": 105
                          },
                          {
                            "date": "2010-08-01",
                            "portfolioValue": 130
                          },
                          {
                            "date": "2011-01-01",
                            "portfolioValue": 100
                          }
                        ],
                        "portfolioContributions": [
                          {
                            "date": "2010-04-01",
                            "contributionAmount": 100
                          },
                          {
                            "date": "2010-07-01",
                            "contributionAmount": 100
                          }
                        ],
                        "portfolioWithdrawals": [
                          {
                            "date": "2010-08-01",
                            "withdrawalAmount": 50
                          }
                        ]
                      }
                    ]
                  }
                },
                "Example (modified Dietz)": {
                  "description": "Compute the money-weighted return of a portfolio with two contributions and one withdrawal using the modified Dietz method",
                  "value": {
                    "portfolios": [
                      {
                        "portfolioValues": [
                          {
                            "date": "2010-01-01",
                            "portfolioValue": 100
                          },
                          {
                            "date": "2010-04-01",
                            "portfolioValue": 110
                          },
                          {
                            "date": "2010-07-01",
                            "portfolioValue": 105
                          },
                          {
                            "date": "2010-08-01",
                            "portfolioValue": 130
                          },
                          {
                            "date": "2011-01-01",
                            "portfolioValue": 100
                          }
                        ],
                        "portfolioContributions": [
                          {
                            "date": "2010-04-01",
                            "contributionAmount": 100
                          },
                          {
                            "date": "2010-07-01",
                            "contributionAmount": 100
                          }
                        ],
                        "portfolioWithdrawals": [
                          {
                            "date": "2010-08-01",
                            "withdrawalAmount": 50
                          }
                        ]
                      }
                    ],
                    "moneyWeightedReturnComputationMethod": "modifiedDietz"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "portfolios"
                  ],
                  "properties": {
                    "portfolios": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "portfolioMoneyWeightedReturn",
                          "portfolioAnnualizedMoneyWeightedReturn"
                        ],
                        "properties": {
                          "portfolioMoneyWeightedReturn": {
                            "description": "The money-weighted return of the portfolio, in percentage",
                            "type": "number"
                          },
                          "portfolioAnnualizedMoneyWeightedReturn": {
                            "description": "The annualized money-weighted return of the portfolio, in percentage, using the Actual/Actual Day Count Fraction ISDA convention for the computation of year fractions",
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed money-weighted return of a portfolio",
                    "value": {
                      "portfolios": [
                        {
                          "portfolioMoneyWeightedReturn": 0.1,
                          "portfolioAnnualizedMoneyWeightedReturn": 0.05
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolios/transformation/time-weighted": {
      "post": {
        "tags": [
          "Portfolio Transformation"
        ],
        "summary": "Time-Weighted Portfolio",
        "description": "Compute time-weighted portfolio values from portfolio values and portfolio contributions/withdrawals.\n\nReferences\n* [Wikipedia, Time-weighted return](https://en.wikipedia.org/wiki/Time-weighted_return)\n* Carl R. Bacon, Practical Portfolio Performance Measurement and Attribution\n* [Kenneth B. Gray, Jr. and Robert B. K. Dewar. 1971. Axiomatic Characterization of the Time-Weighted Rate of Return\", Management Science, Vol. 18, No. 2, pp. B32-B35](https://www.jstor.org/stable/2629526)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "portfolios"
                ],
                "properties": {
                  "portfolios": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "portfolioValues"
                      ],
                      "properties": {
                        "portfolioValues": {
                          "description": "portfolioValues[t] contains portfolio value information at the date t",
                          "type": "array",
                          "minItems": 1,
                          "items": {
                            "type": "object",
                            "required": [
                              "date",
                              "portfolioValue"
                            ],
                            "properties": {
                              "date": {
                                "description": "The date corresponding to the date t in format YYYY-MM-DD; all dates are distinct",
                                "type": "string"
                              },
                              "portfolioValue": {
                                "description": "The value of the portfolio at the date t, excluding any potential contribution or withdrawal possibly made at the same date",
                                "type": "number",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              }
                            }
                          }
                        },
                        "portfolioContributions": {
                          "description": "portfolioValues[t] contains portfolio contributions information at the date t",
                          "type": "array",
                          "minItems": 1,
                          "items": {
                            "type": "object",
                            "required": [
                              "date",
                              "contributionAmount"
                            ],
                            "properties": {
                              "date": {
                                "description": "The date corresponding to the date t in format YYYY-MM-DD; all dates are distinct; the date must be found in the array portfolioValues",
                                "type": "string"
                              },
                              "contributionAmount": {
                                "description": "The amount contributed to the portfolio at the date t",
                                "type": "number",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              }
                            }
                          }
                        },
                        "portfolioWithdrawals": {
                          "description": "portfolioValues[t] contains portfolio withdrawals information at the date t",
                          "type": "array",
                          "minItems": 1,
                          "items": {
                            "type": "object",
                            "required": [
                              "date",
                              "withdrawalAmount"
                            ],
                            "properties": {
                              "date": {
                                "description": "The date corresponding to the date t in format YYYY-MM-DD; all dates are distinct; the date must be found in the array portfolioValues",
                                "type": "string"
                              },
                              "withdrawalAmount": {
                                "description": "The amount withdrew from the portfolio at the date t",
                                "type": "number",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute the time-weighted portfolio values of a portfolio with two contributions and one withdrawal",
                  "value": {
                    "portfolios": [
                      {
                        "portfolioValues": [
                          {
                            "date": "2010-01-01",
                            "portfolioValue": 100
                          },
                          {
                            "date": "2010-04-01",
                            "portfolioValue": 110
                          },
                          {
                            "date": "2010-07-01",
                            "portfolioValue": 105
                          },
                          {
                            "date": "2010-08-01",
                            "portfolioValue": 130
                          },
                          {
                            "date": "2011-01-01",
                            "portfolioValue": 100
                          }
                        ],
                        "portfolioContributions": [
                          {
                            "date": "2010-04-01",
                            "contributionAmount": 100
                          },
                          {
                            "date": "2010-07-01",
                            "contributionAmount": 100
                          }
                        ],
                        "portfolioWithdrawals": [
                          {
                            "date": "2010-08-01",
                            "withdrawalAmount": 50
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "portfolios"
                  ],
                  "properties": {
                    "portfolios": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "portfolioValues"
                        ],
                        "properties": {
                          "portfolioValues": {
                            "description": "portfolioValues[t] contains time-weighted portfolio value information at the date t",
                            "type": "array",
                            "minItems": 1,
                            "items": {
                              "type": "object",
                              "required": [
                                "date",
                                "portfolioValue"
                              ],
                              "properties": {
                                "date": {
                                  "description": "The date corresponding to the date t in format YYYY-MM-DD; all dates are distinct",
                                  "type": "string"
                                },
                                "portfolioValue": {
                                  "description": "The time-weighted value of the portfolio at the date t",
                                  "type": "number",
                                  "minimum": 0,
                                  "exclusiveMinimum": true
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed time-weighted portfolio values of a portfolio",
                    "value": {
                      "portfolios": [
                        {
                          "portfolioValues": [
                            {
                              "portfolioValue": 100,
                              "date": "2010-01-01"
                            },
                            {
                              "portfolioValue": 110,
                              "date": "2010-04-01"
                            },
                            {
                              "portfolioValue": 55,
                              "date": "2010-07-01"
                            },
                            {
                              "portfolioValue": 34.8780487804878,
                              "date": "2010-08-01"
                            },
                            {
                              "portfolioValue": 43.59756097560975,
                              "date": "2011-01-01"
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolios/transformation/money-weighted": {
      "post": {
        "tags": [
          "Portfolio Transformation"
        ],
        "summary": "Money-Weighted Portfolio",
        "description": "Compute money-weighted portfolio values from portfolio values and portfolio contributions/withdrawals.\n\nReferences\n* Carl R. Bacon, Practical Portfolio Performance Measurement and Attribution\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "portfolios"
                ],
                "properties": {
                  "portfolios": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "portfolioValues"
                      ],
                      "properties": {
                        "portfolioValues": {
                          "description": "portfolioValues[t] contains portfolio value information at the date t",
                          "type": "array",
                          "minItems": 1,
                          "items": {
                            "type": "object",
                            "required": [
                              "date",
                              "portfolioValue"
                            ],
                            "properties": {
                              "date": {
                                "description": "The date corresponding to the date t in format YYYY-MM-DD; all dates are distinct",
                                "type": "string"
                              },
                              "portfolioValue": {
                                "description": "The value of the portfolio at the date t, excluding any potential contribution or withdrawal possibly made at the same date",
                                "type": "number",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              }
                            }
                          }
                        },
                        "portfolioContributions": {
                          "description": "portfolioValues[t] contains portfolio contributions information at the date t",
                          "type": "array",
                          "minItems": 1,
                          "items": {
                            "type": "object",
                            "required": [
                              "date",
                              "contributionAmount"
                            ],
                            "properties": {
                              "date": {
                                "description": "The date corresponding to the date t in format YYYY-MM-DD; all dates are distinct; the date must be found in the array portfolioValues",
                                "type": "string"
                              },
                              "contributionAmount": {
                                "description": "The amount contributed to the portfolio at the date t",
                                "type": "number",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              }
                            }
                          }
                        },
                        "portfolioWithdrawals": {
                          "description": "portfolioValues[t] contains portfolio withdrawals information at the date t",
                          "type": "array",
                          "minItems": 1,
                          "items": {
                            "type": "object",
                            "required": [
                              "date",
                              "withdrawalAmount"
                            ],
                            "properties": {
                              "date": {
                                "description": "The date corresponding to the date t in format YYYY-MM-DD; all dates are distinct; the date must be found in the array portfolioValues",
                                "type": "string"
                              },
                              "withdrawalAmount": {
                                "description": "The amount withdrew from the portfolio at the date t",
                                "type": "number",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "moneyWeightedReturnComputationMethod": {
                    "description": "The method to compute the portfolios money-weighted return",
                    "type": "string",
                    "enum": [
                      "irr",
                      "modifiedDietz"
                    ],
                    "default": "irr"
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute the money-weighted portfolio values of a portfolio with two contributions and one withdrawal",
                  "value": {
                    "portfolios": [
                      {
                        "portfolioValues": [
                          {
                            "date": "2010-01-01",
                            "portfolioValue": 100
                          },
                          {
                            "date": "2010-04-01",
                            "portfolioValue": 110
                          },
                          {
                            "date": "2010-07-01",
                            "portfolioValue": 105
                          },
                          {
                            "date": "2010-08-01",
                            "portfolioValue": 130
                          },
                          {
                            "date": "2011-01-01",
                            "portfolioValue": 100
                          }
                        ],
                        "portfolioContributions": [
                          {
                            "date": "2010-04-01",
                            "contributionAmount": 100
                          },
                          {
                            "date": "2010-07-01",
                            "contributionAmount": 100
                          }
                        ],
                        "portfolioWithdrawals": [
                          {
                            "date": "2010-08-01",
                            "withdrawalAmount": 50
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "portfolios"
                  ],
                  "properties": {
                    "portfolios": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "portfolioValues"
                        ],
                        "properties": {
                          "portfolioValues": {
                            "description": "portfolioValues[t] contains money-weighted portfolio value information at the date t",
                            "type": "array",
                            "minItems": 1,
                            "items": {
                              "type": "object",
                              "required": [
                                "date",
                                "portfolioValue"
                              ],
                              "properties": {
                                "date": {
                                  "description": "The date corresponding to the date t in format YYYY-MM-DD; all dates are distinct",
                                  "type": "string"
                                },
                                "portfolioValue": {
                                  "description": "The money-weighted value of the portfolio at the date t",
                                  "type": "number",
                                  "minimum": 0,
                                  "exclusiveMinimum": true
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed money-weighted portfolio values of a portfolio",
                    "value": {
                      "portfolios": [
                        {
                          "portfolioValues": [
                            {
                              "portfolioValue": 100,
                              "date": "2010-01-01"
                            },
                            {
                              "portfolioValue": 110.00000655378055,
                              "date": "2010-04-01"
                            },
                            {
                              "portfolioValue": 41.07084419155742,
                              "date": "2010-07-01"
                            },
                            {
                              "portfolioValue": 16.915584733783717,
                              "date": "2010-08-01"
                            },
                            {
                              "portfolioValue": 32.132306806826115,
                              "date": "2011-01-01"
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolio/analysis/volatility": {
      "post": {
        "tags": [
          "Portfolio Analysis"
        ],
        "summary": "Volatility",
        "description": "Compute the volatility one or several portfolio(s) from either:  \n* Portfolio assets covariance matrix\n* Portfolio values, in which case the portfolio(s) volatility is defined as the standard deviation of the portfolio returns \n\nReferences\n* [Wikipedia, Standard Deviation](https://en.wikipedia.org/wiki/Standard_deviation#Finance)\n* Carl R. Bacon, Practical Portfolio Performance Measurement and Attribution\n* Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "portfolios",
                      "assets",
                      "assetsCovarianceMatrix"
                    ],
                    "properties": {
                      "assets": {
                        "description": "The number of assets",
                        "type": "integer",
                        "minimum": 2
                      },
                      "assetsCovarianceMatrix": {
                        "description": "assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j",
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "portfolios": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "required": [
                            "assetsWeights"
                          ],
                          "properties": {
                            "assetsWeights": {
                              "description": "assetsWeights[i] is the weight of the asset i in the portfolio, in percentage",
                              "type": "array",
                              "minItems": 2,
                              "items": {
                                "type": "number",
                                "minimum": 0,
                                "maximum": 1
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": [
                      "portfolios"
                    ],
                    "properties": {
                      "portfolios": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "required": [
                            "portfolioValues"
                          ],
                          "properties": {
                            "portfolioValues": {
                              "description": "portfolioValues[t] is the value of the portfolio at the time t",
                              "type": "array",
                              "minItems": 2,
                              "items": {
                                "type": "number",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                ]
              },
              "examples": {
                "From asset covariance matrix": {
                  "description": "Compute the volatility of 2 portfolios based on the assets covariance matrix",
                  "value": {
                    "assets": 2,
                    "assetsCovarianceMatrix": [
                      [
                        0.0025,
                        0.0005
                      ],
                      [
                        0.0005,
                        0.01
                      ]
                    ],
                    "portfolios": [
                      {
                        "assetsWeights": [
                          1,
                          0
                        ]
                      },
                      {
                        "assetsWeights": [
                          0,
                          1
                        ]
                      }
                    ]
                  }
                },
                "From portfolio values": {
                  "description": "Compute the volatility of a portfolio based on portfolio values",
                  "value": {
                    "portfolios": [
                      {
                        "portfolioValues": [
                          100,
                          95,
                          100,
                          90,
                          85,
                          70
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "portfolios"
                  ],
                  "properties": {
                    "portfolios": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "portfolioVolatility"
                        ],
                        "properties": {
                          "portfolioVolatility": {
                            "description": "The volatility of the portfolio",
                            "type": "number",
                            "minimum": 0
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed volatility of 2 portfolios",
                    "value": {
                      "portfolios": [
                        {
                          "portfolioVolatility": 0.05
                        },
                        {
                          "portfolioVolatility": 0.1
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolio/analysis/sharpe-ratio": {
      "post": {
        "tags": [
          "Portfolio Analysis / Sharpe ratio"
        ],
        "summary": "Sharpe Ratio",
        "description": "Compute the Sharpe ratio of one or several portfolio(s) from either:\n* Portfolio assets arithmetic returns and assets covariance matrix\n* Portfolio values\n\nReferences\n* Carl R. Bacon, Practical Portfolio Performance Measurement and Attribution\n* Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "portfolios",
                      "riskFreeRate",
                      "assets",
                      "assetsReturns",
                      "assetsCovarianceMatrix"
                    ],
                    "properties": {
                      "assets": {
                        "description": "The number of assets",
                        "type": "integer",
                        "minimum": 2
                      },
                      "assetsReturns": {
                        "description": "assetsReturns[i] is the arithmetic return of asset i",
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "number"
                        }
                      },
                      "assetsCovarianceMatrix": {
                        "description": "assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j",
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "riskFreeRate": {
                        "description": "The arithmetic risk free rate",
                        "type": "number"
                      },
                      "portfolios": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "required": [
                            "assetsWeights"
                          ],
                          "properties": {
                            "assetsWeights": {
                              "description": "assetsWeights[i] is the weight of the asset i in the portfolio, in percentage",
                              "type": "array",
                              "minItems": 2,
                              "items": {
                                "type": "number",
                                "minimum": 0,
                                "maximum": 1
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": [
                      "portfolios",
                      "riskFreeRate"
                    ],
                    "properties": {
                      "riskFreeRate": {
                        "description": "The arithmetic risk free rate",
                        "type": "number"
                      },
                      "portfolios": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "required": [
                            "portfolioValues"
                          ],
                          "properties": {
                            "portfolioValues": {
                              "description": "portfolioValues[t] is the value of the portfolio at the time t",
                              "type": "array",
                              "minItems": 2,
                              "items": {
                                "type": "number",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                ]
              },
              "examples": {
                "From assets arithmetic returns and asset covariance matrix": {
                  "description": "Compute the Sharpe ratio of 2 portfolios based on the assets arithmetic returns and covariance matrix",
                  "value": {
                    "assets": 2,
                    "assetsReturns": [
                      0.01,
                      0.05
                    ],
                    "assetsCovarianceMatrix": [
                      [
                        0.0025,
                        0.0005
                      ],
                      [
                        0.0005,
                        0.01
                      ]
                    ],
                    "riskFreeRate": 0,
                    "portfolios": [
                      {
                        "assetsWeights": [
                          1,
                          0
                        ]
                      },
                      {
                        "assetsWeights": [
                          0,
                          1
                        ]
                      }
                    ]
                  }
                },
                "From portfolio values": {
                  "description": "Compute the Sharpe ratio of a portfolio based on portfolio values",
                  "value": {
                    "riskFreeRate": 0,
                    "portfolios": [
                      {
                        "portfolioValues": [
                          100,
                          95,
                          100,
                          90,
                          85,
                          70
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "portfolios"
                  ],
                  "properties": {
                    "portfolios": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "portfolioSharpeRatio"
                        ],
                        "properties": {
                          "portfolioSharpeRatio": {
                            "description": "The Sharpe ratio of the portfolio",
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed Sharpe ratio of a portfolio",
                    "value": {
                      "portfolios": [
                        {
                          "portfolioSharpeRatio": -0.8835333925060923
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolio/analysis/sharpe-ratio/bias-adjusted": {
      "post": {
        "tags": [
          "Portfolio Analysis / Sharpe ratio"
        ],
        "summary": "Bias-Adjusted Sharpe Ratio",
        "description": "Compute the Sharpe ratio of one or several portfolio(s), adjusted for small sample bias.\n\nReferences\n* [Opdyke, J., Comparing Sharpe ratios: So where are the p-values?. J Asset Manag 8, 308\u2013336 (2007)](https://link.springer.com/article/10.1057/palgrave.jam.2250084)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "portfolios",
                  "riskFreeRate"
                ],
                "properties": {
                  "riskFreeRate": {
                    "description": "The arithmetic risk free rate",
                    "type": "number"
                  },
                  "portfolios": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "portfolioValues"
                      ],
                      "properties": {
                        "portfolioValues": {
                          "description": "portfolioValues[t] is the value of the portfolio at the time t",
                          "type": "array",
                          "minItems": 4,
                          "items": {
                            "type": "number",
                            "minimum": 0,
                            "exclusiveMinimum": true
                          }
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute the bias-adjusted Sharpe ratio of a portfolio",
                  "value": {
                    "riskFreeRate": 0,
                    "portfolios": [
                      {
                        "portfolioValues": [
                          100,
                          95,
                          100,
                          90,
                          85,
                          70
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "portfolios"
                  ],
                  "properties": {
                    "portfolios": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "portfolioBiasAdjustedSharpeRatio"
                        ],
                        "properties": {
                          "portfolioBiasAdjustedSharpeRatio": {
                            "description": "The bias-adjusted Sharpe ratio of the portfolio",
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed bias-adjusted Sharpe ratio of a portfolio",
                    "value": {
                      "portfolios": [
                        {
                          "portfolioBiasAdjustedSharpeRatio": -0.8314248234836994
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolio/analysis/sharpe-ratio/confidence-interval": {
      "post": {
        "tags": [
          "Portfolio Analysis / Sharpe ratio"
        ],
        "summary": "Sharpe Ratio Confidence Interval",
        "description": "Build a confidence interval for the Sharpe ratio of one or several portfolio(s).\n\nReferences\n* [Opdyke, J.D., Comparing Sharpe ratios: So where are the p-values?. J Asset Manag 8, 308\u2013336 (2007)](https://link.springer.com/article/10.1057/palgrave.jam.2250084)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "portfolios",
                  "riskFreeRate"
                ],
                "properties": {
                  "riskFreeRate": {
                    "description": "The arithmetic risk free rate",
                    "type": "number"
                  },
                  "portfolios": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "portfolioValues"
                      ],
                      "properties": {
                        "portfolioValues": {
                          "description": "portfolioValues[t] is the value of the portfolio at the time t",
                          "type": "array",
                          "minItems": 4,
                          "items": {
                            "type": "number",
                            "minimum": 0,
                            "exclusiveMinimum": true
                          }
                        }
                      }
                    }
                  },
                  "confidenceIntervalType": {
                    "description": "The type of confidence interval to build",
                    "type": "string",
                    "enum": [
                      "twoSided",
                      "lowerOneSided",
                      "upperOneSided"
                    ],
                    "default": "twoSided"
                  },
                  "confidenceLevel": {
                    "description": "The confidence level of the confidence interval to build, in percentage",
                    "type": "number",
                    "minimum": 0,
                    "exclusiveMinimum": true,
                    "maximum": 1,
                    "exclusiveMaximum": true,
                    "default": 0.95
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Build a two-sided confidence interval at a confidence level 99%",
                  "value": {
                    "riskFreeRate": 0,
                    "confidenceLevel": 0.99,
                    "confidenceIntervalType": "twoSided",
                    "portfolios": [
                      {
                        "portfolioValues": [
                          100,
                          95,
                          100,
                          90,
                          85,
                          70
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "portfolios"
                  ],
                  "properties": {
                    "portfolios": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "portfolioSharpeRatioConfidenceInterval"
                        ],
                        "properties": {
                          "portfolioSharpeRatioConfidenceInterval": {
                            "description": "portfolioSharpeRatioConfidenceInterval[0] (resp. portfolioSharpeRatioConfidenceInterval[1]) is the lower (resp. upper) bound of the built confidence interval, possibly equal to null in case of a negative infinite (resp. positive infinite) bound",
                            "type": "array",
                            "minItems": 2,
                            "maxItems": 2,
                            "items": {
                              "type": "number"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example of a two-sided confidence interval": {
                    "description": "A two-sided confidence interval of a portfolio",
                    "value": {
                      "portfolios": [
                        {
                          "portfolioSharpeRatioConfidenceInterval": [
                            -2.2283045143292535,
                            0.46123772931706875
                          ]
                        }
                      ]
                    }
                  },
                  "Example of a one-sided confidence interval": {
                    "description": "A one-sided lower confidence interval of a portfolio",
                    "value": {
                      "portfolios": [
                        {
                          "portfolioSharpeRatioConfidenceInterval": [
                            null,
                            0.3309901925834179
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolio/analysis/sharpe-ratio/probabilistic": {
      "post": {
        "tags": [
          "Portfolio Analysis / Sharpe ratio"
        ],
        "summary": "Probabilistic Sharpe Ratio",
        "description": "Compute the probabilistic Sharpe ratio of one or several portfolio(s).\n\nReferences\n* [Opdyke, J.D., Comparing Sharpe ratios: So where are the p-values?. J Asset Manag 8, 308\u2013336 (2007)](https://link.springer.com/article/10.1057/palgrave.jam.2250084)\n* [Bailey, David H. and Lopez de Prado, Marcos, The Sharpe Ratio Efficient Frontier (April 1, 2012). Journal of Risk, Vol. 15, No. 2, Winter 2012/13](https://ssrn.com/abstract=1821643)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "portfolios",
                      "riskFreeRate",
                      "benchmarkSharpeRatio"
                    ],
                    "properties": {
                      "riskFreeRate": {
                        "description": "The arithmetic risk free rate",
                        "type": "number"
                      },
                      "portfolios": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "required": [
                            "portfolioValues"
                          ],
                          "properties": {
                            "portfolioValues": {
                              "description": "portfolioValues[t] is the value of the portfolio at the time t",
                              "type": "array",
                              "minItems": 4,
                              "items": {
                                "type": "number",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              }
                            }
                          }
                        }
                      },
                      "benchmarkSharpeRatio": {
                        "description": "The Sharpe ratio of the benchmark, in the same sampling frequency as the sampling frequency of the portfolio values",
                        "type": "number"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": [
                      "portfolios",
                      "riskFreeRate",
                      "benchmarkValues"
                    ],
                    "properties": {
                      "riskFreeRate": {
                        "description": "The arithmetic risk free rate",
                        "type": "number"
                      },
                      "portfolios": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "required": [
                            "portfolioValues"
                          ],
                          "properties": {
                            "portfolioValues": {
                              "description": "portfolioValues[t] is the value of the portfolio at the time t; all the portfolioValues arrays must have the same length as the benchmarkValues array",
                              "type": "array",
                              "minItems": 4,
                              "items": {
                                "type": "number",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              }
                            }
                          }
                        }
                      },
                      "benchmarkValues": {
                        "description": "benchmarkValues[t] is the value of the benchmark at the time t; the benchmarkValues array must have the same length as all the portfolioValues arrays",
                        "type": "array",
                        "minItems": 4,
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "exclusiveMinimum": true
                        }
                      }
                    }
                  }
                ]
              },
              "examples": {
                "Probabilistic Sharpe ratio of a portfolio v.s. a benchmark Sharpe ratio": {
                  "description": "Compute the probabilistic Sharpe ratio for a portfolio v.s. a benchmark Sharpe ratio",
                  "value": {
                    "riskFreeRate": 0,
                    "benchmarkSharpeRatio": 0,
                    "portfolios": [
                      {
                        "portfolioValues": [
                          100,
                          95,
                          100,
                          90,
                          85,
                          70
                        ]
                      }
                    ]
                  }
                },
                "Probabilistic Sharpe ratio of a portfolio v.s. a benchmark": {
                  "description": "Compute the probabilistic Sharpe ratio for a portfolio v.s. a benchmark",
                  "value": {
                    "riskFreeRate": 0,
                    "benchmarkValues": [
                      100,
                      101,
                      98,
                      102,
                      95,
                      90
                    ],
                    "portfolios": [
                      {
                        "portfolioValues": [
                          100,
                          95,
                          100,
                          90,
                          85,
                          70
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "portfolios"
                  ],
                  "properties": {
                    "portfolios": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "portfolioProbabilisticSharpeRatio"
                        ],
                        "properties": {
                          "portfolioProbabilisticSharpeRatio": {
                            "description": "The probabilistic Sharpe ratio of the portfolio, in percentage",
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "The probabilistic Sharpe ratio of a portfolio",
                    "value": {
                      "portfolios": [
                        {
                          "portfolioProbabilisticSharpeRatio": 0.0452890775705429
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolio/analysis/sharpe-ratio/probabilistic/minimum-track-record-length": {
      "post": {
        "tags": [
          "Portfolio Analysis / Sharpe ratio"
        ],
        "summary": "Minimum Track Record Length",
        "description": "Compute the minimum track record length of one or several portfolio(s).\n\nReferences\n* [Bailey, David H. and Lopez de Prado, Marcos, The Sharpe Ratio Efficient Frontier (April 1, 2012). Journal of Risk, Vol. 15, No. 2, Winter 2012/13](https://ssrn.com/abstract=1821643)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "portfolios",
                      "riskFreeRate",
                      "benchmarkSharpeRatio"
                    ],
                    "properties": {
                      "riskFreeRate": {
                        "description": "The arithmetic risk free rate",
                        "type": "number"
                      },
                      "portfolios": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "required": [
                            "portfolioValues"
                          ],
                          "properties": {
                            "portfolioValues": {
                              "description": "portfolioValues[t] is the value of the portfolio at the time t",
                              "type": "array",
                              "minItems": 4,
                              "items": {
                                "type": "number",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              }
                            }
                          }
                        }
                      },
                      "benchmarkSharpeRatio": {
                        "description": "The Sharpe ratio of the benchmark, in the same sampling frequency as the sampling frequency of the portfolio values",
                        "type": "number"
                      },
                      "confidenceLevel": {
                        "description": "The confidence level of the minimum track record length, in percentage",
                        "type": "number",
                        "minimum": 0,
                        "exclusiveMinimum": true,
                        "maximum": 1,
                        "exclusiveMaximum": true,
                        "default": 0.95
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": [
                      "portfolios",
                      "riskFreeRate",
                      "benchmarkSharpeRatio"
                    ],
                    "properties": {
                      "riskFreeRate": {
                        "description": "The arithmetic risk free rate",
                        "type": "number"
                      },
                      "portfolios": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "required": [
                            "portfolioValues"
                          ],
                          "properties": {
                            "portfolioValues": {
                              "description": "portfolioValues[t] is the value of the portfolio at the time t",
                              "type": "array",
                              "minItems": 4,
                              "items": {
                                "type": "number",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              }
                            }
                          }
                        }
                      },
                      "benchmarkValues": {
                        "description": "benchmarkValues[t] is the value of the benchmark at the time t; the benchmarkValues array must have the same length as all the portfolioValues arrays",
                        "type": "array",
                        "minItems": 4,
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "exclusiveMinimum": true
                        }
                      },
                      "confidenceLevel": {
                        "description": "The confidence level of the minimum track record length, in percentage",
                        "type": "number",
                        "minimum": 0,
                        "exclusiveMinimum": true,
                        "maximum": 1,
                        "exclusiveMaximum": true,
                        "default": 0.95
                      }
                    }
                  }
                ]
              },
              "examples": {
                "Minimum Track Record Length of a portfolio v.s. a benchmark Sharpe ratio": {
                  "description": "Compute the minimum track record length of a portfolio v.s. a benchmark Sharpe ratio of 0 at a confidence level of 95%",
                  "value": {
                    "riskFreeRate": 0,
                    "benchmarkSharpeRatio": 0,
                    "portfolios": [
                      {
                        "portfolioValues": [
                          100,
                          95,
                          100,
                          90,
                          85,
                          70
                        ]
                      }
                    ]
                  }
                },
                "Minimum Track Record Length of a portfolio v.s. a benchmark": {
                  "description": "Compute the minimum track record length of a portfolio v.s. a benchmark at a confidence level of 95%",
                  "value": {
                    "riskFreeRate": 0,
                    "benchmarkValues": [
                      100,
                      101,
                      98,
                      85,
                      75,
                      65
                    ],
                    "portfolios": [
                      {
                        "portfolioValues": [
                          100,
                          95,
                          100,
                          90,
                          85,
                          70
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "portfolios"
                  ],
                  "properties": {
                    "portfolios": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "portfolioSharpeRatioMinimumTrackRecordLength"
                        ],
                        "properties": {
                          "portfolioSharpeRatioMinimumTrackRecordLength": {
                            "description": "The minimum track record length of the portfolio, in number of required arithmetic returns, possibly equal to null in case the minimum track record length does not exist",
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example of non-existing minimum track record length": {
                    "description": "Non-existing minimum track record length of a portfolio",
                    "value": {
                      "portfolios": [
                        {
                          "portfolioSharpeRatioMinimumTrackRecordLength": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolio/analysis/diversification-ratio": {
      "post": {
        "tags": [
          "Portfolio Analysis"
        ],
        "summary": "Diversification Ratio",
        "description": "Compute the diversification ratio of one or several portfolio(s).\n\nReferences\n* [Yves Choueifaty and Yves Coignard, Toward Maximum Diversification, The Journal of Portfolio Management Fall 2008, 35 (1) 40-51](https://doi.org/10.3905/JPM.2008.35.1.40)\n* [Tristan Froidure, Khalid Jalalzai and Yves Choueifaty, Portfolio Rho-Representativity, International Journal of Theoretical and Applied FinanceVol. 22, No. 07, 1950034 (2019)](https://www.worldscientific.com/doi/10.1142/S0219024919500341)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "assets",
                      "assetsCovarianceMatrix",
                      "portfolios"
                    ],
                    "properties": {
                      "assets": {
                        "description": "The number of assets",
                        "type": "integer",
                        "minimum": 2
                      },
                      "assetsCovarianceMatrix": {
                        "description": "assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j",
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "portfolios": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "required": [
                            "assetsWeights"
                          ],
                          "properties": {
                            "assetsWeights": {
                              "description": "assetsWeights[i] is the weight of the asset i in the portfolio, in percentage",
                              "type": "array",
                              "minItems": 1,
                              "items": {
                                "type": "number",
                                "minimum": 0,
                                "maximum": 1
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": [
                      "assets",
                      "portfolios"
                    ],
                    "properties": {
                      "assets": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "required": [
                            "assetPrices"
                          ],
                          "properties": {
                            "assetPrices": {
                              "description": "assetPrices[t] is the price of the asset at the time t; all the assetPrices arrays must have the same length",
                              "type": "array",
                              "minItems": 2,
                              "items": {
                                "type": "number",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              }
                            }
                          }
                        }
                      },
                      "portfolios": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "required": [
                            "portfolioValues"
                          ],
                          "properties": {
                            "portfolioValues": {
                              "description": "portfolioValues[t] is the value of the portfolio at the time t; all the portfolioValues arrays must have the same length, equal to the common length of the assetPrices arrays",
                              "type": "array",
                              "minItems": 2,
                              "items": {
                                "type": "number",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                ]
              },
              "examples": {
                "From asset covariance matrix": {
                  "description": "Compute the diversification ratio of a portfolio",
                  "value": {
                    "assets": 2,
                    "assetsCovarianceMatrix": [
                      [
                        0.0025,
                        0.0005
                      ],
                      [
                        0.0005,
                        0.01
                      ]
                    ],
                    "portfolios": [
                      {
                        "assetsWeights": [
                          0.5,
                          0.5
                        ]
                      }
                    ]
                  }
                },
                "From assets prices and portfolio values": {
                  "description": "Compute the diversification ratio of a portfolio",
                  "value": {
                    "assets": [
                      {
                        "assetPrices": [
                          100,
                          101,
                          105
                        ]
                      },
                      {
                        "assetPrices": [
                          100,
                          99,
                          101
                        ]
                      }
                    ],
                    "portfolios": [
                      {
                        "portfolioValues": [
                          100,
                          100.5,
                          101
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "portfolios"
                  ],
                  "properties": {
                    "portfolios": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "portfolioDiversificationRatio"
                        ],
                        "properties": {
                          "portfolioDiversificationRatio": {
                            "description": "The diversification ratio of the portfolio",
                            "type": "number",
                            "minimum": 0
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed diversification ratio of a portfolio",
                    "value": {
                      "portfolios": [
                        {
                          "portfolioDiversificationRatio": 1.2909944487358058
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolio/analysis/correlation-spectrum": {
      "post": {
        "tags": [
          "Portfolio Analysis"
        ],
        "summary": "Correlation Spectrum",
        "description": "Compute the correlation spectrum of one or several portfolio(s).\n\nReferences\n* [Tristan Froidure, Khalid Jalalzai and Yves Choueifaty, Portfolio Rho-Representativity, International Journal of Theoretical and Applied FinanceVol. 22, No. 07, 1950034 (2019)](https://www.worldscientific.com/doi/10.1142/S0219024919500341)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "assets",
                      "assetsCovarianceMatrix",
                      "portfolios"
                    ],
                    "properties": {
                      "assets": {
                        "description": "The number of assets",
                        "type": "integer",
                        "minimum": 2
                      },
                      "assetsCovarianceMatrix": {
                        "description": "assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j",
                        "type": "array",
                        "minItems": 2,
                        "items": {
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "portfolios": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "required": [
                            "assetsWeights"
                          ],
                          "properties": {
                            "assetsWeights": {
                              "description": "assetsWeights[i] is the weight of the asset i in the portfolio, in percentage",
                              "type": "array",
                              "minItems": 1,
                              "items": {
                                "type": "number",
                                "minimum": 0,
                                "maximum": 1
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": [
                      "assets",
                      "portfolios"
                    ],
                    "properties": {
                      "assets": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "required": [
                            "assetPrices"
                          ],
                          "properties": {
                            "assetPrices": {
                              "description": "assetPrices[t] is the price of the asset at the time t; all the assetPrices arrays must have the same length",
                              "type": "array",
                              "minItems": 2,
                              "items": {
                                "type": "number",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              }
                            }
                          }
                        }
                      },
                      "portfolios": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "required": [
                            "portfolioValues"
                          ],
                          "properties": {
                            "portfolioValues": {
                              "description": "portfolioValues[t] is the value of the portfolio at the time t; all the portfolioValues arrays must have the same length, equal to the common length of the assetPrices arrays",
                              "type": "array",
                              "minItems": 2,
                              "items": {
                                "type": "number",
                                "minimum": 0,
                                "exclusiveMinimum": true
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                ]
              },
              "examples": {
                "From asset covariance matrix": {
                  "description": "Compute the correlation spectrum of a portfolio",
                  "value": {
                    "assets": 2,
                    "assetsCovarianceMatrix": [
                      [
                        0.0025,
                        0.0005
                      ],
                      [
                        0.0005,
                        0.01
                      ]
                    ],
                    "portfolios": [
                      {
                        "assetsWeights": [
                          0.5,
                          0.5
                        ]
                      }
                    ]
                  }
                },
                "From assets prices and portfolio values": {
                  "description": "Compute the correlation spectrum of a portfolio",
                  "value": {
                    "assets": [
                      {
                        "assetPrices": [
                          100,
                          101,
                          105
                        ]
                      },
                      {
                        "assetPrices": [
                          100,
                          99,
                          101
                        ]
                      }
                    ],
                    "portfolios": [
                      {
                        "portfolioValues": [
                          100,
                          100.5,
                          101
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "portfolios"
                  ],
                  "properties": {
                    "portfolios": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "portfolioCorrelationSpectrum"
                        ],
                        "properties": {
                          "portfolioCorrelationSpectrum": {
                            "description": "The correlation spectrum of the portfolio",
                            "type": "array",
                            "minItems": 2,
                            "items": {
                              "type": "number",
                              "minimum": -1,
                              "maximum": 1
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed correlation spectrum of a portfolio",
                    "value": {
                      "portfolios": [
                        {
                          "portfolioCorrelationSpectrum": [
                            0.9543679526112243,
                            0.5767242991086425,
                            0.9573818866065777
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolio/analysis/contributions/return": {
      "post": {
        "tags": [
          "Portfolio Analysis"
        ],
        "summary": "Return Contributions",
        "description": "Perform a return contribution analysis of one or several portfolio(s), optionally using groups of assets.\n\nReferences\n* Carl R. Bacon, Practical Portfolio Performance Measurement and Attribution\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets",
                  "assetsReturns",
                  "portfolios"
                ],
                "properties": {
                  "assets": {
                    "description": "The number of assets",
                    "type": "integer",
                    "minimum": 1
                  },
                  "assetsReturns": {
                    "description": "assetsReturns[i] is the arithmetic return of asset i",
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "number"
                    }
                  },
                  "assetsGroups": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "array",
                      "description": "assetsGroups[k] is the indexes of the assets belonging to the assets group k",
                      "minItems": 2,
                      "uniqueItems": true,
                      "items": {
                        "type": "integer",
                        "minimum": 1
                      }
                    }
                  },
                  "portfolios": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "assetsWeights"
                      ],
                      "properties": {
                        "assetsWeights": {
                          "description": "assetsWeights[i] is the weight of the asset i in the portfolio, in percentage",
                          "type": "array",
                          "minItems": 1,
                          "items": {
                            "type": "number",
                            "minimum": 0,
                            "maximum": 1
                          }
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Perform a return contributions analysis of a portfolio made of three assets with the first two assets grouped together",
                  "value": {
                    "assets": 3,
                    "assetsReturns": [
                      0.01,
                      -0.01,
                      0.025
                    ],
                    "assetsGroups": [
                      [
                        1,
                        2
                      ]
                    ],
                    "portfolios": [
                      {
                        "assetsWeights": [
                          0.5,
                          0.25,
                          0.25
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "portfolios"
                  ],
                  "properties": {
                    "portfolios": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "assetsReturnContributions"
                        ],
                        "properties": {
                          "assetsReturnContributions": {
                            "description": "assetsReturnContributions[i] is the return contribution of the asset i to the return of the portfolio",
                            "type": "array",
                            "minItems": 1,
                            "items": {
                              "type": "number"
                            }
                          },
                          "assetsGroupsReturnContributions": {
                            "description": "assetsGroupsReturnContributions[k] is the return contribution of the group of assets k to the return of the portfolio",
                            "type": "array",
                            "minItems": 1,
                            "items": {
                              "type": "number"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed the return contributions of three assets and 2 groups of assets",
                    "value": {
                      "portfolios": [
                        {
                          "assetsReturnContributions": [
                            0.005,
                            -0.0025,
                            0.00625
                          ],
                          "assetsGroupsReturnContributions": [
                            0.0025,
                            0.00625
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolio/analysis/contributions/risk": {
      "post": {
        "tags": [
          "Portfolio Analysis"
        ],
        "summary": "Risk Contributions",
        "description": "Perform a risk contribution analysis of one or several portfolio(s), optionally using groups of assets.\n\nReferences\n* Carl R. Bacon, Practical Portfolio Performance Measurement and Attribution\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets",
                  "assetsCovarianceMatrix",
                  "portfolios"
                ],
                "properties": {
                  "assets": {
                    "description": "The number of assets",
                    "type": "integer",
                    "minimum": 1
                  },
                  "assetsCovarianceMatrix": {
                    "description": "assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "assetsGroups": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "array",
                      "description": "assetsGroups[k] is the indexes of the assets belonging to the assets group k",
                      "minItems": 2,
                      "uniqueItems": true,
                      "items": {
                        "type": "integer",
                        "minimum": 1
                      }
                    }
                  },
                  "portfolios": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "assetsWeights"
                      ],
                      "properties": {
                        "assetsWeights": {
                          "description": "assetsWeights[i] is the weight of the asset i in the portfolio, in percentage",
                          "type": "array",
                          "minItems": 1,
                          "items": {
                            "type": "number",
                            "minimum": 0,
                            "maximum": 1
                          }
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Perform a risk contributions analysis of a portfolio made of three assets",
                  "value": {
                    "assets": 3,
                    "assetsCovarianceMatrix": [
                      [
                        0.0001,
                        0,
                        0
                      ],
                      [
                        0,
                        0.0001,
                        0
                      ],
                      [
                        0,
                        0,
                        0.04
                      ]
                    ],
                    "portfolios": [
                      {
                        "assetsWeights": [
                          0.5,
                          0.25,
                          0.25
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "portfolios"
                  ],
                  "properties": {
                    "portfolios": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "assetsMarginalRiskContributions",
                          "assetsTotalRiskContributions"
                        ],
                        "properties": {
                          "assetsMarginalRiskContributions": {
                            "description": "assetsMarginalRiskContributions[i] is the marginal risk contribution of the asset i to the risk of the portfolio",
                            "type": "array",
                            "minItems": 1,
                            "items": {
                              "type": "number"
                            }
                          },
                          "assetsTotalRiskContributions": {
                            "description": "assetsTotalRiskContributions[i] is the total risk contribution of the asset i to the risk of the portfolio",
                            "type": "array",
                            "minItems": 1,
                            "items": {
                              "type": "number"
                            }
                          },
                          "assetsGroupsMarginalRiskContributions": {
                            "description": "assetsGroupsMarginalRiskContributions[k] is the marginal risk contribution of the group of assets k to the risk of the portfolio",
                            "type": "array",
                            "minItems": 1,
                            "items": {
                              "type": "number"
                            }
                          },
                          "assetsGroupsTotalRiskContributions": {
                            "description": "assetsGroupsRiskContributions[k] is the total risk contribution of the group of assets k to the risk of the portfolio",
                            "type": "array",
                            "minItems": 1,
                            "items": {
                              "type": "number"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed the risk contributions of three assets",
                    "value": {
                      "portfolios": [
                        {
                          "assetsMarginalRiskContributions": [
                            0.0009938079899999067,
                            0.0004969039949999533,
                            0.1987615979999813
                          ]
                        },
                        {
                          "assetsTotalRiskContributions": [
                            0.0004969039949999533,
                            0.00012422599874998834,
                            0.049690399499995326
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolio/optimization/equal-weighted": {
      "post": {
        "tags": [
          "Portfolio Optimization"
        ],
        "summary": "Equal Weighted Portfolio",
        "description": "Compute the asset weights of the equal-weighted portfolio.\n\nReferences\n * [Victor DeMiguel and al., Optimal Versus Naive Diversification: How Inefficient is the 1/N Portfolio Strategy?](https://academic.oup.com/rfs/article-abstract/22/5/1915/1592901?redirectedFrom=fulltext)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets"
                ],
                "properties": {
                  "assets": {
                    "description": "The number of assets",
                    "type": "integer",
                    "minimum": 2
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute the portfolio weights for two assets",
                  "value": {
                    "assets": 2
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsWeights"
                  ],
                  "properties": {
                    "assetsWeights": {
                      "description": "assetsWeights[i] is the weight of the asset i in the portfolio, in percentage",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed equal-weighted portfolio of two assets",
                    "value": {
                      "assetsWeights": [
                        0.5,
                        0.5
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolio/optimization/inverse-variance-weighted": {
      "post": {
        "tags": [
          "Portfolio Optimization"
        ],
        "summary": "Inverse Variance Weighted Portfolio",
        "description": "Compute the asset weights of the inverse variance-weighted portfolio.\n\nReferences\n * [Raul Leote de Carvalho and al., Demystifying Equity Risk-Based Strategies: A Simple Alpha Plus Beta Description](https://doi.org/10.3905/jpm.2012.38.3.056)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets",
                  "assetsVariances"
                ],
                "properties": {
                  "assets": {
                    "description": "The number of assets",
                    "type": "integer",
                    "minimum": 2
                  },
                  "assetsVariances": {
                    "type": "array",
                    "description": "assetsVariances[i] is the variance of the asset i",
                    "minItems": 2,
                    "items": {
                      "type": "number",
                      "minimum": 0
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute the portfolio weights for two assets with variances equal to 1 and 0.5",
                  "value": {
                    "assets": 2,
                    "assetsVariances": [
                      1,
                      0.5
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsWeights"
                  ],
                  "properties": {
                    "assetsWeights": {
                      "description": "assetsWeights[i] is the weight of the asset i in the portfolio, in percentage",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed inverse variance-weighted portfolio of two assets",
                    "value": {
                      "assetsWeights": [
                        0.3333333333333333,
                        0.6666666666666666
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolio/optimization/inverse-volatility-weighted": {
      "post": {
        "tags": [
          "Portfolio Optimization"
        ],
        "summary": "Inverse Volatility Weighted Portfolio",
        "description": "Compute the asset weights of the inverse volatility-weighted portfolio.\n\nReferences\n * [Raul Leote de Carvalho and al., Demystifying Equity Risk-Based Strategies: A Simple Alpha Plus Beta Description](https://doi.org/10.3905/jpm.2012.38.3.056)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets",
                  "assetsVolatilities"
                ],
                "properties": {
                  "assets": {
                    "description": "The number of assets",
                    "type": "integer",
                    "minimum": 2
                  },
                  "assetsVolatilities": {
                    "type": "array",
                    "description": "assetsVolatilities[i] is the volatility of the asset i",
                    "minItems": 2,
                    "items": {
                      "type": "number",
                      "minimum": 0
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute the portfolio weights for two assets with volatilities equal to 0.05 and 0.1",
                  "value": {
                    "assets": 2,
                    "assetsVolatilities": [
                      0.05,
                      0.1
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsWeights"
                  ],
                  "properties": {
                    "assetsWeights": {
                      "description": "assetsWeights[i] is the weight of the asset i in the portfolio, in percentage",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed inverse volatility-weighted portfolio of two assets",
                    "value": {
                      "assetsWeights": [
                        0.6666666666666666,
                        0.3333333333333333
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolio/optimization/equal-volatility-weighted": {
      "post": {
        "tags": [
          "Portfolio Optimization"
        ],
        "summary": "Equal Volatility Weighted Portfolio",
        "description": "Compute the asset weights of the equal volatility-weighted portfolio.\n\nReferences\n * [Tristan Froidure, Khalid Jalalzai and Yves Choueifaty, Portfolio Rho-Representativity, International Journal of Theoretical and Applied FinanceVol. 22, No. 07, 1950034 (2019)](https://www.worldscientific.com/doi/10.1142/S0219024919500341)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets",
                  "assetsVolatilities"
                ],
                "properties": {
                  "assets": {
                    "description": "The number of assets",
                    "type": "integer",
                    "minimum": 2
                  },
                  "assetsVolatilities": {
                    "type": "array",
                    "description": "assetsVolatilities[i] is the volatility of the asset i",
                    "minItems": 2,
                    "items": {
                      "type": "number",
                      "minimum": 0
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute the portfolio weights for two assets with volatilities equal to 0.05 and 0.1",
                  "value": {
                    "assets": 2,
                    "assetsVolatilities": [
                      0.05,
                      0.1
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsWeights"
                  ],
                  "properties": {
                    "assetsWeights": {
                      "description": "assetsWeights[i] is the weight of the asset i in the portfolio, in percentage",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed equal volatility-weighted portfolio of two assets",
                    "value": {
                      "assetsWeights": [
                        0.3333333333333333,
                        0.6666666666666666
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolio/optimization/equal-risk-contributions": {
      "post": {
        "tags": [
          "Portfolio Optimization"
        ],
        "summary": "Equal Risk Contributions Portfolio",
        "description": "Compute the asset weights of the equal risk contributions portfolio, optionally subject to:  \n* Minimum and maximum weights constraints  \n\nReferences\n * [Richard, Jean-Charles and Roncalli, Thierry, Constrained Risk Budgeting Portfolios: Theory, Algorithms, Applications & Puzzles](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3331184)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets",
                  "assetsCovarianceMatrix"
                ],
                "properties": {
                  "assets": {
                    "description": "The number of assets",
                    "type": "integer",
                    "minimum": 2
                  },
                  "assetsCovarianceMatrix": {
                    "description": "assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "constraints": {
                    "type": "object",
                    "properties": {
                      "minimumAssetsWeights": {
                        "description": "minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "maximumAssetsWeights": {
                        "description": "maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute the portfolio weights for two assets, with maximum assets weights constraints",
                  "value": {
                    "assets": 2,
                    "assetsCovarianceMatrix": [
                      [
                        0.0025,
                        0.0005
                      ],
                      [
                        0.0005,
                        0.01
                      ]
                    ],
                    "constraints": {
                      "maximumAssetsWeights": [
                        0.4,
                        1
                      ]
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsWeights"
                  ],
                  "properties": {
                    "assetsWeights": {
                      "description": "assetsWeights[i] is the weight of the asset i in the portfolio, in percentage",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed portfolio of two assets",
                    "value": {
                      "assetsWeights": [
                        0.4,
                        0.5999975015091795
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolios/optimization/equal-risk-contributions/clustering-based": {
      "post": {
        "tags": [
          "Portfolio Optimization"
        ],
        "summary": "Clustering-based Equal Risk Contributions Portfolio",
        "description": "Compute the asset weights of the clustering-based equal risk contributions portfolio, optionally subject to:  \n* Minimum and maximum weights constraints  \n       \nReferences\n * [CSSA, Cluster Risk Parity](https://cssanalytics.wordpress.com/2013/01/03/cluster-risk-parity/)\n * [Richard, Jean-Charles and Roncalli, Thierry, Constrained Risk Budgeting Portfolios: Theory, Algorithms, Applications & Puzzles](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3331184)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets",
                  "assetsCovarianceMatrix",
                  "assetsGroups"
                ],
                "properties": {
                  "assets": {
                    "description": "The number of assets",
                    "type": "integer",
                    "minimum": 2
                  },
                  "assetsCovarianceMatrix": {
                    "description": "assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "assetsGroups": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "array",
                      "description": "assetsGroups[k] is the indexes of the assets belonging to the assets group k in the portfolio",
                      "minItems": 1,
                      "uniqueItems": true,
                      "items": {
                        "type": "integer",
                        "minimum": 1
                      }
                    }
                  },
                  "constraints": {
                    "type": "object",
                    "properties": {
                      "minimumAssetsWeights": {
                        "description": "minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "maximumAssetsWeights": {
                        "description": "maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute the portfolio weights for three assets, with the first two assets grouped together",
                  "value": {
                    "assets": 3,
                    "assetsCovarianceMatrix": [
                      [
                        0.05,
                        0.02,
                        0
                      ],
                      [
                        0.02,
                        0.07,
                        0.5
                      ],
                      [
                        0,
                        0.5,
                        0.1
                      ]
                    ],
                    "assetsGroups": [
                      [
                        1,
                        2
                      ],
                      [
                        3
                      ]
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsWeights"
                  ],
                  "properties": {
                    "assetsWeights": {
                      "description": "assetsWeights[i] is the weight of the asset i in the portfolio, in percentage",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed portfolio of three assets",
                    "value": {
                      "assetsWeights": [
                        0.4,
                        0.3,
                        0.3
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolios/optimization/risk-budgeting": {
      "post": {
        "tags": [
          "Portfolio Optimization"
        ],
        "summary": "Risk Budgeting Portfolio",
        "description": "Compute the asset weights of the risk budgeting portfolio, optionally subject to:  \n* Minimum and maximum weights constraints  \n\nReferences\n * [Bruder, Benjamin and Roncalli, Thierry, Managing Risk Exposures Using the Risk Budgeting Approach](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=2009778)\n * [Richard, Jean-Charles and Roncalli, Thierry, Constrained Risk Budgeting Portfolios: Theory, Algorithms, Applications & Puzzles](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3331184)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets",
                  "assetsCovarianceMatrix",
                  "assetsRiskBudgets"
                ],
                "properties": {
                  "assets": {
                    "description": "The number of assets",
                    "type": "integer",
                    "minimum": 2
                  },
                  "assetsCovarianceMatrix": {
                    "description": "assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "assetsRiskBudgets": {
                    "description": "assetsRiskBudgets[i] is the risk budget allocated to the asset i, in percentage; the sum of all the assetsRiskBudgets must be equal to 1",
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "number",
                      "minimum": 0,
                      "exclusiveMinimum": true,
                      "maximum": 1,
                      "exclusiveMaximum": true
                    }
                  },
                  "constraints": {
                    "type": "object",
                    "properties": {
                      "minimumAssetsWeights": {
                        "description": "minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "maximumAssetsWeights": {
                        "description": "maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute the portfolio weights for two assets",
                  "value": {
                    "assets": 2,
                    "assetsCovarianceMatrix": [
                      [
                        0.0025,
                        0.0005
                      ],
                      [
                        0.0005,
                        0.01
                      ]
                    ],
                    "assetsRiskBudgets": [
                      0.4,
                      0.6
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsWeights"
                  ],
                  "properties": {
                    "assetsWeights": {
                      "description": "assetsWeights[i] is the weight of the asset i in the portfolio, in percentage",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed portfolio of two assets",
                    "value": {
                      "assetsWeights": [
                        0.4,
                        0.5999975015091795
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolio/optimization/maximum-decorrelation": {
      "post": {
        "tags": [
          "Portfolio Optimization"
        ],
        "summary": "Maximum Decorrelation Portfolio",
        "description": "Compute the asset weights of the maximum decorrelation portfolio, optionally subject to:  \n* Minimum and maximum weights constraints\n* Minimum and maximum group weights constraints\n* Minimum and maximum portfolio exposure constraints\n\nReferences\n * [F. Goltz, S. Sivasubramanian, Scientific Beta Maximum Decorrelation Indices](http://www.scientificbeta.com/download/file/scientific-beta-max-decorrelation-indices)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets",
                  "assetsCorrelationMatrix"
                ],
                "properties": {
                  "assets": {
                    "description": "The number of assets",
                    "type": "integer",
                    "minimum": 2
                  },
                  "assetsReturns": {
                    "description": "assetsReturns[i] is the arithmetic return of asset i",
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "number"
                    }
                  },
                  "assetsCorrelationMatrix": {
                    "description": "assetsCorrelationMatrix[i][j] is the correlation between the asset i and the asset j",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "constraints": {
                    "type": "object",
                    "properties": {
                      "minimumAssetsWeights": {
                        "description": "minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "maximumAssetsWeights": {
                        "description": "maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "assetsGroups": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "array",
                          "description": "assetsGroups[k] is the indexes of the assets belonging to the assets group k in the portfolio; exclusive with assetsGroupsMatrix",
                          "minItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": "integer",
                            "minimum": 1
                          }
                        }
                      },
                      "assetsGroupsMatrix": {
                        "description": "assetsGroupsMatrix[k][i] is the weight of the asset i in the group of assets k; exclusive with assetsGroups",
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "maximumAssetsGroupsWeights": {
                        "description": "maximumAssetsGroupsWeights[k] is the maximum weight of the assets group k in the portfolio, in percentage between 0 and 1 if assetsGroups is provided",
                        "type": "array",
                        "items": {
                          "type": "number"
                        }
                      },
                      "minimumPortfolioExposure": {
                        "description": "The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1
                      },
                      "maximumPortfolioExposure": {
                        "description": "The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute the portfolio weights for three assets",
                  "value": {
                    "assets": 3,
                    "assetsCorrelationMatrix": [
                      [
                        1,
                        0.9,
                        0.85
                      ],
                      [
                        0.9,
                        1,
                        0.7
                      ],
                      [
                        0.85,
                        0.7,
                        1
                      ]
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsWeights"
                  ],
                  "properties": {
                    "assetsWeights": {
                      "description": "assetsWeights[i] is the weight of the asset i in the portfolio, in percentage",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed maximum decorrelation portfolio of three assets",
                    "value": {
                      "assetsWeights": [
                        0,
                        0.5,
                        0.5
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolio/optimization/minimum-correlation": {
      "post": {
        "tags": [
          "Portfolio Optimization"
        ],
        "summary": "Minimum Correlation Portfolio",
        "description": "Compute the asset weights of the minimum correlation portfolio, which is a portfolio built using the minimum correlation algorithm.\n\nReferences\n * [CSSA, Minimum Correlation Algorithm Paper Release](https://cssanalytics.wordpress.com/2012/09/21/minimum-correlation-algorithm-paper-release/)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets",
                  "assetsCorrelationMatrix",
                  "assetsVolatilities"
                ],
                "properties": {
                  "assets": {
                    "type": "integer",
                    "minimum": 2
                  },
                  "assetsCorrelationMatrix": {
                    "type": "array",
                    "description": "assetsCorrelationMatrix[i][j] is the correlation between the asset i and the asset j; required if assetsReturns is not provided",
                    "minItems": 2,
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "assetsVolatilities": {
                    "type": "array",
                    "description": "assetsVariances[i] is the volatility of the asset i; required if assetsCorrelationMatrix is provided and assetsVariances is not provided",
                    "minItems": 2,
                    "items": {
                      "type": "number",
                      "minimum": 0
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute the portfolio weights for three assets",
                  "value": {
                    "assets": 3,
                    "assetsCorrelationMatrix": [
                      [
                        1,
                        0.9,
                        0.85
                      ],
                      [
                        0.9,
                        1,
                        0.7
                      ],
                      [
                        0.85,
                        0.7,
                        1
                      ]
                    ],
                    "assetsVolatilities": [
                      0.14,
                      0.18,
                      0.22
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsWeights"
                  ],
                  "properties": {
                    "assetsWeights": {
                      "description": "assetsWeights[i] is the weight of the asset i in the portfolio, in percentage",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed minimum correlation portfolio portfolio of three assets",
                    "value": {
                      "assetsWeights": [
                        0.21059806981924115,
                        0.3087866303991204,
                        0.48061529978163836
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolio/optimization/most-diversified": {
      "post": {
        "tags": [
          "Portfolio Optimization"
        ],
        "summary": "Most Diversified Portfolio",
        "description": "Compute the asset weights of the most diversified portfolio, optionally subject to:  \n* Minimum and maximum weights constraints\n* Minimum and maximum group weights constraints\n* Minimum and maximum portfolio exposure constraints\n\nReferences\n * [Yves Choueifaty and Yves Coignard, Toward Maximum Diversification, The Journal of Portfolio Management Fall 2008, 35 (1) 40-51](https://doi.org/10.3905/JPM.2008.35.1.40)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets",
                  "assetsCovarianceMatrix"
                ],
                "properties": {
                  "assets": {
                    "description": "The number of assets",
                    "type": "integer",
                    "minimum": 2
                  },
                  "assetsCovarianceMatrix": {
                    "description": "assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "constraints": {
                    "type": "object",
                    "properties": {
                      "minimumAssetsWeights": {
                        "description": "minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "maximumAssetsWeights": {
                        "description": "maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "assetsGroups": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "array",
                          "description": "assetsGroups[k] is the indexes of the assets belonging to the assets group k in the portfolio; exclusive with assetsGroupsMatrix",
                          "minItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": "integer",
                            "minimum": 1
                          }
                        }
                      },
                      "assetsGroupsMatrix": {
                        "description": "assetsGroupsMatrix[k][i] is the weight of the asset i in the group of assets k; exclusive with assetsGroups",
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "maximumAssetsGroupsWeights": {
                        "description": "maximumAssetsGroupsWeights[k] is the maximum weight of the assets group k in the portfolio, in percentage between 0 and 1 if assetsGroups is provided",
                        "type": "array",
                        "items": {
                          "type": "number"
                        }
                      },
                      "minimumPortfolioExposure": {
                        "description": "The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1
                      },
                      "maximumPortfolioExposure": {
                        "description": "The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute the portfolio weights for two assets",
                  "value": {
                    "assets": 2,
                    "assetsCovarianceMatrix": [
                      [
                        0.04,
                        0.01
                      ],
                      [
                        0.01,
                        0.01
                      ]
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsWeights"
                  ],
                  "properties": {
                    "assetsWeights": {
                      "description": "assetsWeights[i] is the weight of the asset i in the portfolio, in percentage",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed most diversified portfolio of two assets",
                    "value": {
                      "assetsWeights": [
                        0.33333333333333337,
                        0.6666666666666666
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolio/optimization/minimum-variance": {
      "post": {
        "tags": [
          "Portfolio Optimization / Mean-Variance"
        ],
        "summary": "Minimum Variance Portfolio",
        "description": "Compute the asset weights of the minimum variance portfolio, optionally subject to:  \n* Minimum and maximum weights constraints\n* Minimum and maximum group weights constraints\n* Minimum and maximum portfolio exposure constraints\n\nReferences\n * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets",
                  "assetsCovarianceMatrix"
                ],
                "properties": {
                  "assets": {
                    "description": "The number of assets",
                    "type": "integer",
                    "minimum": 2
                  },
                  "assetsReturns": {
                    "description": "assetsReturns[i] is the arithmetic return of asset i",
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "number"
                    }
                  },
                  "assetsCovarianceMatrix": {
                    "description": "assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "constraints": {
                    "type": "object",
                    "properties": {
                      "minimumAssetsWeights": {
                        "description": "minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "maximumAssetsWeights": {
                        "description": "maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "assetsGroups": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "array",
                          "description": "assetsGroups[k] is the indexes of the assets belonging to the assets group k in the portfolio; exclusive with assetsGroupsMatrix",
                          "minItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": "integer",
                            "minimum": 1
                          }
                        }
                      },
                      "assetsGroupsMatrix": {
                        "description": "assetsGroupsMatrix[k][i] is the weight of the asset i in the group of assets k; exclusive with assetsGroups",
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "maximumAssetsGroupsWeights": {
                        "description": "maximumAssetsGroupsWeights[k] is the maximum weight of the assets group k in the portfolio, in percentage between 0 and 1 if assetsGroups is provided",
                        "type": "array",
                        "items": {
                          "type": "number"
                        }
                      },
                      "minimumPortfolioExposure": {
                        "description": "The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1
                      },
                      "maximumPortfolioExposure": {
                        "description": "The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute the portfolio weights for two assets, with maximum assets weights and portfolio exposure constraints",
                  "value": {
                    "assets": 2,
                    "assetsCovarianceMatrix": [
                      [
                        0.0025,
                        0.0005
                      ],
                      [
                        0.0005,
                        0.01
                      ]
                    ],
                    "constraints": {
                      "maximumAssetsWeights": [
                        0.4,
                        1
                      ],
                      "minimumPortfolioExposure": 0.25,
                      "maximumPortfolioExposure": 0.5
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsWeights"
                  ],
                  "properties": {
                    "assetsWeights": {
                      "description": "assetsWeights[i] is the weight of the asset i in the portfolio, in percentage",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed minimum variance portfolio of two assets",
                    "value": {
                      "assetsWeights": [
                        0.4,
                        0.09999999999998999
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolio/optimization/minimum-variance/diversified": {
      "post": {
        "tags": [
          "Portfolio Optimization / Mean-Variance"
        ],
        "summary": "Diversified Minimum Variance Portfolio",
        "description": "Compute the asset weights of the diversified minimum variance portfolio, as defined in the first reference, optionally subject to:  \n* Minimum and maximum weights constraints\n* Minimum and maximum group weights constraints\n* Minimum and maximum portfolio exposure constraints\n\nThe diversification measure used in the optimization procedure is the [Herfindahl-Hirschman Index](https://en.wikipedia.org/wiki/Herfindahl%E2%80%93Hirschman_index) of the assets weights.\n\nReferences\n * [Alejandro Corvalan, 2005. Well Diversified Efficient Portfolios, Working Papers Central Bank of Chile 336, Central Bank of Chile](https://ideas.repec.org/p/chb/bcchwp/336.html)\n * [Bouchaud, Jean-Philippe and Potters, Marc and Aguilar, Jean-Pierre, Missing Information and Asset Allocation, arXiv, 1997](https://arxiv.org/abs/cond-mat/9707042)\n * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets",
                  "assetsCovarianceMatrix"
                ],
                "properties": {
                  "assets": {
                    "description": "The number of assets",
                    "type": "integer",
                    "minimum": 2
                  },
                  "assetsReturns": {
                    "description": "assetsReturns[i] is the arithmetic return of asset i",
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "number"
                    }
                  },
                  "assetsCovarianceMatrix": {
                    "description": "assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "portfolioReturnTolerance": {
                    "description": "The relative tolerance over the minimum variance portfolio return, if applicable",
                    "type": "number",
                    "minimum": 0,
                    "default": 0.1
                  },
                  "portfolioVolatilityTolerance": {
                    "description": "The relative tolerance over the minimum variance portfolio volatility",
                    "type": "number",
                    "minimum": 0,
                    "default": 0.1
                  },
                  "constraints": {
                    "type": "object",
                    "properties": {
                      "minimumAssetsWeights": {
                        "description": "minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "maximumAssetsWeights": {
                        "description": "maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "assetsGroups": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "array",
                          "description": "assetsGroups[k] is the indexes of the assets belonging to the assets group k in the portfolio; exclusive with assetsGroupsMatrix",
                          "minItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": "integer",
                            "minimum": 1
                          }
                        }
                      },
                      "assetsGroupsMatrix": {
                        "description": "assetsGroupsMatrix[k][i] is the weight of the asset i in the group of assets k; exclusive with assetsGroups",
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "maximumAssetsGroupsWeights": {
                        "description": "maximumAssetsGroupsWeights[k] is the maximum weight of the assets group k in the portfolio, in percentage between 0 and 1 if assetsGroups is provided",
                        "type": "array",
                        "items": {
                          "type": "number"
                        }
                      },
                      "minimumPortfolioExposure": {
                        "description": "The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1
                      },
                      "maximumPortfolioExposure": {
                        "description": "The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute the portfolio weights for two assets, with maximum assets weights and portfolio exposure constraints",
                  "value": {
                    "assets": 2,
                    "assetsCovarianceMatrix": [
                      [
                        0.0025,
                        0.0005
                      ],
                      [
                        0.0005,
                        0.01
                      ]
                    ],
                    "constraints": {
                      "maximumAssetsWeights": [
                        0.4,
                        1
                      ],
                      "minimumPortfolioExposure": 0.5,
                      "maximumPortfolioExposure": 0.5
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsWeights"
                  ],
                  "properties": {
                    "assetsWeights": {
                      "description": "assetsWeights[i] is the weight of the asset i in the portfolio, in percentage",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed diversified minimum variance portfolio of two assets",
                    "value": {
                      "assetsWeights": [
                        0.31288809725799416,
                        0.18711190967754268
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolios/optimization/minimum-variance/resampling-based": {
      "post": {
        "tags": [
          "Portfolio Optimization / Mean-Variance"
        ],
        "summary": "Resampling-Based Minimum Variance Portfolio",
        "description": "Compute the asset weights of the resampling-based minimum variance portfolio, using a mix of the methodologies described in the first and the second references, optionally subject to:  \n* Minimum and maximum weights constraints\n* Minimum and maximum group weights constraints\n* Minimum and maximum portfolio exposure constraints\n\nReferences\n * [Richard O Michaud, Robert O Michaud, Efficient Asset Management: A Practical Guide to Stock Portfolio Optimization and Asset Allocation](https://academic.oup.com/book/52209/chapter-abstract/421081595?redirectedFrom=fulltext)       \n * [F. Fabozzi, P. Kolm, D. Pachamanova, and S. Focardi. Robust portfolio optimization and management. John Wiley & Sons, 2007](https://www.wiley.com/en-us/Robust+Portfolio+Optimization+and+Management-p-9780471921226)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets",
                  "assetsCovarianceMatrix"
                ],
                "properties": {
                  "assets": {
                    "description": "The number of assets",
                    "type": "integer",
                    "minimum": 2
                  },
                  "assetsReturns": {
                    "description": "assetsReturns[i] is the arithmetic return of asset i",
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "number"
                    }
                  },
                  "assetsCovarianceMatrix": {
                    "description": "assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "simulatedPortfolios": {
                    "description": "The number of portfolios to simulate",
                    "type": "integer",
                    "minimum": 1,
                    "default": 128
                  },
                  "simulatedPortfoliosAggregationMethod": {
                    "description": "The method to aggregate the simulated portfolios",
                    "type": "string",
                    "enum": [
                      "average",
                      "median"
                    ],
                    "default": "average"
                  },
                  "assetsReturnsUncertaintyIntervals": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "array",
                      "description": "assetsReturnsUncertaintyIntervals[i][0] (resp. assetsReturnsUncertaintyIntervals[i][1]) is the lower (resp. upper) bound of the uncertainty interval around the i-th asset arithmetic return assetsReturns[i]; defaults to the interval [0.95* assetsReturns[i], 1.05 * assetsReturns[i]]",
                      "minItems": 2,
                      "maxItems": 2,
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "assetsStandardDeviationsUncertaintyIntervals": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "array",
                      "description": "assetsStandardDeviationsUncertaintyIntervals[i][0] (resp. assetsStandardDeviationsUncertaintyIntervals[i][1]) is the lower (resp. upper) bound of the uncertainty interval around the i-th asset standard deviation sqrt(assetsCovarianceMatrix[i][i]); defaults to the interval [0.95 * sqrt(assetsCovarianceMatrix[i][i]), 1.05 * sqrt(assetsCovarianceMatrix[i][i])]",
                      "minItems": 2,
                      "maxItems": 2,
                      "items": {
                        "type": "number",
                        "minimum": 0
                      }
                    }
                  },
                  "assetsCorrelationMatrixUncertaintyLevel": {
                    "description": "The uncertainty level on the coefficients of the asset correlation matrix associated to assetsCovarianceMatrix; defaults to 0.10",
                    "type": "number",
                    "minimum": 0,
                    "maximum": 2
                  },
                  "constraints": {
                    "type": "object",
                    "properties": {
                      "minimumAssetsWeights": {
                        "description": "minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "maximumAssetsWeights": {
                        "description": "maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "assetsGroups": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "array",
                          "description": "assetsGroups[k] is the indexes of the assets belonging to the assets group k in the portfolio; exclusive with assetsGroupsMatrix",
                          "minItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": "integer",
                            "minimum": 1
                          }
                        }
                      },
                      "assetsGroupsMatrix": {
                        "description": "assetsGroupsMatrix[k][i] is the weight of the asset i in the group of assets k; exclusive with assetsGroups",
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "maximumAssetsGroupsWeights": {
                        "description": "maximumAssetsGroupsWeights[k] is the maximum weight of the assets group k in the portfolio, in percentage between 0 and 1 if assetsGroups is provided",
                        "type": "array",
                        "items": {
                          "type": "number"
                        }
                      },
                      "minimumPortfolioExposure": {
                        "description": "The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1
                      },
                      "maximumPortfolioExposure": {
                        "description": "The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute the portfolio weights for two assets, with a 0.25 uncertainty level around the asset correlations",
                  "value": {
                    "assets": 2,
                    "assetsCovarianceMatrix": [
                      [
                        0.0025,
                        0.0005
                      ],
                      [
                        0.0005,
                        0.01
                      ]
                    ],
                    "assetsCorrelationMatrixUncertaintyLevel": 0.25
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsWeights"
                  ],
                  "properties": {
                    "assetsWeights": {
                      "description": "assetsWeights[i] is the weight of the asset i in the portfolio, in percentage",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed portfolio of three assets",
                    "value": {
                      "assetsWeights": [
                        0,
                        0.3333333333333333,
                        0.6666666666666666
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolio/optimization/minimum-variance/subset-resampling-based": {
      "post": {
        "tags": [
          "Portfolio Optimization / Mean-Variance"
        ],
        "summary": "Subset Resampling-Based Minimum Variance Portfolio",
        "description": "Compute the asset weights of the subset resampling-based minimum variance portfolio, using the methodology described in the first and the second references, optionally subject to:  \n* Minimum and maximum weights constraints\n* Minimum and maximum group weights constraints\n* Minimum and maximum portfolio exposure constraints\n\nReferences\n * [CSSA, Random Subspace Optimization (RSO)](https://cssanalytics.wordpress.com/2013/10/06/random-subspace-optimization-rso/)\n * [Subset Optimization for Asset Allocation,Benjamin J. Gillen](https://www.bengillen.com/uploads/1/2/3/8/123891022/subsets.pdf)\n * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets",
                  "assetsCovarianceMatrix"
                ],
                "properties": {
                  "assets": {
                    "description": "The number of assets",
                    "type": "integer",
                    "minimum": 2
                  },
                  "assetsReturns": {
                    "description": "assetsReturns[i] is the arithmetic return of asset i",
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "number"
                    }
                  },
                  "assetsCovarianceMatrix": {
                    "description": "assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "subsetSize": {
                    "description": "The number of assets to include in each subset portfolio; defaults to a value of order the square root of the total number of assets",
                    "type": "integer",
                    "minimum": 2
                  },
                  "simulatedPortfolios": {
                    "description": "The number of simulated portfolios to compute; only applicable if the generation method for the subset portfolios is random sampling",
                    "type": "integer",
                    "minimum": 1,
                    "default": 128
                  },
                  "simulatedPortfoliosGenerationMethod": {
                    "description": "The method to generate the simulated portfolios",
                    "type": "string",
                    "enum": [
                      "complete",
                      "random"
                    ],
                    "default": "random"
                  },
                  "simulatedPortfoliosAggregationMethod": {
                    "description": "The method to aggregate the simulated portfolios",
                    "type": "string",
                    "enum": [
                      "average",
                      "median"
                    ],
                    "default": "average"
                  },
                  "constraints": {
                    "type": "object",
                    "properties": {
                      "minimumAssetsWeights": {
                        "description": "minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "maximumAssetsWeights": {
                        "description": "maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "assetsGroups": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "array",
                          "description": "assetsGroups[k] is the indexes of the assets belonging to the assets group k in the portfolio; exclusive with assetsGroupsMatrix",
                          "minItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": "integer",
                            "minimum": 1
                          }
                        }
                      },
                      "assetsGroupsMatrix": {
                        "description": "assetsGroupsMatrix[k][i] is the weight of the asset i in the group of assets k; exclusive with assetsGroups",
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "maximumAssetsGroupsWeights": {
                        "description": "maximumAssetsGroupsWeights[k] is the maximum weight of the assets group k in the portfolio, in percentage between 0 and 1 if assetsGroups is provided",
                        "type": "array",
                        "items": {
                          "type": "number"
                        }
                      },
                      "minimumPortfolioExposure": {
                        "description": "The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1
                      },
                      "maximumPortfolioExposure": {
                        "description": "The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute the portfolio weights for two assets, with maximum assets weights and portfolio exposure constraints; because of only two assets, the computed portfolio will be identical to the equivalent minimum variance portfolio",
                  "value": {
                    "assets": 2,
                    "assetsCovarianceMatrix": [
                      [
                        0.0025,
                        0.0005
                      ],
                      [
                        0.0005,
                        0.01
                      ]
                    ],
                    "simulatedPortfolios": 1,
                    "constraints": {
                      "maximumAssetsWeights": [
                        0.4,
                        1
                      ],
                      "minimumPortfolioExposure": 0.5,
                      "maximumPortfolioExposure": 0.5
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsWeights"
                  ],
                  "properties": {
                    "assetsWeights": {
                      "description": "assetsWeights[i] is the weight of the asset i in the portfolio, in percentage",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed portfolio of two assets",
                    "value": {
                      "assetsWeights": [
                        0.4,
                        0.09999999999998999
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolio/optimization/hierarchical-risk-parity": {
      "post": {
        "tags": [
          "Portfolio Optimization"
        ],
        "summary": "Hierarchical Risk Parity Portfolio",
        "description": "Compute the asset weights of the hierarchical risk parity portfolio, optionally subject to:  \n* Minimum and maximum weights constraints\n* Minimum and maximum portfolio exposure constraints\n\nReferences\n * [Lopez de Prado, M. (2016). Building diversified portfolios that outperform out-of-sample. Journal of Portfolio Management, 42(4), 59\u201369](https://jpm.pm-research.com/content/42/4/59)\n * [Johann Pfitzinger & Nico Katzke, 2019. A constrained hierarchical risk parity algorithm with cluster-based capital allocation. Working Papers 14/2019, Stellenbosch University, Department of Economics](https://ideas.repec.org/p/sza/wpaper/wpapers328.html)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets",
                  "assetsCovarianceMatrix"
                ],
                "properties": {
                  "assets": {
                    "description": "The number of assets",
                    "type": "integer",
                    "minimum": 2
                  },
                  "assetsCovarianceMatrix": {
                    "description": "assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "clusteringMethod": {
                    "type": "string",
                    "description": "The hierarchical clustering method to use",
                    "enum": [
                      "singleLinkage",
                      "averageLinkage",
                      "completeLinkage",
                      "wardLinkage"
                    ],
                    "default": "singleLinkage"
                  },
                  "clusteringOrdering": {
                    "type": "string",
                    "description": "The order to impose on the hierarchical clustering tree leaves",
                    "enum": [
                      "r-hclust",
                      "optimal"
                    ],
                    "default": "r-hclust"
                  },
                  "constraints": {
                    "type": "object",
                    "properties": {
                      "minimumAssetsWeights": {
                        "description": "minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "maximumAssetsWeights": {
                        "description": "maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "minimumPortfolioExposure": {
                        "description": "The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1
                      },
                      "maximumPortfolioExposure": {
                        "description": "The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute the portfolio weights for two assets, with maximum assets weights and portfolio exposure constraints",
                  "value": {
                    "assets": 2,
                    "assetsCovarianceMatrix": [
                      [
                        0.0025,
                        0.0005
                      ],
                      [
                        0.0005,
                        0.01
                      ]
                    ],
                    "constraints": {
                      "maximumAssetsWeights": [
                        0.4,
                        1
                      ],
                      "minimumPortfolioExposure": 0.5,
                      "maximumPortfolioExposure": 0.5
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsWeights"
                  ],
                  "properties": {
                    "assetsWeights": {
                      "description": "assetsWeights[i] is the weight of the asset i in the portfolio, in percentage",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed portfolio of two assets",
                    "value": {
                      "assetsWeights": [
                        0.4,
                        0.09999999999998999
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolio/optimization/hierarchical-risk-parity/clustering-based": {
      "post": {
        "tags": [
          "Portfolio Optimization"
        ],
        "summary": "Hierarchical Clustering-Based Risk Parity Portfolio",
        "description": "Compute the asset weights of the hierarchical clustering-based risk parity portfolio, optionally subject to:  \n* Minimum and maximum weights constraints\n* Minimum and maximum portfolio exposure constraints\n\nReferences\n * [Machine Learning for Asset Management: New Developments and Financial Applications, Emmanuel Jurczenko, Chapter 9, Harald Lohre,Carsten Rother,Kilian Axel Sch\u00e4fer, Hierarchical Risk Parity: Accounting for Tail Dependencies in Multi-asset Multi-factor Allocations](https://onlinelibrary.wiley.com/doi/10.1002/9781119751182.ch9)\n * [Thomas Raffinot, Hierarchical Clustering-Based Asset Allocation, The Journal of Portfolio Management Multi-Asset Special Issue 2018, 44 (2) 89-99](https://jpm.pm-research.com/content/44/2/89.abstract)\n * [Raffinot, Thomas, The Hierarchical Equal Risk Contribution Portfolio](https://ssrn.com/abstract=3237540)\n * [Johann Pfitzinger & Nico Katzke, 2019. A constrained hierarchical risk parity algorithm with cluster-based capital allocation. Working Papers 14/2019, Stellenbosch University, Department of Economics](https://ideas.repec.org/p/sza/wpaper/wpapers328.html)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets",
                  "assetsCovarianceMatrix"
                ],
                "properties": {
                  "assets": {
                    "description": "The number of assets",
                    "type": "integer",
                    "minimum": 2
                  },
                  "assetsCovarianceMatrix": {
                    "description": "assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "clusteringMethod": {
                    "type": "string",
                    "description": "The hierarchical clustering method to use",
                    "enum": [
                      "singleLinkage",
                      "averageLinkage",
                      "completeLinkage",
                      "wardLinkage"
                    ],
                    "default": "wardLinkage"
                  },
                  "clusteringOrdering": {
                    "type": "string",
                    "description": "The order to impose on the hierarchical clustering tree leaves",
                    "enum": [
                      "r-hclust",
                      "optimal"
                    ],
                    "default": "r-hclust"
                  },
                  "clusters": {
                    "description": "The number of clusters to use in the hierarchical clustering tree; if not provided, the number of clusters to use is computed using the gap statistic method, as described in the first reference",
                    "type": "integer",
                    "minimum": 1
                  },
                  "acrossClusterAllocationMethod": {
                    "type": "string",
                    "description": "The allocation method to use across clusters",
                    "enum": [
                      "equalWeighting",
                      "inverseVolatility",
                      "inverseVariance"
                    ],
                    "default": "equalWeighting"
                  },
                  "withinClusterAllocationMethod": {
                    "type": "string",
                    "description": "The allocation method to use within clusters",
                    "enum": [
                      "equalWeighting",
                      "inverseVolatility",
                      "inverseVariance"
                    ],
                    "default": "equalWeighting"
                  },
                  "constraints": {
                    "type": "object",
                    "properties": {
                      "minimumAssetsWeights": {
                        "description": "minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "maximumAssetsWeights": {
                        "description": "maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "minimumPortfolioExposure": {
                        "description": "The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1
                      },
                      "maximumPortfolioExposure": {
                        "description": "The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute the portfolio weights for two assets, with maximum assets weights and portfolio exposure constraints",
                  "value": {
                    "assets": 2,
                    "assetsCovarianceMatrix": [
                      [
                        0.0025,
                        0.0005
                      ],
                      [
                        0.0005,
                        0.01
                      ]
                    ],
                    "constraints": {
                      "maximumAssetsWeights": [
                        0.4,
                        1
                      ],
                      "minimumPortfolioExposure": 0.5,
                      "maximumPortfolioExposure": 0.5
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsWeights"
                  ],
                  "properties": {
                    "assetsWeights": {
                      "description": "assetsWeights[i] is the weight of the asset i in the portfolio, in percentage",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed portfolio of two assets",
                    "value": {
                      "assetsWeights": [
                        0.4,
                        0.09999999999998999
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolio/optimization/maximum-return": {
      "post": {
        "tags": [
          "Portfolio Optimization / Mean-Variance"
        ],
        "summary": "Maximum Return Portfolio",
        "description": "Compute the asset weights of the maximum return portfolio, optionally subject to:  \n* Minimum and maximum weights constraints\n* Minimum and maximum group weights constraints\n* Minimum and maximum portfolio exposure constraints\n\nReferences\n * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets",
                  "assetsReturns"
                ],
                "properties": {
                  "assets": {
                    "description": "The number of assets",
                    "type": "integer",
                    "minimum": 2
                  },
                  "assetsReturns": {
                    "description": "assetsReturns[i] is the arithmetic return of asset i",
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "number"
                    }
                  },
                  "assetsCovarianceMatrix": {
                    "description": "assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "constraints": {
                    "type": "object",
                    "properties": {
                      "minimumAssetsWeights": {
                        "description": "minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "maximumAssetsWeights": {
                        "description": "maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "assetsGroups": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "array",
                          "description": "assetsGroups[k] is the indexes of the assets belonging to the assets group k in the portfolio; exclusive with assetsGroupsMatrix",
                          "minItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": "integer",
                            "minimum": 1
                          }
                        }
                      },
                      "assetsGroupsMatrix": {
                        "description": "assetsGroupsMatrix[k][i] is the weight of the asset i in the group of assets k; exclusive with assetsGroups",
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "maximumAssetsGroupsWeights": {
                        "description": "maximumAssetsGroupsWeights[k] is the maximum weight of the assets group k in the portfolio, in percentage between 0 and 1 if assetsGroups is provided",
                        "type": "array",
                        "items": {
                          "type": "number"
                        }
                      },
                      "minimumPortfolioExposure": {
                        "description": "The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1
                      },
                      "maximumPortfolioExposure": {
                        "description": "The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute the portfolio weights for two assets, with maximum assets weights constraints",
                  "value": {
                    "assets": 2,
                    "assetsReturns": [
                      0.02,
                      0.01
                    ],
                    "constraints": {
                      "maximumAssetsWeights": [
                        0.4,
                        1
                      ]
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsWeights"
                  ],
                  "properties": {
                    "assetsWeights": {
                      "description": "assetsWeights[i] is the weight of the asset i in the portfolio, in percentage",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed maximum return portfolio of two assets",
                    "value": {
                      "assetsWeights": [
                        0.4,
                        0.6
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolio/optimization/maximum-return/diversified": {
      "post": {
        "tags": [
          "Portfolio Optimization / Mean-Variance"
        ],
        "summary": "Diversified Maximum Return Portfolio",
        "description": "Compute the asset weights of the diversified maximum return portfolio, as defined in the first reference, optionally subject to:  \n* Minimum and maximum weights constraints\n* Minimum and maximum group weights constraints\n* Minimum and maximum portfolio exposure constraints\n\nThe diversification measure used in the optimization procedure is the [Herfindahl-Hirschman Index](https://en.wikipedia.org/wiki/Herfindahl%E2%80%93Hirschman_index) of the assets weights.\n\nReferences\n * [Alejandro Corvalan, 2005. Well Diversified Efficient Portfolios, Working Papers Central Bank of Chile 336, Central Bank of Chile](https://ideas.repec.org/p/chb/bcchwp/336.html)\n * [Bouchaud, Jean-Philippe and Potters, Marc and Aguilar, Jean-Pierre, Missing Information and Asset Allocation, arXiv, 1997](https://arxiv.org/abs/cond-mat/9707042)\n * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets",
                  "assetsReturns"
                ],
                "properties": {
                  "assets": {
                    "description": "The number of assets",
                    "type": "integer",
                    "minimum": 2
                  },
                  "assetsReturns": {
                    "description": "assetsReturns[i] is the arithmetic return of asset i",
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "number"
                    }
                  },
                  "assetsCovarianceMatrix": {
                    "description": "assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "portfolioReturnTolerance": {
                    "description": "The relative tolerance over the minimum variance portfolio return, if applicable",
                    "type": "number",
                    "minimum": 0,
                    "default": 0.1
                  },
                  "portfolioVolatilityTolerance": {
                    "description": "The relative tolerance over the minimum variance portfolio volatility",
                    "type": "number",
                    "minimum": 0,
                    "default": 0.1
                  },
                  "constraints": {
                    "type": "object",
                    "properties": {
                      "minimumAssetsWeights": {
                        "description": "minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "maximumAssetsWeights": {
                        "description": "maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "assetsGroups": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "array",
                          "description": "assetsGroups[k] is the indexes of the assets belonging to the assets group k in the portfolio; exclusive with assetsGroupsMatrix",
                          "minItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": "integer",
                            "minimum": 1
                          }
                        }
                      },
                      "assetsGroupsMatrix": {
                        "description": "assetsGroupsMatrix[k][i] is the weight of the asset i in the group of assets k; exclusive with assetsGroups",
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "maximumAssetsGroupsWeights": {
                        "description": "maximumAssetsGroupsWeights[k] is the maximum weight of the assets group k in the portfolio, in percentage between 0 and 1 if assetsGroups is provided",
                        "type": "array",
                        "items": {
                          "type": "number"
                        }
                      },
                      "minimumPortfolioExposure": {
                        "description": "The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1
                      },
                      "maximumPortfolioExposure": {
                        "description": "The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute the portfolio weights for two assets, with maximum assets weights constraints",
                  "value": {
                    "assets": 2,
                    "assetsReturns": [
                      0.02,
                      0.01
                    ],
                    "constraints": {
                      "maximumAssetsWeights": [
                        0.4,
                        1
                      ]
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsWeights"
                  ],
                  "properties": {
                    "assetsWeights": {
                      "description": "assetsWeights[i] is the weight of the asset i in the portfolio, in percentage",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed diversified maximum return portfolio of two assets",
                    "value": {
                      "assetsWeights": [
                        0.3999998369710335,
                        0.6000001630289665
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolios/optimization/maximum-return/resampling-based": {
      "post": {
        "tags": [
          "Portfolio Optimization / Mean-Variance"
        ],
        "summary": "Resampling-Based Maximum Return Portfolio",
        "description": "Compute the asset weights of the resampling-based maximum return portfolio, using a mix of the methodologies described in the first and the second references, optionally subject to:  \n* Minimum and maximum weights constraints\n* Minimum and maximum group weights constraints\n* Minimum and maximum portfolio exposure constraints\n\nReferences\n * [Richard O Michaud, Robert O Michaud, Efficient Asset Management: A Practical Guide to Stock Portfolio Optimization and Asset Allocation](https://academic.oup.com/book/52209/chapter-abstract/421081595?redirectedFrom=fulltext)       \n * [F. Fabozzi, P. Kolm, D. Pachamanova, and S. Focardi. Robust portfolio optimization and management. John Wiley & Sons, 2007](https://www.wiley.com/en-us/Robust+Portfolio+Optimization+and+Management-p-9780471921226)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets",
                  "assetsReturns"
                ],
                "properties": {
                  "assets": {
                    "description": "The number of assets",
                    "type": "integer",
                    "minimum": 2
                  },
                  "assetsReturns": {
                    "description": "assetsReturns[i] is the arithmetic return of asset i",
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "number"
                    }
                  },
                  "assetsCovarianceMatrix": {
                    "description": "assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "simulatedPortfolios": {
                    "description": "The number of portfolios to simulate",
                    "type": "integer",
                    "minimum": 1,
                    "default": 128
                  },
                  "simulatedPortfoliosAggregationMethod": {
                    "description": "The method to aggregate the simulated portfolios",
                    "type": "string",
                    "enum": [
                      "average",
                      "median"
                    ],
                    "default": "average"
                  },
                  "assetsReturnsUncertaintyIntervals": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "array",
                      "description": "assetsReturnsUncertaintyIntervals[i][0] (resp. assetsReturnsUncertaintyIntervals[i][1]) is the lower (resp. upper) bound of the uncertainty interval around the i-th asset arithmetic return assetsReturns[i]; defaults to the interval [0.95* assetsReturns[i], 1.05 * assetsReturns[i]]",
                      "minItems": 2,
                      "maxItems": 2,
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "assetsStandardDeviationsUncertaintyIntervals": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "array",
                      "description": "assetsStandardDeviationsUncertaintyIntervals[i][0] (resp. assetsStandardDeviationsUncertaintyIntervals[i][1]) is the lower (resp. upper) bound of the uncertainty interval around the i-th asset standard deviation sqrt(assetsCovarianceMatrix[i][i]); defaults to the interval [0.95 * sqrt(assetsCovarianceMatrix[i][i]), 1.05 * sqrt(assetsCovarianceMatrix[i][i])]",
                      "minItems": 2,
                      "maxItems": 2,
                      "items": {
                        "type": "number",
                        "minimum": 0
                      }
                    }
                  },
                  "assetsCorrelationMatrixUncertaintyLevel": {
                    "description": "The uncertainty level on the coefficients of the asset correlation matrix associated to assetsCovarianceMatrix, if applicable; defaults to 0",
                    "type": "number",
                    "minimum": 0,
                    "maximum": 2
                  },
                  "constraints": {
                    "type": "object",
                    "properties": {
                      "minimumAssetsWeights": {
                        "description": "minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "maximumAssetsWeights": {
                        "description": "maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "assetsGroups": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "array",
                          "description": "assetsGroups[k] is the indexes of the assets belonging to the assets group k in the portfolio; exclusive with assetsGroupsMatrix",
                          "minItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": "integer",
                            "minimum": 1
                          }
                        }
                      },
                      "assetsGroupsMatrix": {
                        "description": "assetsGroupsMatrix[k][i] is the weight of the asset i in the group of assets k; exclusive with assetsGroups",
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "maximumAssetsGroupsWeights": {
                        "description": "maximumAssetsGroupsWeights[k] is the maximum weight of the assets group k in the portfolio, in percentage between 0 and 1 if assetsGroups is provided",
                        "type": "array",
                        "items": {
                          "type": "number"
                        }
                      },
                      "minimumPortfolioExposure": {
                        "description": "The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1
                      },
                      "maximumPortfolioExposure": {
                        "description": "The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute the portfolio weights for three assets, with a 10% uncertainty around the first and the third asset returns",
                  "value": {
                    "assets": 3,
                    "assetsReturns": [
                      0.01,
                      0.02,
                      0.03
                    ],
                    "assetsReturnsUncertaintyIntervals": [
                      [
                        0.009,
                        0.011
                      ],
                      [
                        0.02,
                        0.02
                      ],
                      [
                        0.027,
                        0.033
                      ]
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsWeights"
                  ],
                  "properties": {
                    "assetsWeights": {
                      "description": "assetsWeights[i] is the weight of the asset i in the portfolio, in percentage",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed portfolio of three assets",
                    "value": {
                      "assetsWeights": [
                        0,
                        0.3333333333333333,
                        0.6666666666666666
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolio/optimization/maximum-return/subset-resampling-based": {
      "post": {
        "tags": [
          "Portfolio Optimization / Mean-Variance"
        ],
        "summary": "Subset Resampling-Based Maximum Return Portfolio",
        "description": "Compute the asset weights of the subset resampling-based maximum return portfolio, using the methodology described in the first and the second references, optionally subject to:  \n* Minimum and maximum weights constraints\n* Minimum and maximum group weights constraints\n* Minimum and maximum portfolio exposure constraints\n\nReferences\n * [CSSA, Random Subspace Optimization (RSO)](https://cssanalytics.wordpress.com/2013/10/06/random-subspace-optimization-rso/)\n * [Subset Optimization for Asset Allocation,Benjamin J. Gillen](https://www.bengillen.com/uploads/1/2/3/8/123891022/subsets.pdf)\n * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets",
                  "assetsReturns"
                ],
                "properties": {
                  "assets": {
                    "description": "The number of assets",
                    "type": "integer",
                    "minimum": 2
                  },
                  "assetsReturns": {
                    "description": "assetsReturns[i] is the arithmetic return of asset i",
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "number"
                    }
                  },
                  "assetsCovarianceMatrix": {
                    "description": "assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "subsetSize": {
                    "description": "The number of assets to include in each subset portfolio; defaults to a value of order the square root of the total number of assets",
                    "type": "integer",
                    "minimum": 2
                  },
                  "simulatedPortfolios": {
                    "description": "The number of simulated portfolios to compute; only applicable if the generation method for the subset portfolios is random sampling",
                    "type": "integer",
                    "minimum": 1,
                    "default": 128
                  },
                  "simulatedPortfoliosGenerationMethod": {
                    "description": "The method to generate the simulated portfolios",
                    "type": "string",
                    "enum": [
                      "complete",
                      "random"
                    ],
                    "default": "random"
                  },
                  "simulatedPortfoliosAggregationMethod": {
                    "description": "The method to aggregate the simulated portfolios",
                    "type": "string",
                    "enum": [
                      "average",
                      "median"
                    ],
                    "default": "average"
                  },
                  "constraints": {
                    "type": "object",
                    "properties": {
                      "minimumAssetsWeights": {
                        "description": "minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "maximumAssetsWeights": {
                        "description": "maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "assetsGroups": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "array",
                          "description": "assetsGroups[k] is the indexes of the assets belonging to the assets group k in the portfolio; exclusive with assetsGroupsMatrix",
                          "minItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": "integer",
                            "minimum": 1
                          }
                        }
                      },
                      "assetsGroupsMatrix": {
                        "description": "assetsGroupsMatrix[k][i] is the weight of the asset i in the group of assets k; exclusive with assetsGroups",
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "maximumAssetsGroupsWeights": {
                        "description": "maximumAssetsGroupsWeights[k] is the maximum weight of the assets group k in the portfolio, in percentage between 0 and 1 if assetsGroups is provided",
                        "type": "array",
                        "items": {
                          "type": "number"
                        }
                      },
                      "minimumPortfolioExposure": {
                        "description": "The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1
                      },
                      "maximumPortfolioExposure": {
                        "description": "The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute the portfolio weights for three assets, with complete enumeration of subsets",
                  "value": {
                    "assets": 3,
                    "assetsReturns": [
                      0.01,
                      0.02,
                      0.03
                    ],
                    "simulatedPortfoliosGenerationMethod": "complete"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsWeights"
                  ],
                  "properties": {
                    "assetsWeights": {
                      "description": "assetsWeights[i] is the weight of the asset i in the portfolio, in percentage",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed portfolio of three assets",
                    "value": {
                      "assetsWeights": [
                        0,
                        0.3333333333333333,
                        0.6666666666666666
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolio/optimization/maximum-sharpe-ratio": {
      "post": {
        "tags": [
          "Portfolio Optimization / Mean-Variance"
        ],
        "summary": "Maximum Sharpe Ratio Portfolio",
        "description": "Compute the asset weights of the maximum Sharpe ratio portfolio, optionally subject to:  \n* Minimum and maximum weights constraints\n* Minimum and maximum group weights constraints\n* Minimum and maximum portfolio exposure constraints\n\nReferences\n * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets",
                  "assetsReturns",
                  "assetsCovarianceMatrix",
                  "riskFreeRate"
                ],
                "properties": {
                  "assets": {
                    "description": "The number of assets",
                    "type": "integer",
                    "minimum": 2
                  },
                  "assetsReturns": {
                    "description": "assetsReturns[i] is the arithmetic return of asset i",
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "number"
                    }
                  },
                  "assetsCovarianceMatrix": {
                    "description": "assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "riskFreeRate": {
                    "description": "The arithmetic risk free rate",
                    "type": "number"
                  },
                  "constraints": {
                    "type": "object",
                    "properties": {
                      "minimumAssetsWeights": {
                        "description": "minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "maximumAssetsWeights": {
                        "description": "maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "assetsGroups": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "array",
                          "description": "assetsGroups[k] is the indexes of the assets belonging to the assets group k in the portfolio; exclusive with assetsGroupsMatrix",
                          "minItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": "integer",
                            "minimum": 1
                          }
                        }
                      },
                      "assetsGroupsMatrix": {
                        "description": "assetsGroupsMatrix[k][i] is the weight of the asset i in the group of assets k; exclusive with assetsGroups",
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "maximumAssetsGroupsWeights": {
                        "description": "maximumAssetsGroupsWeights[k] is the maximum weight of the assets group k in the portfolio, in percentage between 0 and 1 if assetsGroups is provided",
                        "type": "array",
                        "items": {
                          "type": "number"
                        }
                      },
                      "minimumPortfolioExposure": {
                        "description": "The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1
                      },
                      "maximumPortfolioExposure": {
                        "description": "The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute the portfolio weights for two assets with a risk free rate of 0%",
                  "value": {
                    "assets": 2,
                    "assetsReturns": [
                      0.05,
                      0.1
                    ],
                    "assetsCovarianceMatrix": [
                      [
                        0.05,
                        0.02
                      ],
                      [
                        0.02,
                        0.07
                      ]
                    ],
                    "riskFreeRate": 0
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsWeights"
                  ],
                  "properties": {
                    "assetsWeights": {
                      "description": "assetsWeights[i] is the weight of the asset i in the portfolio, in percentage",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed portfolio weights for two assets",
                    "value": {
                      "assetsWeights": [
                        0.27272727272727276,
                        0.7272727272727273
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolio/optimization/maximum-sharpe-ratio/diversified": {
      "post": {
        "tags": [
          "Portfolio Optimization / Mean-Variance"
        ],
        "summary": "Diversified Maximum Sharpe Ratio Portfolio",
        "description": "Compute the asset weights of the diversified maximum Sharpe ratio portfolio, as defined in the first reference, optionally subject to:  \n* Minimum and maximum weights constraints\n* Minimum and maximum group weights constraints\n* Minimum and maximum portfolio exposure constraints\n\nThe diversification measure used in the optimization procedure is the [Herfindahl-Hirschman Index](https://en.wikipedia.org/wiki/Herfindahl%E2%80%93Hirschman_index) of the assets weights.\n\nReferences\n * [Alejandro Corvalan, 2005. Well Diversified Efficient Portfolios, Working Papers Central Bank of Chile 336, Central Bank of Chile](https://ideas.repec.org/p/chb/bcchwp/336.html)\n * [Bouchaud, Jean-Philippe and Potters, Marc and Aguilar, Jean-Pierre, Missing Information and Asset Allocation, arXiv, 1997](https://arxiv.org/abs/cond-mat/9707042)\n * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets",
                  "assetsReturns",
                  "assetsCovarianceMatrix",
                  "riskFreeRate"
                ],
                "properties": {
                  "assets": {
                    "description": "The number of assets",
                    "type": "integer",
                    "minimum": 2
                  },
                  "assetsReturns": {
                    "description": "assetsReturns[i] is the arithmetic return of asset i",
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "number"
                    }
                  },
                  "assetsCovarianceMatrix": {
                    "description": "assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "riskFreeRate": {
                    "description": "The arithmetic risk free rate",
                    "type": "number"
                  },
                  "portfolioReturnTolerance": {
                    "description": "The relative tolerance over the minimum variance portfolio return, if applicable",
                    "type": "number",
                    "minimum": 0,
                    "default": 0.1
                  },
                  "portfolioVolatilityTolerance": {
                    "description": "The relative tolerance over the minimum variance portfolio volatility",
                    "type": "number",
                    "minimum": 0,
                    "default": 0.1
                  },
                  "constraints": {
                    "type": "object",
                    "properties": {
                      "minimumAssetsWeights": {
                        "description": "minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "maximumAssetsWeights": {
                        "description": "maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "assetsGroups": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "array",
                          "description": "assetsGroups[k] is the indexes of the assets belonging to the assets group k in the portfolio; exclusive with assetsGroupsMatrix",
                          "minItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": "integer",
                            "minimum": 1
                          }
                        }
                      },
                      "assetsGroupsMatrix": {
                        "description": "assetsGroupsMatrix[k][i] is the weight of the asset i in the group of assets k; exclusive with assetsGroups",
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "maximumAssetsGroupsWeights": {
                        "description": "maximumAssetsGroupsWeights[k] is the maximum weight of the assets group k in the portfolio, in percentage between 0 and 1 if assetsGroups is provided",
                        "type": "array",
                        "items": {
                          "type": "number"
                        }
                      },
                      "minimumPortfolioExposure": {
                        "description": "The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1
                      },
                      "maximumPortfolioExposure": {
                        "description": "The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute the portfolio weights for two assets with a risk free rate of 0%",
                  "value": {
                    "assets": 2,
                    "assetsReturns": [
                      0.05,
                      0.1
                    ],
                    "assetsCovarianceMatrix": [
                      [
                        0.05,
                        0.02
                      ],
                      [
                        0.02,
                        0.07
                      ]
                    ],
                    "riskFreeRate": 0
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsWeights"
                  ],
                  "properties": {
                    "assetsWeights": {
                      "description": "assetsWeights[i] is the weight of the asset i in the portfolio, in percentage",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed portfolio weights for two assets",
                    "value": {
                      "assetsWeights": [
                        0.44545623478220464,
                        0.5545437652177954
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolios/optimization/maximum-sharpe-ratio/resampling-based": {
      "post": {
        "tags": [
          "Portfolio Optimization / Mean-Variance"
        ],
        "summary": "Resampling-Based Maximum Sharpe Ratio Portfolio",
        "description": "Compute the asset weights of the resampling-based maximum Sharpe Ratio portfolio, using a mix of the methodologies described in the first and the second references, optionally subject to:  \n* Minimum and maximum weights constraints\n* Minimum and maximum group weights constraints\n* Minimum and maximum portfolio exposure constraints\n\nReferences\n * [Richard O Michaud, Robert O Michaud, Efficient Asset Management: A Practical Guide to Stock Portfolio Optimization and Asset Allocation](https://academic.oup.com/book/52209/chapter-abstract/421081595?redirectedFrom=fulltext)       \n * [F. Fabozzi, P. Kolm, D. Pachamanova, and S. Focardi. Robust portfolio optimization and management. John Wiley & Sons, 2007](https://www.wiley.com/en-us/Robust+Portfolio+Optimization+and+Management-p-9780471921226)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets",
                  "assetsReturns",
                  "assetsCovarianceMatrix",
                  "riskFreeRate"
                ],
                "properties": {
                  "assets": {
                    "description": "The number of assets",
                    "type": "integer",
                    "minimum": 2
                  },
                  "assetsReturns": {
                    "description": "assetsReturns[i] is the arithmetic return of asset i",
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "number"
                    }
                  },
                  "assetsCovarianceMatrix": {
                    "description": "assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "riskFreeRate": {
                    "description": "The arithmetic risk free rate",
                    "type": "number"
                  },
                  "simulatedPortfolios": {
                    "description": "The number of portfolios to simulate",
                    "type": "integer",
                    "minimum": 1,
                    "default": 128
                  },
                  "simulatedPortfoliosAggregationMethod": {
                    "description": "The method to aggregate the simulated portfolios",
                    "type": "string",
                    "enum": [
                      "average",
                      "median"
                    ],
                    "default": "average"
                  },
                  "assetsReturnsUncertaintyIntervals": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "array",
                      "description": "assetsReturnsUncertaintyIntervals[i][0] (resp. assetsReturnsUncertaintyIntervals[i][1]) is the lower (resp. upper) bound of the uncertainty interval around the i-th asset arithmetic return assetsReturns[i]; defaults to the interval [0.95* assetsReturns[i], 1.05 * assetsReturns[i]]",
                      "minItems": 2,
                      "maxItems": 2,
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "assetsStandardDeviationsUncertaintyIntervals": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "array",
                      "description": "assetsStandardDeviationsUncertaintyIntervals[i][0] (resp. assetsStandardDeviationsUncertaintyIntervals[i][1]) is the lower (resp. upper) bound of the uncertainty interval around the i-th asset standard deviation sqrt(assetsCovarianceMatrix[i][i]); defaults to the interval [0.95 * sqrt(assetsCovarianceMatrix[i][i]), 1.05 * sqrt(assetsCovarianceMatrix[i][i])]",
                      "minItems": 2,
                      "maxItems": 2,
                      "items": {
                        "type": "number",
                        "minimum": 0
                      }
                    }
                  },
                  "assetsCorrelationMatrixUncertaintyLevel": {
                    "description": "The uncertainty level on the coefficients of the asset correlation matrix associated to assetsCovarianceMatrix; defaults to 0.10",
                    "type": "number",
                    "minimum": 0,
                    "maximum": 2
                  },
                  "constraints": {
                    "type": "object",
                    "properties": {
                      "minimumAssetsWeights": {
                        "description": "minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "maximumAssetsWeights": {
                        "description": "maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "assetsGroups": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "array",
                          "description": "assetsGroups[k] is the indexes of the assets belonging to the assets group k in the portfolio; exclusive with assetsGroupsMatrix",
                          "minItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": "integer",
                            "minimum": 1
                          }
                        }
                      },
                      "assetsGroupsMatrix": {
                        "description": "assetsGroupsMatrix[k][i] is the weight of the asset i in the group of assets k; exclusive with assetsGroups",
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "maximumAssetsGroupsWeights": {
                        "description": "maximumAssetsGroupsWeights[k] is the maximum weight of the assets group k in the portfolio, in percentage between 0 and 1 if assetsGroups is provided",
                        "type": "array",
                        "items": {
                          "type": "number"
                        }
                      },
                      "minimumPortfolioExposure": {
                        "description": "The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1
                      },
                      "maximumPortfolioExposure": {
                        "description": "The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute the portfolio weights for three assets, with a 10% uncertainty around the first and the third asset returns",
                  "value": {
                    "assets": 3,
                    "assetsReturns": [
                      0.01,
                      0.02,
                      0.03
                    ],
                    "assetsReturnsUncertaintyIntervals": [
                      [
                        0.009,
                        0.011
                      ],
                      [
                        0.02,
                        0.02
                      ],
                      [
                        0.027,
                        0.033
                      ]
                    ],
                    "assetsCovarianceMatrix": [
                      [
                        0.0146,
                        0.0187,
                        0.0145
                      ],
                      [
                        0.0187,
                        0.0854,
                        0.0104
                      ],
                      [
                        0.0145,
                        0.0104,
                        0.0289
                      ]
                    ],
                    "riskFreeRate": 0
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsWeights"
                  ],
                  "properties": {
                    "assetsWeights": {
                      "description": "assetsWeights[i] is the weight of the asset i in the portfolio, in percentage",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed portfolio of three assets",
                    "value": {
                      "assetsWeights": [
                        0,
                        0.3333333333333333,
                        0.6666666666666666
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolio/optimization/maximum-sharpe-ratio/subset-resampling-based": {
      "post": {
        "tags": [
          "Portfolio Optimization / Mean-Variance"
        ],
        "summary": "Subset Resampling-Based Maximum Sharpe Ratio Portfolio",
        "description": "Compute the asset weights of the susbet resampling-based maximum Sharpe ratio portfolio, using the methodology described in the first and the second references, optionally subject to:  \n* Minimum and maximum weights constraints\n* Minimum and maximum group weights constraints\n* Minimum and maximum portfolio exposure constraints\n\nReferences\n * [CSSA, Random Subspace Optimization (RSO)](https://cssanalytics.wordpress.com/2013/10/06/random-subspace-optimization-rso/)\n * [Subset Optimization for Asset Allocation,Benjamin J. Gillen](https://www.bengillen.com/uploads/1/2/3/8/123891022/subsets.pdf)\n * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets",
                  "assetsReturns",
                  "assetsCovarianceMatrix",
                  "riskFreeRate"
                ],
                "properties": {
                  "assets": {
                    "description": "The number of assets",
                    "type": "integer",
                    "minimum": 2
                  },
                  "assetsReturns": {
                    "description": "assetsReturns[i] is the arithmetic return of asset i",
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "number"
                    }
                  },
                  "assetsCovarianceMatrix": {
                    "description": "assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "riskFreeRate": {
                    "description": "The arithmetic risk free rate",
                    "type": "number"
                  },
                  "subsetSize": {
                    "description": "The number of assets to include in each subset portfolio; defaults to a value of order the square root of the total number of assets",
                    "type": "integer",
                    "minimum": 2
                  },
                  "simulatedPortfolios": {
                    "description": "The number of simulated portfolios to compute; only applicable if the generation method for the subset portfolios is random sampling",
                    "type": "integer",
                    "minimum": 1,
                    "default": 128
                  },
                  "simulatedPortfoliosGenerationMethod": {
                    "description": "The method to generate the simulated portfolios",
                    "type": "string",
                    "enum": [
                      "complete",
                      "random"
                    ],
                    "default": "random"
                  },
                  "simulatedPortfoliosAggregationMethod": {
                    "description": "The method to aggregate the simulated portfolios",
                    "type": "string",
                    "enum": [
                      "average",
                      "median"
                    ],
                    "default": "average"
                  },
                  "constraints": {
                    "type": "object",
                    "properties": {
                      "minimumAssetsWeights": {
                        "description": "minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "maximumAssetsWeights": {
                        "description": "maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "assetsGroups": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "array",
                          "description": "assetsGroups[k] is the indexes of the assets belonging to the assets group k in the portfolio; exclusive with assetsGroupsMatrix",
                          "minItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": "integer",
                            "minimum": 1
                          }
                        }
                      },
                      "assetsGroupsMatrix": {
                        "description": "assetsGroupsMatrix[k][i] is the weight of the asset i in the group of assets k; exclusive with assetsGroups",
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "maximumAssetsGroupsWeights": {
                        "description": "maximumAssetsGroupsWeights[k] is the maximum weight of the assets group k in the portfolio, in percentage between 0 and 1 if assetsGroups is provided",
                        "type": "array",
                        "items": {
                          "type": "number"
                        }
                      },
                      "minimumPortfolioExposure": {
                        "description": "The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1
                      },
                      "maximumPortfolioExposure": {
                        "description": "The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute the portfolio weights for three assets with a risk free rate of 0%",
                  "value": {
                    "assets": 3,
                    "assetsReturns": [
                      0.05,
                      0.1,
                      0.025
                    ],
                    "assetsCovarianceMatrix": [
                      [
                        0.0146,
                        0.0187,
                        0.0145
                      ],
                      [
                        0.0187,
                        0.0854,
                        0.0104
                      ],
                      [
                        0.0145,
                        0.0104,
                        0.0289
                      ]
                    ],
                    "riskFreeRate": 0
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsWeights"
                  ],
                  "properties": {
                    "assetsWeights": {
                      "description": "assetsWeights[i] is the weight of the asset i in the portfolio, in percentage",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed portfolio weights for three assets",
                    "value": {
                      "assetsWeights": [
                        0.35454545454545444,
                        0.5845170454545454,
                        0.06093750000000007
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolio/optimization/mean-variance-efficient": {
      "post": {
        "tags": [
          "Portfolio Optimization / Mean-Variance"
        ],
        "summary": "Mean-Variance Efficient Portfolio",
        "description": "Compute the asset weights of a mean-variance efficient portfolio, optionally subject to:  \n* Minimum and maximum weights constraints\n* Minimum and maximum group weights constraints\n* Minimum and maximum portfolio exposure constraints\n\n> A mean-variance efficient portfolio is a portfolio belonging to [the mean-variance efficient frontier](#post-/portfolio/analysis/mean-variance/efficient-frontier).\n\nReferences\n * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets",
                  "assetsReturns",
                  "assetsCovarianceMatrix",
                  "constraints"
                ],
                "properties": {
                  "assets": {
                    "description": "The number of assets",
                    "type": "integer",
                    "minimum": 2
                  },
                  "assetsReturns": {
                    "description": "assetsReturns[i] is the arithmetic return of asset i",
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "number"
                    }
                  },
                  "assetsCovarianceMatrix": {
                    "description": "assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "constraints": {
                    "type": "object",
                    "properties": {
                      "portfolioReturn": {
                        "description": "The portfolio return; exclusive with portfolioVolatility, riskTolerance and maximumPortfolioVolatility",
                        "type": "number"
                      },
                      "portfolioVolatility": {
                        "description": "The portfolio volatility; exclusive with portfolioReturn, riskTolerance and maximumPortfolioVolatility",
                        "type": "number",
                        "minimum": 0
                      },
                      "maximumPortfolioVolatility": {
                        "description": "The maximum portfolio volatility; exclusive with portfolioReturn, portfolioVolatility and riskTolerance",
                        "type": "number",
                        "minimum": 0
                      },
                      "riskTolerance": {
                        "description": "The portfolio risk tolerance; exclusive with portfolioReturn, portfolioVolatility and maximumPortfolioVolatility",
                        "type": "number",
                        "minimum": 0
                      },
                      "minimumAssetsWeights": {
                        "description": "minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "maximumAssetsWeights": {
                        "description": "maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "assetsGroups": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "array",
                          "description": "assetsGroups[k] is the indexes of the assets belonging to the assets group k in the portfolio; exclusive with assetsGroupsMatrix",
                          "minItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": "integer",
                            "minimum": 1
                          }
                        }
                      },
                      "assetsGroupsMatrix": {
                        "description": "assetsGroupsMatrix[k][i] is the weight of the asset i in the group of assets k; exclusive with assetsGroups",
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "maximumAssetsGroupsWeights": {
                        "description": "maximumAssetsGroupsWeights[k] is the maximum weight of the assets group k in the portfolio, in percentage between 0 and 1 if assetsGroups is provided",
                        "type": "array",
                        "items": {
                          "type": "number"
                        }
                      },
                      "minimumPortfolioExposure": {
                        "description": "The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1
                      },
                      "maximumPortfolioExposure": {
                        "description": "The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute the portfolio weights for two assets with a portfolio return constraint of 15%",
                  "value": {
                    "assets": 2,
                    "assetsReturns": [
                      0.1,
                      0.2
                    ],
                    "assetsCovarianceMatrix": [
                      [
                        1,
                        0.3
                      ],
                      [
                        0.3,
                        1
                      ]
                    ],
                    "constraints": {
                      "portfolioReturn": 0.15
                    }
                  }
                },
                "Example with group constraints": {
                  "description": "Compute the portfolio weights for three assets with a maximum group weights constraint and a portfolio return constraint of 15%",
                  "value": {
                    "assets": 3,
                    "assetsReturns": [
                      0.1,
                      0.2,
                      0.15
                    ],
                    "assetsCovarianceMatrix": [
                      [
                        1,
                        0.3,
                        -0.2
                      ],
                      [
                        0.3,
                        1,
                        0.2
                      ],
                      [
                        -0.2,
                        0.2,
                        1
                      ]
                    ],
                    "constraints": {
                      "portfolioReturn": 0.15,
                      "assetsGroups": [
                        [
                          1,
                          2
                        ]
                      ],
                      "maximumAssetsGroupsWeights": [
                        0.5
                      ]
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsWeights"
                  ],
                  "properties": {
                    "assetsWeights": {
                      "description": "assetsWeights[i] is the weight of the asset i in the portfolio, in percentage",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed mean-variance efficient portfolio of two assets",
                    "value": {
                      "assetsWeights": [
                        0.5,
                        0.5
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolio/optimization/mean-variance-efficient/diversified": {
      "post": {
        "tags": [
          "Portfolio Optimization / Mean-Variance"
        ],
        "summary": "Diversified Mean-Variance Efficient Portfolio",
        "description": "Compute the asset weights of a diversified mean-variance efficient portfolio, as defined in the first reference, optionally subject to:  \n* Minimum and maximum weights constraints\n* Minimum and maximum group weights constraints\n* Minimum and maximum portfolio exposure constraints\n\nThe diversification measure used in the optimization procedure is the [Herfindahl-Hirschman Index](https://en.wikipedia.org/wiki/Herfindahl%E2%80%93Hirschman_index) of the assets weights.\n\n> A diversified mean-variance efficient portfolio does NOT belong to [the mean-variance efficient frontier](#post-/portfolio/analysis/mean-variance/efficient-frontier), but is close to this frontier.\n\nReferences\n * [Alejandro Corvalan, 2005. Well Diversified Efficient Portfolios, Working Papers Central Bank of Chile 336, Central Bank of Chile](https://ideas.repec.org/p/chb/bcchwp/336.html)\n * [Bouchaud, Jean-Philippe and Potters, Marc and Aguilar, Jean-Pierre, Missing Information and Asset Allocation, arXiv, 1997](https://arxiv.org/abs/cond-mat/9707042)\n * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets",
                  "assetsReturns",
                  "assetsCovarianceMatrix",
                  "constraints"
                ],
                "properties": {
                  "assets": {
                    "description": "The number of assets",
                    "type": "integer",
                    "minimum": 2
                  },
                  "assetsReturns": {
                    "description": "assetsReturns[i] is the arithmetic return of asset i",
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "number"
                    }
                  },
                  "assetsCovarianceMatrix": {
                    "description": "assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "portfolioReturnTolerance": {
                    "description": "The relative tolerance over the minimum variance portfolio return, if applicable",
                    "type": "number",
                    "minimum": 0,
                    "default": 0.1
                  },
                  "portfolioVolatilityTolerance": {
                    "description": "The relative tolerance over the minimum variance portfolio volatility",
                    "type": "number",
                    "minimum": 0,
                    "default": 0.1
                  },
                  "constraints": {
                    "type": "object",
                    "properties": {
                      "portfolioReturn": {
                        "description": "The portfolio return; exclusive with portfolioVolatility and riskTolerance",
                        "type": "number"
                      },
                      "portfolioVolatility": {
                        "description": "The portfolio volatility; exclusive with portfolioReturn and riskTolerance",
                        "type": "number",
                        "minimum": 0
                      },
                      "riskTolerance": {
                        "description": "The portfolio risk tolerance; exclusive with portfolioReturn and portfolioVolatility",
                        "type": "number",
                        "minimum": 0
                      },
                      "minimumAssetsWeights": {
                        "description": "minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "maximumAssetsWeights": {
                        "description": "maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "assetsGroups": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "array",
                          "description": "assetsGroups[k] is the indexes of the assets belonging to the assets group k in the portfolio; exclusive with assetsGroupsMatrix",
                          "minItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": "integer",
                            "minimum": 1
                          }
                        }
                      },
                      "assetsGroupsMatrix": {
                        "description": "assetsGroupsMatrix[k][i] is the weight of the asset i in the group of assets k; exclusive with assetsGroups",
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "maximumAssetsGroupsWeights": {
                        "description": "maximumAssetsGroupsWeights[k] is the maximum weight of the assets group k in the portfolio, in percentage between 0 and 1 if assetsGroups is provided",
                        "type": "array",
                        "items": {
                          "type": "number"
                        }
                      },
                      "minimumPortfolioExposure": {
                        "description": "The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1
                      },
                      "maximumPortfolioExposure": {
                        "description": "The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute the portfolio weights for two assets with a portfolio return constraint of 15%",
                  "value": {
                    "assets": 2,
                    "assetsReturns": [
                      0.1,
                      0.2
                    ],
                    "assetsCovarianceMatrix": [
                      [
                        1,
                        0.3
                      ],
                      [
                        0.3,
                        1
                      ]
                    ],
                    "portfolioReturnTolerance": 0.05,
                    "portfolioVolatilityTolerance": 0.05,
                    "constraints": {
                      "portfolioReturn": 0.175
                    }
                  }
                },
                "Example with group constraints": {
                  "description": "Compute the portfolio weights for three assets with a maximum group weights constraint and a portfolio return constraint of 15%",
                  "value": {
                    "assets": 3,
                    "assetsReturns": [
                      0.1,
                      0.2,
                      0.15
                    ],
                    "assetsCovarianceMatrix": [
                      [
                        1,
                        0.3,
                        -0.2
                      ],
                      [
                        0.3,
                        1,
                        0.2
                      ],
                      [
                        -0.2,
                        0.2,
                        1
                      ]
                    ],
                    "constraints": {
                      "portfolioReturn": 0.15,
                      "assetsGroups": [
                        [
                          1,
                          2
                        ]
                      ],
                      "maximumAssetsGroupsWeights": [
                        0.5
                      ]
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsWeights"
                  ],
                  "properties": {
                    "assetsWeights": {
                      "description": "assetsWeights[i] is the weight of the asset i in the portfolio, in percentage",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed diversified mean-variance efficient portfolio of two assets",
                    "value": {
                      "assetsWeights": [
                        0.3375016499673578,
                        0.6624983500326422
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolios/optimization/mean-variance-efficient/resampling-based": {
      "post": {
        "tags": [
          "Portfolio Optimization / Mean-Variance"
        ],
        "summary": "Resampling-Based Mean-Variance Efficient Portfolio",
        "description": "Compute the asset weights of the resampling-based mean-variance efficient portfolio, using a mix of the methodologies described in the first and the second references, optionally subject to:  \n* Minimum and maximum weights constraints\n* Minimum and maximum group weights constraints\n* Minimum and maximum portfolio exposure constraints\n\nReferences\n * [Richard O Michaud, Robert O Michaud, Efficient Asset Management: A Practical Guide to Stock Portfolio Optimization and Asset Allocation](https://academic.oup.com/book/52209/chapter-abstract/421081595?redirectedFrom=fulltext)       \n * [F. Fabozzi, P. Kolm, D. Pachamanova, and S. Focardi. Robust portfolio optimization and management. John Wiley & Sons, 2007](https://www.wiley.com/en-us/Robust+Portfolio+Optimization+and+Management-p-9780471921226)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets",
                  "assetsReturns",
                  "assetsCovarianceMatrix"
                ],
                "properties": {
                  "assets": {
                    "description": "The number of assets",
                    "type": "integer",
                    "minimum": 2
                  },
                  "assetsReturns": {
                    "description": "assetsReturns[i] is the arithmetic return of asset i",
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "number"
                    }
                  },
                  "assetsCovarianceMatrix": {
                    "description": "assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "simulatedPortfolios": {
                    "description": "The number of portfolios to simulate",
                    "type": "integer",
                    "minimum": 1,
                    "default": 128
                  },
                  "simulatedPortfoliosAggregationMethod": {
                    "description": "The method to aggregate the simulated portfolios",
                    "type": "string",
                    "enum": [
                      "average",
                      "median"
                    ],
                    "default": "average"
                  },
                  "assetsReturnsUncertaintyIntervals": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "array",
                      "description": "assetsReturnsUncertaintyIntervals[i][0] (resp. assetsReturnsUncertaintyIntervals[i][1]) is the lower (resp. upper) bound of the uncertainty interval around the i-th asset arithmetic return assetsReturns[i]; defaults to the interval [0.95* assetsReturns[i], 1.05 * assetsReturns[i]]",
                      "minItems": 2,
                      "maxItems": 2,
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "assetsStandardDeviationsUncertaintyIntervals": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "array",
                      "description": "assetsStandardDeviationsUncertaintyIntervals[i][0] (resp. assetsStandardDeviationsUncertaintyIntervals[i][1]) is the lower (resp. upper) bound of the uncertainty interval around the i-th asset standard deviation sqrt(assetsCovarianceMatrix[i][i]); defaults to the interval [0.95 * sqrt(assetsCovarianceMatrix[i][i]), 1.05 * sqrt(assetsCovarianceMatrix[i][i])]",
                      "minItems": 2,
                      "maxItems": 2,
                      "items": {
                        "type": "number",
                        "minimum": 0
                      }
                    }
                  },
                  "assetsCorrelationMatrixUncertaintyLevel": {
                    "description": "The uncertainty level on the coefficients of the asset correlation matrix associated to assetsCovarianceMatrix; defaults to 0.10",
                    "type": "number",
                    "minimum": 0,
                    "maximum": 2
                  },
                  "constraints": {
                    "type": "object",
                    "properties": {
                      "portfolioReturn": {
                        "description": "The portfolio return; exclusive with portfolioVolatility, riskTolerance and maximumPortfolioVolatility",
                        "type": "number"
                      },
                      "portfolioVolatility": {
                        "description": "The portfolio volatility; exclusive with portfolioReturn, riskTolerance and maximumPortfolioVolatility",
                        "type": "number",
                        "minimum": 0
                      },
                      "maximumPortfolioVolatility": {
                        "description": "The maximum portfolio volatility; exclusive with portfolioReturn, portfolioVolatility and riskTolerance",
                        "type": "number",
                        "minimum": 0
                      },
                      "riskTolerance": {
                        "description": "The portfolio risk tolerance; exclusive with portfolioReturn, portfolioVolatility and maximumPortfolioVolatility",
                        "type": "number",
                        "minimum": 0
                      },
                      "minimumAssetsWeights": {
                        "description": "minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "maximumAssetsWeights": {
                        "description": "maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "assetsGroups": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "array",
                          "description": "assetsGroups[k] is the indexes of the assets belonging to the assets group k in the portfolio; exclusive with assetsGroupsMatrix",
                          "minItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": "integer",
                            "minimum": 1
                          }
                        }
                      },
                      "assetsGroupsMatrix": {
                        "description": "assetsGroupsMatrix[k][i] is the weight of the asset i in the group of assets k; exclusive with assetsGroups",
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "maximumAssetsGroupsWeights": {
                        "description": "maximumAssetsGroupsWeights[k] is the maximum weight of the assets group k in the portfolio, in percentage between 0 and 1 if assetsGroups is provided",
                        "type": "array",
                        "items": {
                          "type": "number"
                        }
                      },
                      "minimumPortfolioExposure": {
                        "description": "The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1
                      },
                      "maximumPortfolioExposure": {
                        "description": "The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute the portfolio weights for three assets, with a 10% uncertainty around the first asset return and a 50% uncertainty around all the asset standard deviations",
                  "value": {
                    "assets": 3,
                    "assetsReturns": [
                      0.1,
                      0.2,
                      0.15
                    ],
                    "assetsCovarianceMatrix": [
                      [
                        1,
                        0.3,
                        -0.2
                      ],
                      [
                        0.3,
                        1,
                        0.2
                      ],
                      [
                        -0.2,
                        0.2,
                        1
                      ]
                    ],
                    "assetsReturnsUncertaintyIntervals": [
                      [
                        0.09,
                        0.11
                      ],
                      [
                        0.2,
                        0.2
                      ],
                      [
                        0.15,
                        0.15
                      ]
                    ],
                    "assetsStandardDeviationsUncertaintyIntervals": [
                      [
                        0.5,
                        1.5
                      ],
                      [
                        0.5,
                        1.5
                      ],
                      [
                        0.5,
                        1.5
                      ]
                    ],
                    "constraints": {
                      "portfolioReturn": 0.15
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsWeights"
                  ],
                  "properties": {
                    "assetsWeights": {
                      "description": "assetsWeights[i] is the weight of the asset i in the portfolio, in percentage",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed portfolio of three assets",
                    "value": {
                      "assetsWeights": [
                        0,
                        0.3333333333333333,
                        0.6666666666666666
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolio/optimization/mean-variance-efficient/subset-resampling-based": {
      "post": {
        "tags": [
          "Portfolio Optimization / Mean-Variance"
        ],
        "summary": "Subset Resampling-Based Mean-Variance Efficient Portfolio",
        "description": "Compute the asset weights of a subset resampling-based  mean-variance efficient portfolio, using the methodology described in the first and the second references, optionally subject to:  \n* Minimum and maximum weights constraints\n* Minimum and maximum group weights constraints\n* Minimum and maximum portfolio exposure constraints\n\nReferences\n * [CSSA, Random Subspace Optimization (RSO)](https://cssanalytics.wordpress.com/2013/10/06/random-subspace-optimization-rso/)\n * [Subset Optimization for Asset Allocation,Benjamin J. Gillen](https://www.bengillen.com/uploads/1/2/3/8/123891022/subsets.pdf)\n * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets",
                  "assetsReturns",
                  "assetsCovarianceMatrix",
                  "constraints"
                ],
                "properties": {
                  "assets": {
                    "description": "The number of assets",
                    "type": "integer",
                    "minimum": 2
                  },
                  "assetsReturns": {
                    "description": "assetsReturns[i] is the arithmetic return of asset i",
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "number"
                    }
                  },
                  "assetsCovarianceMatrix": {
                    "description": "assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "subsetSize": {
                    "description": "The number of assets to include in each subset portfolio; defaults to a value of order the square root of the total number of assets",
                    "type": "integer",
                    "minimum": 2
                  },
                  "simulatedPortfolios": {
                    "description": "The number of simulated portfolios to compute; only applicable if the generation method for the subset portfolios is random sampling",
                    "type": "integer",
                    "minimum": 1,
                    "default": 128
                  },
                  "simulatedPortfoliosGenerationMethod": {
                    "description": "The method to generate the simulated portfolios",
                    "type": "string",
                    "enum": [
                      "complete",
                      "random"
                    ],
                    "default": "random"
                  },
                  "simulatedPortfoliosAggregationMethod": {
                    "description": "The method to aggregate the simulated portfolios",
                    "type": "string",
                    "enum": [
                      "average",
                      "median"
                    ],
                    "default": "average"
                  },
                  "constraints": {
                    "type": "object",
                    "properties": {
                      "portfolioReturn": {
                        "description": "The portfolio return; exclusive with portfolioVolatility and riskTolerance",
                        "type": "number"
                      },
                      "portfolioVolatility": {
                        "description": "The portfolio volatility; exclusive with portfolioReturn and riskTolerance",
                        "type": "number",
                        "minimum": 0
                      },
                      "riskTolerance": {
                        "description": "The portfolio risk tolerance; exclusive with portfolioReturn and portfolioVolatility",
                        "type": "number",
                        "minimum": 0
                      },
                      "minimumAssetsWeights": {
                        "description": "minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "maximumAssetsWeights": {
                        "description": "maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "assetsGroups": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "array",
                          "description": "assetsGroups[k] is the indexes of the assets belonging to the assets group k in the portfolio; exclusive with assetsGroupsMatrix",
                          "minItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": "integer",
                            "minimum": 1
                          }
                        }
                      },
                      "assetsGroupsMatrix": {
                        "description": "assetsGroupsMatrix[k][i] is the weight of the asset i in the group of assets k; exclusive with assetsGroups",
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "maximumAssetsGroupsWeights": {
                        "description": "maximumAssetsGroupsWeights[k] is the maximum weight of the assets group k in the portfolio, in percentage between 0 and 1 if assetsGroups is provided",
                        "type": "array",
                        "items": {
                          "type": "number"
                        }
                      },
                      "minimumPortfolioExposure": {
                        "description": "The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1
                      },
                      "maximumPortfolioExposure": {
                        "description": "The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute the portfolio weights for three assets with a risk tolerance constraint of 2",
                  "value": {
                    "assets": 3,
                    "assetsReturns": [
                      0.1,
                      0.2,
                      0.3
                    ],
                    "assetsCovarianceMatrix": [
                      [
                        1,
                        0,
                        0
                      ],
                      [
                        0,
                        1,
                        0
                      ],
                      [
                        0,
                        0,
                        1
                      ]
                    ],
                    "constraints": {
                      "riskTolerance": 2
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsWeights"
                  ],
                  "properties": {
                    "assetsWeights": {
                      "description": "assetsWeights[i] is the weight of the asset i in the portfolio, in percentage",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed portfolio of three assets",
                    "value": {
                      "assetsWeights": [
                        0.24609375,
                        0.3125,
                        0.44140624999999994
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolio/optimization/equal-sharpe-ratio-contributions": {
      "post": {
        "tags": [
          "Portfolio Optimization"
        ],
        "summary": "Equal Sharpe Ratio Contributions Portfolio",
        "description": "Compute the asset weights of the equal Sharpe Ratio contributions portfolio.\n\nReferences\n * [Andreas Steiner, Sharpe Ratio Contribution and Attribution Analysis](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=1839166\")\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets",
                  "assetsReturns",
                  "riskFreeRate",
                  "assetsCovarianceMatrix"
                ],
                "properties": {
                  "assets": {
                    "description": "The number of assets",
                    "type": "integer",
                    "minimum": 2
                  },
                  "assetsReturns": {
                    "description": "assetsReturns[i] is the arithmetic return of asset i",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "number"
                    }
                  },
                  "assetsCovarianceMatrix": {
                    "description": "assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j",
                    "type": "array",
                    "minItems": 2,
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "riskFreeRate": {
                    "description": "The arithmetic risk free rate",
                    "type": "number"
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute the portfolio weights for two assets",
                  "value": {
                    "assets": 2,
                    "assetsReturns": [
                      0.05,
                      0.1
                    ],
                    "assetsCovarianceMatrix": [
                      [
                        0.05,
                        0.02
                      ],
                      [
                        0.02,
                        0.07
                      ]
                    ],
                    "riskFreeRate": 0
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsWeights"
                  ],
                  "properties": {
                    "assetsWeights": {
                      "description": "assetsWeights[i] is the weight of the asset i in the portfolio, in percentage",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed portfolio weights for two assets",
                    "value": {
                      "assetsWeights": [
                        0.6666666666666666,
                        0.3333333333333333
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolio/optimization/market-capitalization-weighted": {
      "post": {
        "tags": [
          "Portfolio Optimization"
        ],
        "summary": "Market Capitalization Weighted Portfolio",
        "description": "Compute the asset weights of the market capitalization-weighted portfolio.\n\nReferences\n * [Wikipedia, Capitalization-weighted Index](https://en.wikipedia.org/wiki/Capitalization-weighted_index)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets",
                  "assetsMarketCapitalizations"
                ],
                "properties": {
                  "assets": {
                    "description": "The number of assets",
                    "type": "integer",
                    "minimum": 2
                  },
                  "assetsMarketCapitalizations": {
                    "type": "array",
                    "description": "assetsMarketCapitalizations[i] is the market capitalization of the asset i",
                    "minItems": 2,
                    "items": {
                      "type": "number",
                      "minimum": 0
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute the portfolio weights for two assets with market capitalizations equal to 1 and 2",
                  "value": {
                    "assets": 2,
                    "assetsMarketCapitalizations": [
                      1,
                      2
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsWeights"
                  ],
                  "properties": {
                    "assetsWeights": {
                      "description": "assetsWeights[i] is the weight of the asset i in the portfolio, in percentage",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed market capitalization-weighted portfolio of two assets",
                    "value": {
                      "assetsWeights": [
                        0.3333333333333333,
                        0.6666666666666666
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolio/optimization/maximum-ulcer-performance-index": {
      "post": {
        "tags": [
          "Portfolio Optimization / Ulcer Index"
        ],
        "summary": "Maximum Ulcer Performance Index Portfolio",
        "description": "Compute the asset weights of the maximum Ulcer Performance Index portfolio, optionally subject to:  \n* Minimum and maximum weights constraints\n* Minimum and maximum group weights constraints\n* Minimum and maximum portfolio exposure constraints\n\nNotes:  \n* This endpoint will return an error if the maximum Ulcer Performance Index portfolio has a negative Ulcer Performance Index\n\nReferences\n * [Peter G. Martin, Ulcer Index, An Alternative Approach to the Measurement of Investment Risk & Risk-Adjusted Performance](http://www.tangotools.com/ui/ui.htm)\n * [A. Chekhlov, S. Uryasev, M. Zabarankin, Portfolio Optimization with Drawdown Constraints, Supply Chain and Finance, p 209-228](https://doi.org/10.1142/9789812562586_0013)\n * [A. Chekhlov, S. Uryasev, M. Zabarankin, Drawdown Measure in Portfolio Optimization, International Journal of Theoretical and Applied FinanceVol. 08, No. 01, pp. 13-58 (2005)](https://www.worldscientific.com/doi/10.1142/S0219024905002767)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets",
                  "riskFreeRate"
                ],
                "properties": {
                  "assets": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "assetPrices"
                      ],
                      "properties": {
                        "assetPrices": {
                          "description": "assetPrices[t] is the price of the asset at the time t",
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number",
                            "minimum": 0,
                            "exclusiveMinimum": true
                          }
                        }
                      }
                    }
                  },
                  "riskFreeRate": {
                    "description": "The arithmetic risk free rate",
                    "type": "number"
                  },
                  "constraints": {
                    "type": "object",
                    "properties": {
                      "minimumAssetsWeights": {
                        "description": "minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "maximumAssetsWeights": {
                        "description": "maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "assetsGroups": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "array",
                          "description": "assetsGroups[k] is the indexes of the assets belonging to the assets group k in the portfolio; exclusive with assetsGroupsMatrix",
                          "minItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": "integer",
                            "minimum": 1
                          }
                        }
                      },
                      "assetsGroupsMatrix": {
                        "description": "assetsGroupsMatrix[k][i] is the weight of the asset i in the group of assets k; exclusive with assetsGroups",
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "maximumAssetsGroupsWeights": {
                        "description": "maximumAssetsGroupsWeights[k] is the maximum weight of the assets group k in the portfolio, in percentage between 0 and 1 if assetsGroups is provided",
                        "type": "array",
                        "items": {
                          "type": "number"
                        }
                      },
                      "minimumPortfolioExposure": {
                        "description": "The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1
                      },
                      "maximumPortfolioExposure": {
                        "description": "The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute the portfolio weights for two assets with a risk free rate of 0%",
                  "value": {
                    "assets": [
                      {
                        "assetPrices": [
                          100,
                          95,
                          110
                        ]
                      },
                      {
                        "assetPrices": [
                          100,
                          105,
                          100
                        ]
                      }
                    ],
                    "riskFreeRate": 0
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsWeights"
                  ],
                  "properties": {
                    "assetsWeights": {
                      "description": "assetsWeights[i] is the weight of the asset i in the portfolio, in percentage",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed portfolio weights for two assets",
                    "value": {
                      "assetsWeights": [
                        0.3101913068855954,
                        0.6898086931144047
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolio/optimization/minimum-ulcer-index": {
      "post": {
        "tags": [
          "Portfolio Optimization / Ulcer Index"
        ],
        "summary": "Minimum Ulcer Index Portfolio",
        "description": "Compute the asset weights of the minimum Ulcer Index portfolio, optionally subject to:  \n* Minimum and maximum weights constraints\n* Minimum and maximum group weights constraints\n* Minimum and maximum portfolio exposure constraints\n\nReferences\n * [Peter G. Martin, Ulcer Index, An Alternative Approach to the Measurement of Investment Risk & Risk-Adjusted Performance](http://www.tangotools.com/ui/ui.htm)\n * [A. Chekhlov, S. Uryasev, M. Zabarankin, Portfolio Optimization with Drawdown Constraints, Supply Chain and Finance, p 209-228](https://doi.org/10.1142/9789812562586_0013)\n * [A. Chekhlov, S. Uryasev, M. Zabarankin, Drawdown Measure in Portfolio Optimization, International Journal of Theoretical and Applied FinanceVol. 08, No. 01, pp. 13-58 (2005)](https://www.worldscientific.com/doi/10.1142/S0219024905002767)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets"
                ],
                "properties": {
                  "assets": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "assetPrices"
                      ],
                      "properties": {
                        "assetPrices": {
                          "description": "assetPrices[t] is the price of the asset at the time t",
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number",
                            "minimum": 0,
                            "exclusiveMinimum": true
                          }
                        }
                      }
                    }
                  },
                  "constraints": {
                    "type": "object",
                    "properties": {
                      "minimumAssetsWeights": {
                        "description": "minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "maximumAssetsWeights": {
                        "description": "maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage",
                        "type": "array",
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1
                        }
                      },
                      "assetsGroups": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "array",
                          "description": "assetsGroups[k] is the indexes of the assets belonging to the assets group k in the portfolio; exclusive with assetsGroupsMatrix",
                          "minItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": "integer",
                            "minimum": 1
                          }
                        }
                      },
                      "assetsGroupsMatrix": {
                        "description": "assetsGroupsMatrix[k][i] is the weight of the asset i in the group of assets k; exclusive with assetsGroups",
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "maximumAssetsGroupsWeights": {
                        "description": "maximumAssetsGroupsWeights[k] is the maximum weight of the assets group k in the portfolio, in percentage between 0 and 1 if assetsGroups is provided",
                        "type": "array",
                        "items": {
                          "type": "number"
                        }
                      },
                      "minimumPortfolioExposure": {
                        "description": "The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1
                      },
                      "maximumPortfolioExposure": {
                        "description": "The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 1
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute the portfolio weights for two assets",
                  "value": {
                    "assets": [
                      {
                        "assetPrices": [
                          100,
                          95,
                          110
                        ]
                      },
                      {
                        "assetPrices": [
                          100,
                          105,
                          100
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assetsWeights"
                  ],
                  "properties": {
                    "assetsWeights": {
                      "description": "assetsWeights[i] is the weight of the asset i in the portfolio, in percentage",
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed portfolio weights for two assets",
                    "value": {
                      "assetsWeights": [
                        0.24615095383708674,
                        0.7538490461629133
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolio/analysis/value-at-risk/empirical": {
      "post": {
        "tags": [
          "Portfolio Analysis / Value At Risk"
        ],
        "summary": "Empirical Value At Risk",
        "description": "Compute the empirical value at risk of a portfolio from portfolio values.\n\nReferences\n* [Wikipedia, Value at risk](https://en.wikipedia.org/wiki/Value_at_risk)\n* [Acerbi, C. and Tasche, D. (2002), Expected Shortfall: A Natural Coherent Alternative to Value at Risk. Economic Notes, 31: 379-388](https://onlinelibrary.wiley.com/doi/abs/10.1111/1468-0300.00091)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "portfolios"
                ],
                "properties": {
                  "confidenceLevel": {
                    "description": "The confidence level",
                    "type": "number",
                    "minimum": 0,
                    "exclusiveMinimum": true,
                    "maximum": 1,
                    "exclusiveMaximum": true,
                    "default": 0.95
                  },
                  "portfolios": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "portfolioValues"
                      ],
                      "properties": {
                        "portfolioValues": {
                          "description": "portfolioValues[t] is the value of the portfolio at the time t",
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number",
                            "minimum": 0,
                            "exclusiveMinimum": true
                          }
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "From portfolio values": {
                  "description": "Compute the empirical value at risk of a portfolio based on portfolio values, at the default 95% confidence level",
                  "value": {
                    "portfolios": [
                      {
                        "portfolioValues": [
                          100,
                          95,
                          100,
                          90,
                          85,
                          70
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "portfolios"
                  ],
                  "properties": {
                    "portfolios": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "portfolioValueAtRisk"
                        ],
                        "properties": {
                          "portfolioValueAtRisk": {
                            "description": "The empirical value at risk of the portfolio",
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed empirical value at risk of a portfolio",
                    "value": {
                      "portfolios": [
                        {
                          "portfolioValueAtRisk": 0.17647058823529413
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolio/analysis/value-at-risk/gaussian": {
      "post": {
        "tags": [
          "Portfolio Analysis / Value At Risk"
        ],
        "summary": "Gaussian Value At Risk",
        "description": "Compute the Gaussian value at risk of one or several portfolio(s) from portfolio values.\n\nReferences\n* [Ballotta, Laura and Fusai, Gianluca, A Gentle Introduction to Value at Risk](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=2942138)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "portfolios"
                ],
                "properties": {
                  "confidenceLevel": {
                    "description": "The confidence level",
                    "type": "number",
                    "minimum": 0,
                    "exclusiveMinimum": true,
                    "maximum": 1,
                    "exclusiveMaximum": true,
                    "default": 0.95
                  },
                  "portfolios": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "portfolioValues"
                      ],
                      "properties": {
                        "portfolioValues": {
                          "description": "portfolioValues[t] is the value of the portfolio at the time t",
                          "type": "array",
                          "minItems": 3,
                          "items": {
                            "type": "number",
                            "minimum": 0,
                            "exclusiveMinimum": true
                          }
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "From portfolio values": {
                  "description": "Compute the Gaussian value at risk of a portfolio based on portfolio values, at the default 95% confidence level",
                  "value": {
                    "portfolios": [
                      {
                        "portfolioValues": [
                          100,
                          95,
                          100,
                          90,
                          85,
                          70
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "portfolios"
                  ],
                  "properties": {
                    "portfolios": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "portfolioValueAtRisk"
                        ],
                        "properties": {
                          "portfolioValueAtRisk": {
                            "description": "The value at risk of the portfolio",
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed value at risk of a portfolio",
                    "value": {
                      "portfolios": [
                        {
                          "portfolioValueAtRisk": 0.17647058823529413
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolio/analysis/value-at-risk/cornish-fisher": {
      "post": {
        "tags": [
          "Portfolio Analysis / Value At Risk"
        ],
        "summary": "Cornish-Fisher Value At Risk",
        "description": "Compute the Cornish-Fisher value at risk of one or several portfolio(s) from portfolio values.\n\nReferences\n* [Laurent Favre and Jos\u00e9-Antonio Galeano, Mean-Modified Value-at-Risk Optimization with Hedge Funds, The Journal of Alternative Investments Fall 2002, 5 (2) 21-25](https://jai.pm-research.com/content/5/2/21)\n* [Lamb, John D., Maura E. Monville, and Kai-Hong Tee. Making Cornish\u2013fisher Fit for Risk Measurement, Journal of Risk, Volume 21, Number 5, p. 53-81](http://doi.org/10.21314/JOR.2019.408)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "portfolios"
                ],
                "properties": {
                  "confidenceLevel": {
                    "description": "The confidence level",
                    "type": "number",
                    "minimum": 0,
                    "exclusiveMinimum": true,
                    "maximum": 1,
                    "exclusiveMaximum": true,
                    "default": 0.95
                  },
                  "portfolios": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "portfolioValues"
                      ],
                      "properties": {
                        "portfolioValues": {
                          "description": "portfolioValues[t] is the value of the portfolio at the time t",
                          "type": "array",
                          "minItems": 5,
                          "items": {
                            "type": "number",
                            "minimum": 0,
                            "exclusiveMinimum": true
                          }
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "From portfolio values": {
                  "description": "Compute the Cornish-Fisher value at risk of a portfolio based on portfolio values, at the default 95% confidence level",
                  "value": {
                    "portfolios": [
                      {
                        "portfolioValues": [
                          100,
                          95,
                          100,
                          90,
                          85,
                          70
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "portfolios"
                  ],
                  "properties": {
                    "portfolios": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "portfolioValueAtRisk"
                        ],
                        "properties": {
                          "portfolioValueAtRisk": {
                            "description": "The value at risk of the portfolio",
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed value at risk of a portfolio",
                    "value": {
                      "portfolios": [
                        {
                          "portfolioValueAtRisk": 0.17647058823529413
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolio/analysis/value-at-risk/cornish-fisher/corrected": {
      "post": {
        "tags": [
          "Portfolio Analysis / Value At Risk"
        ],
        "summary": "Corrected Cornish-Fisher Value At Risk",
        "description": "Compute the corrected Cornish-Fisher value at risk of one or several portfolio(s) from portfolio values.\n\nReferences\n* [Lamb, John D., Maura E. Monville, and Kai-Hong Tee. Making Cornish\u2013fisher Fit for Risk Measurement, Journal of Risk, Volume 21, Number 5, p. 53-81](http://doi.org/10.21314/JOR.2019.408)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "portfolios"
                ],
                "properties": {
                  "confidenceLevel": {
                    "description": "The confidence level",
                    "type": "number",
                    "minimum": 0,
                    "exclusiveMinimum": true,
                    "maximum": 1,
                    "exclusiveMaximum": true,
                    "default": 0.95
                  },
                  "portfolios": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "portfolioValues"
                      ],
                      "properties": {
                        "portfolioValues": {
                          "description": "portfolioValues[t] is the value of the portfolio at the time t",
                          "type": "array",
                          "minItems": 5,
                          "items": {
                            "type": "number",
                            "minimum": 0,
                            "exclusiveMinimum": true
                          }
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "From portfolio values": {
                  "description": "Compute the corrected Cornish-Fisher value at risk of a portfolio based on portfolio values, at the default 95% confidence level",
                  "value": {
                    "portfolios": [
                      {
                        "portfolioValues": [
                          100,
                          95,
                          100,
                          90,
                          85,
                          70
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "portfolios"
                  ],
                  "properties": {
                    "portfolios": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "portfolioValueAtRisk"
                        ],
                        "properties": {
                          "portfolioValueAtRisk": {
                            "description": "The value at risk of the portfolio",
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed value at risk of a portfolio",
                    "value": {
                      "portfolios": [
                        {
                          "portfolioValueAtRisk": 0.17647058823529413
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolios/analysis/value-at-risk/gaussian/mixture": {
      "post": {
        "tags": [
          "Portfolio Analysis / Value At Risk"
        ],
        "summary": "Gaussian Mixture Value At Risk",
        "description": "Compute the Gaussian mixture value at risk of one or several portfolio(s) from portfolio values.\n\nReferences\n* [Saissi Hassani, Samir and Dionne, Georges, The New International Regulation of Market Risk: Roles of VaR and CVaR in Model Validation](https://ssrn.com/abstract=3766511)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "portfolios"
                ],
                "properties": {
                  "confidenceLevel": {
                    "description": "The confidence level",
                    "type": "number",
                    "minimum": 0,
                    "exclusiveMinimum": true,
                    "maximum": 1,
                    "exclusiveMaximum": true,
                    "default": 0.95
                  },
                  "mixtureFittingMethod": {
                    "type": "string",
                    "description": "The method to use to fit the Gaussian mixture to the portfolio log returns",
                    "enum": [
                      "turbulencePartitioning",
                      "expectationMaximization"
                    ],
                    "default": "turbulencePartitioning"
                  },
                  "mixtureFittingMethodParameters": {
                    "type": "object",
                    "properties": {
                      "turbulencePartitioningMethod": {
                        "type": "string",
                        "description": "The method to use to partition the portfolio log returns from their turbulence value in case the Gaussian mixture fitting method is 'turbulencePartitioning'",
                        "enum": [
                          "thresholding",
                          "clustering"
                        ],
                        "default": "clustering"
                      },
                      "turbulenceThresholds": {
                        "type": "array",
                        "description": "The turbulence threshold(s) in case the Gaussian mixture fitting method is 'turbulencePartitioning' and the turbulence partitioning method is 'thresholding', in percentage; in case several turbulence thresholds are provided, they must be provided in increasing order",
                        "default": [
                          0.75
                        ],
                        "minItems": 1,
                        "maxItems": 4,
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "exclusiveMinimum": true,
                          "maximum": 1,
                          "exclusiveMaximum": true
                        }
                      },
                      "turbulenceThresholdsConversionMethod": {
                        "type": "string",
                        "description": "The method to convert the turbulence threshold(s) into turbulence score(s) in case the Gaussian mixture fitting method is 'turbulencePartitioning' and the turbulence partitioning method is 'thresholding'",
                        "enum": [
                          "empiricalQuantileDistribution",
                          "chisquareInverseDistribution"
                        ],
                        "default": "chisquareInverseDistribution"
                      },
                      "turbulencePartitions": {
                        "type": "integer",
                        "description": "The number of desired partition(s) in case the Gaussian mixture fitting method is 'turbulencePartitioning' and the turbulence partitioning method is 'clustering'",
                        "minimum": 2,
                        "maximum": 5
                      },
                      "turbulencePartitioningConstraints": {
                        "type": "object",
                        "properties": {
                          "minimumPartitionsReturns": {
                            "type": "integer",
                            "description": "The minimum number of desired portfolio log returns per partition in case the Gaussian mixture fitting method is 'turbulencePartitioning'",
                            "minimum": 2,
                            "default": 2
                          }
                        }
                      },
                      "mixtureComponents": {
                        "type": "integer",
                        "description": "The number of desired Gaussian mixture components in case the Gaussian mixture fitting method is 'expectationMaximization'",
                        "minimum": 2,
                        "maximum": 5
                      }
                    }
                  },
                  "portfolios": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "portfolioValues"
                      ],
                      "properties": {
                        "portfolioValues": {
                          "description": "portfolioValues[t] is the value of the portfolio at the time t",
                          "type": "array",
                          "minItems": 5,
                          "items": {
                            "type": "number",
                            "minimum": 0,
                            "exclusiveMinimum": true
                          }
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "Using clustering of the portfolio turbulence values": {
                  "description": "Compute the Gaussian mixture value at risk of a portfolio based on portfolio turbulence values, at the default 95% confidence level",
                  "value": {
                    "portfolios": [
                      {
                        "portfolioValues": [
                          100,
                          95,
                          100,
                          90,
                          85,
                          70
                        ]
                      }
                    ]
                  }
                },
                "Using Expectation-Maximization": {
                  "description": "Compute the Gaussian mixture value at risk of a portfolio based on the EM algorithm, at the default 95% confidence level",
                  "value": {
                    "mixtureFittingMethod": "expectationMaximization",
                    "portfolios": [
                      {
                        "portfolioValues": [
                          100,
                          95,
                          100,
                          90,
                          85,
                          70
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "portfolios"
                  ],
                  "properties": {
                    "portfolios": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "portfolioValueAtRisk"
                        ],
                        "properties": {
                          "portfolioValueAtRisk": {
                            "description": "The value at risk of the portfolio",
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed value at risk of a portfolio",
                    "value": {
                      "portfolios": [
                        {
                          "portfolioValueAtRisk": 0.17647058823529413
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolio/analysis/value-at-risk/conditional/empirical": {
      "post": {
        "tags": [
          "Portfolio Analysis / Conditional Value At Risk"
        ],
        "summary": "Empirical Conditional Value At Risk",
        "description": "Compute the empirical conditional value at risk of a portfolio from portfolio values.\n\nReferences\n* [Wikipedia, Value at risk](https://en.wikipedia.org/wiki/Value_at_risk)\n* [Acerbi, C. and Tasche, D. (2002), Expected Shortfall: A Natural Coherent Alternative to Value at Risk. Economic Notes, 31: 379-388](https://onlinelibrary.wiley.com/doi/abs/10.1111/1468-0300.00091)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "portfolios"
                ],
                "properties": {
                  "confidenceLevel": {
                    "description": "The confidence level",
                    "type": "number",
                    "minimum": 0,
                    "exclusiveMinimum": true,
                    "maximum": 1,
                    "exclusiveMaximum": true,
                    "default": 0.95
                  },
                  "portfolios": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "portfolioValues"
                      ],
                      "properties": {
                        "portfolioValues": {
                          "description": "portfolioValues[t] is the value of the portfolio at the time t",
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number",
                            "minimum": 0,
                            "exclusiveMinimum": true
                          }
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "From portfolio values": {
                  "description": "Compute the empirical conditional value at risk of a portfolio based on portfolio values, at the default 95% confidence level",
                  "value": {
                    "portfolios": [
                      {
                        "portfolioValues": [
                          100,
                          95,
                          100,
                          90,
                          85,
                          70
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "portfolios"
                  ],
                  "properties": {
                    "portfolios": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "portfolioConditionalValueAtRisk"
                        ],
                        "properties": {
                          "portfolioConditionalValueAtRisk": {
                            "description": "The empirical conditional value at risk of the portfolio",
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed empirical conditional value at risk of a portfolio",
                    "value": {
                      "portfolios": [
                        {
                          "portfolioConditionalValueAtRisk": 0.17647058823529413
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolio/analysis/value-at-risk/conditional/gaussian": {
      "post": {
        "tags": [
          "Portfolio Analysis / Conditional Value At Risk"
        ],
        "summary": "Gaussian Conditional Value At Risk",
        "description": "Compute the Gaussian conditional value at risk of one or several portfolio(s) from portfolio values.\n\nReferences\n* [Boudt, Kris and Peterson, Brian G. and Croux, Christophe, Estimation and Decomposition of Downside Risk for Portfolios with Non-Normal Returns (October 31, 2007). Journal of Risk, Vol. 11, No. 2, pp. 79-103, 2008](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=1024151).\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "portfolios"
                ],
                "properties": {
                  "confidenceLevel": {
                    "description": "The confidence level",
                    "type": "number",
                    "minimum": 0,
                    "exclusiveMinimum": true,
                    "maximum": 1,
                    "exclusiveMaximum": true,
                    "default": 0.95
                  },
                  "portfolios": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "portfolioValues"
                      ],
                      "properties": {
                        "portfolioValues": {
                          "description": "portfolioValues[t] is the value of the portfolio at the time t",
                          "type": "array",
                          "minItems": 3,
                          "items": {
                            "type": "number",
                            "minimum": 0,
                            "exclusiveMinimum": true
                          }
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "From portfolio values": {
                  "description": "Compute the Gaussian conditional value at risk of a portfolio based on portfolio values, at the default 95% confidence level",
                  "value": {
                    "portfolios": [
                      {
                        "portfolioValues": [
                          100,
                          95,
                          100,
                          90,
                          85,
                          70
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "portfolios"
                  ],
                  "properties": {
                    "portfolios": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "portfolioConditionalValueAtRisk"
                        ],
                        "properties": {
                          "portfolioConditionalValueAtRisk": {
                            "description": "The conditional value at risk of the portfolio",
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed conditional value at risk of a portfolio",
                    "value": {
                      "portfolios": [
                        {
                          "portfolioConditionalValueAtRisk": 0.17647058823529413
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolio/analysis/value-at-risk/conditional/cornish-fisher": {
      "post": {
        "tags": [
          "Portfolio Analysis / Conditional Value At Risk"
        ],
        "summary": "Cornish-Fisher Conditional Value At Risk",
        "description": "Compute the Cornish-Fisher conditional value at risk of one or several portfolio(s) from portfolio values.\n\nReferences\n* [Boudt, Kris and Peterson, Brian G. and Croux, Christophe, Estimation and Decomposition of Downside Risk for Portfolios with Non-Normal Returns (October 31, 2007). Journal of Risk, Vol. 11, No. 2, pp. 79-103, 2008](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=1024151).\n* [Maillard, Didier, A User\u2019s Guide to the Cornish Fisher Expansion](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=1997178)\n* [Lamb, John D., Maura E. Monville, and Kai-Hong Tee. Making Cornish\u2013fisher Fit for Risk Measurement, Journal of Risk, Volume 21, Number 5, p. 53-81](http://doi.org/10.21314/JOR.2019.408)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "portfolios"
                ],
                "properties": {
                  "confidenceLevel": {
                    "description": "The confidence level",
                    "type": "number",
                    "minimum": 0,
                    "exclusiveMinimum": true,
                    "maximum": 1,
                    "exclusiveMaximum": true,
                    "default": 0.95
                  },
                  "portfolios": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "portfolioValues"
                      ],
                      "properties": {
                        "portfolioValues": {
                          "description": "portfolioValues[t] is the value of the portfolio at the time t",
                          "type": "array",
                          "minItems": 5,
                          "items": {
                            "type": "number",
                            "minimum": 0,
                            "exclusiveMinimum": true
                          }
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "From portfolio values": {
                  "description": "Compute the Cornish-Fisher conditional value at risk of a portfolio based on portfolio values, at the default 95% confidence level",
                  "value": {
                    "portfolios": [
                      {
                        "portfolioValues": [
                          100,
                          95,
                          100,
                          90,
                          85,
                          70
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "portfolios"
                  ],
                  "properties": {
                    "portfolios": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "portfolioConditionalValueAtRisk"
                        ],
                        "properties": {
                          "portfolioConditionalValueAtRisk": {
                            "description": "The conditional value at risk of the portfolio",
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed conditional value at risk of a portfolio",
                    "value": {
                      "portfolios": [
                        {
                          "portfolioConditionalValueAtRisk": 0.17647058823529413
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolio/analysis/value-at-risk/conditional/cornish-fisher/corrected": {
      "post": {
        "tags": [
          "Portfolio Analysis / Conditional Value At Risk"
        ],
        "summary": "Corrected Cornish-Fisher Conditional Value At Risk",
        "description": "Compute the corrected Cornish-Fisher conditional value at risk of one or several portfolio(s) from portfolio values.\n\nReferences\n* [Maillard, Didier, A User\u2019s Guide to the Cornish Fisher Expansion](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=1997178)\n* [Lamb, John D., Maura E. Monville, and Kai-Hong Tee. Making Cornish\u2013fisher Fit for Risk Measurement, Journal of Risk, Volume 21, Number 5, p. 53-81](http://doi.org/10.21314/JOR.2019.408)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "portfolios"
                ],
                "properties": {
                  "confidenceLevel": {
                    "description": "The confidence level",
                    "type": "number",
                    "minimum": 0,
                    "exclusiveMinimum": true,
                    "maximum": 1,
                    "exclusiveMaximum": true,
                    "default": 0.95
                  },
                  "portfolios": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "portfolioValues"
                      ],
                      "properties": {
                        "portfolioValues": {
                          "description": "portfolioValues[t] is the value of the portfolio at the time t",
                          "type": "array",
                          "minItems": 5,
                          "items": {
                            "type": "number",
                            "minimum": 0,
                            "exclusiveMinimum": true
                          }
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "From portfolio values": {
                  "description": "Compute the corrected Cornish-Fisher conditional value at risk of a portfolio based on portfolio values, at the default 95% confidence level",
                  "value": {
                    "portfolios": [
                      {
                        "portfolioValues": [
                          100,
                          95,
                          100,
                          90,
                          85,
                          70
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "portfolios"
                  ],
                  "properties": {
                    "portfolios": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "portfolioConditionalValueAtRisk"
                        ],
                        "properties": {
                          "portfolioConditionalValueAtRisk": {
                            "description": "The conditional value at risk of the portfolio",
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed conditional value at risk of a portfolio",
                    "value": {
                      "portfolios": [
                        {
                          "portfolioConditionalValueAtRisk": 0.17647058823529413
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolios/analysis/value-at-risk/conditional/gaussian/mixture": {
      "post": {
        "tags": [
          "Portfolio Analysis / Conditional Value At Risk"
        ],
        "summary": "Gaussian Mixture Conditional Value At Risk",
        "description": "Compute the Gaussian mixture conditional value at risk of one or several portfolio(s) from portfolio values.\n\nReferences\n* [Saissi Hassani, Samir and Dionne, Georges, The New International Regulation of Market Risk: Roles of VaR and CVaR in Model Validation](https://ssrn.com/abstract=3766511)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "portfolios"
                ],
                "properties": {
                  "confidenceLevel": {
                    "description": "The confidence level",
                    "type": "number",
                    "minimum": 0,
                    "exclusiveMinimum": true,
                    "maximum": 1,
                    "exclusiveMaximum": true,
                    "default": 0.95
                  },
                  "mixtureFittingMethod": {
                    "type": "string",
                    "description": "The method to use to fit the Gaussian mixture to the portfolio log returns",
                    "enum": [
                      "turbulencePartitioning",
                      "expectationMaximization"
                    ],
                    "default": "turbulencePartitioning"
                  },
                  "mixtureFittingMethodParameters": {
                    "type": "object",
                    "properties": {
                      "turbulencePartitioningMethod": {
                        "type": "string",
                        "description": "The method to use to partition the portfolio log returns from their turbulence value in case the Gaussian mixture fitting method is 'turbulencePartitioning'",
                        "enum": [
                          "thresholding",
                          "clustering"
                        ],
                        "default": "clustering"
                      },
                      "turbulenceThresholds": {
                        "type": "array",
                        "description": "The turbulence threshold(s) in case the Gaussian mixture fitting method is 'turbulencePartitioning' and the turbulence partitioning method is 'thresholding', in percentage; in case several turbulence thresholds are provided, they must be provided in increasing order",
                        "default": [
                          0.75
                        ],
                        "minItems": 1,
                        "maxItems": 4,
                        "items": {
                          "type": "number",
                          "minimum": 0,
                          "exclusiveMinimum": true,
                          "maximum": 1,
                          "exclusiveMaximum": true
                        }
                      },
                      "turbulenceThresholdsConversionMethod": {
                        "type": "string",
                        "description": "The method to convert the turbulence threshold(s) into turbulence score(s) in case the Gaussian mixture fitting method is 'turbulencePartitioning' and the turbulence partitioning method is 'thresholding'",
                        "enum": [
                          "empiricalQuantileDistribution",
                          "chisquareInverseDistribution"
                        ],
                        "default": "chisquareInverseDistribution"
                      },
                      "turbulencePartitions": {
                        "type": "integer",
                        "description": "The number of desired partition(s) in case the Gaussian mixture fitting method is 'turbulencePartitioning' and the turbulence partitioning method is 'clustering'",
                        "minimum": 2,
                        "maximum": 5
                      },
                      "turbulencePartitioningConstraints": {
                        "type": "object",
                        "properties": {
                          "minimumPartitionsReturns": {
                            "type": "integer",
                            "description": "The minimum number of desired portfolio log returns per partition in case the Gaussian mixture fitting method is 'turbulencePartitioning'",
                            "minimum": 2,
                            "default": 2
                          }
                        }
                      },
                      "mixtureComponents": {
                        "type": "integer",
                        "description": "The number of desired Gaussian mixture components in case the Gaussian mixture fitting method is 'expectationMaximization'",
                        "minimum": 2,
                        "maximum": 5
                      }
                    }
                  },
                  "portfolios": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "portfolioValues"
                      ],
                      "properties": {
                        "portfolioValues": {
                          "description": "portfolioValues[t] is the value of the portfolio at the time t",
                          "type": "array",
                          "minItems": 5,
                          "items": {
                            "type": "number",
                            "minimum": 0,
                            "exclusiveMinimum": true
                          }
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "Using clustering of the portfolio turbulence values": {
                  "description": "Compute the Gaussian mixture conditional value at risk of a portfolio based on portfolio turbulence values, at the default 95% confidence level",
                  "value": {
                    "portfolios": [
                      {
                        "portfolioValues": [
                          100,
                          95,
                          100,
                          90,
                          85,
                          70
                        ]
                      }
                    ]
                  }
                },
                "Using Expectation-Maximization": {
                  "description": "Compute the Gaussian mixture conditional value at risk of a portfolio based on the EM algorithm, at the default 95% confidence level",
                  "value": {
                    "mixtureFittingMethod": "expectationMaximization",
                    "portfolios": [
                      {
                        "portfolioValues": [
                          100,
                          95,
                          100,
                          90,
                          85,
                          70
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "portfolios"
                  ],
                  "properties": {
                    "portfolios": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "portfolioConditionalValueAtRisk"
                        ],
                        "properties": {
                          "portfolioConditionalValueAtRisk": {
                            "description": "The conditional value at risk of the portfolio",
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Computed conditional value at risk of a portfolio",
                    "value": {
                      "portfolios": [
                        {
                          "portfolioConditionalValueAtRisk": 0.17647058823529413
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/returns/moment-matched": {
      "post": {
        "tags": [
          "Assets / Returns"
        ],
        "summary": "Moment-matched Returns",
        "description": "Compute the _closest_ - in the sense defined in the first reference - asset returns to original asset returns whose sample mean vector and (biased) sample covariance matrix exactly match a target mean vector and a target covariance matrix.\n\n> Due to the nature of the endpoint, subsequent calls with the same input data might result in different output data under specific numerical situations.\n\nReferences\n* [Lin, J., Lermusiaux, P.F.J. Minimum-correction second-moment-matching: theory, algorithms and applications. Numer. Math. 147, 611\u2013650 (2021)](https://link.springer.com/article/10.1007/s00211-021-01178-8)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets"
                ],
                "properties": {
                  "assets": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "assetReturns"
                      ],
                      "properties": {
                        "assetReturns": {
                          "description": "assetReturns[t] is the return of the asset at the time t; all assetReturns arrays must have the same length",
                          "type": "array",
                          "minItems": 1,
                          "items": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  },
                  "targetMeans": {
                    "type": "array",
                    "description": "targetMeans[i] is the target mean return of the asset i",
                    "minItems": 1,
                    "items": {
                      "type": "number"
                    }
                  },
                  "targetCovarianceMatrix": {
                    "type": "array",
                    "description": "targetCovarianceMatrix[i][j] is the target covariance between the asset i and the asset j",
                    "minItems": 1,
                    "items": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "number"
                      }
                    }
                  }
                }
              },
              "examples": {
                "One asset, sample mean and sample variance matching": {
                  "description": "Compute the asset returns matching with a target mean return and a target variance",
                  "value": {
                    "assets": [
                      {
                        "assetReturns": [
                          0.01,
                          0,
                          0.02,
                          -0.03
                        ]
                      }
                    ],
                    "targetMeans": [
                      0
                    ],
                    "targetCovarianceMatrix": [
                      [
                        0.1
                      ]
                    ]
                  }
                },
                "Two assets, sample covariance matrix matching": {
                  "description": "Compute the asset returns matching with a target sample covariance matrix",
                  "value": {
                    "assets": [
                      {
                        "assetReturns": [
                          0.01,
                          0,
                          0.02,
                          -0.03
                        ]
                      },
                      {
                        "assetReturns": [
                          0.02,
                          -0.01,
                          0.04,
                          0.001
                        ]
                      }
                    ],
                    "targetCovarianceMatrix": [
                      [
                        1,
                        -0.5
                      ],
                      [
                        -0.5,
                        1
                      ]
                    ],
                    "targetMeans": [
                      0.1,
                      0.05
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assets"
                  ],
                  "properties": {
                    "assets": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "assetReturns"
                        ],
                        "properties": {
                          "assetReturns": {
                            "description": "assetReturns[t] is the moment-matched return of the asset at the time t; all assetReturns arrays have the same length",
                            "type": "array",
                            "minItems": 1,
                            "items": {
                              "type": "number"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Moment-matched asset returns for two assets",
                    "value": {
                      "assets": [
                        {
                          "assetReturns": [
                            0.05,
                            0.1,
                            0.09,
                            0.18
                          ]
                        },
                        {
                          "assetReturns": [
                            0.18,
                            0.31,
                            0.14,
                            0.29
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/returns/unsmoothed": {
      "post": {
        "tags": [
          "Assets / Returns"
        ],
        "summary": "Unsmoothed Returns",
        "description": "Compute unsmoothed asset returns from asset returns that are \"too smooth\" due to the presence of strong serial correlation, like private asset returns, c.f. the references.\n       \nReferences\n* [Geltner, David, 1991, Smoothing in appraisal-based returns, Journal of Real Estate Finance and Economics 4, 327 \u2013 345](https://link.springer.com/article/10.1007/BF00161933)\n* [Okunev, John and White, Derek, Hedge Fund Risk Factors and Value at Risk of Credit Trading Strategies (October 2003)](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=460641)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets"
                ],
                "properties": {
                  "assets": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "assetReturns"
                      ],
                      "properties": {
                        "assetReturns": {
                          "description": "assetReturns[t] is the logarithmic return of the asset at the time t; all assetReturns arrays must have the same length",
                          "type": "array",
                          "minItems": 2,
                          "items": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  },
                  "unsmoothingMethod": {
                    "type": "string",
                    "description": "The unsmoothing method to use",
                    "enum": [
                      "geltner",
                      "okunevWhite"
                    ],
                    "default": "geltner"
                  },
                  "unsmoothingMethodOrder": {
                    "description": "The order of autocorrelation to be removed from the asset returns; if unsmoothingMethod is equal to \"geltner\", the maximum value of unsmoothingMethodOrder is equal to 1",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 2,
                    "default": 1
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Remove the first order autocorrelation using the Geltner method",
                  "value": {
                    "assets": [
                      {
                        "assetReturns": [
                          0.001,
                          0.00205121,
                          0.00315633,
                          0.00677923,
                          0.01868891,
                          0.01389516
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assets"
                  ],
                  "properties": {
                    "assets": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "required": [
                          "assetReturns"
                        ],
                        "properties": {
                          "assetReturns": {
                            "description": "assetReturns[t] is the unsmoothed logarithmic return of the asset at the time t; all assetReturns arrays have the same length",
                            "type": "array",
                            "minItems": 1,
                            "items": {
                              "type": "number"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Unsmoothed asset returns for two assets",
                    "value": {
                      "assets": [
                        {
                          "assetReturns": [
                            0.05,
                            0.1,
                            0.09,
                            0.18
                          ]
                        },
                        {
                          "assetReturns": [
                            0.18,
                            0.31,
                            0.14,
                            0.29
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/returns/estimation/ordering-based": {
      "post": {
        "tags": [
          "Assets / Returns Estimation"
        ],
        "summary": "Returns from Ordering Information",
        "description": "Compute asset returns estimates consistent with ordering information about these assets returns, c.f. the reference.\n\n> Due to the nature of the endpoint, subsequent calls with the same input data will result in slightly different output data, but the relative classification of asset returns estimates will be identical.\n\nReferences\n* [Almgren, Robert and Chriss, Neil A., Optimal Portfolios from Ordering Information.](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=633801)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assets",
                  "assetsOrderingBeliefsMatrix"
                ],
                "properties": {
                  "assets": {
                    "description": "The number of assets",
                    "type": "integer",
                    "minimum": 2
                  },
                  "assetsOrderingBeliefsMatrix": {
                    "description": "assetsOrderingBeliefsMatrix[i] is the i-th belief vector on assets' returns",
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "number"
                      }
                    }
                  },
                  "assetsReturnsScalingFactor": {
                    "description": "The typical scale of asset returns magnitude, in percent (e.g. 0.05 if asset returns are yearly asset returns with a typical magnitude of 5% per year)",
                    "type": "number",
                    "minimum": 0,
                    "exclusiveMinimum": true,
                    "default": 1
                  }
                }
              },
              "examples": {
                "Example": {
                  "description": "Compute asset returns consistent with a complete sort of 3 assets",
                  "value": {
                    "assets": 3,
                    "assetsOrderingBeliefsMatrix": [
                      [
                        1,
                        -1,
                        0
                      ],
                      [
                        0,
                        1,
                        -1
                      ]
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "assets"
                  ],
                  "properties": {
                    "assets": {
                      "type": "array",
                      "minItems": 2,
                      "items": {
                        "type": "object",
                        "required": [
                          "assetReturn"
                        ],
                        "properties": {
                          "assetReturn": {
                            "description": "The estimate return of the asset",
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "description": "Unsmoothed asset returns for two assets",
                    "value": {
                      "assets": [
                        {
                          "assetReturn": 0.5
                        },
                        {
                          "assetReturn": 0
                        },
                        {
                          "assetReturn": -0.5
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    }
  },
  "components": {
    "securitySchemes": {
      "ApiKeyAuth": {
        "description": "An [API key](#overview--api-key) is required to benefit from [higher API limits](#overview--api-limits).\n",
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key"
      }
    }
  }
}