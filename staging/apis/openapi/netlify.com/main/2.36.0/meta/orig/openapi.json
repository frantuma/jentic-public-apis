{
  "openapi": "3.0.0",
  "info": {
    "description": "Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.\n\nThis document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlify's API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).\n\nAdditionally, we have two API clients for your convenience:\n- [Go Client](https://github.com/netlify/open-api#go-client)\n- [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)",
    "termsOfService": "https://www.netlify.com/legal/terms-of-use/",
    "title": "Netlify's API documentation",
    "version": "2.36.0",
    "x-logo": {
      "altText": "Netlify",
      "href": "https://www.netlify.com/docs/",
      "url": "netlify-logo.png"
    },
    "x-jentic-source-url": "https://raw.githubusercontent.com/netlify/open-api/master/swagger.yml"
  },
  "servers": [
    {
      "url": "https://api.netlify.com/api/v1"
    }
  ],
  "paths": {
    "/accounts": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "minimal",
            "schema": {
              "type": "boolean"
            },
            "x-internal": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/accountMembership"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "accountMembership"
        ],
        "operationId": "listAccountsForUser"
      },
      "post": {
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/accountMembership"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "accountMembership"
        ],
        "operationId": "createAccount",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/accountSetup"
              }
            }
          },
          "required": true
        }
      }
    },
    "/accounts/types": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/accountType"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "accountType"
        ],
        "operationId": "listAccountTypesForUser"
      }
    },
    "/accounts/{account_id}": {
      "parameters": [
        {
          "in": "path",
          "name": "account_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "responses": {
          "204": {
            "description": "Not Content"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "accountMembership"
        ],
        "operationId": "cancelAccount"
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/accountMembership"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "accountMembership"
        ],
        "operationId": "getAccount"
      },
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/accountMembership"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "accountMembership"
        ],
        "operationId": "updateAccount",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/accountUpdateSetup"
              }
            }
          }
        }
      }
    },
    "/accounts/{account_id}/audit": {
      "parameters": [
        {
          "in": "path",
          "name": "account_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "log_type",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/perPage"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/auditLog"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "auditLog"
        ],
        "operationId": "listAccountAuditEvents"
      }
    },
    "/accounts/{account_id}/env": {
      "get": {
        "parameters": [
          {
            "description": "Scope response to account_id",
            "in": "path",
            "name": "account_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by deploy context",
            "in": "query",
            "name": "context_name",
            "required": false,
            "schema": {
              "enum": [
                "all",
                "dev",
                "branch-deploy",
                "deploy-preview",
                "production"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filter by scope",
            "in": "query",
            "name": "scope",
            "required": false,
            "schema": {
              "enum": [
                "builds",
                "functions",
                "runtime",
                "post-processing"
              ],
              "type": "string"
            }
          },
          {
            "description": "If specified, only return environment variables set on this site",
            "in": "query",
            "name": "site_id",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/envVar"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "environmentVariables"
        ],
        "description": "Returns all environment variables for an account or site. An account corresponds to a team in the Netlify UI.",
        "operationId": "getEnvVars"
      },
      "post": {
        "parameters": [
          {
            "description": "Scope response to account_id",
            "in": "path",
            "name": "account_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "If provided, create an environment variable on the site level, not the account level",
            "in": "query",
            "name": "site_id",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/envVar"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "environmentVariables"
        ],
        "description": "Creates new environment variables. Granular scopes are available on Pro plans and above.",
        "operationId": "createEnvVars",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "properties": {
                    "is_secret": {
                      "description": "Secret values are only readable by code running on Netlify's systems. With secrets, only the local development context values are readable from the UI, API, and CLI. By default, environment variable values are not secret.",
                      "type": "boolean"
                    },
                    "key": {
                      "description": "The existing or new name of the key, if you wish to rename it (case-sensitive)",
                      "type": "string"
                    },
                    "scopes": {
                      "description": "The scopes that this environment variable is set to (Pro plans and above)",
                      "items": {
                        "enum": [
                          "builds",
                          "functions",
                          "runtime",
                          "post-processing"
                        ],
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "values": {
                      "items": {
                        "$ref": "#/components/schemas/envVarValue"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              }
            }
          }
        }
      }
    },
    "/accounts/{account_id}/env/{key}": {
      "delete": {
        "parameters": [
          {
            "description": "Scope response to account_id",
            "in": "path",
            "name": "account_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The environment variable key (case-sensitive)",
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "If provided, delete the environment variable from this site",
            "in": "query",
            "name": "site_id",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content (success)"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "environmentVariables"
        ],
        "description": "Deletes an environment variable",
        "operationId": "deleteEnvVar"
      },
      "get": {
        "parameters": [
          {
            "description": "Scope response to account_id",
            "in": "path",
            "name": "account_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The environment variable key (case-sensitive)",
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "If provided, return the environment variable for a specific site (no merging is performed)",
            "in": "query",
            "name": "site_id",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/envVar"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "environmentVariables"
        ],
        "description": "Returns an individual environment variable.",
        "operationId": "getEnvVar"
      },
      "patch": {
        "parameters": [
          {
            "description": "Scope response to account_id",
            "in": "path",
            "name": "account_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The existing environment variable key name (case-sensitive)",
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "If provided, update an environment variable set on this site",
            "in": "query",
            "name": "site_id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/envVar"
                }
              }
            },
            "description": "Created (success)"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "environmentVariables"
        ],
        "description": "Updates or creates a new value for an existing environment variable.",
        "operationId": "setEnvVarValue",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "context": {
                    "description": "The deploy context in which this value will be used. `dev` refers to local development when running `netlify dev`. `branch` must be provided with a value in `context_parameter`.",
                    "enum": [
                      "all",
                      "dev",
                      "branch-deploy",
                      "deploy-preview",
                      "production",
                      "branch"
                    ],
                    "type": "string"
                  },
                  "context_parameter": {
                    "description": "An additional parameter for custom branches. Currently, this is used for providing a branch name when `context=branch`.",
                    "type": "string"
                  },
                  "value": {
                    "description": "The environment variable's unencrypted value",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        }
      },
      "put": {
        "parameters": [
          {
            "description": "Scope response to account_id",
            "in": "path",
            "name": "account_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The existing environment variable key name (case-sensitive)",
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "If provided, update an environment variable set on this site",
            "in": "query",
            "name": "site_id",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/envVar"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "environmentVariables"
        ],
        "description": "Updates an existing environment variable and all of its values. Existing values will be replaced by values provided.",
        "operationId": "updateEnvVar",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "is_secret": {
                    "description": "Secret values are only readable by code running on Netlify's systems. With secrets, only the local development context values are readable from the UI, API, and CLI. By default, environment variable values are not secret.",
                    "type": "boolean"
                  },
                  "key": {
                    "description": "The existing or new name of the key, if you wish to rename it (case-sensitive)",
                    "type": "string"
                  },
                  "scopes": {
                    "description": "The scopes that this environment variable is set to (Pro plans and above)",
                    "items": {
                      "enum": [
                        "builds",
                        "functions",
                        "runtime",
                        "post-processing"
                      ],
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "values": {
                    "items": {
                      "$ref": "#/components/schemas/envVarValue"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/accounts/{account_id}/env/{key}/value/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "Scope response to account_id",
            "in": "path",
            "name": "account_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The environment variable value's ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The environment variable key name (case-sensitive)",
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "If provided, delete the value from an environment variable on this site",
            "in": "query",
            "name": "site_id",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content (success)"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "environmentVariables"
        ],
        "description": "Deletes a specific environment variable value.",
        "operationId": "deleteEnvVarValue"
      }
    },
    "/api/v1/sites/{site_id}/env": {
      "get": {
        "parameters": [
          {
            "description": "Filter by deploy context",
            "in": "query",
            "name": "context_name",
            "required": false,
            "schema": {
              "enum": [
                "all",
                "dev",
                "branch-deploy",
                "deploy-preview",
                "production"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filter by scope",
            "in": "query",
            "name": "scope",
            "required": false,
            "schema": {
              "enum": [
                "builds",
                "functions",
                "runtime",
                "post_processing"
              ],
              "type": "string"
            }
          },
          {
            "description": "Scope response to site_id",
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/envVar"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "environmentVariables"
        ],
        "description": "Returns all environment variables for a site. This convenience method behaves the same as `getEnvVars` but doesn't require an `account_id` as input.",
        "operationId": "getSiteEnvVars"
      }
    },
    "/billing/payment_methods": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/paymentMethod"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "paymentMethod"
        ],
        "operationId": "listPaymentMethodsForUser"
      }
    },
    "/builds/{build_id}": {
      "parameters": [
        {
          "in": "path",
          "name": "build_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/build"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "build"
        ],
        "operationId": "getSiteBuild"
      }
    },
    "/builds/{build_id}/log": {
      "parameters": [
        {
          "in": "path",
          "name": "build_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "responses": {
          "204": {
            "description": "No content"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "buildLogMsg"
        ],
        "operationId": "updateSiteBuildLog"
      }
    },
    "/builds/{build_id}/start": {
      "parameters": [
        {
          "in": "path",
          "name": "build_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "buildbot_version",
          "required": false,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "build_version",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "responses": {
          "204": {
            "description": "No content"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "build"
        ],
        "operationId": "notifyBuildStart"
      }
    },
    "/deploy_keys": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/deployKey"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "deployKey"
        ],
        "operationId": "listDeployKeys"
      },
      "post": {
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deployKey"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "deployKey"
        ],
        "operationId": "createDeployKey"
      }
    },
    "/deploy_keys/{key_id}": {
      "parameters": [
        {
          "in": "path",
          "name": "key_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "responses": {
          "204": {
            "description": "Not Content"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "deployKey"
        ],
        "operationId": "deleteDeployKey"
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deployKey"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "deployKey"
        ],
        "operationId": "getDeployKey"
      }
    },
    "/deploys/{deploy_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "deploy_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "deploy"
        ],
        "operationId": "deleteDeploy"
      },
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "deploy_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deploy"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "deploy"
        ],
        "operationId": "getDeploy"
      }
    },
    "/deploys/{deploy_id}/cancel": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "deploy_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deploy"
                }
              }
            },
            "description": "Cancelled"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "deploy"
        ],
        "operationId": "cancelSiteDeploy"
      }
    },
    "/deploys/{deploy_id}/files/{path}": {
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "deploy_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/file"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "file"
        ],
        "operationId": "uploadDeployFile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            },
            "application/octet-stream": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            }
          },
          "required": true
        }
      }
    },
    "/deploys/{deploy_id}/functions/{name}": {
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "deploy_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "runtime",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "invocation_mode",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "timeout",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/retryCount"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/function"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "function"
        ],
        "operationId": "uploadDeployFunction",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            },
            "application/octet-stream": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            }
          },
          "required": true
        }
      }
    },
    "/deploys/{deploy_id}/lock": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "deploy_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deploy"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "deploy"
        ],
        "operationId": "lockDeploy"
      }
    },
    "/deploys/{deploy_id}/plugin_runs": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "deploy_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pluginRun"
                }
              }
            },
            "description": "CREATED"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "x-internal"
        ],
        "description": "This is an internal-only endpoint.",
        "operationId": "createPluginRun",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/pluginRunData"
              }
            }
          }
        },
        "x-internal": true
      }
    },
    "/deploys/{deploy_id}/unlock": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "deploy_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deploy"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "deploy"
        ],
        "operationId": "unlockDeploy"
      }
    },
    "/dns_zones": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "account_slug",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dnsZones"
                }
              }
            },
            "description": "get all DNS zones the user has access to"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "dnsZone"
        ],
        "operationId": "getDnsZones"
      },
      "post": {
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dnsZone"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "dnsZone"
        ],
        "operationId": "createDnsZone",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dnsZoneSetup"
              }
            }
          },
          "required": true
        }
      }
    },
    "/dns_zones/{zone_id}": {
      "parameters": [
        {
          "in": "path",
          "name": "zone_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "responses": {
          "204": {
            "description": "delete a single DNS zone"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "dnsZone"
        ],
        "operationId": "deleteDnsZone"
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dnsZone"
                }
              }
            },
            "description": "get a single DNS zone"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "dnsZone"
        ],
        "operationId": "getDnsZone"
      }
    },
    "/dns_zones/{zone_id}/dns_records": {
      "parameters": [
        {
          "in": "path",
          "name": "zone_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dnsRecords"
                }
              }
            },
            "description": "get all DNS records for a single DNS zone"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "dnsZone"
        ],
        "operationId": "getDnsRecords"
      },
      "post": {
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dnsRecord"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "dnsZone"
        ],
        "operationId": "createDnsRecord",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dnsRecordCreate"
              }
            }
          },
          "required": true
        }
      }
    },
    "/dns_zones/{zone_id}/dns_records/{dns_record_id}": {
      "parameters": [
        {
          "in": "path",
          "name": "zone_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "name": "dns_record_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "responses": {
          "204": {
            "description": "record deleted"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "dnsZone"
        ],
        "operationId": "deleteDnsRecord"
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dnsRecord"
                }
              }
            },
            "description": "get a single DNS record"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "dnsZone"
        ],
        "operationId": "getIndividualDnsRecord"
      }
    },
    "/dns_zones/{zone_id}/transfer": {
      "parameters": [
        {
          "in": "path",
          "name": "zone_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "the account of the dns zone",
          "in": "query",
          "name": "account_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "the account you want to transfer the dns zone to",
          "in": "query",
          "name": "transfer_account_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "the user you want to transfer the dns zone to",
          "in": "query",
          "name": "transfer_user_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dnsZone"
                }
              }
            },
            "description": "transfer a DNS zone to another account"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "dnsZone"
        ],
        "operationId": "transferDnsZone"
      }
    },
    "/forms/{form_id}/submissions": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "form_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/perPage"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/submission"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "submission"
        ],
        "operationId": "listFormSubmissions"
      }
    },
    "/hooks": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/hook"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "hook"
        ],
        "operationId": "listHooksBySiteId"
      },
      "post": {
        "parameters": [
          {
            "in": "query",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/hook"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "hook"
        ],
        "operationId": "createHookBySiteId",
        "requestBody": {
          "$ref": "#/components/requestBodies/hook"
        }
      }
    },
    "/hooks/types": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/hookType"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "hookType"
        ],
        "operationId": "listHookTypes"
      }
    },
    "/hooks/{hook_id}": {
      "parameters": [
        {
          "in": "path",
          "name": "hook_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "tags": [
          "hook"
        ],
        "operationId": "deleteHook"
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/hook"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "hook"
        ],
        "operationId": "getHook"
      },
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/hook"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "hook"
        ],
        "operationId": "updateHook",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/hook"
              }
            }
          },
          "required": true
        }
      }
    },
    "/hooks/{hook_id}/enable": {
      "parameters": [
        {
          "in": "path",
          "name": "hook_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/hook"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "hook"
        ],
        "operationId": "enableHook"
      }
    },
    "/oauth/tickets": {
      "post": {
        "parameters": [
          {
            "in": "query",
            "name": "client_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ticket"
                }
              }
            },
            "description": "ok"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "ticket"
        ],
        "operationId": "createTicket"
      }
    },
    "/oauth/tickets/{ticket_id}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "ticket_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ticket"
                }
              }
            },
            "description": "ok"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "ticket"
        ],
        "operationId": "showTicket"
      }
    },
    "/oauth/tickets/{ticket_id}/exchange": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "ticket_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/accessToken"
                }
              }
            },
            "description": "ok"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "accessToken"
        ],
        "operationId": "exchangeTicket"
      }
    },
    "/purge": {
      "post": {
        "responses": {
          "202": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid request parameters"
          },
          "404": {
            "description": "Site not found"
          }
        },
        "tags": [
          "purge"
        ],
        "description": "Purges cached content from Netlify's CDN. Supports purging by Cache-Tag.",
        "operationId": "purgeCache",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/purge"
              }
            }
          },
          "required": true
        }
      }
    },
    "/services/": {
      "parameters": [
        {
          "in": "query",
          "name": "search",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/service"
                  },
                  "type": "array"
                }
              }
            },
            "description": "services"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "service"
        ],
        "operationId": "getServices"
      }
    },
    "/services/{addonName}": {
      "parameters": [
        {
          "in": "path",
          "name": "addonName",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/service"
                }
              }
            },
            "description": "services"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "service"
        ],
        "operationId": "showService"
      }
    },
    "/services/{addonName}/manifest": {
      "parameters": [
        {
          "in": "path",
          "name": "addonName",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "retrieving from provider"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "service"
        ],
        "operationId": "showServiceManifest"
      }
    },
    "/sites": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter",
            "schema": {
              "enum": [
                "all",
                "owner",
                "guest"
              ],
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/perPage"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/site"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "site"
        ],
        "description": "**Note:** Environment variable keys and values have moved from `build_settings.env` and `repo.env` to a new endpoint. Please use [getEnvVars](#tag/environmentVariables/operation/getEnvVars) to retrieve site environment variables.",
        "operationId": "listSites"
      },
      "post": {
        "parameters": [
          {
            "in": "query",
            "name": "configure_dns",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/site"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "site"
        ],
        "description": "**Note:** Environment variable keys and values have moved from `build_settings.env` and `repo.env` to a new endpoint. Please use [createEnvVars](#tag/environmentVariables/operation/createEnvVars) to create environment variables for a site.",
        "operationId": "createSite",
        "requestBody": {
          "$ref": "#/components/requestBodies/siteSetup"
        }
      }
    },
    "/sites/{site_id}": {
      "parameters": [
        {
          "in": "path",
          "name": "site_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "site"
        ],
        "operationId": "deleteSite"
      },
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "feature_flags",
            "schema": {
              "type": "string"
            },
            "x-internal": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/site"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "site"
        ],
        "description": "**Note:** Environment variable keys and values have moved from `build_settings.env` and `repo.env` to a new endpoint. Please use [getEnvVars](#tag/environmentVariables/operation/getEnvVars) to retrieve site environment variables.",
        "operationId": "getSite"
      },
      "patch": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/site"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "site"
        ],
        "description": "**Note:** Environment variable keys and values have moved from `build_settings.env` and `repo.env` to a new endpoint. Please use [updateEnvVar](#tag/environmentVariables/operation/updateEnvVar) to update a site's environment variables.",
        "operationId": "updateSite",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/siteSetup"
              }
            }
          },
          "required": true
        }
      }
    },
    "/sites/{site_id}/assets": {
      "parameters": [
        {
          "in": "path",
          "name": "site_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/asset"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "asset"
        ],
        "operationId": "listSiteAssets"
      },
      "post": {
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "size",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "content_type",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "visibility",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/assetSignature"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "asset"
        ],
        "operationId": "createSiteAsset"
      }
    },
    "/sites/{site_id}/assets/{asset_id}": {
      "parameters": [
        {
          "in": "path",
          "name": "site_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "name": "asset_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "asset"
        ],
        "operationId": "deleteSiteAsset"
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/asset"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "asset"
        ],
        "operationId": "getSiteAssetInfo"
      },
      "put": {
        "parameters": [
          {
            "in": "query",
            "name": "state",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/asset"
                }
              }
            },
            "description": "Updated"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "asset"
        ],
        "operationId": "updateSiteAsset"
      }
    },
    "/sites/{site_id}/assets/{asset_id}/public_signature": {
      "parameters": [
        {
          "in": "path",
          "name": "site_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "name": "asset_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/assetPublicSignature"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "assetPublicSignature"
        ],
        "operationId": "getSiteAssetPublicSignature"
      }
    },
    "/sites/{site_id}/build_hooks": {
      "parameters": [
        {
          "in": "path",
          "name": "site_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/buildHook"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "buildHook"
        ],
        "operationId": "listSiteBuildHooks"
      },
      "post": {
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/buildHook"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "buildHook"
        ],
        "operationId": "createSiteBuildHook",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/buildHookSetup"
              }
            }
          },
          "required": true
        }
      }
    },
    "/sites/{site_id}/build_hooks/{id}": {
      "parameters": [
        {
          "in": "path",
          "name": "site_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "responses": {
          "204": {
            "description": "No content"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "buildHook"
        ],
        "operationId": "deleteSiteBuildHook"
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/buildHook"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "buildHook"
        ],
        "operationId": "getSiteBuildHook"
      },
      "put": {
        "responses": {
          "204": {
            "description": "No content"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "buildHook"
        ],
        "operationId": "updateSiteBuildHook",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/buildHookSetup"
              }
            }
          },
          "required": true
        }
      }
    },
    "/sites/{site_id}/builds": {
      "parameters": [
        {
          "in": "path",
          "name": "site_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/perPage"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/build"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "build"
        ],
        "operationId": "listSiteBuilds"
      },
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/build"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "build"
        ],
        "operationId": "createSiteBuild",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/buildSetup"
              }
            }
          }
        }
      }
    },
    "/sites/{site_id}/deployed-branches": {
      "parameters": [
        {
          "in": "path",
          "name": "site_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/deployedBranch"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "deployedBranch"
        ],
        "operationId": "listSiteDeployedBranches"
      }
    },
    "/sites/{site_id}/deploys": {
      "parameters": [
        {
          "in": "path",
          "name": "site_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "deploy-previews",
          "schema": {
            "type": "boolean"
          }
        },
        {
          "in": "query",
          "name": "production",
          "schema": {
            "type": "boolean"
          }
        },
        {
          "in": "query",
          "name": "state",
          "schema": {
            "enum": [
              "new",
              "pending_review",
              "accepted",
              "rejected",
              "enqueued",
              "building",
              "uploading",
              "uploaded",
              "preparing",
              "prepared",
              "processing",
              "processed",
              "ready",
              "error",
              "retrying"
            ],
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "branch",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "latest-published",
          "schema": {
            "type": "boolean"
          }
        }
      ],
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/perPage"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/deploy"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "deploy"
        ],
        "operationId": "listSiteDeploys"
      },
      "post": {
        "parameters": [
          {
            "in": "query",
            "name": "title",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deploy"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "deploy"
        ],
        "operationId": "createSiteDeploy",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/deployFiles"
              }
            }
          },
          "required": true
        }
      }
    },
    "/sites/{site_id}/deploys/{deploy_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "deploy_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "deploy"
        ],
        "operationId": "deleteSiteDeploy"
      },
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "deploy_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deploy"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "deploy"
        ],
        "operationId": "getSiteDeploy"
      },
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "deploy_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deploy"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "deploy"
        ],
        "operationId": "updateSiteDeploy",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/deployFiles"
              }
            }
          },
          "required": true
        }
      }
    },
    "/sites/{site_id}/deploys/{deploy_id}/restore": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "deploy_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deploy"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "deploy"
        ],
        "operationId": "restoreSiteDeploy"
      }
    },
    "/sites/{site_id}/dev_server_hooks": {
      "parameters": [
        {
          "in": "path",
          "name": "site_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/devServerHook"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "devServerHook"
        ],
        "operationId": "listSiteDevServerHooks"
      },
      "post": {
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/devServerHook"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "devServerHook"
        ],
        "operationId": "createSiteDevServerHook",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/devServerHookSetup"
              }
            }
          },
          "required": true
        }
      }
    },
    "/sites/{site_id}/dev_server_hooks/{id}": {
      "parameters": [
        {
          "in": "path",
          "name": "site_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "responses": {
          "204": {
            "description": "No content"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "devServerHook"
        ],
        "operationId": "deleteSiteDevServerHook"
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/devServerHook"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "devServerHook"
        ],
        "operationId": "getSiteDevServerHook"
      },
      "put": {
        "responses": {
          "204": {
            "description": "No content"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "devServerHook"
        ],
        "operationId": "updateSiteDevServerHook",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/devServerHookSetup"
              }
            }
          },
          "required": true
        }
      }
    },
    "/sites/{site_id}/dev_servers": {
      "parameters": [
        {
          "in": "path",
          "name": "site_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "parameters": [
          {
            "in": "query",
            "name": "branch",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "devServer"
        ],
        "operationId": "deleteSiteDevServers"
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/perPage"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/devServer"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "devServer"
        ],
        "operationId": "listSiteDevServers"
      },
      "post": {
        "parameters": [
          {
            "in": "query",
            "name": "branch",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/devServer"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "devServer"
        ],
        "operationId": "createSiteDevServer"
      }
    },
    "/sites/{site_id}/dev_servers/{dev_server_id}": {
      "parameters": [
        {
          "in": "path",
          "name": "site_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "name": "dev_server_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/devServer"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "devServer"
        ],
        "operationId": "getSiteDevServer"
      }
    },
    "/sites/{site_id}/dev_servers/{dev_server_id}/activity": {
      "parameters": [
        {
          "in": "path",
          "name": "site_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "name": "dev_server_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "devServer"
        ],
        "operationId": "markDevServerActivity",
        "x-internal": true
      }
    },
    "/sites/{site_id}/dns": {
      "parameters": [
        {
          "in": "path",
          "name": "site_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/dnsZone"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "dnsZone"
        ],
        "operationId": "getDNSForSite"
      },
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/dnsZone"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "dnsZone"
        ],
        "operationId": "configureDNSForSite"
      }
    },
    "/sites/{site_id}/files": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/file"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "file"
        ],
        "operationId": "listSiteFiles"
      }
    },
    "/sites/{site_id}/files/{file_path}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "file_path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/file"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "file"
        ],
        "operationId": "getSiteFileByPathName"
      }
    },
    "/sites/{site_id}/forms": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/form"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "form"
        ],
        "operationId": "listSiteForms"
      }
    },
    "/sites/{site_id}/forms/{form_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "form_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "form"
        ],
        "operationId": "deleteSiteForm"
      }
    },
    "/sites/{site_id}/functions": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/siteFunction"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "function"
        ],
        "operationId": "searchSiteFunctions"
      }
    },
    "/sites/{site_id}/metadata": {
      "parameters": [
        {
          "in": "path",
          "name": "site_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/metadata"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "metadata"
        ],
        "operationId": "getSiteMetadata"
      },
      "put": {
        "responses": {
          "204": {
            "description": "No content"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "metadata"
        ],
        "operationId": "updateSiteMetadata",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/metadata"
              }
            }
          },
          "required": true
        }
      }
    },
    "/sites/{site_id}/plugin_runs/latest": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "packages",
            "required": true,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "state",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/pluginRun"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "x-internal"
        ],
        "description": "This is an internal-only endpoint.",
        "operationId": "getLatestPluginRuns",
        "x-internal": true
      }
    },
    "/sites/{site_id}/plugins/{package}": {
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "package",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/plugin"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "x-internal"
        ],
        "description": "This is an internal-only endpoint.",
        "operationId": "updatePlugin",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/pluginParams"
              }
            }
          }
        },
        "x-internal": true
      }
    },
    "/sites/{site_id}/rollback": {
      "parameters": [
        {
          "in": "path",
          "name": "site_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "responses": {
          "204": {
            "description": "No content"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "deploy"
        ],
        "operationId": "rollbackSiteDeploy"
      }
    },
    "/sites/{site_id}/service-instances": {
      "parameters": [
        {
          "in": "path",
          "name": "site_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/serviceInstance"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "serviceInstance"
        ],
        "operationId": "listServiceInstancesForSite"
      }
    },
    "/sites/{site_id}/services/{addon}/instances": {
      "parameters": [
        {
          "in": "path",
          "name": "site_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "name": "addon",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serviceInstance"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "serviceInstance"
        ],
        "operationId": "createServiceInstance",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        }
      }
    },
    "/sites/{site_id}/services/{addon}/instances/{instance_id}": {
      "parameters": [
        {
          "in": "path",
          "name": "site_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "name": "addon",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "name": "instance_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "serviceInstance"
        ],
        "operationId": "deleteServiceInstance"
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serviceInstance"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "serviceInstance"
        ],
        "operationId": "showServiceInstance"
      },
      "put": {
        "responses": {
          "204": {
            "description": "No Content"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "serviceInstance"
        ],
        "operationId": "updateServiceInstance",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        }
      }
    },
    "/sites/{site_id}/snippets": {
      "parameters": [
        {
          "in": "path",
          "name": "site_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/snippet"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "snippet"
        ],
        "operationId": "listSiteSnippets"
      },
      "post": {
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/snippet"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "snippet"
        ],
        "operationId": "createSiteSnippet",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/snippet"
              }
            }
          },
          "required": true
        }
      }
    },
    "/sites/{site_id}/snippets/{snippet_id}": {
      "parameters": [
        {
          "in": "path",
          "name": "site_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "name": "snippet_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "responses": {
          "204": {
            "description": "No content"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "snippet"
        ],
        "operationId": "deleteSiteSnippet"
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/snippet"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "snippet"
        ],
        "operationId": "getSiteSnippet"
      },
      "put": {
        "responses": {
          "204": {
            "description": "No content"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "snippet"
        ],
        "operationId": "updateSiteSnippet",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/snippet"
              }
            }
          },
          "required": true
        }
      }
    },
    "/sites/{site_id}/ssl": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sniCertificate"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "sniCertificate"
        ],
        "operationId": "showSiteTLSCertificate"
      },
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "certificate",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "key",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "ca_certificates",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sniCertificate"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "sniCertificate"
        ],
        "operationId": "provisionSiteTLSCertificate"
      }
    },
    "/sites/{site_id}/ssl/certificates": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "domain",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/sniCertificate"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Array of SNI Certificates"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "tags": [
          "sniCertificate"
        ],
        "operationId": "getAllCertificates"
      }
    },
    "/sites/{site_id}/submissions": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/perPage"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/submission"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "submission"
        ],
        "operationId": "listSiteSubmissions"
      }
    },
    "/sites/{site_id}/traffic_splits": {
      "parameters": [
        {
          "in": "path",
          "name": "site_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/splitTests"
                }
              }
            },
            "description": "split_tests"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "splitTest"
        ],
        "operationId": "getSplitTests"
      },
      "post": {
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/splitTest"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "splitTest"
        ],
        "operationId": "createSplitTest",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/splitTestSetup"
              }
            }
          },
          "required": true
        }
      }
    },
    "/sites/{site_id}/traffic_splits/{split_test_id}": {
      "parameters": [
        {
          "in": "path",
          "name": "site_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "name": "split_test_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/splitTest"
                }
              }
            },
            "description": "split_test"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "splitTest"
        ],
        "operationId": "getSplitTest"
      },
      "put": {
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/splitTest"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "splitTest"
        ],
        "operationId": "updateSplitTest",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/splitTestSetup"
              }
            }
          },
          "required": true
        }
      }
    },
    "/sites/{site_id}/traffic_splits/{split_test_id}/publish": {
      "parameters": [
        {
          "in": "path",
          "name": "site_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "name": "split_test_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "responses": {
          "204": {
            "description": "enable"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "splitTest"
        ],
        "operationId": "enableSplitTest"
      }
    },
    "/sites/{site_id}/traffic_splits/{split_test_id}/unpublish": {
      "parameters": [
        {
          "in": "path",
          "name": "site_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "name": "split_test_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "responses": {
          "204": {
            "description": "disabled"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "splitTest"
        ],
        "operationId": "disableSplitTest"
      }
    },
    "/sites/{site_id}/unlink_repo": {
      "parameters": [
        {
          "in": "path",
          "name": "site_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/site"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "description": "Site not found"
          }
        },
        "tags": [
          "site"
        ],
        "description": "[Beta] Unlinks the repo from the site.\n\nThis action will also:\n- Delete associated deploy keys\n- Delete outgoing webhooks for the repo\n- Delete the site's build hooks",
        "operationId": "unlinkSiteRepo"
      }
    },
    "/submissions/{submission_id}": {
      "parameters": [
        {
          "in": "path",
          "name": "submission_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "submission"
        ],
        "operationId": "deleteSubmission"
      },
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/perPage"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/submission"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "submission"
        ],
        "operationId": "listFormSubmission"
      }
    },
    "/user": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "user"
        ],
        "operationId": "getCurrentUser"
      }
    },
    "/{account_id}/builds/status": {
      "parameters": [
        {
          "in": "path",
          "name": "account_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/buildStatus"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "build"
        ],
        "operationId": "getAccountBuildStatus"
      }
    },
    "/{account_slug}/members": {
      "parameters": [
        {
          "in": "path",
          "name": "account_slug",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/member"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "member"
        ],
        "operationId": "listMembersForAccount"
      },
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/member"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "member"
        ],
        "operationId": "addMemberToAccount",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/accountAddMemberSetup"
              }
            }
          },
          "required": true
        }
      }
    },
    "/{account_slug}/members/{member_id}": {
      "parameters": [
        {
          "in": "path",
          "name": "account_slug",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "name": "member_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "responses": {
          "204": {
            "description": "Not Content"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "member"
        ],
        "operationId": "removeAccountMember"
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/member"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "member"
        ],
        "operationId": "getAccountMember"
      },
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/member"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "member"
        ],
        "operationId": "updateAccountMember",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/accountUpdateMemberSetup"
              }
            }
          },
          "required": true
        }
      }
    },
    "/{account_slug}/sites": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "account_slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/perPage"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/site"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "site"
        ],
        "description": "**Note:** Environment variable keys and values have moved from `build_settings.env` and `repo.env` to a new endpoint. Please use [getEnvVars](#tag/environmentVariables/operation/getEnvVars) to retrieve site environment variables.",
        "operationId": "listSitesForAccount"
      },
      "post": {
        "parameters": [
          {
            "in": "query",
            "name": "configure_dns",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "account_slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/site"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "$ref": "#/components/responses/error"
          }
        },
        "tags": [
          "site"
        ],
        "description": "**Note:** Environment variable keys and values have moved from `build_settings.env` and `repo.env` to a new endpoint. Please use [createEnvVars](#tag/environmentVariables/operation/createEnvVars) to create environment variables for a site.",
        "operationId": "createSiteInTeam",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/siteSetup"
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "page": {
        "in": "query",
        "name": "page",
        "required": false,
        "schema": {
          "format": "int32",
          "type": "integer"
        }
      },
      "perPage": {
        "in": "query",
        "name": "per_page",
        "required": false,
        "schema": {
          "format": "int32",
          "type": "integer"
        }
      },
      "retryCount": {
        "in": "header",
        "name": "X-Nf-Retry-Count",
        "schema": {
          "type": "integer"
        }
      }
    },
    "responses": {
      "error": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        },
        "description": "error"
      }
    },
    "requestBodies": {
      "buildHookSetup": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/buildHookSetup"
            }
          }
        },
        "required": true
      },
      "createServiceInstanceConfig": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object"
            }
          }
        },
        "required": true
      },
      "deployFiles": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/deployFiles"
            }
          }
        },
        "required": true
      },
      "devServerHookSetup": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/devServerHookSetup"
            }
          }
        },
        "required": true
      },
      "hook": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/hook"
            }
          }
        },
        "required": true
      },
      "siteSetup": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/siteSetup"
            }
          }
        },
        "required": true
      },
      "snippet": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/snippet"
            }
          }
        },
        "required": true
      },
      "splitTestSetup": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/splitTestSetup"
            }
          }
        },
        "required": true
      },
      "uploadDeployFileFileBody": {
        "content": {
          "application/json": {
            "schema": {
              "format": "binary",
              "type": "string"
            }
          },
          "application/octet-stream": {
            "schema": {
              "format": "binary",
              "type": "string"
            }
          }
        },
        "required": true
      }
    },
    "schemas": {
      "accessToken": {
        "properties": {
          "access_token": {
            "type": "string"
          },
          "created_at": {
            "format": "dateTime",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "user_email": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "accountAddMemberSetup": {
        "properties": {
          "email": {
            "type": "string"
          },
          "role": {
            "enum": [
              "Owner",
              "Developer",
              "Billing Admin",
              "Reviewer"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "accountMembership": {
        "properties": {
          "billing_details": {
            "type": "string"
          },
          "billing_email": {
            "type": "string"
          },
          "billing_name": {
            "type": "string"
          },
          "billing_period": {
            "type": "string"
          },
          "capabilities": {
            "properties": {
              "collaborators": {
                "$ref": "#/components/schemas/accountUsageCapability"
              },
              "sites": {
                "$ref": "#/components/schemas/accountUsageCapability"
              }
            },
            "type": "object"
          },
          "created_at": {
            "format": "dateTime",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "owner_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "payment_method_id": {
            "type": "string"
          },
          "roles_allowed": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "slug": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "type_id": {
            "type": "string"
          },
          "type_name": {
            "type": "string"
          },
          "updated_at": {
            "format": "dateTime",
            "type": "string"
          }
        },
        "type": "object"
      },
      "accountSetup": {
        "properties": {
          "extra_seats_block": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "payment_method_id": {
            "type": "string"
          },
          "period": {
            "enum": [
              "monthly",
              "yearly"
            ],
            "type": "string"
          },
          "type_id": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "type_id"
        ],
        "type": "object"
      },
      "accountType": {
        "properties": {
          "capabilities": {
            "type": "object"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "monthly_dollar_price": {
            "type": "integer"
          },
          "monthly_seats_addon_dollar_price": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "yearly_dollar_price": {
            "type": "integer"
          },
          "yearly_seats_addon_dollar_price": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "accountUpdateMemberSetup": {
        "properties": {
          "role": {
            "enum": [
              "Owner",
              "Developer",
              "Billing Admin",
              "Reviewer"
            ],
            "type": "string"
          },
          "site_access": {
            "enum": [
              "all",
              "none",
              "selected"
            ],
            "type": "string"
          },
          "site_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "accountUpdateSetup": {
        "properties": {
          "billing_details": {
            "type": "string"
          },
          "billing_email": {
            "type": "string"
          },
          "billing_name": {
            "type": "string"
          },
          "extra_seats_block": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "type_id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "accountUsageCapability": {
        "properties": {
          "included": {
            "type": "integer"
          },
          "used": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "asset": {
        "properties": {
          "content_type": {
            "type": "string"
          },
          "created_at": {
            "format": "dateTime",
            "type": "string"
          },
          "creator_id": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "site_id": {
            "type": "string"
          },
          "size": {
            "format": "int64",
            "type": "integer"
          },
          "state": {
            "type": "string"
          },
          "updated_at": {
            "format": "dateTime",
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "visibility": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "assetForm": {
        "properties": {
          "fields": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "assetPublicSignature": {
        "properties": {
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "assetSignature": {
        "properties": {
          "asset": {
            "$ref": "#/components/schemas/asset",
            "type": "object"
          },
          "form": {
            "$ref": "#/components/schemas/assetForm",
            "type": "object"
          }
        },
        "type": "object"
      },
      "auditLog": {
        "properties": {
          "account_id": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "payload": {
            "additionalProperties": {
              "type": "object"
            },
            "properties": {
              "action": {
                "type": "string"
              },
              "actor_email": {
                "type": "string"
              },
              "actor_id": {
                "type": "string"
              },
              "actor_name": {
                "type": "string"
              },
              "log_type": {
                "type": "string"
              },
              "timestamp": {
                "format": "dateTime",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "build": {
        "properties": {
          "created_at": {
            "format": "dateTime",
            "type": "string"
          },
          "deploy_id": {
            "type": "string"
          },
          "done": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "sha": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "buildHook": {
        "properties": {
          "branch": {
            "type": "string"
          },
          "created_at": {
            "format": "dateTime",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "site_id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "buildHookSetup": {
        "properties": {
          "branch": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "buildLogMsg": {
        "properties": {
          "error": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "section": {
            "enum": [
              "initializing",
              "building",
              "deploying",
              "cleanup",
              "postprocessing"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "buildSetup": {
        "properties": {
          "clear_cache": {
            "type": "boolean"
          },
          "image": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "buildStatus": {
        "properties": {
          "active": {
            "type": "integer"
          },
          "build_count": {
            "type": "integer"
          },
          "enqueued": {
            "type": "integer"
          },
          "minutes": {
            "properties": {
              "current": {
                "type": "integer"
              },
              "current_average_sec": {
                "type": "integer"
              },
              "included_minutes": {
                "type": "string"
              },
              "included_minutes_with_packs": {
                "type": "string"
              },
              "last_updated_at": {
                "format": "dateTime",
                "type": "string"
              },
              "period_end_date": {
                "format": "dateTime",
                "type": "string"
              },
              "period_start_date": {
                "format": "dateTime",
                "type": "string"
              },
              "previous": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "pending_concurrency": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "deploy": {
        "properties": {
          "admin_url": {
            "type": "string"
          },
          "branch": {
            "type": "string"
          },
          "build_id": {
            "type": "string"
          },
          "commit_ref": {
            "type": "string"
          },
          "commit_url": {
            "type": "string"
          },
          "context": {
            "type": "string"
          },
          "created_at": {
            "format": "dateTime",
            "type": "string"
          },
          "deploy_ssl_url": {
            "type": "string"
          },
          "deploy_url": {
            "type": "string"
          },
          "draft": {
            "type": "boolean"
          },
          "error_message": {
            "type": "string"
          },
          "framework": {
            "type": "string"
          },
          "function_schedules": {
            "items": {
              "$ref": "#/components/schemas/functionSchedule"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "locked": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "published_at": {
            "format": "dateTime",
            "type": "string"
          },
          "required": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "required_functions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "review_id": {
            "type": "number"
          },
          "review_url": {
            "type": "string"
          },
          "screenshot_url": {
            "type": "string"
          },
          "site_id": {
            "type": "string"
          },
          "skipped": {
            "type": "boolean"
          },
          "ssl_url": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "updated_at": {
            "format": "dateTime",
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "deployFiles": {
        "properties": {
          "async": {
            "type": "boolean"
          },
          "branch": {
            "type": "string"
          },
          "draft": {
            "type": "boolean"
          },
          "files": {
            "type": "object"
          },
          "framework": {
            "type": "string"
          },
          "framework_version": {
            "type": "string"
          },
          "function_schedules": {
            "items": {
              "$ref": "#/components/schemas/functionSchedule"
            },
            "type": "array"
          },
          "functions": {
            "type": "object"
          },
          "functions_config": {
            "additionalProperties": {
              "$ref": "#/components/schemas/functionConfig",
              "type": "object"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "deployKey": {
        "properties": {
          "created_at": {
            "format": "dateTime",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "public_key": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "deployedBranch": {
        "properties": {
          "deploy_id": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "ssl_url": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "devServer": {
        "properties": {
          "branch": {
            "type": "string"
          },
          "created_at": {
            "format": "dateTime",
            "type": "string"
          },
          "done_at": {
            "format": "dateTime",
            "type": "string"
          },
          "error_at": {
            "format": "dateTime",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "live_at": {
            "format": "dateTime",
            "type": "string"
          },
          "site_id": {
            "type": "string"
          },
          "starting_at": {
            "format": "dateTime",
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "updated_at": {
            "format": "dateTime",
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "devServerHook": {
        "properties": {
          "branch": {
            "type": "string"
          },
          "created_at": {
            "format": "dateTime",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "site_id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "enum": [
              "new_dev_server",
              "content_refresh"
            ],
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "devServerHookSetup": {
        "properties": {
          "branch": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "enum": [
              "new_dev_server",
              "content_refresh"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "dnsRecord": {
        "properties": {
          "dns_zone_id": {
            "type": "string"
          },
          "flag": {
            "type": "integer"
          },
          "hostname": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "managed": {
            "type": "boolean"
          },
          "priority": {
            "format": "int64",
            "type": "integer"
          },
          "site_id": {
            "type": "string"
          },
          "tag": {
            "type": "string"
          },
          "ttl": {
            "format": "int64",
            "type": "integer"
          },
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "dnsRecordCreate": {
        "properties": {
          "flag": {
            "format": "int64",
            "type": "integer"
          },
          "hostname": {
            "type": "string"
          },
          "port": {
            "format": "int64",
            "type": "integer"
          },
          "priority": {
            "format": "int64",
            "type": "integer"
          },
          "tag": {
            "type": "string"
          },
          "ttl": {
            "format": "int64",
            "type": "integer"
          },
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "weight": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "dnsRecords": {
        "items": {
          "$ref": "#/components/schemas/dnsRecord"
        },
        "type": "array"
      },
      "dnsZone": {
        "properties": {
          "account_id": {
            "type": "string"
          },
          "account_name": {
            "type": "string"
          },
          "account_slug": {
            "type": "string"
          },
          "created_at": {
            "format": "dateTime",
            "type": "string"
          },
          "dedicated": {
            "type": "boolean"
          },
          "dns_servers": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "domain": {
            "type": "string"
          },
          "errors": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "ipv6_enabled": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "records": {
            "items": {
              "$ref": "#/components/schemas/dnsRecord"
            },
            "type": "array"
          },
          "site_id": {
            "type": "string"
          },
          "supported_record_types": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "updated_at": {
            "format": "dateTime",
            "type": "string"
          },
          "user_id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "dnsZoneSetup": {
        "properties": {
          "account_slug": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "site_id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "dnsZones": {
        "items": {
          "$ref": "#/components/schemas/dnsZone"
        },
        "type": "array"
      },
      "envVar": {
        "description": "Environment variable model definition",
        "properties": {
          "is_secret": {
            "description": "Secret values are only readable by code running on Netlify's systems. With secrets, only the local development context values are readable from the UI, API, and CLI. By default, environment variable values are not secret.",
            "type": "boolean"
          },
          "key": {
            "description": "The environment variable key, like ALGOLIA_ID (case-sensitive)",
            "type": "string",
            "x-faker": "commerce.productName"
          },
          "scopes": {
            "description": "The scopes that this environment variable is set to",
            "items": {
              "enum": [
                "builds",
                "functions",
                "runtime",
                "post-processing"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "updated_at": {
            "description": "The timestamp of when the value was last updated",
            "format": "date-time",
            "type": "string",
            "x-faker": "date.past"
          },
          "updated_by": {
            "$ref": "#/components/schemas/envVarUser"
          },
          "values": {
            "description": "An array of Value objects containing values and metadata",
            "items": {
              "$ref": "#/components/schemas/envVarValue"
            },
            "type": "array",
            "x-faker": "internet.password"
          }
        },
        "type": "object"
      },
      "envVarUser": {
        "properties": {
          "avatar_url": {
            "description": "A URL pointing to the user's avatar",
            "type": "string",
            "x-faker": "internet.avatar"
          },
          "email": {
            "description": "The user's email address",
            "type": "string",
            "x-faker": "internet.email"
          },
          "full_name": {
            "description": "The user's full name (first and last)",
            "type": "string",
            "x-faker": "name.findName"
          },
          "id": {
            "description": "The user's unique identifier",
            "type": "string",
            "x-faker": "datatype.number"
          }
        },
        "type": "object"
      },
      "envVarValue": {
        "description": "Environment variable value model definition",
        "properties": {
          "context": {
            "description": "The deploy context in which this value will be used. `dev` refers to local development when running `netlify dev`.",
            "enum": [
              "all",
              "dev",
              "branch-deploy",
              "deploy-preview",
              "production",
              "branch"
            ],
            "type": "string"
          },
          "context_parameter": {
            "description": "An additional parameter for custom branches. Currently, this is used for specifying a branch name when `context=branch`.",
            "type": "string"
          },
          "id": {
            "description": "The environment variable value's universally unique ID",
            "type": "string",
            "x-faker": "datatype.uuid"
          },
          "value": {
            "description": "The environment variable's unencrypted value",
            "type": "string",
            "x-faker": "internet.password"
          }
        },
        "type": "object"
      },
      "error": {
        "properties": {
          "code": {
            "format": "int64",
            "type": "integer"
          },
          "message": {
            "nullable": false,
            "type": "string"
          }
        },
        "required": [
          "message"
        ],
        "type": "object"
      },
      "excludedFunctionRoute": {
        "properties": {
          "expression": {
            "type": "string"
          },
          "literal": {
            "type": "string"
          },
          "pattern": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "file": {
        "properties": {
          "id": {
            "type": "string"
          },
          "mime_type": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "sha": {
            "type": "string"
          },
          "size": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "form": {
        "properties": {
          "paths": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "created_at": {
            "format": "dateTime",
            "type": "string"
          },
          "fields": {
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "site_id": {
            "type": "string"
          },
          "submission_count": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "function": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "sha": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "functionConfig": {
        "properties": {
          "build_data": {
            "type": "object"
          },
          "display_name": {
            "type": "string"
          },
          "excluded_routes": {
            "items": {
              "$ref": "#/components/schemas/excludedFunctionRoute"
            },
            "type": "array"
          },
          "generator": {
            "type": "string"
          },
          "priority": {
            "type": "integer"
          },
          "routes": {
            "items": {
              "$ref": "#/components/schemas/functionRoute"
            },
            "type": "array"
          },
          "traffic_rules": {
            "$ref": "#/components/schemas/trafficRulesConfig"
          }
        },
        "type": "object"
      },
      "functionRoute": {
        "properties": {
          "expression": {
            "type": "string"
          },
          "literal": {
            "type": "string"
          },
          "methods": {
            "items": {
              "enum": [
                "GET",
                "POST",
                "PUT",
                "PATCH",
                "DELETE",
                "OPTIONS"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "pattern": {
            "type": "string"
          },
          "prefer_static": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "functionSchedule": {
        "properties": {
          "cron": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "hook": {
        "properties": {
          "created_at": {
            "format": "dateTime",
            "type": "string"
          },
          "data": {
            "type": "object"
          },
          "disabled": {
            "type": "boolean"
          },
          "event": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "site_id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "updated_at": {
            "format": "dateTime",
            "type": "string"
          }
        },
        "type": "object"
      },
      "hookType": {
        "properties": {
          "events": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "fields": {
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "member": {
        "properties": {
          "avatar": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "full_name": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "role": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "metadata": {
        "type": "object"
      },
      "paymentMethod": {
        "properties": {
          "created_at": {
            "format": "dateTime",
            "type": "string"
          },
          "data": {
            "properties": {
              "card_type": {
                "type": "string"
              },
              "email": {
                "type": "string"
              },
              "last4": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "type": "string"
          },
          "method_name": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "updated_at": {
            "format": "dateTime",
            "type": "string"
          }
        },
        "type": "object"
      },
      "plugin": {
        "properties": {
          "package": {
            "type": "string"
          },
          "pinned_version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "pluginParams": {
        "properties": {
          "pinned_version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "pluginRun": {
        "allOf": [
          {
            "$ref": "#/components/schemas/pluginRunData"
          },
          {
            "properties": {
              "deploy_id": {
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "pluginRunData": {
        "properties": {
          "package": {
            "type": "string"
          },
          "reporting_event": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "summary": {
            "type": "string"
          },
          "text": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "purge": {
        "properties": {
          "cache_tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "site_id": {
            "type": "string"
          },
          "site_slug": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "repoInfo": {
        "properties": {
          "allowed_branches": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "cmd": {
            "type": "string"
          },
          "deploy_key_id": {
            "type": "string"
          },
          "dir": {
            "type": "string"
          },
          "env": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "functions_dir": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "installation_id": {
            "type": "integer"
          },
          "private_logs": {
            "type": "boolean"
          },
          "provider": {
            "type": "string"
          },
          "public_repo": {
            "type": "boolean"
          },
          "repo_branch": {
            "type": "string"
          },
          "repo_path": {
            "type": "string"
          },
          "repo_url": {
            "type": "string"
          },
          "stop_builds": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "service": {
        "properties": {
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "created_at": {
            "format": "dateTime",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "environments": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "events": {
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "icon": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "long_description": {
            "type": "string"
          },
          "manifest_url": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "service_path": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "updated_at": {
            "format": "dateTime",
            "type": "string"
          }
        },
        "type": "object"
      },
      "serviceInstance": {
        "properties": {
          "auth_url": {
            "type": "string"
          },
          "config": {
            "type": "object"
          },
          "created_at": {
            "format": "dateTime",
            "type": "string"
          },
          "env": {
            "type": "object"
          },
          "external_attributes": {
            "type": "object"
          },
          "id": {
            "type": "string"
          },
          "service_name": {
            "type": "string"
          },
          "service_path": {
            "type": "string"
          },
          "service_slug": {
            "type": "string"
          },
          "snippets": {
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "updated_at": {
            "format": "dateTime",
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "site": {
        "properties": {
          "account_id": {
            "type": "string"
          },
          "account_name": {
            "type": "string"
          },
          "account_slug": {
            "type": "string"
          },
          "admin_url": {
            "type": "string"
          },
          "branch_deploy_custom_domain": {
            "type": "string"
          },
          "build_image": {
            "type": "string"
          },
          "build_settings": {
            "$ref": "#/components/schemas/repoInfo"
          },
          "capabilities": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "created_at": {
            "format": "dateTime",
            "type": "string"
          },
          "custom_domain": {
            "type": "string"
          },
          "default_hooks_data": {
            "properties": {
              "access_token": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "deploy_hook": {
            "type": "string"
          },
          "deploy_preview_custom_domain": {
            "type": "string"
          },
          "deploy_url": {
            "type": "string"
          },
          "domain_aliases": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "force_ssl": {
            "type": "boolean"
          },
          "functions_region": {
            "type": "string"
          },
          "git_provider": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "id_domain": {
            "type": "string"
          },
          "managed_dns": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "notification_email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "plan": {
            "type": "string"
          },
          "prerender": {
            "type": "string"
          },
          "processing_settings": {
            "properties": {
              "html": {
                "properties": {
                  "pretty_urls": {
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "published_deploy": {
            "$ref": "#/components/schemas/deploy"
          },
          "screenshot_url": {
            "type": "string"
          },
          "session_id": {
            "type": "string"
          },
          "ssl": {
            "type": "boolean"
          },
          "ssl_url": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "updated_at": {
            "format": "dateTime",
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "siteFunction": {
        "properties": {
          "branch": {
            "type": "string"
          },
          "created_at": {
            "format": "dateTime",
            "type": "string"
          },
          "functions": {
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "log_type": {
            "type": "string"
          },
          "provider": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "siteSetup": {
        "allOf": [
          {
            "$ref": "#/components/schemas/site"
          },
          {
            "properties": {
              "repo": {
                "$ref": "#/components/schemas/repoInfo"
              }
            },
            "type": "object"
          }
        ]
      },
      "sniCertificate": {
        "properties": {
          "created_at": {
            "format": "dateTime",
            "type": "string"
          },
          "domains": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "expires_at": {
            "format": "dateTime",
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "updated_at": {
            "format": "dateTime",
            "type": "string"
          }
        },
        "type": "object"
      },
      "snippet": {
        "properties": {
          "general": {
            "type": "string"
          },
          "general_position": {
            "type": "string"
          },
          "goal": {
            "type": "string"
          },
          "goal_position": {
            "type": "string"
          },
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "site_id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "splitTest": {
        "properties": {
          "active": {
            "type": "boolean"
          },
          "branches": {
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "created_at": {
            "format": "dateTime",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "site_id": {
            "type": "string"
          },
          "unpublished_at": {
            "format": "dateTime",
            "type": "string"
          },
          "updated_at": {
            "format": "dateTime",
            "type": "string"
          }
        },
        "type": "object"
      },
      "splitTestSetup": {
        "properties": {
          "branch_tests": {
            "type": "object"
          }
        },
        "type": "object"
      },
      "splitTests": {
        "items": {
          "$ref": "#/components/schemas/splitTest"
        },
        "type": "array"
      },
      "submission": {
        "properties": {
          "body": {
            "type": "string"
          },
          "company": {
            "type": "string"
          },
          "created_at": {
            "format": "dateTime",
            "type": "string"
          },
          "data": {
            "type": "object"
          },
          "email": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "number": {
            "format": "int32",
            "type": "integer"
          },
          "site_url": {
            "type": "string"
          },
          "summary": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ticket": {
        "properties": {
          "authorized": {
            "type": "boolean"
          },
          "client_id": {
            "type": "string"
          },
          "created_at": {
            "format": "dateTime",
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "trafficRulesAggregateConfig": {
        "properties": {
          "keys": {
            "items": {
              "properties": {
                "type": {
                  "enum": [
                    "ip",
                    "domain"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "trafficRulesConfig": {
        "properties": {
          "action": {
            "properties": {
              "config": {
                "properties": {
                  "aggregate": {
                    "$ref": "#/components/schemas/trafficRulesAggregateConfig"
                  },
                  "rate_limit_config": {
                    "$ref": "#/components/schemas/trafficRulesRateLimitConfig"
                  },
                  "to": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": {
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "trafficRulesRateLimitConfig": {
        "properties": {
          "algorithm": {
            "enum": [
              "sliding_window"
            ],
            "type": "string"
          },
          "window_limit": {
            "type": "integer"
          },
          "window_size": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "user": {
        "properties": {
          "affiliate_id": {
            "type": "string"
          },
          "avatar_url": {
            "type": "string"
          },
          "created_at": {
            "format": "dateTime",
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "full_name": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "last_login": {
            "format": "dateTime",
            "type": "string"
          },
          "login_providers": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "onboarding_progress": {
            "properties": {
              "slides": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "site_count": {
            "format": "int64",
            "type": "integer"
          },
          "uid": {
            "type": "string"
          }
        },
        "type": "object"
      }
    },
    "securitySchemes": {
      "netlifyAuth": {
        "flows": {
          "implicit": {
            "authorizationUrl": "https://app.netlify.com/authorize",
            "scopes": {}
          }
        },
        "type": "oauth2"
      }
    }
  },
  "security": [
    {
      "netlifyAuth": []
    }
  ],
  "tags": [
    {
      "name": "ticket",
      "x-displayName": "Ticket"
    },
    {
      "name": "accessToken",
      "x-displayName": "Access token"
    },
    {
      "name": "user",
      "x-displayName": "User"
    },
    {
      "name": "accountMembership",
      "x-displayName": "Accounts"
    },
    {
      "name": "member",
      "x-displayName": "Member"
    },
    {
      "name": "accountType",
      "x-displayName": "Access type"
    },
    {
      "name": "paymentMethod",
      "x-displayName": "Payment method"
    },
    {
      "name": "auditLog",
      "x-displayName": "Audit log"
    },
    {
      "name": "site",
      "x-displayName": "Site"
    },
    {
      "name": "environmentVariables",
      "x-displayName": "Environment variables"
    },
    {
      "name": "file",
      "x-displayName": "File"
    },
    {
      "name": "metadata",
      "x-displayName": "Metadata"
    },
    {
      "name": "snippet",
      "x-displayName": "Snippet"
    },
    {
      "name": "purge",
      "x-displayName": "Cache purge"
    },
    {
      "name": "dnsZone",
      "x-displayName": "DNS zone"
    },
    {
      "name": "sniCertificate",
      "x-displayName": "SNI certificate"
    },
    {
      "name": "deploy",
      "x-displayName": "Deploy"
    },
    {
      "name": "deployedBranch",
      "x-displayName": "Deployed branch"
    },
    {
      "name": "deployKey",
      "x-displayName": "Deploy key"
    },
    {
      "name": "build",
      "x-displayName": "Build"
    },
    {
      "name": "buildLogMsg",
      "x-displayName": "Build log message"
    },
    {
      "name": "hook",
      "x-displayName": "Hook"
    },
    {
      "name": "hookType",
      "x-displayName": "Hook type"
    },
    {
      "name": "buildHook",
      "x-displayName": "Build hook"
    },
    {
      "name": "service",
      "x-displayName": "Service"
    },
    {
      "name": "serviceInstance",
      "x-displayName": "Service instance"
    },
    {
      "name": "function",
      "x-displayName": "Function"
    },
    {
      "name": "form",
      "x-displayName": "Form"
    },
    {
      "name": "submission",
      "x-displayName": "Form submission"
    },
    {
      "name": "splitTest",
      "x-displayName": "Split test"
    },
    {
      "name": "asset",
      "x-displayName": "Asset"
    },
    {
      "name": "assetPublicSignature",
      "x-displayName": "Asset public signature"
    },
    {
      "name": "devServer",
      "x-displayName": "Dev server"
    },
    {
      "name": "devServerHook",
      "x-displayName": "Dev server hook"
    }
  ],
  "externalDocs": {
    "description": "Online documentation",
    "url": "https://www.netlify.com/docs/api/"
  },
  "x-tagGroups": [
    {
      "tags": [
        "ticket",
        "accessToken"
      ],
      "name": "OAuth"
    },
    {
      "tags": [
        "user",
        "accountMembership",
        "member",
        "accountType",
        "paymentMethod",
        "auditLog"
      ],
      "name": "User accounts"
    },
    {
      "tags": [
        "site",
        "environmentVariables",
        "file",
        "metadata",
        "purge",
        "snippet"
      ],
      "name": "Site"
    },
    {
      "tags": [
        "dnsZone",
        "sniCertificate"
      ],
      "name": "Domain names"
    },
    {
      "tags": [
        "deploy",
        "deployedBranch",
        "deployKey"
      ],
      "name": "Deploys"
    },
    {
      "tags": [
        "build",
        "buildLogMsg"
      ],
      "name": "Builds"
    },
    {
      "tags": [
        "devServer"
      ],
      "name": "Dev servers"
    },
    {
      "tags": [
        "hook",
        "hookType",
        "buildHook",
        "devServerHook"
      ],
      "name": "Webhooks and notifications"
    },
    {
      "tags": [
        "service",
        "serviceInstance"
      ],
      "name": "Services"
    },
    {
      "tags": [
        "function"
      ],
      "name": "Functions"
    },
    {
      "tags": [
        "form",
        "submission"
      ],
      "name": "Forms"
    },
    {
      "tags": [
        "splitTest"
      ],
      "name": "Split tests"
    },
    {
      "tags": [
        "asset",
        "assetPublicSignature"
      ],
      "name": "Large media"
    }
  ]
}