{
  "components": {
    "schemas": {
      "account": {
        "description": "Accounts are your bank accounts with Increase. They store money, receive transfers, and send payments. They earn interest and have depository insurance.",
        "example": {
          "bank": "first_internet_bank",
          "closed_at": null,
          "created_at": "2020-01-31T23:59:59Z",
          "currency": "USD",
          "entity_id": "entity_n8y8tnk2p9339ti393yi",
          "id": "account_in71c4amph0vgo2qllky",
          "idempotency_key": null,
          "informational_entity_id": null,
          "interest_accrued": "0.01",
          "interest_accrued_at": "2020-01-31",
          "interest_rate": "0.055",
          "name": "My first account!",
          "program_id": "program_i2v2os4mwza1oetokh9i",
          "replacement": {
            "replaced_account_id": null,
            "replaced_by_account_id": null
          },
          "status": "open",
          "type": "account"
        },
        "properties": {
          "bank": {
            "description": "The bank the Account is with.",
            "enum": [
              "core_bank",
              "first_internet_bank",
              "grasshopper_bank"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "Core Bank",
              "First Internet Bank of Indiana",
              "Grasshopper Bank"
            ]
          },
          "closed_at": {
            "anyOf": [
              {
                "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Account was closed.",
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "created_at": {
            "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Account was created.",
            "format": "date-time",
            "type": "string"
          },
          "currency": {
            "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Account currency.",
            "enum": [
              "CAD",
              "CHF",
              "EUR",
              "GBP",
              "JPY",
              "USD"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "Canadian Dollar (CAD)",
              "Swiss Franc (CHF)",
              "Euro (EUR)",
              "British Pound (GBP)",
              "Japanese Yen (JPY)",
              "US Dollar (USD)"
            ]
          },
          "entity_id": {
            "anyOf": [
              {
                "description": "The identifier for the Entity the Account belongs to.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "id": {
            "description": "The Account identifier.",
            "type": "string"
          },
          "idempotency_key": {
            "anyOf": [
              {
                "description": "The idempotency key you chose for this object. This value is unique across Increase and is used to ensure that a request is only processed once. Learn more about [idempotency](https://increase.com/documentation/idempotency-keys).",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "informational_entity_id": {
            "anyOf": [
              {
                "description": "The identifier of an Entity that, while not owning the Account, is associated with its activity.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "interest_accrued": {
            "description": "The interest accrued but not yet paid, expressed as a string containing a floating-point value.",
            "type": "string"
          },
          "interest_accrued_at": {
            "anyOf": [
              {
                "description": "The latest [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which interest was accrued.",
                "format": "date",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "interest_rate": {
            "description": "The Interest Rate currently being earned on the account, as a string containing a decimal number. For example, a 1% interest rate would be represented as \"0.01\".",
            "pattern": "^-?\\d+(\\.\\d+)?$",
            "type": "string"
          },
          "name": {
            "description": "The name you choose for the Account.",
            "type": "string"
          },
          "program_id": {
            "description": "The identifier of the Program determining the compliance and commercial terms of this Account.",
            "type": "string"
          },
          "status": {
            "description": "The status of the Account.",
            "enum": [
              "closed",
              "open"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "Closed Accounts on which no new activity can occur.",
              "Open Accounts that are ready to use."
            ]
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `account`.",
            "enum": [
              "account"
            ],
            "type": "string"
          }
        },
        "required": [
          "bank",
          "created_at",
          "closed_at",
          "currency",
          "entity_id",
          "informational_entity_id",
          "id",
          "program_id",
          "interest_accrued",
          "interest_accrued_at",
          "interest_rate",
          "name",
          "status",
          "type",
          "idempotency_key"
        ],
        "title": "Account",
        "type": "object",
        "x-tag": "Accounts",
        "x-title-plural": "Accounts"
      },
      "account_list": {
        "description": "A list of Account objects.",
        "example": {
          "data": [
            {
              "bank": "first_internet_bank",
              "closed_at": null,
              "created_at": "2020-01-31T23:59:59Z",
              "currency": "USD",
              "entity_id": "entity_n8y8tnk2p9339ti393yi",
              "id": "account_in71c4amph0vgo2qllky",
              "idempotency_key": null,
              "informational_entity_id": null,
              "interest_accrued": "0.01",
              "interest_accrued_at": "2020-01-31",
              "interest_rate": "0.055",
              "name": "My first account!",
              "program_id": "program_i2v2os4mwza1oetokh9i",
              "replacement": {
                "replaced_account_id": null,
                "replaced_by_account_id": null
              },
              "status": "open",
              "type": "account"
            }
          ],
          "next_cursor": "v57w5d"
        },
        "properties": {
          "data": {
            "description": "The contents of the list.",
            "items": {
              "$ref": "#/components/schemas/account"
            },
            "type": "array"
          },
          "next_cursor": {
            "anyOf": [
              {
                "description": "A pointer to a place in the list.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "Account List",
        "type": "object",
        "x-title-plural": "Account Lists"
      },
      "account_number": {
        "description": "Each account can have multiple account and routing numbers. We recommend that you use a set per vendor. This is similar to how you use different passwords for different websites. Account numbers can also be used to seamlessly reconcile inbound payments. Generating a unique account number per vendor ensures you always know the originator of an incoming payment.",
        "example": {
          "account_id": "account_in71c4amph0vgo2qllky",
          "account_number": "987654321",
          "created_at": "2020-01-31T23:59:59Z",
          "id": "account_number_v18nkfqm6afpsrvy82b2",
          "idempotency_key": null,
          "inbound_ach": {
            "debit_status": "blocked"
          },
          "inbound_checks": {
            "status": "check_transfers_only"
          },
          "name": "ACH",
          "replacement": {
            "replaced_account_number_id": null,
            "replaced_by_account_number_id": null
          },
          "routing_number": "101050001",
          "status": "active",
          "type": "account_number"
        },
        "properties": {
          "account_id": {
            "description": "The identifier for the account this Account Number belongs to.",
            "type": "string"
          },
          "account_number": {
            "description": "The account number.",
            "type": "string"
          },
          "created_at": {
            "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Account Number was created.",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "The Account Number identifier.",
            "type": "string"
          },
          "idempotency_key": {
            "anyOf": [
              {
                "description": "The idempotency key you chose for this object. This value is unique across Increase and is used to ensure that a request is only processed once. Learn more about [idempotency](https://increase.com/documentation/idempotency-keys).",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "inbound_ach": {
            "description": "Properties related to how this Account Number handles inbound ACH transfers.",
            "properties": {
              "debit_status": {
                "description": "Whether ACH debits are allowed against this Account Number. Note that they will still be declined if this is `allowed` if the Account Number is not active.",
                "enum": [
                  "allowed",
                  "blocked"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "ACH Debits are allowed.",
                  "ACH Debits are blocked."
                ]
              }
            },
            "required": [
              "debit_status"
            ],
            "title": "Inbound ACH",
            "type": "object",
            "x-title-plural": "Inbound Achs"
          },
          "inbound_checks": {
            "description": "Properties related to how this Account Number should handle inbound check withdrawals.",
            "properties": {
              "status": {
                "description": "How Increase should process checks with this account number printed on them.",
                "enum": [
                  "allowed",
                  "check_transfers_only"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "Checks with this Account Number will be processed even if they are not associated with a Check Transfer.",
                  "Checks with this Account Number will be processed only if they can be matched to an existing Check Transfer."
                ]
              }
            },
            "required": [
              "status"
            ],
            "title": "Inbound Checks",
            "type": "object",
            "x-title-plural": "Inbound Checks"
          },
          "name": {
            "description": "The name you choose for the Account Number.",
            "type": "string"
          },
          "routing_number": {
            "description": "The American Bankers' Association (ABA) Routing Transit Number (RTN).",
            "type": "string"
          },
          "status": {
            "description": "This indicates if payments can be made to the Account Number.",
            "enum": [
              "active",
              "disabled",
              "canceled"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The account number is active.",
              "The account number is temporarily disabled.",
              "The account number is permanently disabled."
            ]
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `account_number`.",
            "enum": [
              "account_number"
            ],
            "type": "string"
          }
        },
        "required": [
          "account_id",
          "account_number",
          "id",
          "created_at",
          "name",
          "routing_number",
          "status",
          "inbound_ach",
          "inbound_checks",
          "idempotency_key",
          "type"
        ],
        "title": "Account Number",
        "type": "object",
        "x-tag": "Account Numbers",
        "x-title-plural": "Account Numbers"
      },
      "account_number_list": {
        "description": "A list of Account Number objects.",
        "example": {
          "data": [
            {
              "account_id": "account_in71c4amph0vgo2qllky",
              "account_number": "987654321",
              "created_at": "2020-01-31T23:59:59Z",
              "id": "account_number_v18nkfqm6afpsrvy82b2",
              "idempotency_key": null,
              "inbound_ach": {
                "debit_status": "blocked"
              },
              "inbound_checks": {
                "status": "check_transfers_only"
              },
              "name": "ACH",
              "replacement": {
                "replaced_account_number_id": null,
                "replaced_by_account_number_id": null
              },
              "routing_number": "101050001",
              "status": "active",
              "type": "account_number"
            }
          ],
          "next_cursor": "v57w5d"
        },
        "properties": {
          "data": {
            "description": "The contents of the list.",
            "items": {
              "$ref": "#/components/schemas/account_number"
            },
            "type": "array"
          },
          "next_cursor": {
            "anyOf": [
              {
                "description": "A pointer to a place in the list.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "Account Number List",
        "type": "object",
        "x-title-plural": "Account Number Lists"
      },
      "account_statement": {
        "description": "Account Statements are generated monthly for every active Account. You can access the statement's data via the API or retrieve a PDF with its details via its associated File.",
        "example": {
          "account_id": "account_in71c4amph0vgo2qllky",
          "created_at": "2020-01-31T23:59:59Z",
          "ending_balance": 100,
          "file_id": "file_makxrc67oh9l6sg7w9yc",
          "id": "account_statement_lkc03a4skm2k7f38vj15",
          "starting_balance": 0,
          "statement_period_end": "2020-01-31T23:59:59Z",
          "statement_period_start": "2020-01-31T23:59:59Z",
          "type": "account_statement"
        },
        "properties": {
          "account_id": {
            "description": "The identifier for the Account this Account Statement belongs to.",
            "type": "string"
          },
          "created_at": {
            "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Account Statement was created.",
            "format": "date-time",
            "type": "string"
          },
          "ending_balance": {
            "description": "The Account's balance at the start of its statement period.",
            "type": "integer"
          },
          "file_id": {
            "description": "The identifier of the File containing a PDF of the statement.",
            "type": "string"
          },
          "id": {
            "description": "The Account Statement identifier.",
            "type": "string"
          },
          "starting_balance": {
            "description": "The Account's balance at the start of its statement period.",
            "type": "integer"
          },
          "statement_period_end": {
            "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time representing the end of the period the Account Statement covers.",
            "format": "date-time",
            "type": "string"
          },
          "statement_period_start": {
            "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time representing the start of the period the Account Statement covers.",
            "format": "date-time",
            "type": "string"
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `account_statement`.",
            "enum": [
              "account_statement"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "account_id",
          "created_at",
          "file_id",
          "statement_period_start",
          "statement_period_end",
          "starting_balance",
          "ending_balance",
          "type"
        ],
        "title": "Account Statement",
        "type": "object",
        "x-tag": "Account Statements",
        "x-title-plural": "Account Statements"
      },
      "account_statement_list": {
        "description": "A list of Account Statement objects.",
        "example": {
          "data": [
            {
              "account_id": "account_in71c4amph0vgo2qllky",
              "created_at": "2020-01-31T23:59:59Z",
              "ending_balance": 100,
              "file_id": "file_makxrc67oh9l6sg7w9yc",
              "id": "account_statement_lkc03a4skm2k7f38vj15",
              "starting_balance": 0,
              "statement_period_end": "2020-01-31T23:59:59Z",
              "statement_period_start": "2020-01-31T23:59:59Z",
              "type": "account_statement"
            }
          ],
          "next_cursor": "v57w5d"
        },
        "properties": {
          "data": {
            "description": "The contents of the list.",
            "items": {
              "$ref": "#/components/schemas/account_statement"
            },
            "type": "array"
          },
          "next_cursor": {
            "anyOf": [
              {
                "description": "A pointer to a place in the list.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "Account Statement List",
        "type": "object",
        "x-title-plural": "Account Statement Lists"
      },
      "account_transfer": {
        "description": "Account transfers move funds between your own accounts at Increase.",
        "example": {
          "account_id": "account_in71c4amph0vgo2qllky",
          "amount": 100,
          "approval": {
            "approved_at": "2020-01-31T23:59:59Z",
            "approved_by": null
          },
          "cancellation": null,
          "created_at": "2020-01-31T23:59:59Z",
          "created_by": {
            "category": "user",
            "user": {
              "email": "user@example.com"
            }
          },
          "currency": "USD",
          "description": "Move money into savings",
          "destination_account_id": "account_uf16sut2ct5bevmq3eh",
          "destination_transaction_id": "transaction_j3itv8dtk5o8pw3p1xj4",
          "id": "account_transfer_7k9qe1ysdgqztnt63l7n",
          "idempotency_key": null,
          "network": "account",
          "pending_transaction_id": null,
          "status": "complete",
          "transaction_id": "transaction_uyrp7fld2ium70oa7oi",
          "type": "account_transfer"
        },
        "properties": {
          "account_id": {
            "description": "The Account to which the transfer belongs.",
            "type": "string"
          },
          "amount": {
            "description": "The transfer amount in the minor unit of the destination account currency. For dollars, for example, this is cents.",
            "type": "integer"
          },
          "approval": {
            "anyOf": [
              {
                "description": "If your account requires approvals for transfers and the transfer was approved, this will contain details of the approval.",
                "example": {
                  "approved_at": "2020-01-31T23:59:59Z",
                  "approved_by": null
                },
                "properties": {
                  "approved_at": {
                    "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was approved.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "approved_by": {
                    "anyOf": [
                      {
                        "description": "If the Transfer was approved by a user in the dashboard, the email address of that user.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  }
                },
                "required": [
                  "approved_at",
                  "approved_by"
                ],
                "title": "Transfer Approval",
                "type": "object",
                "x-title-plural": "Transfer Approvals"
              },
              {
                "type": "null"
              }
            ]
          },
          "cancellation": {
            "anyOf": [
              {
                "description": "If your account requires approvals for transfers and the transfer was not approved, this will contain details of the cancellation.",
                "example": {
                  "canceled_at": "2020-01-31T23:59:59Z",
                  "canceled_by": null
                },
                "properties": {
                  "canceled_at": {
                    "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Transfer was canceled.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "canceled_by": {
                    "anyOf": [
                      {
                        "description": "If the Transfer was canceled by a user in the dashboard, the email address of that user.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  }
                },
                "required": [
                  "canceled_at",
                  "canceled_by"
                ],
                "title": "Transfer Cancellation",
                "type": "object",
                "x-title-plural": "Transfer Cancellations"
              },
              {
                "type": "null"
              }
            ]
          },
          "created_at": {
            "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.",
            "format": "date-time",
            "type": "string"
          },
          "created_by": {
            "anyOf": [
              {
                "description": "What object created the transfer, either via the API or the dashboard.",
                "example": {
                  "category": "user",
                  "user": {
                    "email": "user@example.com"
                  }
                },
                "properties": {
                  "api_key": {
                    "anyOf": [
                      {
                        "description": "If present, details about the API key that created the transfer.",
                        "properties": {
                          "description": {
                            "anyOf": [
                              {
                                "description": "The description set for the API key when it was created.",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "required": [
                          "description"
                        ],
                        "title": "Api Key",
                        "type": "object",
                        "x-title-plural": "Api Keys"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "category": {
                    "description": "The type of object that created this transfer.",
                    "enum": [
                      "api_key",
                      "oauth_application",
                      "user"
                    ],
                    "type": "string",
                    "x-enum-descriptions": [
                      "An API key. Details will be under the `api_key` object.",
                      "An OAuth application you connected to Increase. Details will be under the `oauth_application` object.",
                      "A User in the Increase dashboard. Details will be under the `user` object."
                    ]
                  },
                  "oauth_application": {
                    "anyOf": [
                      {
                        "description": "If present, details about the OAuth Application that created the transfer.",
                        "properties": {
                          "name": {
                            "description": "The name of the OAuth Application.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "name"
                        ],
                        "title": "OAuth Application",
                        "type": "object",
                        "x-title-plural": "OAuth Applications"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "user": {
                    "anyOf": [
                      {
                        "description": "If present, details about the User that created the transfer.",
                        "properties": {
                          "email": {
                            "description": "The email address of the User.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "email"
                        ],
                        "title": "User",
                        "type": "object",
                        "x-title-plural": "Users"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  }
                },
                "required": [
                  "category",
                  "api_key",
                  "oauth_application",
                  "user"
                ],
                "title": "Transfer Creator",
                "type": "object",
                "x-title-plural": "Transfer Creators"
              },
              {
                "type": "null"
              }
            ]
          },
          "currency": {
            "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.",
            "enum": [
              "CAD",
              "CHF",
              "EUR",
              "GBP",
              "JPY",
              "USD"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "Canadian Dollar (CAD)",
              "Swiss Franc (CHF)",
              "Euro (EUR)",
              "British Pound (GBP)",
              "Japanese Yen (JPY)",
              "US Dollar (USD)"
            ]
          },
          "description": {
            "description": "The description that will show on the transactions.",
            "type": "string"
          },
          "destination_account_id": {
            "description": "The destination account's identifier.",
            "type": "string"
          },
          "destination_transaction_id": {
            "anyOf": [
              {
                "description": "The ID for the transaction receiving the transfer.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "id": {
            "description": "The account transfer's identifier.",
            "type": "string"
          },
          "idempotency_key": {
            "anyOf": [
              {
                "description": "The idempotency key you chose for this object. This value is unique across Increase and is used to ensure that a request is only processed once. Learn more about [idempotency](https://increase.com/documentation/idempotency-keys).",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "network": {
            "description": "The transfer's network.",
            "enum": [
              "account"
            ],
            "type": "string"
          },
          "pending_transaction_id": {
            "anyOf": [
              {
                "description": "The ID for the pending transaction representing the transfer. A pending transaction is created when the transfer [requires approval](https://increase.com/documentation/transfer-approvals#transfer-approvals) by someone else in your organization.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "status": {
            "description": "The lifecycle status of the transfer.",
            "enum": [
              "pending_approval",
              "canceled",
              "complete"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The transfer is pending approval.",
              "The transfer has been canceled.",
              "The transfer has been completed."
            ]
          },
          "transaction_id": {
            "anyOf": [
              {
                "description": "The ID for the transaction funding the transfer.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `account_transfer`.",
            "enum": [
              "account_transfer"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "amount",
          "account_id",
          "currency",
          "destination_account_id",
          "destination_transaction_id",
          "created_at",
          "description",
          "network",
          "status",
          "transaction_id",
          "pending_transaction_id",
          "approval",
          "cancellation",
          "created_by",
          "idempotency_key",
          "type"
        ],
        "title": "Account Transfer",
        "type": "object",
        "x-tag": "Account Transfers",
        "x-title-plural": "Account Transfers"
      },
      "account_transfer_list": {
        "description": "A list of Account Transfer objects.",
        "example": {
          "data": [
            {
              "account_id": "account_in71c4amph0vgo2qllky",
              "amount": 100,
              "approval": {
                "approved_at": "2020-01-31T23:59:59Z",
                "approved_by": null
              },
              "cancellation": null,
              "created_at": "2020-01-31T23:59:59Z",
              "created_by": {
                "category": "user",
                "user": {
                  "email": "user@example.com"
                }
              },
              "currency": "USD",
              "description": "Move money into savings",
              "destination_account_id": "account_uf16sut2ct5bevmq3eh",
              "destination_transaction_id": "transaction_j3itv8dtk5o8pw3p1xj4",
              "id": "account_transfer_7k9qe1ysdgqztnt63l7n",
              "idempotency_key": null,
              "network": "account",
              "pending_transaction_id": null,
              "status": "complete",
              "transaction_id": "transaction_uyrp7fld2ium70oa7oi",
              "type": "account_transfer"
            }
          ],
          "next_cursor": "v57w5d"
        },
        "properties": {
          "data": {
            "description": "The contents of the list.",
            "items": {
              "$ref": "#/components/schemas/account_transfer"
            },
            "type": "array"
          },
          "next_cursor": {
            "anyOf": [
              {
                "description": "A pointer to a place in the list.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "Account Transfer List",
        "type": "object",
        "x-title-plural": "Account Transfer Lists"
      },
      "ach_decline": {
        "example": {
          "amount": 1750,
          "id": "ach_decline_72v1mcwxudctq56efipa",
          "inbound_ach_transfer_id": "inbound_ach_transfer_tdrwqr3fq9gnnq49odev",
          "originator_company_descriptive_date": null,
          "originator_company_discretionary_data": null,
          "originator_company_id": "0987654321",
          "originator_company_name": "BIG BANK",
          "reason": "insufficient_funds",
          "receiver_id_number": "12345678900",
          "receiver_name": "IAN CREASE",
          "trace_number": "021000038461022",
          "type": "ach_decline"
        },
        "properties": {
          "amount": {
            "description": "The declined amount in USD cents.",
            "type": "integer"
          },
          "id": {
            "description": "The ACH Decline's identifier.",
            "type": "string"
          },
          "inbound_ach_transfer_id": {
            "description": "The identifier of the Inbound ACH Transfer object associated with this decline.",
            "type": "string"
          },
          "originator_company_descriptive_date": {
            "anyOf": [
              {
                "description": "The descriptive date of the transfer.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "originator_company_discretionary_data": {
            "anyOf": [
              {
                "description": "The additional information included with the transfer.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "originator_company_id": {
            "description": "The identifier of the company that initiated the transfer.",
            "type": "string"
          },
          "originator_company_name": {
            "description": "The name of the company that initiated the transfer.",
            "type": "string"
          },
          "reason": {
            "description": "Why the ACH transfer was declined.",
            "enum": [
              "ach_route_canceled",
              "ach_route_disabled",
              "breaches_limit",
              "entity_not_active",
              "group_locked",
              "transaction_not_allowed",
              "user_initiated",
              "insufficient_funds",
              "returned_per_odfi_request",
              "authorization_revoked_by_customer",
              "payment_stopped",
              "customer_advised_unauthorized_improper_ineligible_or_incomplete",
              "representative_payee_deceased_or_unable_to_continue_in_that_capacity",
              "beneficiary_or_account_holder_deceased",
              "credit_entry_refused_by_receiver",
              "duplicate_entry",
              "corporate_customer_advised_not_authorized"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The account number is canceled.",
              "The account number is disabled.",
              "The transaction would cause an Increase limit to be exceeded.",
              "The account's entity is not active.",
              "Your account is inactive.",
              "The transaction is not allowed per Increase's terms.",
              "Your integration declined this transfer via the API.",
              "Your account contains insufficient funds.",
              "The originating financial institution asked for this transfer to be returned. The receiving bank is complying with the request.",
              "The customer no longer authorizes this transaction.",
              "The customer asked for the payment to be stopped.",
              "The customer advises that the debit was unauthorized.",
              "The payee is deceased.",
              "The account holder is deceased.",
              "The customer refused a credit entry.",
              "The account holder identified this transaction as a duplicate.",
              "The corporate customer no longer authorizes this transaction."
            ]
          },
          "receiver_id_number": {
            "anyOf": [
              {
                "description": "The id of the receiver of the transfer.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "receiver_name": {
            "anyOf": [
              {
                "description": "The name of the receiver of the transfer.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "trace_number": {
            "description": "The trace number of the transfer.",
            "type": "string"
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `ach_decline`.",
            "enum": [
              "ach_decline"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "amount",
          "originator_company_name",
          "originator_company_descriptive_date",
          "originator_company_discretionary_data",
          "originator_company_id",
          "reason",
          "receiver_id_number",
          "receiver_name",
          "trace_number",
          "inbound_ach_transfer_id",
          "type"
        ],
        "title": "ACH Decline",
        "type": "object",
        "x-title-plural": "ACH Declines"
      },
      "ach_prenotification": {
        "description": "ACH Prenotifications are one way you can verify account and routing numbers by Automated Clearing House (ACH).",
        "example": {
          "account_number": "987654321",
          "addendum": null,
          "company_descriptive_date": null,
          "company_discretionary_data": null,
          "company_entry_description": null,
          "company_name": null,
          "created_at": "2020-01-31T23:59:59Z",
          "credit_debit_indicator": null,
          "effective_date": null,
          "id": "ach_prenotification_ubjf9qqsxl3obbcn1u34",
          "idempotency_key": null,
          "notifications_of_change": [],
          "prenotification_return": null,
          "routing_number": "101050001",
          "status": "submitted",
          "type": "ach_prenotification"
        },
        "properties": {
          "account_number": {
            "description": "The destination account number.",
            "type": "string"
          },
          "addendum": {
            "anyOf": [
              {
                "description": "Additional information for the recipient.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "company_descriptive_date": {
            "anyOf": [
              {
                "description": "The description of the date of the notification.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "company_discretionary_data": {
            "anyOf": [
              {
                "description": "Optional data associated with the notification.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "company_entry_description": {
            "anyOf": [
              {
                "description": "The description of the notification.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "company_name": {
            "anyOf": [
              {
                "description": "The name by which you know the company.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "created_at": {
            "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the prenotification was created.",
            "format": "date-time",
            "type": "string"
          },
          "credit_debit_indicator": {
            "anyOf": [
              {
                "description": "If the notification is for a future credit or debit.",
                "enum": [
                  "credit",
                  "debit"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "The Prenotification is for an anticipated credit.",
                  "The Prenotification is for an anticipated debit."
                ]
              },
              {
                "type": "null"
              }
            ]
          },
          "effective_date": {
            "anyOf": [
              {
                "description": "The effective date in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.",
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "id": {
            "description": "The ACH Prenotification's identifier.",
            "type": "string"
          },
          "idempotency_key": {
            "anyOf": [
              {
                "description": "The idempotency key you chose for this object. This value is unique across Increase and is used to ensure that a request is only processed once. Learn more about [idempotency](https://increase.com/documentation/idempotency-keys).",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "notifications_of_change": {
            "description": "If the receiving bank notifies that future transfers should use different details, this will contain those details.",
            "items": {
              "example": {
                "change_code": "incorrect_transaction_code",
                "corrected_data": "32",
                "created_at": "2020-01-31T23:59:59Z"
              },
              "properties": {
                "change_code": {
                  "description": "The required type of change that is being signaled by the receiving financial institution.",
                  "enum": [
                    "incorrect_account_number",
                    "incorrect_routing_number",
                    "incorrect_routing_number_and_account_number",
                    "incorrect_transaction_code",
                    "incorrect_account_number_and_transaction_code",
                    "incorrect_routing_number_account_number_and_transaction_code",
                    "incorrect_receiving_depository_financial_institution_identification",
                    "incorrect_individual_identification_number",
                    "addenda_format_error",
                    "incorrect_standard_entry_class_code_for_outbound_international_payment",
                    "misrouted_notification_of_change",
                    "incorrect_trace_number",
                    "incorrect_company_identification_number",
                    "incorrect_identification_number",
                    "incorrectly_formatted_corrected_data",
                    "incorrect_discretionary_data",
                    "routing_number_not_from_original_entry_detail_record",
                    "depository_financial_institution_account_number_not_from_original_entry_detail_record",
                    "incorrect_transaction_code_by_originating_depository_financial_institution"
                  ],
                  "type": "string",
                  "x-enum-descriptions": [
                    "The account number was incorrect.",
                    "The routing number was incorrect.",
                    "Both the routing number and the account number were incorrect.",
                    "The transaction code was incorrect. Try changing the `funding` parameter from checking to savings or vice-versa.",
                    "The account number and the transaction code were incorrect.",
                    "The routing number, account number, and transaction code were incorrect.",
                    "The receiving depository financial institution identification was incorrect.",
                    "The individual identification number was incorrect.",
                    "The addenda had an incorrect format.",
                    "The standard entry class code was incorrect for an outbound international payment.",
                    "The notification of change was misrouted.",
                    "The trace number was incorrect.",
                    "The company identification number was incorrect.",
                    "The individual identification number or identification number was incorrect.",
                    "The corrected data was incorrectly formatted.",
                    "The discretionary data was incorrect.",
                    "The routing number was not from the original entry detail record.",
                    "The depository financial institution account number was not from the original entry detail record.",
                    "The transaction code was incorrect, initiated by the originating depository financial institution."
                  ]
                },
                "corrected_data": {
                  "description": "The corrected data that should be used in future ACHs to this account. This may contain the suggested new account number or routing number. When the `change_code` is `incorrect_transaction_code`, this field contains an integer. Numbers starting with a 2 encourage changing the `funding` parameter to checking; numbers starting with a 3 encourage changing to savings.",
                  "type": "string"
                },
                "created_at": {
                  "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the notification occurred.",
                  "format": "date-time",
                  "type": "string"
                }
              },
              "required": [
                "created_at",
                "change_code",
                "corrected_data"
              ],
              "title": "ACH Notification of Change",
              "type": "object",
              "x-title-plural": "ACH Notifications of change"
            },
            "type": "array"
          },
          "prenotification_return": {
            "anyOf": [
              {
                "description": "If your prenotification is returned, this will contain details of the return.",
                "example": {
                  "created_at": "2020-01-31T23:59:59Z",
                  "return_reason_code": "corporate_customer_advised_not_authorized"
                },
                "properties": {
                  "created_at": {
                    "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Prenotification was returned.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "return_reason_code": {
                    "description": "Why the Prenotification was returned.",
                    "enum": [
                      "insufficient_fund",
                      "no_account",
                      "account_closed",
                      "invalid_account_number_structure",
                      "account_frozen_entry_returned_per_ofac_instruction",
                      "credit_entry_refused_by_receiver",
                      "unauthorized_debit_to_consumer_account_using_corporate_sec_code",
                      "corporate_customer_advised_not_authorized",
                      "payment_stopped",
                      "non_transaction_account",
                      "uncollected_funds",
                      "routing_number_check_digit_error",
                      "customer_advised_unauthorized_improper_ineligible_or_incomplete",
                      "amount_field_error",
                      "authorization_revoked_by_customer",
                      "invalid_ach_routing_number",
                      "file_record_edit_criteria",
                      "enr_invalid_individual_name",
                      "returned_per_odfi_request",
                      "limited_participation_dfi",
                      "incorrectly_coded_outbound_international_payment",
                      "account_sold_to_another_dfi",
                      "addenda_error",
                      "beneficiary_or_account_holder_deceased",
                      "customer_advised_not_within_authorization_terms",
                      "corrected_return",
                      "duplicate_entry",
                      "duplicate_return",
                      "enr_duplicate_enrollment",
                      "enr_invalid_dfi_account_number",
                      "enr_invalid_individual_id_number",
                      "enr_invalid_representative_payee_indicator",
                      "enr_invalid_transaction_code",
                      "enr_return_of_enr_entry",
                      "enr_routing_number_check_digit_error",
                      "entry_not_processed_by_gateway",
                      "field_error",
                      "foreign_receiving_dfi_unable_to_settle",
                      "iat_entry_coding_error",
                      "improper_effective_entry_date",
                      "improper_source_document_source_document_presented",
                      "invalid_company_id",
                      "invalid_foreign_receiving_dfi_identification",
                      "invalid_individual_id_number",
                      "item_and_rck_entry_presented_for_payment",
                      "item_related_to_rck_entry_is_ineligible",
                      "mandatory_field_error",
                      "misrouted_dishonored_return",
                      "misrouted_return",
                      "no_errors_found",
                      "non_acceptance_of_r62_dishonored_return",
                      "non_participant_in_iat_program",
                      "permissible_return_entry",
                      "permissible_return_entry_not_accepted",
                      "rdfi_non_settlement",
                      "rdfi_participant_in_check_truncation_program",
                      "representative_payee_deceased_or_unable_to_continue_in_that_capacity",
                      "return_not_a_duplicate",
                      "return_of_erroneous_or_reversing_debit",
                      "return_of_improper_credit_entry",
                      "return_of_improper_debit_entry",
                      "return_of_xck_entry",
                      "source_document_presented_for_payment",
                      "state_law_affecting_rck_acceptance",
                      "stop_payment_on_item_related_to_rck_entry",
                      "stop_payment_on_source_document",
                      "timely_original_return",
                      "trace_number_error",
                      "untimely_dishonored_return",
                      "untimely_return"
                    ],
                    "type": "string",
                    "x-enum-descriptions": [
                      "Code R01. Insufficient funds in the receiving account. Sometimes abbreviated to NSF.",
                      "Code R03. The account does not exist or the receiving bank was unable to locate it.",
                      "Code R02. The account is closed at the receiving bank.",
                      "Code R04. The account number is invalid at the receiving bank.",
                      "Code R16. The account at the receiving bank was frozen per the Office of Foreign Assets Control.",
                      "Code R23. The receiving bank account refused a credit transfer.",
                      "Code R05. The receiving bank rejected because of an incorrect Standard Entry Class code.",
                      "Code R29. The corporate customer at the receiving bank reversed the transfer.",
                      "Code R08. The receiving bank stopped payment on this transfer.",
                      "Code R20. The receiving bank account does not perform transfers.",
                      "Code R09. The receiving bank account does not have enough available balance for the transfer.",
                      "Code R28. The routing number is incorrect.",
                      "Code R10. The customer at the receiving bank reversed the transfer.",
                      "Code R19. The amount field is incorrect or too large.",
                      "Code R07. The customer at the receiving institution informed their bank that they have revoked authorization for a previously authorized transfer.",
                      "Code R13. The routing number is invalid.",
                      "Code R17. The receiving bank is unable to process a field in the transfer.",
                      "Code R45. The individual name field was invalid.",
                      "Code R06. The originating financial institution asked for this transfer to be returned. The receiving bank is complying with the request.",
                      "Code R34. The receiving bank's regulatory supervisor has limited their participation in the ACH network.",
                      "Code R85. The outbound international ACH transfer was incorrect.",
                      "Code R12. A rare return reason. The account was sold to another bank.",
                      "Code R25. The addenda record is incorrect or missing.",
                      "Code R15. A rare return reason. The account holder is deceased.",
                      "Code R11. A rare return reason. The customer authorized some payment to the sender, but this payment was not in error.",
                      "Code R74. A rare return reason. Sent in response to a return that was returned with code `field_error`. The latest return should include the corrected field(s).",
                      "Code R24. A rare return reason. The receiving bank received an exact duplicate entry with the same trace number and amount.",
                      "Code R67. A rare return reason. The return this message refers to was a duplicate.",
                      "Code R47. A rare return reason. Only used for US Government agency non-monetary automatic enrollment messages.",
                      "Code R43. A rare return reason. Only used for US Government agency non-monetary automatic enrollment messages.",
                      "Code R44. A rare return reason. Only used for US Government agency non-monetary automatic enrollment messages.",
                      "Code R46. A rare return reason. Only used for US Government agency non-monetary automatic enrollment messages.",
                      "Code R41. A rare return reason. Only used for US Government agency non-monetary automatic enrollment messages.",
                      "Code R40. A rare return reason. Only used for US Government agency non-monetary automatic enrollment messages.",
                      "Code R42. A rare return reason. Only used for US Government agency non-monetary automatic enrollment messages.",
                      "Code R84. A rare return reason. The International ACH Transfer cannot be processed by the gateway.",
                      "Code R69. A rare return reason. One or more of the fields in the ACH were malformed.",
                      "Code R83. A rare return reason. The Foreign receiving bank was unable to settle this ACH transfer.",
                      "Code R80. A rare return reason. The International ACH Transfer is malformed.",
                      "Code R18. A rare return reason. The ACH has an improper effective entry date field.",
                      "Code R39. A rare return reason. The source document related to this ACH, usually an ACH check conversion, was presented to the bank.",
                      "Code R21. A rare return reason. The Company ID field of the ACH was invalid.",
                      "Code R82. A rare return reason. The foreign receiving bank identifier for an International ACH Transfer was invalid.",
                      "Code R22. A rare return reason. The Individual ID number field of the ACH was invalid.",
                      "Code R53. A rare return reason. Both the Represented Check (\"RCK\") entry and the original check were presented to the bank.",
                      "Code R51. A rare return reason. The Represented Check (\"RCK\") entry is ineligible.",
                      "Code R26. A rare return reason. The ACH is missing a required field.",
                      "Code R71. A rare return reason. The receiving bank does not recognize the routing number in a dishonored return entry.",
                      "Code R61. A rare return reason. The receiving bank does not recognize the routing number in a return entry.",
                      "Code R76. A rare return reason. Sent in response to a return, the bank does not find the errors alleged by the returning bank.",
                      "Code R77. A rare return reason. The receiving bank does not accept the return of the erroneous debit. The funds are not available at the receiving bank.",
                      "Code R81. A rare return reason. The receiving bank does not accept International ACH Transfers.",
                      "Code R31. A rare return reason. A return that has been agreed to be accepted by the receiving bank, despite falling outside of the usual return timeframe.",
                      "Code R70. A rare return reason. The receiving bank had not approved this return.",
                      "Code R32. A rare return reason. The receiving bank could not settle this transaction.",
                      "Code R30. A rare return reason. The receiving bank does not accept Check Truncation ACH transfers.",
                      "Code R14. A rare return reason. The payee is deceased.",
                      "Code R75. A rare return reason. The originating bank disputes that an earlier `duplicate_entry` return was actually a duplicate.",
                      "Code R62. A rare return reason. The originating financial institution made a mistake and this return corrects it.",
                      "Code R36. A rare return reason. Return of a malformed credit entry.",
                      "Code R35. A rare return reason. Return of a malformed debit entry.",
                      "Code R33. A rare return reason. Return of a Destroyed Check (\"XKC\") entry.",
                      "Code R37. A rare return reason. The source document related to this ACH, usually an ACH check conversion, was presented to the bank.",
                      "Code R50. A rare return reason. State law prevents the bank from accepting the Represented Check (\"RCK\") entry.",
                      "Code R52. A rare return reason. A stop payment was issued on a Represented Check (\"RCK\") entry.",
                      "Code R38. A rare return reason. The source attached to the ACH, usually an ACH check conversion, includes a stop payment.",
                      "Code R73. A rare return reason. The bank receiving an `untimely_return` believes it was on time.",
                      "Code R27. A rare return reason. An ACH return's trace number does not match an originated ACH.",
                      "Code R72. A rare return reason. The dishonored return was sent too late.",
                      "Code R68. A rare return reason. The return was sent too late."
                    ]
                  }
                },
                "required": [
                  "created_at",
                  "return_reason_code"
                ],
                "title": "ACH Prenotification Return",
                "type": "object",
                "x-title-plural": "ACH Prenotification Returns"
              },
              {
                "type": "null"
              }
            ]
          },
          "routing_number": {
            "description": "The American Bankers' Association (ABA) Routing Transit Number (RTN).",
            "type": "string"
          },
          "status": {
            "description": "The lifecycle status of the ACH Prenotification.",
            "enum": [
              "pending_submitting",
              "requires_attention",
              "returned",
              "submitted"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The Prenotification is pending submission.",
              "The Prenotification requires attention.",
              "The Prenotification has been returned.",
              "The Prenotification is complete."
            ]
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `ach_prenotification`.",
            "enum": [
              "ach_prenotification"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "account_number",
          "addendum",
          "company_descriptive_date",
          "company_discretionary_data",
          "company_entry_description",
          "company_name",
          "credit_debit_indicator",
          "effective_date",
          "routing_number",
          "prenotification_return",
          "notifications_of_change",
          "created_at",
          "status",
          "type",
          "idempotency_key"
        ],
        "title": "ACH Prenotification",
        "type": "object",
        "x-tag": "ACH Prenotifications",
        "x-title-plural": "ACH Prenotifications"
      },
      "ach_prenotification_list": {
        "description": "A list of ACH Prenotification objects.",
        "example": {
          "data": [
            {
              "account_number": "987654321",
              "addendum": null,
              "company_descriptive_date": null,
              "company_discretionary_data": null,
              "company_entry_description": null,
              "company_name": null,
              "created_at": "2020-01-31T23:59:59Z",
              "credit_debit_indicator": null,
              "effective_date": null,
              "id": "ach_prenotification_ubjf9qqsxl3obbcn1u34",
              "idempotency_key": null,
              "notifications_of_change": [],
              "prenotification_return": null,
              "routing_number": "101050001",
              "status": "submitted",
              "type": "ach_prenotification"
            }
          ],
          "next_cursor": "v57w5d"
        },
        "properties": {
          "data": {
            "description": "The contents of the list.",
            "items": {
              "$ref": "#/components/schemas/ach_prenotification"
            },
            "type": "array"
          },
          "next_cursor": {
            "anyOf": [
              {
                "description": "A pointer to a place in the list.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "ACH Prenotification List",
        "type": "object",
        "x-title-plural": "ACH Prenotification Lists"
      },
      "ach_transfer": {
        "description": "ACH transfers move funds between your Increase account and any other account accessible by the Automated Clearing House (ACH).",
        "example": {
          "account_id": "account_in71c4amph0vgo2qllky",
          "account_number": "987654321",
          "acknowledgement": {
            "acknowledged_at": "2020-01-31T23:59:59Z"
          },
          "addenda": null,
          "amount": 100,
          "approval": {
            "approved_at": "2020-01-31T23:59:59Z",
            "approved_by": null
          },
          "cancellation": null,
          "company_descriptive_date": null,
          "company_discretionary_data": null,
          "company_entry_description": null,
          "company_name": "National Phonograph Company",
          "created_at": "2020-01-31T23:59:59Z",
          "created_by": {
            "category": "user",
            "user": {
              "email": "user@example.com"
            }
          },
          "currency": "USD",
          "destination_account_holder": "business",
          "effective_date": null,
          "external_account_id": "external_account_ukk55lr923a3ac0pp7iv",
          "funding": "checking",
          "id": "ach_transfer_uoxatyh3lt5evrsdvo7q",
          "idempotency_key": null,
          "inbound_funds_hold": null,
          "individual_id": null,
          "individual_name": "Ian Crease",
          "network": "ach",
          "notifications_of_change": [],
          "pending_transaction_id": null,
          "preferred_effective_date": {
            "date": null,
            "settlement_schedule": "same_day"
          },
          "return": null,
          "routing_number": "101050001",
          "settlement": null,
          "standard_entry_class_code": "corporate_credit_or_debit",
          "statement_descriptor": "Statement descriptor",
          "status": "returned",
          "submission": {
            "effective_date": "2020-01-31",
            "expected_funds_settlement_at": "2020-02-03T13:30:00Z",
            "expected_settlement_schedule": "future_dated",
            "submitted_at": "2020-01-31T23:59:59Z",
            "trace_number": "058349238292834"
          },
          "transaction_id": "transaction_uyrp7fld2ium70oa7oi",
          "type": "ach_transfer"
        },
        "properties": {
          "account_id": {
            "description": "The Account to which the transfer belongs.",
            "type": "string"
          },
          "account_number": {
            "description": "The destination account number.",
            "type": "string"
          },
          "acknowledgement": {
            "anyOf": [
              {
                "description": "After the transfer is acknowledged by FedACH, this will contain supplemental details. The Federal Reserve sends an acknowledgement message for each file that Increase submits.",
                "example": {
                  "acknowledged_at": "2020-01-31T23:59:59Z"
                },
                "properties": {
                  "acknowledged_at": {
                    "description": "When the Federal Reserve acknowledged the submitted file containing this transfer.",
                    "type": "string"
                  }
                },
                "required": [
                  "acknowledged_at"
                ],
                "title": "ACH Transfer Acknowledgement",
                "type": "object",
                "x-title-plural": "ACH Transfer Acknowledgements"
              },
              {
                "type": "null"
              }
            ]
          },
          "addenda": {
            "anyOf": [
              {
                "description": "Additional information that will be sent to the recipient.",
                "example": {
                  "category": "freeform",
                  "freeform": {
                    "entries": [
                      {
                        "payment_related_information": "addendum"
                      }
                    ]
                  }
                },
                "properties": {
                  "category": {
                    "description": "The type of the resource. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.",
                    "enum": [
                      "freeform",
                      "payment_order_remittance_advice",
                      "other"
                    ],
                    "type": "string",
                    "x-enum-descriptions": [
                      "Unstructured `payment_related_information` passed through with the transfer.",
                      "Structured ASC X12 820 remittance advice records. Please reach out to [support@increase.com](mailto:support@increase.com) for more information.",
                      "Unknown addenda type."
                    ]
                  },
                  "freeform": {
                    "anyOf": [
                      {
                        "description": "Unstructured `payment_related_information` passed through with the transfer.",
                        "properties": {
                          "entries": {
                            "description": "Each entry represents an addendum sent with the transfer.",
                            "items": {
                              "properties": {
                                "payment_related_information": {
                                  "description": "The payment related information passed in the addendum.",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "payment_related_information"
                              ],
                              "title": "Entries Element",
                              "type": "object",
                              "x-title-plural": "Entries Elements"
                            },
                            "type": "array"
                          }
                        },
                        "required": [
                          "entries"
                        ],
                        "title": "Freeform",
                        "type": "object",
                        "x-title-plural": "Freeforms"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "payment_order_remittance_advice": {
                    "anyOf": [
                      {
                        "description": "Structured ASC X12 820 remittance advice records. Please reach out to [support@increase.com](mailto:support@increase.com) for more information.",
                        "properties": {
                          "invoices": {
                            "description": "ASC X12 RMR records for this specific transfer.",
                            "items": {
                              "properties": {
                                "invoice_number": {
                                  "description": "The invoice number for this reference, determined in advance with the receiver.",
                                  "type": "string"
                                },
                                "paid_amount": {
                                  "description": "The amount that was paid for this invoice in the minor unit of its currency. For dollars, for example, this is cents.",
                                  "type": "integer"
                                }
                              },
                              "required": [
                                "invoice_number",
                                "paid_amount"
                              ],
                              "title": "Invoices Element",
                              "type": "object",
                              "x-title-plural": "Invoices Elements"
                            },
                            "type": "array"
                          }
                        },
                        "required": [
                          "invoices"
                        ],
                        "title": "Payment Order Remittance Advice",
                        "type": "object",
                        "x-title-plural": "Payment Order Remittance Advices"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  }
                },
                "required": [
                  "category",
                  "freeform",
                  "payment_order_remittance_advice"
                ],
                "title": "ACH Transfer Addenda",
                "type": "object",
                "x-title-plural": "ACH Transfer Addendas"
              },
              {
                "type": "null"
              }
            ]
          },
          "amount": {
            "description": "The transfer amount in USD cents. A positive amount indicates a credit transfer pushing funds to the receiving account. A negative amount indicates a debit transfer pulling funds from the receiving account.",
            "type": "integer"
          },
          "approval": {
            "anyOf": [
              {
                "description": "If your account requires approvals for transfers and the transfer was approved, this will contain details of the approval.",
                "example": {
                  "approved_at": "2020-01-31T23:59:59Z",
                  "approved_by": null
                },
                "properties": {
                  "approved_at": {
                    "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was approved.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "approved_by": {
                    "anyOf": [
                      {
                        "description": "If the Transfer was approved by a user in the dashboard, the email address of that user.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  }
                },
                "required": [
                  "approved_at",
                  "approved_by"
                ],
                "title": "Transfer Approval",
                "type": "object",
                "x-title-plural": "Transfer Approvals"
              },
              {
                "type": "null"
              }
            ]
          },
          "cancellation": {
            "anyOf": [
              {
                "description": "If your account requires approvals for transfers and the transfer was not approved, this will contain details of the cancellation.",
                "example": {
                  "canceled_at": "2020-01-31T23:59:59Z",
                  "canceled_by": null
                },
                "properties": {
                  "canceled_at": {
                    "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Transfer was canceled.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "canceled_by": {
                    "anyOf": [
                      {
                        "description": "If the Transfer was canceled by a user in the dashboard, the email address of that user.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  }
                },
                "required": [
                  "canceled_at",
                  "canceled_by"
                ],
                "title": "Transfer Cancellation",
                "type": "object",
                "x-title-plural": "Transfer Cancellations"
              },
              {
                "type": "null"
              }
            ]
          },
          "company_descriptive_date": {
            "anyOf": [
              {
                "description": "The description of the date of the transfer.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "company_discretionary_data": {
            "anyOf": [
              {
                "description": "The data you chose to associate with the transfer.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "company_entry_description": {
            "anyOf": [
              {
                "description": "The description of the transfer you set to be shown to the recipient.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "company_name": {
            "anyOf": [
              {
                "description": "The name by which the recipient knows you.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "created_at": {
            "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.",
            "format": "date-time",
            "type": "string"
          },
          "created_by": {
            "anyOf": [
              {
                "description": "What object created the transfer, either via the API or the dashboard.",
                "example": {
                  "category": "user",
                  "user": {
                    "email": "user@example.com"
                  }
                },
                "properties": {
                  "api_key": {
                    "anyOf": [
                      {
                        "description": "If present, details about the API key that created the transfer.",
                        "properties": {
                          "description": {
                            "anyOf": [
                              {
                                "description": "The description set for the API key when it was created.",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "required": [
                          "description"
                        ],
                        "title": "Api Key",
                        "type": "object",
                        "x-title-plural": "Api Keys"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "category": {
                    "description": "The type of object that created this transfer.",
                    "enum": [
                      "api_key",
                      "oauth_application",
                      "user"
                    ],
                    "type": "string",
                    "x-enum-descriptions": [
                      "An API key. Details will be under the `api_key` object.",
                      "An OAuth application you connected to Increase. Details will be under the `oauth_application` object.",
                      "A User in the Increase dashboard. Details will be under the `user` object."
                    ]
                  },
                  "oauth_application": {
                    "anyOf": [
                      {
                        "description": "If present, details about the OAuth Application that created the transfer.",
                        "properties": {
                          "name": {
                            "description": "The name of the OAuth Application.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "name"
                        ],
                        "title": "OAuth Application",
                        "type": "object",
                        "x-title-plural": "OAuth Applications"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "user": {
                    "anyOf": [
                      {
                        "description": "If present, details about the User that created the transfer.",
                        "properties": {
                          "email": {
                            "description": "The email address of the User.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "email"
                        ],
                        "title": "User",
                        "type": "object",
                        "x-title-plural": "Users"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  }
                },
                "required": [
                  "category",
                  "api_key",
                  "oauth_application",
                  "user"
                ],
                "title": "Transfer Creator",
                "type": "object",
                "x-title-plural": "Transfer Creators"
              },
              {
                "type": "null"
              }
            ]
          },
          "currency": {
            "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transfer's currency. For ACH transfers this is always equal to `usd`.",
            "enum": [
              "CAD",
              "CHF",
              "EUR",
              "GBP",
              "JPY",
              "USD"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "Canadian Dollar (CAD)",
              "Swiss Franc (CHF)",
              "Euro (EUR)",
              "British Pound (GBP)",
              "Japanese Yen (JPY)",
              "US Dollar (USD)"
            ]
          },
          "destination_account_holder": {
            "description": "The type of entity that owns the account to which the ACH Transfer is being sent.",
            "enum": [
              "business",
              "individual",
              "unknown"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The External Account is owned by a business.",
              "The External Account is owned by an individual.",
              "It's unknown what kind of entity owns the External Account."
            ]
          },
          "external_account_id": {
            "anyOf": [
              {
                "description": "The identifier of the External Account the transfer was made to, if any.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "funding": {
            "description": "The type of the account to which the transfer will be sent.",
            "enum": [
              "checking",
              "savings"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "A checking account.",
              "A savings account."
            ]
          },
          "id": {
            "description": "The ACH transfer's identifier.",
            "type": "string"
          },
          "idempotency_key": {
            "anyOf": [
              {
                "description": "The idempotency key you chose for this object. This value is unique across Increase and is used to ensure that a request is only processed once. Learn more about [idempotency](https://increase.com/documentation/idempotency-keys).",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "inbound_funds_hold": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/inbound_funds_hold",
                "description": "Increase will sometimes hold the funds for ACH debit transfers. If funds are held, this sub-object will contain details of the hold."
              },
              {
                "type": "null"
              }
            ]
          },
          "individual_id": {
            "anyOf": [
              {
                "description": "Your identifier for the transfer recipient.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "individual_name": {
            "anyOf": [
              {
                "description": "The name of the transfer recipient. This value is information and not verified by the recipient's bank.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "network": {
            "description": "The transfer's network.",
            "enum": [
              "ach"
            ],
            "type": "string"
          },
          "notifications_of_change": {
            "description": "If the receiving bank accepts the transfer but notifies that future transfers should use different details, this will contain those details.",
            "items": {
              "example": {
                "change_code": "incorrect_transaction_code",
                "corrected_data": "32",
                "created_at": "2020-01-31T23:59:59Z"
              },
              "properties": {
                "change_code": {
                  "description": "The required type of change that is being signaled by the receiving financial institution.",
                  "enum": [
                    "incorrect_account_number",
                    "incorrect_routing_number",
                    "incorrect_routing_number_and_account_number",
                    "incorrect_transaction_code",
                    "incorrect_account_number_and_transaction_code",
                    "incorrect_routing_number_account_number_and_transaction_code",
                    "incorrect_receiving_depository_financial_institution_identification",
                    "incorrect_individual_identification_number",
                    "addenda_format_error",
                    "incorrect_standard_entry_class_code_for_outbound_international_payment",
                    "misrouted_notification_of_change",
                    "incorrect_trace_number",
                    "incorrect_company_identification_number",
                    "incorrect_identification_number",
                    "incorrectly_formatted_corrected_data",
                    "incorrect_discretionary_data",
                    "routing_number_not_from_original_entry_detail_record",
                    "depository_financial_institution_account_number_not_from_original_entry_detail_record",
                    "incorrect_transaction_code_by_originating_depository_financial_institution"
                  ],
                  "type": "string",
                  "x-enum-descriptions": [
                    "The account number was incorrect.",
                    "The routing number was incorrect.",
                    "Both the routing number and the account number were incorrect.",
                    "The transaction code was incorrect. Try changing the `funding` parameter from checking to savings or vice-versa.",
                    "The account number and the transaction code were incorrect.",
                    "The routing number, account number, and transaction code were incorrect.",
                    "The receiving depository financial institution identification was incorrect.",
                    "The individual identification number was incorrect.",
                    "The addenda had an incorrect format.",
                    "The standard entry class code was incorrect for an outbound international payment.",
                    "The notification of change was misrouted.",
                    "The trace number was incorrect.",
                    "The company identification number was incorrect.",
                    "The individual identification number or identification number was incorrect.",
                    "The corrected data was incorrectly formatted.",
                    "The discretionary data was incorrect.",
                    "The routing number was not from the original entry detail record.",
                    "The depository financial institution account number was not from the original entry detail record.",
                    "The transaction code was incorrect, initiated by the originating depository financial institution."
                  ]
                },
                "corrected_data": {
                  "description": "The corrected data that should be used in future ACHs to this account. This may contain the suggested new account number or routing number. When the `change_code` is `incorrect_transaction_code`, this field contains an integer. Numbers starting with a 2 encourage changing the `funding` parameter to checking; numbers starting with a 3 encourage changing to savings.",
                  "type": "string"
                },
                "created_at": {
                  "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the notification occurred.",
                  "format": "date-time",
                  "type": "string"
                }
              },
              "required": [
                "created_at",
                "change_code",
                "corrected_data"
              ],
              "title": "ACH Notification of Change",
              "type": "object",
              "x-title-plural": "ACH Notifications of change"
            },
            "type": "array"
          },
          "pending_transaction_id": {
            "anyOf": [
              {
                "description": "The ID for the pending transaction representing the transfer. A pending transaction is created when the transfer [requires approval](https://increase.com/documentation/transfer-approvals#transfer-approvals) by someone else in your organization.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "preferred_effective_date": {
            "description": "Configuration for how the effective date of the transfer will be set. This determines same-day vs future-dated settlement timing. If not set, defaults to a `settlement_schedule` of `same_day`. If set, exactly one of the child attributes must be set.",
            "properties": {
              "date": {
                "anyOf": [
                  {
                    "description": "A specific date in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format to use as the effective date when submitting this transfer.",
                    "format": "date",
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "settlement_schedule": {
                "anyOf": [
                  {
                    "description": "A schedule by which Increase will choose an effective date for the transfer.",
                    "enum": [
                      "same_day",
                      "future_dated"
                    ],
                    "type": "string",
                    "x-enum-descriptions": [
                      "The chosen effective date will be the same as the ACH processing date on which the transfer is submitted.\nThis is necessary, but not sufficient for the transfer to be settled same-day:\nit must also be submitted before the last same-day cutoff\nand be less than or equal to $1,000.000.00.\n",
                      "The chosen effective date will be the business day following the ACH processing date on which the transfer is submitted. The transfer will be settled on that future day."
                    ]
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "required": [
              "date",
              "settlement_schedule"
            ],
            "title": "Preferred Effective Date",
            "type": "object",
            "x-title-plural": "Preferred Effective Dates"
          },
          "return": {
            "anyOf": [
              {
                "description": "If your transfer is returned, this will contain details of the return.",
                "example": {
                  "created_at": "2020-01-31T23:59:59Z",
                  "raw_return_reason_code": "R01",
                  "return_reason_code": "insufficient_fund",
                  "trace_number": "111122223292834",
                  "transaction_id": "transaction_uyrp7fld2ium70oa7oi",
                  "transfer_id": "ach_transfer_uoxatyh3lt5evrsdvo7q"
                },
                "properties": {
                  "created_at": {
                    "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "raw_return_reason_code": {
                    "description": "The three character ACH return code, in the range R01 to R85.",
                    "type": "string"
                  },
                  "return_reason_code": {
                    "description": "Why the ACH Transfer was returned. This reason code is sent by the receiving bank back to Increase.",
                    "enum": [
                      "insufficient_fund",
                      "no_account",
                      "account_closed",
                      "invalid_account_number_structure",
                      "account_frozen_entry_returned_per_ofac_instruction",
                      "credit_entry_refused_by_receiver",
                      "unauthorized_debit_to_consumer_account_using_corporate_sec_code",
                      "corporate_customer_advised_not_authorized",
                      "payment_stopped",
                      "non_transaction_account",
                      "uncollected_funds",
                      "routing_number_check_digit_error",
                      "customer_advised_unauthorized_improper_ineligible_or_incomplete",
                      "amount_field_error",
                      "authorization_revoked_by_customer",
                      "invalid_ach_routing_number",
                      "file_record_edit_criteria",
                      "enr_invalid_individual_name",
                      "returned_per_odfi_request",
                      "limited_participation_dfi",
                      "incorrectly_coded_outbound_international_payment",
                      "account_sold_to_another_dfi",
                      "addenda_error",
                      "beneficiary_or_account_holder_deceased",
                      "customer_advised_not_within_authorization_terms",
                      "corrected_return",
                      "duplicate_entry",
                      "duplicate_return",
                      "enr_duplicate_enrollment",
                      "enr_invalid_dfi_account_number",
                      "enr_invalid_individual_id_number",
                      "enr_invalid_representative_payee_indicator",
                      "enr_invalid_transaction_code",
                      "enr_return_of_enr_entry",
                      "enr_routing_number_check_digit_error",
                      "entry_not_processed_by_gateway",
                      "field_error",
                      "foreign_receiving_dfi_unable_to_settle",
                      "iat_entry_coding_error",
                      "improper_effective_entry_date",
                      "improper_source_document_source_document_presented",
                      "invalid_company_id",
                      "invalid_foreign_receiving_dfi_identification",
                      "invalid_individual_id_number",
                      "item_and_rck_entry_presented_for_payment",
                      "item_related_to_rck_entry_is_ineligible",
                      "mandatory_field_error",
                      "misrouted_dishonored_return",
                      "misrouted_return",
                      "no_errors_found",
                      "non_acceptance_of_r62_dishonored_return",
                      "non_participant_in_iat_program",
                      "permissible_return_entry",
                      "permissible_return_entry_not_accepted",
                      "rdfi_non_settlement",
                      "rdfi_participant_in_check_truncation_program",
                      "representative_payee_deceased_or_unable_to_continue_in_that_capacity",
                      "return_not_a_duplicate",
                      "return_of_erroneous_or_reversing_debit",
                      "return_of_improper_credit_entry",
                      "return_of_improper_debit_entry",
                      "return_of_xck_entry",
                      "source_document_presented_for_payment",
                      "state_law_affecting_rck_acceptance",
                      "stop_payment_on_item_related_to_rck_entry",
                      "stop_payment_on_source_document",
                      "timely_original_return",
                      "trace_number_error",
                      "untimely_dishonored_return",
                      "untimely_return"
                    ],
                    "type": "string",
                    "x-enum-descriptions": [
                      "Code R01. Insufficient funds in the receiving account. Sometimes abbreviated to NSF.",
                      "Code R03. The account does not exist or the receiving bank was unable to locate it.",
                      "Code R02. The account is closed at the receiving bank.",
                      "Code R04. The account number is invalid at the receiving bank.",
                      "Code R16. The account at the receiving bank was frozen per the Office of Foreign Assets Control.",
                      "Code R23. The receiving bank account refused a credit transfer.",
                      "Code R05. The receiving bank rejected because of an incorrect Standard Entry Class code.",
                      "Code R29. The corporate customer at the receiving bank reversed the transfer.",
                      "Code R08. The receiving bank stopped payment on this transfer.",
                      "Code R20. The receiving bank account does not perform transfers.",
                      "Code R09. The receiving bank account does not have enough available balance for the transfer.",
                      "Code R28. The routing number is incorrect.",
                      "Code R10. The customer at the receiving bank reversed the transfer.",
                      "Code R19. The amount field is incorrect or too large.",
                      "Code R07. The customer at the receiving institution informed their bank that they have revoked authorization for a previously authorized transfer.",
                      "Code R13. The routing number is invalid.",
                      "Code R17. The receiving bank is unable to process a field in the transfer.",
                      "Code R45. The individual name field was invalid.",
                      "Code R06. The originating financial institution asked for this transfer to be returned. The receiving bank is complying with the request.",
                      "Code R34. The receiving bank's regulatory supervisor has limited their participation in the ACH network.",
                      "Code R85. The outbound international ACH transfer was incorrect.",
                      "Code R12. A rare return reason. The account was sold to another bank.",
                      "Code R25. The addenda record is incorrect or missing.",
                      "Code R15. A rare return reason. The account holder is deceased.",
                      "Code R11. A rare return reason. The customer authorized some payment to the sender, but this payment was not in error.",
                      "Code R74. A rare return reason. Sent in response to a return that was returned with code `field_error`. The latest return should include the corrected field(s).",
                      "Code R24. A rare return reason. The receiving bank received an exact duplicate entry with the same trace number and amount.",
                      "Code R67. A rare return reason. The return this message refers to was a duplicate.",
                      "Code R47. A rare return reason. Only used for US Government agency non-monetary automatic enrollment messages.",
                      "Code R43. A rare return reason. Only used for US Government agency non-monetary automatic enrollment messages.",
                      "Code R44. A rare return reason. Only used for US Government agency non-monetary automatic enrollment messages.",
                      "Code R46. A rare return reason. Only used for US Government agency non-monetary automatic enrollment messages.",
                      "Code R41. A rare return reason. Only used for US Government agency non-monetary automatic enrollment messages.",
                      "Code R40. A rare return reason. Only used for US Government agency non-monetary automatic enrollment messages.",
                      "Code R42. A rare return reason. Only used for US Government agency non-monetary automatic enrollment messages.",
                      "Code R84. A rare return reason. The International ACH Transfer cannot be processed by the gateway.",
                      "Code R69. A rare return reason. One or more of the fields in the ACH were malformed.",
                      "Code R83. A rare return reason. The Foreign receiving bank was unable to settle this ACH transfer.",
                      "Code R80. A rare return reason. The International ACH Transfer is malformed.",
                      "Code R18. A rare return reason. The ACH has an improper effective entry date field.",
                      "Code R39. A rare return reason. The source document related to this ACH, usually an ACH check conversion, was presented to the bank.",
                      "Code R21. A rare return reason. The Company ID field of the ACH was invalid.",
                      "Code R82. A rare return reason. The foreign receiving bank identifier for an International ACH Transfer was invalid.",
                      "Code R22. A rare return reason. The Individual ID number field of the ACH was invalid.",
                      "Code R53. A rare return reason. Both the Represented Check (\"RCK\") entry and the original check were presented to the bank.",
                      "Code R51. A rare return reason. The Represented Check (\"RCK\") entry is ineligible.",
                      "Code R26. A rare return reason. The ACH is missing a required field.",
                      "Code R71. A rare return reason. The receiving bank does not recognize the routing number in a dishonored return entry.",
                      "Code R61. A rare return reason. The receiving bank does not recognize the routing number in a return entry.",
                      "Code R76. A rare return reason. Sent in response to a return, the bank does not find the errors alleged by the returning bank.",
                      "Code R77. A rare return reason. The receiving bank does not accept the return of the erroneous debit. The funds are not available at the receiving bank.",
                      "Code R81. A rare return reason. The receiving bank does not accept International ACH Transfers.",
                      "Code R31. A rare return reason. A return that has been agreed to be accepted by the receiving bank, despite falling outside of the usual return timeframe.",
                      "Code R70. A rare return reason. The receiving bank had not approved this return.",
                      "Code R32. A rare return reason. The receiving bank could not settle this transaction.",
                      "Code R30. A rare return reason. The receiving bank does not accept Check Truncation ACH transfers.",
                      "Code R14. A rare return reason. The payee is deceased.",
                      "Code R75. A rare return reason. The originating bank disputes that an earlier `duplicate_entry` return was actually a duplicate.",
                      "Code R62. A rare return reason. The originating financial institution made a mistake and this return corrects it.",
                      "Code R36. A rare return reason. Return of a malformed credit entry.",
                      "Code R35. A rare return reason. Return of a malformed debit entry.",
                      "Code R33. A rare return reason. Return of a Destroyed Check (\"XKC\") entry.",
                      "Code R37. A rare return reason. The source document related to this ACH, usually an ACH check conversion, was presented to the bank.",
                      "Code R50. A rare return reason. State law prevents the bank from accepting the Represented Check (\"RCK\") entry.",
                      "Code R52. A rare return reason. A stop payment was issued on a Represented Check (\"RCK\") entry.",
                      "Code R38. A rare return reason. The source attached to the ACH, usually an ACH check conversion, includes a stop payment.",
                      "Code R73. A rare return reason. The bank receiving an `untimely_return` believes it was on time.",
                      "Code R27. A rare return reason. An ACH return's trace number does not match an originated ACH.",
                      "Code R72. A rare return reason. The dishonored return was sent too late.",
                      "Code R68. A rare return reason. The return was sent too late."
                    ]
                  },
                  "trace_number": {
                    "description": "A 15 digit number that was generated by the bank that initiated the return. The trace number of the return is different than that of the original transfer. ACH trace numbers are not unique, but along with the amount and date this number can be used to identify the ACH return at the bank that initiated it.",
                    "type": "string"
                  },
                  "transaction_id": {
                    "description": "The identifier of the Transaction associated with this return.",
                    "type": "string"
                  },
                  "transfer_id": {
                    "description": "The identifier of the ACH Transfer associated with this return.",
                    "type": "string"
                  }
                },
                "required": [
                  "created_at",
                  "trace_number",
                  "return_reason_code",
                  "raw_return_reason_code",
                  "transfer_id",
                  "transaction_id"
                ],
                "title": "ACH Transfer Return",
                "type": "object",
                "x-title-plural": "ACH Transfer Returns"
              },
              {
                "type": "null"
              }
            ]
          },
          "routing_number": {
            "description": "The American Bankers' Association (ABA) Routing Transit Number (RTN).",
            "type": "string"
          },
          "settlement": {
            "anyOf": [
              {
                "description": "A subhash containing information about when and how the transfer settled at the Federal Reserve.",
                "properties": {
                  "settled_at": {
                    "description": "When the funds for this transfer have settled at the destination bank at the Federal Reserve.",
                    "format": "date-time",
                    "type": "string"
                  }
                },
                "required": [
                  "settled_at"
                ],
                "title": "Settlement",
                "type": "object",
                "x-title-plural": "Settlements"
              },
              {
                "type": "null"
              }
            ]
          },
          "standard_entry_class_code": {
            "description": "The Standard Entry Class (SEC) code to use for the transfer.",
            "enum": [
              "corporate_credit_or_debit",
              "corporate_trade_exchange",
              "prearranged_payments_and_deposit",
              "internet_initiated"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "Corporate Credit and Debit (CCD).",
              "Corporate Trade Exchange (CTX).",
              "Prearranged Payments and Deposits (PPD).",
              "Internet Initiated (WEB)."
            ]
          },
          "statement_descriptor": {
            "description": "The descriptor that will show on the recipient's bank statement.",
            "type": "string"
          },
          "status": {
            "description": "The lifecycle status of the transfer.",
            "enum": [
              "pending_approval",
              "pending_transfer_session_confirmation",
              "canceled",
              "pending_submission",
              "pending_reviewing",
              "requires_attention",
              "rejected",
              "submitted",
              "returned"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The transfer is pending approval.",
              "The transfer belongs to a Transfer Session that is pending confirmation.",
              "The transfer has been canceled.",
              "The transfer is pending submission to the Federal Reserve.",
              "The transfer is pending review by Increase.",
              "The transfer requires attention from an Increase operator.",
              "The transfer has been rejected.",
              "The transfer is complete.",
              "The transfer has been returned."
            ]
          },
          "submission": {
            "anyOf": [
              {
                "description": "After the transfer is submitted to FedACH, this will contain supplemental details. Increase batches transfers and submits a file to the Federal Reserve roughly every 30 minutes. The Federal Reserve processes ACH transfers during weekdays according to their [posted schedule](https://www.frbservices.org/resources/resource-centers/same-day-ach/fedach-processing-schedule.html).",
                "example": {
                  "effective_date": "2020-01-31",
                  "expected_funds_settlement_at": "2020-02-03T13:30:00Z",
                  "expected_settlement_schedule": "future_dated",
                  "submitted_at": "2020-01-31T23:59:59Z",
                  "trace_number": "058349238292834"
                },
                "properties": {
                  "effective_date": {
                    "description": "The ACH transfer's effective date as sent to the Federal Reserve. If a specific date was configured using `preferred_effective_date`, this will match that value. Otherwise, it will be the date selected (following the specified settlement schedule) at the time the transfer was submitted.",
                    "format": "date",
                    "type": "string"
                  },
                  "expected_funds_settlement_at": {
                    "description": "When the transfer is expected to settle in the recipient's account. Credits may be available sooner, at the receiving banks discretion. The FedACH schedule is published [here](https://www.frbservices.org/resources/resource-centers/same-day-ach/fedach-processing-schedule.html).",
                    "format": "date-time",
                    "type": "string"
                  },
                  "expected_settlement_schedule": {
                    "description": "The settlement schedule the transfer is expected to follow. This expectation takes into account the `effective_date`, `submitted_at`, and the amount of the transfer.",
                    "enum": [
                      "same_day",
                      "future_dated"
                    ],
                    "type": "string",
                    "x-enum-descriptions": [
                      "The transfer is expected to settle same-day.",
                      "The transfer is expected to settle on a future date."
                    ]
                  },
                  "submitted_at": {
                    "description": "When the ACH transfer was sent to FedACH.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "trace_number": {
                    "description": "A 15 digit number recorded in the Nacha file and transmitted to the receiving bank. Along with the amount, date, and originating routing number, this can be used to identify the ACH transfer at the receiving bank. ACH trace numbers are not unique, but are [used to correlate returns](https://increase.com/documentation/ach-returns#ach-returns).",
                    "type": "string"
                  }
                },
                "required": [
                  "trace_number",
                  "submitted_at",
                  "expected_funds_settlement_at",
                  "effective_date",
                  "expected_settlement_schedule"
                ],
                "title": "ACH Transfer Submission",
                "type": "object",
                "x-title-plural": "ACH Transfer Submissions"
              },
              {
                "type": "null"
              }
            ]
          },
          "transaction_id": {
            "anyOf": [
              {
                "description": "The ID for the transaction funding the transfer.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `ach_transfer`.",
            "enum": [
              "ach_transfer"
            ],
            "type": "string"
          }
        },
        "required": [
          "account_id",
          "account_number",
          "addenda",
          "amount",
          "currency",
          "approval",
          "cancellation",
          "created_at",
          "destination_account_holder",
          "external_account_id",
          "id",
          "network",
          "notifications_of_change",
          "return",
          "routing_number",
          "statement_descriptor",
          "status",
          "submission",
          "acknowledgement",
          "settlement",
          "inbound_funds_hold",
          "transaction_id",
          "pending_transaction_id",
          "company_descriptive_date",
          "company_discretionary_data",
          "company_entry_description",
          "company_name",
          "funding",
          "individual_id",
          "individual_name",
          "preferred_effective_date",
          "standard_entry_class_code",
          "created_by",
          "idempotency_key",
          "type"
        ],
        "title": "ACH Transfer",
        "type": "object",
        "x-tag": "ACH Transfers",
        "x-title-plural": "ACH Transfers"
      },
      "ach_transfer_list": {
        "description": "A list of ACH Transfer objects.",
        "example": {
          "data": [
            {
              "account_id": "account_in71c4amph0vgo2qllky",
              "account_number": "987654321",
              "acknowledgement": {
                "acknowledged_at": "2020-01-31T23:59:59Z"
              },
              "addenda": null,
              "amount": 100,
              "approval": {
                "approved_at": "2020-01-31T23:59:59Z",
                "approved_by": null
              },
              "cancellation": null,
              "company_descriptive_date": null,
              "company_discretionary_data": null,
              "company_entry_description": null,
              "company_name": "National Phonograph Company",
              "created_at": "2020-01-31T23:59:59Z",
              "created_by": {
                "category": "user",
                "user": {
                  "email": "user@example.com"
                }
              },
              "currency": "USD",
              "destination_account_holder": "business",
              "effective_date": null,
              "external_account_id": "external_account_ukk55lr923a3ac0pp7iv",
              "funding": "checking",
              "id": "ach_transfer_uoxatyh3lt5evrsdvo7q",
              "idempotency_key": null,
              "inbound_funds_hold": null,
              "individual_id": null,
              "individual_name": "Ian Crease",
              "network": "ach",
              "notifications_of_change": [],
              "pending_transaction_id": null,
              "preferred_effective_date": {
                "date": null,
                "settlement_schedule": "same_day"
              },
              "return": null,
              "routing_number": "101050001",
              "settlement": null,
              "standard_entry_class_code": "corporate_credit_or_debit",
              "statement_descriptor": "Statement descriptor",
              "status": "returned",
              "submission": {
                "effective_date": "2020-01-31",
                "expected_funds_settlement_at": "2020-02-03T13:30:00Z",
                "expected_settlement_schedule": "future_dated",
                "submitted_at": "2020-01-31T23:59:59Z",
                "trace_number": "058349238292834"
              },
              "transaction_id": "transaction_uyrp7fld2ium70oa7oi",
              "type": "ach_transfer"
            }
          ],
          "next_cursor": "v57w5d"
        },
        "properties": {
          "data": {
            "description": "The contents of the list.",
            "items": {
              "$ref": "#/components/schemas/ach_transfer"
            },
            "type": "array"
          },
          "next_cursor": {
            "anyOf": [
              {
                "description": "A pointer to a place in the list.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "ACH Transfer List",
        "type": "object",
        "x-title-plural": "ACH Transfer Lists"
      },
      "action_a_real_time_decision_parameters": {
        "example": {
          "card_authorization": {
            "decision": "approve"
          }
        },
        "properties": {
          "card_authentication": {
            "description": "If the Real-Time Decision relates to a 3DS card authentication attempt, this object contains your response to the authentication.",
            "properties": {
              "decision": {
                "description": "Whether the card authentication attempt should be approved or declined.",
                "enum": [
                  "approve",
                  "challenge",
                  "deny"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "Approve the authentication attempt without triggering a challenge.",
                  "Request further validation before approving the authentication attempt.",
                  "Deny the authentication attempt."
                ]
              }
            },
            "required": [
              "decision"
            ],
            "type": "object"
          },
          "card_authentication_challenge": {
            "description": "If the Real-Time Decision relates to 3DS card authentication challenge delivery, this object contains your response.",
            "properties": {
              "result": {
                "description": "Whether the card authentication challenge was successfully delivered to the cardholder.",
                "enum": [
                  "success",
                  "failure"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "Your application successfully delivered the one-time code to the cardholder.",
                  "Your application was unable to deliver the one-time code to the cardholder."
                ]
              }
            },
            "required": [
              "result"
            ],
            "type": "object"
          },
          "card_authorization": {
            "description": "If the Real-Time Decision relates to a card authorization attempt, this object contains your response to the authorization.",
            "properties": {
              "decision": {
                "description": "Whether the card authorization should be approved or declined.",
                "enum": [
                  "approve",
                  "decline"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "Approve the authorization.",
                  "Decline the authorization."
                ]
              },
              "decline_reason": {
                "description": "The reason the card authorization was declined. This translates to a specific decline code that is sent to the card network.",
                "enum": [
                  "insufficient_funds",
                  "transaction_never_allowed",
                  "exceeds_approval_limit",
                  "card_temporarily_disabled",
                  "suspected_fraud",
                  "other"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "The cardholder does not have sufficient funds to cover the transaction. The merchant may attempt to process the transaction again.",
                  "This type of transaction is not allowed for this card. This transaction should not be retried.",
                  "The transaction amount exceeds the cardholder's approval limit. The merchant may attempt to process the transaction again.",
                  "The card has been temporarily disabled or not yet activated. The merchant may attempt to process the transaction again.",
                  "The transaction is suspected to be fraudulent. The merchant may attempt to process the transaction again.",
                  "The transaction was declined for another reason. The merchant may attempt to process the transaction again. This should be used sparingly."
                ]
              }
            },
            "required": [
              "decision"
            ],
            "type": "object"
          },
          "digital_wallet_authentication": {
            "description": "If the Real-Time Decision relates to a digital wallet authentication attempt, this object contains your response to the authentication.",
            "properties": {
              "result": {
                "description": "Whether your application was able to deliver the one-time passcode.",
                "enum": [
                  "success",
                  "failure"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "Your application successfully delivered the one-time passcode to the cardholder.",
                  "Your application failed to deliver the one-time passcode to the cardholder."
                ]
              },
              "success": {
                "description": "",
                "properties": {
                  "email": {
                    "description": "The email address that was used to verify the cardholder via one-time passcode.",
                    "maxLength": 200,
                    "minLength": 1,
                    "type": "string"
                  },
                  "phone": {
                    "description": "The phone number that was used to verify the cardholder via one-time passcode over SMS.",
                    "maxLength": 200,
                    "minLength": 1,
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "required": [
              "result"
            ],
            "type": "object"
          },
          "digital_wallet_token": {
            "description": "If the Real-Time Decision relates to a digital wallet token provisioning attempt, this object contains your response to the attempt.",
            "properties": {
              "approval": {
                "description": "If your application approves the provisioning attempt, this contains metadata about the digital wallet token that will be generated.",
                "properties": {
                  "email": {
                    "description": "An email address that can be used to verify the cardholder via one-time passcode.",
                    "maxLength": 200,
                    "minLength": 1,
                    "type": "string"
                  },
                  "phone": {
                    "description": "A phone number that can be used to verify the cardholder via one-time passcode over SMS.",
                    "maxLength": 200,
                    "minLength": 1,
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "decline": {
                "description": "If your application declines the provisioning attempt, this contains details about the decline.",
                "properties": {
                  "reason": {
                    "description": "Why the tokenization attempt was declined. This is for logging purposes only and is not displayed to the end-user.",
                    "maxLength": 200,
                    "minLength": 1,
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "archive_a_beneficial_owner_for_a_corporate_entity_parameters": {
        "example": {
          "beneficial_owner_id": "entity_setup_beneficial_owner_submission_vgkyk7dj5eb4sfhdbkx7"
        },
        "properties": {
          "beneficial_owner_id": {
            "description": "The identifying details of anyone controlling or owning 25% or more of the corporation.",
            "type": "string"
          }
        },
        "required": [
          "beneficial_owner_id"
        ],
        "type": "object"
      },
      "balance_lookup": {
        "description": "Represents a request to lookup the balance of an Account at a given point in time.",
        "example": {
          "account_id": "account_in71c4amph0vgo2qllky",
          "available_balance": 100,
          "current_balance": 100,
          "type": "balance_lookup"
        },
        "properties": {
          "account_id": {
            "description": "The identifier for the account for which the balance was queried.",
            "type": "string"
          },
          "available_balance": {
            "description": "The Account's available balance, representing the current balance less any open Pending Transactions on the Account.",
            "type": "integer"
          },
          "current_balance": {
            "description": "The Account's current balance, representing the sum of all posted Transactions on the Account.",
            "type": "integer"
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `balance_lookup`.",
            "enum": [
              "balance_lookup"
            ],
            "type": "string"
          }
        },
        "required": [
          "account_id",
          "current_balance",
          "available_balance",
          "type"
        ],
        "title": "Balance Lookup",
        "type": "object",
        "x-title-plural": "Balance Lookups"
      },
      "bookkeeping_account": {
        "description": "Accounts are T-accounts. They can store accounting entries. Your compliance setup might require annotating money movements using this API. Learn more in our [guide to Bookkeeping](https://increase.com/documentation/bookkeeping#bookkeeping).",
        "example": {
          "account_id": null,
          "compliance_category": "customer_balance",
          "entity_id": "entity_n8y8tnk2p9339ti393yi",
          "id": "bookkeeping_account_e37p1f1iuocw5intf35v",
          "idempotency_key": null,
          "name": "John Doe Balance",
          "type": "bookkeeping_account"
        },
        "properties": {
          "account_id": {
            "anyOf": [
              {
                "description": "The API Account associated with this bookkeeping account.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "compliance_category": {
            "anyOf": [
              {
                "description": "The compliance category of the account.",
                "enum": [
                  "commingled_cash",
                  "customer_balance"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "A cash in an commingled Increase Account.",
                  "A customer balance."
                ]
              },
              {
                "type": "null"
              }
            ]
          },
          "entity_id": {
            "anyOf": [
              {
                "description": "The Entity associated with this bookkeeping account.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "id": {
            "description": "The account identifier.",
            "type": "string"
          },
          "idempotency_key": {
            "anyOf": [
              {
                "description": "The idempotency key you chose for this object. This value is unique across Increase and is used to ensure that a request is only processed once. Learn more about [idempotency](https://increase.com/documentation/idempotency-keys).",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "name": {
            "description": "The name you choose for the account.",
            "type": "string"
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `bookkeeping_account`.",
            "enum": [
              "bookkeeping_account"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "compliance_category",
          "account_id",
          "entity_id",
          "name",
          "type",
          "idempotency_key"
        ],
        "title": "Bookkeeping Account",
        "type": "object",
        "x-tag": "Bookkeeping Accounts",
        "x-title-plural": "Bookkeeping Accounts"
      },
      "bookkeeping_account_list": {
        "description": "A list of Bookkeeping Account objects.",
        "example": {
          "data": [
            {
              "account_id": null,
              "compliance_category": "customer_balance",
              "entity_id": "entity_n8y8tnk2p9339ti393yi",
              "id": "bookkeeping_account_e37p1f1iuocw5intf35v",
              "idempotency_key": null,
              "name": "John Doe Balance",
              "type": "bookkeeping_account"
            }
          ],
          "next_cursor": "v57w5d"
        },
        "properties": {
          "data": {
            "description": "The contents of the list.",
            "items": {
              "$ref": "#/components/schemas/bookkeeping_account"
            },
            "type": "array"
          },
          "next_cursor": {
            "anyOf": [
              {
                "description": "A pointer to a place in the list.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "Bookkeeping Account List",
        "type": "object",
        "x-title-plural": "Bookkeeping Account Lists"
      },
      "bookkeeping_balance_lookup": {
        "description": "Represents a request to lookup the balance of an Bookkeeping Account at a given point in time.",
        "example": {
          "balance": 100,
          "bookkeeping_account_id": "bookkeeping_account_e37p1f1iuocw5intf35v",
          "type": "bookkeeping_balance_lookup"
        },
        "properties": {
          "balance": {
            "description": "The Bookkeeping Account's current balance, representing the sum of all Bookkeeping Entries on the Bookkeeping Account.",
            "type": "integer"
          },
          "bookkeeping_account_id": {
            "description": "The identifier for the account for which the balance was queried.",
            "type": "string"
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `bookkeeping_balance_lookup`.",
            "enum": [
              "bookkeeping_balance_lookup"
            ],
            "type": "string"
          }
        },
        "required": [
          "bookkeeping_account_id",
          "balance",
          "type"
        ],
        "title": "Bookkeeping Balance Lookup",
        "type": "object",
        "x-title-plural": "Bookkeeping Balance Lookups"
      },
      "bookkeeping_entry": {
        "description": "Entries are T-account entries recording debits and credits. Your compliance setup might require annotating money movements using this API. Learn more in our [guide to Bookkeeping](https://increase.com/documentation/bookkeeping#bookkeeping).",
        "example": {
          "account_id": "bookkeeping_account_e37p1f1iuocw5intf35v",
          "amount": 1750,
          "created_at": "2020-01-31T23:59:59Z",
          "entry_set_id": "bookkeeping_entry_set_n80c6wr2p8gtc6p4ingf",
          "id": "bookkeeping_entry_ctjpajsj3ks2blx10375",
          "type": "bookkeeping_entry"
        },
        "properties": {
          "account_id": {
            "description": "The identifier for the Account the Entry belongs to.",
            "type": "string"
          },
          "amount": {
            "description": "The Entry amount in the minor unit of its currency. For dollars, for example, this is cents.",
            "type": "integer"
          },
          "created_at": {
            "description": "When the entry set was created.",
            "format": "date-time",
            "type": "string"
          },
          "entry_set_id": {
            "description": "The identifier for the Account the Entry belongs to.",
            "type": "string"
          },
          "id": {
            "description": "The entry identifier.",
            "type": "string"
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `bookkeeping_entry`.",
            "enum": [
              "bookkeeping_entry"
            ],
            "type": "string"
          }
        },
        "required": [
          "account_id",
          "amount",
          "entry_set_id",
          "id",
          "created_at",
          "type"
        ],
        "title": "Bookkeeping Entry",
        "type": "object",
        "x-tag": "Bookkeeping Entries",
        "x-title-plural": "Bookkeeping Entries"
      },
      "bookkeeping_entry_list": {
        "description": "A list of Bookkeeping Entry objects.",
        "example": {
          "data": [
            {
              "account_id": "bookkeeping_account_e37p1f1iuocw5intf35v",
              "amount": 1750,
              "created_at": "2020-01-31T23:59:59Z",
              "entry_set_id": "bookkeeping_entry_set_n80c6wr2p8gtc6p4ingf",
              "id": "bookkeeping_entry_ctjpajsj3ks2blx10375",
              "type": "bookkeeping_entry"
            }
          ],
          "next_cursor": "v57w5d"
        },
        "properties": {
          "data": {
            "description": "The contents of the list.",
            "items": {
              "$ref": "#/components/schemas/bookkeeping_entry"
            },
            "type": "array"
          },
          "next_cursor": {
            "anyOf": [
              {
                "description": "A pointer to a place in the list.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "Bookkeeping Entry List",
        "type": "object",
        "x-title-plural": "Bookkeeping Entry Lists"
      },
      "bookkeeping_entry_set": {
        "description": "Entry Sets are accounting entries that are transactionally applied. Your compliance setup might require annotating money movements using this API. Learn more in our [guide to Bookkeeping](https://increase.com/documentation/bookkeeping#bookkeeping).",
        "example": {
          "created_at": "2023-02-11T02:11:59Z",
          "date": "2020-01-31T23:59:59Z",
          "entries": [
            {
              "account_id": "bookkeeping_account_e37p1f1iuocw5intf35v",
              "amount": 1750,
              "id": "bookkeeping_entry_ctjpajsj3ks2blx10375"
            },
            {
              "account_id": "bookkeeping_account_e37p1f1iuocw5intf35v",
              "amount": -1750,
              "id": "bookkeeping_entry_ctjpajsj3ks2blx10375"
            }
          ],
          "id": "bookkeeping_entry_set_n80c6wr2p8gtc6p4ingf",
          "idempotency_key": null,
          "transaction_id": null,
          "type": "bookkeeping_entry_set"
        },
        "properties": {
          "created_at": {
            "description": "When the entry set was created.",
            "format": "date-time",
            "type": "string"
          },
          "date": {
            "description": "The timestamp of the entry set.",
            "format": "date-time",
            "type": "string"
          },
          "entries": {
            "description": "The entries.",
            "items": {
              "properties": {
                "account_id": {
                  "description": "The bookkeeping account impacted by the entry.",
                  "type": "string"
                },
                "amount": {
                  "description": "The amount of the entry in minor units.",
                  "type": "integer"
                },
                "id": {
                  "description": "The entry identifier.",
                  "type": "string"
                }
              },
              "required": [
                "account_id",
                "amount",
                "id"
              ],
              "title": "Entries Element",
              "type": "object",
              "x-title-plural": "Entries Elements"
            },
            "type": "array"
          },
          "id": {
            "description": "The entry set identifier.",
            "type": "string"
          },
          "idempotency_key": {
            "anyOf": [
              {
                "description": "The idempotency key you chose for this object. This value is unique across Increase and is used to ensure that a request is only processed once. Learn more about [idempotency](https://increase.com/documentation/idempotency-keys).",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "transaction_id": {
            "anyOf": [
              {
                "description": "The transaction identifier, if any.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `bookkeeping_entry_set`.",
            "enum": [
              "bookkeeping_entry_set"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "transaction_id",
          "date",
          "entries",
          "created_at",
          "type",
          "idempotency_key"
        ],
        "title": "Bookkeeping Entry Set",
        "type": "object",
        "x-tag": "Bookkeeping Entry Sets",
        "x-title-plural": "Bookkeeping Entry Sets"
      },
      "bookkeeping_entry_set_list": {
        "description": "A list of Bookkeeping Entry Set objects.",
        "example": {
          "data": [
            {
              "created_at": "2023-02-11T02:11:59Z",
              "date": "2020-01-31T23:59:59Z",
              "entries": [
                {
                  "account_id": "bookkeeping_account_e37p1f1iuocw5intf35v",
                  "amount": 1750,
                  "id": "bookkeeping_entry_ctjpajsj3ks2blx10375"
                },
                {
                  "account_id": "bookkeeping_account_e37p1f1iuocw5intf35v",
                  "amount": -1750,
                  "id": "bookkeeping_entry_ctjpajsj3ks2blx10375"
                }
              ],
              "id": "bookkeeping_entry_set_n80c6wr2p8gtc6p4ingf",
              "idempotency_key": null,
              "transaction_id": null,
              "type": "bookkeeping_entry_set"
            }
          ],
          "next_cursor": "v57w5d"
        },
        "properties": {
          "data": {
            "description": "The contents of the list.",
            "items": {
              "$ref": "#/components/schemas/bookkeeping_entry_set"
            },
            "type": "array"
          },
          "next_cursor": {
            "anyOf": [
              {
                "description": "A pointer to a place in the list.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "Bookkeeping Entry Set List",
        "type": "object",
        "x-title-plural": "Bookkeeping Entry Set Lists"
      },
      "card": {
        "description": "Cards are commercial credit cards. They'll immediately work for online purchases after you create them. All cards maintain a credit limit of 100% of the Account\u2019s available balance at the time of transaction. Funds are deducted from the Account upon transaction settlement.",
        "example": {
          "account_id": "account_in71c4amph0vgo2qllky",
          "billing_address": {
            "city": "New York",
            "line1": "33 Liberty Street",
            "line2": null,
            "postal_code": "10045",
            "state": "NY"
          },
          "created_at": "2020-01-31T23:59:59Z",
          "description": "Office Expenses",
          "digital_wallet": {
            "digital_card_profile_id": "digital_card_profile_s3puplu90f04xhcwkiga",
            "email": "user@example.com",
            "phone": "+16505046304"
          },
          "entity_id": null,
          "expiration_month": 11,
          "expiration_year": 2028,
          "id": "card_oubs0hwk5rn6knuecxg2",
          "idempotency_key": null,
          "last4": "4242",
          "replacement": {
            "replaced_by_card_id": null,
            "replaced_card_id": null
          },
          "status": "active",
          "type": "card"
        },
        "properties": {
          "account_id": {
            "description": "The identifier for the account this card belongs to.",
            "type": "string"
          },
          "billing_address": {
            "description": "The Card's billing address.",
            "example": {
              "city": "New York",
              "line1": "33 Liberty Street",
              "line2": null,
              "postal_code": "10045",
              "state": "NY"
            },
            "properties": {
              "city": {
                "anyOf": [
                  {
                    "description": "The city of the billing address.",
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "line1": {
                "anyOf": [
                  {
                    "description": "The first line of the billing address.",
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "line2": {
                "anyOf": [
                  {
                    "description": "The second line of the billing address.",
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "postal_code": {
                "anyOf": [
                  {
                    "description": "The postal code of the billing address.",
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "state": {
                "anyOf": [
                  {
                    "description": "The US state of the billing address.",
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "required": [
              "line1",
              "line2",
              "city",
              "state",
              "postal_code"
            ],
            "title": "Billing Address",
            "type": "object",
            "x-title-plural": "Billing Addresses"
          },
          "created_at": {
            "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card was created.",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "anyOf": [
              {
                "description": "The card's description for display purposes.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "digital_wallet": {
            "anyOf": [
              {
                "description": "The contact information used in the two-factor steps for digital wallet card creation. At least one field must be present to complete the digital wallet steps.",
                "properties": {
                  "digital_card_profile_id": {
                    "anyOf": [
                      {
                        "description": "The digital card profile assigned to this digital card. Card profiles may also be assigned at the program level.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "email": {
                    "anyOf": [
                      {
                        "description": "An email address that can be used to verify the cardholder via one-time passcode over email.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "phone": {
                    "anyOf": [
                      {
                        "description": "A phone number that can be used to verify the cardholder via one-time passcode over SMS.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  }
                },
                "required": [
                  "email",
                  "phone",
                  "digital_card_profile_id"
                ],
                "title": "Digital Wallet",
                "type": "object",
                "x-title-plural": "Digital Wallets"
              },
              {
                "type": "null"
              }
            ]
          },
          "entity_id": {
            "anyOf": [
              {
                "description": "The identifier for the entity associated with this card.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "expiration_month": {
            "description": "The month the card expires in M format (e.g., August is 8).",
            "type": "integer"
          },
          "expiration_year": {
            "description": "The year the card expires in YYYY format (e.g., 2025).",
            "type": "integer"
          },
          "id": {
            "description": "The card identifier.",
            "type": "string"
          },
          "idempotency_key": {
            "anyOf": [
              {
                "description": "The idempotency key you chose for this object. This value is unique across Increase and is used to ensure that a request is only processed once. Learn more about [idempotency](https://increase.com/documentation/idempotency-keys).",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "last4": {
            "description": "The last 4 digits of the Card's Primary Account Number.",
            "type": "string"
          },
          "status": {
            "description": "This indicates if payments can be made with the card.",
            "enum": [
              "active",
              "disabled",
              "canceled"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The card is active.",
              "The card is temporarily disabled.",
              "The card is permanently canceled."
            ]
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `card`.",
            "enum": [
              "card"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "account_id",
          "entity_id",
          "created_at",
          "description",
          "last4",
          "expiration_month",
          "expiration_year",
          "status",
          "billing_address",
          "digital_wallet",
          "idempotency_key",
          "type"
        ],
        "title": "Card",
        "type": "object",
        "x-tag": "Cards",
        "x-title-plural": "Cards"
      },
      "card_authentication": {
        "description": "Card Authentications are attempts to authenticate a transaction or a card with 3DS.",
        "example": {
          "card_id": "card_oubs0hwk5rn6knuecxg2",
          "card_payment_id": "card_payment_nd3k2kacrqjli8482ave",
          "category": "payment_authentication",
          "challenge": {
            "attempts": [
              {
                "created_at": "2020-01-31T23:59:59Z",
                "outcome": "successful"
              }
            ],
            "created_at": "2020-01-31T23:59:59Z",
            "one_time_code": "123456",
            "verification_method": "text_message",
            "verification_value": "+16505046304"
          },
          "created_at": "2020-01-31T23:59:59Z",
          "deny_reason": null,
          "device_channel": "browser",
          "id": "card_authentication_xft30xjdubptlgrxboch",
          "merchant_acceptor_id": "5665270011000168",
          "merchant_category_code": "5734",
          "merchant_country": "US",
          "merchant_name": "AMAZON.COM",
          "purchase_amount": 1000,
          "purchase_currency": "USD",
          "real_time_decision_id": null,
          "status": "validating_challenge",
          "type": "card_authentication"
        },
        "properties": {
          "card_id": {
            "description": "The identifier of the Card.",
            "type": "string"
          },
          "card_payment_id": {
            "description": "The ID of the Card Payment this transaction belongs to.",
            "type": "string"
          },
          "category": {
            "anyOf": [
              {
                "description": "The category of the card authentication attempt.",
                "enum": [
                  "payment_authentication",
                  "non_payment_authentication"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "The authentication attempt is for a payment.",
                  "The authentication attempt is not for a payment."
                ]
              },
              {
                "type": "null"
              }
            ]
          },
          "challenge": {
            "anyOf": [
              {
                "description": "Details about the challenge, if one was requested.",
                "properties": {
                  "attempts": {
                    "description": "Details about the challenge verification attempts, if any happened.",
                    "items": {
                      "properties": {
                        "created_at": {
                          "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time of the Card Authentication Challenge Attempt.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "outcome": {
                          "description": "The outcome of the Card Authentication Challenge Attempt.",
                          "enum": [
                            "successful",
                            "failed"
                          ],
                          "type": "string",
                          "x-enum-descriptions": [
                            "The attempt was successful.",
                            "The attempt was unsuccessful."
                          ]
                        }
                      },
                      "required": [
                        "created_at",
                        "outcome"
                      ],
                      "title": "Attempts Element",
                      "type": "object",
                      "x-title-plural": "Attempts Elements"
                    },
                    "type": "array"
                  },
                  "created_at": {
                    "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Card Authentication Challenge was started.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "one_time_code": {
                    "description": "The one-time code used for the Card Authentication Challenge.",
                    "type": "string"
                  },
                  "verification_method": {
                    "description": "The method used to verify the Card Authentication Challenge.",
                    "enum": [
                      "text_message",
                      "email",
                      "none_available"
                    ],
                    "type": "string",
                    "x-enum-descriptions": [
                      "The one-time code was sent via text message.",
                      "The one-time code was sent via email.",
                      "The one-time code was not successfully delievered."
                    ]
                  },
                  "verification_value": {
                    "anyOf": [
                      {
                        "description": "E.g., the email address or phone number used for the Card Authentication Challenge.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  }
                },
                "required": [
                  "created_at",
                  "one_time_code",
                  "verification_method",
                  "verification_value",
                  "attempts"
                ],
                "title": "Challenge",
                "type": "object",
                "x-title-plural": "Challenges"
              },
              {
                "type": "null"
              }
            ]
          },
          "created_at": {
            "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Card Authentication was attempted.",
            "format": "date-time",
            "type": "string"
          },
          "deny_reason": {
            "anyOf": [
              {
                "description": "The reason why this authentication attempt was denied, if it was.",
                "enum": [
                  "group_locked",
                  "card_not_active",
                  "entity_not_active",
                  "transaction_not_allowed",
                  "webhook_denied",
                  "webhook_timed_out"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "The group was locked.",
                  "The card was not active.",
                  "The entity was not active.",
                  "The transaction was not allowed.",
                  "The webhook was denied.",
                  "The webhook timed out."
                ]
              },
              {
                "type": "null"
              }
            ]
          },
          "device_channel": {
            "anyOf": [
              {
                "description": "The device channel of the card authentication attempt.",
                "enum": [
                  "app",
                  "browser",
                  "three_ds_requestor_initiated"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "The authentication attempt was made from an app.",
                  "The authentication attempt was made from a browser.",
                  "The authentication attempt was initiated by the 3DS Requestor."
                ]
              },
              {
                "type": "null"
              }
            ]
          },
          "id": {
            "description": "The Card Authentication identifier.",
            "type": "string"
          },
          "merchant_acceptor_id": {
            "description": "The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.",
            "type": "string"
          },
          "merchant_category_code": {
            "description": "The Merchant Category Code (commonly abbreviated as MCC) of the merchant the card is transacting with.",
            "type": "string"
          },
          "merchant_country": {
            "description": "The country the merchant resides in.",
            "type": "string"
          },
          "merchant_name": {
            "description": "The name of the merchant.",
            "type": "string"
          },
          "purchase_amount": {
            "anyOf": [
              {
                "description": "The purchase amount in minor units.",
                "type": "integer"
              },
              {
                "type": "null"
              }
            ]
          },
          "purchase_currency": {
            "anyOf": [
              {
                "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the authentication attempt's purchase currency.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "real_time_decision_id": {
            "anyOf": [
              {
                "description": "The identifier of the Real-Time Decision sent to approve or decline this authentication attempt.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "status": {
            "description": "The status of the card authentication.",
            "enum": [
              "denied",
              "authenticated_with_challenge",
              "authenticated_without_challenge",
              "awaiting_challenge",
              "validating_challenge",
              "canceled",
              "timed_out_awaiting_challenge",
              "errored",
              "exceeded_attempt_threshold"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The authentication attempt was denied.",
              "The authentication attempt was authenticated with a challenge.",
              "The authentication attempt was authenticated without a challenge.",
              "The authentication attempt is awaiting a challenge.",
              "The authentication attempt is validating a challenge.",
              "The authentication attempt was canceled.",
              "The authentication attempt timed out while awaiting a challenge.",
              "The authentication attempt errored.",
              "The authentication attempt exceeded the attempt threshold."
            ]
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `card_authentication`.",
            "enum": [
              "card_authentication"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "card_payment_id",
          "card_id",
          "status",
          "deny_reason",
          "purchase_amount",
          "purchase_currency",
          "real_time_decision_id",
          "category",
          "device_channel",
          "merchant_category_code",
          "merchant_acceptor_id",
          "merchant_name",
          "merchant_country",
          "challenge",
          "type"
        ],
        "title": "Card Authentication",
        "type": "object",
        "x-title-plural": "Card Authentications"
      },
      "card_authorization": {
        "description": "Card Authorizations are temporary holds placed on a customers funds with the intent to later clear a transaction.",
        "example": {
          "actioner": "increase",
          "amount": 100,
          "card_payment_id": "card_payment_nd3k2kacrqjli8482ave",
          "currency": "USD",
          "digital_wallet_token_id": null,
          "direction": "settlement",
          "expires_at": "2020-01-31T23:59:59Z",
          "id": "card_authorization_6iqxap6ivd0fo5eu3i8x",
          "merchant_acceptor_id": "5665270011000168",
          "merchant_category_code": "5734",
          "merchant_city": "New York",
          "merchant_country": "US",
          "merchant_descriptor": "AMAZON.COM",
          "merchant_postal_code": "10045",
          "merchant_state": "NY",
          "network_details": {
            "category": "visa",
            "visa": {
              "electronic_commerce_indicator": "secure_electronic_commerce",
              "point_of_service_entry_mode": "manual",
              "stand_in_processing_reason": null
            }
          },
          "network_identifiers": {
            "retrieval_reference_number": "785867080153",
            "trace_number": "487941",
            "transaction_id": "627199945183184"
          },
          "network_risk_score": 10,
          "pending_transaction_id": null,
          "physical_card_id": null,
          "presentment_amount": 100,
          "presentment_currency": "USD",
          "processing_category": "purchase",
          "real_time_decision_id": null,
          "terminal_id": "RCN5VNXS",
          "type": "card_authorization",
          "verification": {
            "card_verification_code": {
              "result": "match"
            },
            "cardholder_address": {
              "actual_line1": "33 Liberty Street",
              "actual_postal_code": "94131",
              "provided_line1": "33 Liberty Street",
              "provided_postal_code": "94132",
              "result": "postal_code_no_match_address_match"
            }
          }
        },
        "properties": {
          "actioner": {
            "description": "Whether this authorization was approved by Increase, the card network through stand-in processing, or the user through a real-time decision.",
            "enum": [
              "user",
              "increase",
              "network"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "This object was actioned by the user through a real-time decision.",
              "This object was actioned by Increase without user intervention.",
              "This object was actioned by the network, through stand-in processing."
            ]
          },
          "amount": {
            "description": "The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
            "type": "integer"
          },
          "card_payment_id": {
            "description": "The ID of the Card Payment this transaction belongs to.",
            "type": "string"
          },
          "currency": {
            "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.",
            "enum": [
              "CAD",
              "CHF",
              "EUR",
              "GBP",
              "JPY",
              "USD"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "Canadian Dollar (CAD)",
              "Swiss Franc (CHF)",
              "Euro (EUR)",
              "British Pound (GBP)",
              "Japanese Yen (JPY)",
              "US Dollar (USD)"
            ]
          },
          "digital_wallet_token_id": {
            "anyOf": [
              {
                "description": "If the authorization was made via a Digital Wallet Token (such as an Apple Pay purchase), the identifier of the token that was used.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "direction": {
            "description": "The direction describes the direction the funds will move, either from the cardholder to the merchant or from the merchant to the cardholder.",
            "enum": [
              "settlement",
              "refund"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "A regular card authorization where funds are debited from the cardholder.",
              "A refund card authorization, sometimes referred to as a credit voucher authorization, where funds are credited to the cardholder."
            ]
          },
          "expires_at": {
            "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) when this authorization will expire and the pending transaction will be released.",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "The Card Authorization identifier.",
            "type": "string"
          },
          "merchant_acceptor_id": {
            "description": "The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.",
            "type": "string"
          },
          "merchant_category_code": {
            "description": "The Merchant Category Code (commonly abbreviated as MCC) of the merchant the card is transacting with.",
            "type": "string"
          },
          "merchant_city": {
            "anyOf": [
              {
                "description": "The city the merchant resides in.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "merchant_country": {
            "description": "The country the merchant resides in.",
            "type": "string"
          },
          "merchant_descriptor": {
            "description": "The merchant descriptor of the merchant the card is transacting with.",
            "type": "string"
          },
          "merchant_postal_code": {
            "anyOf": [
              {
                "description": "The merchant's postal code. For US merchants this is either a 5-digit or 9-digit ZIP code, where the first 5 and last 4 are separated by a dash.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "merchant_state": {
            "anyOf": [
              {
                "description": "The state the merchant resides in.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "network_details": {
            "description": "Fields specific to the `network`.",
            "properties": {
              "category": {
                "description": "The payment network used to process this card authorization.",
                "enum": [
                  "visa"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "Visa"
                ]
              },
              "visa": {
                "anyOf": [
                  {
                    "description": "Fields specific to the `visa` network.",
                    "properties": {
                      "electronic_commerce_indicator": {
                        "anyOf": [
                          {
                            "description": "For electronic commerce transactions, this identifies the level of security used in obtaining the customer's payment credential. For mail or telephone order transactions, identifies the type of mail or telephone order.",
                            "enum": [
                              "mail_phone_order",
                              "recurring",
                              "installment",
                              "unknown_mail_phone_order",
                              "secure_electronic_commerce",
                              "non_authenticated_security_transaction_at_3ds_capable_merchant",
                              "non_authenticated_security_transaction",
                              "non_secure_transaction"
                            ],
                            "type": "string",
                            "x-enum-descriptions": [
                              "Single transaction of a mail/phone order: Use to indicate that the transaction is a mail/phone order purchase, not a recurring transaction or installment payment. For domestic transactions in the US region, this value may also indicate one bill payment transaction in the card-present or card-absent environments.",
                              "Recurring transaction: Payment indicator used to indicate a recurring transaction that originates from an acquirer in the US region.",
                              "Installment payment: Payment indicator used to indicate one purchase of goods or services that is billed to the account in multiple charges over a period of time agreed upon by the cardholder and merchant from transactions that originate from an acquirer in the US region.",
                              "Unknown classification: other mail order: Use to indicate that the type of mail/telephone order is unknown.",
                              "Secure electronic commerce transaction: Use to indicate that the electronic commerce transaction has been authenticated using e.g., 3-D Secure",
                              "Non-authenticated security transaction at a 3-D Secure-capable merchant, and merchant attempted to authenticate the cardholder using 3-D Secure: Use to identify an electronic commerce transaction where the merchant attempted to authenticate the cardholder using 3-D Secure, but was unable to complete the authentication because the issuer or cardholder does not participate in the 3-D Secure program.",
                              "Non-authenticated security transaction: Use to identify an electronic commerce transaction that uses data encryption for security however , cardholder authentication is not performed using 3-D Secure.",
                              "Non-secure transaction: Use to identify an electronic commerce transaction that has no data protection."
                            ]
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "point_of_service_entry_mode": {
                        "anyOf": [
                          {
                            "description": "The method used to enter the cardholder's primary account number and card expiration date.",
                            "enum": [
                              "unknown",
                              "manual",
                              "magnetic_stripe_no_cvv",
                              "optical_code",
                              "integrated_circuit_card",
                              "contactless",
                              "credential_on_file",
                              "magnetic_stripe",
                              "contactless_magnetic_stripe",
                              "integrated_circuit_card_no_cvv"
                            ],
                            "type": "string",
                            "x-enum-descriptions": [
                              "Unknown",
                              "Manual key entry",
                              "Magnetic stripe read, without card verification value",
                              "Optical code",
                              "Contact chip card",
                              "Contactless read of chip card",
                              "Transaction initiated using a credential that has previously been stored on file",
                              "Magnetic stripe read",
                              "Contactless read of magnetic stripe data",
                              "Contact chip card, without card verification value"
                            ]
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "stand_in_processing_reason": {
                        "anyOf": [
                          {
                            "description": "Only present when `actioner: network`. Describes why a card authorization was approved or declined by Visa through stand-in processing.",
                            "enum": [
                              "issuer_error",
                              "invalid_physical_card",
                              "invalid_cardholder_authentication_verification_value",
                              "internal_visa_error",
                              "merchant_transaction_advisory_service_authentication_required",
                              "payment_fraud_disruption_acquirer_block",
                              "other"
                            ],
                            "type": "string",
                            "x-enum-descriptions": [
                              "Increase failed to process the authorization in a timely manner.",
                              "The physical card read had an invalid CVV, dCVV, or authorization request cryptogram.",
                              "The 3DS cardholder authentication verification value was invalid.",
                              "An internal Visa error occurred. Visa uses this reason code for certain expected occurrences as well, such as Application Transaction Counter (ATC) replays.",
                              "The merchant has enabled Visa's Transaction Advisory Service and requires further authentication to perform the transaction. In practice this is often utilized at fuel pumps to tell the cardholder to see the cashier.",
                              "The transaction was blocked by Visa's Payment Fraud Disruption service due to fraudulent Acquirer behavior, such as card testing.",
                              "An unspecific reason for stand-in processing."
                            ]
                          },
                          {
                            "type": "null"
                          }
                        ]
                      }
                    },
                    "required": [
                      "electronic_commerce_indicator",
                      "point_of_service_entry_mode",
                      "stand_in_processing_reason"
                    ],
                    "title": "Visa",
                    "type": "object",
                    "x-title-plural": "Visas"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "required": [
              "category",
              "visa"
            ],
            "type": "object",
            "x-title-plural": "s"
          },
          "network_identifiers": {
            "description": "Network-specific identifiers for a specific request or transaction.",
            "example": {
              "retrieval_reference_number": "785867080153",
              "trace_number": "487941",
              "transaction_id": "627199945183184"
            },
            "properties": {
              "retrieval_reference_number": {
                "anyOf": [
                  {
                    "description": "A life-cycle identifier used across e.g., an authorization and a reversal. Expected to be unique per acquirer within a window of time. For some card networks the retrieval reference number includes the trace counter.",
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "trace_number": {
                "anyOf": [
                  {
                    "description": "A counter used to verify an individual authorization. Expected to be unique per acquirer within a window of time.",
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "transaction_id": {
                "anyOf": [
                  {
                    "description": "A globally unique transaction identifier provided by the card network, used across multiple life-cycle requests.",
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "required": [
              "transaction_id",
              "trace_number",
              "retrieval_reference_number"
            ],
            "type": "object",
            "x-title-plural": "s"
          },
          "network_risk_score": {
            "anyOf": [
              {
                "description": "The risk score generated by the card network. For Visa this is the Visa Advanced Authorization risk score, from 0 to 99, where 99 is the riskiest.",
                "type": "integer"
              },
              {
                "type": "null"
              }
            ]
          },
          "pending_transaction_id": {
            "anyOf": [
              {
                "description": "The identifier of the Pending Transaction associated with this Transaction.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "physical_card_id": {
            "anyOf": [
              {
                "description": "If the authorization was made in-person with a physical card, the Physical Card that was used.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "presentment_amount": {
            "description": "The pending amount in the minor unit of the transaction's presentment currency.",
            "type": "integer"
          },
          "presentment_currency": {
            "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's presentment currency.",
            "type": "string"
          },
          "processing_category": {
            "description": "The processing category describes the intent behind the authorization, such as whether it was used for bill payments or an automatic fuel dispenser.",
            "enum": [
              "account_funding",
              "automatic_fuel_dispenser",
              "bill_payment",
              "purchase",
              "quasi_cash",
              "refund"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "Account funding transactions are transactions used to e.g., fund an account or transfer funds between accounts.",
              "Automatic fuel dispenser authorizations occur when a card is used at a gas pump, prior to the actual transaction amount being known. They are followed by an advice message that updates the amount of the pending transaction.",
              "A transaction used to pay a bill.",
              "A regular purchase.",
              "Quasi-cash transactions represent purchases of items which may be convertible to cash.",
              "A refund card authorization, sometimes referred to as a credit voucher authorization, where funds are credited to the cardholder."
            ]
          },
          "real_time_decision_id": {
            "anyOf": [
              {
                "description": "The identifier of the Real-Time Decision sent to approve or decline this transaction.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "terminal_id": {
            "anyOf": [
              {
                "description": "The terminal identifier (commonly abbreviated as TID) of the terminal the card is transacting with.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `card_authorization`.",
            "enum": [
              "card_authorization"
            ],
            "type": "string"
          },
          "verification": {
            "description": "Fields related to verification of cardholder-provided values.",
            "properties": {
              "card_verification_code": {
                "description": "Fields related to verification of the Card Verification Code, a 3-digit code on the back of the card.",
                "properties": {
                  "result": {
                    "description": "The result of verifying the Card Verification Code.",
                    "enum": [
                      "not_checked",
                      "match",
                      "no_match"
                    ],
                    "type": "string",
                    "x-enum-descriptions": [
                      "No card verification code was provided in the authorization request.",
                      "The card verification code matched the one on file.",
                      "The card verification code did not match the one on file."
                    ]
                  }
                },
                "required": [
                  "result"
                ],
                "title": "Card Verification Code",
                "type": "object",
                "x-title-plural": "Card Verification Codes"
              },
              "cardholder_address": {
                "description": "Cardholder address provided in the authorization request and the address on file we verified it against.",
                "properties": {
                  "actual_line1": {
                    "anyOf": [
                      {
                        "description": "Line 1 of the address on file for the cardholder.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "actual_postal_code": {
                    "anyOf": [
                      {
                        "description": "The postal code of the address on file for the cardholder.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "provided_line1": {
                    "anyOf": [
                      {
                        "description": "The cardholder address line 1 provided for verification in the authorization request.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "provided_postal_code": {
                    "anyOf": [
                      {
                        "description": "The postal code provided for verification in the authorization request.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "result": {
                    "description": "The address verification result returned to the card network.",
                    "enum": [
                      "not_checked",
                      "postal_code_match_address_not_checked",
                      "postal_code_match_address_no_match",
                      "postal_code_no_match_address_match",
                      "match",
                      "no_match"
                    ],
                    "type": "string",
                    "x-enum-descriptions": [
                      "No adress was provided in the authorization request.",
                      "Postal code matches, but the street address was not verified.",
                      "Postal code matches, but the street address does not match.",
                      "Postal code does not match, but the street address matches.",
                      "Postal code and street address match.",
                      "Postal code and street address do not match."
                    ]
                  }
                },
                "required": [
                  "provided_postal_code",
                  "provided_line1",
                  "actual_postal_code",
                  "actual_line1",
                  "result"
                ],
                "title": "Cardholder Address",
                "type": "object",
                "x-title-plural": "Cardholder Addresses"
              }
            },
            "required": [
              "cardholder_address",
              "card_verification_code"
            ],
            "type": "object",
            "x-title-plural": "s"
          }
        },
        "required": [
          "id",
          "card_payment_id",
          "merchant_acceptor_id",
          "merchant_descriptor",
          "merchant_category_code",
          "terminal_id",
          "merchant_city",
          "merchant_state",
          "merchant_postal_code",
          "merchant_country",
          "digital_wallet_token_id",
          "physical_card_id",
          "verification",
          "network_identifiers",
          "network_risk_score",
          "network_details",
          "amount",
          "presentment_amount",
          "presentment_currency",
          "currency",
          "direction",
          "actioner",
          "processing_category",
          "expires_at",
          "real_time_decision_id",
          "pending_transaction_id",
          "type"
        ],
        "title": "Card Authorization",
        "type": "object",
        "x-title-plural": "Card Authorizations"
      },
      "card_authorization_expiration": {
        "description": "Card Authorization Expirations are cancellations of authorizations that were never settled by the acquirer.",
        "example": {
          "card_authorization_id": "card_authorization_6iqxap6ivd0fo5eu3i8x",
          "currency": "USD",
          "expired_amount": 20,
          "id": "card_authorization_expiration_9xxbjtmixs8sfluzux2e",
          "network": "visa",
          "type": "card_authorization_expiration"
        },
        "properties": {
          "card_authorization_id": {
            "description": "The identifier for the Card Authorization this reverses.",
            "type": "string"
          },
          "currency": {
            "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the reversal's currency.",
            "enum": [
              "CAD",
              "CHF",
              "EUR",
              "GBP",
              "JPY",
              "USD"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "Canadian Dollar (CAD)",
              "Swiss Franc (CHF)",
              "Euro (EUR)",
              "British Pound (GBP)",
              "Japanese Yen (JPY)",
              "US Dollar (USD)"
            ]
          },
          "expired_amount": {
            "description": "The amount of this authorization expiration in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
            "type": "integer"
          },
          "id": {
            "description": "The Card Authorization Expiration identifier.",
            "type": "string"
          },
          "network": {
            "description": "The card network used to process this card authorization.",
            "enum": [
              "visa"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "Visa"
            ]
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `card_authorization_expiration`.",
            "enum": [
              "card_authorization_expiration"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "expired_amount",
          "currency",
          "card_authorization_id",
          "network",
          "type"
        ],
        "title": "Card Authorization Expiration",
        "type": "object",
        "x-title-plural": "Card Authorization Expirations"
      },
      "card_details": {
        "description": "An object containing the sensitive details (card number, cvc, etc) for a Card.",
        "example": {
          "card_id": "card_oubs0hwk5rn6knuecxg2",
          "expiration_month": 7,
          "expiration_year": 2025,
          "primary_account_number": "4242424242424242",
          "type": "card_details",
          "verification_code": "123"
        },
        "properties": {
          "card_id": {
            "description": "The identifier for the Card for which sensitive details have been returned.",
            "type": "string"
          },
          "expiration_month": {
            "description": "The month the card expires in M format (e.g., August is 8).",
            "type": "integer"
          },
          "expiration_year": {
            "description": "The year the card expires in YYYY format (e.g., 2025).",
            "type": "integer"
          },
          "primary_account_number": {
            "description": "The card number.",
            "type": "string"
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `card_details`.",
            "enum": [
              "card_details"
            ],
            "type": "string"
          },
          "verification_code": {
            "description": "The three-digit verification code for the card. It's also known as the Card Verification Code (CVC), the Card Verification Value (CVV), or the Card Identification (CID).",
            "type": "string"
          }
        },
        "required": [
          "card_id",
          "primary_account_number",
          "expiration_month",
          "expiration_year",
          "verification_code",
          "type"
        ],
        "title": "Card Details",
        "type": "object",
        "x-title-plural": "Card Details"
      },
      "card_dispute": {
        "description": "If unauthorized activity occurs on a card, you can create a Card Dispute and we'll return the funds if appropriate.",
        "example": {
          "acceptance": null,
          "amount": null,
          "created_at": "2020-01-31T23:59:59Z",
          "disputed_transaction_id": "transaction_uyrp7fld2ium70oa7oi",
          "explanation": "Unauthorized recurring purchase",
          "id": "card_dispute_h9sc95nbl1cgltpp7men",
          "idempotency_key": null,
          "loss": null,
          "rejection": null,
          "status": "pending_reviewing",
          "type": "card_dispute",
          "win": null
        },
        "properties": {
          "acceptance": {
            "anyOf": [
              {
                "description": "If the Card Dispute's status is `accepted`, this will contain details of the successful dispute.",
                "example": {
                  "accepted_at": "2020-01-31T23:59:59Z",
                  "card_dispute_id": "card_dispute_h9sc95nbl1cgltpp7men",
                  "transaction_id": "transaction_uyrp7fld2ium70oa7oi"
                },
                "properties": {
                  "accepted_at": {
                    "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was accepted.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "card_dispute_id": {
                    "description": "The identifier of the Card Dispute that was accepted.",
                    "type": "string"
                  },
                  "transaction_id": {
                    "description": "The identifier of the Transaction that was created to return the disputed funds to your account.",
                    "type": "string"
                  }
                },
                "required": [
                  "accepted_at",
                  "card_dispute_id",
                  "transaction_id"
                ],
                "title": "Card Dispute Acceptance",
                "type": "object",
                "x-title-plural": "Card Dispute Acceptances"
              },
              {
                "type": "null"
              }
            ]
          },
          "amount": {
            "anyOf": [
              {
                "description": "The amount of the dispute, if provided, or the transaction amount otherwise.",
                "type": "integer"
              },
              {
                "type": "null"
              }
            ]
          },
          "created_at": {
            "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was created.",
            "format": "date-time",
            "type": "string"
          },
          "disputed_transaction_id": {
            "description": "The identifier of the Transaction that was disputed.",
            "type": "string"
          },
          "explanation": {
            "description": "Why you disputed the Transaction in question.",
            "type": "string"
          },
          "id": {
            "description": "The Card Dispute identifier.",
            "type": "string"
          },
          "idempotency_key": {
            "anyOf": [
              {
                "description": "The idempotency key you chose for this object. This value is unique across Increase and is used to ensure that a request is only processed once. Learn more about [idempotency](https://increase.com/documentation/idempotency-keys).",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "loss": {
            "anyOf": [
              {
                "description": "If the Card Dispute's status is `lost`, this will contain details of the lost dispute.",
                "example": {
                  "card_dispute_id": "card_dispute_h9sc95nbl1cgltpp7men",
                  "explanation": "The card dispute was lost.",
                  "lost_at": "2020-01-31T23:59:59Z",
                  "transaction_id": "transaction_uyrp7fld2ium70oa7oi"
                },
                "properties": {
                  "card_dispute_id": {
                    "description": "The identifier of the Card Dispute that was lost.",
                    "type": "string"
                  },
                  "explanation": {
                    "description": "Why the Card Dispute was lost.",
                    "type": "string"
                  },
                  "lost_at": {
                    "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was lost.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "transaction_id": {
                    "description": "The identifier of the Transaction that was created to debit the disputed funds from your account.",
                    "type": "string"
                  }
                },
                "required": [
                  "lost_at",
                  "card_dispute_id",
                  "transaction_id",
                  "explanation"
                ],
                "title": "Card Dispute Loss",
                "type": "object",
                "x-title-plural": "Card Dispute Losses"
              },
              {
                "type": "null"
              }
            ]
          },
          "rejection": {
            "anyOf": [
              {
                "description": "If the Card Dispute's status is `rejected`, this will contain details of the unsuccessful dispute.",
                "example": {
                  "card_dispute_id": "card_dispute_h9sc95nbl1cgltpp7men",
                  "explanation": "Acquirer provided evidence that the transaction was authorized.",
                  "rejected_at": "2020-01-31T23:59:59Z"
                },
                "properties": {
                  "card_dispute_id": {
                    "description": "The identifier of the Card Dispute that was rejected.",
                    "type": "string"
                  },
                  "explanation": {
                    "description": "Why the Card Dispute was rejected.",
                    "type": "string"
                  },
                  "rejected_at": {
                    "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was rejected.",
                    "format": "date-time",
                    "type": "string"
                  }
                },
                "required": [
                  "explanation",
                  "rejected_at",
                  "card_dispute_id"
                ],
                "title": "Card Dispute Rejection",
                "type": "object",
                "x-title-plural": "Card Dispute Rejections"
              },
              {
                "type": "null"
              }
            ]
          },
          "status": {
            "description": "The results of the Dispute investigation.",
            "enum": [
              "pending_reviewing",
              "pending_user_information",
              "accepted",
              "rejected",
              "lost",
              "won"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The Card Dispute is pending review.",
              "Increase has requested more information related to the Card Dispute from you.",
              "The Card Dispute has been accepted and your funds have been returned. The card dispute will eventually transition into `won` or `lost` depending on the outcome.",
              "The Card Dispute has been rejected.",
              "The Card Dispute has been lost and funds previously credited from the acceptance have been debited.",
              "The Card Dispute has been won and no further action can be taken."
            ]
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `card_dispute`.",
            "enum": [
              "card_dispute"
            ],
            "type": "string"
          },
          "win": {
            "anyOf": [
              {
                "description": "If the Card Dispute's status is `won`, this will contain details of the won dispute.",
                "example": {
                  "card_dispute_id": "card_dispute_h9sc95nbl1cgltpp7men",
                  "won_at": "2020-01-31T23:59:59Z"
                },
                "properties": {
                  "card_dispute_id": {
                    "description": "The identifier of the Card Dispute that was won.",
                    "type": "string"
                  },
                  "won_at": {
                    "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was won.",
                    "format": "date-time",
                    "type": "string"
                  }
                },
                "required": [
                  "won_at",
                  "card_dispute_id"
                ],
                "title": "Card Dispute Win",
                "type": "object",
                "x-title-plural": "Card Dispute Wins"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "id",
          "explanation",
          "amount",
          "status",
          "created_at",
          "disputed_transaction_id",
          "acceptance",
          "rejection",
          "loss",
          "win",
          "type",
          "idempotency_key"
        ],
        "title": "Card Dispute",
        "type": "object",
        "x-tag": "Card Disputes",
        "x-title-plural": "Card Disputes"
      },
      "card_dispute_list": {
        "description": "A list of Card Dispute objects.",
        "example": {
          "data": [
            {
              "acceptance": null,
              "amount": null,
              "created_at": "2020-01-31T23:59:59Z",
              "disputed_transaction_id": "transaction_uyrp7fld2ium70oa7oi",
              "explanation": "Unauthorized recurring purchase",
              "id": "card_dispute_h9sc95nbl1cgltpp7men",
              "idempotency_key": null,
              "loss": null,
              "rejection": null,
              "status": "pending_reviewing",
              "type": "card_dispute",
              "win": null
            }
          ],
          "next_cursor": "v57w5d"
        },
        "properties": {
          "data": {
            "description": "The contents of the list.",
            "items": {
              "$ref": "#/components/schemas/card_dispute"
            },
            "type": "array"
          },
          "next_cursor": {
            "anyOf": [
              {
                "description": "A pointer to a place in the list.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "Card Dispute List",
        "type": "object",
        "x-title-plural": "Card Dispute Lists"
      },
      "card_fuel_confirmation": {
        "description": "Card Fuel Confirmations update the amount of a Card Authorization after a fuel pump transaction is completed.",
        "example": {
          "card_authorization_id": "card_authorization_6iqxap6ivd0fo5eu3i8x",
          "currency": "USD",
          "id": "card_fuel_confirmation_wuy91qate4judq2la80a",
          "network": "visa",
          "network_identifiers": {
            "retrieval_reference_number": "785867080153",
            "trace_number": "487941",
            "transaction_id": "627199945183184"
          },
          "pending_transaction_id": "pending_transaction_k1sfetcau2qbvjbzgju4",
          "type": "card_fuel_confirmation",
          "updated_authorization_amount": 120
        },
        "properties": {
          "card_authorization_id": {
            "description": "The identifier for the Card Authorization this updates.",
            "type": "string"
          },
          "currency": {
            "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the increment's currency.",
            "enum": [
              "CAD",
              "CHF",
              "EUR",
              "GBP",
              "JPY",
              "USD"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "Canadian Dollar (CAD)",
              "Swiss Franc (CHF)",
              "Euro (EUR)",
              "British Pound (GBP)",
              "Japanese Yen (JPY)",
              "US Dollar (USD)"
            ]
          },
          "id": {
            "description": "The Card Fuel Confirmation identifier.",
            "type": "string"
          },
          "network": {
            "description": "The card network used to process this card authorization.",
            "enum": [
              "visa"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "Visa"
            ]
          },
          "network_identifiers": {
            "description": "Network-specific identifiers for a specific request or transaction.",
            "example": {
              "retrieval_reference_number": "785867080153",
              "trace_number": "487941",
              "transaction_id": "627199945183184"
            },
            "properties": {
              "retrieval_reference_number": {
                "anyOf": [
                  {
                    "description": "A life-cycle identifier used across e.g., an authorization and a reversal. Expected to be unique per acquirer within a window of time. For some card networks the retrieval reference number includes the trace counter.",
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "trace_number": {
                "anyOf": [
                  {
                    "description": "A counter used to verify an individual authorization. Expected to be unique per acquirer within a window of time.",
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "transaction_id": {
                "anyOf": [
                  {
                    "description": "A globally unique transaction identifier provided by the card network, used across multiple life-cycle requests.",
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "required": [
              "transaction_id",
              "trace_number",
              "retrieval_reference_number"
            ],
            "type": "object",
            "x-title-plural": "s"
          },
          "pending_transaction_id": {
            "anyOf": [
              {
                "description": "The identifier of the Pending Transaction associated with this Card Fuel Confirmation.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `card_fuel_confirmation`.",
            "enum": [
              "card_fuel_confirmation"
            ],
            "type": "string"
          },
          "updated_authorization_amount": {
            "description": "The updated authorization amount after this fuel confirmation, in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
            "type": "integer"
          }
        },
        "required": [
          "id",
          "updated_authorization_amount",
          "currency",
          "card_authorization_id",
          "network",
          "pending_transaction_id",
          "network_identifiers",
          "type"
        ],
        "title": "Card Fuel Confirmation",
        "type": "object",
        "x-title-plural": "Card Fuel Confirmations"
      },
      "card_increment": {
        "description": "Card Increments increase the pending amount of an authorized transaction.",
        "example": {
          "actioner": "increase",
          "amount": 20,
          "card_authorization_id": "card_authorization_6iqxap6ivd0fo5eu3i8x",
          "currency": "USD",
          "id": "card_increment_6ztayc58j1od0rpebp3e",
          "network": "visa",
          "network_identifiers": {
            "retrieval_reference_number": "785867080153",
            "trace_number": "487941",
            "transaction_id": "627199945183184"
          },
          "network_risk_score": 10,
          "pending_transaction_id": "pending_transaction_k1sfetcau2qbvjbzgju4",
          "real_time_decision_id": null,
          "type": "card_increment",
          "updated_authorization_amount": 120
        },
        "properties": {
          "actioner": {
            "description": "Whether this authorization was approved by Increase, the card network through stand-in processing, or the user through a real-time decision.",
            "enum": [
              "user",
              "increase",
              "network"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "This object was actioned by the user through a real-time decision.",
              "This object was actioned by Increase without user intervention.",
              "This object was actioned by the network, through stand-in processing."
            ]
          },
          "amount": {
            "description": "The amount of this increment in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
            "type": "integer"
          },
          "card_authorization_id": {
            "description": "The identifier for the Card Authorization this increments.",
            "type": "string"
          },
          "currency": {
            "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the increment's currency.",
            "enum": [
              "CAD",
              "CHF",
              "EUR",
              "GBP",
              "JPY",
              "USD"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "Canadian Dollar (CAD)",
              "Swiss Franc (CHF)",
              "Euro (EUR)",
              "British Pound (GBP)",
              "Japanese Yen (JPY)",
              "US Dollar (USD)"
            ]
          },
          "id": {
            "description": "The Card Increment identifier.",
            "type": "string"
          },
          "network": {
            "description": "The card network used to process this card authorization.",
            "enum": [
              "visa"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "Visa"
            ]
          },
          "network_identifiers": {
            "description": "Network-specific identifiers for a specific request or transaction.",
            "example": {
              "retrieval_reference_number": "785867080153",
              "trace_number": "487941",
              "transaction_id": "627199945183184"
            },
            "properties": {
              "retrieval_reference_number": {
                "anyOf": [
                  {
                    "description": "A life-cycle identifier used across e.g., an authorization and a reversal. Expected to be unique per acquirer within a window of time. For some card networks the retrieval reference number includes the trace counter.",
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "trace_number": {
                "anyOf": [
                  {
                    "description": "A counter used to verify an individual authorization. Expected to be unique per acquirer within a window of time.",
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "transaction_id": {
                "anyOf": [
                  {
                    "description": "A globally unique transaction identifier provided by the card network, used across multiple life-cycle requests.",
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "required": [
              "transaction_id",
              "trace_number",
              "retrieval_reference_number"
            ],
            "type": "object",
            "x-title-plural": "s"
          },
          "network_risk_score": {
            "anyOf": [
              {
                "description": "The risk score generated by the card network. For Visa this is the Visa Advanced Authorization risk score, from 0 to 99, where 99 is the riskiest.",
                "type": "integer"
              },
              {
                "type": "null"
              }
            ]
          },
          "pending_transaction_id": {
            "anyOf": [
              {
                "description": "The identifier of the Pending Transaction associated with this Card Increment.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "real_time_decision_id": {
            "anyOf": [
              {
                "description": "The identifier of the Real-Time Decision sent to approve or decline this incremental authorization.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `card_increment`.",
            "enum": [
              "card_increment"
            ],
            "type": "string"
          },
          "updated_authorization_amount": {
            "description": "The updated authorization amount after this increment, in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
            "type": "integer"
          }
        },
        "required": [
          "id",
          "amount",
          "updated_authorization_amount",
          "currency",
          "card_authorization_id",
          "network",
          "actioner",
          "real_time_decision_id",
          "pending_transaction_id",
          "network_risk_score",
          "network_identifiers",
          "type"
        ],
        "title": "Card Increment",
        "type": "object",
        "x-title-plural": "Card Increments"
      },
      "card_list": {
        "description": "A list of Card objects.",
        "example": {
          "data": [
            {
              "account_id": "account_in71c4amph0vgo2qllky",
              "billing_address": {
                "city": "New York",
                "line1": "33 Liberty Street",
                "line2": null,
                "postal_code": "10045",
                "state": "NY"
              },
              "created_at": "2020-01-31T23:59:59Z",
              "description": "Office Expenses",
              "digital_wallet": {
                "digital_card_profile_id": "digital_card_profile_s3puplu90f04xhcwkiga",
                "email": "user@example.com",
                "phone": "+16505046304"
              },
              "entity_id": null,
              "expiration_month": 11,
              "expiration_year": 2028,
              "id": "card_oubs0hwk5rn6knuecxg2",
              "idempotency_key": null,
              "last4": "4242",
              "replacement": {
                "replaced_by_card_id": null,
                "replaced_card_id": null
              },
              "status": "active",
              "type": "card"
            }
          ],
          "next_cursor": "v57w5d"
        },
        "properties": {
          "data": {
            "description": "The contents of the list.",
            "items": {
              "$ref": "#/components/schemas/card"
            },
            "type": "array"
          },
          "next_cursor": {
            "anyOf": [
              {
                "description": "A pointer to a place in the list.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "Card List",
        "type": "object",
        "x-title-plural": "Card Lists"
      },
      "card_payment": {
        "description": "Card Payments group together interactions related to a single card payment, such as an authorization and its corresponding settlement.",
        "example": {
          "account_id": "account_in71c4amph0vgo2qllky",
          "card_id": "card_oubs0hwk5rn6knuecxg2",
          "created_at": "2020-01-31T23:59:59Z",
          "digital_wallet_token_id": null,
          "elements": [
            {
              "card_authorization": {
                "actioner": "increase",
                "amount": 100,
                "card_payment_id": "card_payment_nd3k2kacrqjli8482ave",
                "currency": "USD",
                "digital_wallet_token_id": null,
                "direction": "settlement",
                "expires_at": "2020-01-31T23:59:59Z",
                "id": "card_authorization_6iqxap6ivd0fo5eu3i8x",
                "merchant_acceptor_id": "5665270011000168",
                "merchant_category_code": "5734",
                "merchant_city": "New York",
                "merchant_country": "US",
                "merchant_descriptor": "AMAZON.COM",
                "merchant_postal_code": "10045",
                "merchant_state": "NY",
                "network_details": {
                  "category": "visa",
                  "visa": {
                    "electronic_commerce_indicator": "secure_electronic_commerce",
                    "point_of_service_entry_mode": "manual",
                    "stand_in_processing_reason": null
                  }
                },
                "network_identifiers": {
                  "retrieval_reference_number": "785867080153",
                  "trace_number": "487941",
                  "transaction_id": "627199945183184"
                },
                "network_risk_score": 10,
                "pending_transaction_id": null,
                "physical_card_id": null,
                "presentment_amount": 100,
                "presentment_currency": "USD",
                "processing_category": "purchase",
                "real_time_decision_id": null,
                "terminal_id": "RCN5VNXS",
                "type": "card_authorization",
                "verification": {
                  "card_verification_code": {
                    "result": "match"
                  },
                  "cardholder_address": {
                    "actual_line1": "33 Liberty Street",
                    "actual_postal_code": "94131",
                    "provided_line1": "33 Liberty Street",
                    "provided_postal_code": "94132",
                    "result": "postal_code_no_match_address_match"
                  }
                }
              },
              "category": "card_authorization",
              "created_at": "2020-01-31T23:59:59Z"
            },
            {
              "card_reversal": {
                "card_authorization_id": "card_authorization_6iqxap6ivd0fo5eu3i8x",
                "currency": "USD",
                "id": "card_reversal_8vr9qy60cgf5d0slpb68",
                "merchant_acceptor_id": "5665270011000168",
                "merchant_category_code": "5734",
                "merchant_city": "New York",
                "merchant_country": "US",
                "merchant_descriptor": "AMAZON.COM",
                "merchant_postal_code": "10045",
                "merchant_state": "NY",
                "network": "visa",
                "network_identifiers": {
                  "retrieval_reference_number": "785867080153",
                  "trace_number": "487941",
                  "transaction_id": "627199945183184"
                },
                "pending_transaction_id": "pending_transaction_k1sfetcau2qbvjbzgju4",
                "reversal_amount": 20,
                "reversal_reason": "reversed_by_customer",
                "terminal_id": "RCN5VNXS",
                "type": "card_reversal",
                "updated_authorization_amount": 80
              },
              "category": "card_reversal",
              "created_at": "2020-01-31T23:59:59Z"
            },
            {
              "card_increment": {
                "actioner": "increase",
                "amount": 20,
                "card_authorization_id": "card_authorization_6iqxap6ivd0fo5eu3i8x",
                "currency": "USD",
                "id": "card_increment_6ztayc58j1od0rpebp3e",
                "network": "visa",
                "network_identifiers": {
                  "retrieval_reference_number": "785867080153",
                  "trace_number": "487941",
                  "transaction_id": "627199945183184"
                },
                "network_risk_score": 10,
                "pending_transaction_id": "pending_transaction_k1sfetcau2qbvjbzgju4",
                "real_time_decision_id": null,
                "type": "card_increment",
                "updated_authorization_amount": 120
              },
              "category": "card_increment",
              "created_at": "2020-01-31T23:59:59Z"
            },
            {
              "card_settlement": {
                "amount": 100,
                "card_authorization": null,
                "card_payment_id": "card_payment_nd3k2kacrqjli8482ave",
                "cashback": null,
                "currency": "USD",
                "id": "card_settlement_khv5kfeu0vndj291omg6",
                "interchange": {
                  "amount": "0.137465",
                  "code": "271",
                  "currency": "USD"
                },
                "merchant_acceptor_id": "5665270011000168",
                "merchant_category_code": "5734",
                "merchant_city": "New York",
                "merchant_country": "US",
                "merchant_name": "AMAZON.COM",
                "merchant_postal_code": "10045",
                "merchant_state": "NY",
                "network_identifiers": {
                  "acquirer_business_id": "69650702",
                  "acquirer_reference_number": "83163715445437604865089",
                  "transaction_id": "627199945183184"
                },
                "pending_transaction_id": null,
                "presentment_amount": 100,
                "presentment_currency": "USD",
                "purchase_details": {
                  "car_rental": null,
                  "customer_reference_identifier": "51201",
                  "local_tax_amount": null,
                  "local_tax_currency": "usd",
                  "lodging": {
                    "check_in_date": "2023-07-20",
                    "daily_room_rate_amount": 1000,
                    "daily_room_rate_currency": "usd",
                    "extra_charges": "restaurant",
                    "folio_cash_advances_amount": 0,
                    "folio_cash_advances_currency": "usd",
                    "food_beverage_charges_amount": 0,
                    "food_beverage_charges_currency": "usd",
                    "no_show_indicator": "no_show",
                    "prepaid_expenses_amount": 0,
                    "prepaid_expenses_currency": "usd",
                    "room_nights": 1,
                    "total_room_tax_amount": 100,
                    "total_room_tax_currency": "usd",
                    "total_tax_amount": 100,
                    "total_tax_currency": "usd"
                  },
                  "national_tax_amount": null,
                  "national_tax_currency": "usd",
                  "purchase_identifier": "10203",
                  "purchase_identifier_format": "order_number",
                  "travel": null
                },
                "scheme_fees": [],
                "transaction_id": "transaction_uyrp7fld2ium70oa7oi",
                "type": "card_settlement"
              },
              "category": "card_settlement",
              "created_at": "2020-01-31T23:59:59Z"
            }
          ],
          "id": "card_payment_nd3k2kacrqjli8482ave",
          "physical_card_id": null,
          "state": {
            "authorized_amount": 100,
            "fuel_confirmed_amount": 0,
            "incremented_amount": 20,
            "reversed_amount": 20,
            "settled_amount": 100
          },
          "type": "card_payment"
        },
        "properties": {
          "account_id": {
            "description": "The identifier for the Account the Transaction belongs to.",
            "type": "string"
          },
          "card_id": {
            "description": "The Card identifier for this payment.",
            "type": "string"
          },
          "created_at": {
            "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Card Payment was created.",
            "format": "date-time",
            "type": "string"
          },
          "digital_wallet_token_id": {
            "anyOf": [
              {
                "description": "The Digital Wallet Token identifier for this payment.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "elements": {
            "description": "The interactions related to this card payment.",
            "items": {
              "example": {
                "card_authorization": {
                  "actioner": "increase",
                  "amount": 100,
                  "card_payment_id": "card_payment_nd3k2kacrqjli8482ave",
                  "currency": "USD",
                  "digital_wallet_token_id": null,
                  "direction": "settlement",
                  "expires_at": "2020-01-31T23:59:59Z",
                  "id": "card_authorization_6iqxap6ivd0fo5eu3i8x",
                  "merchant_acceptor_id": "5665270011000168",
                  "merchant_category_code": "5734",
                  "merchant_city": "New York",
                  "merchant_country": "US",
                  "merchant_descriptor": "AMAZON.COM",
                  "merchant_postal_code": "10045",
                  "merchant_state": "NY",
                  "network_details": {
                    "category": "visa",
                    "visa": {
                      "electronic_commerce_indicator": "secure_electronic_commerce",
                      "point_of_service_entry_mode": "manual",
                      "stand_in_processing_reason": null
                    }
                  },
                  "network_identifiers": {
                    "retrieval_reference_number": "785867080153",
                    "trace_number": "487941",
                    "transaction_id": "627199945183184"
                  },
                  "network_risk_score": 10,
                  "pending_transaction_id": null,
                  "physical_card_id": null,
                  "presentment_amount": 100,
                  "presentment_currency": "USD",
                  "processing_category": "purchase",
                  "real_time_decision_id": null,
                  "terminal_id": "RCN5VNXS",
                  "type": "card_authorization",
                  "verification": {
                    "card_verification_code": {
                      "result": "match"
                    },
                    "cardholder_address": {
                      "actual_line1": "33 Liberty Street",
                      "actual_postal_code": "94131",
                      "provided_line1": "33 Liberty Street",
                      "provided_postal_code": "94132",
                      "result": "postal_code_no_match_address_match"
                    }
                  }
                },
                "category": "card_authorization",
                "created_at": "2020-01-31T23:59:59Z"
              },
              "properties": {
                "card_authentication": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/card_authentication",
                      "description": "A Card Authentication object. This field will be present in the JSON response if and only if `category` is equal to `card_authentication`. Card Authentications are attempts to authenticate a transaction or a card with 3DS."
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "card_authorization": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/card_authorization",
                      "description": "A Card Authorization object. This field will be present in the JSON response if and only if `category` is equal to `card_authorization`. Card Authorizations are temporary holds placed on a customers funds with the intent to later clear a transaction."
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "card_authorization_expiration": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/card_authorization_expiration",
                      "description": "A Card Authorization Expiration object. This field will be present in the JSON response if and only if `category` is equal to `card_authorization_expiration`. Card Authorization Expirations are cancellations of authorizations that were never settled by the acquirer."
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "card_decline": {
                  "anyOf": [
                    {
                      "description": "A Card Decline object. This field will be present in the JSON response if and only if `category` is equal to `card_decline`.",
                      "example": {
                        "actioner": "increase",
                        "amount": -1000,
                        "card_payment_id": "card_payment_nd3k2kacrqjli8482ave",
                        "currency": "USD",
                        "declined_transaction_id": "declined_transaction_17jbn0yyhvkt4v4ooym8",
                        "digital_wallet_token_id": null,
                        "direction": "settlement",
                        "id": "card_decline_bx3o8zd7glq8yvtwg25v",
                        "merchant_acceptor_id": "5665270011000168",
                        "merchant_category_code": "5734",
                        "merchant_city": "New York",
                        "merchant_country": "US",
                        "merchant_descriptor": "AMAZON.COM",
                        "merchant_postal_code": "10045",
                        "merchant_state": null,
                        "network_details": {
                          "category": "visa",
                          "visa": {
                            "electronic_commerce_indicator": "secure_electronic_commerce",
                            "point_of_service_entry_mode": "manual",
                            "stand_in_processing_reason": null
                          }
                        },
                        "network_identifiers": {
                          "retrieval_reference_number": "785867080153",
                          "trace_number": "487941",
                          "transaction_id": "627199945183184"
                        },
                        "network_risk_score": 10,
                        "physical_card_id": null,
                        "presentment_amount": -1000,
                        "presentment_currency": "USD",
                        "processing_category": "purchase",
                        "real_time_decision_id": null,
                        "real_time_decision_reason": null,
                        "reason": "insufficient_funds",
                        "terminal_id": "RCN5VNXS",
                        "verification": {
                          "card_verification_code": {
                            "result": "match"
                          },
                          "cardholder_address": {
                            "actual_line1": "33 Liberty Street",
                            "actual_postal_code": "94131",
                            "provided_line1": "33 Liberty Street",
                            "provided_postal_code": "94132",
                            "result": "postal_code_no_match_address_match"
                          }
                        }
                      },
                      "properties": {
                        "actioner": {
                          "description": "Whether this authorization was approved by Increase, the card network through stand-in processing, or the user through a real-time decision.",
                          "enum": [
                            "user",
                            "increase",
                            "network"
                          ],
                          "type": "string",
                          "x-enum-descriptions": [
                            "This object was actioned by the user through a real-time decision.",
                            "This object was actioned by Increase without user intervention.",
                            "This object was actioned by the network, through stand-in processing."
                          ]
                        },
                        "amount": {
                          "description": "The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.",
                          "type": "integer"
                        },
                        "card_payment_id": {
                          "description": "The ID of the Card Payment this transaction belongs to.",
                          "type": "string"
                        },
                        "currency": {
                          "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.",
                          "enum": [
                            "CAD",
                            "CHF",
                            "EUR",
                            "GBP",
                            "JPY",
                            "USD"
                          ],
                          "type": "string",
                          "x-enum-descriptions": [
                            "Canadian Dollar (CAD)",
                            "Swiss Franc (CHF)",
                            "Euro (EUR)",
                            "British Pound (GBP)",
                            "Japanese Yen (JPY)",
                            "US Dollar (USD)"
                          ]
                        },
                        "declined_transaction_id": {
                          "description": "The identifier of the declined transaction created for this Card Decline.",
                          "type": "string"
                        },
                        "digital_wallet_token_id": {
                          "anyOf": [
                            {
                              "description": "If the authorization was made via a Digital Wallet Token (such as an Apple Pay purchase), the identifier of the token that was used.",
                              "type": "string"
                            },
                            {
                              "type": "null"
                            }
                          ]
                        },
                        "direction": {
                          "description": "The direction describes the direction the funds will move, either from the cardholder to the merchant or from the merchant to the cardholder.",
                          "enum": [
                            "settlement",
                            "refund"
                          ],
                          "type": "string",
                          "x-enum-descriptions": [
                            "A regular card authorization where funds are debited from the cardholder.",
                            "A refund card authorization, sometimes referred to as a credit voucher authorization, where funds are credited to the cardholder."
                          ]
                        },
                        "id": {
                          "description": "The Card Decline identifier.",
                          "type": "string"
                        },
                        "merchant_acceptor_id": {
                          "description": "The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.",
                          "type": "string"
                        },
                        "merchant_category_code": {
                          "description": "The Merchant Category Code (commonly abbreviated as MCC) of the merchant the card is transacting with.",
                          "type": "string"
                        },
                        "merchant_city": {
                          "anyOf": [
                            {
                              "description": "The city the merchant resides in.",
                              "type": "string"
                            },
                            {
                              "type": "null"
                            }
                          ]
                        },
                        "merchant_country": {
                          "description": "The country the merchant resides in.",
                          "type": "string"
                        },
                        "merchant_descriptor": {
                          "description": "The merchant descriptor of the merchant the card is transacting with.",
                          "type": "string"
                        },
                        "merchant_postal_code": {
                          "anyOf": [
                            {
                              "description": "The merchant's postal code. For US merchants this is either a 5-digit or 9-digit ZIP code, where the first 5 and last 4 are separated by a dash.",
                              "type": "string"
                            },
                            {
                              "type": "null"
                            }
                          ]
                        },
                        "merchant_state": {
                          "anyOf": [
                            {
                              "description": "The state the merchant resides in.",
                              "type": "string"
                            },
                            {
                              "type": "null"
                            }
                          ]
                        },
                        "network_details": {
                          "description": "Fields specific to the `network`.",
                          "properties": {
                            "category": {
                              "description": "The payment network used to process this card authorization.",
                              "enum": [
                                "visa"
                              ],
                              "type": "string",
                              "x-enum-descriptions": [
                                "Visa"
                              ]
                            },
                            "visa": {
                              "anyOf": [
                                {
                                  "description": "Fields specific to the `visa` network.",
                                  "properties": {
                                    "electronic_commerce_indicator": {
                                      "anyOf": [
                                        {
                                          "description": "For electronic commerce transactions, this identifies the level of security used in obtaining the customer's payment credential. For mail or telephone order transactions, identifies the type of mail or telephone order.",
                                          "enum": [
                                            "mail_phone_order",
                                            "recurring",
                                            "installment",
                                            "unknown_mail_phone_order",
                                            "secure_electronic_commerce",
                                            "non_authenticated_security_transaction_at_3ds_capable_merchant",
                                            "non_authenticated_security_transaction",
                                            "non_secure_transaction"
                                          ],
                                          "type": "string",
                                          "x-enum-descriptions": [
                                            "Single transaction of a mail/phone order: Use to indicate that the transaction is a mail/phone order purchase, not a recurring transaction or installment payment. For domestic transactions in the US region, this value may also indicate one bill payment transaction in the card-present or card-absent environments.",
                                            "Recurring transaction: Payment indicator used to indicate a recurring transaction that originates from an acquirer in the US region.",
                                            "Installment payment: Payment indicator used to indicate one purchase of goods or services that is billed to the account in multiple charges over a period of time agreed upon by the cardholder and merchant from transactions that originate from an acquirer in the US region.",
                                            "Unknown classification: other mail order: Use to indicate that the type of mail/telephone order is unknown.",
                                            "Secure electronic commerce transaction: Use to indicate that the electronic commerce transaction has been authenticated using e.g., 3-D Secure",
                                            "Non-authenticated security transaction at a 3-D Secure-capable merchant, and merchant attempted to authenticate the cardholder using 3-D Secure: Use to identify an electronic commerce transaction where the merchant attempted to authenticate the cardholder using 3-D Secure, but was unable to complete the authentication because the issuer or cardholder does not participate in the 3-D Secure program.",
                                            "Non-authenticated security transaction: Use to identify an electronic commerce transaction that uses data encryption for security however , cardholder authentication is not performed using 3-D Secure.",
                                            "Non-secure transaction: Use to identify an electronic commerce transaction that has no data protection."
                                          ]
                                        },
                                        {
                                          "type": "null"
                                        }
                                      ]
                                    },
                                    "point_of_service_entry_mode": {
                                      "anyOf": [
                                        {
                                          "description": "The method used to enter the cardholder's primary account number and card expiration date.",
                                          "enum": [
                                            "unknown",
                                            "manual",
                                            "magnetic_stripe_no_cvv",
                                            "optical_code",
                                            "integrated_circuit_card",
                                            "contactless",
                                            "credential_on_file",
                                            "magnetic_stripe",
                                            "contactless_magnetic_stripe",
                                            "integrated_circuit_card_no_cvv"
                                          ],
                                          "type": "string",
                                          "x-enum-descriptions": [
                                            "Unknown",
                                            "Manual key entry",
                                            "Magnetic stripe read, without card verification value",
                                            "Optical code",
                                            "Contact chip card",
                                            "Contactless read of chip card",
                                            "Transaction initiated using a credential that has previously been stored on file",
                                            "Magnetic stripe read",
                                            "Contactless read of magnetic stripe data",
                                            "Contact chip card, without card verification value"
                                          ]
                                        },
                                        {
                                          "type": "null"
                                        }
                                      ]
                                    },
                                    "stand_in_processing_reason": {
                                      "anyOf": [
                                        {
                                          "description": "Only present when `actioner: network`. Describes why a card authorization was approved or declined by Visa through stand-in processing.",
                                          "enum": [
                                            "issuer_error",
                                            "invalid_physical_card",
                                            "invalid_cardholder_authentication_verification_value",
                                            "internal_visa_error",
                                            "merchant_transaction_advisory_service_authentication_required",
                                            "payment_fraud_disruption_acquirer_block",
                                            "other"
                                          ],
                                          "type": "string",
                                          "x-enum-descriptions": [
                                            "Increase failed to process the authorization in a timely manner.",
                                            "The physical card read had an invalid CVV, dCVV, or authorization request cryptogram.",
                                            "The 3DS cardholder authentication verification value was invalid.",
                                            "An internal Visa error occurred. Visa uses this reason code for certain expected occurrences as well, such as Application Transaction Counter (ATC) replays.",
                                            "The merchant has enabled Visa's Transaction Advisory Service and requires further authentication to perform the transaction. In practice this is often utilized at fuel pumps to tell the cardholder to see the cashier.",
                                            "The transaction was blocked by Visa's Payment Fraud Disruption service due to fraudulent Acquirer behavior, such as card testing.",
                                            "An unspecific reason for stand-in processing."
                                          ]
                                        },
                                        {
                                          "type": "null"
                                        }
                                      ]
                                    }
                                  },
                                  "required": [
                                    "electronic_commerce_indicator",
                                    "point_of_service_entry_mode",
                                    "stand_in_processing_reason"
                                  ],
                                  "title": "Visa",
                                  "type": "object",
                                  "x-title-plural": "Visas"
                                },
                                {
                                  "type": "null"
                                }
                              ]
                            }
                          },
                          "required": [
                            "category",
                            "visa"
                          ],
                          "type": "object",
                          "x-title-plural": "s"
                        },
                        "network_identifiers": {
                          "description": "Network-specific identifiers for a specific request or transaction.",
                          "example": {
                            "retrieval_reference_number": "785867080153",
                            "trace_number": "487941",
                            "transaction_id": "627199945183184"
                          },
                          "properties": {
                            "retrieval_reference_number": {
                              "anyOf": [
                                {
                                  "description": "A life-cycle identifier used across e.g., an authorization and a reversal. Expected to be unique per acquirer within a window of time. For some card networks the retrieval reference number includes the trace counter.",
                                  "type": "string"
                                },
                                {
                                  "type": "null"
                                }
                              ]
                            },
                            "trace_number": {
                              "anyOf": [
                                {
                                  "description": "A counter used to verify an individual authorization. Expected to be unique per acquirer within a window of time.",
                                  "type": "string"
                                },
                                {
                                  "type": "null"
                                }
                              ]
                            },
                            "transaction_id": {
                              "anyOf": [
                                {
                                  "description": "A globally unique transaction identifier provided by the card network, used across multiple life-cycle requests.",
                                  "type": "string"
                                },
                                {
                                  "type": "null"
                                }
                              ]
                            }
                          },
                          "required": [
                            "transaction_id",
                            "trace_number",
                            "retrieval_reference_number"
                          ],
                          "type": "object",
                          "x-title-plural": "s"
                        },
                        "network_risk_score": {
                          "anyOf": [
                            {
                              "description": "The risk score generated by the card network. For Visa this is the Visa Advanced Authorization risk score, from 0 to 99, where 99 is the riskiest.",
                              "type": "integer"
                            },
                            {
                              "type": "null"
                            }
                          ]
                        },
                        "physical_card_id": {
                          "anyOf": [
                            {
                              "description": "If the authorization was made in-person with a physical card, the Physical Card that was used.",
                              "type": "string"
                            },
                            {
                              "type": "null"
                            }
                          ]
                        },
                        "presentment_amount": {
                          "description": "The declined amount in the minor unit of the transaction's presentment currency.",
                          "type": "integer"
                        },
                        "presentment_currency": {
                          "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's presentment currency.",
                          "type": "string"
                        },
                        "processing_category": {
                          "description": "The processing category describes the intent behind the authorization, such as whether it was used for bill payments or an automatic fuel dispenser.",
                          "enum": [
                            "account_funding",
                            "automatic_fuel_dispenser",
                            "bill_payment",
                            "purchase",
                            "quasi_cash",
                            "refund"
                          ],
                          "type": "string",
                          "x-enum-descriptions": [
                            "Account funding transactions are transactions used to e.g., fund an account or transfer funds between accounts.",
                            "Automatic fuel dispenser authorizations occur when a card is used at a gas pump, prior to the actual transaction amount being known. They are followed by an advice message that updates the amount of the pending transaction.",
                            "A transaction used to pay a bill.",
                            "A regular purchase.",
                            "Quasi-cash transactions represent purchases of items which may be convertible to cash.",
                            "A refund card authorization, sometimes referred to as a credit voucher authorization, where funds are credited to the cardholder."
                          ]
                        },
                        "real_time_decision_id": {
                          "anyOf": [
                            {
                              "description": "The identifier of the Real-Time Decision sent to approve or decline this transaction.",
                              "type": "string"
                            },
                            {
                              "type": "null"
                            }
                          ]
                        },
                        "real_time_decision_reason": {
                          "anyOf": [
                            {
                              "description": "This is present if a specific decline reason was given in the real-time decision.",
                              "enum": [
                                "insufficient_funds",
                                "transaction_never_allowed",
                                "exceeds_approval_limit",
                                "card_temporarily_disabled",
                                "suspected_fraud",
                                "other"
                              ],
                              "type": "string",
                              "x-enum-descriptions": [
                                "The cardholder does not have sufficient funds to cover the transaction. The merchant may attempt to process the transaction again.",
                                "This type of transaction is not allowed for this card. This transaction should not be retried.",
                                "The transaction amount exceeds the cardholder's approval limit. The merchant may attempt to process the transaction again.",
                                "The card has been temporarily disabled or not yet activated. The merchant may attempt to process the transaction again.",
                                "The transaction is suspected to be fraudulent. The merchant may attempt to process the transaction again.",
                                "The transaction was declined for another reason. The merchant may attempt to process the transaction again. This should be used sparingly."
                              ]
                            },
                            {
                              "type": "null"
                            }
                          ]
                        },
                        "reason": {
                          "description": "Why the transaction was declined.",
                          "enum": [
                            "account_closed",
                            "card_not_active",
                            "card_canceled",
                            "physical_card_not_active",
                            "entity_not_active",
                            "group_locked",
                            "insufficient_funds",
                            "cvv2_mismatch",
                            "card_expiration_mismatch",
                            "transaction_not_allowed",
                            "breaches_limit",
                            "webhook_declined",
                            "webhook_timed_out",
                            "declined_by_stand_in_processing",
                            "invalid_physical_card",
                            "missing_original_authorization",
                            "suspected_fraud"
                          ],
                          "type": "string",
                          "x-enum-descriptions": [
                            "The account has been closed.",
                            "The Card was not active.",
                            "The Card has been canceled.",
                            "The Physical Card was not active.",
                            "The account's entity was not active.",
                            "The account was inactive.",
                            "The Card's Account did not have a sufficient available balance.",
                            "The given CVV2 did not match the card's value.",
                            "The given expiration date did not match the card's value. Only applies when a CVV2 is present.",
                            "The attempted card transaction is not allowed per Increase's terms.",
                            "The transaction was blocked by a Limit.",
                            "Your application declined the transaction via webhook.",
                            "Your application webhook did not respond without the required timeout.",
                            "Declined by stand-in processing.",
                            "The card read had an invalid CVV, dCVV, or authorization request cryptogram.",
                            "The original card authorization for this incremental authorization does not exist.",
                            "The transaction was suspected to be fraudulent. Please reach out to support@increase.com for more information."
                          ]
                        },
                        "terminal_id": {
                          "anyOf": [
                            {
                              "description": "The terminal identifier (commonly abbreviated as TID) of the terminal the card is transacting with.",
                              "type": "string"
                            },
                            {
                              "type": "null"
                            }
                          ]
                        },
                        "verification": {
                          "description": "Fields related to verification of cardholder-provided values.",
                          "properties": {
                            "card_verification_code": {
                              "description": "Fields related to verification of the Card Verification Code, a 3-digit code on the back of the card.",
                              "properties": {
                                "result": {
                                  "description": "The result of verifying the Card Verification Code.",
                                  "enum": [
                                    "not_checked",
                                    "match",
                                    "no_match"
                                  ],
                                  "type": "string",
                                  "x-enum-descriptions": [
                                    "No card verification code was provided in the authorization request.",
                                    "The card verification code matched the one on file.",
                                    "The card verification code did not match the one on file."
                                  ]
                                }
                              },
                              "required": [
                                "result"
                              ],
                              "title": "Card Verification Code",
                              "type": "object",
                              "x-title-plural": "Card Verification Codes"
                            },
                            "cardholder_address": {
                              "description": "Cardholder address provided in the authorization request and the address on file we verified it against.",
                              "properties": {
                                "actual_line1": {
                                  "anyOf": [
                                    {
                                      "description": "Line 1 of the address on file for the cardholder.",
                                      "type": "string"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ]
                                },
                                "actual_postal_code": {
                                  "anyOf": [
                                    {
                                      "description": "The postal code of the address on file for the cardholder.",
                                      "type": "string"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ]
                                },
                                "provided_line1": {
                                  "anyOf": [
                                    {
                                      "description": "The cardholder address line 1 provided for verification in the authorization request.",
                                      "type": "string"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ]
                                },
                                "provided_postal_code": {
                                  "anyOf": [
                                    {
                                      "description": "The postal code provided for verification in the authorization request.",
                                      "type": "string"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ]
                                },
                                "result": {
                                  "description": "The address verification result returned to the card network.",
                                  "enum": [
                                    "not_checked",
                                    "postal_code_match_address_not_checked",
                                    "postal_code_match_address_no_match",
                                    "postal_code_no_match_address_match",
                                    "match",
                                    "no_match"
                                  ],
                                  "type": "string",
                                  "x-enum-descriptions": [
                                    "No adress was provided in the authorization request.",
                                    "Postal code matches, but the street address was not verified.",
                                    "Postal code matches, but the street address does not match.",
                                    "Postal code does not match, but the street address matches.",
                                    "Postal code and street address match.",
                                    "Postal code and street address do not match."
                                  ]
                                }
                              },
                              "required": [
                                "provided_postal_code",
                                "provided_line1",
                                "actual_postal_code",
                                "actual_line1",
                                "result"
                              ],
                              "title": "Cardholder Address",
                              "type": "object",
                              "x-title-plural": "Cardholder Addresses"
                            }
                          },
                          "required": [
                            "cardholder_address",
                            "card_verification_code"
                          ],
                          "type": "object",
                          "x-title-plural": "s"
                        }
                      },
                      "required": [
                        "merchant_acceptor_id",
                        "merchant_descriptor",
                        "merchant_category_code",
                        "terminal_id",
                        "merchant_city",
                        "merchant_state",
                        "merchant_postal_code",
                        "merchant_country",
                        "digital_wallet_token_id",
                        "physical_card_id",
                        "verification",
                        "network_identifiers",
                        "network_risk_score",
                        "network_details",
                        "id",
                        "card_payment_id",
                        "amount",
                        "presentment_amount",
                        "presentment_currency",
                        "currency",
                        "processing_category",
                        "reason",
                        "real_time_decision_reason",
                        "actioner",
                        "direction",
                        "real_time_decision_id",
                        "declined_transaction_id"
                      ],
                      "title": "Card Decline",
                      "type": "object",
                      "x-title-plural": "Card Declines"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "card_fuel_confirmation": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/card_fuel_confirmation",
                      "description": "A Card Fuel Confirmation object. This field will be present in the JSON response if and only if `category` is equal to `card_fuel_confirmation`. Card Fuel Confirmations update the amount of a Card Authorization after a fuel pump transaction is completed."
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "card_increment": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/card_increment",
                      "description": "A Card Increment object. This field will be present in the JSON response if and only if `category` is equal to `card_increment`. Card Increments increase the pending amount of an authorized transaction."
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "card_refund": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/card_refund",
                      "description": "A Card Refund object. This field will be present in the JSON response if and only if `category` is equal to `card_refund`. Card Refunds move money back to the cardholder. While they are usually connected to a Card Settlement an acquirer can also refund money directly to a card without relation to a transaction."
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "card_reversal": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/card_reversal",
                      "description": "A Card Reversal object. This field will be present in the JSON response if and only if `category` is equal to `card_reversal`. Card Reversals cancel parts of or the entirety of an existing Card Authorization."
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "card_settlement": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/card_settlement",
                      "description": "A Card Settlement object. This field will be present in the JSON response if and only if `category` is equal to `card_settlement`. Card Settlements are card transactions that have cleared and settled. While a settlement is usually preceded by an authorization, an acquirer can also directly clear a transaction without first authorizing it."
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "card_validation": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/card_validation",
                      "description": "A Card Validation object. This field will be present in the JSON response if and only if `category` is equal to `card_validation`. Card Validations are requests from a merchant to verify that a card number and optionally its address and/or Card Verification Value are valid."
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "category": {
                  "description": "The type of the resource. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.",
                  "enum": [
                    "card_authorization",
                    "card_authentication",
                    "card_validation",
                    "card_decline",
                    "card_reversal",
                    "card_authorization_expiration",
                    "card_increment",
                    "card_settlement",
                    "card_refund",
                    "card_fuel_confirmation",
                    "other"
                  ],
                  "type": "string",
                  "x-enum-descriptions": [
                    "Card Authorization: details will be under the `card_authorization` object.",
                    "Card Authentication: details will be under the `card_authentication` object.",
                    "Card Validation: details will be under the `card_validation` object.",
                    "Card Decline: details will be under the `card_decline` object.",
                    "Card Reversal: details will be under the `card_reversal` object.",
                    "Card Authorization Expiration: details will be under the `card_authorization_expiration` object.",
                    "Card Increment: details will be under the `card_increment` object.",
                    "Card Settlement: details will be under the `card_settlement` object.",
                    "Card Refund: details will be under the `card_refund` object.",
                    "Card Fuel Confirmation: details will be under the `card_fuel_confirmation` object.",
                    "Unknown card payment element."
                  ]
                },
                "created_at": {
                  "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the card payment element was created.",
                  "format": "date-time",
                  "type": "string"
                },
                "other": {
                  "anyOf": [
                    {
                      "description": "If the category of this Transaction source is equal to `other`, this field will contain an empty object, otherwise it will contain null.",
                      "properties": {},
                      "title": "Other",
                      "type": "object",
                      "x-title-plural": "Others"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              },
              "required": [
                "category",
                "card_authorization",
                "card_authentication",
                "card_validation",
                "card_decline",
                "card_reversal",
                "card_authorization_expiration",
                "card_increment",
                "card_settlement",
                "card_refund",
                "card_fuel_confirmation",
                "other",
                "created_at"
              ],
              "title": "Card Payment Element",
              "type": "object",
              "x-title-plural": "Card Payment Elements"
            },
            "type": "array"
          },
          "id": {
            "description": "The Card Payment identifier.",
            "type": "string"
          },
          "physical_card_id": {
            "anyOf": [
              {
                "description": "The Physical Card identifier for this payment.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "state": {
            "description": "The summarized state of this card payment.",
            "example": {
              "authorized_amount": 100,
              "fuel_confirmed_amount": 0,
              "incremented_amount": 20,
              "reversed_amount": 20,
              "settled_amount": 100
            },
            "properties": {
              "authorized_amount": {
                "description": "The total authorized amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
                "type": "integer"
              },
              "fuel_confirmed_amount": {
                "description": "The total amount from fuel confirmations in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
                "type": "integer"
              },
              "incremented_amount": {
                "description": "The total incrementally updated authorized amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
                "type": "integer"
              },
              "reversed_amount": {
                "description": "The total reversed amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
                "type": "integer"
              },
              "settled_amount": {
                "description": "The total settled or refunded amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
                "type": "integer"
              }
            },
            "required": [
              "authorized_amount",
              "incremented_amount",
              "reversed_amount",
              "fuel_confirmed_amount",
              "settled_amount"
            ],
            "title": "Card Payment State",
            "type": "object",
            "x-title-plural": "Card Payment States"
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `card_payment`.",
            "enum": [
              "card_payment"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "account_id",
          "card_id",
          "physical_card_id",
          "digital_wallet_token_id",
          "elements",
          "state",
          "type"
        ],
        "title": "Card Payment",
        "type": "object",
        "x-tag": "Card Payments",
        "x-title-plural": "Card Payments"
      },
      "card_payment_list": {
        "description": "A list of Card Payment objects.",
        "example": {
          "data": [
            {
              "account_id": "account_in71c4amph0vgo2qllky",
              "card_id": "card_oubs0hwk5rn6knuecxg2",
              "created_at": "2020-01-31T23:59:59Z",
              "digital_wallet_token_id": null,
              "elements": [
                {
                  "card_authorization": {
                    "actioner": "increase",
                    "amount": 100,
                    "card_payment_id": "card_payment_nd3k2kacrqjli8482ave",
                    "currency": "USD",
                    "digital_wallet_token_id": null,
                    "direction": "settlement",
                    "expires_at": "2020-01-31T23:59:59Z",
                    "id": "card_authorization_6iqxap6ivd0fo5eu3i8x",
                    "merchant_acceptor_id": "5665270011000168",
                    "merchant_category_code": "5734",
                    "merchant_city": "New York",
                    "merchant_country": "US",
                    "merchant_descriptor": "AMAZON.COM",
                    "merchant_postal_code": "10045",
                    "merchant_state": "NY",
                    "network_details": {
                      "category": "visa",
                      "visa": {
                        "electronic_commerce_indicator": "secure_electronic_commerce",
                        "point_of_service_entry_mode": "manual",
                        "stand_in_processing_reason": null
                      }
                    },
                    "network_identifiers": {
                      "retrieval_reference_number": "785867080153",
                      "trace_number": "487941",
                      "transaction_id": "627199945183184"
                    },
                    "network_risk_score": 10,
                    "pending_transaction_id": null,
                    "physical_card_id": null,
                    "presentment_amount": 100,
                    "presentment_currency": "USD",
                    "processing_category": "purchase",
                    "real_time_decision_id": null,
                    "terminal_id": "RCN5VNXS",
                    "type": "card_authorization",
                    "verification": {
                      "card_verification_code": {
                        "result": "match"
                      },
                      "cardholder_address": {
                        "actual_line1": "33 Liberty Street",
                        "actual_postal_code": "94131",
                        "provided_line1": "33 Liberty Street",
                        "provided_postal_code": "94132",
                        "result": "postal_code_no_match_address_match"
                      }
                    }
                  },
                  "category": "card_authorization",
                  "created_at": "2020-01-31T23:59:59Z"
                },
                {
                  "card_reversal": {
                    "card_authorization_id": "card_authorization_6iqxap6ivd0fo5eu3i8x",
                    "currency": "USD",
                    "id": "card_reversal_8vr9qy60cgf5d0slpb68",
                    "merchant_acceptor_id": "5665270011000168",
                    "merchant_category_code": "5734",
                    "merchant_city": "New York",
                    "merchant_country": "US",
                    "merchant_descriptor": "AMAZON.COM",
                    "merchant_postal_code": "10045",
                    "merchant_state": "NY",
                    "network": "visa",
                    "network_identifiers": {
                      "retrieval_reference_number": "785867080153",
                      "trace_number": "487941",
                      "transaction_id": "627199945183184"
                    },
                    "pending_transaction_id": "pending_transaction_k1sfetcau2qbvjbzgju4",
                    "reversal_amount": 20,
                    "reversal_reason": "reversed_by_customer",
                    "terminal_id": "RCN5VNXS",
                    "type": "card_reversal",
                    "updated_authorization_amount": 80
                  },
                  "category": "card_reversal",
                  "created_at": "2020-01-31T23:59:59Z"
                },
                {
                  "card_increment": {
                    "actioner": "increase",
                    "amount": 20,
                    "card_authorization_id": "card_authorization_6iqxap6ivd0fo5eu3i8x",
                    "currency": "USD",
                    "id": "card_increment_6ztayc58j1od0rpebp3e",
                    "network": "visa",
                    "network_identifiers": {
                      "retrieval_reference_number": "785867080153",
                      "trace_number": "487941",
                      "transaction_id": "627199945183184"
                    },
                    "network_risk_score": 10,
                    "pending_transaction_id": "pending_transaction_k1sfetcau2qbvjbzgju4",
                    "real_time_decision_id": null,
                    "type": "card_increment",
                    "updated_authorization_amount": 120
                  },
                  "category": "card_increment",
                  "created_at": "2020-01-31T23:59:59Z"
                },
                {
                  "card_settlement": {
                    "amount": 100,
                    "card_authorization": null,
                    "card_payment_id": "card_payment_nd3k2kacrqjli8482ave",
                    "cashback": null,
                    "currency": "USD",
                    "id": "card_settlement_khv5kfeu0vndj291omg6",
                    "interchange": {
                      "amount": "0.137465",
                      "code": "271",
                      "currency": "USD"
                    },
                    "merchant_acceptor_id": "5665270011000168",
                    "merchant_category_code": "5734",
                    "merchant_city": "New York",
                    "merchant_country": "US",
                    "merchant_name": "AMAZON.COM",
                    "merchant_postal_code": "10045",
                    "merchant_state": "NY",
                    "network_identifiers": {
                      "acquirer_business_id": "69650702",
                      "acquirer_reference_number": "83163715445437604865089",
                      "transaction_id": "627199945183184"
                    },
                    "pending_transaction_id": null,
                    "presentment_amount": 100,
                    "presentment_currency": "USD",
                    "purchase_details": {
                      "car_rental": null,
                      "customer_reference_identifier": "51201",
                      "local_tax_amount": null,
                      "local_tax_currency": "usd",
                      "lodging": {
                        "check_in_date": "2023-07-20",
                        "daily_room_rate_amount": 1000,
                        "daily_room_rate_currency": "usd",
                        "extra_charges": "restaurant",
                        "folio_cash_advances_amount": 0,
                        "folio_cash_advances_currency": "usd",
                        "food_beverage_charges_amount": 0,
                        "food_beverage_charges_currency": "usd",
                        "no_show_indicator": "no_show",
                        "prepaid_expenses_amount": 0,
                        "prepaid_expenses_currency": "usd",
                        "room_nights": 1,
                        "total_room_tax_amount": 100,
                        "total_room_tax_currency": "usd",
                        "total_tax_amount": 100,
                        "total_tax_currency": "usd"
                      },
                      "national_tax_amount": null,
                      "national_tax_currency": "usd",
                      "purchase_identifier": "10203",
                      "purchase_identifier_format": "order_number",
                      "travel": null
                    },
                    "scheme_fees": [],
                    "transaction_id": "transaction_uyrp7fld2ium70oa7oi",
                    "type": "card_settlement"
                  },
                  "category": "card_settlement",
                  "created_at": "2020-01-31T23:59:59Z"
                }
              ],
              "id": "card_payment_nd3k2kacrqjli8482ave",
              "physical_card_id": null,
              "state": {
                "authorized_amount": 100,
                "fuel_confirmed_amount": 0,
                "incremented_amount": 20,
                "reversed_amount": 20,
                "settled_amount": 100
              },
              "type": "card_payment"
            }
          ],
          "next_cursor": "v57w5d"
        },
        "properties": {
          "data": {
            "description": "The contents of the list.",
            "items": {
              "$ref": "#/components/schemas/card_payment"
            },
            "type": "array"
          },
          "next_cursor": {
            "anyOf": [
              {
                "description": "A pointer to a place in the list.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "Card Payment List",
        "type": "object",
        "x-title-plural": "Card Payment Lists"
      },
      "card_purchase_supplement": {
        "description": "Additional information about a card purchase (e.g., settlement or refund), such as level 3 line item data.",
        "example": {
          "card_payment_id": "card_payment_nd3k2kacrqjli8482ave",
          "created_at": "2020-01-31T23:59:59Z",
          "id": "card_purchase_supplement_ijuc45iym4jchnh2sfk3",
          "invoice": {
            "discount_amount": 100,
            "discount_currency": "USD",
            "discount_treatment_code": null,
            "duty_tax_amount": 200,
            "duty_tax_currency": "USD",
            "order_date": "2023-07-20",
            "shipping_amount": 300,
            "shipping_currency": "USD",
            "shipping_destination_country_code": "US",
            "shipping_destination_postal_code": "10045",
            "shipping_source_postal_code": "10045",
            "shipping_tax_amount": 400,
            "shipping_tax_currency": "USD",
            "shipping_tax_rate": "0.2",
            "tax_treatments": null,
            "unique_value_added_tax_invoice_reference": "12302"
          },
          "line_items": [
            {
              "detail_indicator": "normal",
              "discount_amount": null,
              "discount_currency": null,
              "discount_treatment_code": null,
              "id": "card_purchase_supplement_invoice_line_item_nf9760lz0apqy5retmqh",
              "item_commodity_code": "001",
              "item_descriptor": "Coffee",
              "item_quantity": "1.0",
              "product_code": "101",
              "sales_tax_amount": null,
              "sales_tax_currency": null,
              "sales_tax_rate": null,
              "total_amount": 500,
              "total_amount_currency": "USD",
              "unit_cost": "5.0",
              "unit_cost_currency": "USD",
              "unit_of_measure_code": "NMB"
            }
          ],
          "transaction_id": "transaction_uyrp7fld2ium70oa7oi",
          "type": "card_purchase_supplement"
        },
        "properties": {
          "card_payment_id": {
            "anyOf": [
              {
                "description": "The ID of the Card Payment this transaction belongs to.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "id": {
            "description": "The Card Purchase Supplement identifier.",
            "type": "string"
          },
          "invoice": {
            "anyOf": [
              {
                "description": "Invoice-level information about the payment.",
                "properties": {
                  "discount_amount": {
                    "anyOf": [
                      {
                        "description": "Discount given to cardholder.",
                        "type": "integer"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "discount_currency": {
                    "anyOf": [
                      {
                        "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the discount.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "discount_treatment_code": {
                    "anyOf": [
                      {
                        "description": "Indicates how the merchant applied the discount.",
                        "enum": [
                          "no_invoice_level_discount_provided",
                          "tax_calculated_on_post_discount_invoice_total",
                          "tax_calculated_on_pre_discount_invoice_total"
                        ],
                        "type": "string",
                        "x-enum-descriptions": [
                          "No invoice level discount provided",
                          "Tax calculated on post discount invoice total",
                          "Tax calculated on pre discount invoice total"
                        ]
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "duty_tax_amount": {
                    "anyOf": [
                      {
                        "description": "Amount of duty taxes.",
                        "type": "integer"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "duty_tax_currency": {
                    "anyOf": [
                      {
                        "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the duty tax.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "order_date": {
                    "anyOf": [
                      {
                        "description": "Date the order was taken.",
                        "format": "date",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "shipping_amount": {
                    "anyOf": [
                      {
                        "description": "The shipping cost.",
                        "type": "integer"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "shipping_currency": {
                    "anyOf": [
                      {
                        "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the shipping cost.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "shipping_destination_country_code": {
                    "anyOf": [
                      {
                        "description": "Country code of the shipping destination.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "shipping_destination_postal_code": {
                    "anyOf": [
                      {
                        "description": "Postal code of the shipping destination.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "shipping_source_postal_code": {
                    "anyOf": [
                      {
                        "description": "Postal code of the location being shipped from.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "shipping_tax_amount": {
                    "anyOf": [
                      {
                        "description": "Taxes paid for freight and shipping.",
                        "type": "integer"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "shipping_tax_currency": {
                    "anyOf": [
                      {
                        "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the shipping tax.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "shipping_tax_rate": {
                    "anyOf": [
                      {
                        "description": "Tax rate for freight and shipping.",
                        "pattern": "^-?\\d+(\\.\\d+)?$",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "tax_treatments": {
                    "anyOf": [
                      {
                        "description": "Indicates how the merchant applied taxes.",
                        "enum": [
                          "no_tax_applies",
                          "net_price_line_item_level",
                          "net_price_invoice_level",
                          "gross_price_line_item_level",
                          "gross_price_invoice_level"
                        ],
                        "type": "string",
                        "x-enum-descriptions": [
                          "No tax applies",
                          "Net price line item level",
                          "Net price invoice level",
                          "Gross price line item level",
                          "Gross price invoice level"
                        ]
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "unique_value_added_tax_invoice_reference": {
                    "anyOf": [
                      {
                        "description": "Value added tax invoice reference number.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  }
                },
                "required": [
                  "discount_amount",
                  "discount_currency",
                  "shipping_amount",
                  "shipping_currency",
                  "duty_tax_amount",
                  "duty_tax_currency",
                  "shipping_tax_amount",
                  "shipping_tax_currency",
                  "shipping_tax_rate",
                  "shipping_destination_postal_code",
                  "shipping_destination_country_code",
                  "shipping_source_postal_code",
                  "unique_value_added_tax_invoice_reference",
                  "order_date",
                  "discount_treatment_code",
                  "tax_treatments"
                ],
                "title": "Invoice",
                "type": "object",
                "x-title-plural": "Invoices"
              },
              {
                "type": "null"
              }
            ]
          },
          "line_items": {
            "anyOf": [
              {
                "description": "Line item information, such as individual products purchased.",
                "items": {
                  "properties": {
                    "detail_indicator": {
                      "anyOf": [
                        {
                          "description": "Indicates the type of line item.",
                          "enum": [
                            "normal",
                            "credit",
                            "payment"
                          ],
                          "type": "string",
                          "x-enum-descriptions": [
                            "Normal",
                            "Credit",
                            "Purchase"
                          ]
                        },
                        {
                          "type": "null"
                        }
                      ]
                    },
                    "discount_amount": {
                      "anyOf": [
                        {
                          "description": "Discount amount for this specific line item.",
                          "type": "integer"
                        },
                        {
                          "type": "null"
                        }
                      ]
                    },
                    "discount_currency": {
                      "anyOf": [
                        {
                          "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the discount.",
                          "type": "string"
                        },
                        {
                          "type": "null"
                        }
                      ]
                    },
                    "discount_treatment_code": {
                      "anyOf": [
                        {
                          "description": "Indicates how the merchant applied the discount for this specific line item.",
                          "enum": [
                            "no_line_item_level_discount_provided",
                            "tax_calculated_on_post_discount_line_item_total",
                            "tax_calculated_on_pre_discount_line_item_total"
                          ],
                          "type": "string",
                          "x-enum-descriptions": [
                            "No line item level discount provided",
                            "Tax calculated on post discount line item total",
                            "Tax calculated on pre discount line item total"
                          ]
                        },
                        {
                          "type": "null"
                        }
                      ]
                    },
                    "id": {
                      "description": "The Card Purchase Supplement Line Item identifier.",
                      "type": "string"
                    },
                    "item_commodity_code": {
                      "anyOf": [
                        {
                          "description": "Code used to categorize the purchase item.",
                          "type": "string"
                        },
                        {
                          "type": "null"
                        }
                      ]
                    },
                    "item_descriptor": {
                      "anyOf": [
                        {
                          "description": "Description of the purchase item.",
                          "type": "string"
                        },
                        {
                          "type": "null"
                        }
                      ]
                    },
                    "item_quantity": {
                      "anyOf": [
                        {
                          "description": "The number of units of the product being purchased.",
                          "pattern": "^-?\\d+(\\.\\d+)?$",
                          "type": "string"
                        },
                        {
                          "type": "null"
                        }
                      ]
                    },
                    "product_code": {
                      "anyOf": [
                        {
                          "description": "Code used to categorize the product being purchased.",
                          "type": "string"
                        },
                        {
                          "type": "null"
                        }
                      ]
                    },
                    "sales_tax_amount": {
                      "anyOf": [
                        {
                          "description": "Sales tax amount for this line item.",
                          "type": "integer"
                        },
                        {
                          "type": "null"
                        }
                      ]
                    },
                    "sales_tax_currency": {
                      "anyOf": [
                        {
                          "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the sales tax assessed.",
                          "type": "string"
                        },
                        {
                          "type": "null"
                        }
                      ]
                    },
                    "sales_tax_rate": {
                      "anyOf": [
                        {
                          "description": "Sales tax rate for this line item.",
                          "pattern": "^-?\\d+(\\.\\d+)?$",
                          "type": "string"
                        },
                        {
                          "type": "null"
                        }
                      ]
                    },
                    "total_amount": {
                      "anyOf": [
                        {
                          "description": "Total amount of all line items.",
                          "type": "integer"
                        },
                        {
                          "type": "null"
                        }
                      ]
                    },
                    "total_amount_currency": {
                      "anyOf": [
                        {
                          "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the total amount.",
                          "type": "string"
                        },
                        {
                          "type": "null"
                        }
                      ]
                    },
                    "unit_cost": {
                      "anyOf": [
                        {
                          "description": "Cost of line item per unit of measure, in major units.",
                          "pattern": "^-?\\d+(\\.\\d+)?$",
                          "type": "string"
                        },
                        {
                          "type": "null"
                        }
                      ]
                    },
                    "unit_cost_currency": {
                      "anyOf": [
                        {
                          "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the unit cost.",
                          "type": "string"
                        },
                        {
                          "type": "null"
                        }
                      ]
                    },
                    "unit_of_measure_code": {
                      "anyOf": [
                        {
                          "description": "Code indicating unit of measure (gallons, etc.).",
                          "type": "string"
                        },
                        {
                          "type": "null"
                        }
                      ]
                    }
                  },
                  "required": [
                    "id",
                    "item_commodity_code",
                    "item_descriptor",
                    "product_code",
                    "item_quantity",
                    "unit_of_measure_code",
                    "unit_cost",
                    "unit_cost_currency",
                    "sales_tax_amount",
                    "sales_tax_currency",
                    "sales_tax_rate",
                    "discount_amount",
                    "discount_currency",
                    "discount_treatment_code",
                    "total_amount",
                    "total_amount_currency",
                    "detail_indicator"
                  ],
                  "title": "Line Items Element",
                  "type": "object",
                  "x-title-plural": "Line Items Elements"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ]
          },
          "transaction_id": {
            "description": "The ID of the transaction.",
            "type": "string"
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `card_purchase_supplement`.",
            "enum": [
              "card_purchase_supplement"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "transaction_id",
          "card_payment_id",
          "invoice",
          "line_items",
          "type"
        ],
        "title": "Card Purchase Supplement",
        "type": "object",
        "x-tag": "Card Purchase Supplements",
        "x-title-plural": "Card Purchase Supplements"
      },
      "card_purchase_supplement_list": {
        "description": "A list of Card Purchase Supplement objects.",
        "example": {
          "data": [
            {
              "card_payment_id": "card_payment_nd3k2kacrqjli8482ave",
              "created_at": "2020-01-31T23:59:59Z",
              "id": "card_purchase_supplement_ijuc45iym4jchnh2sfk3",
              "invoice": {
                "discount_amount": 100,
                "discount_currency": "USD",
                "discount_treatment_code": null,
                "duty_tax_amount": 200,
                "duty_tax_currency": "USD",
                "order_date": "2023-07-20",
                "shipping_amount": 300,
                "shipping_currency": "USD",
                "shipping_destination_country_code": "US",
                "shipping_destination_postal_code": "10045",
                "shipping_source_postal_code": "10045",
                "shipping_tax_amount": 400,
                "shipping_tax_currency": "USD",
                "shipping_tax_rate": "0.2",
                "tax_treatments": null,
                "unique_value_added_tax_invoice_reference": "12302"
              },
              "line_items": [
                {
                  "detail_indicator": "normal",
                  "discount_amount": null,
                  "discount_currency": null,
                  "discount_treatment_code": null,
                  "id": "card_purchase_supplement_invoice_line_item_nf9760lz0apqy5retmqh",
                  "item_commodity_code": "001",
                  "item_descriptor": "Coffee",
                  "item_quantity": "1.0",
                  "product_code": "101",
                  "sales_tax_amount": null,
                  "sales_tax_currency": null,
                  "sales_tax_rate": null,
                  "total_amount": 500,
                  "total_amount_currency": "USD",
                  "unit_cost": "5.0",
                  "unit_cost_currency": "USD",
                  "unit_of_measure_code": "NMB"
                }
              ],
              "transaction_id": "transaction_uyrp7fld2ium70oa7oi",
              "type": "card_purchase_supplement"
            }
          ],
          "next_cursor": "v57w5d"
        },
        "properties": {
          "data": {
            "description": "The contents of the list.",
            "items": {
              "$ref": "#/components/schemas/card_purchase_supplement"
            },
            "type": "array"
          },
          "next_cursor": {
            "anyOf": [
              {
                "description": "A pointer to a place in the list.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "Card Purchase Supplement List",
        "type": "object",
        "x-title-plural": "Card Purchase Supplement Lists"
      },
      "card_refund": {
        "description": "Card Refunds move money back to the cardholder. While they are usually connected to a Card Settlement an acquirer can also refund money directly to a card without relation to a transaction.",
        "example": {
          "amount": 100,
          "card_payment_id": "card_payment_nd3k2kacrqjli8482ave",
          "cashback": null,
          "currency": "USD",
          "id": "card_refund_imgc2xwplh6t4r3gn16e",
          "interchange": {
            "amount": "0.137465",
            "code": "271",
            "currency": "USD"
          },
          "merchant_acceptor_id": "5665270011000168",
          "merchant_category_code": "5734",
          "merchant_city": "New York",
          "merchant_country": "US",
          "merchant_name": "AMAZON.COM",
          "merchant_postal_code": "10045",
          "merchant_state": "NY",
          "network_identifiers": {
            "acquirer_business_id": "69650702",
            "acquirer_reference_number": "83163715445437604865089",
            "transaction_id": "627199945183184"
          },
          "presentment_amount": 100,
          "presentment_currency": "USD",
          "purchase_details": {
            "car_rental": null,
            "customer_reference_identifier": "51201",
            "local_tax_amount": null,
            "local_tax_currency": "usd",
            "lodging": {
              "check_in_date": "2023-07-20",
              "daily_room_rate_amount": 1000,
              "daily_room_rate_currency": "usd",
              "extra_charges": "restaurant",
              "folio_cash_advances_amount": 0,
              "folio_cash_advances_currency": "usd",
              "food_beverage_charges_amount": 0,
              "food_beverage_charges_currency": "usd",
              "no_show_indicator": "no_show",
              "prepaid_expenses_amount": 0,
              "prepaid_expenses_currency": "usd",
              "room_nights": 1,
              "total_room_tax_amount": 100,
              "total_room_tax_currency": "usd",
              "total_tax_amount": 100,
              "total_tax_currency": "usd"
            },
            "national_tax_amount": null,
            "national_tax_currency": "usd",
            "purchase_identifier": "10203",
            "purchase_identifier_format": "order_number",
            "travel": null
          },
          "transaction_id": "transaction_uyrp7fld2ium70oa7oi",
          "type": "card_refund"
        },
        "properties": {
          "amount": {
            "description": "The amount in the minor unit of the transaction's settlement currency. For dollars, for example, this is cents.",
            "type": "integer"
          },
          "card_payment_id": {
            "description": "The ID of the Card Payment this transaction belongs to.",
            "type": "string"
          },
          "cashback": {
            "anyOf": [
              {
                "description": "Cashback debited for this transaction, if eligible. Cashback is paid out in aggregate, monthly.",
                "example": {
                  "amount": "0.137465",
                  "currency": "USD"
                },
                "properties": {
                  "amount": {
                    "description": "The cashback amount given as a string containing a decimal number. The amount is a positive number if it will be credited to you (e.g., settlements) and a negative number if it will be debited (e.g., refunds).",
                    "pattern": "^-?\\d+(\\.\\d+)?$",
                    "type": "string"
                  },
                  "currency": {
                    "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the cashback.",
                    "enum": [
                      "CAD",
                      "CHF",
                      "EUR",
                      "GBP",
                      "JPY",
                      "USD"
                    ],
                    "type": "string",
                    "x-enum-descriptions": [
                      "Canadian Dollar (CAD)",
                      "Swiss Franc (CHF)",
                      "Euro (EUR)",
                      "British Pound (GBP)",
                      "Japanese Yen (JPY)",
                      "US Dollar (USD)"
                    ]
                  }
                },
                "required": [
                  "amount",
                  "currency"
                ],
                "title": "Cashback",
                "type": "object",
                "x-title-plural": "Cashbacks"
              },
              {
                "type": "null"
              }
            ]
          },
          "currency": {
            "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's settlement currency.",
            "enum": [
              "CAD",
              "CHF",
              "EUR",
              "GBP",
              "JPY",
              "USD"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "Canadian Dollar (CAD)",
              "Swiss Franc (CHF)",
              "Euro (EUR)",
              "British Pound (GBP)",
              "Japanese Yen (JPY)",
              "US Dollar (USD)"
            ]
          },
          "id": {
            "description": "The Card Refund identifier.",
            "type": "string"
          },
          "interchange": {
            "anyOf": [
              {
                "description": "Interchange assessed as a part of this transaciton.",
                "example": {
                  "amount": "0.137465",
                  "code": "271",
                  "currency": "USD"
                },
                "properties": {
                  "amount": {
                    "description": "The interchange amount given as a string containing a decimal number. The amount is a positive number if it is credited to Increase (e.g., settlements) and a negative number if it is debited (e.g., refunds).",
                    "pattern": "^-?\\d+(\\.\\d+)?$",
                    "type": "string"
                  },
                  "code": {
                    "anyOf": [
                      {
                        "description": "The card network specific interchange code.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "currency": {
                    "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the interchange reimbursement.",
                    "enum": [
                      "CAD",
                      "CHF",
                      "EUR",
                      "GBP",
                      "JPY",
                      "USD"
                    ],
                    "type": "string",
                    "x-enum-descriptions": [
                      "Canadian Dollar (CAD)",
                      "Swiss Franc (CHF)",
                      "Euro (EUR)",
                      "British Pound (GBP)",
                      "Japanese Yen (JPY)",
                      "US Dollar (USD)"
                    ]
                  }
                },
                "required": [
                  "amount",
                  "currency",
                  "code"
                ],
                "title": "Card Interchange",
                "type": "object",
                "x-title-plural": "Card Interchanges"
              },
              {
                "type": "null"
              }
            ]
          },
          "merchant_acceptor_id": {
            "description": "The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.",
            "type": "string"
          },
          "merchant_category_code": {
            "description": "The 4-digit MCC describing the merchant's business.",
            "type": "string"
          },
          "merchant_city": {
            "description": "The city the merchant resides in.",
            "type": "string"
          },
          "merchant_country": {
            "description": "The country the merchant resides in.",
            "type": "string"
          },
          "merchant_name": {
            "description": "The name of the merchant.",
            "type": "string"
          },
          "merchant_postal_code": {
            "anyOf": [
              {
                "description": "The merchant's postal code. For US merchants this is always a 5-digit ZIP code.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "merchant_state": {
            "anyOf": [
              {
                "description": "The state the merchant resides in.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "network_identifiers": {
            "description": "Network-specific identifiers for this refund.",
            "properties": {
              "acquirer_business_id": {
                "description": "A network assigned business ID that identifies the acquirer that processed this transaction.",
                "type": "string"
              },
              "acquirer_reference_number": {
                "description": "A globally unique identifier for this settlement.",
                "type": "string"
              },
              "transaction_id": {
                "anyOf": [
                  {
                    "description": "A globally unique transaction identifier provided by the card network, used across multiple life-cycle requests.",
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "required": [
              "transaction_id",
              "acquirer_reference_number",
              "acquirer_business_id"
            ],
            "title": "Network Identifiers",
            "type": "object",
            "x-title-plural": "Network Identifiers"
          },
          "presentment_amount": {
            "description": "The amount in the minor unit of the transaction's presentment currency.",
            "type": "integer"
          },
          "presentment_currency": {
            "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's presentment currency.",
            "type": "string"
          },
          "purchase_details": {
            "anyOf": [
              {
                "description": "Additional details about the card purchase, such as tax and industry-specific fields.",
                "example": {
                  "car_rental": null,
                  "customer_reference_identifier": "51201",
                  "local_tax_amount": null,
                  "local_tax_currency": "usd",
                  "lodging": {
                    "check_in_date": "2023-07-20",
                    "daily_room_rate_amount": 1000,
                    "daily_room_rate_currency": "usd",
                    "extra_charges": "restaurant",
                    "folio_cash_advances_amount": 0,
                    "folio_cash_advances_currency": "usd",
                    "food_beverage_charges_amount": 0,
                    "food_beverage_charges_currency": "usd",
                    "no_show_indicator": "no_show",
                    "prepaid_expenses_amount": 0,
                    "prepaid_expenses_currency": "usd",
                    "room_nights": 1,
                    "total_room_tax_amount": 100,
                    "total_room_tax_currency": "usd",
                    "total_tax_amount": 100,
                    "total_tax_currency": "usd"
                  },
                  "national_tax_amount": null,
                  "national_tax_currency": "usd",
                  "purchase_identifier": "10203",
                  "purchase_identifier_format": "order_number",
                  "travel": null
                },
                "properties": {
                  "car_rental": {
                    "anyOf": [
                      {
                        "description": "Fields specific to car rentals.",
                        "properties": {
                          "car_class_code": {
                            "anyOf": [
                              {
                                "description": "Code indicating the vehicle's class.",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "checkout_date": {
                            "anyOf": [
                              {
                                "description": "Date the customer picked up the car or, in the case of a no-show or pre-pay transaction, the scheduled pick up date.",
                                "format": "date",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "daily_rental_rate_amount": {
                            "anyOf": [
                              {
                                "description": "Daily rate being charged for the vehicle.",
                                "type": "integer"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "daily_rental_rate_currency": {
                            "anyOf": [
                              {
                                "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the daily rental rate.",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "days_rented": {
                            "anyOf": [
                              {
                                "description": "Number of days the vehicle was rented.",
                                "type": "integer"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "extra_charges": {
                            "anyOf": [
                              {
                                "description": "Additional charges (gas, late fee, etc.) being billed.",
                                "enum": [
                                  "no_extra_charge",
                                  "gas",
                                  "extra_mileage",
                                  "late_return",
                                  "one_way_service_fee",
                                  "parking_violation"
                                ],
                                "type": "string",
                                "x-enum-descriptions": [
                                  "No extra charge",
                                  "Gas",
                                  "Extra mileage",
                                  "Late return",
                                  "One way service fee",
                                  "Parking violation"
                                ]
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "fuel_charges_amount": {
                            "anyOf": [
                              {
                                "description": "Fuel charges for the vehicle.",
                                "type": "integer"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "fuel_charges_currency": {
                            "anyOf": [
                              {
                                "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the fuel charges assessed.",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "insurance_charges_amount": {
                            "anyOf": [
                              {
                                "description": "Any insurance being charged for the vehicle.",
                                "type": "integer"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "insurance_charges_currency": {
                            "anyOf": [
                              {
                                "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the insurance charges assessed.",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "no_show_indicator": {
                            "anyOf": [
                              {
                                "description": "An indicator that the cardholder is being billed for a reserved vehicle that was not actually rented (that is, a \"no-show\" charge).",
                                "enum": [
                                  "not_applicable",
                                  "no_show_for_specialized_vehicle"
                                ],
                                "type": "string",
                                "x-enum-descriptions": [
                                  "Not applicable",
                                  "No show for specialized vehicle"
                                ]
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "one_way_drop_off_charges_amount": {
                            "anyOf": [
                              {
                                "description": "Charges for returning the vehicle at a different location than where it was picked up.",
                                "type": "integer"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "one_way_drop_off_charges_currency": {
                            "anyOf": [
                              {
                                "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the one-way drop-off charges assessed.",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "renter_name": {
                            "anyOf": [
                              {
                                "description": "Name of the person renting the vehicle.",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "weekly_rental_rate_amount": {
                            "anyOf": [
                              {
                                "description": "Weekly rate being charged for the vehicle.",
                                "type": "integer"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "weekly_rental_rate_currency": {
                            "anyOf": [
                              {
                                "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the weekly rental rate.",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "required": [
                          "extra_charges",
                          "days_rented",
                          "no_show_indicator",
                          "checkout_date",
                          "daily_rental_rate_amount",
                          "daily_rental_rate_currency",
                          "weekly_rental_rate_amount",
                          "weekly_rental_rate_currency",
                          "insurance_charges_amount",
                          "insurance_charges_currency",
                          "fuel_charges_amount",
                          "fuel_charges_currency",
                          "one_way_drop_off_charges_amount",
                          "one_way_drop_off_charges_currency",
                          "car_class_code",
                          "renter_name"
                        ],
                        "title": "Car Rental",
                        "type": "object",
                        "x-title-plural": "Car Rentals"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "customer_reference_identifier": {
                    "anyOf": [
                      {
                        "description": "An identifier from the merchant for the customer or consumer.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "local_tax_amount": {
                    "anyOf": [
                      {
                        "description": "The state or provincial tax amount in minor units.",
                        "type": "integer"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "local_tax_currency": {
                    "anyOf": [
                      {
                        "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the local tax assessed.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "lodging": {
                    "anyOf": [
                      {
                        "description": "Fields specific to lodging.",
                        "properties": {
                          "check_in_date": {
                            "anyOf": [
                              {
                                "description": "Date the customer checked in.",
                                "format": "date",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "daily_room_rate_amount": {
                            "anyOf": [
                              {
                                "description": "Daily rate being charged for the room.",
                                "type": "integer"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "daily_room_rate_currency": {
                            "anyOf": [
                              {
                                "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the daily room rate.",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "extra_charges": {
                            "anyOf": [
                              {
                                "description": "Additional charges (phone, late check-out, etc.) being billed.",
                                "enum": [
                                  "no_extra_charge",
                                  "restaurant",
                                  "gift_shop",
                                  "mini_bar",
                                  "telephone",
                                  "other",
                                  "laundry"
                                ],
                                "type": "string",
                                "x-enum-descriptions": [
                                  "No extra charge",
                                  "Restaurant",
                                  "Gift shop",
                                  "Mini bar",
                                  "Telephone",
                                  "Other",
                                  "Laundry"
                                ]
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "folio_cash_advances_amount": {
                            "anyOf": [
                              {
                                "description": "Folio cash advances for the room.",
                                "type": "integer"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "folio_cash_advances_currency": {
                            "anyOf": [
                              {
                                "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the folio cash advances.",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "food_beverage_charges_amount": {
                            "anyOf": [
                              {
                                "description": "Food and beverage charges for the room.",
                                "type": "integer"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "food_beverage_charges_currency": {
                            "anyOf": [
                              {
                                "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the food and beverage charges.",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "no_show_indicator": {
                            "anyOf": [
                              {
                                "description": "Indicator that the cardholder is being billed for a reserved room that was not actually used.",
                                "enum": [
                                  "not_applicable",
                                  "no_show"
                                ],
                                "type": "string",
                                "x-enum-descriptions": [
                                  "Not applicable",
                                  "No show"
                                ]
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "prepaid_expenses_amount": {
                            "anyOf": [
                              {
                                "description": "Prepaid expenses being charged for the room.",
                                "type": "integer"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "prepaid_expenses_currency": {
                            "anyOf": [
                              {
                                "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the prepaid expenses.",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "room_nights": {
                            "anyOf": [
                              {
                                "description": "Number of nights the room was rented.",
                                "type": "integer"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "total_room_tax_amount": {
                            "anyOf": [
                              {
                                "description": "Total room tax being charged.",
                                "type": "integer"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "total_room_tax_currency": {
                            "anyOf": [
                              {
                                "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the total room tax.",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "total_tax_amount": {
                            "anyOf": [
                              {
                                "description": "Total tax being charged for the room.",
                                "type": "integer"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "total_tax_currency": {
                            "anyOf": [
                              {
                                "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the total tax assessed.",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "required": [
                          "no_show_indicator",
                          "extra_charges",
                          "check_in_date",
                          "daily_room_rate_amount",
                          "daily_room_rate_currency",
                          "total_tax_amount",
                          "total_tax_currency",
                          "prepaid_expenses_amount",
                          "prepaid_expenses_currency",
                          "food_beverage_charges_amount",
                          "food_beverage_charges_currency",
                          "folio_cash_advances_amount",
                          "folio_cash_advances_currency",
                          "room_nights",
                          "total_room_tax_amount",
                          "total_room_tax_currency"
                        ],
                        "title": "Lodging",
                        "type": "object",
                        "x-title-plural": "Lodgings"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "national_tax_amount": {
                    "anyOf": [
                      {
                        "description": "The national tax amount in minor units.",
                        "type": "integer"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "national_tax_currency": {
                    "anyOf": [
                      {
                        "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the local tax assessed.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "purchase_identifier": {
                    "anyOf": [
                      {
                        "description": "An identifier from the merchant for the purchase to the issuer and cardholder.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "purchase_identifier_format": {
                    "anyOf": [
                      {
                        "description": "The format of the purchase identifier.",
                        "enum": [
                          "free_text",
                          "order_number",
                          "rental_agreement_number",
                          "hotel_folio_number",
                          "invoice_number"
                        ],
                        "type": "string",
                        "x-enum-descriptions": [
                          "Free text",
                          "Order number",
                          "Rental agreement number",
                          "Hotel folio number",
                          "Invoice number"
                        ]
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "travel": {
                    "anyOf": [
                      {
                        "description": "Fields specific to travel.",
                        "properties": {
                          "ancillary": {
                            "anyOf": [
                              {
                                "description": "Ancillary purchases in addition to the airfare.",
                                "properties": {
                                  "connected_ticket_document_number": {
                                    "anyOf": [
                                      {
                                        "description": "If this purchase has a connection or relationship to another purchase, such as a baggage fee for a passenger transport ticket, this field should contain the ticket document number for the other purchase.",
                                        "type": "string"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ]
                                  },
                                  "credit_reason_indicator": {
                                    "anyOf": [
                                      {
                                        "description": "Indicates the reason for a credit to the cardholder.",
                                        "enum": [
                                          "no_credit",
                                          "passenger_transport_ancillary_purchase_cancellation",
                                          "airline_ticket_and_passenger_transport_ancillary_purchase_cancellation",
                                          "other"
                                        ],
                                        "type": "string",
                                        "x-enum-descriptions": [
                                          "No credit",
                                          "Passenger transport ancillary purchase cancellation",
                                          "Airline ticket and passenger transport ancillary purchase cancellation",
                                          "Other"
                                        ]
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ]
                                  },
                                  "passenger_name_or_description": {
                                    "anyOf": [
                                      {
                                        "description": "Name of the passenger or description of the ancillary purchase.",
                                        "type": "string"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ]
                                  },
                                  "services": {
                                    "description": "Additional travel charges, such as baggage fees.",
                                    "items": {
                                      "properties": {
                                        "category": {
                                          "anyOf": [
                                            {
                                              "description": "Category of the ancillary service.",
                                              "enum": [
                                                "none",
                                                "bundled_service",
                                                "baggage_fee",
                                                "change_fee",
                                                "cargo",
                                                "carbon_offset",
                                                "frequent_flyer",
                                                "gift_card",
                                                "ground_transport",
                                                "in_flight_entertainment",
                                                "lounge",
                                                "medical",
                                                "meal_beverage",
                                                "other",
                                                "passenger_assist_fee",
                                                "pets",
                                                "seat_fees",
                                                "standby",
                                                "service_fee",
                                                "store",
                                                "travel_service",
                                                "unaccompanied_travel",
                                                "upgrades",
                                                "wifi"
                                              ],
                                              "type": "string",
                                              "x-enum-descriptions": [
                                                "None",
                                                "Bundled service",
                                                "Baggage fee",
                                                "Change fee",
                                                "Cargo",
                                                "Carbon offset",
                                                "Frequent flyer",
                                                "Gift card",
                                                "Ground transport",
                                                "In-flight entertainment",
                                                "Lounge",
                                                "Medical",
                                                "Meal beverage",
                                                "Other",
                                                "Passenger assist fee",
                                                "Pets",
                                                "Seat fees",
                                                "Standby",
                                                "Service fee",
                                                "Store",
                                                "Travel service",
                                                "Unaccompanied travel",
                                                "Upgrades",
                                                "Wi-fi"
                                              ]
                                            },
                                            {
                                              "type": "null"
                                            }
                                          ]
                                        },
                                        "sub_category": {
                                          "anyOf": [
                                            {
                                              "description": "Sub-category of the ancillary service, free-form.",
                                              "type": "string"
                                            },
                                            {
                                              "type": "null"
                                            }
                                          ]
                                        }
                                      },
                                      "required": [
                                        "category",
                                        "sub_category"
                                      ],
                                      "title": "Services Element",
                                      "type": "object",
                                      "x-title-plural": "Services Elements"
                                    },
                                    "type": "array"
                                  },
                                  "ticket_document_number": {
                                    "anyOf": [
                                      {
                                        "description": "Ticket document number.",
                                        "type": "string"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ]
                                  }
                                },
                                "required": [
                                  "ticket_document_number",
                                  "passenger_name_or_description",
                                  "connected_ticket_document_number",
                                  "credit_reason_indicator",
                                  "services"
                                ],
                                "title": "Ancillary",
                                "type": "object",
                                "x-title-plural": "Ancillaries"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "computerized_reservation_system": {
                            "anyOf": [
                              {
                                "description": "Indicates the computerized reservation system used to book the ticket.",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "credit_reason_indicator": {
                            "anyOf": [
                              {
                                "description": "Indicates the reason for a credit to the cardholder.",
                                "enum": [
                                  "no_credit",
                                  "passenger_transport_ancillary_purchase_cancellation",
                                  "airline_ticket_and_passenger_transport_ancillary_purchase_cancellation",
                                  "airline_ticket_cancellation",
                                  "other",
                                  "partial_refund_of_airline_ticket"
                                ],
                                "type": "string",
                                "x-enum-descriptions": [
                                  "No credit",
                                  "Passenger transport ancillary purchase cancellation",
                                  "Airline ticket and passenger transport ancillary purchase cancellation",
                                  "Airline ticket cancellation",
                                  "Other",
                                  "Partial refund of airline ticket"
                                ]
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "departure_date": {
                            "anyOf": [
                              {
                                "description": "Date of departure.",
                                "format": "date",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "origination_city_airport_code": {
                            "anyOf": [
                              {
                                "description": "Code for the originating city or airport.",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "passenger_name": {
                            "anyOf": [
                              {
                                "description": "Name of the passenger.",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "restricted_ticket_indicator": {
                            "anyOf": [
                              {
                                "description": "Indicates whether this ticket is non-refundable.",
                                "enum": [
                                  "no_restrictions",
                                  "restricted_non_refundable_ticket"
                                ],
                                "type": "string",
                                "x-enum-descriptions": [
                                  "No restrictions",
                                  "Restricted non-refundable ticket"
                                ]
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "ticket_change_indicator": {
                            "anyOf": [
                              {
                                "description": "Indicates why a ticket was changed.",
                                "enum": [
                                  "none",
                                  "change_to_existing_ticket",
                                  "new_ticket"
                                ],
                                "type": "string",
                                "x-enum-descriptions": [
                                  "None",
                                  "Change to existing ticket",
                                  "New ticket"
                                ]
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "ticket_number": {
                            "anyOf": [
                              {
                                "description": "Ticket number.",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "travel_agency_code": {
                            "anyOf": [
                              {
                                "description": "Code for the travel agency if the ticket was issued by a travel agency.",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "travel_agency_name": {
                            "anyOf": [
                              {
                                "description": "Name of the travel agency if the ticket was issued by a travel agency.",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "trip_legs": {
                            "anyOf": [
                              {
                                "description": "Fields specific to each leg of the journey.",
                                "items": {
                                  "properties": {
                                    "carrier_code": {
                                      "anyOf": [
                                        {
                                          "description": "Carrier code (e.g., United Airlines, Jet Blue, etc.).",
                                          "type": "string"
                                        },
                                        {
                                          "type": "null"
                                        }
                                      ]
                                    },
                                    "destination_city_airport_code": {
                                      "anyOf": [
                                        {
                                          "description": "Code for the destination city or airport.",
                                          "type": "string"
                                        },
                                        {
                                          "type": "null"
                                        }
                                      ]
                                    },
                                    "fare_basis_code": {
                                      "anyOf": [
                                        {
                                          "description": "Fare basis code.",
                                          "type": "string"
                                        },
                                        {
                                          "type": "null"
                                        }
                                      ]
                                    },
                                    "flight_number": {
                                      "anyOf": [
                                        {
                                          "description": "Flight number.",
                                          "type": "string"
                                        },
                                        {
                                          "type": "null"
                                        }
                                      ]
                                    },
                                    "service_class": {
                                      "anyOf": [
                                        {
                                          "description": "Service class (e.g., first class, business class, etc.).",
                                          "type": "string"
                                        },
                                        {
                                          "type": "null"
                                        }
                                      ]
                                    },
                                    "stop_over_code": {
                                      "anyOf": [
                                        {
                                          "description": "Indicates whether a stopover is allowed on this ticket.",
                                          "enum": [
                                            "none",
                                            "stop_over_allowed",
                                            "stop_over_not_allowed"
                                          ],
                                          "type": "string",
                                          "x-enum-descriptions": [
                                            "None",
                                            "Stop over allowed",
                                            "Stop over not allowed"
                                          ]
                                        },
                                        {
                                          "type": "null"
                                        }
                                      ]
                                    }
                                  },
                                  "required": [
                                    "flight_number",
                                    "carrier_code",
                                    "fare_basis_code",
                                    "service_class",
                                    "stop_over_code",
                                    "destination_city_airport_code"
                                  ],
                                  "title": "Trip Legs Element",
                                  "type": "object",
                                  "x-title-plural": "Trip Legs Elements"
                                },
                                "type": "array"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "required": [
                          "ticket_number",
                          "passenger_name",
                          "departure_date",
                          "origination_city_airport_code",
                          "travel_agency_code",
                          "travel_agency_name",
                          "restricted_ticket_indicator",
                          "computerized_reservation_system",
                          "credit_reason_indicator",
                          "ticket_change_indicator",
                          "trip_legs",
                          "ancillary"
                        ],
                        "title": "Travel",
                        "type": "object",
                        "x-title-plural": "Travels"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  }
                },
                "required": [
                  "purchase_identifier",
                  "purchase_identifier_format",
                  "customer_reference_identifier",
                  "local_tax_amount",
                  "local_tax_currency",
                  "national_tax_amount",
                  "national_tax_currency",
                  "car_rental",
                  "lodging",
                  "travel"
                ],
                "title": "Card Purchase Details",
                "type": "object",
                "x-title-plural": "Card Purchase Details"
              },
              {
                "type": "null"
              }
            ]
          },
          "transaction_id": {
            "description": "The identifier of the Transaction associated with this Transaction.",
            "type": "string"
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `card_refund`.",
            "enum": [
              "card_refund"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "card_payment_id",
          "amount",
          "currency",
          "presentment_amount",
          "presentment_currency",
          "merchant_acceptor_id",
          "merchant_city",
          "merchant_state",
          "merchant_postal_code",
          "merchant_country",
          "merchant_name",
          "merchant_category_code",
          "interchange",
          "cashback",
          "purchase_details",
          "transaction_id",
          "network_identifiers",
          "type"
        ],
        "title": "Card Refund",
        "type": "object",
        "x-title-plural": "Card Refunds"
      },
      "card_reversal": {
        "description": "Card Reversals cancel parts of or the entirety of an existing Card Authorization.",
        "example": {
          "card_authorization_id": "card_authorization_6iqxap6ivd0fo5eu3i8x",
          "currency": "USD",
          "id": "card_reversal_8vr9qy60cgf5d0slpb68",
          "merchant_acceptor_id": "5665270011000168",
          "merchant_category_code": "5734",
          "merchant_city": "New York",
          "merchant_country": "US",
          "merchant_descriptor": "AMAZON.COM",
          "merchant_postal_code": "10045",
          "merchant_state": "NY",
          "network": "visa",
          "network_identifiers": {
            "retrieval_reference_number": "785867080153",
            "trace_number": "487941",
            "transaction_id": "627199945183184"
          },
          "pending_transaction_id": "pending_transaction_k1sfetcau2qbvjbzgju4",
          "reversal_amount": 20,
          "reversal_reason": "reversed_by_customer",
          "terminal_id": "RCN5VNXS",
          "type": "card_reversal",
          "updated_authorization_amount": 80
        },
        "properties": {
          "card_authorization_id": {
            "description": "The identifier for the Card Authorization this reverses.",
            "type": "string"
          },
          "currency": {
            "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the reversal's currency.",
            "enum": [
              "CAD",
              "CHF",
              "EUR",
              "GBP",
              "JPY",
              "USD"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "Canadian Dollar (CAD)",
              "Swiss Franc (CHF)",
              "Euro (EUR)",
              "British Pound (GBP)",
              "Japanese Yen (JPY)",
              "US Dollar (USD)"
            ]
          },
          "id": {
            "description": "The Card Reversal identifier.",
            "type": "string"
          },
          "merchant_acceptor_id": {
            "description": "The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.",
            "type": "string"
          },
          "merchant_category_code": {
            "description": "The Merchant Category Code (commonly abbreviated as MCC) of the merchant the card is transacting with.",
            "type": "string"
          },
          "merchant_city": {
            "anyOf": [
              {
                "description": "The city the merchant resides in.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "merchant_country": {
            "anyOf": [
              {
                "description": "The country the merchant resides in.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "merchant_descriptor": {
            "description": "The merchant descriptor of the merchant the card is transacting with.",
            "type": "string"
          },
          "merchant_postal_code": {
            "anyOf": [
              {
                "description": "The merchant's postal code. For US merchants this is either a 5-digit or 9-digit ZIP code, where the first 5 and last 4 are separated by a dash.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "merchant_state": {
            "anyOf": [
              {
                "description": "The state the merchant resides in.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "network": {
            "description": "The card network used to process this card authorization.",
            "enum": [
              "visa"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "Visa"
            ]
          },
          "network_identifiers": {
            "description": "Network-specific identifiers for a specific request or transaction.",
            "example": {
              "retrieval_reference_number": "785867080153",
              "trace_number": "487941",
              "transaction_id": "627199945183184"
            },
            "properties": {
              "retrieval_reference_number": {
                "anyOf": [
                  {
                    "description": "A life-cycle identifier used across e.g., an authorization and a reversal. Expected to be unique per acquirer within a window of time. For some card networks the retrieval reference number includes the trace counter.",
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "trace_number": {
                "anyOf": [
                  {
                    "description": "A counter used to verify an individual authorization. Expected to be unique per acquirer within a window of time.",
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "transaction_id": {
                "anyOf": [
                  {
                    "description": "A globally unique transaction identifier provided by the card network, used across multiple life-cycle requests.",
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "required": [
              "transaction_id",
              "trace_number",
              "retrieval_reference_number"
            ],
            "type": "object",
            "x-title-plural": "s"
          },
          "pending_transaction_id": {
            "anyOf": [
              {
                "description": "The identifier of the Pending Transaction associated with this Card Reversal.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "reversal_amount": {
            "description": "The amount of this reversal in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
            "type": "integer"
          },
          "reversal_reason": {
            "anyOf": [
              {
                "description": "Why this reversal was initiated.",
                "enum": [
                  "reversed_by_customer",
                  "reversed_by_network_or_acquirer",
                  "reversed_by_point_of_sale",
                  "partial_reversal"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "The Card Reversal was initiated at the customer's request.",
                  "The Card Reversal was initiated by the network or acquirer.",
                  "The Card Reversal was initiated by the point of sale device.",
                  "The Card Reversal was a partial reversal, for any reason."
                ]
              },
              {
                "type": "null"
              }
            ]
          },
          "terminal_id": {
            "anyOf": [
              {
                "description": "The terminal identifier (commonly abbreviated as TID) of the terminal the card is transacting with.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `card_reversal`.",
            "enum": [
              "card_reversal"
            ],
            "type": "string"
          },
          "updated_authorization_amount": {
            "description": "The amount left pending on the Card Authorization in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
            "type": "integer"
          }
        },
        "required": [
          "id",
          "reversal_amount",
          "updated_authorization_amount",
          "currency",
          "card_authorization_id",
          "network",
          "pending_transaction_id",
          "network_identifiers",
          "reversal_reason",
          "merchant_acceptor_id",
          "merchant_descriptor",
          "merchant_category_code",
          "merchant_city",
          "merchant_state",
          "merchant_postal_code",
          "merchant_country",
          "terminal_id",
          "type"
        ],
        "title": "Card Reversal",
        "type": "object",
        "x-title-plural": "Card Reversals"
      },
      "card_settlement": {
        "description": "Card Settlements are card transactions that have cleared and settled. While a settlement is usually preceded by an authorization, an acquirer can also directly clear a transaction without first authorizing it.",
        "example": {
          "amount": 100,
          "card_authorization": null,
          "card_payment_id": "card_payment_nd3k2kacrqjli8482ave",
          "cashback": null,
          "currency": "USD",
          "id": "card_settlement_khv5kfeu0vndj291omg6",
          "interchange": {
            "amount": "0.137465",
            "code": "271",
            "currency": "USD"
          },
          "merchant_acceptor_id": "5665270011000168",
          "merchant_category_code": "5734",
          "merchant_city": "New York",
          "merchant_country": "US",
          "merchant_name": "AMAZON.COM",
          "merchant_postal_code": "10045",
          "merchant_state": "NY",
          "network_identifiers": {
            "acquirer_business_id": "69650702",
            "acquirer_reference_number": "83163715445437604865089",
            "transaction_id": "627199945183184"
          },
          "pending_transaction_id": null,
          "presentment_amount": 100,
          "presentment_currency": "USD",
          "purchase_details": {
            "car_rental": null,
            "customer_reference_identifier": "51201",
            "local_tax_amount": null,
            "local_tax_currency": "usd",
            "lodging": {
              "check_in_date": "2023-07-20",
              "daily_room_rate_amount": 1000,
              "daily_room_rate_currency": "usd",
              "extra_charges": "restaurant",
              "folio_cash_advances_amount": 0,
              "folio_cash_advances_currency": "usd",
              "food_beverage_charges_amount": 0,
              "food_beverage_charges_currency": "usd",
              "no_show_indicator": "no_show",
              "prepaid_expenses_amount": 0,
              "prepaid_expenses_currency": "usd",
              "room_nights": 1,
              "total_room_tax_amount": 100,
              "total_room_tax_currency": "usd",
              "total_tax_amount": 100,
              "total_tax_currency": "usd"
            },
            "national_tax_amount": null,
            "national_tax_currency": "usd",
            "purchase_identifier": "10203",
            "purchase_identifier_format": "order_number",
            "travel": null
          },
          "scheme_fees": [],
          "transaction_id": "transaction_uyrp7fld2ium70oa7oi",
          "type": "card_settlement"
        },
        "properties": {
          "amount": {
            "description": "The amount in the minor unit of the transaction's settlement currency. For dollars, for example, this is cents.",
            "type": "integer"
          },
          "card_authorization": {
            "anyOf": [
              {
                "description": "The Card Authorization that was created prior to this Card Settlement, if one exists.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "card_payment_id": {
            "description": "The ID of the Card Payment this transaction belongs to.",
            "type": "string"
          },
          "cashback": {
            "anyOf": [
              {
                "description": "Cashback earned on this transaction, if eligible. Cashback is paid out in aggregate, monthly.",
                "example": {
                  "amount": "0.137465",
                  "currency": "USD"
                },
                "properties": {
                  "amount": {
                    "description": "The cashback amount given as a string containing a decimal number. The amount is a positive number if it will be credited to you (e.g., settlements) and a negative number if it will be debited (e.g., refunds).",
                    "pattern": "^-?\\d+(\\.\\d+)?$",
                    "type": "string"
                  },
                  "currency": {
                    "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the cashback.",
                    "enum": [
                      "CAD",
                      "CHF",
                      "EUR",
                      "GBP",
                      "JPY",
                      "USD"
                    ],
                    "type": "string",
                    "x-enum-descriptions": [
                      "Canadian Dollar (CAD)",
                      "Swiss Franc (CHF)",
                      "Euro (EUR)",
                      "British Pound (GBP)",
                      "Japanese Yen (JPY)",
                      "US Dollar (USD)"
                    ]
                  }
                },
                "required": [
                  "amount",
                  "currency"
                ],
                "title": "Cashback",
                "type": "object",
                "x-title-plural": "Cashbacks"
              },
              {
                "type": "null"
              }
            ]
          },
          "currency": {
            "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's settlement currency.",
            "enum": [
              "CAD",
              "CHF",
              "EUR",
              "GBP",
              "JPY",
              "USD"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "Canadian Dollar (CAD)",
              "Swiss Franc (CHF)",
              "Euro (EUR)",
              "British Pound (GBP)",
              "Japanese Yen (JPY)",
              "US Dollar (USD)"
            ]
          },
          "id": {
            "description": "The Card Settlement identifier.",
            "type": "string"
          },
          "interchange": {
            "anyOf": [
              {
                "description": "Interchange assessed as a part of this transaction.",
                "example": {
                  "amount": "0.137465",
                  "code": "271",
                  "currency": "USD"
                },
                "properties": {
                  "amount": {
                    "description": "The interchange amount given as a string containing a decimal number. The amount is a positive number if it is credited to Increase (e.g., settlements) and a negative number if it is debited (e.g., refunds).",
                    "pattern": "^-?\\d+(\\.\\d+)?$",
                    "type": "string"
                  },
                  "code": {
                    "anyOf": [
                      {
                        "description": "The card network specific interchange code.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "currency": {
                    "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the interchange reimbursement.",
                    "enum": [
                      "CAD",
                      "CHF",
                      "EUR",
                      "GBP",
                      "JPY",
                      "USD"
                    ],
                    "type": "string",
                    "x-enum-descriptions": [
                      "Canadian Dollar (CAD)",
                      "Swiss Franc (CHF)",
                      "Euro (EUR)",
                      "British Pound (GBP)",
                      "Japanese Yen (JPY)",
                      "US Dollar (USD)"
                    ]
                  }
                },
                "required": [
                  "amount",
                  "currency",
                  "code"
                ],
                "title": "Card Interchange",
                "type": "object",
                "x-title-plural": "Card Interchanges"
              },
              {
                "type": "null"
              }
            ]
          },
          "merchant_acceptor_id": {
            "description": "The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.",
            "type": "string"
          },
          "merchant_category_code": {
            "description": "The 4-digit MCC describing the merchant's business.",
            "type": "string"
          },
          "merchant_city": {
            "description": "The city the merchant resides in.",
            "type": "string"
          },
          "merchant_country": {
            "description": "The country the merchant resides in.",
            "type": "string"
          },
          "merchant_name": {
            "description": "The name of the merchant.",
            "type": "string"
          },
          "merchant_postal_code": {
            "anyOf": [
              {
                "description": "The merchant's postal code. For US merchants this is always a 5-digit ZIP code.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "merchant_state": {
            "anyOf": [
              {
                "description": "The state the merchant resides in.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "network_identifiers": {
            "description": "Network-specific identifiers for this refund.",
            "properties": {
              "acquirer_business_id": {
                "description": "A network assigned business ID that identifies the acquirer that processed this transaction.",
                "type": "string"
              },
              "acquirer_reference_number": {
                "description": "A globally unique identifier for this settlement.",
                "type": "string"
              },
              "transaction_id": {
                "anyOf": [
                  {
                    "description": "A globally unique transaction identifier provided by the card network, used across multiple life-cycle requests.",
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "required": [
              "transaction_id",
              "acquirer_reference_number",
              "acquirer_business_id"
            ],
            "title": "Network Identifiers",
            "type": "object",
            "x-title-plural": "Network Identifiers"
          },
          "pending_transaction_id": {
            "anyOf": [
              {
                "description": "The identifier of the Pending Transaction associated with this Transaction.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "presentment_amount": {
            "description": "The amount in the minor unit of the transaction's presentment currency.",
            "type": "integer"
          },
          "presentment_currency": {
            "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's presentment currency.",
            "type": "string"
          },
          "purchase_details": {
            "anyOf": [
              {
                "description": "Additional details about the card purchase, such as tax and industry-specific fields.",
                "example": {
                  "car_rental": null,
                  "customer_reference_identifier": "51201",
                  "local_tax_amount": null,
                  "local_tax_currency": "usd",
                  "lodging": {
                    "check_in_date": "2023-07-20",
                    "daily_room_rate_amount": 1000,
                    "daily_room_rate_currency": "usd",
                    "extra_charges": "restaurant",
                    "folio_cash_advances_amount": 0,
                    "folio_cash_advances_currency": "usd",
                    "food_beverage_charges_amount": 0,
                    "food_beverage_charges_currency": "usd",
                    "no_show_indicator": "no_show",
                    "prepaid_expenses_amount": 0,
                    "prepaid_expenses_currency": "usd",
                    "room_nights": 1,
                    "total_room_tax_amount": 100,
                    "total_room_tax_currency": "usd",
                    "total_tax_amount": 100,
                    "total_tax_currency": "usd"
                  },
                  "national_tax_amount": null,
                  "national_tax_currency": "usd",
                  "purchase_identifier": "10203",
                  "purchase_identifier_format": "order_number",
                  "travel": null
                },
                "properties": {
                  "car_rental": {
                    "anyOf": [
                      {
                        "description": "Fields specific to car rentals.",
                        "properties": {
                          "car_class_code": {
                            "anyOf": [
                              {
                                "description": "Code indicating the vehicle's class.",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "checkout_date": {
                            "anyOf": [
                              {
                                "description": "Date the customer picked up the car or, in the case of a no-show or pre-pay transaction, the scheduled pick up date.",
                                "format": "date",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "daily_rental_rate_amount": {
                            "anyOf": [
                              {
                                "description": "Daily rate being charged for the vehicle.",
                                "type": "integer"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "daily_rental_rate_currency": {
                            "anyOf": [
                              {
                                "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the daily rental rate.",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "days_rented": {
                            "anyOf": [
                              {
                                "description": "Number of days the vehicle was rented.",
                                "type": "integer"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "extra_charges": {
                            "anyOf": [
                              {
                                "description": "Additional charges (gas, late fee, etc.) being billed.",
                                "enum": [
                                  "no_extra_charge",
                                  "gas",
                                  "extra_mileage",
                                  "late_return",
                                  "one_way_service_fee",
                                  "parking_violation"
                                ],
                                "type": "string",
                                "x-enum-descriptions": [
                                  "No extra charge",
                                  "Gas",
                                  "Extra mileage",
                                  "Late return",
                                  "One way service fee",
                                  "Parking violation"
                                ]
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "fuel_charges_amount": {
                            "anyOf": [
                              {
                                "description": "Fuel charges for the vehicle.",
                                "type": "integer"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "fuel_charges_currency": {
                            "anyOf": [
                              {
                                "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the fuel charges assessed.",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "insurance_charges_amount": {
                            "anyOf": [
                              {
                                "description": "Any insurance being charged for the vehicle.",
                                "type": "integer"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "insurance_charges_currency": {
                            "anyOf": [
                              {
                                "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the insurance charges assessed.",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "no_show_indicator": {
                            "anyOf": [
                              {
                                "description": "An indicator that the cardholder is being billed for a reserved vehicle that was not actually rented (that is, a \"no-show\" charge).",
                                "enum": [
                                  "not_applicable",
                                  "no_show_for_specialized_vehicle"
                                ],
                                "type": "string",
                                "x-enum-descriptions": [
                                  "Not applicable",
                                  "No show for specialized vehicle"
                                ]
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "one_way_drop_off_charges_amount": {
                            "anyOf": [
                              {
                                "description": "Charges for returning the vehicle at a different location than where it was picked up.",
                                "type": "integer"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "one_way_drop_off_charges_currency": {
                            "anyOf": [
                              {
                                "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the one-way drop-off charges assessed.",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "renter_name": {
                            "anyOf": [
                              {
                                "description": "Name of the person renting the vehicle.",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "weekly_rental_rate_amount": {
                            "anyOf": [
                              {
                                "description": "Weekly rate being charged for the vehicle.",
                                "type": "integer"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "weekly_rental_rate_currency": {
                            "anyOf": [
                              {
                                "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the weekly rental rate.",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "required": [
                          "extra_charges",
                          "days_rented",
                          "no_show_indicator",
                          "checkout_date",
                          "daily_rental_rate_amount",
                          "daily_rental_rate_currency",
                          "weekly_rental_rate_amount",
                          "weekly_rental_rate_currency",
                          "insurance_charges_amount",
                          "insurance_charges_currency",
                          "fuel_charges_amount",
                          "fuel_charges_currency",
                          "one_way_drop_off_charges_amount",
                          "one_way_drop_off_charges_currency",
                          "car_class_code",
                          "renter_name"
                        ],
                        "title": "Car Rental",
                        "type": "object",
                        "x-title-plural": "Car Rentals"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "customer_reference_identifier": {
                    "anyOf": [
                      {
                        "description": "An identifier from the merchant for the customer or consumer.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "local_tax_amount": {
                    "anyOf": [
                      {
                        "description": "The state or provincial tax amount in minor units.",
                        "type": "integer"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "local_tax_currency": {
                    "anyOf": [
                      {
                        "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the local tax assessed.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "lodging": {
                    "anyOf": [
                      {
                        "description": "Fields specific to lodging.",
                        "properties": {
                          "check_in_date": {
                            "anyOf": [
                              {
                                "description": "Date the customer checked in.",
                                "format": "date",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "daily_room_rate_amount": {
                            "anyOf": [
                              {
                                "description": "Daily rate being charged for the room.",
                                "type": "integer"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "daily_room_rate_currency": {
                            "anyOf": [
                              {
                                "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the daily room rate.",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "extra_charges": {
                            "anyOf": [
                              {
                                "description": "Additional charges (phone, late check-out, etc.) being billed.",
                                "enum": [
                                  "no_extra_charge",
                                  "restaurant",
                                  "gift_shop",
                                  "mini_bar",
                                  "telephone",
                                  "other",
                                  "laundry"
                                ],
                                "type": "string",
                                "x-enum-descriptions": [
                                  "No extra charge",
                                  "Restaurant",
                                  "Gift shop",
                                  "Mini bar",
                                  "Telephone",
                                  "Other",
                                  "Laundry"
                                ]
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "folio_cash_advances_amount": {
                            "anyOf": [
                              {
                                "description": "Folio cash advances for the room.",
                                "type": "integer"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "folio_cash_advances_currency": {
                            "anyOf": [
                              {
                                "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the folio cash advances.",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "food_beverage_charges_amount": {
                            "anyOf": [
                              {
                                "description": "Food and beverage charges for the room.",
                                "type": "integer"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "food_beverage_charges_currency": {
                            "anyOf": [
                              {
                                "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the food and beverage charges.",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "no_show_indicator": {
                            "anyOf": [
                              {
                                "description": "Indicator that the cardholder is being billed for a reserved room that was not actually used.",
                                "enum": [
                                  "not_applicable",
                                  "no_show"
                                ],
                                "type": "string",
                                "x-enum-descriptions": [
                                  "Not applicable",
                                  "No show"
                                ]
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "prepaid_expenses_amount": {
                            "anyOf": [
                              {
                                "description": "Prepaid expenses being charged for the room.",
                                "type": "integer"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "prepaid_expenses_currency": {
                            "anyOf": [
                              {
                                "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the prepaid expenses.",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "room_nights": {
                            "anyOf": [
                              {
                                "description": "Number of nights the room was rented.",
                                "type": "integer"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "total_room_tax_amount": {
                            "anyOf": [
                              {
                                "description": "Total room tax being charged.",
                                "type": "integer"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "total_room_tax_currency": {
                            "anyOf": [
                              {
                                "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the total room tax.",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "total_tax_amount": {
                            "anyOf": [
                              {
                                "description": "Total tax being charged for the room.",
                                "type": "integer"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "total_tax_currency": {
                            "anyOf": [
                              {
                                "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the total tax assessed.",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "required": [
                          "no_show_indicator",
                          "extra_charges",
                          "check_in_date",
                          "daily_room_rate_amount",
                          "daily_room_rate_currency",
                          "total_tax_amount",
                          "total_tax_currency",
                          "prepaid_expenses_amount",
                          "prepaid_expenses_currency",
                          "food_beverage_charges_amount",
                          "food_beverage_charges_currency",
                          "folio_cash_advances_amount",
                          "folio_cash_advances_currency",
                          "room_nights",
                          "total_room_tax_amount",
                          "total_room_tax_currency"
                        ],
                        "title": "Lodging",
                        "type": "object",
                        "x-title-plural": "Lodgings"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "national_tax_amount": {
                    "anyOf": [
                      {
                        "description": "The national tax amount in minor units.",
                        "type": "integer"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "national_tax_currency": {
                    "anyOf": [
                      {
                        "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the local tax assessed.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "purchase_identifier": {
                    "anyOf": [
                      {
                        "description": "An identifier from the merchant for the purchase to the issuer and cardholder.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "purchase_identifier_format": {
                    "anyOf": [
                      {
                        "description": "The format of the purchase identifier.",
                        "enum": [
                          "free_text",
                          "order_number",
                          "rental_agreement_number",
                          "hotel_folio_number",
                          "invoice_number"
                        ],
                        "type": "string",
                        "x-enum-descriptions": [
                          "Free text",
                          "Order number",
                          "Rental agreement number",
                          "Hotel folio number",
                          "Invoice number"
                        ]
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "travel": {
                    "anyOf": [
                      {
                        "description": "Fields specific to travel.",
                        "properties": {
                          "ancillary": {
                            "anyOf": [
                              {
                                "description": "Ancillary purchases in addition to the airfare.",
                                "properties": {
                                  "connected_ticket_document_number": {
                                    "anyOf": [
                                      {
                                        "description": "If this purchase has a connection or relationship to another purchase, such as a baggage fee for a passenger transport ticket, this field should contain the ticket document number for the other purchase.",
                                        "type": "string"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ]
                                  },
                                  "credit_reason_indicator": {
                                    "anyOf": [
                                      {
                                        "description": "Indicates the reason for a credit to the cardholder.",
                                        "enum": [
                                          "no_credit",
                                          "passenger_transport_ancillary_purchase_cancellation",
                                          "airline_ticket_and_passenger_transport_ancillary_purchase_cancellation",
                                          "other"
                                        ],
                                        "type": "string",
                                        "x-enum-descriptions": [
                                          "No credit",
                                          "Passenger transport ancillary purchase cancellation",
                                          "Airline ticket and passenger transport ancillary purchase cancellation",
                                          "Other"
                                        ]
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ]
                                  },
                                  "passenger_name_or_description": {
                                    "anyOf": [
                                      {
                                        "description": "Name of the passenger or description of the ancillary purchase.",
                                        "type": "string"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ]
                                  },
                                  "services": {
                                    "description": "Additional travel charges, such as baggage fees.",
                                    "items": {
                                      "properties": {
                                        "category": {
                                          "anyOf": [
                                            {
                                              "description": "Category of the ancillary service.",
                                              "enum": [
                                                "none",
                                                "bundled_service",
                                                "baggage_fee",
                                                "change_fee",
                                                "cargo",
                                                "carbon_offset",
                                                "frequent_flyer",
                                                "gift_card",
                                                "ground_transport",
                                                "in_flight_entertainment",
                                                "lounge",
                                                "medical",
                                                "meal_beverage",
                                                "other",
                                                "passenger_assist_fee",
                                                "pets",
                                                "seat_fees",
                                                "standby",
                                                "service_fee",
                                                "store",
                                                "travel_service",
                                                "unaccompanied_travel",
                                                "upgrades",
                                                "wifi"
                                              ],
                                              "type": "string",
                                              "x-enum-descriptions": [
                                                "None",
                                                "Bundled service",
                                                "Baggage fee",
                                                "Change fee",
                                                "Cargo",
                                                "Carbon offset",
                                                "Frequent flyer",
                                                "Gift card",
                                                "Ground transport",
                                                "In-flight entertainment",
                                                "Lounge",
                                                "Medical",
                                                "Meal beverage",
                                                "Other",
                                                "Passenger assist fee",
                                                "Pets",
                                                "Seat fees",
                                                "Standby",
                                                "Service fee",
                                                "Store",
                                                "Travel service",
                                                "Unaccompanied travel",
                                                "Upgrades",
                                                "Wi-fi"
                                              ]
                                            },
                                            {
                                              "type": "null"
                                            }
                                          ]
                                        },
                                        "sub_category": {
                                          "anyOf": [
                                            {
                                              "description": "Sub-category of the ancillary service, free-form.",
                                              "type": "string"
                                            },
                                            {
                                              "type": "null"
                                            }
                                          ]
                                        }
                                      },
                                      "required": [
                                        "category",
                                        "sub_category"
                                      ],
                                      "title": "Services Element",
                                      "type": "object",
                                      "x-title-plural": "Services Elements"
                                    },
                                    "type": "array"
                                  },
                                  "ticket_document_number": {
                                    "anyOf": [
                                      {
                                        "description": "Ticket document number.",
                                        "type": "string"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ]
                                  }
                                },
                                "required": [
                                  "ticket_document_number",
                                  "passenger_name_or_description",
                                  "connected_ticket_document_number",
                                  "credit_reason_indicator",
                                  "services"
                                ],
                                "title": "Ancillary",
                                "type": "object",
                                "x-title-plural": "Ancillaries"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "computerized_reservation_system": {
                            "anyOf": [
                              {
                                "description": "Indicates the computerized reservation system used to book the ticket.",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "credit_reason_indicator": {
                            "anyOf": [
                              {
                                "description": "Indicates the reason for a credit to the cardholder.",
                                "enum": [
                                  "no_credit",
                                  "passenger_transport_ancillary_purchase_cancellation",
                                  "airline_ticket_and_passenger_transport_ancillary_purchase_cancellation",
                                  "airline_ticket_cancellation",
                                  "other",
                                  "partial_refund_of_airline_ticket"
                                ],
                                "type": "string",
                                "x-enum-descriptions": [
                                  "No credit",
                                  "Passenger transport ancillary purchase cancellation",
                                  "Airline ticket and passenger transport ancillary purchase cancellation",
                                  "Airline ticket cancellation",
                                  "Other",
                                  "Partial refund of airline ticket"
                                ]
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "departure_date": {
                            "anyOf": [
                              {
                                "description": "Date of departure.",
                                "format": "date",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "origination_city_airport_code": {
                            "anyOf": [
                              {
                                "description": "Code for the originating city or airport.",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "passenger_name": {
                            "anyOf": [
                              {
                                "description": "Name of the passenger.",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "restricted_ticket_indicator": {
                            "anyOf": [
                              {
                                "description": "Indicates whether this ticket is non-refundable.",
                                "enum": [
                                  "no_restrictions",
                                  "restricted_non_refundable_ticket"
                                ],
                                "type": "string",
                                "x-enum-descriptions": [
                                  "No restrictions",
                                  "Restricted non-refundable ticket"
                                ]
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "ticket_change_indicator": {
                            "anyOf": [
                              {
                                "description": "Indicates why a ticket was changed.",
                                "enum": [
                                  "none",
                                  "change_to_existing_ticket",
                                  "new_ticket"
                                ],
                                "type": "string",
                                "x-enum-descriptions": [
                                  "None",
                                  "Change to existing ticket",
                                  "New ticket"
                                ]
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "ticket_number": {
                            "anyOf": [
                              {
                                "description": "Ticket number.",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "travel_agency_code": {
                            "anyOf": [
                              {
                                "description": "Code for the travel agency if the ticket was issued by a travel agency.",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "travel_agency_name": {
                            "anyOf": [
                              {
                                "description": "Name of the travel agency if the ticket was issued by a travel agency.",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "trip_legs": {
                            "anyOf": [
                              {
                                "description": "Fields specific to each leg of the journey.",
                                "items": {
                                  "properties": {
                                    "carrier_code": {
                                      "anyOf": [
                                        {
                                          "description": "Carrier code (e.g., United Airlines, Jet Blue, etc.).",
                                          "type": "string"
                                        },
                                        {
                                          "type": "null"
                                        }
                                      ]
                                    },
                                    "destination_city_airport_code": {
                                      "anyOf": [
                                        {
                                          "description": "Code for the destination city or airport.",
                                          "type": "string"
                                        },
                                        {
                                          "type": "null"
                                        }
                                      ]
                                    },
                                    "fare_basis_code": {
                                      "anyOf": [
                                        {
                                          "description": "Fare basis code.",
                                          "type": "string"
                                        },
                                        {
                                          "type": "null"
                                        }
                                      ]
                                    },
                                    "flight_number": {
                                      "anyOf": [
                                        {
                                          "description": "Flight number.",
                                          "type": "string"
                                        },
                                        {
                                          "type": "null"
                                        }
                                      ]
                                    },
                                    "service_class": {
                                      "anyOf": [
                                        {
                                          "description": "Service class (e.g., first class, business class, etc.).",
                                          "type": "string"
                                        },
                                        {
                                          "type": "null"
                                        }
                                      ]
                                    },
                                    "stop_over_code": {
                                      "anyOf": [
                                        {
                                          "description": "Indicates whether a stopover is allowed on this ticket.",
                                          "enum": [
                                            "none",
                                            "stop_over_allowed",
                                            "stop_over_not_allowed"
                                          ],
                                          "type": "string",
                                          "x-enum-descriptions": [
                                            "None",
                                            "Stop over allowed",
                                            "Stop over not allowed"
                                          ]
                                        },
                                        {
                                          "type": "null"
                                        }
                                      ]
                                    }
                                  },
                                  "required": [
                                    "flight_number",
                                    "carrier_code",
                                    "fare_basis_code",
                                    "service_class",
                                    "stop_over_code",
                                    "destination_city_airport_code"
                                  ],
                                  "title": "Trip Legs Element",
                                  "type": "object",
                                  "x-title-plural": "Trip Legs Elements"
                                },
                                "type": "array"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "required": [
                          "ticket_number",
                          "passenger_name",
                          "departure_date",
                          "origination_city_airport_code",
                          "travel_agency_code",
                          "travel_agency_name",
                          "restricted_ticket_indicator",
                          "computerized_reservation_system",
                          "credit_reason_indicator",
                          "ticket_change_indicator",
                          "trip_legs",
                          "ancillary"
                        ],
                        "title": "Travel",
                        "type": "object",
                        "x-title-plural": "Travels"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  }
                },
                "required": [
                  "purchase_identifier",
                  "purchase_identifier_format",
                  "customer_reference_identifier",
                  "local_tax_amount",
                  "local_tax_currency",
                  "national_tax_amount",
                  "national_tax_currency",
                  "car_rental",
                  "lodging",
                  "travel"
                ],
                "title": "Card Purchase Details",
                "type": "object",
                "x-title-plural": "Card Purchase Details"
              },
              {
                "type": "null"
              }
            ]
          },
          "transaction_id": {
            "description": "The identifier of the Transaction associated with this Transaction.",
            "type": "string"
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `card_settlement`.",
            "enum": [
              "card_settlement"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "card_payment_id",
          "card_authorization",
          "amount",
          "currency",
          "presentment_amount",
          "presentment_currency",
          "merchant_acceptor_id",
          "merchant_city",
          "merchant_state",
          "merchant_country",
          "merchant_name",
          "merchant_postal_code",
          "merchant_category_code",
          "transaction_id",
          "pending_transaction_id",
          "interchange",
          "cashback",
          "purchase_details",
          "network_identifiers",
          "type"
        ],
        "title": "Card Settlement",
        "type": "object",
        "x-title-plural": "Card Settlements"
      },
      "card_validation": {
        "description": "Card Validations are requests from a merchant to verify that a card number and optionally its address and/or Card Verification Value are valid.",
        "example": {
          "actioner": "increase",
          "card_payment_id": "card_payment_nd3k2kacrqjli8482ave",
          "currency": "USD",
          "digital_wallet_token_id": null,
          "id": "card_validation_yi4e59jiaz6n9hx8tczv",
          "merchant_acceptor_id": "5665270011000168",
          "merchant_category_code": "5734",
          "merchant_city": "New York",
          "merchant_country": "US",
          "merchant_descriptor": "AMAZON.COM",
          "merchant_postal_code": "10045",
          "merchant_state": "NY",
          "network_details": {
            "category": "visa",
            "visa": {
              "electronic_commerce_indicator": "secure_electronic_commerce",
              "point_of_service_entry_mode": "manual",
              "stand_in_processing_reason": null
            }
          },
          "network_identifiers": {
            "retrieval_reference_number": "785867080153",
            "trace_number": "487941",
            "transaction_id": "627199945183184"
          },
          "network_risk_score": 10,
          "physical_card_id": null,
          "real_time_decision_id": null,
          "terminal_id": "RCN5VNXS",
          "type": "card_validation",
          "verification": {
            "card_verification_code": {
              "result": "match"
            },
            "cardholder_address": {
              "actual_line1": "33 Liberty Street",
              "actual_postal_code": "94131",
              "provided_line1": "33 Liberty Street",
              "provided_postal_code": "94132",
              "result": "postal_code_no_match_address_match"
            }
          }
        },
        "properties": {
          "actioner": {
            "description": "Whether this authorization was approved by Increase, the card network through stand-in processing, or the user through a real-time decision.",
            "enum": [
              "user",
              "increase",
              "network"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "This object was actioned by the user through a real-time decision.",
              "This object was actioned by Increase without user intervention.",
              "This object was actioned by the network, through stand-in processing."
            ]
          },
          "card_payment_id": {
            "description": "The ID of the Card Payment this transaction belongs to.",
            "type": "string"
          },
          "currency": {
            "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.",
            "enum": [
              "CAD",
              "CHF",
              "EUR",
              "GBP",
              "JPY",
              "USD"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "Canadian Dollar (CAD)",
              "Swiss Franc (CHF)",
              "Euro (EUR)",
              "British Pound (GBP)",
              "Japanese Yen (JPY)",
              "US Dollar (USD)"
            ]
          },
          "digital_wallet_token_id": {
            "anyOf": [
              {
                "description": "If the authorization was made via a Digital Wallet Token (such as an Apple Pay purchase), the identifier of the token that was used.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "id": {
            "description": "The Card Validation identifier.",
            "type": "string"
          },
          "merchant_acceptor_id": {
            "description": "The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.",
            "type": "string"
          },
          "merchant_category_code": {
            "description": "The Merchant Category Code (commonly abbreviated as MCC) of the merchant the card is transacting with.",
            "type": "string"
          },
          "merchant_city": {
            "anyOf": [
              {
                "description": "The city the merchant resides in.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "merchant_country": {
            "description": "The country the merchant resides in.",
            "type": "string"
          },
          "merchant_descriptor": {
            "description": "The merchant descriptor of the merchant the card is transacting with.",
            "type": "string"
          },
          "merchant_postal_code": {
            "anyOf": [
              {
                "description": "The merchant's postal code. For US merchants this is either a 5-digit or 9-digit ZIP code, where the first 5 and last 4 are separated by a dash.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "merchant_state": {
            "anyOf": [
              {
                "description": "The state the merchant resides in.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "network_details": {
            "description": "Fields specific to the `network`.",
            "properties": {
              "category": {
                "description": "The payment network used to process this card authorization.",
                "enum": [
                  "visa"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "Visa"
                ]
              },
              "visa": {
                "anyOf": [
                  {
                    "description": "Fields specific to the `visa` network.",
                    "properties": {
                      "electronic_commerce_indicator": {
                        "anyOf": [
                          {
                            "description": "For electronic commerce transactions, this identifies the level of security used in obtaining the customer's payment credential. For mail or telephone order transactions, identifies the type of mail or telephone order.",
                            "enum": [
                              "mail_phone_order",
                              "recurring",
                              "installment",
                              "unknown_mail_phone_order",
                              "secure_electronic_commerce",
                              "non_authenticated_security_transaction_at_3ds_capable_merchant",
                              "non_authenticated_security_transaction",
                              "non_secure_transaction"
                            ],
                            "type": "string",
                            "x-enum-descriptions": [
                              "Single transaction of a mail/phone order: Use to indicate that the transaction is a mail/phone order purchase, not a recurring transaction or installment payment. For domestic transactions in the US region, this value may also indicate one bill payment transaction in the card-present or card-absent environments.",
                              "Recurring transaction: Payment indicator used to indicate a recurring transaction that originates from an acquirer in the US region.",
                              "Installment payment: Payment indicator used to indicate one purchase of goods or services that is billed to the account in multiple charges over a period of time agreed upon by the cardholder and merchant from transactions that originate from an acquirer in the US region.",
                              "Unknown classification: other mail order: Use to indicate that the type of mail/telephone order is unknown.",
                              "Secure electronic commerce transaction: Use to indicate that the electronic commerce transaction has been authenticated using e.g., 3-D Secure",
                              "Non-authenticated security transaction at a 3-D Secure-capable merchant, and merchant attempted to authenticate the cardholder using 3-D Secure: Use to identify an electronic commerce transaction where the merchant attempted to authenticate the cardholder using 3-D Secure, but was unable to complete the authentication because the issuer or cardholder does not participate in the 3-D Secure program.",
                              "Non-authenticated security transaction: Use to identify an electronic commerce transaction that uses data encryption for security however , cardholder authentication is not performed using 3-D Secure.",
                              "Non-secure transaction: Use to identify an electronic commerce transaction that has no data protection."
                            ]
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "point_of_service_entry_mode": {
                        "anyOf": [
                          {
                            "description": "The method used to enter the cardholder's primary account number and card expiration date.",
                            "enum": [
                              "unknown",
                              "manual",
                              "magnetic_stripe_no_cvv",
                              "optical_code",
                              "integrated_circuit_card",
                              "contactless",
                              "credential_on_file",
                              "magnetic_stripe",
                              "contactless_magnetic_stripe",
                              "integrated_circuit_card_no_cvv"
                            ],
                            "type": "string",
                            "x-enum-descriptions": [
                              "Unknown",
                              "Manual key entry",
                              "Magnetic stripe read, without card verification value",
                              "Optical code",
                              "Contact chip card",
                              "Contactless read of chip card",
                              "Transaction initiated using a credential that has previously been stored on file",
                              "Magnetic stripe read",
                              "Contactless read of magnetic stripe data",
                              "Contact chip card, without card verification value"
                            ]
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "stand_in_processing_reason": {
                        "anyOf": [
                          {
                            "description": "Only present when `actioner: network`. Describes why a card authorization was approved or declined by Visa through stand-in processing.",
                            "enum": [
                              "issuer_error",
                              "invalid_physical_card",
                              "invalid_cardholder_authentication_verification_value",
                              "internal_visa_error",
                              "merchant_transaction_advisory_service_authentication_required",
                              "payment_fraud_disruption_acquirer_block",
                              "other"
                            ],
                            "type": "string",
                            "x-enum-descriptions": [
                              "Increase failed to process the authorization in a timely manner.",
                              "The physical card read had an invalid CVV, dCVV, or authorization request cryptogram.",
                              "The 3DS cardholder authentication verification value was invalid.",
                              "An internal Visa error occurred. Visa uses this reason code for certain expected occurrences as well, such as Application Transaction Counter (ATC) replays.",
                              "The merchant has enabled Visa's Transaction Advisory Service and requires further authentication to perform the transaction. In practice this is often utilized at fuel pumps to tell the cardholder to see the cashier.",
                              "The transaction was blocked by Visa's Payment Fraud Disruption service due to fraudulent Acquirer behavior, such as card testing.",
                              "An unspecific reason for stand-in processing."
                            ]
                          },
                          {
                            "type": "null"
                          }
                        ]
                      }
                    },
                    "required": [
                      "electronic_commerce_indicator",
                      "point_of_service_entry_mode",
                      "stand_in_processing_reason"
                    ],
                    "title": "Visa",
                    "type": "object",
                    "x-title-plural": "Visas"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "required": [
              "category",
              "visa"
            ],
            "type": "object",
            "x-title-plural": "s"
          },
          "network_identifiers": {
            "description": "Network-specific identifiers for a specific request or transaction.",
            "example": {
              "retrieval_reference_number": "785867080153",
              "trace_number": "487941",
              "transaction_id": "627199945183184"
            },
            "properties": {
              "retrieval_reference_number": {
                "anyOf": [
                  {
                    "description": "A life-cycle identifier used across e.g., an authorization and a reversal. Expected to be unique per acquirer within a window of time. For some card networks the retrieval reference number includes the trace counter.",
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "trace_number": {
                "anyOf": [
                  {
                    "description": "A counter used to verify an individual authorization. Expected to be unique per acquirer within a window of time.",
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "transaction_id": {
                "anyOf": [
                  {
                    "description": "A globally unique transaction identifier provided by the card network, used across multiple life-cycle requests.",
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "required": [
              "transaction_id",
              "trace_number",
              "retrieval_reference_number"
            ],
            "type": "object",
            "x-title-plural": "s"
          },
          "network_risk_score": {
            "anyOf": [
              {
                "description": "The risk score generated by the card network. For Visa this is the Visa Advanced Authorization risk score, from 0 to 99, where 99 is the riskiest.",
                "type": "integer"
              },
              {
                "type": "null"
              }
            ]
          },
          "physical_card_id": {
            "anyOf": [
              {
                "description": "If the authorization was made in-person with a physical card, the Physical Card that was used.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "real_time_decision_id": {
            "anyOf": [
              {
                "description": "The identifier of the Real-Time Decision sent to approve or decline this transaction.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "terminal_id": {
            "anyOf": [
              {
                "description": "The terminal identifier (commonly abbreviated as TID) of the terminal the card is transacting with.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `card_validation`.",
            "enum": [
              "card_validation"
            ],
            "type": "string"
          },
          "verification": {
            "description": "Fields related to verification of cardholder-provided values.",
            "properties": {
              "card_verification_code": {
                "description": "Fields related to verification of the Card Verification Code, a 3-digit code on the back of the card.",
                "properties": {
                  "result": {
                    "description": "The result of verifying the Card Verification Code.",
                    "enum": [
                      "not_checked",
                      "match",
                      "no_match"
                    ],
                    "type": "string",
                    "x-enum-descriptions": [
                      "No card verification code was provided in the authorization request.",
                      "The card verification code matched the one on file.",
                      "The card verification code did not match the one on file."
                    ]
                  }
                },
                "required": [
                  "result"
                ],
                "title": "Card Verification Code",
                "type": "object",
                "x-title-plural": "Card Verification Codes"
              },
              "cardholder_address": {
                "description": "Cardholder address provided in the authorization request and the address on file we verified it against.",
                "properties": {
                  "actual_line1": {
                    "anyOf": [
                      {
                        "description": "Line 1 of the address on file for the cardholder.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "actual_postal_code": {
                    "anyOf": [
                      {
                        "description": "The postal code of the address on file for the cardholder.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "provided_line1": {
                    "anyOf": [
                      {
                        "description": "The cardholder address line 1 provided for verification in the authorization request.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "provided_postal_code": {
                    "anyOf": [
                      {
                        "description": "The postal code provided for verification in the authorization request.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "result": {
                    "description": "The address verification result returned to the card network.",
                    "enum": [
                      "not_checked",
                      "postal_code_match_address_not_checked",
                      "postal_code_match_address_no_match",
                      "postal_code_no_match_address_match",
                      "match",
                      "no_match"
                    ],
                    "type": "string",
                    "x-enum-descriptions": [
                      "No adress was provided in the authorization request.",
                      "Postal code matches, but the street address was not verified.",
                      "Postal code matches, but the street address does not match.",
                      "Postal code does not match, but the street address matches.",
                      "Postal code and street address match.",
                      "Postal code and street address do not match."
                    ]
                  }
                },
                "required": [
                  "provided_postal_code",
                  "provided_line1",
                  "actual_postal_code",
                  "actual_line1",
                  "result"
                ],
                "title": "Cardholder Address",
                "type": "object",
                "x-title-plural": "Cardholder Addresses"
              }
            },
            "required": [
              "cardholder_address",
              "card_verification_code"
            ],
            "type": "object",
            "x-title-plural": "s"
          }
        },
        "required": [
          "id",
          "card_payment_id",
          "merchant_acceptor_id",
          "merchant_descriptor",
          "merchant_category_code",
          "terminal_id",
          "merchant_city",
          "merchant_state",
          "merchant_postal_code",
          "merchant_country",
          "digital_wallet_token_id",
          "physical_card_id",
          "verification",
          "network_identifiers",
          "network_risk_score",
          "network_details",
          "currency",
          "real_time_decision_id",
          "actioner",
          "type"
        ],
        "title": "Card Validation",
        "type": "object",
        "x-title-plural": "Card Validations"
      },
      "check_deposit": {
        "description": "Check Deposits allow you to deposit images of paper checks into your account.",
        "example": {
          "account_id": "account_in71c4amph0vgo2qllky",
          "amount": 1000,
          "back_image_file_id": null,
          "created_at": "2020-01-31T23:59:59Z",
          "deposit_acceptance": null,
          "deposit_rejection": null,
          "deposit_return": null,
          "deposit_submission": null,
          "description": null,
          "front_image_file_id": "file_makxrc67oh9l6sg7w9yc",
          "id": "check_deposit_f06n9gpg7sxn8t19lfc1",
          "idempotency_key": null,
          "inbound_funds_hold": null,
          "inbound_mail_item_id": null,
          "lockbox_id": null,
          "status": "submitted",
          "transaction_id": "transaction_uyrp7fld2ium70oa7oi",
          "type": "check_deposit"
        },
        "properties": {
          "account_id": {
            "description": "The Account the check was deposited into.",
            "type": "string"
          },
          "amount": {
            "description": "The deposited amount in USD cents.",
            "type": "integer"
          },
          "back_image_file_id": {
            "anyOf": [
              {
                "description": "The ID for the File containing the image of the back of the check.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "created_at": {
            "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.",
            "format": "date-time",
            "type": "string"
          },
          "deposit_acceptance": {
            "anyOf": [
              {
                "description": "If your deposit is successfully parsed and accepted by Increase, this will contain details of the parsed check.",
                "example": {
                  "account_number": "987654321",
                  "amount": 100,
                  "auxiliary_on_us": "101",
                  "check_deposit_id": "check_deposit_f06n9gpg7sxn8t19lfc1",
                  "currency": "USD",
                  "routing_number": "101050001",
                  "serial_number": null
                },
                "properties": {
                  "account_number": {
                    "description": "The account number printed on the check.",
                    "type": "string"
                  },
                  "amount": {
                    "description": "The amount to be deposited in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
                    "type": "integer"
                  },
                  "auxiliary_on_us": {
                    "anyOf": [
                      {
                        "description": "An additional line of metadata printed on the check. This typically includes the check number for business checks.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "check_deposit_id": {
                    "description": "The ID of the Check Deposit that was accepted.",
                    "type": "string"
                  },
                  "currency": {
                    "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.",
                    "enum": [
                      "CAD",
                      "CHF",
                      "EUR",
                      "GBP",
                      "JPY",
                      "USD"
                    ],
                    "type": "string",
                    "x-enum-descriptions": [
                      "Canadian Dollar (CAD)",
                      "Swiss Franc (CHF)",
                      "Euro (EUR)",
                      "British Pound (GBP)",
                      "Japanese Yen (JPY)",
                      "US Dollar (USD)"
                    ]
                  },
                  "routing_number": {
                    "description": "The routing number printed on the check.",
                    "type": "string"
                  },
                  "serial_number": {
                    "anyOf": [
                      {
                        "description": "The check serial number, if present, for consumer checks. For business checks, the serial number is usually in the `auxiliary_on_us` field.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  }
                },
                "required": [
                  "amount",
                  "currency",
                  "account_number",
                  "routing_number",
                  "auxiliary_on_us",
                  "serial_number",
                  "check_deposit_id"
                ],
                "title": "Check Deposit Acceptance",
                "type": "object",
                "x-title-plural": "Check Deposit Acceptances"
              },
              {
                "type": "null"
              }
            ]
          },
          "deposit_rejection": {
            "anyOf": [
              {
                "description": "If your deposit is rejected by Increase, this will contain details as to why it was rejected.",
                "example": {
                  "amount": 1750,
                  "check_deposit_id": "check_deposit_f06n9gpg7sxn8t19lfc1",
                  "currency": "USD",
                  "declined_transaction_id": "declined_transaction_17jbn0yyhvkt4v4ooym8",
                  "reason": "incomplete_image",
                  "rejected_at": "2020-01-31T23:59:59Z"
                },
                "properties": {
                  "amount": {
                    "description": "The rejected amount in the minor unit of check's currency. For dollars, for example, this is cents.",
                    "type": "integer"
                  },
                  "check_deposit_id": {
                    "description": "The identifier of the Check Deposit that was rejected.",
                    "type": "string"
                  },
                  "currency": {
                    "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.",
                    "enum": [
                      "CAD",
                      "CHF",
                      "EUR",
                      "GBP",
                      "JPY",
                      "USD"
                    ],
                    "type": "string",
                    "x-enum-descriptions": [
                      "Canadian Dollar (CAD)",
                      "Swiss Franc (CHF)",
                      "Euro (EUR)",
                      "British Pound (GBP)",
                      "Japanese Yen (JPY)",
                      "US Dollar (USD)"
                    ]
                  },
                  "declined_transaction_id": {
                    "description": "The identifier of the associated declined transaction.",
                    "type": "string"
                  },
                  "reason": {
                    "description": "Why the check deposit was rejected.",
                    "enum": [
                      "incomplete_image",
                      "duplicate",
                      "poor_image_quality",
                      "incorrect_amount",
                      "incorrect_recipient",
                      "not_eligible_for_mobile_deposit",
                      "missing_required_data_elements",
                      "suspected_fraud",
                      "deposit_window_expired",
                      "requested_by_user",
                      "unknown"
                    ],
                    "type": "string",
                    "x-enum-descriptions": [
                      "The check's image is incomplete.",
                      "This is a duplicate check submission.",
                      "This check has poor image quality.",
                      "The check was deposited with the incorrect amount.",
                      "The check is made out to someone other than the account holder.",
                      "This check was not eligible for mobile deposit.",
                      "This check is missing at least one required field.",
                      "This check is suspected to be fraudulent.",
                      "This check's deposit window has expired.",
                      "The check was rejected at the user's request.",
                      "The check was rejected for an unknown reason."
                    ]
                  },
                  "rejected_at": {
                    "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check deposit was rejected.",
                    "format": "date-time",
                    "type": "string"
                  }
                },
                "required": [
                  "check_deposit_id",
                  "declined_transaction_id",
                  "amount",
                  "currency",
                  "reason",
                  "rejected_at"
                ],
                "title": "Check Deposit Rejection",
                "type": "object",
                "x-title-plural": "Check Deposit Rejections"
              },
              {
                "type": "null"
              }
            ]
          },
          "deposit_return": {
            "anyOf": [
              {
                "description": "If your deposit is returned, this will contain details as to why it was returned.",
                "example": {
                  "amount": 100,
                  "check_deposit_id": "check_deposit_f06n9gpg7sxn8t19lfc1",
                  "currency": "USD",
                  "return_reason": "insufficient_funds",
                  "returned_at": "2020-01-31T23:59:59Z",
                  "transaction_id": "transaction_uyrp7fld2ium70oa7oi"
                },
                "properties": {
                  "amount": {
                    "description": "The returned amount in USD cents.",
                    "type": "integer"
                  },
                  "check_deposit_id": {
                    "description": "The identifier of the Check Deposit that was returned.",
                    "type": "string"
                  },
                  "currency": {
                    "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.",
                    "enum": [
                      "CAD",
                      "CHF",
                      "EUR",
                      "GBP",
                      "JPY",
                      "USD"
                    ],
                    "type": "string",
                    "x-enum-descriptions": [
                      "Canadian Dollar (CAD)",
                      "Swiss Franc (CHF)",
                      "Euro (EUR)",
                      "British Pound (GBP)",
                      "Japanese Yen (JPY)",
                      "US Dollar (USD)"
                    ]
                  },
                  "return_reason": {
                    "description": "Why this check was returned by the bank holding the account it was drawn against.",
                    "enum": [
                      "ach_conversion_not_supported",
                      "closed_account",
                      "duplicate_submission",
                      "insufficient_funds",
                      "no_account",
                      "not_authorized",
                      "stale_dated",
                      "stop_payment",
                      "unknown_reason",
                      "unmatched_details",
                      "unreadable_image",
                      "endorsement_irregular",
                      "altered_or_fictitious_item",
                      "frozen_or_blocked_account",
                      "post_dated",
                      "endorsement_missing",
                      "signature_missing",
                      "stop_payment_suspect",
                      "unusable_image",
                      "image_fails_security_check",
                      "cannot_determine_amount",
                      "signature_irregular",
                      "non_cash_item",
                      "unable_to_process",
                      "item_exceeds_dollar_limit",
                      "branch_or_account_sold"
                    ],
                    "type": "string",
                    "x-enum-descriptions": [
                      "The check doesn't allow ACH conversion.",
                      "The account is closed.",
                      "The check has already been deposited.",
                      "Insufficient funds",
                      "No account was found matching the check details.",
                      "The check was not authorized.",
                      "The check is too old.",
                      "The payment has been stopped by the account holder.",
                      "The reason for the return is unknown.",
                      "The image doesn't match the details submitted.",
                      "The image could not be read.",
                      "The check endorsement was irregular.",
                      "The check present was either altered or fake.",
                      "The account this check is drawn on is frozen.",
                      "The check is post dated.",
                      "The endorsement was missing.",
                      "The check signature was missing.",
                      "The bank suspects a stop payment will be placed.",
                      "The bank cannot read the image.",
                      "The check image fails the bank's security check.",
                      "The bank cannot determine the amount.",
                      "The signature is inconsistent with prior signatures.",
                      "The check is a non-cash item and cannot be drawn against the account.",
                      "The bank is unable to process this check.",
                      "The check exceeds the bank or customer's limit.",
                      "The bank sold this account and no longer services this customer."
                    ]
                  },
                  "returned_at": {
                    "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check deposit was returned.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "transaction_id": {
                    "description": "The identifier of the transaction that reversed the original check deposit transaction.",
                    "type": "string"
                  }
                },
                "required": [
                  "amount",
                  "returned_at",
                  "currency",
                  "check_deposit_id",
                  "transaction_id",
                  "return_reason"
                ],
                "title": "Check Deposit Return",
                "type": "object",
                "x-title-plural": "Check Deposit Returns"
              },
              {
                "type": "null"
              }
            ]
          },
          "deposit_submission": {
            "anyOf": [
              {
                "description": "After the check is parsed, it is submitted to the Check21 network for processing. This will contain details of the submission.",
                "example": {
                  "back_file_id": "file_frhw4s443nh7noss55kq",
                  "front_file_id": "file_j7ed9mrve741m6yui9ju",
                  "submitted_at": "2020-02-01T00:59:59+00:00"
                },
                "properties": {
                  "back_file_id": {
                    "description": "The ID for the File containing the check back image that was submitted to the Check21 network.",
                    "type": "string"
                  },
                  "front_file_id": {
                    "description": "The ID for the File containing the check front image that was submitted to the Check21 network.",
                    "type": "string"
                  },
                  "submitted_at": {
                    "description": "When the check deposit was submitted to the Check21 network for processing. During business days, this happens within a few hours of the check being accepted by Increase.",
                    "format": "date-time",
                    "type": "string"
                  }
                },
                "required": [
                  "submitted_at",
                  "front_file_id",
                  "back_file_id"
                ],
                "title": "Check Deposit Submission",
                "type": "object",
                "x-title-plural": "Check Deposit Submissions"
              },
              {
                "type": "null"
              }
            ]
          },
          "description": {
            "anyOf": [
              {
                "description": "The description of the Check Deposit, for display purposes only.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "front_image_file_id": {
            "description": "The ID for the File containing the image of the front of the check.",
            "type": "string"
          },
          "id": {
            "description": "The deposit's identifier.",
            "type": "string"
          },
          "idempotency_key": {
            "anyOf": [
              {
                "description": "The idempotency key you chose for this object. This value is unique across Increase and is used to ensure that a request is only processed once. Learn more about [idempotency](https://increase.com/documentation/idempotency-keys).",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "inbound_funds_hold": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/inbound_funds_hold",
                "description": "Increase will sometimes hold the funds for Check Deposits. If funds are held, this sub-object will contain details of the hold."
              },
              {
                "type": "null"
              }
            ]
          },
          "inbound_mail_item_id": {
            "anyOf": [
              {
                "description": "If the Check Deposit was the result of an Inbound Mail Item, this will contain the identifier of the Inbound Mail Item.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "lockbox_id": {
            "anyOf": [
              {
                "description": "If the Check Deposit was the result of an Inbound Mail Item, this will contain the identifier of the Lockbox that received it.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "status": {
            "description": "The status of the Check Deposit.",
            "enum": [
              "pending",
              "submitted",
              "rejected",
              "returned"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The Check Deposit is pending review.",
              "The Check Deposit has been deposited.",
              "The Check Deposit has been rejected.",
              "The Check Deposit has been returned."
            ]
          },
          "transaction_id": {
            "anyOf": [
              {
                "description": "The ID for the Transaction created by the deposit.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `check_deposit`.",
            "enum": [
              "check_deposit"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "amount",
          "description",
          "created_at",
          "status",
          "account_id",
          "front_image_file_id",
          "back_image_file_id",
          "transaction_id",
          "deposit_acceptance",
          "deposit_submission",
          "deposit_rejection",
          "deposit_return",
          "inbound_funds_hold",
          "inbound_mail_item_id",
          "lockbox_id",
          "idempotency_key",
          "type"
        ],
        "title": "Check Deposit",
        "type": "object",
        "x-tag": "Check Deposits",
        "x-title-plural": "Check Deposits"
      },
      "check_deposit_list": {
        "description": "A list of Check Deposit objects.",
        "example": {
          "data": [
            {
              "account_id": "account_in71c4amph0vgo2qllky",
              "amount": 1000,
              "back_image_file_id": null,
              "created_at": "2020-01-31T23:59:59Z",
              "deposit_acceptance": null,
              "deposit_rejection": null,
              "deposit_return": null,
              "deposit_submission": null,
              "description": null,
              "front_image_file_id": "file_makxrc67oh9l6sg7w9yc",
              "id": "check_deposit_f06n9gpg7sxn8t19lfc1",
              "idempotency_key": null,
              "inbound_funds_hold": null,
              "inbound_mail_item_id": null,
              "lockbox_id": null,
              "status": "submitted",
              "transaction_id": "transaction_uyrp7fld2ium70oa7oi",
              "type": "check_deposit"
            }
          ],
          "next_cursor": "v57w5d"
        },
        "properties": {
          "data": {
            "description": "The contents of the list.",
            "items": {
              "$ref": "#/components/schemas/check_deposit"
            },
            "type": "array"
          },
          "next_cursor": {
            "anyOf": [
              {
                "description": "A pointer to a place in the list.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "Check Deposit List",
        "type": "object",
        "x-title-plural": "Check Deposit Lists"
      },
      "check_transfer": {
        "description": "Check Transfers move funds from your Increase account by mailing a physical check.",
        "example": {
          "account_id": "account_in71c4amph0vgo2qllky",
          "account_number": "987654321",
          "amount": 1000,
          "approval": null,
          "approved_inbound_check_deposit_id": "inbound_check_deposit_zoshvqybq0cjjm31mra",
          "cancellation": null,
          "check_number": "123",
          "created_at": "2020-01-31T23:59:59Z",
          "created_by": {
            "category": "user",
            "user": {
              "email": "user@example.com"
            }
          },
          "currency": "USD",
          "deposit": null,
          "fulfillment_method": "physical_check",
          "id": "check_transfer_30b43acfu9vw8fyc4f5",
          "idempotency_key": null,
          "mailing": {
            "image_id": null,
            "mailed_at": "2020-01-31T23:59:59Z",
            "tracking_number": null
          },
          "pending_transaction_id": "pending_transaction_k1sfetcau2qbvjbzgju4",
          "physical_check": {
            "mailing_address": {
              "city": "New York",
              "line1": "33 Liberty Street",
              "line2": null,
              "name": "Ian Crease",
              "postal_code": "10045",
              "state": "NY"
            },
            "memo": "Invoice 29582",
            "note": null,
            "recipient_name": "Ian Crease",
            "return_address": {
              "city": "New York",
              "line1": "33 Liberty Street",
              "line2": null,
              "name": "Ian Crease",
              "postal_code": "10045",
              "state": "NY"
            },
            "shipping_method": null,
            "signature_text": null,
            "signer_name": null,
            "tracking_updates": []
          },
          "routing_number": "101050001",
          "source_account_number_id": "account_number_v18nkfqm6afpsrvy82b2",
          "status": "mailed",
          "stop_payment_request": null,
          "submission": {
            "submitted_at": "2020-01-31T23:59:59Z"
          },
          "third_party": null,
          "type": "check_transfer"
        },
        "properties": {
          "account_id": {
            "description": "The identifier of the Account from which funds will be transferred.",
            "type": "string"
          },
          "account_number": {
            "description": "The account number printed on the check.",
            "type": "string"
          },
          "amount": {
            "description": "The transfer amount in USD cents.",
            "type": "integer"
          },
          "approval": {
            "anyOf": [
              {
                "description": "If your account requires approvals for transfers and the transfer was approved, this will contain details of the approval.",
                "example": {
                  "approved_at": "2020-01-31T23:59:59Z",
                  "approved_by": null
                },
                "properties": {
                  "approved_at": {
                    "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was approved.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "approved_by": {
                    "anyOf": [
                      {
                        "description": "If the Transfer was approved by a user in the dashboard, the email address of that user.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  }
                },
                "required": [
                  "approved_at",
                  "approved_by"
                ],
                "title": "Transfer Approval",
                "type": "object",
                "x-title-plural": "Transfer Approvals"
              },
              {
                "type": "null"
              }
            ]
          },
          "approved_inbound_check_deposit_id": {
            "anyOf": [
              {
                "description": "If the Check Transfer was successfully deposited, this will contain the identifier of the Inbound Check Deposit object with details of the deposit.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "cancellation": {
            "anyOf": [
              {
                "description": "If your account requires approvals for transfers and the transfer was not approved, this will contain details of the cancellation.",
                "example": {
                  "canceled_at": "2020-01-31T23:59:59Z",
                  "canceled_by": null
                },
                "properties": {
                  "canceled_at": {
                    "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Transfer was canceled.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "canceled_by": {
                    "anyOf": [
                      {
                        "description": "If the Transfer was canceled by a user in the dashboard, the email address of that user.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  }
                },
                "required": [
                  "canceled_at",
                  "canceled_by"
                ],
                "title": "Transfer Cancellation",
                "type": "object",
                "x-title-plural": "Transfer Cancellations"
              },
              {
                "type": "null"
              }
            ]
          },
          "check_number": {
            "description": "The check number printed on the check.",
            "type": "string"
          },
          "created_at": {
            "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.",
            "format": "date-time",
            "type": "string"
          },
          "created_by": {
            "anyOf": [
              {
                "description": "What object created the transfer, either via the API or the dashboard.",
                "example": {
                  "category": "user",
                  "user": {
                    "email": "user@example.com"
                  }
                },
                "properties": {
                  "api_key": {
                    "anyOf": [
                      {
                        "description": "If present, details about the API key that created the transfer.",
                        "properties": {
                          "description": {
                            "anyOf": [
                              {
                                "description": "The description set for the API key when it was created.",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "required": [
                          "description"
                        ],
                        "title": "Api Key",
                        "type": "object",
                        "x-title-plural": "Api Keys"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "category": {
                    "description": "The type of object that created this transfer.",
                    "enum": [
                      "api_key",
                      "oauth_application",
                      "user"
                    ],
                    "type": "string",
                    "x-enum-descriptions": [
                      "An API key. Details will be under the `api_key` object.",
                      "An OAuth application you connected to Increase. Details will be under the `oauth_application` object.",
                      "A User in the Increase dashboard. Details will be under the `user` object."
                    ]
                  },
                  "oauth_application": {
                    "anyOf": [
                      {
                        "description": "If present, details about the OAuth Application that created the transfer.",
                        "properties": {
                          "name": {
                            "description": "The name of the OAuth Application.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "name"
                        ],
                        "title": "OAuth Application",
                        "type": "object",
                        "x-title-plural": "OAuth Applications"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "user": {
                    "anyOf": [
                      {
                        "description": "If present, details about the User that created the transfer.",
                        "properties": {
                          "email": {
                            "description": "The email address of the User.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "email"
                        ],
                        "title": "User",
                        "type": "object",
                        "x-title-plural": "Users"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  }
                },
                "required": [
                  "category",
                  "api_key",
                  "oauth_application",
                  "user"
                ],
                "title": "Transfer Creator",
                "type": "object",
                "x-title-plural": "Transfer Creators"
              },
              {
                "type": "null"
              }
            ]
          },
          "currency": {
            "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.",
            "enum": [
              "CAD",
              "CHF",
              "EUR",
              "GBP",
              "JPY",
              "USD"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "Canadian Dollar (CAD)",
              "Swiss Franc (CHF)",
              "Euro (EUR)",
              "British Pound (GBP)",
              "Japanese Yen (JPY)",
              "US Dollar (USD)"
            ]
          },
          "fulfillment_method": {
            "description": "Whether Increase will print and mail the check or if you will do it yourself.",
            "enum": [
              "physical_check",
              "third_party"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "Increase will print and mail a physical check.",
              "Increase will not print a check; you are responsible for printing and mailing a check with the provided account number, routing number, check number, and amount."
            ]
          },
          "id": {
            "description": "The Check transfer's identifier.",
            "type": "string"
          },
          "idempotency_key": {
            "anyOf": [
              {
                "description": "The idempotency key you chose for this object. This value is unique across Increase and is used to ensure that a request is only processed once. Learn more about [idempotency](https://increase.com/documentation/idempotency-keys).",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "mailing": {
            "anyOf": [
              {
                "description": "If the check has been mailed by Increase, this will contain details of the shipment.",
                "properties": {
                  "image_id": {
                    "anyOf": [
                      {
                        "description": "The ID of the file corresponding to an image of the check that was mailed, if available.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "mailed_at": {
                    "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check was mailed.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "tracking_number": {
                    "anyOf": [
                      {
                        "description": "The tracking number of the shipment, if available for the shipping method.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  }
                },
                "required": [
                  "mailed_at",
                  "image_id",
                  "tracking_number"
                ],
                "title": "Mailing",
                "type": "object",
                "x-title-plural": "Mailings"
              },
              {
                "type": "null"
              }
            ]
          },
          "pending_transaction_id": {
            "anyOf": [
              {
                "description": "The ID for the pending transaction representing the transfer. A pending transaction is created when the transfer [requires approval](https://increase.com/documentation/transfer-approvals#transfer-approvals) by someone else in your organization.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "physical_check": {
            "anyOf": [
              {
                "description": "Details relating to the physical check that Increase will print and mail. Will be present if and only if `fulfillment_method` is equal to `physical_check`.",
                "properties": {
                  "mailing_address": {
                    "description": "Details for where Increase will mail the check.",
                    "properties": {
                      "city": {
                        "anyOf": [
                          {
                            "description": "The city of the check's destination.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "line1": {
                        "anyOf": [
                          {
                            "description": "The street address of the check's destination.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "line2": {
                        "anyOf": [
                          {
                            "description": "The second line of the address of the check's destination.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "name": {
                        "anyOf": [
                          {
                            "description": "The name component of the check's mailing address.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "postal_code": {
                        "anyOf": [
                          {
                            "description": "The postal code of the check's destination.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "state": {
                        "anyOf": [
                          {
                            "description": "The state of the check's destination.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      }
                    },
                    "required": [
                      "name",
                      "line1",
                      "line2",
                      "city",
                      "state",
                      "postal_code"
                    ],
                    "title": "Mailing Address",
                    "type": "object",
                    "x-title-plural": "Mailing Addresses"
                  },
                  "memo": {
                    "anyOf": [
                      {
                        "description": "The descriptor that will be printed on the memo field on the check.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "note": {
                    "anyOf": [
                      {
                        "description": "The descriptor that will be printed on the letter included with the check.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "recipient_name": {
                    "description": "The name that will be printed on the check.",
                    "type": "string"
                  },
                  "return_address": {
                    "anyOf": [
                      {
                        "description": "The return address to be printed on the check.",
                        "properties": {
                          "city": {
                            "anyOf": [
                              {
                                "description": "The city of the check's destination.",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "line1": {
                            "anyOf": [
                              {
                                "description": "The street address of the check's destination.",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "line2": {
                            "anyOf": [
                              {
                                "description": "The second line of the address of the check's destination.",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "name": {
                            "anyOf": [
                              {
                                "description": "The name component of the check's return address.",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "postal_code": {
                            "anyOf": [
                              {
                                "description": "The postal code of the check's destination.",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "state": {
                            "anyOf": [
                              {
                                "description": "The state of the check's destination.",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "required": [
                          "name",
                          "line1",
                          "line2",
                          "city",
                          "state",
                          "postal_code"
                        ],
                        "title": "Return Address",
                        "type": "object",
                        "x-title-plural": "Return Addresses"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "shipping_method": {
                    "anyOf": [
                      {
                        "description": "The shipping method for the check.",
                        "enum": [
                          "usps_first_class",
                          "fedex_overnight"
                        ],
                        "type": "string",
                        "x-enum-descriptions": [
                          "USPS First Class",
                          "FedEx Overnight"
                        ]
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "signature_text": {
                    "anyOf": [
                      {
                        "description": "The text that will appear as the signature on the check in cursive font. If blank, the check will be printed with 'No signature required'.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "tracking_updates": {
                    "description": "Tracking updates relating to the physical check's delivery.",
                    "items": {
                      "properties": {
                        "category": {
                          "description": "The type of tracking event.",
                          "enum": [
                            "in_transit",
                            "processed_for_delivery",
                            "delivered",
                            "returned_to_sender"
                          ],
                          "type": "string",
                          "x-enum-descriptions": [
                            "The check is in transit.",
                            "The check has been processed for delivery.",
                            "The check has been delivered.",
                            "Delivery failed and the check was returned to sender."
                          ]
                        },
                        "created_at": {
                          "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the tracking event took place.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "postal_code": {
                          "description": "The postal code where the event took place.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "category",
                        "created_at",
                        "postal_code"
                      ],
                      "title": "Tracking Updates Element",
                      "type": "object",
                      "x-title-plural": "Tracking Updates Elements"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "memo",
                  "note",
                  "recipient_name",
                  "signature_text",
                  "shipping_method",
                  "mailing_address",
                  "return_address",
                  "tracking_updates"
                ],
                "title": "Physical Check",
                "type": "object",
                "x-title-plural": "Physical Checks"
              },
              {
                "type": "null"
              }
            ]
          },
          "routing_number": {
            "description": "The routing number printed on the check.",
            "type": "string"
          },
          "source_account_number_id": {
            "anyOf": [
              {
                "description": "The identifier of the Account Number from which to send the transfer and print on the check.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "status": {
            "description": "The lifecycle status of the transfer.",
            "enum": [
              "pending_approval",
              "canceled",
              "pending_submission",
              "requires_attention",
              "rejected",
              "pending_mailing",
              "mailed",
              "deposited",
              "stopped",
              "returned"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The transfer is awaiting approval.",
              "The transfer has been canceled.",
              "The transfer is pending submission.",
              "The transfer requires attention from an Increase operator.",
              "The transfer has been rejected.",
              "The check is queued for mailing.",
              "The check has been mailed.",
              "The check has been deposited.",
              "A stop-payment was requested for this check.",
              "The transfer has been returned."
            ]
          },
          "stop_payment_request": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/check_transfer_stop_payment_request",
                "description": "After a stop-payment is requested on the check, this will contain supplemental details."
              },
              {
                "type": "null"
              }
            ]
          },
          "submission": {
            "anyOf": [
              {
                "description": "After the transfer is submitted, this will contain supplemental details.",
                "example": {
                  "submitted_at": "2020-01-31T23:59:59Z"
                },
                "properties": {
                  "submitted_at": {
                    "description": "When this check transfer was submitted to our check printer.",
                    "format": "date-time",
                    "type": "string"
                  }
                },
                "required": [
                  "submitted_at"
                ],
                "title": "Check Transfer Submission",
                "type": "object",
                "x-title-plural": "Check Transfer Submissions"
              },
              {
                "type": "null"
              }
            ]
          },
          "third_party": {
            "anyOf": [
              {
                "description": "Details relating to the custom fulfillment you will perform. Will be present if and only if `fulfillment_method` is equal to `third_party`.",
                "properties": {
                  "check_number": {
                    "anyOf": [
                      {
                        "description": "The check number that you will print on the check.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "recipient_name": {
                    "anyOf": [
                      {
                        "description": "The name that you will print on the check.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  }
                },
                "required": [
                  "check_number",
                  "recipient_name"
                ],
                "title": "Third Party",
                "type": "object",
                "x-title-plural": "Third Parties"
              },
              {
                "type": "null"
              }
            ]
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `check_transfer`.",
            "enum": [
              "check_transfer"
            ],
            "type": "string"
          }
        },
        "required": [
          "account_id",
          "source_account_number_id",
          "account_number",
          "routing_number",
          "check_number",
          "fulfillment_method",
          "physical_check",
          "third_party",
          "amount",
          "created_at",
          "currency",
          "approval",
          "cancellation",
          "id",
          "mailing",
          "pending_transaction_id",
          "status",
          "submission",
          "stop_payment_request",
          "approved_inbound_check_deposit_id",
          "created_by",
          "idempotency_key",
          "type"
        ],
        "title": "Check Transfer",
        "type": "object",
        "x-tag": "Check Transfers",
        "x-title-plural": "Check Transfers"
      },
      "check_transfer_deposit": {
        "description": "An Inbound Check is a check drawn on an Increase account that has been deposited by an external bank account. These types of checks are not pre-registered.",
        "example": {
          "back_image_file_id": "file_makxrc67oh9l6sg7w9yc",
          "bank_of_first_deposit_routing_number": null,
          "deposited_at": "2020-01-31T23:59:59Z",
          "front_image_file_id": "file_makxrc67oh9l6sg7w9yc",
          "inbound_check_deposit_id": "inbound_check_deposit_zoshvqybq0cjjm31mra",
          "transaction_id": "transaction_uyrp7fld2ium70oa7oi",
          "transfer_id": "check_transfer_30b43acfu9vw8fyc4f5",
          "type": "check_transfer_deposit"
        },
        "properties": {
          "back_image_file_id": {
            "anyOf": [
              {
                "description": "The identifier of the API File object containing an image of the back of the deposited check.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "bank_of_first_deposit_routing_number": {
            "anyOf": [
              {
                "description": "The American Bankers' Association (ABA) Routing Transit Number (RTN) for the bank depositing this check. In some rare cases, this is not transmitted via Check21 and the value will be null.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "deposited_at": {
            "description": "When the check was deposited.",
            "format": "date-time",
            "type": "string"
          },
          "front_image_file_id": {
            "anyOf": [
              {
                "description": "The identifier of the API File object containing an image of the front of the deposited check.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "inbound_check_deposit_id": {
            "anyOf": [
              {
                "description": "The identifier of the Inbound Check Deposit object associated with this transaction.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "transaction_id": {
            "anyOf": [
              {
                "description": "The identifier of the Transaction object created when the check was deposited.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "transfer_id": {
            "anyOf": [
              {
                "description": "The identifier of the Check Transfer object that was deposited.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `check_transfer_deposit`.",
            "enum": [
              "check_transfer_deposit"
            ],
            "type": "string"
          }
        },
        "required": [
          "deposited_at",
          "transaction_id",
          "front_image_file_id",
          "back_image_file_id",
          "bank_of_first_deposit_routing_number",
          "inbound_check_deposit_id",
          "transfer_id",
          "type"
        ],
        "title": "Check Transfer Deposit",
        "type": "object",
        "x-title-plural": "Check Transfer Deposits"
      },
      "check_transfer_list": {
        "description": "A list of Check Transfer objects.",
        "example": {
          "data": [
            {
              "account_id": "account_in71c4amph0vgo2qllky",
              "account_number": "987654321",
              "amount": 1000,
              "approval": null,
              "approved_inbound_check_deposit_id": "inbound_check_deposit_zoshvqybq0cjjm31mra",
              "cancellation": null,
              "check_number": "123",
              "created_at": "2020-01-31T23:59:59Z",
              "created_by": {
                "category": "user",
                "user": {
                  "email": "user@example.com"
                }
              },
              "currency": "USD",
              "deposit": null,
              "fulfillment_method": "physical_check",
              "id": "check_transfer_30b43acfu9vw8fyc4f5",
              "idempotency_key": null,
              "mailing": {
                "image_id": null,
                "mailed_at": "2020-01-31T23:59:59Z",
                "tracking_number": null
              },
              "pending_transaction_id": "pending_transaction_k1sfetcau2qbvjbzgju4",
              "physical_check": {
                "mailing_address": {
                  "city": "New York",
                  "line1": "33 Liberty Street",
                  "line2": null,
                  "name": "Ian Crease",
                  "postal_code": "10045",
                  "state": "NY"
                },
                "memo": "Invoice 29582",
                "note": null,
                "recipient_name": "Ian Crease",
                "return_address": {
                  "city": "New York",
                  "line1": "33 Liberty Street",
                  "line2": null,
                  "name": "Ian Crease",
                  "postal_code": "10045",
                  "state": "NY"
                },
                "shipping_method": null,
                "signature_text": null,
                "signer_name": null,
                "tracking_updates": []
              },
              "routing_number": "101050001",
              "source_account_number_id": "account_number_v18nkfqm6afpsrvy82b2",
              "status": "mailed",
              "stop_payment_request": null,
              "submission": {
                "submitted_at": "2020-01-31T23:59:59Z"
              },
              "third_party": null,
              "type": "check_transfer"
            }
          ],
          "next_cursor": "v57w5d"
        },
        "properties": {
          "data": {
            "description": "The contents of the list.",
            "items": {
              "$ref": "#/components/schemas/check_transfer"
            },
            "type": "array"
          },
          "next_cursor": {
            "anyOf": [
              {
                "description": "A pointer to a place in the list.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "Check Transfer List",
        "type": "object",
        "x-title-plural": "Check Transfer Lists"
      },
      "check_transfer_stop_payment_request": {
        "description": "A Check Transfer Stop Payment Request is created when a check transfer is stopped. It offsets the Check Transfer Intention.",
        "example": {
          "reason": "mail_delivery_failed",
          "requested_at": "2020-01-31T23:59:59Z",
          "transfer_id": "check_transfer_30b43acfu9vw8fyc4f5",
          "type": "check_transfer_stop_payment_request"
        },
        "properties": {
          "reason": {
            "description": "The reason why this transfer was stopped.",
            "enum": [
              "mail_delivery_failed",
              "rejected_by_increase",
              "not_authorized",
              "unknown"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The check could not be delivered.",
              "The check was canceled by an Increase operator who will provide details out-of-band.",
              "The check was not authorized.",
              "The check was stopped for another reason."
            ]
          },
          "requested_at": {
            "description": "The time the stop-payment was requested.",
            "format": "date-time",
            "type": "string"
          },
          "transfer_id": {
            "description": "The ID of the check transfer that was stopped.",
            "type": "string"
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `check_transfer_stop_payment_request`.",
            "enum": [
              "check_transfer_stop_payment_request"
            ],
            "type": "string"
          }
        },
        "required": [
          "transfer_id",
          "reason",
          "requested_at",
          "type"
        ],
        "title": "Check Transfer Stop Payment Request",
        "type": "object",
        "x-title-plural": "Check Transfer Stop Payment Requests"
      },
      "clone_a_physical_card_profile_parameters": {
        "example": {
          "front_image_file_id": "file_o6aex13wm1jcc36sgcj1"
        },
        "properties": {
          "carrier_image_file_id": {
            "description": "The identifier of the File containing the physical card's carrier image.",
            "type": "string"
          },
          "contact_phone": {
            "description": "A phone number the user can contact to receive support for their card.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "description": "A description you can use to identify the Card Profile.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "front_image_file_id": {
            "description": "The identifier of the File containing the physical card's front image.",
            "type": "string"
          },
          "front_text": {
            "description": "Text printed on the front of the card. Reach out to [support@increase.com](mailto:support@increase.com) for more information.",
            "properties": {
              "line1": {
                "description": "The first line of text on the front of the card.",
                "maxLength": 33,
                "minLength": 1,
                "type": "string"
              },
              "line2": {
                "description": "The second line of text on the front of the card. Providing a second line moves the first line slightly higher and prints the second line in the spot where the first line would have otherwise been printed.",
                "maxLength": 33,
                "minLength": 1,
                "type": "string"
              }
            },
            "required": [
              "line1"
            ],
            "type": "object"
          }
        },
        "type": "object"
      },
      "clones_a_digital_card_profile_parameters": {
        "example": {
          "background_image_file_id": "file_1ai913suu1zfn1pdetru"
        },
        "properties": {
          "app_icon_file_id": {
            "description": "The identifier of the File containing the card's icon image.",
            "type": "string"
          },
          "background_image_file_id": {
            "description": "The identifier of the File containing the card's front image.",
            "type": "string"
          },
          "card_description": {
            "description": "A user-facing description for the card itself.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string"
          },
          "contact_email": {
            "description": "An email address the user can contact to receive support for their card.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string"
          },
          "contact_phone": {
            "description": "A phone number the user can contact to receive support for their card.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string"
          },
          "contact_website": {
            "description": "A website the user can visit to view and receive support for their card.",
            "type": "string"
          },
          "description": {
            "description": "A description you can use to identify the Card Profile.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "issuer_name": {
            "description": "A user-facing description for whoever is issuing the card.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string"
          },
          "text_color": {
            "description": "The Card's text color, specified as an RGB triple. The default is white.",
            "properties": {
              "blue": {
                "description": "The value of the blue channel in the RGB color.",
                "maximum": 255,
                "minimum": 0,
                "type": "integer"
              },
              "green": {
                "description": "The value of the green channel in the RGB color.",
                "maximum": 255,
                "minimum": 0,
                "type": "integer"
              },
              "red": {
                "description": "The value of the red channel in the RGB color.",
                "maximum": 255,
                "minimum": 0,
                "type": "integer"
              }
            },
            "required": [
              "red",
              "green",
              "blue"
            ],
            "type": "object"
          }
        },
        "type": "object"
      },
      "confirm_an_entitys_details_are_correct_parameters": {
        "example": {},
        "properties": {
          "confirmed_at": {
            "description": "When your user confirmed the Entity's details. If not provided, the current time will be used.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "create_a_beneficial_owner_for_a_corporate_entity_parameters": {
        "example": {
          "beneficial_owner": {
            "company_title": "CEO",
            "individual": {
              "address": {
                "city": "New York",
                "line1": "33 Liberty Street",
                "state": "NY",
                "zip": "10045"
              },
              "date_of_birth": "1970-01-31",
              "identification": {
                "method": "social_security_number",
                "number": "078051120"
              },
              "name": "Ian Crease"
            },
            "prongs": [
              "control"
            ]
          }
        },
        "properties": {
          "beneficial_owner": {
            "description": "The identifying details of anyone controlling or owning 25% or more of the corporation.",
            "properties": {
              "company_title": {
                "description": "This person's role or title within the entity.",
                "maxLength": 200,
                "minLength": 1,
                "type": "string"
              },
              "individual": {
                "description": "Personal details for the beneficial owner.",
                "properties": {
                  "address": {
                    "description": "The individual's physical address. Mail receiving locations like PO Boxes and PMB's are disallowed.",
                    "properties": {
                      "city": {
                        "description": "The city of the address.",
                        "maxLength": 200,
                        "minLength": 1,
                        "type": "string"
                      },
                      "line1": {
                        "description": "The first line of the address. This is usually the street number and street.",
                        "maxLength": 200,
                        "minLength": 1,
                        "type": "string"
                      },
                      "line2": {
                        "description": "The second line of the address. This might be the floor or room number.",
                        "maxLength": 200,
                        "minLength": 1,
                        "type": "string"
                      },
                      "state": {
                        "description": "The two-letter United States Postal Service (USPS) abbreviation for the state of the address.",
                        "maxLength": 200,
                        "minLength": 1,
                        "type": "string"
                      },
                      "zip": {
                        "description": "The ZIP code of the address.",
                        "maxLength": 200,
                        "minLength": 1,
                        "type": "string"
                      }
                    },
                    "required": [
                      "line1",
                      "city",
                      "state",
                      "zip"
                    ],
                    "type": "object"
                  },
                  "confirmed_no_us_tax_id": {
                    "description": "The identification method for an individual can only be a passport, driver's license, or other document if you've confirmed the individual does not have a US tax id (either a Social Security Number or Individual Taxpayer Identification Number).",
                    "type": "boolean"
                  },
                  "date_of_birth": {
                    "description": "The person's date of birth in YYYY-MM-DD format.",
                    "format": "date",
                    "type": "string"
                  },
                  "identification": {
                    "description": "A means of verifying the person's identity.",
                    "properties": {
                      "drivers_license": {
                        "description": "Information about the United States driver's license used for identification. Required if `method` is equal to `drivers_license`.",
                        "properties": {
                          "back_file_id": {
                            "description": "The identifier of the File containing the back of the driver's license.",
                            "type": "string"
                          },
                          "expiration_date": {
                            "description": "The driver's license's expiration date in YYYY-MM-DD format.",
                            "format": "date",
                            "type": "string"
                          },
                          "file_id": {
                            "description": "The identifier of the File containing the front of the driver's license.",
                            "type": "string"
                          },
                          "state": {
                            "description": "The state that issued the provided driver's license.",
                            "maxLength": 200,
                            "minLength": 1,
                            "type": "string"
                          }
                        },
                        "required": [
                          "file_id",
                          "expiration_date",
                          "state"
                        ],
                        "type": "object"
                      },
                      "method": {
                        "description": "A method that can be used to verify the individual's identity.",
                        "enum": [
                          "social_security_number",
                          "individual_taxpayer_identification_number",
                          "passport",
                          "drivers_license",
                          "other"
                        ],
                        "type": "string",
                        "x-enum-descriptions": [
                          "A social security number.",
                          "An individual taxpayer identification number (ITIN).",
                          "A passport number.",
                          "A driver's license number.",
                          "Another identifying document."
                        ]
                      },
                      "number": {
                        "description": "An identification number that can be used to verify the individual's identity, such as a social security number.",
                        "maxLength": 200,
                        "minLength": 4,
                        "type": "string"
                      },
                      "other": {
                        "description": "Information about the identification document provided. Required if `method` is equal to `other`.",
                        "properties": {
                          "back_file_id": {
                            "description": "The identifier of the File containing the back of the document. Not every document has a reverse side.",
                            "type": "string"
                          },
                          "country": {
                            "description": "The two-character ISO 3166-1 code representing the country that issued the document.",
                            "maxLength": 200,
                            "minLength": 1,
                            "type": "string"
                          },
                          "description": {
                            "description": "A description of the document submitted.",
                            "maxLength": 200,
                            "minLength": 1,
                            "type": "string"
                          },
                          "expiration_date": {
                            "description": "The document's expiration date in YYYY-MM-DD format.",
                            "format": "date",
                            "type": "string"
                          },
                          "file_id": {
                            "description": "The identifier of the File containing the front of the document.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "country",
                          "description",
                          "file_id"
                        ],
                        "type": "object"
                      },
                      "passport": {
                        "description": "Information about the passport used for identification. Required if `method` is equal to `passport`.",
                        "properties": {
                          "country": {
                            "description": "The country that issued the passport.",
                            "maxLength": 200,
                            "minLength": 1,
                            "type": "string"
                          },
                          "expiration_date": {
                            "description": "The passport's expiration date in YYYY-MM-DD format.",
                            "format": "date",
                            "type": "string"
                          },
                          "file_id": {
                            "description": "The identifier of the File containing the passport.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "file_id",
                          "expiration_date",
                          "country"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "method",
                      "number"
                    ],
                    "type": "object"
                  },
                  "name": {
                    "description": "The person's legal name.",
                    "maxLength": 200,
                    "minLength": 1,
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "date_of_birth",
                  "address",
                  "identification"
                ],
                "type": "object"
              },
              "prongs": {
                "description": "Why this person is considered a beneficial owner of the entity. At least one option is required, if a person is both a control person and owner, submit an array containing both.",
                "items": {
                  "enum": [
                    "ownership",
                    "control"
                  ],
                  "type": "string",
                  "x-enum-descriptions": [
                    "A person with 25% or greater direct or indirect ownership of the entity.",
                    "A person who manages, directs, or has significant control of the entity."
                  ]
                },
                "type": "array"
              }
            },
            "required": [
              "individual",
              "prongs"
            ],
            "type": "object"
          }
        },
        "required": [
          "beneficial_owner"
        ],
        "type": "object"
      },
      "create_a_bookkeeping_account_parameters": {
        "example": {
          "name": "New Account!"
        },
        "properties": {
          "account_id": {
            "description": "The entity, if `compliance_category` is `commingled_cash`.",
            "type": "string"
          },
          "compliance_category": {
            "description": "The account compliance category.",
            "enum": [
              "commingled_cash",
              "customer_balance"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "A cash in an commingled Increase Account.",
              "A customer balance."
            ]
          },
          "entity_id": {
            "description": "The entity, if `compliance_category` is `customer_balance`.",
            "type": "string"
          },
          "name": {
            "description": "The name you choose for the account.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "create_a_bookkeeping_entry_set_parameters": {
        "example": {
          "date": "2020-01-31T23:59:59Z",
          "entries": [
            {
              "account_id": "bookkeeping_account_9husfpw68pzmve9dvvc7",
              "amount": 100
            },
            {
              "account_id": "bookkeeping_account_t2obldz1rcu15zr54umg",
              "amount": -100
            }
          ],
          "transaction_id": "transaction_uyrp7fld2ium70oa7oi"
        },
        "properties": {
          "date": {
            "description": "The date of the transaction. Optional if `transaction_id` is provided, in which case we use the `date` of that transaction. Required otherwise.",
            "format": "date-time",
            "type": "string"
          },
          "entries": {
            "description": "The bookkeeping entries.",
            "items": {
              "properties": {
                "account_id": {
                  "description": "The identifier for the Bookkeeping Account impacted by this entry.",
                  "type": "string"
                },
                "amount": {
                  "description": "The entry amount in the minor unit of the account currency. For dollars, for example, this is cents. Debit entries have positive amounts; credit entries have negative amounts.",
                  "type": "integer"
                }
              },
              "required": [
                "account_id",
                "amount"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "transaction_id": {
            "description": "The identifier of the Transaction related to this entry set, if any.",
            "type": "string"
          }
        },
        "required": [
          "entries"
        ],
        "type": "object"
      },
      "create_a_card_dispute_parameters": {
        "example": {
          "disputed_transaction_id": "transaction_uyrp7fld2ium70oa7oi",
          "explanation": "Unauthorized recurring transaction."
        },
        "properties": {
          "amount": {
            "description": "The monetary amount of the part of the transaction that is being disputed. This is optional and will default to the full amount of the transaction if not provided. If provided, the amount must be less than or equal to the amount of the transaction.",
            "minimum": 1,
            "type": "integer"
          },
          "disputed_transaction_id": {
            "description": "The Transaction you wish to dispute. This Transaction must have a `source_type` of `card_settlement`.",
            "type": "string"
          },
          "explanation": {
            "description": "Why you are disputing this Transaction.",
            "maxLength": 2000,
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "disputed_transaction_id",
          "explanation"
        ],
        "type": "object"
      },
      "create_a_card_parameters": {
        "example": {
          "account_id": "account_in71c4amph0vgo2qllky",
          "description": "Card for Ian Crease"
        },
        "properties": {
          "account_id": {
            "description": "The Account the card should belong to.",
            "type": "string"
          },
          "billing_address": {
            "description": "The card's billing address.",
            "properties": {
              "city": {
                "description": "The city of the billing address.",
                "maxLength": 200,
                "minLength": 1,
                "type": "string"
              },
              "line1": {
                "description": "The first line of the billing address.",
                "maxLength": 200,
                "minLength": 1,
                "type": "string"
              },
              "line2": {
                "description": "The second line of the billing address.",
                "maxLength": 200,
                "minLength": 1,
                "type": "string"
              },
              "postal_code": {
                "description": "The postal code of the billing address.",
                "maxLength": 200,
                "minLength": 1,
                "type": "string"
              },
              "state": {
                "description": "The US state of the billing address.",
                "maxLength": 200,
                "minLength": 1,
                "type": "string"
              }
            },
            "required": [
              "line1",
              "city",
              "state",
              "postal_code"
            ],
            "type": "object"
          },
          "description": {
            "description": "The description you choose to give the card.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "digital_wallet": {
            "description": "The contact information used in the two-factor steps for digital wallet card creation. To add the card to a digital wallet, you may supply an email or phone number with this request. Otherwise, subscribe and then action a Real Time Decision with the category `digital_wallet_token_requested` or `digital_wallet_authentication_requested`.",
            "properties": {
              "digital_card_profile_id": {
                "description": "The digital card profile assigned to this digital card.",
                "type": "string"
              },
              "email": {
                "description": "An email address that can be used to contact and verify the cardholder via one-time passcode over email.",
                "maxLength": 200,
                "minLength": 1,
                "type": "string"
              },
              "phone": {
                "description": "A phone number that can be used to contact and verify the cardholder via one-time passcode over SMS.",
                "maxLength": 200,
                "minLength": 1,
                "type": "string"
              }
            },
            "type": "object"
          },
          "entity_id": {
            "description": "The Entity the card belongs to. You only need to supply this in rare situations when the card is not for the Account holder.",
            "type": "string"
          }
        },
        "required": [
          "account_id"
        ],
        "type": "object"
      },
      "create_a_check_deposit_parameters": {
        "example": {
          "account_id": "account_in71c4amph0vgo2qllky",
          "amount": 1000,
          "back_image_file_id": "file_26khfk98mzfz90a11oqx",
          "description": "Vendor payment",
          "front_image_file_id": "file_hkv175ovmc2tb2v2zbrm"
        },
        "properties": {
          "account_id": {
            "description": "The identifier for the Account to deposit the check in.",
            "type": "string"
          },
          "amount": {
            "description": "The deposit amount in USD cents.",
            "minimum": 0,
            "type": "integer"
          },
          "back_image_file_id": {
            "description": "The File containing the check's back image.",
            "type": "string"
          },
          "description": {
            "description": "The description you choose to give the Check Deposit, for display purposes only.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "front_image_file_id": {
            "description": "The File containing the check's front image.",
            "type": "string"
          }
        },
        "required": [
          "account_id",
          "amount",
          "front_image_file_id",
          "back_image_file_id"
        ],
        "type": "object"
      },
      "create_a_check_transfer_parameters": {
        "example": {
          "account_id": "account_in71c4amph0vgo2qllky",
          "amount": 1000,
          "fulfillment_method": "physical_check",
          "physical_check": {
            "mailing_address": {
              "city": "New York",
              "line1": "33 Liberty Street",
              "name": "Ian Crease",
              "postal_code": "10045",
              "state": "NY"
            },
            "memo": "Check payment",
            "recipient_name": "Ian Crease",
            "return_address": null,
            "signature_text": "Ian Crease"
          },
          "source_account_number_id": "account_number_v18nkfqm6afpsrvy82b2"
        },
        "properties": {
          "account_id": {
            "description": "The identifier for the account that will send the transfer.",
            "type": "string"
          },
          "amount": {
            "description": "The transfer amount in USD cents.",
            "minimum": 1,
            "type": "integer"
          },
          "fulfillment_method": {
            "description": "Whether Increase will print and mail the check or if you will do it yourself.",
            "enum": [
              "physical_check",
              "third_party"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "Increase will print and mail a physical check.",
              "Increase will not print a check; you are responsible for printing and mailing a check with the provided account number, routing number, check number, and amount."
            ]
          },
          "physical_check": {
            "description": "Details relating to the physical check that Increase will print and mail. This is required if `fulfillment_method` is equal to `physical_check`. It must not be included if any other `fulfillment_method` is provided.",
            "properties": {
              "check_number": {
                "description": "The check number Increase should print on the check. This should not contain leading zeroes and must be unique across the `source_account_number`. If this is omitted, Increase will generate a check number for you.",
                "maxLength": 10,
                "minLength": 1,
                "type": "string"
              },
              "mailing_address": {
                "description": "Details for where Increase will mail the check.",
                "properties": {
                  "city": {
                    "description": "The city component of the check's destination address.",
                    "maxLength": 35,
                    "minLength": 1,
                    "type": "string"
                  },
                  "line1": {
                    "description": "The first line of the address component of the check's destination address.",
                    "maxLength": 35,
                    "minLength": 1,
                    "type": "string"
                  },
                  "line2": {
                    "description": "The second line of the address component of the check's destination address.",
                    "maxLength": 35,
                    "minLength": 1,
                    "type": "string"
                  },
                  "postal_code": {
                    "description": "The postal code component of the check's destination address.",
                    "maxLength": 250,
                    "minLength": 1,
                    "type": "string"
                  },
                  "state": {
                    "description": "The US state component of the check's destination address.",
                    "maxLength": 200,
                    "minLength": 1,
                    "type": "string"
                  }
                },
                "required": [
                  "line1",
                  "city",
                  "state",
                  "postal_code"
                ],
                "type": "object"
              },
              "memo": {
                "description": "The descriptor that will be printed on the memo field on the check.",
                "maxLength": 40,
                "minLength": 1,
                "type": "string"
              },
              "note": {
                "description": "The descriptor that will be printed on the letter included with the check.",
                "maxLength": 400,
                "minLength": 1,
                "type": "string"
              },
              "recipient_name": {
                "description": "The name that will be printed on the check in the 'To:' field.",
                "maxLength": 35,
                "minLength": 1,
                "type": "string"
              },
              "return_address": {
                "description": "The return address to be printed on the check. If omitted this will default to an Increase-owned address that will mark checks as delivery failed and shred them.",
                "properties": {
                  "city": {
                    "description": "The city of the return address.",
                    "maxLength": 35,
                    "minLength": 1,
                    "type": "string"
                  },
                  "line1": {
                    "description": "The first line of the return address.",
                    "maxLength": 35,
                    "minLength": 1,
                    "type": "string"
                  },
                  "line2": {
                    "description": "The second line of the return address.",
                    "maxLength": 35,
                    "minLength": 1,
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the return address.",
                    "maxLength": 200,
                    "minLength": 1,
                    "type": "string"
                  },
                  "postal_code": {
                    "description": "The postal code of the return address.",
                    "maxLength": 200,
                    "minLength": 1,
                    "type": "string"
                  },
                  "state": {
                    "description": "The US state of the return address.",
                    "maxLength": 200,
                    "minLength": 1,
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "line1",
                  "city",
                  "state",
                  "postal_code"
                ],
                "type": "object"
              },
              "signature_text": {
                "description": "The text that will appear as the signature on the check in cursive font. If not provided, the check will be printed with 'No signature required'.",
                "maxLength": 30,
                "minLength": 1,
                "type": "string"
              }
            },
            "required": [
              "memo",
              "recipient_name",
              "mailing_address"
            ],
            "type": "object"
          },
          "require_approval": {
            "description": "Whether the transfer requires explicit approval via the dashboard or API.",
            "type": "boolean"
          },
          "source_account_number_id": {
            "description": "The identifier of the Account Number from which to send the transfer and print on the check.",
            "type": "string"
          },
          "third_party": {
            "description": "Details relating to the custom fulfillment you will perform. This is required if `fulfillment_method` is equal to `third_party`. It must not be included if any other `fulfillment_method` is provided.",
            "properties": {
              "check_number": {
                "description": "The check number you will print on the check. This should not contain leading zeroes. If this is omitted, Increase will generate a check number for you; you should inspect the response and use that check number.",
                "maxLength": 10,
                "minLength": 1,
                "type": "string"
              },
              "recipient_name": {
                "description": "The pay-to name you will print on the check. If provided, this is used for [Positive Pay](/documentation/positive-pay). If this is omitted, Increase will be unable to validate the payee name when the check is deposited.",
                "maxLength": 200,
                "minLength": 1,
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "account_id",
          "source_account_number_id",
          "fulfillment_method",
          "amount"
        ],
        "type": "object"
      },
      "create_a_digital_card_profile_parameters": {
        "example": {
          "app_icon_file_id": "file_8zxqkwlh43wo144u8yec",
          "background_image_file_id": "file_1ai913suu1zfn1pdetru",
          "card_description": "MyBank Signature Card",
          "contact_email": "user@example.com",
          "contact_phone": "+18885551212",
          "contact_website": "https://example.com",
          "description": "My Card Profile",
          "issuer_name": "MyBank",
          "text_color": {
            "blue": 59,
            "green": 43,
            "red": 26
          }
        },
        "properties": {
          "app_icon_file_id": {
            "description": "The identifier of the File containing the card's icon image.",
            "type": "string"
          },
          "background_image_file_id": {
            "description": "The identifier of the File containing the card's front image.",
            "type": "string"
          },
          "card_description": {
            "description": "A user-facing description for the card itself.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string"
          },
          "contact_email": {
            "description": "An email address the user can contact to receive support for their card.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string"
          },
          "contact_phone": {
            "description": "A phone number the user can contact to receive support for their card.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string"
          },
          "contact_website": {
            "description": "A website the user can visit to view and receive support for their card.",
            "type": "string"
          },
          "description": {
            "description": "A description you can use to identify the Card Profile.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "issuer_name": {
            "description": "A user-facing description for whoever is issuing the card.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string"
          },
          "text_color": {
            "description": "The Card's text color, specified as an RGB triple. The default is white.",
            "properties": {
              "blue": {
                "description": "The value of the blue channel in the RGB color.",
                "maximum": 255,
                "minimum": 0,
                "type": "integer"
              },
              "green": {
                "description": "The value of the green channel in the RGB color.",
                "maximum": 255,
                "minimum": 0,
                "type": "integer"
              },
              "red": {
                "description": "The value of the red channel in the RGB color.",
                "maximum": 255,
                "minimum": 0,
                "type": "integer"
              }
            },
            "required": [
              "red",
              "green",
              "blue"
            ],
            "type": "object"
          }
        },
        "required": [
          "description",
          "issuer_name",
          "card_description",
          "background_image_file_id",
          "app_icon_file_id"
        ],
        "type": "object"
      },
      "create_a_file_link_parameters": {
        "example": {
          "file_id": "file_makxrc67oh9l6sg7w9yc"
        },
        "properties": {
          "expires_at": {
            "description": "The time at which the File Link will expire. The default is 1 hour from the time of the request. The maxiumum is 1 day from the time of the request.",
            "format": "date-time",
            "type": "string"
          },
          "file_id": {
            "description": "The File to create a File Link for.",
            "type": "string"
          }
        },
        "required": [
          "file_id"
        ],
        "type": "object"
      },
      "create_a_file_parameters": {
        "example": {
          "file": "\"@tax_form.pdf\"",
          "purpose": "check_image_front"
        },
        "properties": {
          "description": {
            "description": "The description you choose to give the File.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "file": {
            "description": "The file contents. This should follow the specifications of [RFC 7578](https://datatracker.ietf.org/doc/html/rfc7578) which defines file transfers for the multipart/form-data protocol.",
            "format": "binary",
            "type": "string"
          },
          "purpose": {
            "description": "What the File will be used for in Increase's systems.",
            "enum": [
              "check_image_front",
              "check_image_back",
              "mailed_check_image",
              "check_attachment",
              "form_ss_4",
              "identity_document",
              "other",
              "trust_formation_document",
              "digital_wallet_artwork",
              "digital_wallet_app_icon",
              "physical_card_front",
              "physical_card_carrier",
              "document_request",
              "entity_supplemental_document",
              "unusual_activity_report_attachment",
              "proof_of_authorization_request_submission"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "An image of the front of a check, used for check deposits.",
              "An image of the back of a check, used for check deposits.",
              "An image of a check that was mailed to a recipient.",
              "A document to be printed on an additional page and mailed with a check that you've requested Increase print.",
              "IRS Form SS-4.",
              "An image of a government-issued ID.",
              "A file purpose not covered by any of the other cases.",
              "A legal document forming a trust.",
              "A card image to be rendered inside digital wallet apps. This must be a 1536x969 pixel PNG.",
              "An icon for you app to be rendered inside digital wallet apps. This must be a 100x100 pixel PNG.",
              "A card image to be printed on the front of a physical card. This must be a 2100x1340 pixel PNG with no other color but black.",
              "An image representing the entirety of the carrier used for a physical card. This must be a 2550x3300 pixel PNG with no other color but black.",
              "A document requested by Increase.",
              "A supplemental document associated an an Entity.",
              "An attachment to an Unusual Activity Report.",
              "A file containing additional evidence for a Proof of Authorization Request Submission."
            ]
          }
        },
        "required": [
          "file",
          "purpose"
        ],
        "type": "object"
      },
      "create_a_lockbox_parameters": {
        "example": {
          "account_id": "account_in71c4amph0vgo2qllky",
          "description": "Rent payments"
        },
        "properties": {
          "account_id": {
            "description": "The Account checks sent to this Lockbox should be deposited into.",
            "type": "string"
          },
          "description": {
            "description": "The description you choose for the Lockbox, for display purposes.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "recipient_name": {
            "description": "The name of the recipient that will receive mail at this location.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "account_id"
        ],
        "type": "object"
      },
      "create_a_notification_of_change_for_an_inbound_ach_transfer_parameters": {
        "example": {
          "updated_account_number": "987654321",
          "updated_routing_number": "101050001"
        },
        "properties": {
          "updated_account_number": {
            "description": "The updated account number to send in the notification of change.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "updated_routing_number": {
            "description": "The updated routing number to send in the notification of change.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          }
        },
        "type": "object"
      },
      "create_a_physical_card_parameters": {
        "example": {
          "card_id": "card_oubs0hwk5rn6knuecxg2",
          "cardholder": {
            "first_name": "Ian",
            "last_name": "Crease"
          },
          "shipment": {
            "address": {
              "city": "New York",
              "line1": "33 Liberty Street",
              "line2": "Unit 2",
              "name": "Ian Crease",
              "postal_code": "10045",
              "state": "NY"
            },
            "method": "usps"
          }
        },
        "properties": {
          "card_id": {
            "description": "The underlying card representing this physical card.",
            "type": "string"
          },
          "cardholder": {
            "description": "Details about the cardholder, as it will appear on the physical card.",
            "properties": {
              "first_name": {
                "description": "The cardholder's first name.",
                "maxLength": 200,
                "minLength": 1,
                "type": "string"
              },
              "last_name": {
                "description": "The cardholder's last name.",
                "maxLength": 200,
                "minLength": 1,
                "type": "string"
              }
            },
            "required": [
              "first_name",
              "last_name"
            ],
            "type": "object"
          },
          "physical_card_profile_id": {
            "description": "The physical card profile to use for this physical card. The latest default physical card profile will be used if not provided.",
            "type": "string"
          },
          "shipment": {
            "description": "The details used to ship this physical card.",
            "properties": {
              "address": {
                "description": "The address to where the card should be shipped.",
                "properties": {
                  "city": {
                    "description": "The city of the shipping address.",
                    "maxLength": 35,
                    "minLength": 1,
                    "type": "string"
                  },
                  "line1": {
                    "description": "The first line of the shipping address.",
                    "maxLength": 35,
                    "minLength": 1,
                    "type": "string"
                  },
                  "line2": {
                    "description": "The second line of the shipping address.",
                    "maxLength": 35,
                    "minLength": 1,
                    "type": "string"
                  },
                  "line3": {
                    "description": "The third line of the shipping address.",
                    "maxLength": 9,
                    "minLength": 1,
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the recipient.",
                    "maxLength": 35,
                    "minLength": 1,
                    "type": "string"
                  },
                  "phone_number": {
                    "description": "The phone number of the recipient.",
                    "maxLength": 15,
                    "minLength": 1,
                    "type": "string"
                  },
                  "postal_code": {
                    "description": "The postal code of the shipping address.",
                    "maxLength": 16,
                    "minLength": 1,
                    "type": "string"
                  },
                  "state": {
                    "description": "The US state of the shipping address.",
                    "maxLength": 200,
                    "minLength": 1,
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "line1",
                  "city",
                  "state",
                  "postal_code"
                ],
                "type": "object"
              },
              "method": {
                "description": "The shipping method to use.",
                "enum": [
                  "usps",
                  "fedex_priority_overnight",
                  "fedex_2_day"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "USPS Post with tracking.",
                  "FedEx Priority Overnight, no signature.",
                  "FedEx 2-day."
                ]
              }
            },
            "required": [
              "method",
              "address"
            ],
            "type": "object"
          }
        },
        "required": [
          "card_id",
          "cardholder",
          "shipment"
        ],
        "type": "object"
      },
      "create_a_physical_card_profile_parameters": {
        "example": {
          "carrier_image_file_id": "file_h6v7mtipe119os47ehlu",
          "contact_phone": "+16505046304",
          "description": "My Card Profile",
          "front_image_file_id": "file_o6aex13wm1jcc36sgcj1"
        },
        "properties": {
          "carrier_image_file_id": {
            "description": "The identifier of the File containing the physical card's carrier image.",
            "type": "string"
          },
          "contact_phone": {
            "description": "A phone number the user can contact to receive support for their card.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "description": "A description you can use to identify the Card Profile.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "front_image_file_id": {
            "description": "The identifier of the File containing the physical card's front image.",
            "type": "string"
          }
        },
        "required": [
          "description",
          "contact_phone",
          "front_image_file_id",
          "carrier_image_file_id"
        ],
        "type": "object"
      },
      "create_a_real_time_payments_transfer_parameters": {
        "example": {
          "amount": 100,
          "creditor_name": "Ian Crease",
          "destination_account_number": "987654321",
          "destination_routing_number": "101050001",
          "remittance_information": "Invoice 29582",
          "source_account_number_id": "account_number_v18nkfqm6afpsrvy82b2"
        },
        "properties": {
          "amount": {
            "description": "The transfer amount in USD cents. For Real-Time Payments transfers, must be positive.",
            "minimum": 1,
            "type": "integer"
          },
          "creditor_name": {
            "description": "The name of the transfer's recipient.",
            "maxLength": 140,
            "minLength": 1,
            "type": "string"
          },
          "debtor_name": {
            "description": "The name of the transfer's sender. If not provided, defaults to the name of the account's entity.",
            "maxLength": 140,
            "minLength": 1,
            "type": "string"
          },
          "destination_account_number": {
            "description": "The destination account number.",
            "maxLength": 34,
            "minLength": 1,
            "type": "string"
          },
          "destination_routing_number": {
            "description": "The destination American Bankers' Association (ABA) Routing Transit Number (RTN).",
            "maxLength": 9,
            "minLength": 9,
            "type": "string"
          },
          "external_account_id": {
            "description": "The ID of an External Account to initiate a transfer to. If this parameter is provided, `destination_account_number` and `destination_routing_number` must be absent.",
            "type": "string"
          },
          "remittance_information": {
            "description": "Unstructured information that will show on the recipient's bank statement.",
            "maxLength": 140,
            "minLength": 1,
            "type": "string"
          },
          "require_approval": {
            "description": "Whether the transfer requires explicit approval via the dashboard or API.",
            "type": "boolean"
          },
          "source_account_number_id": {
            "description": "The identifier of the Account Number from which to send the transfer.",
            "type": "string"
          },
          "ultimate_creditor_name": {
            "description": "The name of the ultimate recipient of the transfer. Set this if the creditor is an intermediary receiving the payment for someone else.",
            "maxLength": 140,
            "minLength": 1,
            "type": "string"
          },
          "ultimate_debtor_name": {
            "description": "The name of the ultimate sender of the transfer. Set this if the funds are being sent on behalf of someone who is not the account holder at Increase.",
            "maxLength": 140,
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "source_account_number_id",
          "amount",
          "creditor_name",
          "remittance_information"
        ],
        "type": "object"
      },
      "create_a_supplemental_document_for_an_entity_parameters": {
        "example": {
          "entity_id": "entity_n8y8tnk2p9339ti393yi",
          "file_id": "file_makxrc67oh9l6sg7w9yc"
        },
        "properties": {
          "entity_id": {
            "description": "The identifier of the Entity to associate with the supplemental document.",
            "type": "string"
          },
          "file_id": {
            "description": "The identifier of the File containing the document.",
            "type": "string"
          }
        },
        "required": [
          "entity_id",
          "file_id"
        ],
        "type": "object"
      },
      "create_a_wire_drawdown_request_parameters": {
        "example": {
          "account_number_id": "account_number_v18nkfqm6afpsrvy82b2",
          "amount": 10000,
          "message_to_recipient": "Invoice 29582",
          "recipient_account_number": "987654321",
          "recipient_address_line1": "33 Liberty Street",
          "recipient_address_line2": "New York, NY, 10045",
          "recipient_name": "Ian Crease",
          "recipient_routing_number": "101050001"
        },
        "properties": {
          "account_number_id": {
            "description": "The Account Number to which the recipient should send funds.",
            "type": "string"
          },
          "amount": {
            "description": "The amount requested from the recipient, in USD cents.",
            "maximum": 999999999999,
            "minimum": 1,
            "type": "integer"
          },
          "message_to_recipient": {
            "description": "A message the recipient will see as part of the request.",
            "maxLength": 140,
            "minLength": 1,
            "type": "string"
          },
          "originator_address_line1": {
            "description": "The drawdown request originator's address line 1. This is only necessary if you're requesting a payment to a commingled account. Otherwise, we'll use the associated entity's details.",
            "maxLength": 35,
            "minLength": 1,
            "type": "string"
          },
          "originator_address_line2": {
            "description": "The drawdown request originator's address line 2. This is only necessary if you're requesting a payment to a commingled account. Otherwise, we'll use the associated entity's details.",
            "maxLength": 35,
            "minLength": 1,
            "type": "string"
          },
          "originator_address_line3": {
            "description": "The drawdown request originator's address line 3. This is only necessary if you're requesting a payment to a commingled account. Otherwise, we'll use the associated entity's details.",
            "maxLength": 35,
            "minLength": 1,
            "type": "string"
          },
          "originator_name": {
            "description": "The drawdown request originator's name. This is only necessary if you're requesting a payment to a commingled account. Otherwise, we'll use the associated entity's details.",
            "maxLength": 35,
            "minLength": 1,
            "type": "string"
          },
          "recipient_account_number": {
            "description": "The drawdown request's recipient's account number.",
            "maxLength": 34,
            "minLength": 1,
            "type": "string"
          },
          "recipient_address_line1": {
            "description": "Line 1 of the drawdown request's recipient's address.",
            "maxLength": 35,
            "minLength": 1,
            "type": "string"
          },
          "recipient_address_line2": {
            "description": "Line 2 of the drawdown request's recipient's address.",
            "maxLength": 35,
            "minLength": 1,
            "type": "string"
          },
          "recipient_address_line3": {
            "description": "Line 3 of the drawdown request's recipient's address.",
            "maxLength": 35,
            "minLength": 1,
            "type": "string"
          },
          "recipient_name": {
            "description": "The drawdown request's recipient's name.",
            "maxLength": 35,
            "minLength": 1,
            "type": "string"
          },
          "recipient_routing_number": {
            "description": "The drawdown request's recipient's routing number.",
            "maxLength": 9,
            "minLength": 9,
            "type": "string"
          }
        },
        "required": [
          "account_number_id",
          "amount",
          "message_to_recipient",
          "recipient_account_number",
          "recipient_routing_number",
          "recipient_name"
        ],
        "type": "object"
      },
      "create_a_wire_transfer_parameters": {
        "example": {
          "account_id": "account_in71c4amph0vgo2qllky",
          "account_number": "987654321",
          "amount": 100,
          "beneficiary_address_line1": "33 Liberty Street",
          "beneficiary_address_line2": "New York",
          "beneficiary_address_line3": "NY 10045",
          "beneficiary_name": "Ian Crease",
          "message_to_recipient": "New account transfer",
          "routing_number": "101050001"
        },
        "properties": {
          "account_id": {
            "description": "The identifier for the account that will send the transfer.",
            "type": "string"
          },
          "account_number": {
            "description": "The account number for the destination account.",
            "maxLength": 34,
            "minLength": 1,
            "type": "string"
          },
          "amount": {
            "description": "The transfer amount in USD cents.",
            "maximum": 999999999999,
            "minimum": 1,
            "type": "integer"
          },
          "beneficiary_address_line1": {
            "description": "The beneficiary's address line 1.",
            "maxLength": 35,
            "minLength": 1,
            "type": "string"
          },
          "beneficiary_address_line2": {
            "description": "The beneficiary's address line 2.",
            "maxLength": 35,
            "minLength": 1,
            "type": "string"
          },
          "beneficiary_address_line3": {
            "description": "The beneficiary's address line 3.",
            "maxLength": 35,
            "minLength": 1,
            "type": "string"
          },
          "beneficiary_name": {
            "description": "The beneficiary's name.",
            "maxLength": 35,
            "minLength": 1,
            "type": "string"
          },
          "external_account_id": {
            "description": "The ID of an External Account to initiate a transfer to. If this parameter is provided, `account_number` and `routing_number` must be absent.",
            "type": "string"
          },
          "message_to_recipient": {
            "description": "The message that will show on the recipient's bank statement.",
            "maxLength": 140,
            "minLength": 1,
            "type": "string"
          },
          "originator_address_line1": {
            "description": "The originator's address line 1. This is only necessary if you're transferring from a commingled account. Otherwise, we'll use the associated entity's details.",
            "maxLength": 35,
            "minLength": 1,
            "type": "string"
          },
          "originator_address_line2": {
            "description": "The originator's address line 2. This is only necessary if you're transferring from a commingled account. Otherwise, we'll use the associated entity's details.",
            "maxLength": 35,
            "minLength": 1,
            "type": "string"
          },
          "originator_address_line3": {
            "description": "The originator's address line 3. This is only necessary if you're transferring from a commingled account. Otherwise, we'll use the associated entity's details.",
            "maxLength": 35,
            "minLength": 1,
            "type": "string"
          },
          "originator_name": {
            "description": "The originator's name. This is only necessary if you're transferring from a commingled account. Otherwise, we'll use the associated entity's details.",
            "maxLength": 35,
            "minLength": 1,
            "type": "string"
          },
          "require_approval": {
            "description": "Whether the transfer requires explicit approval via the dashboard or API.",
            "type": "boolean"
          },
          "routing_number": {
            "description": "The American Bankers' Association (ABA) Routing Transit Number (RTN) for the destination account.",
            "maxLength": 9,
            "minLength": 9,
            "type": "string"
          },
          "source_account_number_id": {
            "description": "The ID of an Account Number that will be passed to the wire's recipient",
            "type": "string"
          }
        },
        "required": [
          "account_id",
          "amount",
          "message_to_recipient",
          "beneficiary_name"
        ],
        "type": "object"
      },
      "create_an_account_number_parameters": {
        "example": {
          "account_id": "account_in71c4amph0vgo2qllky",
          "name": "Rent payments"
        },
        "properties": {
          "account_id": {
            "description": "The Account the Account Number should belong to.",
            "type": "string"
          },
          "inbound_ach": {
            "description": "Options related to how this Account Number should handle inbound ACH transfers.",
            "properties": {
              "debit_status": {
                "description": "Whether ACH debits are allowed against this Account Number. Note that ACH debits will be declined if this is `allowed` but the Account Number is not active. If you do not specify this field, the default is `allowed`.",
                "enum": [
                  "allowed",
                  "blocked"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "ACH Debits are allowed.",
                  "ACH Debits are blocked."
                ]
              }
            },
            "required": [
              "debit_status"
            ],
            "type": "object"
          },
          "inbound_checks": {
            "description": "Options related to how this Account Number should handle inbound check withdrawals.",
            "properties": {
              "status": {
                "description": "How Increase should process checks with this account number printed on them. If you do not specify this field, the default is `check_transfers_only`.",
                "enum": [
                  "allowed",
                  "check_transfers_only"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "Checks with this Account Number will be processed even if they are not associated with a Check Transfer.",
                  "Checks with this Account Number will be processed only if they can be matched to an existing Check Transfer."
                ]
              }
            },
            "required": [
              "status"
            ],
            "type": "object"
          },
          "name": {
            "description": "The name you choose for the Account Number.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "account_id",
          "name"
        ],
        "type": "object"
      },
      "create_an_account_parameters": {
        "example": {
          "entity_id": "entity_n8y8tnk2p9339ti393yi",
          "name": "New Account!",
          "program_id": "program_i2v2os4mwza1oetokh9i"
        },
        "properties": {
          "entity_id": {
            "description": "The identifier for the Entity that will own the Account.",
            "type": "string"
          },
          "informational_entity_id": {
            "description": "The identifier of an Entity that, while not owning the Account, is associated with its activity. Its relationship to your group must be `informational`.",
            "type": "string"
          },
          "name": {
            "description": "The name you choose for the Account.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "program_id": {
            "description": "The identifier for the Program that this Account falls under. Required if you operate more than one Program.",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "create_an_account_transfer_parameters": {
        "example": {
          "account_id": "account_in71c4amph0vgo2qllky",
          "amount": 100,
          "description": "Creating liquidity",
          "destination_account_id": "account_uf16sut2ct5bevmq3eh"
        },
        "properties": {
          "account_id": {
            "description": "The identifier for the account that will send the transfer.",
            "type": "string"
          },
          "amount": {
            "description": "The transfer amount in the minor unit of the account currency. For dollars, for example, this is cents.",
            "minimum": 1,
            "type": "integer"
          },
          "description": {
            "description": "The description you choose to give the transfer.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "destination_account_id": {
            "description": "The identifier for the account that will receive the transfer.",
            "type": "string"
          },
          "require_approval": {
            "description": "Whether the transfer requires explicit approval via the dashboard or API.",
            "type": "boolean"
          }
        },
        "required": [
          "account_id",
          "amount",
          "description",
          "destination_account_id"
        ],
        "type": "object"
      },
      "create_an_ach_prenotification_parameters": {
        "example": {
          "account_id": "account_in71c4amph0vgo2qllky",
          "account_number": "987654321",
          "routing_number": "101050001"
        },
        "properties": {
          "account_id": {
            "description": "The Increase identifier for the account that will send the transfer.",
            "type": "string"
          },
          "account_number": {
            "description": "The account number for the destination account.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "addendum": {
            "description": "Additional information that will be sent to the recipient.",
            "maxLength": 80,
            "minLength": 1,
            "type": "string"
          },
          "company_descriptive_date": {
            "description": "The description of the date of the transfer.",
            "maxLength": 6,
            "minLength": 1,
            "type": "string"
          },
          "company_discretionary_data": {
            "description": "The data you choose to associate with the transfer.",
            "maxLength": 20,
            "minLength": 1,
            "type": "string"
          },
          "company_entry_description": {
            "description": "The description of the transfer you wish to be shown to the recipient.",
            "maxLength": 10,
            "minLength": 1,
            "type": "string"
          },
          "company_name": {
            "description": "The name by which the recipient knows you.",
            "maxLength": 16,
            "minLength": 1,
            "type": "string"
          },
          "credit_debit_indicator": {
            "description": "Whether the Prenotification is for a future debit or credit.",
            "enum": [
              "credit",
              "debit"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The Prenotification is for an anticipated credit.",
              "The Prenotification is for an anticipated debit."
            ]
          },
          "effective_date": {
            "description": "The transfer effective date in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.",
            "format": "date",
            "type": "string"
          },
          "individual_id": {
            "description": "Your identifier for the transfer recipient.",
            "maxLength": 22,
            "minLength": 1,
            "type": "string"
          },
          "individual_name": {
            "description": "The name of the transfer recipient. This value is information and not verified by the recipient's bank.",
            "maxLength": 22,
            "minLength": 1,
            "type": "string"
          },
          "routing_number": {
            "description": "The American Bankers' Association (ABA) Routing Transit Number (RTN) for the destination account.",
            "maxLength": 9,
            "minLength": 9,
            "type": "string"
          },
          "standard_entry_class_code": {
            "description": "The Standard Entry Class (SEC) code to use for the ACH Prenotification.",
            "enum": [
              "corporate_credit_or_debit",
              "corporate_trade_exchange",
              "prearranged_payments_and_deposit",
              "internet_initiated"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "Corporate Credit and Debit (CCD).",
              "Corporate Trade Exchange (CTX).",
              "Prearranged Payments and Deposits (PPD).",
              "Internet Initiated (WEB)."
            ]
          }
        },
        "required": [
          "account_id",
          "account_number",
          "routing_number"
        ],
        "type": "object"
      },
      "create_an_ach_transfer_parameters": {
        "example": {
          "account_id": "account_in71c4amph0vgo2qllky",
          "account_number": "987654321",
          "amount": 100,
          "routing_number": "101050001",
          "statement_descriptor": "New ACH transfer"
        },
        "properties": {
          "account_id": {
            "description": "The Increase identifier for the account that will send the transfer.",
            "type": "string"
          },
          "account_number": {
            "description": "The account number for the destination account.",
            "maxLength": 17,
            "minLength": 1,
            "type": "string"
          },
          "addenda": {
            "description": "Additional information that will be sent to the recipient. This is included in the transfer data sent to the receiving bank.",
            "properties": {
              "category": {
                "description": "The type of addenda to pass with the transfer.",
                "enum": [
                  "freeform",
                  "payment_order_remittance_advice"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "Unstructured `payment_related_information` passed through with the transfer.",
                  "Structured ASC X12 820 remittance advice records. Please reach out to [support@increase.com](mailto:support@increase.com) for more information."
                ]
              },
              "freeform": {
                "description": "Unstructured `payment_related_information` passed through with the transfer.",
                "properties": {
                  "entries": {
                    "description": "Each entry represents an addendum sent with the transfer. Please reach out to [support@increase.com](mailto:support@increase.com) to send more than one addendum.",
                    "items": {
                      "properties": {
                        "payment_related_information": {
                          "description": "The payment related information passed in the addendum.",
                          "maxLength": 80,
                          "minLength": 1,
                          "type": "string"
                        }
                      },
                      "required": [
                        "payment_related_information"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "entries"
                ],
                "type": "object"
              },
              "payment_order_remittance_advice": {
                "description": "Structured ASC X12 820 remittance advice records. Please reach out to [support@increase.com](mailto:support@increase.com) for more information.",
                "properties": {
                  "invoices": {
                    "description": "ASC X12 RMR records for this specific transfer.",
                    "items": {
                      "properties": {
                        "invoice_number": {
                          "description": "The invoice number for this reference, determined in advance with the receiver.",
                          "maxLength": 50,
                          "minLength": 1,
                          "type": "string"
                        },
                        "paid_amount": {
                          "description": "The amount that was paid for this invoice in the minor unit of its currency. For dollars, for example, this is cents.",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "invoice_number",
                        "paid_amount"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "invoices"
                ],
                "type": "object"
              }
            },
            "required": [
              "category"
            ],
            "type": "object"
          },
          "amount": {
            "description": "The transfer amount in USD cents. A positive amount originates a credit transfer pushing funds to the receiving account. A negative amount originates a debit transfer pulling funds from the receiving account.",
            "maximum": 9999999999,
            "minimum": -9999999999,
            "type": "integer"
          },
          "company_descriptive_date": {
            "description": "The description of the date of the transfer, usually in the format `YYMMDD`. This is included in the transfer data sent to the receiving bank.",
            "maxLength": 6,
            "minLength": 1,
            "type": "string"
          },
          "company_discretionary_data": {
            "description": "The data you choose to associate with the transfer. This is included in the transfer data sent to the receiving bank.",
            "maxLength": 20,
            "minLength": 1,
            "type": "string"
          },
          "company_entry_description": {
            "description": "A description of the transfer. This is included in the transfer data sent to the receiving bank.",
            "maxLength": 10,
            "minLength": 1,
            "type": "string"
          },
          "company_name": {
            "description": "The name by which the recipient knows you. This is included in the transfer data sent to the receiving bank.",
            "maxLength": 16,
            "minLength": 1,
            "type": "string"
          },
          "destination_account_holder": {
            "description": "The type of entity that owns the account to which the ACH Transfer is being sent.",
            "enum": [
              "business",
              "individual",
              "unknown"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The External Account is owned by a business.",
              "The External Account is owned by an individual.",
              "It's unknown what kind of entity owns the External Account."
            ]
          },
          "external_account_id": {
            "description": "The ID of an External Account to initiate a transfer to. If this parameter is provided, `account_number`, `routing_number`, and `funding` must be absent.",
            "type": "string"
          },
          "funding": {
            "description": "The type of the account to which the transfer will be sent.",
            "enum": [
              "checking",
              "savings"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "A checking account.",
              "A savings account."
            ]
          },
          "individual_id": {
            "description": "Your identifier for the transfer recipient.",
            "maxLength": 15,
            "minLength": 1,
            "type": "string"
          },
          "individual_name": {
            "description": "The name of the transfer recipient. This value is informational and not verified by the recipient's bank.",
            "maxLength": 22,
            "minLength": 1,
            "type": "string"
          },
          "preferred_effective_date": {
            "description": "Configuration for how the effective date of the transfer will be set. This determines same-day vs future-dated settlement timing. If not set, defaults to a `settlement_schedule` of `same_day`. If set, exactly one of the child attributes must be set.",
            "properties": {
              "date": {
                "description": "A specific date in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format to use as the effective date when submitting this transfer.",
                "format": "date",
                "type": "string"
              },
              "settlement_schedule": {
                "description": "A schedule by which Increase will choose an effective date for the transfer.",
                "enum": [
                  "same_day",
                  "future_dated"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "The chosen effective date will be the same as the ACH processing date on which the transfer is submitted. This is necessary, but not sufficient for the transfer to be settled same-day: it must also be submitted before the last same-day cutoff and be less than or equal to $1,000.000.00.",
                  "The chosen effective date will be the business day following the ACH processing date on which the transfer is submitted. The transfer will be settled on that future day."
                ]
              }
            },
            "type": "object"
          },
          "require_approval": {
            "description": "Whether the transfer requires explicit approval via the dashboard or API.",
            "type": "boolean"
          },
          "routing_number": {
            "description": "The American Bankers' Association (ABA) Routing Transit Number (RTN) for the destination account.",
            "maxLength": 9,
            "minLength": 9,
            "type": "string"
          },
          "standard_entry_class_code": {
            "description": "The Standard Entry Class (SEC) code to use for the transfer.",
            "enum": [
              "corporate_credit_or_debit",
              "corporate_trade_exchange",
              "prearranged_payments_and_deposit",
              "internet_initiated"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "Corporate Credit and Debit (CCD).",
              "Corporate Trade Exchange (CTX).",
              "Prearranged Payments and Deposits (PPD).",
              "Internet Initiated (WEB)."
            ]
          },
          "statement_descriptor": {
            "description": "A description you choose to give the transfer. This will be saved with the transfer details, displayed in the dashboard, and returned by the API. If `individual_name` and `company_name` are not explicitly set by this API, the `statement_descriptor` will be sent in those fields to the receiving bank to help the customer recognize the transfer. You are highly encouraged to pass `individual_name` and `company_name` instead of relying on this fallback.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "transaction_timing": {
            "description": "The timing of the transaction.",
            "enum": [
              "synchronous",
              "asynchronous"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "A Transaction will be created immediately.",
              "A Transaction will be created when the funds settle at the Federal Reserve."
            ]
          }
        },
        "required": [
          "account_id",
          "amount",
          "statement_descriptor"
        ],
        "type": "object"
      },
      "create_an_entity_parameters": {
        "example": {
          "corporation": {
            "address": {
              "city": "New York",
              "line1": "33 Liberty Street",
              "state": "NY",
              "zip": "10045"
            },
            "beneficial_owners": [
              {
                "company_title": "CEO",
                "individual": {
                  "address": {
                    "city": "New York",
                    "line1": "33 Liberty Street",
                    "state": "NY",
                    "zip": "10045"
                  },
                  "date_of_birth": "1970-01-31",
                  "identification": {
                    "method": "social_security_number",
                    "number": "078051120"
                  },
                  "name": "Ian Crease"
                },
                "prongs": [
                  "control"
                ]
              }
            ],
            "incorporation_state": "NY",
            "name": "National Phonograph Company",
            "tax_identifier": "602214076",
            "website": "https://example.com"
          },
          "structure": "corporation",
          "supplemental_documents": [
            {
              "file_id": "file_makxrc67oh9l6sg7w9yc"
            }
          ]
        },
        "properties": {
          "corporation": {
            "description": "Details of the corporation entity to create. Required if `structure` is equal to `corporation`.",
            "properties": {
              "address": {
                "description": "The entity's physical address. Mail receiving locations like PO Boxes and PMB's are disallowed.",
                "properties": {
                  "city": {
                    "description": "The city of the address.",
                    "maxLength": 200,
                    "minLength": 1,
                    "type": "string"
                  },
                  "line1": {
                    "description": "The first line of the address. This is usually the street number and street.",
                    "maxLength": 200,
                    "minLength": 1,
                    "type": "string"
                  },
                  "line2": {
                    "description": "The second line of the address. This might be the floor or room number.",
                    "maxLength": 200,
                    "minLength": 1,
                    "type": "string"
                  },
                  "state": {
                    "description": "The two-letter United States Postal Service (USPS) abbreviation for the state of the address.",
                    "maxLength": 200,
                    "minLength": 1,
                    "type": "string"
                  },
                  "zip": {
                    "description": "The ZIP code of the address.",
                    "maxLength": 200,
                    "minLength": 1,
                    "type": "string"
                  }
                },
                "required": [
                  "line1",
                  "city",
                  "state",
                  "zip"
                ],
                "type": "object"
              },
              "beneficial_owners": {
                "description": "The identifying details of anyone controlling or owning 25% or more of the corporation.",
                "items": {
                  "properties": {
                    "company_title": {
                      "description": "This person's role or title within the entity.",
                      "maxLength": 200,
                      "minLength": 1,
                      "type": "string"
                    },
                    "individual": {
                      "description": "Personal details for the beneficial owner.",
                      "properties": {
                        "address": {
                          "description": "The individual's physical address. Mail receiving locations like PO Boxes and PMB's are disallowed.",
                          "properties": {
                            "city": {
                              "description": "The city of the address.",
                              "maxLength": 200,
                              "minLength": 1,
                              "type": "string"
                            },
                            "line1": {
                              "description": "The first line of the address. This is usually the street number and street.",
                              "maxLength": 200,
                              "minLength": 1,
                              "type": "string"
                            },
                            "line2": {
                              "description": "The second line of the address. This might be the floor or room number.",
                              "maxLength": 200,
                              "minLength": 1,
                              "type": "string"
                            },
                            "state": {
                              "description": "The two-letter United States Postal Service (USPS) abbreviation for the state of the address.",
                              "maxLength": 200,
                              "minLength": 1,
                              "type": "string"
                            },
                            "zip": {
                              "description": "The ZIP code of the address.",
                              "maxLength": 200,
                              "minLength": 1,
                              "type": "string"
                            }
                          },
                          "required": [
                            "line1",
                            "city",
                            "state",
                            "zip"
                          ],
                          "type": "object"
                        },
                        "confirmed_no_us_tax_id": {
                          "description": "The identification method for an individual can only be a passport, driver's license, or other document if you've confirmed the individual does not have a US tax id (either a Social Security Number or Individual Taxpayer Identification Number).",
                          "type": "boolean"
                        },
                        "date_of_birth": {
                          "description": "The person's date of birth in YYYY-MM-DD format.",
                          "format": "date",
                          "type": "string"
                        },
                        "identification": {
                          "description": "A means of verifying the person's identity.",
                          "properties": {
                            "drivers_license": {
                              "description": "Information about the United States driver's license used for identification. Required if `method` is equal to `drivers_license`.",
                              "properties": {
                                "back_file_id": {
                                  "description": "The identifier of the File containing the back of the driver's license.",
                                  "type": "string"
                                },
                                "expiration_date": {
                                  "description": "The driver's license's expiration date in YYYY-MM-DD format.",
                                  "format": "date",
                                  "type": "string"
                                },
                                "file_id": {
                                  "description": "The identifier of the File containing the front of the driver's license.",
                                  "type": "string"
                                },
                                "state": {
                                  "description": "The state that issued the provided driver's license.",
                                  "maxLength": 200,
                                  "minLength": 1,
                                  "type": "string"
                                }
                              },
                              "required": [
                                "file_id",
                                "expiration_date",
                                "state"
                              ],
                              "type": "object"
                            },
                            "method": {
                              "description": "A method that can be used to verify the individual's identity.",
                              "enum": [
                                "social_security_number",
                                "individual_taxpayer_identification_number",
                                "passport",
                                "drivers_license",
                                "other"
                              ],
                              "type": "string",
                              "x-enum-descriptions": [
                                "A social security number.",
                                "An individual taxpayer identification number (ITIN).",
                                "A passport number.",
                                "A driver's license number.",
                                "Another identifying document."
                              ]
                            },
                            "number": {
                              "description": "An identification number that can be used to verify the individual's identity, such as a social security number.",
                              "maxLength": 200,
                              "minLength": 4,
                              "type": "string"
                            },
                            "other": {
                              "description": "Information about the identification document provided. Required if `method` is equal to `other`.",
                              "properties": {
                                "back_file_id": {
                                  "description": "The identifier of the File containing the back of the document. Not every document has a reverse side.",
                                  "type": "string"
                                },
                                "country": {
                                  "description": "The two-character ISO 3166-1 code representing the country that issued the document.",
                                  "maxLength": 200,
                                  "minLength": 1,
                                  "type": "string"
                                },
                                "description": {
                                  "description": "A description of the document submitted.",
                                  "maxLength": 200,
                                  "minLength": 1,
                                  "type": "string"
                                },
                                "expiration_date": {
                                  "description": "The document's expiration date in YYYY-MM-DD format.",
                                  "format": "date",
                                  "type": "string"
                                },
                                "file_id": {
                                  "description": "The identifier of the File containing the front of the document.",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "country",
                                "description",
                                "file_id"
                              ],
                              "type": "object"
                            },
                            "passport": {
                              "description": "Information about the passport used for identification. Required if `method` is equal to `passport`.",
                              "properties": {
                                "country": {
                                  "description": "The country that issued the passport.",
                                  "maxLength": 200,
                                  "minLength": 1,
                                  "type": "string"
                                },
                                "expiration_date": {
                                  "description": "The passport's expiration date in YYYY-MM-DD format.",
                                  "format": "date",
                                  "type": "string"
                                },
                                "file_id": {
                                  "description": "The identifier of the File containing the passport.",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "file_id",
                                "expiration_date",
                                "country"
                              ],
                              "type": "object"
                            }
                          },
                          "required": [
                            "method",
                            "number"
                          ],
                          "type": "object"
                        },
                        "name": {
                          "description": "The person's legal name.",
                          "maxLength": 200,
                          "minLength": 1,
                          "type": "string"
                        }
                      },
                      "required": [
                        "name",
                        "date_of_birth",
                        "address",
                        "identification"
                      ],
                      "type": "object"
                    },
                    "prongs": {
                      "description": "Why this person is considered a beneficial owner of the entity. At least one option is required, if a person is both a control person and owner, submit an array containing both.",
                      "items": {
                        "enum": [
                          "ownership",
                          "control"
                        ],
                        "type": "string",
                        "x-enum-descriptions": [
                          "A person with 25% or greater direct or indirect ownership of the entity.",
                          "A person who manages, directs, or has significant control of the entity."
                        ]
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "individual",
                    "prongs"
                  ],
                  "type": "object"
                },
                "type": "array"
              },
              "incorporation_state": {
                "description": "The two-letter United States Postal Service (USPS) abbreviation for the corporation's state of incorporation.",
                "maxLength": 200,
                "minLength": 1,
                "type": "string"
              },
              "industry_code": {
                "description": "The North American Industry Classification System (NAICS) code for the corporation's primary line of business. This is a number, like `5132` for `Software Publishers`. A full list of classification codes is available [here](https://increase.com/documentation/data-dictionary#north-american-industry-classification-system-codes).",
                "maxLength": 200,
                "minLength": 1,
                "type": "string"
              },
              "name": {
                "description": "The legal name of the corporation.",
                "maxLength": 200,
                "minLength": 1,
                "type": "string"
              },
              "tax_identifier": {
                "description": "The Employer Identification Number (EIN) for the corporation.",
                "maxLength": 200,
                "minLength": 1,
                "type": "string"
              },
              "website": {
                "description": "The website of the corporation.",
                "type": "string"
              }
            },
            "required": [
              "name",
              "tax_identifier",
              "address",
              "beneficial_owners"
            ],
            "type": "object"
          },
          "description": {
            "description": "The description you choose to give the entity.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "government_authority": {
            "description": "Details of the Government Authority entity to create. Required if `structure` is equal to `Government Authority`.",
            "properties": {
              "address": {
                "description": "The entity's physical address. Mail receiving locations like PO Boxes and PMB's are disallowed.",
                "properties": {
                  "city": {
                    "description": "The city of the address.",
                    "maxLength": 200,
                    "minLength": 1,
                    "type": "string"
                  },
                  "line1": {
                    "description": "The first line of the address. This is usually the street number and street.",
                    "maxLength": 200,
                    "minLength": 1,
                    "type": "string"
                  },
                  "line2": {
                    "description": "The second line of the address. This might be the floor or room number.",
                    "maxLength": 200,
                    "minLength": 1,
                    "type": "string"
                  },
                  "state": {
                    "description": "The two-letter United States Postal Service (USPS) abbreviation for the state of the address.",
                    "maxLength": 200,
                    "minLength": 1,
                    "type": "string"
                  },
                  "zip": {
                    "description": "The ZIP code of the address.",
                    "maxLength": 200,
                    "minLength": 1,
                    "type": "string"
                  }
                },
                "required": [
                  "line1",
                  "city",
                  "state",
                  "zip"
                ],
                "type": "object"
              },
              "authorized_persons": {
                "description": "The identifying details of authorized officials acting on the entity's behalf.",
                "items": {
                  "properties": {
                    "name": {
                      "description": "The person's legal name.",
                      "maxLength": 200,
                      "minLength": 1,
                      "type": "string"
                    }
                  },
                  "required": [
                    "name"
                  ],
                  "type": "object"
                },
                "type": "array"
              },
              "category": {
                "description": "The category of the government authority.",
                "enum": [
                  "municipality"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "The Public Entity is a Municipality."
                ]
              },
              "name": {
                "description": "The legal name of the government authority.",
                "maxLength": 200,
                "minLength": 1,
                "type": "string"
              },
              "tax_identifier": {
                "description": "The Employer Identification Number (EIN) for the government authority.",
                "maxLength": 200,
                "minLength": 1,
                "type": "string"
              },
              "website": {
                "description": "The website of the government authority.",
                "type": "string"
              }
            },
            "required": [
              "name",
              "category",
              "tax_identifier",
              "address",
              "authorized_persons"
            ],
            "type": "object"
          },
          "joint": {
            "description": "Details of the joint entity to create. Required if `structure` is equal to `joint`.",
            "properties": {
              "individuals": {
                "description": "The two individuals that share control of the entity.",
                "items": {
                  "properties": {
                    "address": {
                      "description": "The individual's physical address. Mail receiving locations like PO Boxes and PMB's are disallowed.",
                      "properties": {
                        "city": {
                          "description": "The city of the address.",
                          "maxLength": 200,
                          "minLength": 1,
                          "type": "string"
                        },
                        "line1": {
                          "description": "The first line of the address. This is usually the street number and street.",
                          "maxLength": 200,
                          "minLength": 1,
                          "type": "string"
                        },
                        "line2": {
                          "description": "The second line of the address. This might be the floor or room number.",
                          "maxLength": 200,
                          "minLength": 1,
                          "type": "string"
                        },
                        "state": {
                          "description": "The two-letter United States Postal Service (USPS) abbreviation for the state of the address.",
                          "maxLength": 200,
                          "minLength": 1,
                          "type": "string"
                        },
                        "zip": {
                          "description": "The ZIP code of the address.",
                          "maxLength": 200,
                          "minLength": 1,
                          "type": "string"
                        }
                      },
                      "required": [
                        "line1",
                        "city",
                        "state",
                        "zip"
                      ],
                      "type": "object"
                    },
                    "confirmed_no_us_tax_id": {
                      "description": "The identification method for an individual can only be a passport, driver's license, or other document if you've confirmed the individual does not have a US tax id (either a Social Security Number or Individual Taxpayer Identification Number).",
                      "type": "boolean"
                    },
                    "date_of_birth": {
                      "description": "The person's date of birth in YYYY-MM-DD format.",
                      "format": "date",
                      "type": "string"
                    },
                    "identification": {
                      "description": "A means of verifying the person's identity.",
                      "properties": {
                        "drivers_license": {
                          "description": "Information about the United States driver's license used for identification. Required if `method` is equal to `drivers_license`.",
                          "properties": {
                            "back_file_id": {
                              "description": "The identifier of the File containing the back of the driver's license.",
                              "type": "string"
                            },
                            "expiration_date": {
                              "description": "The driver's license's expiration date in YYYY-MM-DD format.",
                              "format": "date",
                              "type": "string"
                            },
                            "file_id": {
                              "description": "The identifier of the File containing the front of the driver's license.",
                              "type": "string"
                            },
                            "state": {
                              "description": "The state that issued the provided driver's license.",
                              "maxLength": 200,
                              "minLength": 1,
                              "type": "string"
                            }
                          },
                          "required": [
                            "file_id",
                            "expiration_date",
                            "state"
                          ],
                          "type": "object"
                        },
                        "method": {
                          "description": "A method that can be used to verify the individual's identity.",
                          "enum": [
                            "social_security_number",
                            "individual_taxpayer_identification_number",
                            "passport",
                            "drivers_license",
                            "other"
                          ],
                          "type": "string",
                          "x-enum-descriptions": [
                            "A social security number.",
                            "An individual taxpayer identification number (ITIN).",
                            "A passport number.",
                            "A driver's license number.",
                            "Another identifying document."
                          ]
                        },
                        "number": {
                          "description": "An identification number that can be used to verify the individual's identity, such as a social security number.",
                          "maxLength": 200,
                          "minLength": 4,
                          "type": "string"
                        },
                        "other": {
                          "description": "Information about the identification document provided. Required if `method` is equal to `other`.",
                          "properties": {
                            "back_file_id": {
                              "description": "The identifier of the File containing the back of the document. Not every document has a reverse side.",
                              "type": "string"
                            },
                            "country": {
                              "description": "The two-character ISO 3166-1 code representing the country that issued the document.",
                              "maxLength": 200,
                              "minLength": 1,
                              "type": "string"
                            },
                            "description": {
                              "description": "A description of the document submitted.",
                              "maxLength": 200,
                              "minLength": 1,
                              "type": "string"
                            },
                            "expiration_date": {
                              "description": "The document's expiration date in YYYY-MM-DD format.",
                              "format": "date",
                              "type": "string"
                            },
                            "file_id": {
                              "description": "The identifier of the File containing the front of the document.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "country",
                            "description",
                            "file_id"
                          ],
                          "type": "object"
                        },
                        "passport": {
                          "description": "Information about the passport used for identification. Required if `method` is equal to `passport`.",
                          "properties": {
                            "country": {
                              "description": "The country that issued the passport.",
                              "maxLength": 200,
                              "minLength": 1,
                              "type": "string"
                            },
                            "expiration_date": {
                              "description": "The passport's expiration date in YYYY-MM-DD format.",
                              "format": "date",
                              "type": "string"
                            },
                            "file_id": {
                              "description": "The identifier of the File containing the passport.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "file_id",
                            "expiration_date",
                            "country"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "method",
                        "number"
                      ],
                      "type": "object"
                    },
                    "name": {
                      "description": "The person's legal name.",
                      "maxLength": 200,
                      "minLength": 1,
                      "type": "string"
                    }
                  },
                  "required": [
                    "name",
                    "date_of_birth",
                    "address",
                    "identification"
                  ],
                  "type": "object"
                },
                "type": "array"
              },
              "name": {
                "description": "The name of the joint entity.",
                "maxLength": 200,
                "minLength": 1,
                "type": "string"
              }
            },
            "required": [
              "individuals"
            ],
            "type": "object"
          },
          "natural_person": {
            "description": "Details of the natural person entity to create. Required if `structure` is equal to `natural_person`. Natural people entities should be submitted with `social_security_number` or `individual_taxpayer_identification_number` identification methods.",
            "properties": {
              "address": {
                "description": "The individual's physical address. Mail receiving locations like PO Boxes and PMB's are disallowed.",
                "properties": {
                  "city": {
                    "description": "The city of the address.",
                    "maxLength": 200,
                    "minLength": 1,
                    "type": "string"
                  },
                  "line1": {
                    "description": "The first line of the address. This is usually the street number and street.",
                    "maxLength": 200,
                    "minLength": 1,
                    "type": "string"
                  },
                  "line2": {
                    "description": "The second line of the address. This might be the floor or room number.",
                    "maxLength": 200,
                    "minLength": 1,
                    "type": "string"
                  },
                  "state": {
                    "description": "The two-letter United States Postal Service (USPS) abbreviation for the state of the address.",
                    "maxLength": 200,
                    "minLength": 1,
                    "type": "string"
                  },
                  "zip": {
                    "description": "The ZIP code of the address.",
                    "maxLength": 200,
                    "minLength": 1,
                    "type": "string"
                  }
                },
                "required": [
                  "line1",
                  "city",
                  "state",
                  "zip"
                ],
                "type": "object"
              },
              "confirmed_no_us_tax_id": {
                "description": "The identification method for an individual can only be a passport, driver's license, or other document if you've confirmed the individual does not have a US tax id (either a Social Security Number or Individual Taxpayer Identification Number).",
                "type": "boolean"
              },
              "date_of_birth": {
                "description": "The person's date of birth in YYYY-MM-DD format.",
                "format": "date",
                "type": "string"
              },
              "identification": {
                "description": "A means of verifying the person's identity.",
                "properties": {
                  "drivers_license": {
                    "description": "Information about the United States driver's license used for identification. Required if `method` is equal to `drivers_license`.",
                    "properties": {
                      "back_file_id": {
                        "description": "The identifier of the File containing the back of the driver's license.",
                        "type": "string"
                      },
                      "expiration_date": {
                        "description": "The driver's license's expiration date in YYYY-MM-DD format.",
                        "format": "date",
                        "type": "string"
                      },
                      "file_id": {
                        "description": "The identifier of the File containing the front of the driver's license.",
                        "type": "string"
                      },
                      "state": {
                        "description": "The state that issued the provided driver's license.",
                        "maxLength": 200,
                        "minLength": 1,
                        "type": "string"
                      }
                    },
                    "required": [
                      "file_id",
                      "expiration_date",
                      "state"
                    ],
                    "type": "object"
                  },
                  "method": {
                    "description": "A method that can be used to verify the individual's identity.",
                    "enum": [
                      "social_security_number",
                      "individual_taxpayer_identification_number",
                      "passport",
                      "drivers_license",
                      "other"
                    ],
                    "type": "string",
                    "x-enum-descriptions": [
                      "A social security number.",
                      "An individual taxpayer identification number (ITIN).",
                      "A passport number.",
                      "A driver's license number.",
                      "Another identifying document."
                    ]
                  },
                  "number": {
                    "description": "An identification number that can be used to verify the individual's identity, such as a social security number.",
                    "maxLength": 200,
                    "minLength": 4,
                    "type": "string"
                  },
                  "other": {
                    "description": "Information about the identification document provided. Required if `method` is equal to `other`.",
                    "properties": {
                      "back_file_id": {
                        "description": "The identifier of the File containing the back of the document. Not every document has a reverse side.",
                        "type": "string"
                      },
                      "country": {
                        "description": "The two-character ISO 3166-1 code representing the country that issued the document.",
                        "maxLength": 200,
                        "minLength": 1,
                        "type": "string"
                      },
                      "description": {
                        "description": "A description of the document submitted.",
                        "maxLength": 200,
                        "minLength": 1,
                        "type": "string"
                      },
                      "expiration_date": {
                        "description": "The document's expiration date in YYYY-MM-DD format.",
                        "format": "date",
                        "type": "string"
                      },
                      "file_id": {
                        "description": "The identifier of the File containing the front of the document.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "country",
                      "description",
                      "file_id"
                    ],
                    "type": "object"
                  },
                  "passport": {
                    "description": "Information about the passport used for identification. Required if `method` is equal to `passport`.",
                    "properties": {
                      "country": {
                        "description": "The country that issued the passport.",
                        "maxLength": 200,
                        "minLength": 1,
                        "type": "string"
                      },
                      "expiration_date": {
                        "description": "The passport's expiration date in YYYY-MM-DD format.",
                        "format": "date",
                        "type": "string"
                      },
                      "file_id": {
                        "description": "The identifier of the File containing the passport.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "file_id",
                      "expiration_date",
                      "country"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "method",
                  "number"
                ],
                "type": "object"
              },
              "name": {
                "description": "The person's legal name.",
                "maxLength": 200,
                "minLength": 1,
                "type": "string"
              }
            },
            "required": [
              "name",
              "date_of_birth",
              "address",
              "identification"
            ],
            "type": "object"
          },
          "structure": {
            "description": "The type of Entity to create.",
            "enum": [
              "corporation",
              "natural_person",
              "joint",
              "trust",
              "government_authority"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "A corporation.",
              "An individual person.",
              "Multiple individual people.",
              "A trust.",
              "A government authority."
            ]
          },
          "supplemental_documents": {
            "description": "Additional documentation associated with the entity.",
            "items": {
              "properties": {
                "file_id": {
                  "description": "The identifier of the File containing the document.",
                  "type": "string"
                }
              },
              "required": [
                "file_id"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "third_party_verification": {
            "description": "A reference to data stored in a third-party verification service. Your integration may or may not use this field.",
            "properties": {
              "reference": {
                "description": "The reference identifier for the third party verification.",
                "maxLength": 200,
                "minLength": 1,
                "type": "string"
              },
              "vendor": {
                "description": "The vendor that was used to perform the verification.",
                "enum": [
                  "alloy",
                  "middesk"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "Alloy. See https://alloy.com for more information.",
                  "Middesk. See https://middesk.com for more information."
                ]
              }
            },
            "required": [
              "reference",
              "vendor"
            ],
            "type": "object"
          },
          "trust": {
            "description": "Details of the trust entity to create. Required if `structure` is equal to `trust`.",
            "properties": {
              "address": {
                "description": "The trust's physical address. Mail receiving locations like PO Boxes and PMB's are disallowed.",
                "properties": {
                  "city": {
                    "description": "The city of the address.",
                    "maxLength": 200,
                    "minLength": 1,
                    "type": "string"
                  },
                  "line1": {
                    "description": "The first line of the address. This is usually the street number and street.",
                    "maxLength": 200,
                    "minLength": 1,
                    "type": "string"
                  },
                  "line2": {
                    "description": "The second line of the address. This might be the floor or room number.",
                    "maxLength": 200,
                    "minLength": 1,
                    "type": "string"
                  },
                  "state": {
                    "description": "The two-letter United States Postal Service (USPS) abbreviation for the state of the address.",
                    "maxLength": 200,
                    "minLength": 1,
                    "type": "string"
                  },
                  "zip": {
                    "description": "The ZIP code of the address.",
                    "maxLength": 200,
                    "minLength": 1,
                    "type": "string"
                  }
                },
                "required": [
                  "line1",
                  "city",
                  "state",
                  "zip"
                ],
                "type": "object"
              },
              "category": {
                "description": "Whether the trust is `revocable` or `irrevocable`. Irrevocable trusts require their own Employer Identification Number. Revocable trusts require information about the individual `grantor` who created the trust.",
                "enum": [
                  "revocable",
                  "irrevocable"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "The trust is revocable by the grantor.",
                  "The trust cannot be revoked."
                ]
              },
              "formation_document_file_id": {
                "description": "The identifier of the File containing the formation document of the trust.",
                "type": "string"
              },
              "formation_state": {
                "description": "The two-letter United States Postal Service (USPS) abbreviation for the state in which the trust was formed.",
                "maxLength": 200,
                "minLength": 1,
                "type": "string"
              },
              "grantor": {
                "description": "The grantor of the trust. Required if `category` is equal to `revocable`.",
                "properties": {
                  "address": {
                    "description": "The individual's physical address. Mail receiving locations like PO Boxes and PMB's are disallowed.",
                    "properties": {
                      "city": {
                        "description": "The city of the address.",
                        "maxLength": 200,
                        "minLength": 1,
                        "type": "string"
                      },
                      "line1": {
                        "description": "The first line of the address. This is usually the street number and street.",
                        "maxLength": 200,
                        "minLength": 1,
                        "type": "string"
                      },
                      "line2": {
                        "description": "The second line of the address. This might be the floor or room number.",
                        "maxLength": 200,
                        "minLength": 1,
                        "type": "string"
                      },
                      "state": {
                        "description": "The two-letter United States Postal Service (USPS) abbreviation for the state of the address.",
                        "maxLength": 200,
                        "minLength": 1,
                        "type": "string"
                      },
                      "zip": {
                        "description": "The ZIP code of the address.",
                        "maxLength": 200,
                        "minLength": 1,
                        "type": "string"
                      }
                    },
                    "required": [
                      "line1",
                      "city",
                      "state",
                      "zip"
                    ],
                    "type": "object"
                  },
                  "confirmed_no_us_tax_id": {
                    "description": "The identification method for an individual can only be a passport, driver's license, or other document if you've confirmed the individual does not have a US tax id (either a Social Security Number or Individual Taxpayer Identification Number).",
                    "type": "boolean"
                  },
                  "date_of_birth": {
                    "description": "The person's date of birth in YYYY-MM-DD format.",
                    "format": "date",
                    "type": "string"
                  },
                  "identification": {
                    "description": "A means of verifying the person's identity.",
                    "properties": {
                      "drivers_license": {
                        "description": "Information about the United States driver's license used for identification. Required if `method` is equal to `drivers_license`.",
                        "properties": {
                          "back_file_id": {
                            "description": "The identifier of the File containing the back of the driver's license.",
                            "type": "string"
                          },
                          "expiration_date": {
                            "description": "The driver's license's expiration date in YYYY-MM-DD format.",
                            "format": "date",
                            "type": "string"
                          },
                          "file_id": {
                            "description": "The identifier of the File containing the front of the driver's license.",
                            "type": "string"
                          },
                          "state": {
                            "description": "The state that issued the provided driver's license.",
                            "maxLength": 200,
                            "minLength": 1,
                            "type": "string"
                          }
                        },
                        "required": [
                          "file_id",
                          "expiration_date",
                          "state"
                        ],
                        "type": "object"
                      },
                      "method": {
                        "description": "A method that can be used to verify the individual's identity.",
                        "enum": [
                          "social_security_number",
                          "individual_taxpayer_identification_number",
                          "passport",
                          "drivers_license",
                          "other"
                        ],
                        "type": "string",
                        "x-enum-descriptions": [
                          "A social security number.",
                          "An individual taxpayer identification number (ITIN).",
                          "A passport number.",
                          "A driver's license number.",
                          "Another identifying document."
                        ]
                      },
                      "number": {
                        "description": "An identification number that can be used to verify the individual's identity, such as a social security number.",
                        "maxLength": 200,
                        "minLength": 4,
                        "type": "string"
                      },
                      "other": {
                        "description": "Information about the identification document provided. Required if `method` is equal to `other`.",
                        "properties": {
                          "back_file_id": {
                            "description": "The identifier of the File containing the back of the document. Not every document has a reverse side.",
                            "type": "string"
                          },
                          "country": {
                            "description": "The two-character ISO 3166-1 code representing the country that issued the document.",
                            "maxLength": 200,
                            "minLength": 1,
                            "type": "string"
                          },
                          "description": {
                            "description": "A description of the document submitted.",
                            "maxLength": 200,
                            "minLength": 1,
                            "type": "string"
                          },
                          "expiration_date": {
                            "description": "The document's expiration date in YYYY-MM-DD format.",
                            "format": "date",
                            "type": "string"
                          },
                          "file_id": {
                            "description": "The identifier of the File containing the front of the document.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "country",
                          "description",
                          "file_id"
                        ],
                        "type": "object"
                      },
                      "passport": {
                        "description": "Information about the passport used for identification. Required if `method` is equal to `passport`.",
                        "properties": {
                          "country": {
                            "description": "The country that issued the passport.",
                            "maxLength": 200,
                            "minLength": 1,
                            "type": "string"
                          },
                          "expiration_date": {
                            "description": "The passport's expiration date in YYYY-MM-DD format.",
                            "format": "date",
                            "type": "string"
                          },
                          "file_id": {
                            "description": "The identifier of the File containing the passport.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "file_id",
                          "expiration_date",
                          "country"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "method",
                      "number"
                    ],
                    "type": "object"
                  },
                  "name": {
                    "description": "The person's legal name.",
                    "maxLength": 200,
                    "minLength": 1,
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "date_of_birth",
                  "address",
                  "identification"
                ],
                "type": "object"
              },
              "name": {
                "description": "The legal name of the trust.",
                "maxLength": 200,
                "minLength": 1,
                "type": "string"
              },
              "tax_identifier": {
                "description": "The Employer Identification Number (EIN) for the trust. Required if `category` is equal to `irrevocable`.",
                "maxLength": 200,
                "minLength": 1,
                "type": "string"
              },
              "trustees": {
                "description": "The trustees of the trust.",
                "items": {
                  "properties": {
                    "individual": {
                      "description": "Details of the individual trustee. Required when the trustee `structure` is equal to `individual`.",
                      "properties": {
                        "address": {
                          "description": "The individual's physical address. Mail receiving locations like PO Boxes and PMB's are disallowed.",
                          "properties": {
                            "city": {
                              "description": "The city of the address.",
                              "maxLength": 200,
                              "minLength": 1,
                              "type": "string"
                            },
                            "line1": {
                              "description": "The first line of the address. This is usually the street number and street.",
                              "maxLength": 200,
                              "minLength": 1,
                              "type": "string"
                            },
                            "line2": {
                              "description": "The second line of the address. This might be the floor or room number.",
                              "maxLength": 200,
                              "minLength": 1,
                              "type": "string"
                            },
                            "state": {
                              "description": "The two-letter United States Postal Service (USPS) abbreviation for the state of the address.",
                              "maxLength": 200,
                              "minLength": 1,
                              "type": "string"
                            },
                            "zip": {
                              "description": "The ZIP code of the address.",
                              "maxLength": 200,
                              "minLength": 1,
                              "type": "string"
                            }
                          },
                          "required": [
                            "line1",
                            "city",
                            "state",
                            "zip"
                          ],
                          "type": "object"
                        },
                        "confirmed_no_us_tax_id": {
                          "description": "The identification method for an individual can only be a passport, driver's license, or other document if you've confirmed the individual does not have a US tax id (either a Social Security Number or Individual Taxpayer Identification Number).",
                          "type": "boolean"
                        },
                        "date_of_birth": {
                          "description": "The person's date of birth in YYYY-MM-DD format.",
                          "format": "date",
                          "type": "string"
                        },
                        "identification": {
                          "description": "A means of verifying the person's identity.",
                          "properties": {
                            "drivers_license": {
                              "description": "Information about the United States driver's license used for identification. Required if `method` is equal to `drivers_license`.",
                              "properties": {
                                "back_file_id": {
                                  "description": "The identifier of the File containing the back of the driver's license.",
                                  "type": "string"
                                },
                                "expiration_date": {
                                  "description": "The driver's license's expiration date in YYYY-MM-DD format.",
                                  "format": "date",
                                  "type": "string"
                                },
                                "file_id": {
                                  "description": "The identifier of the File containing the front of the driver's license.",
                                  "type": "string"
                                },
                                "state": {
                                  "description": "The state that issued the provided driver's license.",
                                  "maxLength": 200,
                                  "minLength": 1,
                                  "type": "string"
                                }
                              },
                              "required": [
                                "file_id",
                                "expiration_date",
                                "state"
                              ],
                              "type": "object"
                            },
                            "method": {
                              "description": "A method that can be used to verify the individual's identity.",
                              "enum": [
                                "social_security_number",
                                "individual_taxpayer_identification_number",
                                "passport",
                                "drivers_license",
                                "other"
                              ],
                              "type": "string",
                              "x-enum-descriptions": [
                                "A social security number.",
                                "An individual taxpayer identification number (ITIN).",
                                "A passport number.",
                                "A driver's license number.",
                                "Another identifying document."
                              ]
                            },
                            "number": {
                              "description": "An identification number that can be used to verify the individual's identity, such as a social security number.",
                              "maxLength": 200,
                              "minLength": 4,
                              "type": "string"
                            },
                            "other": {
                              "description": "Information about the identification document provided. Required if `method` is equal to `other`.",
                              "properties": {
                                "back_file_id": {
                                  "description": "The identifier of the File containing the back of the document. Not every document has a reverse side.",
                                  "type": "string"
                                },
                                "country": {
                                  "description": "The two-character ISO 3166-1 code representing the country that issued the document.",
                                  "maxLength": 200,
                                  "minLength": 1,
                                  "type": "string"
                                },
                                "description": {
                                  "description": "A description of the document submitted.",
                                  "maxLength": 200,
                                  "minLength": 1,
                                  "type": "string"
                                },
                                "expiration_date": {
                                  "description": "The document's expiration date in YYYY-MM-DD format.",
                                  "format": "date",
                                  "type": "string"
                                },
                                "file_id": {
                                  "description": "The identifier of the File containing the front of the document.",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "country",
                                "description",
                                "file_id"
                              ],
                              "type": "object"
                            },
                            "passport": {
                              "description": "Information about the passport used for identification. Required if `method` is equal to `passport`.",
                              "properties": {
                                "country": {
                                  "description": "The country that issued the passport.",
                                  "maxLength": 200,
                                  "minLength": 1,
                                  "type": "string"
                                },
                                "expiration_date": {
                                  "description": "The passport's expiration date in YYYY-MM-DD format.",
                                  "format": "date",
                                  "type": "string"
                                },
                                "file_id": {
                                  "description": "The identifier of the File containing the passport.",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "file_id",
                                "expiration_date",
                                "country"
                              ],
                              "type": "object"
                            }
                          },
                          "required": [
                            "method",
                            "number"
                          ],
                          "type": "object"
                        },
                        "name": {
                          "description": "The person's legal name.",
                          "maxLength": 200,
                          "minLength": 1,
                          "type": "string"
                        }
                      },
                      "required": [
                        "name",
                        "date_of_birth",
                        "address",
                        "identification"
                      ],
                      "type": "object"
                    },
                    "structure": {
                      "description": "The structure of the trustee.",
                      "enum": [
                        "individual"
                      ],
                      "type": "string",
                      "x-enum-descriptions": [
                        "The trustee is an individual."
                      ]
                    }
                  },
                  "required": [
                    "structure"
                  ],
                  "type": "object"
                },
                "type": "array"
              }
            },
            "required": [
              "name",
              "category",
              "address",
              "trustees"
            ],
            "type": "object"
          }
        },
        "required": [
          "structure"
        ],
        "type": "object"
      },
      "create_an_event_subscription_parameters": {
        "example": {
          "url": "https://website.com/webhooks"
        },
        "properties": {
          "oauth_connection_id": {
            "description": "If specified, this subscription will only receive webhooks for Events associated with the specified OAuth Connection.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "selected_event_category": {
            "description": "If specified, this subscription will only receive webhooks for Events with the specified `category`.",
            "enum": [
              "account.created",
              "account.updated",
              "account_number.created",
              "account_number.updated",
              "account_statement.created",
              "account_transfer.created",
              "account_transfer.updated",
              "ach_prenotification.created",
              "ach_prenotification.updated",
              "ach_transfer.created",
              "ach_transfer.updated",
              "bookkeeping_account.created",
              "bookkeeping_account.updated",
              "bookkeeping_entry_set.updated",
              "card.created",
              "card.updated",
              "card_payment.created",
              "card_payment.updated",
              "card_profile.created",
              "card_profile.updated",
              "card_dispute.created",
              "card_dispute.updated",
              "check_deposit.created",
              "check_deposit.updated",
              "check_transfer.created",
              "check_transfer.updated",
              "declined_transaction.created",
              "digital_card_profile.created",
              "digital_card_profile.updated",
              "digital_wallet_token.created",
              "digital_wallet_token.updated",
              "document.created",
              "entity.created",
              "entity.updated",
              "event_subscription.created",
              "event_subscription.updated",
              "export.created",
              "export.updated",
              "external_account.created",
              "external_account.updated",
              "file.created",
              "group.updated",
              "group.heartbeat",
              "inbound_ach_transfer.created",
              "inbound_ach_transfer.updated",
              "inbound_ach_transfer_return.created",
              "inbound_ach_transfer_return.updated",
              "inbound_check_deposit.created",
              "inbound_check_deposit.updated",
              "inbound_mail_item.created",
              "inbound_mail_item.updated",
              "inbound_real_time_payments_transfer.created",
              "inbound_real_time_payments_transfer.updated",
              "inbound_wire_drawdown_request.created",
              "inbound_wire_transfer.created",
              "inbound_wire_transfer.updated",
              "intrafi_account_enrollment.created",
              "intrafi_account_enrollment.updated",
              "intrafi_exclusion.created",
              "intrafi_exclusion.updated",
              "lockbox.created",
              "lockbox.updated",
              "oauth_connection.created",
              "oauth_connection.deactivated",
              "pending_transaction.created",
              "pending_transaction.updated",
              "physical_card.created",
              "physical_card.updated",
              "physical_card_profile.created",
              "physical_card_profile.updated",
              "proof_of_authorization_request.created",
              "proof_of_authorization_request.updated",
              "proof_of_authorization_request_submission.created",
              "proof_of_authorization_request_submission.updated",
              "real_time_decision.card_authorization_requested",
              "real_time_decision.digital_wallet_token_requested",
              "real_time_decision.digital_wallet_authentication_requested",
              "real_time_decision.card_authentication_requested",
              "real_time_decision.card_authentication_challenge_requested",
              "real_time_payments_transfer.created",
              "real_time_payments_transfer.updated",
              "real_time_payments_request_for_payment.created",
              "real_time_payments_request_for_payment.updated",
              "transaction.created",
              "wire_drawdown_request.created",
              "wire_drawdown_request.updated",
              "wire_transfer.created",
              "wire_transfer.updated"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "Occurs whenever an Account is created.",
              "Occurs whenever an Account is updated.",
              "Occurs whenever an Account Number is created.",
              "Occurs whenever an Account Number is updated.",
              "Occurs whenever an Account Statement is created.",
              "Occurs whenever an Account Transfer is created.",
              "Occurs whenever an Account Transfer is updated.",
              "Occurs whenever an ACH Prenotification is created.",
              "Occurs whenever an ACH Prenotification is updated.",
              "Occurs whenever an ACH Transfer is created.",
              "Occurs whenever an ACH Transfer is updated.",
              "Occurs whenever a Bookkeeping Account is created.",
              "Occurs whenever a Bookkeeping Account is updated.",
              "Occurs whenever a Bookkeeping Entry Set is created.",
              "Occurs whenever a Card is created.",
              "Occurs whenever a Card is updated.",
              "Occurs whenever a Card Payment is created.",
              "Occurs whenever a Card Payment is updated.",
              "Occurs whenever a Card Profile is created.",
              "Occurs whenever a Card Profile is updated.",
              "Occurs whenever a Card Dispute is created.",
              "Occurs whenever a Card Dispute is updated.",
              "Occurs whenever a Check Deposit is created.",
              "Occurs whenever a Check Deposit is updated.",
              "Occurs whenever a Check Transfer is created.",
              "Occurs whenever a Check Transfer is updated.",
              "Occurs whenever a Declined Transaction is created.",
              "Occurs whenever a Digital Card Profile is created.",
              "Occurs whenever a Digital Card Profile is updated.",
              "Occurs whenever a Digital Wallet Token is created.",
              "Occurs whenever a Digital Wallet Token is updated.",
              "Occurs whenever a Document is created.",
              "Occurs whenever an Entity is created.",
              "Occurs whenever an Entity is updated.",
              "Occurs whenever an Event Subscription is created.",
              "Occurs whenever an Event Subscription is updated.",
              "Occurs whenever an Export is created.",
              "Occurs whenever an Export is updated.",
              "Occurs whenever an External Account is created.",
              "Occurs whenever an External Account is updated.",
              "Occurs whenever a File is created.",
              "Occurs whenever a Group is updated.",
              "Increase may send webhooks with this category to see if a webhook endpoint is working properly.",
              "Occurs whenever an Inbound ACH Transfer is created.",
              "Occurs whenever an Inbound ACH Transfer is updated.",
              "Occurs whenever an Inbound ACH Transfer Return is created.",
              "Occurs whenever an Inbound ACH Transfer Return is updated.",
              "Occurs whenever an Inbound Check Deposit is created.",
              "Occurs whenever an Inbound Check Deposit is updated.",
              "Occurs whenever an Inbound Mail Item is created.",
              "Occurs whenever an Inbound Mail Item is updated.",
              "Occurs whenever an Inbound Real-Time Payments Transfer is created.",
              "Occurs whenever an Inbound Real-Time Payments Transfer is updated.",
              "Occurs whenever an Inbound Wire Drawdown Request is created.",
              "Occurs whenever an Inbound Wire Transfer is created.",
              "Occurs whenever an Inbound Wire Transfer is updated.",
              "Occurs whenever an IntraFi Account Enrollment is created.",
              "Occurs whenever an IntraFi Account Enrollment is updated.",
              "Occurs whenever an IntraFi Exclusion is created.",
              "Occurs whenever an IntraFi Exclusion is updated.",
              "Occurs whenever a Lockbox is created.",
              "Occurs whenever a Lockbox is updated.",
              "Occurs whenever an OAuth Connection is created.",
              "Occurs whenever an OAuth Connection is deactivated.",
              "Occurs whenever a Pending Transaction is created.",
              "Occurs whenever a Pending Transaction is updated.",
              "Occurs whenever a Physical Card is created.",
              "Occurs whenever a Physical Card is updated.",
              "Occurs whenever a Physical Card Profile is created.",
              "Occurs whenever a Physical Card Profile is updated.",
              "Occurs whenever a Proof of Authorization Request is created.",
              "Occurs whenever a Proof of Authorization Request is updated.",
              "Occurs whenever a Proof of Authorization Request Submission is created.",
              "Occurs whenever a Proof of Authorization Request Submission is updated.",
              "Occurs whenever a Real-Time Decision is created in response to a card authorization.",
              "Occurs whenever a Real-Time Decision is created in response to a digital wallet provisioning attempt.",
              "Occurs whenever a Real-Time Decision is created in response to a digital wallet requiring two-factor authentication.",
              "Occurs whenever a Real-Time Decision is created in response to 3DS authentication.",
              "Occurs whenever a Real-Time Decision is created in response to 3DS authentication challenges.",
              "Occurs whenever a Real-Time Payments Transfer is created.",
              "Occurs whenever a Real-Time Payments Transfer is updated.",
              "Occurs whenever a Real-Time Payments Request for Payment is created.",
              "Occurs whenever a Real-Time Payments Request for Payment is updated.",
              "Occurs whenever a Transaction is created.",
              "Occurs whenever a Wire Drawdown Request is created.",
              "Occurs whenever a Wire Drawdown Request is updated.",
              "Occurs whenever a Wire Transfer is created.",
              "Occurs whenever a Wire Transfer is updated."
            ]
          },
          "shared_secret": {
            "description": "The key that will be used to sign webhooks. If no value is passed, a random string will be used as default.",
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "url": {
            "description": "The URL you'd like us to send webhooks to.",
            "type": "string"
          }
        },
        "required": [
          "url"
        ],
        "type": "object"
      },
      "create_an_export_parameters": {
        "example": {
          "category": "transaction_csv",
          "transaction_csv": {
            "account_id": "account_in71c4amph0vgo2qllky"
          }
        },
        "properties": {
          "account_statement_ofx": {
            "description": "Options for the created export. Required if `category` is equal to `account_statement_ofx`.",
            "properties": {
              "account_id": {
                "description": "The Account to create a statement for.",
                "type": "string"
              },
              "created_at": {
                "description": "Filter results by time range on the `created_at` attribute.",
                "properties": {
                  "after": {
                    "description": "Return results after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "before": {
                    "description": "Return results before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "on_or_after": {
                    "description": "Return results on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "on_or_before": {
                    "description": "Return results on or before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
                    "format": "date-time",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "required": [
              "account_id"
            ],
            "type": "object"
          },
          "balance_csv": {
            "description": "Options for the created export. Required if `category` is equal to `balance_csv`.",
            "properties": {
              "account_id": {
                "description": "Filter exported Transactions to the specified Account.",
                "type": "string"
              },
              "created_at": {
                "description": "Filter results by time range on the `created_at` attribute.",
                "properties": {
                  "after": {
                    "description": "Return results after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "before": {
                    "description": "Return results before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "on_or_after": {
                    "description": "Return results on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "on_or_before": {
                    "description": "Return results on or before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
                    "format": "date-time",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "program_id": {
                "description": "Filter exported Transactions to the specified Program.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "bookkeeping_account_balance_csv": {
            "description": "Options for the created export. Required if `category` is equal to `bookkeeping_account_balance_csv`.",
            "properties": {
              "bookkeeping_account_id": {
                "description": "Filter exported Transactions to the specified Bookkeeping Account.",
                "type": "string"
              },
              "created_at": {
                "description": "Filter results by time range on the `created_at` attribute.",
                "properties": {
                  "after": {
                    "description": "Return results after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "before": {
                    "description": "Return results before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "on_or_after": {
                    "description": "Return results on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "on_or_before": {
                    "description": "Return results on or before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
                    "format": "date-time",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "category": {
            "description": "The type of Export to create.",
            "enum": [
              "account_statement_ofx",
              "transaction_csv",
              "balance_csv",
              "bookkeeping_account_balance_csv",
              "entity_csv",
              "vendor_csv"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "Export an Open Financial Exchange (OFX) file of transactions and balances for a given time range and Account.",
              "Export a CSV of all transactions for a given time range.",
              "Export a CSV of account balances for the dates in a given range.",
              "Export a CSV of bookkeeping account balances for the dates in a given range.",
              "Export a CSV of entities with a given status.",
              "Export a CSV of vendors added to the third-party risk management dashboard."
            ]
          },
          "entity_csv": {
            "description": "Options for the created export. Required if `category` is equal to `entity_csv`.",
            "properties": {
              "status": {
                "description": "Entity statuses to filter by.",
                "properties": {
                  "in": {
                    "description": "Entity statuses to filter by. For GET requests, this should be encoded as a comma-delimited string, such as `?in=one,two,three`.",
                    "items": {
                      "enum": [
                        "active",
                        "archived",
                        "disabled"
                      ],
                      "type": "string",
                      "x-enum-descriptions": [
                        "The entity is active.",
                        "The entity is archived, and can no longer be used to create accounts.",
                        "The entity is temporarily disabled and cannot be used for financial activity."
                      ]
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "in"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "transaction_csv": {
            "description": "Options for the created export. Required if `category` is equal to `transaction_csv`.",
            "properties": {
              "account_id": {
                "description": "Filter exported Transactions to the specified Account.",
                "type": "string"
              },
              "created_at": {
                "description": "Filter results by time range on the `created_at` attribute.",
                "properties": {
                  "after": {
                    "description": "Return results after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "before": {
                    "description": "Return results before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "on_or_after": {
                    "description": "Return results on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "on_or_before": {
                    "description": "Return results on or before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
                    "format": "date-time",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "program_id": {
                "description": "Filter exported Transactions to the specified Program.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "vendor_csv": {
            "description": "Options for the created export. Required if `category` is equal to `vendor_csv`.",
            "properties": {},
            "type": "object"
          }
        },
        "required": [
          "category"
        ],
        "type": "object"
      },
      "create_an_external_account_parameters": {
        "example": {
          "account_holder": "business",
          "account_number": "987654321",
          "description": "Landlord",
          "routing_number": "101050001"
        },
        "properties": {
          "account_holder": {
            "description": "The type of entity that owns the External Account.",
            "enum": [
              "business",
              "individual",
              "unknown"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The External Account is owned by a business.",
              "The External Account is owned by an individual.",
              "It's unknown what kind of entity owns the External Account."
            ]
          },
          "account_number": {
            "description": "The account number for the destination account.",
            "maxLength": 17,
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "description": "The name you choose for the Account.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "funding": {
            "description": "The type of the destination account. Defaults to `checking`.",
            "enum": [
              "checking",
              "savings",
              "other"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "A checking account.",
              "A savings account.",
              "A different type of account."
            ]
          },
          "routing_number": {
            "description": "The American Bankers' Association (ABA) Routing Transit Number (RTN) for the destination account.",
            "maxLength": 9,
            "minLength": 9,
            "type": "string"
          }
        },
        "required": [
          "routing_number",
          "account_number",
          "description"
        ],
        "type": "object"
      },
      "create_an_intrafi_exclusion_parameters": {
        "example": {
          "bank_name": "Example Bank",
          "entity_id": "entity_n8y8tnk2p9339ti393yi"
        },
        "properties": {
          "bank_name": {
            "description": "The name of the financial institution to be excluded.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "entity_id": {
            "description": "The identifier of the Entity whose deposits will be excluded.",
            "type": "string"
          }
        },
        "required": [
          "entity_id",
          "bank_name"
        ],
        "type": "object"
      },
      "create_an_oauth_token_parameters": {
        "example": {
          "client_id": "12345",
          "client_secret": "supersecret",
          "code": "123",
          "grant_type": "authorization_code"
        },
        "properties": {
          "client_id": {
            "description": "The public identifier for your application.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "client_secret": {
            "description": "The secret that confirms you own the application. This is redundent given that the request is made with your API key but it's a required component of OAuth 2.0.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "code": {
            "description": "The authorization code generated by the user and given to you as a query parameter.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "grant_type": {
            "description": "The credential you request in exchange for the code. In Production, this is always `authorization_code`. In Sandbox, you can pass either enum value.",
            "enum": [
              "authorization_code",
              "production_token"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "An OAuth authorization code.",
              "An OAuth production token."
            ]
          },
          "production_token": {
            "description": "The production token you want to exchange for a sandbox token. This is only available in Sandbox. Set `grant_type` to `production_token` to use this parameter.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "grant_type"
        ],
        "type": "object"
      },
      "decline_an_inbound_ach_transfer_parameters": {
        "example": {
          "reason": "payment_stopped"
        },
        "properties": {
          "reason": {
            "description": "The reason why this transfer will be returned. If this parameter is unset, the return codes will be `payment_stopped` for debits and `credit_entry_refused_by_receiver` for credits.",
            "enum": [
              "insufficient_funds",
              "returned_per_odfi_request",
              "authorization_revoked_by_customer",
              "payment_stopped",
              "customer_advised_unauthorized_improper_ineligible_or_incomplete",
              "representative_payee_deceased_or_unable_to_continue_in_that_capacity",
              "beneficiary_or_account_holder_deceased",
              "credit_entry_refused_by_receiver",
              "duplicate_entry",
              "corporate_customer_advised_not_authorized"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The customer's account has insufficient funds. This reason is only allowed for debits. The Nacha return code is R01.",
              "The originating financial institution asked for this transfer to be returned. The receiving bank is complying with the request. The Nacha return code is R06.",
              "The customer no longer authorizes this transaction. The Nacha return code is R07.",
              "The customer asked for the payment to be stopped. This reason is only allowed for debits. The Nacha return code is R08.",
              "The customer advises that the debit was unauthorized. The Nacha return code is R10.",
              "The payee is deceased. The Nacha return code is R14.",
              "The account holder is deceased. The Nacha return code is R15.",
              "The customer refused a credit entry. This reason is only allowed for credits. The Nacha return code is R23.",
              "The account holder identified this transaction as a duplicate. The Nacha return code is R24.",
              "The corporate customer no longer authorizes this transaction. The Nacha return code is R29."
            ]
          }
        },
        "type": "object"
      },
      "declined_transaction": {
        "description": "Declined Transactions are refused additions and removals of money from your bank account. For example, Declined Transactions are caused when your Account has an insufficient balance or your Limits are triggered.",
        "example": {
          "account_id": "account_in71c4amph0vgo2qllky",
          "amount": 1750,
          "created_at": "2020-01-31T23:59:59Z",
          "currency": "USD",
          "description": "INVOICE 2468",
          "id": "declined_transaction_17jbn0yyhvkt4v4ooym8",
          "route_id": "account_number_v18nkfqm6afpsrvy82b2",
          "route_type": "account_number",
          "source": {
            "ach_decline": {
              "amount": 1750,
              "id": "ach_decline_72v1mcwxudctq56efipa",
              "inbound_ach_transfer_id": "inbound_ach_transfer_tdrwqr3fq9gnnq49odev",
              "originator_company_descriptive_date": null,
              "originator_company_discretionary_data": null,
              "originator_company_id": "0987654321",
              "originator_company_name": "BIG BANK",
              "reason": "insufficient_funds",
              "receiver_id_number": "12345678900",
              "receiver_name": "IAN CREASE",
              "trace_number": "021000038461022",
              "type": "ach_decline"
            },
            "category": "ach_decline"
          },
          "type": "declined_transaction"
        },
        "properties": {
          "account_id": {
            "description": "The identifier for the Account the Declined Transaction belongs to.",
            "type": "string"
          },
          "amount": {
            "description": "The Declined Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.",
            "type": "integer"
          },
          "created_at": {
            "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Transaction occurred.",
            "format": "date-time",
            "type": "string"
          },
          "currency": {
            "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Declined Transaction's currency. This will match the currency on the Declined Transaction's Account.",
            "enum": [
              "CAD",
              "CHF",
              "EUR",
              "GBP",
              "JPY",
              "USD"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "Canadian Dollar (CAD)",
              "Swiss Franc (CHF)",
              "Euro (EUR)",
              "British Pound (GBP)",
              "Japanese Yen (JPY)",
              "US Dollar (USD)"
            ]
          },
          "description": {
            "description": "This is the description the vendor provides.",
            "type": "string"
          },
          "id": {
            "description": "The Declined Transaction identifier.",
            "type": "string"
          },
          "route_id": {
            "anyOf": [
              {
                "description": "The identifier for the route this Declined Transaction came through. Routes are things like cards and ACH details.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "route_type": {
            "anyOf": [
              {
                "description": "The type of the route this Declined Transaction came through.",
                "enum": [
                  "account_number",
                  "card",
                  "lockbox"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "An Account Number.",
                  "A Card.",
                  "A Lockbox."
                ]
              },
              {
                "type": "null"
              }
            ]
          },
          "source": {
            "description": "This is an object giving more details on the network-level event that caused the Declined Transaction. For example, for a card transaction this lists the merchant's industry and location. Note that for backwards compatibility reasons, additional undocumented keys may appear in this object. These should be treated as deprecated and will be removed in the future.",
            "example": {
              "ach_decline": {
                "amount": 1750,
                "id": "ach_decline_72v1mcwxudctq56efipa",
                "inbound_ach_transfer_id": "inbound_ach_transfer_tdrwqr3fq9gnnq49odev",
                "originator_company_descriptive_date": null,
                "originator_company_discretionary_data": null,
                "originator_company_id": "0987654321",
                "originator_company_name": "BIG BANK",
                "reason": "insufficient_funds",
                "receiver_id_number": "12345678900",
                "receiver_name": "IAN CREASE",
                "trace_number": "021000038461022",
                "type": "ach_decline"
              },
              "category": "ach_decline"
            },
            "properties": {
              "ach_decline": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/ach_decline",
                    "description": "An ACH Decline object. This field will be present in the JSON response if and only if `category` is equal to `ach_decline`."
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "card_decline": {
                "anyOf": [
                  {
                    "description": "A Card Decline object. This field will be present in the JSON response if and only if `category` is equal to `card_decline`.",
                    "example": {
                      "actioner": "increase",
                      "amount": -1000,
                      "card_payment_id": "card_payment_nd3k2kacrqjli8482ave",
                      "currency": "USD",
                      "declined_transaction_id": "declined_transaction_17jbn0yyhvkt4v4ooym8",
                      "digital_wallet_token_id": null,
                      "direction": "settlement",
                      "id": "card_decline_bx3o8zd7glq8yvtwg25v",
                      "merchant_acceptor_id": "5665270011000168",
                      "merchant_category_code": "5734",
                      "merchant_city": "New York",
                      "merchant_country": "US",
                      "merchant_descriptor": "AMAZON.COM",
                      "merchant_postal_code": "10045",
                      "merchant_state": null,
                      "network_details": {
                        "category": "visa",
                        "visa": {
                          "electronic_commerce_indicator": "secure_electronic_commerce",
                          "point_of_service_entry_mode": "manual",
                          "stand_in_processing_reason": null
                        }
                      },
                      "network_identifiers": {
                        "retrieval_reference_number": "785867080153",
                        "trace_number": "487941",
                        "transaction_id": "627199945183184"
                      },
                      "network_risk_score": 10,
                      "physical_card_id": null,
                      "presentment_amount": -1000,
                      "presentment_currency": "USD",
                      "processing_category": "purchase",
                      "real_time_decision_id": null,
                      "real_time_decision_reason": null,
                      "reason": "insufficient_funds",
                      "terminal_id": "RCN5VNXS",
                      "verification": {
                        "card_verification_code": {
                          "result": "match"
                        },
                        "cardholder_address": {
                          "actual_line1": "33 Liberty Street",
                          "actual_postal_code": "94131",
                          "provided_line1": "33 Liberty Street",
                          "provided_postal_code": "94132",
                          "result": "postal_code_no_match_address_match"
                        }
                      }
                    },
                    "properties": {
                      "actioner": {
                        "description": "Whether this authorization was approved by Increase, the card network through stand-in processing, or the user through a real-time decision.",
                        "enum": [
                          "user",
                          "increase",
                          "network"
                        ],
                        "type": "string",
                        "x-enum-descriptions": [
                          "This object was actioned by the user through a real-time decision.",
                          "This object was actioned by Increase without user intervention.",
                          "This object was actioned by the network, through stand-in processing."
                        ]
                      },
                      "amount": {
                        "description": "The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.",
                        "type": "integer"
                      },
                      "card_payment_id": {
                        "description": "The ID of the Card Payment this transaction belongs to.",
                        "type": "string"
                      },
                      "currency": {
                        "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.",
                        "enum": [
                          "CAD",
                          "CHF",
                          "EUR",
                          "GBP",
                          "JPY",
                          "USD"
                        ],
                        "type": "string",
                        "x-enum-descriptions": [
                          "Canadian Dollar (CAD)",
                          "Swiss Franc (CHF)",
                          "Euro (EUR)",
                          "British Pound (GBP)",
                          "Japanese Yen (JPY)",
                          "US Dollar (USD)"
                        ]
                      },
                      "declined_transaction_id": {
                        "description": "The identifier of the declined transaction created for this Card Decline.",
                        "type": "string"
                      },
                      "digital_wallet_token_id": {
                        "anyOf": [
                          {
                            "description": "If the authorization was made via a Digital Wallet Token (such as an Apple Pay purchase), the identifier of the token that was used.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "direction": {
                        "description": "The direction describes the direction the funds will move, either from the cardholder to the merchant or from the merchant to the cardholder.",
                        "enum": [
                          "settlement",
                          "refund"
                        ],
                        "type": "string",
                        "x-enum-descriptions": [
                          "A regular card authorization where funds are debited from the cardholder.",
                          "A refund card authorization, sometimes referred to as a credit voucher authorization, where funds are credited to the cardholder."
                        ]
                      },
                      "id": {
                        "description": "The Card Decline identifier.",
                        "type": "string"
                      },
                      "merchant_acceptor_id": {
                        "description": "The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.",
                        "type": "string"
                      },
                      "merchant_category_code": {
                        "description": "The Merchant Category Code (commonly abbreviated as MCC) of the merchant the card is transacting with.",
                        "type": "string"
                      },
                      "merchant_city": {
                        "anyOf": [
                          {
                            "description": "The city the merchant resides in.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "merchant_country": {
                        "description": "The country the merchant resides in.",
                        "type": "string"
                      },
                      "merchant_descriptor": {
                        "description": "The merchant descriptor of the merchant the card is transacting with.",
                        "type": "string"
                      },
                      "merchant_postal_code": {
                        "anyOf": [
                          {
                            "description": "The merchant's postal code. For US merchants this is either a 5-digit or 9-digit ZIP code, where the first 5 and last 4 are separated by a dash.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "merchant_state": {
                        "anyOf": [
                          {
                            "description": "The state the merchant resides in.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "network_details": {
                        "description": "Fields specific to the `network`.",
                        "properties": {
                          "category": {
                            "description": "The payment network used to process this card authorization.",
                            "enum": [
                              "visa"
                            ],
                            "type": "string",
                            "x-enum-descriptions": [
                              "Visa"
                            ]
                          },
                          "visa": {
                            "anyOf": [
                              {
                                "description": "Fields specific to the `visa` network.",
                                "properties": {
                                  "electronic_commerce_indicator": {
                                    "anyOf": [
                                      {
                                        "description": "For electronic commerce transactions, this identifies the level of security used in obtaining the customer's payment credential. For mail or telephone order transactions, identifies the type of mail or telephone order.",
                                        "enum": [
                                          "mail_phone_order",
                                          "recurring",
                                          "installment",
                                          "unknown_mail_phone_order",
                                          "secure_electronic_commerce",
                                          "non_authenticated_security_transaction_at_3ds_capable_merchant",
                                          "non_authenticated_security_transaction",
                                          "non_secure_transaction"
                                        ],
                                        "type": "string",
                                        "x-enum-descriptions": [
                                          "Single transaction of a mail/phone order: Use to indicate that the transaction is a mail/phone order purchase, not a recurring transaction or installment payment. For domestic transactions in the US region, this value may also indicate one bill payment transaction in the card-present or card-absent environments.",
                                          "Recurring transaction: Payment indicator used to indicate a recurring transaction that originates from an acquirer in the US region.",
                                          "Installment payment: Payment indicator used to indicate one purchase of goods or services that is billed to the account in multiple charges over a period of time agreed upon by the cardholder and merchant from transactions that originate from an acquirer in the US region.",
                                          "Unknown classification: other mail order: Use to indicate that the type of mail/telephone order is unknown.",
                                          "Secure electronic commerce transaction: Use to indicate that the electronic commerce transaction has been authenticated using e.g., 3-D Secure",
                                          "Non-authenticated security transaction at a 3-D Secure-capable merchant, and merchant attempted to authenticate the cardholder using 3-D Secure: Use to identify an electronic commerce transaction where the merchant attempted to authenticate the cardholder using 3-D Secure, but was unable to complete the authentication because the issuer or cardholder does not participate in the 3-D Secure program.",
                                          "Non-authenticated security transaction: Use to identify an electronic commerce transaction that uses data encryption for security however , cardholder authentication is not performed using 3-D Secure.",
                                          "Non-secure transaction: Use to identify an electronic commerce transaction that has no data protection."
                                        ]
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ]
                                  },
                                  "point_of_service_entry_mode": {
                                    "anyOf": [
                                      {
                                        "description": "The method used to enter the cardholder's primary account number and card expiration date.",
                                        "enum": [
                                          "unknown",
                                          "manual",
                                          "magnetic_stripe_no_cvv",
                                          "optical_code",
                                          "integrated_circuit_card",
                                          "contactless",
                                          "credential_on_file",
                                          "magnetic_stripe",
                                          "contactless_magnetic_stripe",
                                          "integrated_circuit_card_no_cvv"
                                        ],
                                        "type": "string",
                                        "x-enum-descriptions": [
                                          "Unknown",
                                          "Manual key entry",
                                          "Magnetic stripe read, without card verification value",
                                          "Optical code",
                                          "Contact chip card",
                                          "Contactless read of chip card",
                                          "Transaction initiated using a credential that has previously been stored on file",
                                          "Magnetic stripe read",
                                          "Contactless read of magnetic stripe data",
                                          "Contact chip card, without card verification value"
                                        ]
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ]
                                  },
                                  "stand_in_processing_reason": {
                                    "anyOf": [
                                      {
                                        "description": "Only present when `actioner: network`. Describes why a card authorization was approved or declined by Visa through stand-in processing.",
                                        "enum": [
                                          "issuer_error",
                                          "invalid_physical_card",
                                          "invalid_cardholder_authentication_verification_value",
                                          "internal_visa_error",
                                          "merchant_transaction_advisory_service_authentication_required",
                                          "payment_fraud_disruption_acquirer_block",
                                          "other"
                                        ],
                                        "type": "string",
                                        "x-enum-descriptions": [
                                          "Increase failed to process the authorization in a timely manner.",
                                          "The physical card read had an invalid CVV, dCVV, or authorization request cryptogram.",
                                          "The 3DS cardholder authentication verification value was invalid.",
                                          "An internal Visa error occurred. Visa uses this reason code for certain expected occurrences as well, such as Application Transaction Counter (ATC) replays.",
                                          "The merchant has enabled Visa's Transaction Advisory Service and requires further authentication to perform the transaction. In practice this is often utilized at fuel pumps to tell the cardholder to see the cashier.",
                                          "The transaction was blocked by Visa's Payment Fraud Disruption service due to fraudulent Acquirer behavior, such as card testing.",
                                          "An unspecific reason for stand-in processing."
                                        ]
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ]
                                  }
                                },
                                "required": [
                                  "electronic_commerce_indicator",
                                  "point_of_service_entry_mode",
                                  "stand_in_processing_reason"
                                ],
                                "title": "Visa",
                                "type": "object",
                                "x-title-plural": "Visas"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "required": [
                          "category",
                          "visa"
                        ],
                        "type": "object",
                        "x-title-plural": "s"
                      },
                      "network_identifiers": {
                        "description": "Network-specific identifiers for a specific request or transaction.",
                        "example": {
                          "retrieval_reference_number": "785867080153",
                          "trace_number": "487941",
                          "transaction_id": "627199945183184"
                        },
                        "properties": {
                          "retrieval_reference_number": {
                            "anyOf": [
                              {
                                "description": "A life-cycle identifier used across e.g., an authorization and a reversal. Expected to be unique per acquirer within a window of time. For some card networks the retrieval reference number includes the trace counter.",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "trace_number": {
                            "anyOf": [
                              {
                                "description": "A counter used to verify an individual authorization. Expected to be unique per acquirer within a window of time.",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "transaction_id": {
                            "anyOf": [
                              {
                                "description": "A globally unique transaction identifier provided by the card network, used across multiple life-cycle requests.",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "required": [
                          "transaction_id",
                          "trace_number",
                          "retrieval_reference_number"
                        ],
                        "type": "object",
                        "x-title-plural": "s"
                      },
                      "network_risk_score": {
                        "anyOf": [
                          {
                            "description": "The risk score generated by the card network. For Visa this is the Visa Advanced Authorization risk score, from 0 to 99, where 99 is the riskiest.",
                            "type": "integer"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "physical_card_id": {
                        "anyOf": [
                          {
                            "description": "If the authorization was made in-person with a physical card, the Physical Card that was used.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "presentment_amount": {
                        "description": "The declined amount in the minor unit of the transaction's presentment currency.",
                        "type": "integer"
                      },
                      "presentment_currency": {
                        "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's presentment currency.",
                        "type": "string"
                      },
                      "processing_category": {
                        "description": "The processing category describes the intent behind the authorization, such as whether it was used for bill payments or an automatic fuel dispenser.",
                        "enum": [
                          "account_funding",
                          "automatic_fuel_dispenser",
                          "bill_payment",
                          "purchase",
                          "quasi_cash",
                          "refund"
                        ],
                        "type": "string",
                        "x-enum-descriptions": [
                          "Account funding transactions are transactions used to e.g., fund an account or transfer funds between accounts.",
                          "Automatic fuel dispenser authorizations occur when a card is used at a gas pump, prior to the actual transaction amount being known. They are followed by an advice message that updates the amount of the pending transaction.",
                          "A transaction used to pay a bill.",
                          "A regular purchase.",
                          "Quasi-cash transactions represent purchases of items which may be convertible to cash.",
                          "A refund card authorization, sometimes referred to as a credit voucher authorization, where funds are credited to the cardholder."
                        ]
                      },
                      "real_time_decision_id": {
                        "anyOf": [
                          {
                            "description": "The identifier of the Real-Time Decision sent to approve or decline this transaction.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "real_time_decision_reason": {
                        "anyOf": [
                          {
                            "description": "This is present if a specific decline reason was given in the real-time decision.",
                            "enum": [
                              "insufficient_funds",
                              "transaction_never_allowed",
                              "exceeds_approval_limit",
                              "card_temporarily_disabled",
                              "suspected_fraud",
                              "other"
                            ],
                            "type": "string",
                            "x-enum-descriptions": [
                              "The cardholder does not have sufficient funds to cover the transaction. The merchant may attempt to process the transaction again.",
                              "This type of transaction is not allowed for this card. This transaction should not be retried.",
                              "The transaction amount exceeds the cardholder's approval limit. The merchant may attempt to process the transaction again.",
                              "The card has been temporarily disabled or not yet activated. The merchant may attempt to process the transaction again.",
                              "The transaction is suspected to be fraudulent. The merchant may attempt to process the transaction again.",
                              "The transaction was declined for another reason. The merchant may attempt to process the transaction again. This should be used sparingly."
                            ]
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "reason": {
                        "description": "Why the transaction was declined.",
                        "enum": [
                          "account_closed",
                          "card_not_active",
                          "card_canceled",
                          "physical_card_not_active",
                          "entity_not_active",
                          "group_locked",
                          "insufficient_funds",
                          "cvv2_mismatch",
                          "card_expiration_mismatch",
                          "transaction_not_allowed",
                          "breaches_limit",
                          "webhook_declined",
                          "webhook_timed_out",
                          "declined_by_stand_in_processing",
                          "invalid_physical_card",
                          "missing_original_authorization",
                          "suspected_fraud"
                        ],
                        "type": "string",
                        "x-enum-descriptions": [
                          "The account has been closed.",
                          "The Card was not active.",
                          "The Card has been canceled.",
                          "The Physical Card was not active.",
                          "The account's entity was not active.",
                          "The account was inactive.",
                          "The Card's Account did not have a sufficient available balance.",
                          "The given CVV2 did not match the card's value.",
                          "The given expiration date did not match the card's value. Only applies when a CVV2 is present.",
                          "The attempted card transaction is not allowed per Increase's terms.",
                          "The transaction was blocked by a Limit.",
                          "Your application declined the transaction via webhook.",
                          "Your application webhook did not respond without the required timeout.",
                          "Declined by stand-in processing.",
                          "The card read had an invalid CVV, dCVV, or authorization request cryptogram.",
                          "The original card authorization for this incremental authorization does not exist.",
                          "The transaction was suspected to be fraudulent. Please reach out to support@increase.com for more information."
                        ]
                      },
                      "terminal_id": {
                        "anyOf": [
                          {
                            "description": "The terminal identifier (commonly abbreviated as TID) of the terminal the card is transacting with.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "verification": {
                        "description": "Fields related to verification of cardholder-provided values.",
                        "properties": {
                          "card_verification_code": {
                            "description": "Fields related to verification of the Card Verification Code, a 3-digit code on the back of the card.",
                            "properties": {
                              "result": {
                                "description": "The result of verifying the Card Verification Code.",
                                "enum": [
                                  "not_checked",
                                  "match",
                                  "no_match"
                                ],
                                "type": "string",
                                "x-enum-descriptions": [
                                  "No card verification code was provided in the authorization request.",
                                  "The card verification code matched the one on file.",
                                  "The card verification code did not match the one on file."
                                ]
                              }
                            },
                            "required": [
                              "result"
                            ],
                            "title": "Card Verification Code",
                            "type": "object",
                            "x-title-plural": "Card Verification Codes"
                          },
                          "cardholder_address": {
                            "description": "Cardholder address provided in the authorization request and the address on file we verified it against.",
                            "properties": {
                              "actual_line1": {
                                "anyOf": [
                                  {
                                    "description": "Line 1 of the address on file for the cardholder.",
                                    "type": "string"
                                  },
                                  {
                                    "type": "null"
                                  }
                                ]
                              },
                              "actual_postal_code": {
                                "anyOf": [
                                  {
                                    "description": "The postal code of the address on file for the cardholder.",
                                    "type": "string"
                                  },
                                  {
                                    "type": "null"
                                  }
                                ]
                              },
                              "provided_line1": {
                                "anyOf": [
                                  {
                                    "description": "The cardholder address line 1 provided for verification in the authorization request.",
                                    "type": "string"
                                  },
                                  {
                                    "type": "null"
                                  }
                                ]
                              },
                              "provided_postal_code": {
                                "anyOf": [
                                  {
                                    "description": "The postal code provided for verification in the authorization request.",
                                    "type": "string"
                                  },
                                  {
                                    "type": "null"
                                  }
                                ]
                              },
                              "result": {
                                "description": "The address verification result returned to the card network.",
                                "enum": [
                                  "not_checked",
                                  "postal_code_match_address_not_checked",
                                  "postal_code_match_address_no_match",
                                  "postal_code_no_match_address_match",
                                  "match",
                                  "no_match"
                                ],
                                "type": "string",
                                "x-enum-descriptions": [
                                  "No adress was provided in the authorization request.",
                                  "Postal code matches, but the street address was not verified.",
                                  "Postal code matches, but the street address does not match.",
                                  "Postal code does not match, but the street address matches.",
                                  "Postal code and street address match.",
                                  "Postal code and street address do not match."
                                ]
                              }
                            },
                            "required": [
                              "provided_postal_code",
                              "provided_line1",
                              "actual_postal_code",
                              "actual_line1",
                              "result"
                            ],
                            "title": "Cardholder Address",
                            "type": "object",
                            "x-title-plural": "Cardholder Addresses"
                          }
                        },
                        "required": [
                          "cardholder_address",
                          "card_verification_code"
                        ],
                        "type": "object",
                        "x-title-plural": "s"
                      }
                    },
                    "required": [
                      "merchant_acceptor_id",
                      "merchant_descriptor",
                      "merchant_category_code",
                      "terminal_id",
                      "merchant_city",
                      "merchant_state",
                      "merchant_postal_code",
                      "merchant_country",
                      "digital_wallet_token_id",
                      "physical_card_id",
                      "verification",
                      "network_identifiers",
                      "network_risk_score",
                      "network_details",
                      "id",
                      "card_payment_id",
                      "amount",
                      "presentment_amount",
                      "presentment_currency",
                      "currency",
                      "processing_category",
                      "reason",
                      "real_time_decision_reason",
                      "actioner",
                      "direction",
                      "real_time_decision_id",
                      "declined_transaction_id"
                    ],
                    "title": "Card Decline",
                    "type": "object",
                    "x-title-plural": "Card Declines"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "category": {
                "description": "The type of the resource. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.",
                "enum": [
                  "ach_decline",
                  "card_decline",
                  "check_decline",
                  "inbound_real_time_payments_transfer_decline",
                  "wire_decline",
                  "check_deposit_rejection",
                  "other"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "ACH Decline: details will be under the `ach_decline` object.",
                  "Card Decline: details will be under the `card_decline` object.",
                  "Check Decline: details will be under the `check_decline` object.",
                  "Inbound Real-Time Payments Transfer Decline: details will be under the `inbound_real_time_payments_transfer_decline` object.",
                  "Wire Decline: details will be under the `wire_decline` object.",
                  "Check Deposit Rejection: details will be under the `check_deposit_rejection` object.",
                  "The Declined Transaction was made for an undocumented or deprecated reason."
                ]
              },
              "check_decline": {
                "anyOf": [
                  {
                    "description": "A Check Decline object. This field will be present in the JSON response if and only if `category` is equal to `check_decline`.",
                    "example": {
                      "amount": -1000,
                      "auxiliary_on_us": "99999",
                      "back_image_file_id": null,
                      "check_transfer_id": "check_transfer_30b43acfu9vw8fyc4f5",
                      "front_image_file_id": null,
                      "inbound_check_deposit_id": "inbound_check_deposit_zoshvqybq0cjjm31mra",
                      "reason": "insufficient_funds"
                    },
                    "properties": {
                      "amount": {
                        "description": "The declined amount in USD cents.",
                        "type": "integer"
                      },
                      "auxiliary_on_us": {
                        "anyOf": [
                          {
                            "description": "A computer-readable number printed on the MICR line of business checks, usually the check number. This is useful for positive pay checks, but can be unreliably transmitted by the bank of first deposit.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "back_image_file_id": {
                        "anyOf": [
                          {
                            "description": "The identifier of the API File object containing an image of the back of the declined check.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "check_transfer_id": {
                        "anyOf": [
                          {
                            "description": "The identifier of the Check Transfer object associated with this decline.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "front_image_file_id": {
                        "anyOf": [
                          {
                            "description": "The identifier of the API File object containing an image of the front of the declined check.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "inbound_check_deposit_id": {
                        "anyOf": [
                          {
                            "description": "The identifier of the Inbound Check Deposit object associated with this decline.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "reason": {
                        "description": "Why the check was declined.",
                        "enum": [
                          "ach_route_disabled",
                          "ach_route_canceled",
                          "altered_or_fictitious",
                          "breaches_limit",
                          "endorsement_irregular",
                          "entity_not_active",
                          "group_locked",
                          "insufficient_funds",
                          "stop_payment_requested",
                          "duplicate_presentment",
                          "not_authorized",
                          "amount_mismatch",
                          "not_our_item",
                          "no_account_number_found",
                          "refer_to_image",
                          "unable_to_process",
                          "user_initiated"
                        ],
                        "type": "string",
                        "x-enum-descriptions": [
                          "The account number is disabled.",
                          "The account number is canceled.",
                          "The deposited check was altered or fictitious.",
                          "The transaction would cause a limit to be exceeded.",
                          "The check was not endorsed by the payee.",
                          "The account's entity is not active.",
                          "Your account is inactive.",
                          "Your account contains insufficient funds.",
                          "Stop payment requested for this check.",
                          "The check was a duplicate deposit.",
                          "The check was not authorized.",
                          "The amount the receiving bank is attempting to deposit does not match the amount on the check.",
                          "The check attempting to be deposited does not belong to Increase.",
                          "The account number on the check does not exist at Increase.",
                          "The check is not readable. Please refer to the image.",
                          "The check cannot be processed. This is rare: please contact support.",
                          "Your integration declined this check via the API."
                        ]
                      }
                    },
                    "required": [
                      "amount",
                      "auxiliary_on_us",
                      "reason",
                      "front_image_file_id",
                      "back_image_file_id",
                      "inbound_check_deposit_id",
                      "check_transfer_id"
                    ],
                    "title": "Check Decline",
                    "type": "object",
                    "x-title-plural": "Check Declines"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "check_deposit_rejection": {
                "anyOf": [
                  {
                    "description": "A Check Deposit Rejection object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_rejection`.",
                    "example": {
                      "amount": 1750,
                      "check_deposit_id": "check_deposit_f06n9gpg7sxn8t19lfc1",
                      "currency": "USD",
                      "declined_transaction_id": "declined_transaction_17jbn0yyhvkt4v4ooym8",
                      "reason": "incomplete_image",
                      "rejected_at": "2020-01-31T23:59:59Z"
                    },
                    "properties": {
                      "amount": {
                        "description": "The rejected amount in the minor unit of check's currency. For dollars, for example, this is cents.",
                        "type": "integer"
                      },
                      "check_deposit_id": {
                        "description": "The identifier of the Check Deposit that was rejected.",
                        "type": "string"
                      },
                      "currency": {
                        "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.",
                        "enum": [
                          "CAD",
                          "CHF",
                          "EUR",
                          "GBP",
                          "JPY",
                          "USD"
                        ],
                        "type": "string",
                        "x-enum-descriptions": [
                          "Canadian Dollar (CAD)",
                          "Swiss Franc (CHF)",
                          "Euro (EUR)",
                          "British Pound (GBP)",
                          "Japanese Yen (JPY)",
                          "US Dollar (USD)"
                        ]
                      },
                      "declined_transaction_id": {
                        "description": "The identifier of the associated declined transaction.",
                        "type": "string"
                      },
                      "reason": {
                        "description": "Why the check deposit was rejected.",
                        "enum": [
                          "incomplete_image",
                          "duplicate",
                          "poor_image_quality",
                          "incorrect_amount",
                          "incorrect_recipient",
                          "not_eligible_for_mobile_deposit",
                          "missing_required_data_elements",
                          "suspected_fraud",
                          "deposit_window_expired",
                          "requested_by_user",
                          "unknown"
                        ],
                        "type": "string",
                        "x-enum-descriptions": [
                          "The check's image is incomplete.",
                          "This is a duplicate check submission.",
                          "This check has poor image quality.",
                          "The check was deposited with the incorrect amount.",
                          "The check is made out to someone other than the account holder.",
                          "This check was not eligible for mobile deposit.",
                          "This check is missing at least one required field.",
                          "This check is suspected to be fraudulent.",
                          "This check's deposit window has expired.",
                          "The check was rejected at the user's request.",
                          "The check was rejected for an unknown reason."
                        ]
                      },
                      "rejected_at": {
                        "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check deposit was rejected.",
                        "format": "date-time",
                        "type": "string"
                      }
                    },
                    "required": [
                      "check_deposit_id",
                      "declined_transaction_id",
                      "amount",
                      "currency",
                      "reason",
                      "rejected_at"
                    ],
                    "title": "Check Deposit Rejection",
                    "type": "object",
                    "x-title-plural": "Check Deposit Rejections"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "inbound_real_time_payments_transfer_decline": {
                "anyOf": [
                  {
                    "description": "An Inbound Real-Time Payments Transfer Decline object. This field will be present in the JSON response if and only if `category` is equal to `inbound_real_time_payments_transfer_decline`.",
                    "example": {
                      "amount": 100,
                      "creditor_name": "Ian Crease",
                      "currency": "USD",
                      "debtor_account_number": "987654321",
                      "debtor_name": "National Phonograph Company",
                      "debtor_routing_number": "101050001",
                      "reason": "account_number_disabled",
                      "remittance_information": "Invoice 29582",
                      "transaction_identification": "20220501234567891T1BSLZO01745013025",
                      "transfer_id": "inbound_real_time_payments_transfer_63hlz498vcxg644hcrzr"
                    },
                    "properties": {
                      "amount": {
                        "description": "The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.",
                        "type": "integer"
                      },
                      "creditor_name": {
                        "description": "The name the sender of the transfer specified as the recipient of the transfer.",
                        "type": "string"
                      },
                      "currency": {
                        "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the declined transfer's currency. This will always be \"USD\" for a Real-Time Payments transfer.",
                        "enum": [
                          "CAD",
                          "CHF",
                          "EUR",
                          "GBP",
                          "JPY",
                          "USD"
                        ],
                        "type": "string",
                        "x-enum-descriptions": [
                          "Canadian Dollar (CAD)",
                          "Swiss Franc (CHF)",
                          "Euro (EUR)",
                          "British Pound (GBP)",
                          "Japanese Yen (JPY)",
                          "US Dollar (USD)"
                        ]
                      },
                      "debtor_account_number": {
                        "description": "The account number of the account that sent the transfer.",
                        "type": "string"
                      },
                      "debtor_name": {
                        "description": "The name provided by the sender of the transfer.",
                        "type": "string"
                      },
                      "debtor_routing_number": {
                        "description": "The routing number of the account that sent the transfer.",
                        "type": "string"
                      },
                      "reason": {
                        "description": "Why the transfer was declined.",
                        "enum": [
                          "account_number_canceled",
                          "account_number_disabled",
                          "account_restricted",
                          "group_locked",
                          "entity_not_active",
                          "real_time_payments_not_enabled"
                        ],
                        "type": "string",
                        "x-enum-descriptions": [
                          "The account number is canceled.",
                          "The account number is disabled.",
                          "Your account is restricted.",
                          "Your account is inactive.",
                          "The account's entity is not active.",
                          "Your account is not enabled to receive Real-Time Payments transfers."
                        ]
                      },
                      "remittance_information": {
                        "anyOf": [
                          {
                            "description": "Additional information included with the transfer.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "transaction_identification": {
                        "description": "The Real-Time Payments network identification of the declined transfer.",
                        "type": "string"
                      },
                      "transfer_id": {
                        "description": "The identifier of the Real-Time Payments Transfer that led to this Transaction.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "amount",
                      "currency",
                      "reason",
                      "creditor_name",
                      "debtor_name",
                      "debtor_account_number",
                      "debtor_routing_number",
                      "transaction_identification",
                      "remittance_information",
                      "transfer_id"
                    ],
                    "title": "Inbound Real-Time Payments Transfer Decline",
                    "type": "object",
                    "x-title-plural": "Inbound Real-Time Payments Transfer Declines"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "other": {
                "anyOf": [
                  {
                    "description": "If the category of this Transaction source is equal to `other`, this field will contain an empty object, otherwise it will contain null.",
                    "properties": {},
                    "title": "Other",
                    "type": "object",
                    "x-title-plural": "Others"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "wire_decline": {
                "anyOf": [
                  {
                    "description": "A Wire Decline object. This field will be present in the JSON response if and only if `category` is equal to `wire_decline`.",
                    "example": {
                      "inbound_wire_transfer_id": "inbound_wire_transfer_f228m6bmhtcxjco9pwp0",
                      "reason": "account_number_disabled"
                    },
                    "properties": {
                      "inbound_wire_transfer_id": {
                        "description": "The identifier of the Inbound Wire Transfer that was declined.",
                        "type": "string"
                      },
                      "reason": {
                        "description": "Why the wire transfer was declined.",
                        "enum": [
                          "account_number_canceled",
                          "account_number_disabled",
                          "entity_not_active",
                          "group_locked",
                          "no_account_number",
                          "transaction_not_allowed"
                        ],
                        "type": "string",
                        "x-enum-descriptions": [
                          "The account number is canceled.",
                          "The account number is disabled.",
                          "The account's entity is not active.",
                          "Your account is inactive.",
                          "The beneficiary account number does not exist.",
                          "The transaction is not allowed per Increase's terms."
                        ]
                      }
                    },
                    "required": [
                      "reason",
                      "inbound_wire_transfer_id"
                    ],
                    "title": "Wire Decline",
                    "type": "object",
                    "x-title-plural": "Wire Declines"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "required": [
              "category",
              "ach_decline",
              "card_decline",
              "check_decline",
              "inbound_real_time_payments_transfer_decline",
              "wire_decline",
              "check_deposit_rejection",
              "other"
            ],
            "title": "Declined Transaction Source",
            "type": "object",
            "x-title-plural": "Declined Transaction Sources"
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `declined_transaction`.",
            "enum": [
              "declined_transaction"
            ],
            "type": "string"
          }
        },
        "required": [
          "account_id",
          "amount",
          "currency",
          "created_at",
          "description",
          "id",
          "route_id",
          "route_type",
          "source",
          "type"
        ],
        "title": "Declined Transaction",
        "type": "object",
        "x-tag": "Declined Transactions",
        "x-title-plural": "Declined Transactions"
      },
      "declined_transaction_list": {
        "description": "A list of Declined Transaction objects.",
        "example": {
          "data": [
            {
              "account_id": "account_in71c4amph0vgo2qllky",
              "amount": 1750,
              "created_at": "2020-01-31T23:59:59Z",
              "currency": "USD",
              "description": "INVOICE 2468",
              "id": "declined_transaction_17jbn0yyhvkt4v4ooym8",
              "route_id": "account_number_v18nkfqm6afpsrvy82b2",
              "route_type": "account_number",
              "source": {
                "ach_decline": {
                  "amount": 1750,
                  "id": "ach_decline_72v1mcwxudctq56efipa",
                  "inbound_ach_transfer_id": "inbound_ach_transfer_tdrwqr3fq9gnnq49odev",
                  "originator_company_descriptive_date": null,
                  "originator_company_discretionary_data": null,
                  "originator_company_id": "0987654321",
                  "originator_company_name": "BIG BANK",
                  "reason": "insufficient_funds",
                  "receiver_id_number": "12345678900",
                  "receiver_name": "IAN CREASE",
                  "trace_number": "021000038461022",
                  "type": "ach_decline"
                },
                "category": "ach_decline"
              },
              "type": "declined_transaction"
            }
          ],
          "next_cursor": "v57w5d"
        },
        "properties": {
          "data": {
            "description": "The contents of the list.",
            "items": {
              "$ref": "#/components/schemas/declined_transaction"
            },
            "type": "array"
          },
          "next_cursor": {
            "anyOf": [
              {
                "description": "A pointer to a place in the list.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "Declined Transaction List",
        "type": "object",
        "x-title-plural": "Declined Transaction Lists"
      },
      "digital_card_profile": {
        "description": "This contains artwork and metadata relating to a Card's appearance in digital wallet apps like Apple Pay and Google Pay. For more information, see our guide on [digital card artwork](https://increase.com/documentation/card-art).",
        "example": {
          "app_icon_file_id": "file_makxrc67oh9l6sg7w9yc",
          "background_image_file_id": "file_makxrc67oh9l6sg7w9yc",
          "card_description": "Black Card",
          "contact_email": "user@example.com",
          "contact_phone": "+18882988865",
          "contact_website": "https://example.com",
          "created_at": "2020-01-31T23:59:59Z",
          "deprecated_card_profile_id": null,
          "description": "Corporate logo Apple Pay Card",
          "id": "digital_card_profile_s3puplu90f04xhcwkiga",
          "idempotency_key": null,
          "is_default": false,
          "issuer_name": "National Phonograph Company",
          "status": "active",
          "text_color": {
            "blue": 230,
            "green": 255,
            "red": 189
          },
          "type": "digital_card_profile"
        },
        "properties": {
          "app_icon_file_id": {
            "description": "The identifier of the File containing the card's icon image.",
            "type": "string"
          },
          "background_image_file_id": {
            "description": "The identifier of the File containing the card's front image.",
            "type": "string"
          },
          "card_description": {
            "description": "A user-facing description for the card itself.",
            "type": "string"
          },
          "contact_email": {
            "anyOf": [
              {
                "description": "An email address the user can contact to receive support for their card.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "contact_phone": {
            "anyOf": [
              {
                "description": "A phone number the user can contact to receive support for their card.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "contact_website": {
            "anyOf": [
              {
                "description": "A website the user can visit to view and receive support for their card.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "created_at": {
            "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was created.",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "description": "A description you can use to identify the Card Profile.",
            "type": "string"
          },
          "id": {
            "description": "The Card Profile identifier.",
            "type": "string"
          },
          "idempotency_key": {
            "anyOf": [
              {
                "description": "The idempotency key you chose for this object. This value is unique across Increase and is used to ensure that a request is only processed once. Learn more about [idempotency](https://increase.com/documentation/idempotency-keys).",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "issuer_name": {
            "description": "A user-facing description for whoever is issuing the card.",
            "type": "string"
          },
          "status": {
            "description": "The status of the Card Profile.",
            "enum": [
              "pending",
              "rejected",
              "active",
              "archived"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The Card Profile is awaiting review from Increase and/or processing by card networks.",
              "There is an issue with the Card Profile preventing it from use.",
              "The Card Profile can be assigned to Cards.",
              "The Card Profile is no longer in use."
            ]
          },
          "text_color": {
            "description": "The Card's text color, specified as an RGB triple.",
            "properties": {
              "blue": {
                "description": "The value of the blue channel in the RGB color.",
                "type": "integer"
              },
              "green": {
                "description": "The value of the green channel in the RGB color.",
                "type": "integer"
              },
              "red": {
                "description": "The value of the red channel in the RGB color.",
                "type": "integer"
              }
            },
            "required": [
              "red",
              "green",
              "blue"
            ],
            "title": "Text Color",
            "type": "object",
            "x-title-plural": "Text Colors"
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `digital_card_profile`.",
            "enum": [
              "digital_card_profile"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "status",
          "description",
          "text_color",
          "issuer_name",
          "card_description",
          "contact_website",
          "contact_email",
          "contact_phone",
          "background_image_file_id",
          "app_icon_file_id",
          "type",
          "idempotency_key"
        ],
        "title": "Digital Card Profile",
        "type": "object",
        "x-tag": "Digital Card Profiles",
        "x-title-plural": "Digital Card Profiles"
      },
      "digital_card_profile_list": {
        "description": "A list of Digital Card Profile objects.",
        "example": {
          "data": [
            {
              "app_icon_file_id": "file_makxrc67oh9l6sg7w9yc",
              "background_image_file_id": "file_makxrc67oh9l6sg7w9yc",
              "card_description": "Black Card",
              "contact_email": "user@example.com",
              "contact_phone": "+18882988865",
              "contact_website": "https://example.com",
              "created_at": "2020-01-31T23:59:59Z",
              "deprecated_card_profile_id": null,
              "description": "Corporate logo Apple Pay Card",
              "id": "digital_card_profile_s3puplu90f04xhcwkiga",
              "idempotency_key": null,
              "is_default": false,
              "issuer_name": "National Phonograph Company",
              "status": "active",
              "text_color": {
                "blue": 230,
                "green": 255,
                "red": 189
              },
              "type": "digital_card_profile"
            }
          ],
          "next_cursor": "v57w5d"
        },
        "properties": {
          "data": {
            "description": "The contents of the list.",
            "items": {
              "$ref": "#/components/schemas/digital_card_profile"
            },
            "type": "array"
          },
          "next_cursor": {
            "anyOf": [
              {
                "description": "A pointer to a place in the list.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "Digital Card Profile List",
        "type": "object",
        "x-title-plural": "Digital Card Profile Lists"
      },
      "digital_wallet_token": {
        "description": "A Digital Wallet Token is created when a user adds a Card to their Apple Pay or Google Pay app. The Digital Wallet Token can be used for purchases just like a Card.",
        "example": {
          "card_id": "card_oubs0hwk5rn6knuecxg2",
          "created_at": "2020-01-31T23:59:59Z",
          "id": "digital_wallet_token_izi62go3h51p369jrie0",
          "status": "active",
          "token_requestor": "apple_pay",
          "type": "digital_wallet_token",
          "updates": [
            {
              "status": "inactive",
              "timestamp": "2020-01-31T23:59:59Z"
            }
          ]
        },
        "properties": {
          "card_id": {
            "description": "The identifier for the Card this Digital Wallet Token belongs to.",
            "type": "string"
          },
          "created_at": {
            "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Digital Wallet Token was created.",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "The Digital Wallet Token identifier.",
            "type": "string"
          },
          "status": {
            "description": "This indicates if payments can be made with the Digital Wallet Token.",
            "enum": [
              "active",
              "inactive",
              "suspended",
              "deactivated"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The digital wallet token is active.",
              "The digital wallet token has been created but not successfully activated via two-factor authentication yet.",
              "The digital wallet token has been temporarily paused.",
              "The digital wallet token has been permanently canceled."
            ]
          },
          "token_requestor": {
            "description": "The digital wallet app being used.",
            "enum": [
              "apple_pay",
              "google_pay",
              "samsung_pay",
              "unknown"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "Apple Pay",
              "Google Pay",
              "Samsung Pay",
              "Unknown"
            ]
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `digital_wallet_token`.",
            "enum": [
              "digital_wallet_token"
            ],
            "type": "string"
          },
          "updates": {
            "description": "Updates to the Digital Wallet Token.",
            "items": {
              "properties": {
                "status": {
                  "description": "The status the update changed this Digital Wallet Token to.",
                  "enum": [
                    "active",
                    "inactive",
                    "suspended",
                    "deactivated"
                  ],
                  "type": "string",
                  "x-enum-descriptions": [
                    "The digital wallet token is active.",
                    "The digital wallet token has been created but not successfully activated via two-factor authentication yet.",
                    "The digital wallet token has been temporarily paused.",
                    "The digital wallet token has been permanently canceled."
                  ]
                },
                "timestamp": {
                  "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the update happened.",
                  "format": "date-time",
                  "type": "string"
                }
              },
              "required": [
                "timestamp",
                "status"
              ],
              "title": "Updates Element",
              "type": "object",
              "x-title-plural": "Updates Elements"
            },
            "type": "array"
          }
        },
        "required": [
          "id",
          "card_id",
          "created_at",
          "status",
          "token_requestor",
          "updates",
          "type"
        ],
        "title": "Digital Wallet Token",
        "type": "object",
        "x-tag": "Digital Wallet Tokens",
        "x-title-plural": "Digital Wallet Tokens"
      },
      "digital_wallet_token_list": {
        "description": "A list of Digital Wallet Token objects.",
        "example": {
          "data": [
            {
              "card_id": "card_oubs0hwk5rn6knuecxg2",
              "created_at": "2020-01-31T23:59:59Z",
              "id": "digital_wallet_token_izi62go3h51p369jrie0",
              "status": "active",
              "token_requestor": "apple_pay",
              "type": "digital_wallet_token",
              "updates": [
                {
                  "status": "inactive",
                  "timestamp": "2020-01-31T23:59:59Z"
                }
              ]
            }
          ],
          "next_cursor": "v57w5d"
        },
        "properties": {
          "data": {
            "description": "The contents of the list.",
            "items": {
              "$ref": "#/components/schemas/digital_wallet_token"
            },
            "type": "array"
          },
          "next_cursor": {
            "anyOf": [
              {
                "description": "A pointer to a place in the list.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "Digital Wallet Token List",
        "type": "object",
        "x-title-plural": "Digital Wallet Token Lists"
      },
      "document": {
        "description": "Increase generates certain documents / forms automatically for your application; they can be listed here.",
        "example": {
          "category": "form_1099_int",
          "created_at": "2020-01-31T23:59:59Z",
          "entity_id": "entity_n8y8tnk2p9339ti393yi",
          "file_id": "file_makxrc67oh9l6sg7w9yc",
          "id": "document_qjtqc6s4c14ve2q89izm",
          "type": "document"
        },
        "properties": {
          "category": {
            "description": "The type of document.",
            "enum": [
              "form_1099_int",
              "form_1099_misc",
              "proof_of_authorization",
              "company_information"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "Internal Revenue Service Form 1099-INT.",
              "Internal Revenue Service Form 1099-MISC.",
              "A document submitted in response to a proof of authorization request for an ACH transfer.",
              "Company information, such a policies or procedures, typically submitted during our due diligence process."
            ]
          },
          "created_at": {
            "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Document was created.",
            "format": "date-time",
            "type": "string"
          },
          "entity_id": {
            "anyOf": [
              {
                "description": "The identifier of the Entity the document was generated for.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "file_id": {
            "description": "The identifier of the File containing the Document's contents.",
            "type": "string"
          },
          "id": {
            "description": "The Document identifier.",
            "type": "string"
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `document`.",
            "enum": [
              "document"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "category",
          "created_at",
          "entity_id",
          "file_id",
          "type"
        ],
        "title": "Document",
        "type": "object",
        "x-tag": "Documents",
        "x-title-plural": "Documents"
      },
      "document_list": {
        "description": "A list of Document objects.",
        "example": {
          "data": [
            {
              "category": "form_1099_int",
              "created_at": "2020-01-31T23:59:59Z",
              "entity_id": "entity_n8y8tnk2p9339ti393yi",
              "file_id": "file_makxrc67oh9l6sg7w9yc",
              "id": "document_qjtqc6s4c14ve2q89izm",
              "type": "document"
            }
          ],
          "next_cursor": "v57w5d"
        },
        "properties": {
          "data": {
            "description": "The contents of the list.",
            "items": {
              "$ref": "#/components/schemas/document"
            },
            "type": "array"
          },
          "next_cursor": {
            "anyOf": [
              {
                "description": "A pointer to a place in the list.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "Document List",
        "type": "object",
        "x-title-plural": "Document Lists"
      },
      "enroll_an_account_in_the_intrafi_deposit_sweep_network_parameters": {
        "example": {
          "account_id": "account_in71c4amph0vgo2qllky",
          "email_address": "user@example.com"
        },
        "properties": {
          "account_id": {
            "description": "The identifier for the account to be added to IntraFi.",
            "type": "string"
          },
          "email_address": {
            "description": "The contact email for the account owner, to be shared with IntraFi.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "account_id",
          "email_address"
        ],
        "type": "object"
      },
      "entity": {
        "description": "Entities are the legal entities that own accounts. They can be people, corporations, partnerships, government authorities, or trusts.",
        "example": {
          "corporation": {
            "address": {
              "city": "New York",
              "line1": "33 Liberty Street",
              "line2": null,
              "state": "NY",
              "zip": "10045"
            },
            "beneficial_owners": [
              {
                "beneficial_owner_id": "entity_setup_beneficial_owner_submission_vgkyk7dj5eb4sfhdbkx7",
                "company_title": "CEO",
                "individual": {
                  "address": {
                    "city": "New York",
                    "line1": "33 Liberty Street",
                    "line2": null,
                    "state": "NY",
                    "zip": "10045"
                  },
                  "date_of_birth": "1970-01-31",
                  "identification": {
                    "country": "US",
                    "method": "social_security_number",
                    "number_last4": "1120"
                  },
                  "name": "Ian Crease"
                },
                "prong": "control"
              }
            ],
            "incorporation_state": "NY",
            "industry_code": null,
            "name": "National Phonograph Company",
            "tax_identifier": "602214076",
            "website": "https://example.com"
          },
          "created_at": "2020-01-31T23:59:59Z",
          "description": null,
          "details_confirmed_at": null,
          "government_authority": null,
          "id": "entity_n8y8tnk2p9339ti393yi",
          "idempotency_key": null,
          "joint": null,
          "natural_person": null,
          "status": "active",
          "structure": "corporation",
          "supplemental_documents": [
            {
              "created_at": "2020-01-31T23:59:59Z",
              "entity_id": "entity_n8y8tnk2p9339ti393yi",
              "file_id": "file_makxrc67oh9l6sg7w9yc",
              "idempotency_key": null,
              "type": "entity_supplemental_document"
            }
          ],
          "third_party_verification": null,
          "trust": null,
          "type": "entity"
        },
        "properties": {
          "corporation": {
            "anyOf": [
              {
                "description": "Details of the corporation entity. Will be present if `structure` is equal to `corporation`.",
                "properties": {
                  "address": {
                    "description": "The corporation's address.",
                    "example": {
                      "city": "New York",
                      "line1": "33 Liberty Street",
                      "line2": null,
                      "state": "NY",
                      "zip": "10045"
                    },
                    "properties": {
                      "city": {
                        "description": "The city of the address.",
                        "type": "string"
                      },
                      "line1": {
                        "description": "The first line of the address.",
                        "type": "string"
                      },
                      "line2": {
                        "anyOf": [
                          {
                            "description": "The second line of the address.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "state": {
                        "description": "The two-letter United States Postal Service (USPS) abbreviation for the state of the address.",
                        "type": "string"
                      },
                      "zip": {
                        "description": "The ZIP code of the address.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "line1",
                      "line2",
                      "city",
                      "state",
                      "zip"
                    ],
                    "title": "Address",
                    "type": "object",
                    "x-title-plural": "Addresses"
                  },
                  "beneficial_owners": {
                    "description": "The identifying details of anyone controlling or owning 25% or more of the corporation.",
                    "items": {
                      "properties": {
                        "beneficial_owner_id": {
                          "description": "The identifier of this beneficial owner.",
                          "type": "string"
                        },
                        "company_title": {
                          "anyOf": [
                            {
                              "description": "This person's role or title within the entity.",
                              "type": "string"
                            },
                            {
                              "type": "null"
                            }
                          ]
                        },
                        "individual": {
                          "description": "Personal details for the beneficial owner.",
                          "properties": {
                            "address": {
                              "description": "The person's address.",
                              "example": {
                                "city": "New York",
                                "line1": "33 Liberty Street",
                                "line2": null,
                                "state": "NY",
                                "zip": "10045"
                              },
                              "properties": {
                                "city": {
                                  "description": "The city of the address.",
                                  "type": "string"
                                },
                                "line1": {
                                  "description": "The first line of the address.",
                                  "type": "string"
                                },
                                "line2": {
                                  "anyOf": [
                                    {
                                      "description": "The second line of the address.",
                                      "type": "string"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ]
                                },
                                "state": {
                                  "description": "The two-letter United States Postal Service (USPS) abbreviation for the state of the address.",
                                  "type": "string"
                                },
                                "zip": {
                                  "description": "The ZIP code of the address.",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "line1",
                                "line2",
                                "city",
                                "state",
                                "zip"
                              ],
                              "title": "Address",
                              "type": "object",
                              "x-title-plural": "Addresses"
                            },
                            "date_of_birth": {
                              "description": "The person's date of birth in YYYY-MM-DD format.",
                              "format": "date",
                              "type": "string"
                            },
                            "identification": {
                              "description": "A means of verifying the person's identity.",
                              "properties": {
                                "method": {
                                  "description": "A method that can be used to verify the individual's identity.",
                                  "enum": [
                                    "social_security_number",
                                    "individual_taxpayer_identification_number",
                                    "passport",
                                    "drivers_license",
                                    "other"
                                  ],
                                  "type": "string",
                                  "x-enum-descriptions": [
                                    "A social security number.",
                                    "An individual taxpayer identification number (ITIN).",
                                    "A passport number.",
                                    "A driver's license number.",
                                    "Another identifying document."
                                  ]
                                },
                                "number_last4": {
                                  "description": "The last 4 digits of the identification number that can be used to verify the individual's identity.",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "method",
                                "number_last4"
                              ],
                              "title": "Identification",
                              "type": "object",
                              "x-title-plural": "Identifications"
                            },
                            "name": {
                              "description": "The person's legal name.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "name",
                            "date_of_birth",
                            "address",
                            "identification"
                          ],
                          "title": "Individual",
                          "type": "object",
                          "x-title-plural": "Individuals"
                        },
                        "prong": {
                          "description": "Why this person is considered a beneficial owner of the entity.",
                          "enum": [
                            "ownership",
                            "control"
                          ],
                          "type": "string",
                          "x-enum-descriptions": [
                            "A person with 25% or greater direct or indirect ownership of the entity.",
                            "A person who manages, directs, or has significant control of the entity."
                          ]
                        }
                      },
                      "required": [
                        "individual",
                        "company_title",
                        "prong",
                        "beneficial_owner_id"
                      ],
                      "title": "Beneficial Owners Element",
                      "type": "object",
                      "x-title-plural": "Beneficial Owners Elements"
                    },
                    "type": "array"
                  },
                  "incorporation_state": {
                    "anyOf": [
                      {
                        "description": "The two-letter United States Postal Service (USPS) abbreviation for the corporation's state of incorporation.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "industry_code": {
                    "anyOf": [
                      {
                        "description": "The numeric North American Industry Classification System (NAICS) code submitted for the corporation.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "name": {
                    "description": "The legal name of the corporation.",
                    "type": "string"
                  },
                  "tax_identifier": {
                    "anyOf": [
                      {
                        "description": "The Employer Identification Number (EIN) for the corporation.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "website": {
                    "anyOf": [
                      {
                        "description": "The website of the corporation.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  }
                },
                "required": [
                  "name",
                  "website",
                  "tax_identifier",
                  "incorporation_state",
                  "industry_code",
                  "address",
                  "beneficial_owners"
                ],
                "title": "Corporation",
                "type": "object",
                "x-title-plural": "Corporations"
              },
              {
                "type": "null"
              }
            ]
          },
          "created_at": {
            "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Entity was created.",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "anyOf": [
              {
                "description": "The entity's description for display purposes.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "details_confirmed_at": {
            "anyOf": [
              {
                "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Entity's details were most recently confirmed.",
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "government_authority": {
            "anyOf": [
              {
                "description": "Details of the government authority entity. Will be present if `structure` is equal to `government_authority`.",
                "properties": {
                  "address": {
                    "description": "The government authority's address.",
                    "example": {
                      "city": "New York",
                      "line1": "33 Liberty Street",
                      "line2": null,
                      "state": "NY",
                      "zip": "10045"
                    },
                    "properties": {
                      "city": {
                        "description": "The city of the address.",
                        "type": "string"
                      },
                      "line1": {
                        "description": "The first line of the address.",
                        "type": "string"
                      },
                      "line2": {
                        "anyOf": [
                          {
                            "description": "The second line of the address.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "state": {
                        "description": "The two-letter United States Postal Service (USPS) abbreviation for the state of the address.",
                        "type": "string"
                      },
                      "zip": {
                        "description": "The ZIP code of the address.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "line1",
                      "line2",
                      "city",
                      "state",
                      "zip"
                    ],
                    "title": "Address",
                    "type": "object",
                    "x-title-plural": "Addresses"
                  },
                  "authorized_persons": {
                    "description": "The identifying details of authorized persons of the government authority.",
                    "items": {
                      "properties": {
                        "authorized_person_id": {
                          "description": "The identifier of this authorized person.",
                          "type": "string"
                        },
                        "name": {
                          "description": "The person's legal name.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "name",
                        "authorized_person_id"
                      ],
                      "title": "Authorized Persons Element",
                      "type": "object",
                      "x-title-plural": "Authorized Persons Elements"
                    },
                    "type": "array"
                  },
                  "category": {
                    "description": "The category of the government authority.",
                    "enum": [
                      "municipality"
                    ],
                    "type": "string",
                    "x-enum-descriptions": [
                      "The Public Entity is a Municipality."
                    ]
                  },
                  "name": {
                    "description": "The government authority's name.",
                    "type": "string"
                  },
                  "tax_identifier": {
                    "anyOf": [
                      {
                        "description": "The Employer Identification Number (EIN) of the government authority.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "website": {
                    "anyOf": [
                      {
                        "description": "The government authority's website.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  }
                },
                "required": [
                  "name",
                  "category",
                  "address",
                  "website",
                  "tax_identifier",
                  "authorized_persons"
                ],
                "title": "Government Authority",
                "type": "object",
                "x-title-plural": "Government Authorities"
              },
              {
                "type": "null"
              }
            ]
          },
          "id": {
            "description": "The entity's identifier.",
            "type": "string"
          },
          "idempotency_key": {
            "anyOf": [
              {
                "description": "The idempotency key you chose for this object. This value is unique across Increase and is used to ensure that a request is only processed once. Learn more about [idempotency](https://increase.com/documentation/idempotency-keys).",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "joint": {
            "anyOf": [
              {
                "description": "Details of the joint entity. Will be present if `structure` is equal to `joint`.",
                "properties": {
                  "individuals": {
                    "description": "The two individuals that share control of the entity.",
                    "items": {
                      "properties": {
                        "address": {
                          "description": "The person's address.",
                          "example": {
                            "city": "New York",
                            "line1": "33 Liberty Street",
                            "line2": null,
                            "state": "NY",
                            "zip": "10045"
                          },
                          "properties": {
                            "city": {
                              "description": "The city of the address.",
                              "type": "string"
                            },
                            "line1": {
                              "description": "The first line of the address.",
                              "type": "string"
                            },
                            "line2": {
                              "anyOf": [
                                {
                                  "description": "The second line of the address.",
                                  "type": "string"
                                },
                                {
                                  "type": "null"
                                }
                              ]
                            },
                            "state": {
                              "description": "The two-letter United States Postal Service (USPS) abbreviation for the state of the address.",
                              "type": "string"
                            },
                            "zip": {
                              "description": "The ZIP code of the address.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "line1",
                            "line2",
                            "city",
                            "state",
                            "zip"
                          ],
                          "title": "Address",
                          "type": "object",
                          "x-title-plural": "Addresses"
                        },
                        "date_of_birth": {
                          "description": "The person's date of birth in YYYY-MM-DD format.",
                          "format": "date",
                          "type": "string"
                        },
                        "identification": {
                          "description": "A means of verifying the person's identity.",
                          "properties": {
                            "method": {
                              "description": "A method that can be used to verify the individual's identity.",
                              "enum": [
                                "social_security_number",
                                "individual_taxpayer_identification_number",
                                "passport",
                                "drivers_license",
                                "other"
                              ],
                              "type": "string",
                              "x-enum-descriptions": [
                                "A social security number.",
                                "An individual taxpayer identification number (ITIN).",
                                "A passport number.",
                                "A driver's license number.",
                                "Another identifying document."
                              ]
                            },
                            "number_last4": {
                              "description": "The last 4 digits of the identification number that can be used to verify the individual's identity.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "method",
                            "number_last4"
                          ],
                          "title": "Identification",
                          "type": "object",
                          "x-title-plural": "Identifications"
                        },
                        "name": {
                          "description": "The person's legal name.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "name",
                        "date_of_birth",
                        "address",
                        "identification"
                      ],
                      "title": "Individual",
                      "type": "object",
                      "x-title-plural": "Individuals"
                    },
                    "type": "array"
                  },
                  "name": {
                    "description": "The entity's name.",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "individuals"
                ],
                "title": "Joint",
                "type": "object",
                "x-title-plural": "Joints"
              },
              {
                "type": "null"
              }
            ]
          },
          "natural_person": {
            "anyOf": [
              {
                "description": "Details of the natural person entity. Will be present if `structure` is equal to `natural_person`.",
                "properties": {
                  "address": {
                    "description": "The person's address.",
                    "example": {
                      "city": "New York",
                      "line1": "33 Liberty Street",
                      "line2": null,
                      "state": "NY",
                      "zip": "10045"
                    },
                    "properties": {
                      "city": {
                        "description": "The city of the address.",
                        "type": "string"
                      },
                      "line1": {
                        "description": "The first line of the address.",
                        "type": "string"
                      },
                      "line2": {
                        "anyOf": [
                          {
                            "description": "The second line of the address.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "state": {
                        "description": "The two-letter United States Postal Service (USPS) abbreviation for the state of the address.",
                        "type": "string"
                      },
                      "zip": {
                        "description": "The ZIP code of the address.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "line1",
                      "line2",
                      "city",
                      "state",
                      "zip"
                    ],
                    "title": "Address",
                    "type": "object",
                    "x-title-plural": "Addresses"
                  },
                  "date_of_birth": {
                    "description": "The person's date of birth in YYYY-MM-DD format.",
                    "format": "date",
                    "type": "string"
                  },
                  "identification": {
                    "description": "A means of verifying the person's identity.",
                    "properties": {
                      "method": {
                        "description": "A method that can be used to verify the individual's identity.",
                        "enum": [
                          "social_security_number",
                          "individual_taxpayer_identification_number",
                          "passport",
                          "drivers_license",
                          "other"
                        ],
                        "type": "string",
                        "x-enum-descriptions": [
                          "A social security number.",
                          "An individual taxpayer identification number (ITIN).",
                          "A passport number.",
                          "A driver's license number.",
                          "Another identifying document."
                        ]
                      },
                      "number_last4": {
                        "description": "The last 4 digits of the identification number that can be used to verify the individual's identity.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "method",
                      "number_last4"
                    ],
                    "title": "Identification",
                    "type": "object",
                    "x-title-plural": "Identifications"
                  },
                  "name": {
                    "description": "The person's legal name.",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "date_of_birth",
                  "address",
                  "identification"
                ],
                "title": "Individual",
                "type": "object",
                "x-title-plural": "Individuals"
              },
              {
                "type": "null"
              }
            ]
          },
          "status": {
            "description": "The status of the entity.",
            "enum": [
              "active",
              "archived",
              "disabled"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The entity is active.",
              "The entity is archived, and can no longer be used to create accounts.",
              "The entity is temporarily disabled and cannot be used for financial activity."
            ]
          },
          "structure": {
            "description": "The entity's legal structure.",
            "enum": [
              "corporation",
              "natural_person",
              "joint",
              "trust",
              "government_authority"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "A corporation.",
              "An individual person.",
              "Multiple individual people.",
              "A trust.",
              "A government authority."
            ]
          },
          "supplemental_documents": {
            "description": "Additional documentation associated with the entity. This is limited to the first 10 documents for an entity. If an entity has more than 10 documents, use the GET /entity_supplemental_documents list endpoint to retrieve them.",
            "items": {
              "$ref": "#/components/schemas/entity_supplemental_document"
            },
            "type": "array"
          },
          "third_party_verification": {
            "anyOf": [
              {
                "description": "A reference to data stored in a third-party verification service. Your integration may or may not use this field.",
                "properties": {
                  "reference": {
                    "description": "The reference identifier for the third party verification.",
                    "type": "string"
                  },
                  "vendor": {
                    "description": "The vendor that was used to perform the verification.",
                    "enum": [
                      "alloy",
                      "middesk"
                    ],
                    "type": "string",
                    "x-enum-descriptions": [
                      "Alloy. See https://alloy.com for more information.",
                      "Middesk. See https://middesk.com for more information."
                    ]
                  }
                },
                "required": [
                  "reference",
                  "vendor"
                ],
                "title": "Third Party Verification",
                "type": "object",
                "x-title-plural": "Third Party Verifications"
              },
              {
                "type": "null"
              }
            ]
          },
          "trust": {
            "anyOf": [
              {
                "description": "Details of the trust entity. Will be present if `structure` is equal to `trust`.",
                "properties": {
                  "address": {
                    "description": "The trust's address.",
                    "example": {
                      "city": "New York",
                      "line1": "33 Liberty Street",
                      "line2": null,
                      "state": "NY",
                      "zip": "10045"
                    },
                    "properties": {
                      "city": {
                        "description": "The city of the address.",
                        "type": "string"
                      },
                      "line1": {
                        "description": "The first line of the address.",
                        "type": "string"
                      },
                      "line2": {
                        "anyOf": [
                          {
                            "description": "The second line of the address.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "state": {
                        "description": "The two-letter United States Postal Service (USPS) abbreviation for the state of the address.",
                        "type": "string"
                      },
                      "zip": {
                        "description": "The ZIP code of the address.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "line1",
                      "line2",
                      "city",
                      "state",
                      "zip"
                    ],
                    "title": "Address",
                    "type": "object",
                    "x-title-plural": "Addresses"
                  },
                  "category": {
                    "description": "Whether the trust is `revocable` or `irrevocable`.",
                    "enum": [
                      "revocable",
                      "irrevocable"
                    ],
                    "type": "string",
                    "x-enum-descriptions": [
                      "The trust is revocable by the grantor.",
                      "The trust cannot be revoked."
                    ]
                  },
                  "formation_document_file_id": {
                    "anyOf": [
                      {
                        "description": "The ID for the File containing the formation document of the trust.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "formation_state": {
                    "anyOf": [
                      {
                        "description": "The two-letter United States Postal Service (USPS) abbreviation for the state in which the trust was formed.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "grantor": {
                    "anyOf": [
                      {
                        "description": "The grantor of the trust. Will be present if the `category` is `revocable`.",
                        "properties": {
                          "address": {
                            "description": "The person's address.",
                            "example": {
                              "city": "New York",
                              "line1": "33 Liberty Street",
                              "line2": null,
                              "state": "NY",
                              "zip": "10045"
                            },
                            "properties": {
                              "city": {
                                "description": "The city of the address.",
                                "type": "string"
                              },
                              "line1": {
                                "description": "The first line of the address.",
                                "type": "string"
                              },
                              "line2": {
                                "anyOf": [
                                  {
                                    "description": "The second line of the address.",
                                    "type": "string"
                                  },
                                  {
                                    "type": "null"
                                  }
                                ]
                              },
                              "state": {
                                "description": "The two-letter United States Postal Service (USPS) abbreviation for the state of the address.",
                                "type": "string"
                              },
                              "zip": {
                                "description": "The ZIP code of the address.",
                                "type": "string"
                              }
                            },
                            "required": [
                              "line1",
                              "line2",
                              "city",
                              "state",
                              "zip"
                            ],
                            "title": "Address",
                            "type": "object",
                            "x-title-plural": "Addresses"
                          },
                          "date_of_birth": {
                            "description": "The person's date of birth in YYYY-MM-DD format.",
                            "format": "date",
                            "type": "string"
                          },
                          "identification": {
                            "description": "A means of verifying the person's identity.",
                            "properties": {
                              "method": {
                                "description": "A method that can be used to verify the individual's identity.",
                                "enum": [
                                  "social_security_number",
                                  "individual_taxpayer_identification_number",
                                  "passport",
                                  "drivers_license",
                                  "other"
                                ],
                                "type": "string",
                                "x-enum-descriptions": [
                                  "A social security number.",
                                  "An individual taxpayer identification number (ITIN).",
                                  "A passport number.",
                                  "A driver's license number.",
                                  "Another identifying document."
                                ]
                              },
                              "number_last4": {
                                "description": "The last 4 digits of the identification number that can be used to verify the individual's identity.",
                                "type": "string"
                              }
                            },
                            "required": [
                              "method",
                              "number_last4"
                            ],
                            "title": "Identification",
                            "type": "object",
                            "x-title-plural": "Identifications"
                          },
                          "name": {
                            "description": "The person's legal name.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "name",
                          "date_of_birth",
                          "address",
                          "identification"
                        ],
                        "title": "Individual",
                        "type": "object",
                        "x-title-plural": "Individuals"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "name": {
                    "description": "The trust's name.",
                    "type": "string"
                  },
                  "tax_identifier": {
                    "anyOf": [
                      {
                        "description": "The Employer Identification Number (EIN) of the trust itself.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "trustees": {
                    "description": "The trustees of the trust.",
                    "items": {
                      "properties": {
                        "individual": {
                          "anyOf": [
                            {
                              "description": "The individual trustee of the trust. Will be present if the trustee's `structure` is equal to `individual`.",
                              "properties": {
                                "address": {
                                  "description": "The person's address.",
                                  "example": {
                                    "city": "New York",
                                    "line1": "33 Liberty Street",
                                    "line2": null,
                                    "state": "NY",
                                    "zip": "10045"
                                  },
                                  "properties": {
                                    "city": {
                                      "description": "The city of the address.",
                                      "type": "string"
                                    },
                                    "line1": {
                                      "description": "The first line of the address.",
                                      "type": "string"
                                    },
                                    "line2": {
                                      "anyOf": [
                                        {
                                          "description": "The second line of the address.",
                                          "type": "string"
                                        },
                                        {
                                          "type": "null"
                                        }
                                      ]
                                    },
                                    "state": {
                                      "description": "The two-letter United States Postal Service (USPS) abbreviation for the state of the address.",
                                      "type": "string"
                                    },
                                    "zip": {
                                      "description": "The ZIP code of the address.",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "line1",
                                    "line2",
                                    "city",
                                    "state",
                                    "zip"
                                  ],
                                  "title": "Address",
                                  "type": "object",
                                  "x-title-plural": "Addresses"
                                },
                                "date_of_birth": {
                                  "description": "The person's date of birth in YYYY-MM-DD format.",
                                  "format": "date",
                                  "type": "string"
                                },
                                "identification": {
                                  "description": "A means of verifying the person's identity.",
                                  "properties": {
                                    "method": {
                                      "description": "A method that can be used to verify the individual's identity.",
                                      "enum": [
                                        "social_security_number",
                                        "individual_taxpayer_identification_number",
                                        "passport",
                                        "drivers_license",
                                        "other"
                                      ],
                                      "type": "string",
                                      "x-enum-descriptions": [
                                        "A social security number.",
                                        "An individual taxpayer identification number (ITIN).",
                                        "A passport number.",
                                        "A driver's license number.",
                                        "Another identifying document."
                                      ]
                                    },
                                    "number_last4": {
                                      "description": "The last 4 digits of the identification number that can be used to verify the individual's identity.",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "method",
                                    "number_last4"
                                  ],
                                  "title": "Identification",
                                  "type": "object",
                                  "x-title-plural": "Identifications"
                                },
                                "name": {
                                  "description": "The person's legal name.",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "name",
                                "date_of_birth",
                                "address",
                                "identification"
                              ],
                              "title": "Individual",
                              "type": "object",
                              "x-title-plural": "Individuals"
                            },
                            {
                              "type": "null"
                            }
                          ]
                        },
                        "structure": {
                          "description": "The structure of the trustee. Will always be equal to `individual`.",
                          "enum": [
                            "individual"
                          ],
                          "type": "string",
                          "x-enum-descriptions": [
                            "The trustee is an individual."
                          ]
                        }
                      },
                      "required": [
                        "structure",
                        "individual"
                      ],
                      "title": "Trustees Element",
                      "type": "object",
                      "x-title-plural": "Trustees Elements"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "name",
                  "category",
                  "address",
                  "formation_state",
                  "tax_identifier",
                  "trustees",
                  "grantor",
                  "formation_document_file_id"
                ],
                "title": "Trust",
                "type": "object",
                "x-title-plural": "Trusts"
              },
              {
                "type": "null"
              }
            ]
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `entity`.",
            "enum": [
              "entity"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "structure",
          "corporation",
          "natural_person",
          "joint",
          "government_authority",
          "trust",
          "type",
          "idempotency_key",
          "third_party_verification",
          "description",
          "status",
          "details_confirmed_at",
          "created_at",
          "supplemental_documents"
        ],
        "title": "Entity",
        "type": "object",
        "x-tag": "Entities",
        "x-title-plural": "Entities"
      },
      "entity_list": {
        "description": "A list of Entity objects.",
        "example": {
          "data": [
            {
              "corporation": {
                "address": {
                  "city": "New York",
                  "line1": "33 Liberty Street",
                  "line2": null,
                  "state": "NY",
                  "zip": "10045"
                },
                "beneficial_owners": [
                  {
                    "beneficial_owner_id": "entity_setup_beneficial_owner_submission_vgkyk7dj5eb4sfhdbkx7",
                    "company_title": "CEO",
                    "individual": {
                      "address": {
                        "city": "New York",
                        "line1": "33 Liberty Street",
                        "line2": null,
                        "state": "NY",
                        "zip": "10045"
                      },
                      "date_of_birth": "1970-01-31",
                      "identification": {
                        "country": "US",
                        "method": "social_security_number",
                        "number_last4": "1120"
                      },
                      "name": "Ian Crease"
                    },
                    "prong": "control"
                  }
                ],
                "incorporation_state": "NY",
                "industry_code": null,
                "name": "National Phonograph Company",
                "tax_identifier": "602214076",
                "website": "https://example.com"
              },
              "created_at": "2020-01-31T23:59:59Z",
              "description": null,
              "details_confirmed_at": null,
              "government_authority": null,
              "id": "entity_n8y8tnk2p9339ti393yi",
              "idempotency_key": null,
              "joint": null,
              "natural_person": null,
              "status": "active",
              "structure": "corporation",
              "supplemental_documents": [
                {
                  "created_at": "2020-01-31T23:59:59Z",
                  "entity_id": "entity_n8y8tnk2p9339ti393yi",
                  "file_id": "file_makxrc67oh9l6sg7w9yc",
                  "idempotency_key": null,
                  "type": "entity_supplemental_document"
                }
              ],
              "third_party_verification": null,
              "trust": null,
              "type": "entity"
            }
          ],
          "next_cursor": "v57w5d"
        },
        "properties": {
          "data": {
            "description": "The contents of the list.",
            "items": {
              "$ref": "#/components/schemas/entity"
            },
            "type": "array"
          },
          "next_cursor": {
            "anyOf": [
              {
                "description": "A pointer to a place in the list.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "Entity List",
        "type": "object",
        "x-title-plural": "Entity Lists"
      },
      "entity_supplemental_document": {
        "description": "Supplemental Documents are uploaded files connected to an Entity during onboarding.",
        "example": {
          "created_at": "2020-01-31T23:59:59Z",
          "entity_id": "entity_n8y8tnk2p9339ti393yi",
          "file_id": "file_makxrc67oh9l6sg7w9yc",
          "idempotency_key": null,
          "type": "entity_supplemental_document"
        },
        "properties": {
          "created_at": {
            "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Supplemental Document was created.",
            "format": "date-time",
            "type": "string"
          },
          "entity_id": {
            "description": "The Entity the supplemental document is attached to.",
            "type": "string"
          },
          "file_id": {
            "description": "The File containing the document.",
            "type": "string"
          },
          "idempotency_key": {
            "anyOf": [
              {
                "description": "The idempotency key you chose for this object. This value is unique across Increase and is used to ensure that a request is only processed once. Learn more about [idempotency](https://increase.com/documentation/idempotency-keys).",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `entity_supplemental_document`.",
            "enum": [
              "entity_supplemental_document"
            ],
            "type": "string"
          }
        },
        "required": [
          "entity_id",
          "file_id",
          "created_at",
          "idempotency_key",
          "type"
        ],
        "title": "Supplemental Document",
        "type": "object",
        "x-tag": "Supplemental Documents",
        "x-title-plural": "Supplemental Documents"
      },
      "entity_supplemental_document_list": {
        "description": "A list of Supplemental Document objects.",
        "example": {
          "data": [
            {
              "created_at": "2020-01-31T23:59:59Z",
              "entity_id": "entity_n8y8tnk2p9339ti393yi",
              "file_id": "file_makxrc67oh9l6sg7w9yc",
              "idempotency_key": null,
              "type": "entity_supplemental_document"
            }
          ],
          "next_cursor": "v57w5d"
        },
        "properties": {
          "data": {
            "description": "The contents of the list.",
            "items": {
              "$ref": "#/components/schemas/entity_supplemental_document"
            },
            "type": "array"
          },
          "next_cursor": {
            "anyOf": [
              {
                "description": "A pointer to a place in the list.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "Supplemental Document List",
        "type": "object",
        "x-title-plural": "Supplemental Document Lists"
      },
      "error": {
        "anyOf": [
          {
            "properties": {
              "detail": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "status": {
                "enum": [
                  404
                ],
                "type": "integer"
              },
              "title": {
                "type": "string"
              },
              "type": {
                "enum": [
                  "api_method_not_found_error"
                ],
                "type": "string"
              }
            },
            "required": [
              "type",
              "title",
              "detail",
              "status"
            ],
            "type": "object"
          },
          {
            "properties": {
              "detail": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "status": {
                "enum": [
                  403
                ],
                "type": "integer"
              },
              "title": {
                "type": "string"
              },
              "type": {
                "enum": [
                  "environment_mismatch_error"
                ],
                "type": "string"
              }
            },
            "required": [
              "type",
              "title",
              "detail",
              "status"
            ],
            "type": "object"
          },
          {
            "properties": {
              "detail": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "resource_id": {
                "description": "",
                "type": "string"
              },
              "status": {
                "enum": [
                  409
                ],
                "type": "integer"
              },
              "title": {
                "type": "string"
              },
              "type": {
                "enum": [
                  "idempotency_key_already_used_error"
                ],
                "type": "string"
              }
            },
            "required": [
              "type",
              "title",
              "detail",
              "status",
              "resource_id"
            ],
            "type": "object"
          },
          {
            "properties": {
              "detail": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "status": {
                "enum": [
                  403
                ],
                "type": "integer"
              },
              "title": {
                "type": "string"
              },
              "type": {
                "enum": [
                  "insufficient_permissions_error"
                ],
                "type": "string"
              }
            },
            "required": [
              "type",
              "title",
              "detail",
              "status"
            ],
            "type": "object"
          },
          {
            "properties": {
              "detail": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "status": {
                "enum": [
                  500
                ],
                "type": "integer"
              },
              "title": {
                "type": "string"
              },
              "type": {
                "enum": [
                  "internal_server_error"
                ],
                "type": "string"
              }
            },
            "required": [
              "type",
              "title",
              "detail",
              "status"
            ],
            "type": "object"
          },
          {
            "properties": {
              "detail": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "reason": {
                "description": "",
                "enum": [
                  "deleted_credential",
                  "expired_credential",
                  "no_credential",
                  "no_header",
                  "wrong_environment"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "deleted_credential",
                  "expired_credential",
                  "no_credential",
                  "no_header",
                  "wrong_environment"
                ]
              },
              "status": {
                "enum": [
                  401
                ],
                "type": "integer"
              },
              "title": {
                "type": "string"
              },
              "type": {
                "enum": [
                  "invalid_api_key_error"
                ],
                "type": "string"
              }
            },
            "required": [
              "type",
              "title",
              "detail",
              "status",
              "reason"
            ],
            "type": "object"
          },
          {
            "properties": {
              "detail": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "status": {
                "enum": [
                  409
                ],
                "type": "integer"
              },
              "title": {
                "type": "string"
              },
              "type": {
                "enum": [
                  "invalid_operation_error"
                ],
                "type": "string"
              }
            },
            "required": [
              "type",
              "title",
              "detail",
              "status"
            ],
            "type": "object"
          },
          {
            "properties": {
              "detail": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "errors": {
                "description": "All errors related to parsing the request parameters.",
                "items": {
                  "properties": {},
                  "title": "Errors Element",
                  "type": "object",
                  "x-title-plural": "Errors Elements"
                },
                "type": "array"
              },
              "status": {
                "enum": [
                  400
                ],
                "type": "integer"
              },
              "title": {
                "type": "string"
              },
              "type": {
                "enum": [
                  "invalid_parameters_error"
                ],
                "type": "string"
              }
            },
            "required": [
              "type",
              "title",
              "detail",
              "status",
              "errors"
            ],
            "type": "object"
          },
          {
            "properties": {
              "detail": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "status": {
                "enum": [
                  400
                ],
                "type": "integer"
              },
              "title": {
                "type": "string"
              },
              "type": {
                "enum": [
                  "malformed_request_error"
                ],
                "type": "string"
              }
            },
            "required": [
              "type",
              "title",
              "detail",
              "status"
            ],
            "type": "object"
          },
          {
            "properties": {
              "detail": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "status": {
                "enum": [
                  404
                ],
                "type": "integer"
              },
              "title": {
                "type": "string"
              },
              "type": {
                "enum": [
                  "object_not_found_error"
                ],
                "type": "string"
              }
            },
            "required": [
              "type",
              "title",
              "detail",
              "status"
            ],
            "type": "object"
          },
          {
            "properties": {
              "detail": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "status": {
                "enum": [
                  403
                ],
                "type": "integer"
              },
              "title": {
                "type": "string"
              },
              "type": {
                "enum": [
                  "private_feature_error"
                ],
                "type": "string"
              }
            },
            "required": [
              "type",
              "title",
              "detail",
              "status"
            ],
            "type": "object"
          },
          {
            "properties": {
              "detail": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "retry_after": {
                "anyOf": [
                  {
                    "description": "",
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "status": {
                "enum": [
                  429
                ],
                "type": "integer"
              },
              "title": {
                "type": "string"
              },
              "type": {
                "enum": [
                  "rate_limited_error"
                ],
                "type": "string"
              }
            },
            "required": [
              "type",
              "title",
              "detail",
              "status"
            ],
            "type": "object"
          }
        ]
      },
      "event": {
        "description": "Events are records of things that happened to objects at Increase. Events are accessible via the List Events endpoint and can be delivered to your application via webhooks. For more information, see our [webhooks guide](https://increase.com/documentation/webhooks).",
        "example": {
          "associated_object_id": "account_in71c4amph0vgo2qllky",
          "associated_object_type": "account",
          "category": "account.created",
          "created_at": "2020-01-31T23:59:59Z",
          "id": "event_001dzz0r20rzr4zrhrr1364hy80",
          "type": "event"
        },
        "properties": {
          "associated_object_id": {
            "description": "The identifier of the object that generated this Event.",
            "type": "string"
          },
          "associated_object_type": {
            "description": "The type of the object that generated this Event.",
            "type": "string"
          },
          "category": {
            "description": "The category of the Event. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.",
            "enum": [
              "account.created",
              "account.updated",
              "account_number.created",
              "account_number.updated",
              "account_statement.created",
              "account_transfer.created",
              "account_transfer.updated",
              "ach_prenotification.created",
              "ach_prenotification.updated",
              "ach_transfer.created",
              "ach_transfer.updated",
              "bookkeeping_account.created",
              "bookkeeping_account.updated",
              "bookkeeping_entry_set.updated",
              "card.created",
              "card.updated",
              "card_payment.created",
              "card_payment.updated",
              "card_profile.created",
              "card_profile.updated",
              "card_dispute.created",
              "card_dispute.updated",
              "check_deposit.created",
              "check_deposit.updated",
              "check_transfer.created",
              "check_transfer.updated",
              "declined_transaction.created",
              "digital_card_profile.created",
              "digital_card_profile.updated",
              "digital_wallet_token.created",
              "digital_wallet_token.updated",
              "document.created",
              "entity.created",
              "entity.updated",
              "event_subscription.created",
              "event_subscription.updated",
              "export.created",
              "export.updated",
              "external_account.created",
              "external_account.updated",
              "file.created",
              "group.updated",
              "group.heartbeat",
              "inbound_ach_transfer.created",
              "inbound_ach_transfer.updated",
              "inbound_ach_transfer_return.created",
              "inbound_ach_transfer_return.updated",
              "inbound_check_deposit.created",
              "inbound_check_deposit.updated",
              "inbound_mail_item.created",
              "inbound_mail_item.updated",
              "inbound_real_time_payments_transfer.created",
              "inbound_real_time_payments_transfer.updated",
              "inbound_wire_drawdown_request.created",
              "inbound_wire_transfer.created",
              "inbound_wire_transfer.updated",
              "intrafi_account_enrollment.created",
              "intrafi_account_enrollment.updated",
              "intrafi_exclusion.created",
              "intrafi_exclusion.updated",
              "lockbox.created",
              "lockbox.updated",
              "oauth_connection.created",
              "oauth_connection.deactivated",
              "pending_transaction.created",
              "pending_transaction.updated",
              "physical_card.created",
              "physical_card.updated",
              "physical_card_profile.created",
              "physical_card_profile.updated",
              "proof_of_authorization_request.created",
              "proof_of_authorization_request.updated",
              "proof_of_authorization_request_submission.created",
              "proof_of_authorization_request_submission.updated",
              "real_time_decision.card_authorization_requested",
              "real_time_decision.digital_wallet_token_requested",
              "real_time_decision.digital_wallet_authentication_requested",
              "real_time_decision.card_authentication_requested",
              "real_time_decision.card_authentication_challenge_requested",
              "real_time_payments_transfer.created",
              "real_time_payments_transfer.updated",
              "real_time_payments_request_for_payment.created",
              "real_time_payments_request_for_payment.updated",
              "transaction.created",
              "wire_drawdown_request.created",
              "wire_drawdown_request.updated",
              "wire_transfer.created",
              "wire_transfer.updated"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "Occurs whenever an Account is created.",
              "Occurs whenever an Account is updated.",
              "Occurs whenever an Account Number is created.",
              "Occurs whenever an Account Number is updated.",
              "Occurs whenever an Account Statement is created.",
              "Occurs whenever an Account Transfer is created.",
              "Occurs whenever an Account Transfer is updated.",
              "Occurs whenever an ACH Prenotification is created.",
              "Occurs whenever an ACH Prenotification is updated.",
              "Occurs whenever an ACH Transfer is created.",
              "Occurs whenever an ACH Transfer is updated.",
              "Occurs whenever a Bookkeeping Account is created.",
              "Occurs whenever a Bookkeeping Account is updated.",
              "Occurs whenever a Bookkeeping Entry Set is created.",
              "Occurs whenever a Card is created.",
              "Occurs whenever a Card is updated.",
              "Occurs whenever a Card Payment is created.",
              "Occurs whenever a Card Payment is updated.",
              "Occurs whenever a Card Profile is created.",
              "Occurs whenever a Card Profile is updated.",
              "Occurs whenever a Card Dispute is created.",
              "Occurs whenever a Card Dispute is updated.",
              "Occurs whenever a Check Deposit is created.",
              "Occurs whenever a Check Deposit is updated.",
              "Occurs whenever a Check Transfer is created.",
              "Occurs whenever a Check Transfer is updated.",
              "Occurs whenever a Declined Transaction is created.",
              "Occurs whenever a Digital Card Profile is created.",
              "Occurs whenever a Digital Card Profile is updated.",
              "Occurs whenever a Digital Wallet Token is created.",
              "Occurs whenever a Digital Wallet Token is updated.",
              "Occurs whenever a Document is created.",
              "Occurs whenever an Entity is created.",
              "Occurs whenever an Entity is updated.",
              "Occurs whenever an Event Subscription is created.",
              "Occurs whenever an Event Subscription is updated.",
              "Occurs whenever an Export is created.",
              "Occurs whenever an Export is updated.",
              "Occurs whenever an External Account is created.",
              "Occurs whenever an External Account is updated.",
              "Occurs whenever a File is created.",
              "Occurs whenever a Group is updated.",
              "Increase may send webhooks with this category to see if a webhook endpoint is working properly.",
              "Occurs whenever an Inbound ACH Transfer is created.",
              "Occurs whenever an Inbound ACH Transfer is updated.",
              "Occurs whenever an Inbound ACH Transfer Return is created.",
              "Occurs whenever an Inbound ACH Transfer Return is updated.",
              "Occurs whenever an Inbound Check Deposit is created.",
              "Occurs whenever an Inbound Check Deposit is updated.",
              "Occurs whenever an Inbound Mail Item is created.",
              "Occurs whenever an Inbound Mail Item is updated.",
              "Occurs whenever an Inbound Real-Time Payments Transfer is created.",
              "Occurs whenever an Inbound Real-Time Payments Transfer is updated.",
              "Occurs whenever an Inbound Wire Drawdown Request is created.",
              "Occurs whenever an Inbound Wire Transfer is created.",
              "Occurs whenever an Inbound Wire Transfer is updated.",
              "Occurs whenever an IntraFi Account Enrollment is created.",
              "Occurs whenever an IntraFi Account Enrollment is updated.",
              "Occurs whenever an IntraFi Exclusion is created.",
              "Occurs whenever an IntraFi Exclusion is updated.",
              "Occurs whenever a Lockbox is created.",
              "Occurs whenever a Lockbox is updated.",
              "Occurs whenever an OAuth Connection is created.",
              "Occurs whenever an OAuth Connection is deactivated.",
              "Occurs whenever a Pending Transaction is created.",
              "Occurs whenever a Pending Transaction is updated.",
              "Occurs whenever a Physical Card is created.",
              "Occurs whenever a Physical Card is updated.",
              "Occurs whenever a Physical Card Profile is created.",
              "Occurs whenever a Physical Card Profile is updated.",
              "Occurs whenever a Proof of Authorization Request is created.",
              "Occurs whenever a Proof of Authorization Request is updated.",
              "Occurs whenever a Proof of Authorization Request Submission is created.",
              "Occurs whenever a Proof of Authorization Request Submission is updated.",
              "Occurs whenever a Real-Time Decision is created in response to a card authorization.",
              "Occurs whenever a Real-Time Decision is created in response to a digital wallet provisioning attempt.",
              "Occurs whenever a Real-Time Decision is created in response to a digital wallet requiring two-factor authentication.",
              "Occurs whenever a Real-Time Decision is created in response to 3DS authentication.",
              "Occurs whenever a Real-Time Decision is created in response to 3DS authentication challenges.",
              "Occurs whenever a Real-Time Payments Transfer is created.",
              "Occurs whenever a Real-Time Payments Transfer is updated.",
              "Occurs whenever a Real-Time Payments Request for Payment is created.",
              "Occurs whenever a Real-Time Payments Request for Payment is updated.",
              "Occurs whenever a Transaction is created.",
              "Occurs whenever a Wire Drawdown Request is created.",
              "Occurs whenever a Wire Drawdown Request is updated.",
              "Occurs whenever a Wire Transfer is created.",
              "Occurs whenever a Wire Transfer is updated."
            ]
          },
          "created_at": {
            "description": "The time the Event was created.",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "The Event identifier.",
            "type": "string"
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `event`.",
            "enum": [
              "event"
            ],
            "type": "string"
          }
        },
        "required": [
          "associated_object_id",
          "associated_object_type",
          "category",
          "created_at",
          "id",
          "type"
        ],
        "title": "Event",
        "type": "object",
        "x-tag": "Events",
        "x-title-plural": "Events"
      },
      "event_list": {
        "description": "A list of Event objects.",
        "example": {
          "data": [
            {
              "associated_object_id": "account_in71c4amph0vgo2qllky",
              "associated_object_type": "account",
              "category": "account.created",
              "created_at": "2020-01-31T23:59:59Z",
              "id": "event_001dzz0r20rzr4zrhrr1364hy80",
              "type": "event"
            }
          ],
          "next_cursor": "v57w5d"
        },
        "properties": {
          "data": {
            "description": "The contents of the list.",
            "items": {
              "$ref": "#/components/schemas/event"
            },
            "type": "array"
          },
          "next_cursor": {
            "anyOf": [
              {
                "description": "A pointer to a place in the list.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "Event List",
        "type": "object",
        "x-title-plural": "Event Lists"
      },
      "event_subscription": {
        "description": "Webhooks are event notifications we send to you by HTTPS POST requests. Event Subscriptions are how you configure your application to listen for them. You can create an Event Subscription through your [developer dashboard](https://dashboard.increase.com/developers/webhooks) or the API. For more information, see our [webhooks guide](https://increase.com/documentation/webhooks).",
        "example": {
          "created_at": "2020-01-31T23:59:59Z",
          "id": "event_subscription_001dzz0r20rcdxgb013zqb8m04g",
          "idempotency_key": null,
          "oauth_connection_id": null,
          "selected_event_category": null,
          "status": "active",
          "type": "event_subscription",
          "url": "https://website.com/webhooks"
        },
        "properties": {
          "created_at": {
            "description": "The time the event subscription was created.",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "The event subscription identifier.",
            "type": "string"
          },
          "idempotency_key": {
            "anyOf": [
              {
                "description": "The idempotency key you chose for this object. This value is unique across Increase and is used to ensure that a request is only processed once. Learn more about [idempotency](https://increase.com/documentation/idempotency-keys).",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "oauth_connection_id": {
            "anyOf": [
              {
                "description": "If specified, this subscription will only receive webhooks for Events associated with this OAuth Connection.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "selected_event_category": {
            "anyOf": [
              {
                "description": "If specified, this subscription will only receive webhooks for Events with the specified `category`.",
                "enum": [
                  "account.created",
                  "account.updated",
                  "account_number.created",
                  "account_number.updated",
                  "account_statement.created",
                  "account_transfer.created",
                  "account_transfer.updated",
                  "ach_prenotification.created",
                  "ach_prenotification.updated",
                  "ach_transfer.created",
                  "ach_transfer.updated",
                  "bookkeeping_account.created",
                  "bookkeeping_account.updated",
                  "bookkeeping_entry_set.updated",
                  "card.created",
                  "card.updated",
                  "card_payment.created",
                  "card_payment.updated",
                  "card_profile.created",
                  "card_profile.updated",
                  "card_dispute.created",
                  "card_dispute.updated",
                  "check_deposit.created",
                  "check_deposit.updated",
                  "check_transfer.created",
                  "check_transfer.updated",
                  "declined_transaction.created",
                  "digital_card_profile.created",
                  "digital_card_profile.updated",
                  "digital_wallet_token.created",
                  "digital_wallet_token.updated",
                  "document.created",
                  "entity.created",
                  "entity.updated",
                  "event_subscription.created",
                  "event_subscription.updated",
                  "export.created",
                  "export.updated",
                  "external_account.created",
                  "external_account.updated",
                  "file.created",
                  "group.updated",
                  "group.heartbeat",
                  "inbound_ach_transfer.created",
                  "inbound_ach_transfer.updated",
                  "inbound_ach_transfer_return.created",
                  "inbound_ach_transfer_return.updated",
                  "inbound_check_deposit.created",
                  "inbound_check_deposit.updated",
                  "inbound_mail_item.created",
                  "inbound_mail_item.updated",
                  "inbound_real_time_payments_transfer.created",
                  "inbound_real_time_payments_transfer.updated",
                  "inbound_wire_drawdown_request.created",
                  "inbound_wire_transfer.created",
                  "inbound_wire_transfer.updated",
                  "intrafi_account_enrollment.created",
                  "intrafi_account_enrollment.updated",
                  "intrafi_exclusion.created",
                  "intrafi_exclusion.updated",
                  "lockbox.created",
                  "lockbox.updated",
                  "oauth_connection.created",
                  "oauth_connection.deactivated",
                  "pending_transaction.created",
                  "pending_transaction.updated",
                  "physical_card.created",
                  "physical_card.updated",
                  "physical_card_profile.created",
                  "physical_card_profile.updated",
                  "proof_of_authorization_request.created",
                  "proof_of_authorization_request.updated",
                  "proof_of_authorization_request_submission.created",
                  "proof_of_authorization_request_submission.updated",
                  "real_time_decision.card_authorization_requested",
                  "real_time_decision.digital_wallet_token_requested",
                  "real_time_decision.digital_wallet_authentication_requested",
                  "real_time_decision.card_authentication_requested",
                  "real_time_decision.card_authentication_challenge_requested",
                  "real_time_payments_transfer.created",
                  "real_time_payments_transfer.updated",
                  "real_time_payments_request_for_payment.created",
                  "real_time_payments_request_for_payment.updated",
                  "transaction.created",
                  "wire_drawdown_request.created",
                  "wire_drawdown_request.updated",
                  "wire_transfer.created",
                  "wire_transfer.updated"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "Occurs whenever an Account is created.",
                  "Occurs whenever an Account is updated.",
                  "Occurs whenever an Account Number is created.",
                  "Occurs whenever an Account Number is updated.",
                  "Occurs whenever an Account Statement is created.",
                  "Occurs whenever an Account Transfer is created.",
                  "Occurs whenever an Account Transfer is updated.",
                  "Occurs whenever an ACH Prenotification is created.",
                  "Occurs whenever an ACH Prenotification is updated.",
                  "Occurs whenever an ACH Transfer is created.",
                  "Occurs whenever an ACH Transfer is updated.",
                  "Occurs whenever a Bookkeeping Account is created.",
                  "Occurs whenever a Bookkeeping Account is updated.",
                  "Occurs whenever a Bookkeeping Entry Set is created.",
                  "Occurs whenever a Card is created.",
                  "Occurs whenever a Card is updated.",
                  "Occurs whenever a Card Payment is created.",
                  "Occurs whenever a Card Payment is updated.",
                  "Occurs whenever a Card Profile is created.",
                  "Occurs whenever a Card Profile is updated.",
                  "Occurs whenever a Card Dispute is created.",
                  "Occurs whenever a Card Dispute is updated.",
                  "Occurs whenever a Check Deposit is created.",
                  "Occurs whenever a Check Deposit is updated.",
                  "Occurs whenever a Check Transfer is created.",
                  "Occurs whenever a Check Transfer is updated.",
                  "Occurs whenever a Declined Transaction is created.",
                  "Occurs whenever a Digital Card Profile is created.",
                  "Occurs whenever a Digital Card Profile is updated.",
                  "Occurs whenever a Digital Wallet Token is created.",
                  "Occurs whenever a Digital Wallet Token is updated.",
                  "Occurs whenever a Document is created.",
                  "Occurs whenever an Entity is created.",
                  "Occurs whenever an Entity is updated.",
                  "Occurs whenever an Event Subscription is created.",
                  "Occurs whenever an Event Subscription is updated.",
                  "Occurs whenever an Export is created.",
                  "Occurs whenever an Export is updated.",
                  "Occurs whenever an External Account is created.",
                  "Occurs whenever an External Account is updated.",
                  "Occurs whenever a File is created.",
                  "Occurs whenever a Group is updated.",
                  "Increase may send webhooks with this category to see if a webhook endpoint is working properly.",
                  "Occurs whenever an Inbound ACH Transfer is created.",
                  "Occurs whenever an Inbound ACH Transfer is updated.",
                  "Occurs whenever an Inbound ACH Transfer Return is created.",
                  "Occurs whenever an Inbound ACH Transfer Return is updated.",
                  "Occurs whenever an Inbound Check Deposit is created.",
                  "Occurs whenever an Inbound Check Deposit is updated.",
                  "Occurs whenever an Inbound Mail Item is created.",
                  "Occurs whenever an Inbound Mail Item is updated.",
                  "Occurs whenever an Inbound Real-Time Payments Transfer is created.",
                  "Occurs whenever an Inbound Real-Time Payments Transfer is updated.",
                  "Occurs whenever an Inbound Wire Drawdown Request is created.",
                  "Occurs whenever an Inbound Wire Transfer is created.",
                  "Occurs whenever an Inbound Wire Transfer is updated.",
                  "Occurs whenever an IntraFi Account Enrollment is created.",
                  "Occurs whenever an IntraFi Account Enrollment is updated.",
                  "Occurs whenever an IntraFi Exclusion is created.",
                  "Occurs whenever an IntraFi Exclusion is updated.",
                  "Occurs whenever a Lockbox is created.",
                  "Occurs whenever a Lockbox is updated.",
                  "Occurs whenever an OAuth Connection is created.",
                  "Occurs whenever an OAuth Connection is deactivated.",
                  "Occurs whenever a Pending Transaction is created.",
                  "Occurs whenever a Pending Transaction is updated.",
                  "Occurs whenever a Physical Card is created.",
                  "Occurs whenever a Physical Card is updated.",
                  "Occurs whenever a Physical Card Profile is created.",
                  "Occurs whenever a Physical Card Profile is updated.",
                  "Occurs whenever a Proof of Authorization Request is created.",
                  "Occurs whenever a Proof of Authorization Request is updated.",
                  "Occurs whenever a Proof of Authorization Request Submission is created.",
                  "Occurs whenever a Proof of Authorization Request Submission is updated.",
                  "Occurs whenever a Real-Time Decision is created in response to a card authorization.",
                  "Occurs whenever a Real-Time Decision is created in response to a digital wallet provisioning attempt.",
                  "Occurs whenever a Real-Time Decision is created in response to a digital wallet requiring two-factor authentication.",
                  "Occurs whenever a Real-Time Decision is created in response to 3DS authentication.",
                  "Occurs whenever a Real-Time Decision is created in response to 3DS authentication challenges.",
                  "Occurs whenever a Real-Time Payments Transfer is created.",
                  "Occurs whenever a Real-Time Payments Transfer is updated.",
                  "Occurs whenever a Real-Time Payments Request for Payment is created.",
                  "Occurs whenever a Real-Time Payments Request for Payment is updated.",
                  "Occurs whenever a Transaction is created.",
                  "Occurs whenever a Wire Drawdown Request is created.",
                  "Occurs whenever a Wire Drawdown Request is updated.",
                  "Occurs whenever a Wire Transfer is created.",
                  "Occurs whenever a Wire Transfer is updated."
                ]
              },
              {
                "type": "null"
              }
            ]
          },
          "status": {
            "description": "This indicates if we'll send notifications to this subscription.",
            "enum": [
              "active",
              "disabled",
              "deleted",
              "requires_attention"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The subscription is active and Events will be delivered normally.",
              "The subscription is temporarily disabled and Events will not be delivered.",
              "The subscription is permanently disabled and Events will not be delivered.",
              "The subscription is temporarily disabled due to delivery errors and Events will not be delivered."
            ]
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `event_subscription`.",
            "enum": [
              "event_subscription"
            ],
            "type": "string"
          },
          "url": {
            "description": "The webhook url where we'll send notifications.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "status",
          "selected_event_category",
          "oauth_connection_id",
          "url",
          "idempotency_key",
          "type"
        ],
        "title": "Event Subscription",
        "type": "object",
        "x-tag": "Event Subscriptions",
        "x-title-plural": "Event Subscriptions"
      },
      "event_subscription_list": {
        "description": "A list of Event Subscription objects.",
        "example": {
          "data": [
            {
              "created_at": "2020-01-31T23:59:59Z",
              "id": "event_subscription_001dzz0r20rcdxgb013zqb8m04g",
              "idempotency_key": null,
              "oauth_connection_id": null,
              "selected_event_category": null,
              "status": "active",
              "type": "event_subscription",
              "url": "https://website.com/webhooks"
            }
          ],
          "next_cursor": "v57w5d"
        },
        "properties": {
          "data": {
            "description": "The contents of the list.",
            "items": {
              "$ref": "#/components/schemas/event_subscription"
            },
            "type": "array"
          },
          "next_cursor": {
            "anyOf": [
              {
                "description": "A pointer to a place in the list.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "Event Subscription List",
        "type": "object",
        "x-title-plural": "Event Subscription Lists"
      },
      "export": {
        "description": "Exports are batch summaries of your Increase data. You can make them from the API or dashboard. Since they can take a while, they are generated asynchronously. We send a webhook when they are ready. For more information, please read our [Exports documentation](https://increase.com/documentation/exports).",
        "example": {
          "category": "transaction_csv",
          "created_at": "2020-01-31T23:59:59Z",
          "file_download_url": "https://example.com/file",
          "file_id": "file_makxrc67oh9l6sg7w9yc",
          "id": "export_8s4m48qz3bclzje0zwh9",
          "idempotency_key": null,
          "status": "complete",
          "type": "export"
        },
        "properties": {
          "category": {
            "description": "The category of the Export. We may add additional possible values for this enum over time; your application should be able to handle that gracefully.",
            "enum": [
              "account_statement_ofx",
              "transaction_csv",
              "balance_csv",
              "bookkeeping_account_balance_csv",
              "entity_csv",
              "vendor_csv",
              "dashboard_table_csv"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "Export an Open Financial Exchange (OFX) file of transactions and balances for a given time range and Account.",
              "Export a CSV of all transactions for a given time range.",
              "Export a CSV of account balances for the dates in a given range.",
              "Export a CSV of bookkeeping account balances for the dates in a given range.",
              "Export a CSV of entities with a given status.",
              "Export a CSV of vendors added to the third-party risk management dashboard.",
              "Certain dashboard tables are available as CSV exports. This export cannot be created via the API."
            ]
          },
          "created_at": {
            "description": "The time the Export was created.",
            "format": "date-time",
            "type": "string"
          },
          "file_download_url": {
            "anyOf": [
              {
                "description": "A URL at which the Export's file can be downloaded. This will be present when the Export's status transitions to `complete`.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "file_id": {
            "anyOf": [
              {
                "description": "The File containing the contents of the Export. This will be present when the Export's status transitions to `complete`.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "id": {
            "description": "The Export identifier.",
            "type": "string"
          },
          "idempotency_key": {
            "anyOf": [
              {
                "description": "The idempotency key you chose for this object. This value is unique across Increase and is used to ensure that a request is only processed once. Learn more about [idempotency](https://increase.com/documentation/idempotency-keys).",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "status": {
            "description": "The status of the Export.",
            "enum": [
              "pending",
              "complete",
              "failed"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "Increase is generating the export.",
              "The export has been successfully generated.",
              "The export failed to generate. Increase will reach out to you to resolve the issue."
            ]
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `export`.",
            "enum": [
              "export"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "category",
          "status",
          "file_id",
          "file_download_url",
          "idempotency_key",
          "type"
        ],
        "title": "Export",
        "type": "object",
        "x-tag": "Exports",
        "x-title-plural": "Exports"
      },
      "export_list": {
        "description": "A list of Export objects.",
        "example": {
          "data": [
            {
              "category": "transaction_csv",
              "created_at": "2020-01-31T23:59:59Z",
              "file_download_url": "https://example.com/file",
              "file_id": "file_makxrc67oh9l6sg7w9yc",
              "id": "export_8s4m48qz3bclzje0zwh9",
              "idempotency_key": null,
              "status": "complete",
              "type": "export"
            }
          ],
          "next_cursor": "v57w5d"
        },
        "properties": {
          "data": {
            "description": "The contents of the list.",
            "items": {
              "$ref": "#/components/schemas/export"
            },
            "type": "array"
          },
          "next_cursor": {
            "anyOf": [
              {
                "description": "A pointer to a place in the list.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "Export List",
        "type": "object",
        "x-title-plural": "Export Lists"
      },
      "external_account": {
        "description": "External Accounts represent accounts at financial institutions other than Increase. You can use this API to store their details for reuse.",
        "example": {
          "account_holder": "business",
          "account_number": "987654321",
          "created_at": "2020-01-31T23:59:59Z",
          "description": "Landlord",
          "funding": "checking",
          "id": "external_account_ukk55lr923a3ac0pp7iv",
          "idempotency_key": null,
          "routing_number": "101050001",
          "status": "active",
          "type": "external_account",
          "verification_status": "verified"
        },
        "properties": {
          "account_holder": {
            "description": "The type of entity that owns the External Account.",
            "enum": [
              "business",
              "individual",
              "unknown"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The External Account is owned by a business.",
              "The External Account is owned by an individual.",
              "It's unknown what kind of entity owns the External Account."
            ]
          },
          "account_number": {
            "description": "The destination account number.",
            "type": "string"
          },
          "created_at": {
            "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the External Account was created.",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "description": "The External Account's description for display purposes.",
            "type": "string"
          },
          "funding": {
            "description": "The type of the account to which the transfer will be sent.",
            "enum": [
              "checking",
              "savings",
              "other"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "A checking account.",
              "A savings account.",
              "A different type of account."
            ]
          },
          "id": {
            "description": "The External Account's identifier.",
            "type": "string"
          },
          "idempotency_key": {
            "anyOf": [
              {
                "description": "The idempotency key you chose for this object. This value is unique across Increase and is used to ensure that a request is only processed once. Learn more about [idempotency](https://increase.com/documentation/idempotency-keys).",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "routing_number": {
            "description": "The American Bankers' Association (ABA) Routing Transit Number (RTN).",
            "type": "string"
          },
          "status": {
            "description": "The External Account's status.",
            "enum": [
              "active",
              "archived"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The External Account is active.",
              "The External Account is archived and won't appear in the dashboard."
            ]
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `external_account`.",
            "enum": [
              "external_account"
            ],
            "type": "string"
          },
          "verification_status": {
            "description": "If you have verified ownership of the External Account.",
            "enum": [
              "unverified",
              "pending",
              "verified"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The External Account has not been verified.",
              "The External Account is in the process of being verified.",
              "The External Account is verified."
            ]
          }
        },
        "required": [
          "id",
          "created_at",
          "description",
          "status",
          "routing_number",
          "account_number",
          "funding",
          "account_holder",
          "verification_status",
          "idempotency_key",
          "type"
        ],
        "title": "External Account",
        "type": "object",
        "x-tag": "External Accounts",
        "x-title-plural": "External Accounts"
      },
      "external_account_list": {
        "description": "A list of External Account objects.",
        "example": {
          "data": [
            {
              "account_holder": "business",
              "account_number": "987654321",
              "created_at": "2020-01-31T23:59:59Z",
              "description": "Landlord",
              "funding": "checking",
              "id": "external_account_ukk55lr923a3ac0pp7iv",
              "idempotency_key": null,
              "routing_number": "101050001",
              "status": "active",
              "type": "external_account",
              "verification_status": "verified"
            }
          ],
          "next_cursor": "v57w5d"
        },
        "properties": {
          "data": {
            "description": "The contents of the list.",
            "items": {
              "$ref": "#/components/schemas/external_account"
            },
            "type": "array"
          },
          "next_cursor": {
            "anyOf": [
              {
                "description": "A pointer to a place in the list.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "External Account List",
        "type": "object",
        "x-title-plural": "External Account Lists"
      },
      "file": {
        "description": "Files are objects that represent a file hosted on Increase's servers. The file may have been uploaded by you (for example, when uploading a check image) or it may have been created by Increase (for example, an autogenerated statement PDF). If you need to download a File, create a File Link.",
        "example": {
          "created_at": "2020-01-31T23:59:59Z",
          "description": "2022-05 statement for checking account",
          "direction": "from_increase",
          "filename": "statement.pdf",
          "id": "file_makxrc67oh9l6sg7w9yc",
          "idempotency_key": null,
          "mime_type": "application/pdf",
          "purpose": "increase_statement",
          "type": "file"
        },
        "properties": {
          "created_at": {
            "description": "The time the File was created.",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "anyOf": [
              {
                "description": "A description of the File.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "direction": {
            "description": "Whether the File was generated by Increase or by you and sent to Increase.",
            "enum": [
              "to_increase",
              "from_increase"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "This File was sent by you to Increase.",
              "This File was generated by Increase."
            ]
          },
          "filename": {
            "anyOf": [
              {
                "description": "The filename that was provided upon upload or generated by Increase.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "id": {
            "description": "The File's identifier.",
            "type": "string"
          },
          "idempotency_key": {
            "anyOf": [
              {
                "description": "The idempotency key you chose for this object. This value is unique across Increase and is used to ensure that a request is only processed once. Learn more about [idempotency](https://increase.com/documentation/idempotency-keys).",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "mime_type": {
            "description": "The MIME type of the file.",
            "type": "string"
          },
          "purpose": {
            "description": "What the File will be used for. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.",
            "enum": [
              "check_image_front",
              "check_image_back",
              "processed_check_image_front",
              "processed_check_image_back",
              "mailed_check_image",
              "check_attachment",
              "inbound_mail_item",
              "form_1099_int",
              "form_1099_misc",
              "form_ss_4",
              "identity_document",
              "increase_statement",
              "other",
              "trust_formation_document",
              "digital_wallet_artwork",
              "digital_wallet_app_icon",
              "physical_card_front",
              "physical_card_back",
              "physical_card_carrier",
              "document_request",
              "entity_supplemental_document",
              "export",
              "unusual_activity_report_attachment",
              "deposit_account_control_agreement",
              "proof_of_authorization_request_submission"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "An image of the front of a check, used for check deposits.",
              "An image of the back of a check, used for check deposits.",
              "An image of the front of a deposited check after processing by Increase and submission to the Federal Reserve.",
              "An image of the back of a deposited check after processing by Increase and submission to the Federal Reserve.",
              "An image of a check that was mailed to a recipient.",
              "A document to be printed on an additional page and mailed with a check that you've requested Increase print.",
              "A scanned mail item sent to Increase.",
              "IRS Form 1099-INT.",
              "IRS Form 1099-MISC.",
              "IRS Form SS-4.",
              "An image of a government-issued ID.",
              "A statement generated by Increase.",
              "A file purpose not covered by any of the other cases.",
              "A legal document forming a trust.",
              "A card image to be rendered inside digital wallet apps. This must be a 1536x969 pixel PNG.",
              "An icon for you app to be rendered inside digital wallet apps. This must be a 100x100 pixel PNG.",
              "A card image to be printed on the front of a physical card. This must be a 2100x1340 pixel PNG with no other color but black.",
              "The image to be printed on the back of a physical card.",
              "An image representing the entirety of the carrier used for a physical card. This must be a 2550x3300 pixel PNG with no other color but black.",
              "A document requested by Increase.",
              "A supplemental document associated an an Entity.",
              "The results of an Export you requested via the dashboard or API.",
              "An attachment to an Unusual Activity Report.",
              "A document granting another entity access to the funds into your account.",
              "A file containing additional evidence for a Proof of Authorization Request Submission."
            ]
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `file`.",
            "enum": [
              "file"
            ],
            "type": "string"
          }
        },
        "required": [
          "created_at",
          "id",
          "purpose",
          "description",
          "direction",
          "mime_type",
          "filename",
          "idempotency_key",
          "type"
        ],
        "title": "File",
        "type": "object",
        "x-tag": "Files",
        "x-title-plural": "Files"
      },
      "file_link": {
        "description": "File Links let you generate a URL that can be used to download a File.",
        "example": {
          "created_at": "2020-01-31T23:59:59Z",
          "expires_at": "2020-01-31T23:59:59Z",
          "file_id": "file_makxrc67oh9l6sg7w9yc",
          "id": "file_link_roapsuicj7kp1lzyus04",
          "idempotency_key": null,
          "type": "file_link",
          "unauthenticated_url": "https://example.com/file.pdf"
        },
        "properties": {
          "created_at": {
            "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the File Link was created.",
            "format": "date-time",
            "type": "string"
          },
          "expires_at": {
            "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the File Link will expire.",
            "format": "date-time",
            "type": "string"
          },
          "file_id": {
            "description": "The identifier of the File the File Link points to.",
            "type": "string"
          },
          "id": {
            "description": "The File Link identifier.",
            "type": "string"
          },
          "idempotency_key": {
            "anyOf": [
              {
                "description": "The idempotency key you chose for this object. This value is unique across Increase and is used to ensure that a request is only processed once. Learn more about [idempotency](https://increase.com/documentation/idempotency-keys).",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `file_link`.",
            "enum": [
              "file_link"
            ],
            "type": "string"
          },
          "unauthenticated_url": {
            "description": "A URL where the File can be downloaded. The URL will expire after the `expires_at` time. This URL is unauthenticated and can be used to download the File without an Increase API key.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "expires_at",
          "unauthenticated_url",
          "created_at",
          "file_id",
          "idempotency_key",
          "type"
        ],
        "title": "File Link",
        "type": "object",
        "x-tag": "File Links",
        "x-title-plural": "File Links"
      },
      "file_list": {
        "description": "A list of File objects.",
        "example": {
          "data": [
            {
              "created_at": "2020-01-31T23:59:59Z",
              "description": "2022-05 statement for checking account",
              "direction": "from_increase",
              "filename": "statement.pdf",
              "id": "file_makxrc67oh9l6sg7w9yc",
              "idempotency_key": null,
              "mime_type": "application/pdf",
              "purpose": "increase_statement",
              "type": "file"
            }
          ],
          "next_cursor": "v57w5d"
        },
        "properties": {
          "data": {
            "description": "The contents of the list.",
            "items": {
              "$ref": "#/components/schemas/file"
            },
            "type": "array"
          },
          "next_cursor": {
            "anyOf": [
              {
                "description": "A pointer to a place in the list.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "File List",
        "type": "object",
        "x-title-plural": "File Lists"
      },
      "group": {
        "description": "Groups represent organizations using Increase. You can retrieve information about your own organization via the API. More commonly, OAuth platforms can retrieve information about the organizations that have granted them access. Learn more about OAuth [here](https://increase.com/documentation/oauth).",
        "example": {
          "ach_debit_status": "disabled",
          "activation_status": "activated",
          "created_at": "2020-01-31T23:59:59Z",
          "id": "group_1g4mhziu6kvrs3vz35um",
          "type": "group"
        },
        "properties": {
          "ach_debit_status": {
            "description": "If the Group is allowed to create ACH debits.",
            "enum": [
              "disabled",
              "enabled"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The Group cannot make ACH debits.",
              "The Group can make ACH debits."
            ]
          },
          "activation_status": {
            "description": "If the Group is activated or not.",
            "enum": [
              "unactivated",
              "activated"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The Group is not activated.",
              "The Group is activated."
            ]
          },
          "created_at": {
            "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Group was created.",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "The Group identifier.",
            "type": "string"
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `group`.",
            "enum": [
              "group"
            ],
            "type": "string"
          }
        },
        "required": [
          "activation_status",
          "ach_debit_status",
          "created_at",
          "id",
          "type"
        ],
        "title": "Group",
        "type": "object",
        "x-tag": "Groups",
        "x-title-plural": "Groups"
      },
      "inbound_ach_transfer": {
        "description": "An Inbound ACH Transfer is an ACH transfer initiated outside of Increase to your account.",
        "example": {
          "acceptance": {
            "accepted_at": "2020-01-31T23:59:59Z",
            "transaction_id": "transaction_uyrp7fld2ium70oa7oi"
          },
          "account_id": "account_in71c4amph0vgo2qllky",
          "account_number_id": "account_number_v18nkfqm6afpsrvy82b2",
          "addenda": null,
          "amount": 100,
          "automatically_resolves_at": "2020-01-31T23:59:59Z",
          "created_at": "2020-01-31T23:59:59Z",
          "decline": null,
          "direction": "credit",
          "effective_date": "2023-04-02",
          "expected_settlement_schedule": "same_day",
          "id": "inbound_ach_transfer_tdrwqr3fq9gnnq49odev",
          "international_addenda": null,
          "notification_of_change": null,
          "originator_company_descriptive_date": "230401",
          "originator_company_discretionary_data": "WEB AUTOPAY",
          "originator_company_entry_description": "INVOICE 2468",
          "originator_company_id": "0987654321",
          "originator_company_name": "PAYROLL COMPANY",
          "originator_routing_number": "101050001",
          "receiver_id_number": null,
          "receiver_name": "Ian Crease",
          "standard_entry_class_code": "internet_initiated",
          "status": "accepted",
          "trace_number": "021000038461022",
          "transfer_return": null,
          "type": "inbound_ach_transfer"
        },
        "properties": {
          "acceptance": {
            "anyOf": [
              {
                "description": "If your transfer is accepted, this will contain details of the acceptance.",
                "properties": {
                  "accepted_at": {
                    "description": "The time at which the transfer was accepted.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "transaction_id": {
                    "description": "The id of the transaction for the accepted transfer.",
                    "type": "string"
                  }
                },
                "required": [
                  "accepted_at",
                  "transaction_id"
                ],
                "title": "Acceptance",
                "type": "object",
                "x-title-plural": "Acceptances"
              },
              {
                "type": "null"
              }
            ]
          },
          "account_id": {
            "description": "The Account to which the transfer belongs.",
            "type": "string"
          },
          "account_number_id": {
            "description": "The identifier of the Account Number to which this transfer was sent.",
            "type": "string"
          },
          "addenda": {
            "anyOf": [
              {
                "description": "Additional information sent from the originator.",
                "properties": {
                  "category": {
                    "description": "The type of addendum.",
                    "enum": [
                      "freeform"
                    ],
                    "type": "string",
                    "x-enum-descriptions": [
                      "Unstructured addendum."
                    ]
                  },
                  "freeform": {
                    "anyOf": [
                      {
                        "description": "Unstructured `payment_related_information` passed through by the originator.",
                        "properties": {
                          "entries": {
                            "description": "Each entry represents an addendum received from the originator.",
                            "items": {
                              "properties": {
                                "payment_related_information": {
                                  "description": "The payment related information passed in the addendum.",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "payment_related_information"
                              ],
                              "title": "Entries Element",
                              "type": "object",
                              "x-title-plural": "Entries Elements"
                            },
                            "type": "array"
                          }
                        },
                        "required": [
                          "entries"
                        ],
                        "title": "Freeform",
                        "type": "object",
                        "x-title-plural": "Freeforms"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  }
                },
                "required": [
                  "category",
                  "freeform"
                ],
                "title": "Addenda",
                "type": "object",
                "x-title-plural": "Addendas"
              },
              {
                "type": "null"
              }
            ]
          },
          "amount": {
            "description": "The transfer amount in USD cents.",
            "type": "integer"
          },
          "automatically_resolves_at": {
            "description": "The time at which the transfer will be automatically resolved.",
            "format": "date-time",
            "type": "string"
          },
          "created_at": {
            "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the inbound ACH transfer was created.",
            "format": "date-time",
            "type": "string"
          },
          "decline": {
            "anyOf": [
              {
                "description": "If your transfer is declined, this will contain details of the decline.",
                "properties": {
                  "declined_at": {
                    "description": "The time at which the transfer was declined.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "declined_transaction_id": {
                    "description": "The id of the transaction for the declined transfer.",
                    "type": "string"
                  },
                  "reason": {
                    "description": "The reason for the transfer decline.",
                    "enum": [
                      "ach_route_canceled",
                      "ach_route_disabled",
                      "breaches_limit",
                      "entity_not_active",
                      "group_locked",
                      "transaction_not_allowed",
                      "user_initiated",
                      "insufficient_funds",
                      "returned_per_odfi_request",
                      "authorization_revoked_by_customer",
                      "payment_stopped",
                      "customer_advised_unauthorized_improper_ineligible_or_incomplete",
                      "representative_payee_deceased_or_unable_to_continue_in_that_capacity",
                      "beneficiary_or_account_holder_deceased",
                      "credit_entry_refused_by_receiver",
                      "duplicate_entry",
                      "corporate_customer_advised_not_authorized"
                    ],
                    "type": "string",
                    "x-enum-descriptions": [
                      "The account number is canceled.",
                      "The account number is disabled.",
                      "The transaction would cause an Increase limit to be exceeded.",
                      "The account's entity is not active.",
                      "Your account is inactive.",
                      "The transaction is not allowed per Increase's terms.",
                      "Your integration declined this transfer via the API.",
                      "Your account contains insufficient funds.",
                      "The originating financial institution asked for this transfer to be returned. The receiving bank is complying with the request.",
                      "The customer no longer authorizes this transaction.",
                      "The customer asked for the payment to be stopped.",
                      "The customer advises that the debit was unauthorized.",
                      "The payee is deceased.",
                      "The account holder is deceased.",
                      "The customer refused a credit entry.",
                      "The account holder identified this transaction as a duplicate.",
                      "The corporate customer no longer authorizes this transaction."
                    ]
                  }
                },
                "required": [
                  "reason",
                  "declined_at",
                  "declined_transaction_id"
                ],
                "title": "Decline",
                "type": "object",
                "x-title-plural": "Declines"
              },
              {
                "type": "null"
              }
            ]
          },
          "direction": {
            "description": "The direction of the transfer.",
            "enum": [
              "credit",
              "debit"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "Credit",
              "Debit"
            ]
          },
          "effective_date": {
            "description": "The effective date of the transfer. This is sent by the sending bank and is a factor in determining funds availability.",
            "format": "date",
            "type": "string"
          },
          "expected_settlement_schedule": {
            "description": "The settlement schedule the transfer is expected to follow.",
            "enum": [
              "same_day",
              "future_dated"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The transfer is expected to settle same-day.",
              "The transfer is expected to settle on a future date."
            ]
          },
          "id": {
            "description": "The inbound ACH transfer's identifier.",
            "type": "string"
          },
          "international_addenda": {
            "anyOf": [
              {
                "description": "If the Inbound ACH Transfer has a Standard Entry Class Code of IAT, this will contain fields pertaining to the International ACH Transaction.",
                "example": {
                  "destination_country_code": "US",
                  "destination_currency_code": "USD",
                  "foreign_exchange_indicator": "fixed_to_fixed",
                  "foreign_exchange_reference": null,
                  "foreign_exchange_reference_indicator": "blank",
                  "foreign_payment_amount": 199,
                  "foreign_trace_number": null,
                  "international_transaction_type_code": "internet_initiated",
                  "originating_currency_code": "USD",
                  "originating_depository_financial_institution_branch_country": "US",
                  "originating_depository_financial_institution_id": "091000019",
                  "originating_depository_financial_institution_id_qualifier": "national_clearing_system_number",
                  "originating_depository_financial_institution_name": "WELLS FARGO BANK",
                  "originator_city": "BERLIN",
                  "originator_country": "DE",
                  "originator_identification": "770510487A",
                  "originator_name": "BERGHAIN",
                  "originator_postal_code": "50825",
                  "originator_state_or_province": null,
                  "originator_street_address": "Ruedersdorferstr. 7",
                  "payment_related_information": null,
                  "payment_related_information2": null,
                  "receiver_city": "BEVERLY HILLS",
                  "receiver_country": "US",
                  "receiver_identification_number": "1018790279274",
                  "receiver_postal_code": "90210",
                  "receiver_state_or_province": "CA",
                  "receiver_street_address": "123 FAKE ST",
                  "receiving_company_or_individual_name": "IAN CREASE",
                  "receiving_depository_financial_institution_country": "US",
                  "receiving_depository_financial_institution_id": "101050001",
                  "receiving_depository_financial_institution_id_qualifier": "national_clearing_system_number",
                  "receiving_depository_financial_institution_name": "BLUE RIDGE BANK, NATIONAL ASSOCIATI"
                },
                "properties": {
                  "destination_country_code": {
                    "description": "The [ISO 3166](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2), Alpha-2 country code of the destination country.",
                    "type": "string"
                  },
                  "destination_currency_code": {
                    "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code for the destination bank account.",
                    "type": "string"
                  },
                  "foreign_exchange_indicator": {
                    "description": "A description of how the foreign exchange rate was calculated.",
                    "enum": [
                      "fixed_to_variable",
                      "variable_to_fixed",
                      "fixed_to_fixed"
                    ],
                    "type": "string",
                    "x-enum-descriptions": [
                      "The originator chose an amount in their own currency. The settled amount in USD was converted using the exchange rate.",
                      "The originator chose an amount to settle in USD. The originator's amount was variable; known only after the foreign exchange conversion.",
                      "The amount was originated and settled as a fixed amount in USD. There is no foreign exchange conversion."
                    ]
                  },
                  "foreign_exchange_reference": {
                    "anyOf": [
                      {
                        "description": "Depending on the `foreign_exchange_reference_indicator`, an exchange rate or a reference to a well-known rate.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "foreign_exchange_reference_indicator": {
                    "description": "An instruction of how to interpret the `foreign_exchange_reference` field for this Transaction.",
                    "enum": [
                      "foreign_exchange_rate",
                      "foreign_exchange_reference_number",
                      "blank"
                    ],
                    "type": "string",
                    "x-enum-descriptions": [
                      "The ACH file contains a foreign exchange rate.",
                      "The ACH file contains a reference to a well-known foreign exchange rate.",
                      "There is no foreign exchange for this transfer, so the `foreign_exchange_reference` field is blank."
                    ]
                  },
                  "foreign_payment_amount": {
                    "description": "The amount in the minor unit of the foreign payment currency. For dollars, for example, this is cents.",
                    "type": "integer"
                  },
                  "foreign_trace_number": {
                    "anyOf": [
                      {
                        "description": "A reference number in the foreign banking infrastructure.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "international_transaction_type_code": {
                    "description": "The type of transfer. Set by the originator.",
                    "enum": [
                      "annuity",
                      "business_or_commercial",
                      "deposit",
                      "loan",
                      "miscellaneous",
                      "mortgage",
                      "pension",
                      "remittance",
                      "rent_or_lease",
                      "salary_or_payroll",
                      "tax",
                      "accounts_receivable",
                      "back_office_conversion",
                      "machine_transfer",
                      "point_of_purchase",
                      "point_of_sale",
                      "represented_check",
                      "shared_network_transaction",
                      "telphone_initiated",
                      "internet_initiated"
                    ],
                    "type": "string",
                    "x-enum-descriptions": [
                      "Sent as `ANN` in the Nacha file.",
                      "Sent as `BUS` in the Nacha file.",
                      "Sent as `DEP` in the Nacha file.",
                      "Sent as `LOA` in the Nacha file.",
                      "Sent as `MIS` in the Nacha file.",
                      "Sent as `MOR` in the Nacha file.",
                      "Sent as `PEN` in the Nacha file.",
                      "Sent as `REM` in the Nacha file.",
                      "Sent as `RLS` in the Nacha file.",
                      "Sent as `SAL` in the Nacha file.",
                      "Sent as `TAX` in the Nacha file.",
                      "Sent as `ARC` in the Nacha file.",
                      "Sent as `BOC` in the Nacha file.",
                      "Sent as `MTE` in the Nacha file.",
                      "Sent as `POP` in the Nacha file.",
                      "Sent as `POS` in the Nacha file.",
                      "Sent as `RCK` in the Nacha file.",
                      "Sent as `SHR` in the Nacha file.",
                      "Sent as `TEL` in the Nacha file.",
                      "Sent as `WEB` in the Nacha file."
                    ]
                  },
                  "originating_currency_code": {
                    "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code for the originating bank account.",
                    "type": "string"
                  },
                  "originating_depository_financial_institution_branch_country": {
                    "description": "The [ISO 3166](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2), Alpha-2 country code of the originating branch country.",
                    "type": "string"
                  },
                  "originating_depository_financial_institution_id": {
                    "description": "An identifier for the originating bank. One of an International Bank Account Number (IBAN) bank identifier, SWIFT Bank Identification Code (BIC), or a domestic identifier like a US Routing Number.",
                    "type": "string"
                  },
                  "originating_depository_financial_institution_id_qualifier": {
                    "description": "An instruction of how to interpret the `originating_depository_financial_institution_id` field for this Transaction.",
                    "enum": [
                      "national_clearing_system_number",
                      "bic_code",
                      "iban"
                    ],
                    "type": "string",
                    "x-enum-descriptions": [
                      "A domestic clearing system number. In the US, for example, this is the American Banking Association (ABA) routing number.",
                      "The SWIFT Bank Identifier Code (BIC) of the bank.",
                      "An International Bank Account Number."
                    ]
                  },
                  "originating_depository_financial_institution_name": {
                    "description": "The name of the originating bank. Sometimes this will refer to an American bank and obscure the correspondent foreign bank.",
                    "type": "string"
                  },
                  "originator_city": {
                    "description": "A portion of the originator address. This may be incomplete.",
                    "type": "string"
                  },
                  "originator_country": {
                    "description": "A portion of the originator address. The [ISO 3166](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2), Alpha-2 country code of the originator country.",
                    "type": "string"
                  },
                  "originator_identification": {
                    "description": "An identifier for the originating company. This is generally stable across multiple ACH transfers.",
                    "type": "string"
                  },
                  "originator_name": {
                    "description": "Either the name of the originator or an intermediary money transmitter.",
                    "type": "string"
                  },
                  "originator_postal_code": {
                    "anyOf": [
                      {
                        "description": "A portion of the originator address. This may be incomplete.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "originator_state_or_province": {
                    "anyOf": [
                      {
                        "description": "A portion of the originator address. This may be incomplete.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "originator_street_address": {
                    "description": "A portion of the originator address. This may be incomplete.",
                    "type": "string"
                  },
                  "payment_related_information": {
                    "anyOf": [
                      {
                        "description": "A description field set by the originator.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "payment_related_information2": {
                    "anyOf": [
                      {
                        "description": "A description field set by the originator.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "receiver_city": {
                    "description": "A portion of the receiver address. This may be incomplete.",
                    "type": "string"
                  },
                  "receiver_country": {
                    "description": "A portion of the receiver address. The [ISO 3166](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2), Alpha-2 country code of the receiver country.",
                    "type": "string"
                  },
                  "receiver_identification_number": {
                    "anyOf": [
                      {
                        "description": "An identification number the originator uses for the receiver.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "receiver_postal_code": {
                    "anyOf": [
                      {
                        "description": "A portion of the receiver address. This may be incomplete.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "receiver_state_or_province": {
                    "anyOf": [
                      {
                        "description": "A portion of the receiver address. This may be incomplete.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "receiver_street_address": {
                    "description": "A portion of the receiver address. This may be incomplete.",
                    "type": "string"
                  },
                  "receiving_company_or_individual_name": {
                    "description": "The name of the receiver of the transfer. This is not verified by Increase.",
                    "type": "string"
                  },
                  "receiving_depository_financial_institution_country": {
                    "description": "The [ISO 3166](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2), Alpha-2 country code of the receiving bank country.",
                    "type": "string"
                  },
                  "receiving_depository_financial_institution_id": {
                    "description": "An identifier for the receiving bank. One of an International Bank Account Number (IBAN) bank identifier, SWIFT Bank Identification Code (BIC), or a domestic identifier like a US Routing Number.",
                    "type": "string"
                  },
                  "receiving_depository_financial_institution_id_qualifier": {
                    "description": "An instruction of how to interpret the `receiving_depository_financial_institution_id` field for this Transaction.",
                    "enum": [
                      "national_clearing_system_number",
                      "bic_code",
                      "iban"
                    ],
                    "type": "string",
                    "x-enum-descriptions": [
                      "A domestic clearing system number. In the US, for example, this is the American Banking Association (ABA) routing number.",
                      "The SWIFT Bank Identifier Code (BIC) of the bank.",
                      "An International Bank Account Number."
                    ]
                  },
                  "receiving_depository_financial_institution_name": {
                    "description": "The name of the receiving bank, as set by the sending financial institution.",
                    "type": "string"
                  }
                },
                "required": [
                  "foreign_exchange_indicator",
                  "foreign_exchange_reference_indicator",
                  "foreign_exchange_reference",
                  "destination_country_code",
                  "destination_currency_code",
                  "foreign_payment_amount",
                  "foreign_trace_number",
                  "international_transaction_type_code",
                  "originating_currency_code",
                  "originating_depository_financial_institution_name",
                  "originating_depository_financial_institution_id_qualifier",
                  "originating_depository_financial_institution_id",
                  "originating_depository_financial_institution_branch_country",
                  "originator_name",
                  "originator_street_address",
                  "originator_city",
                  "originator_state_or_province",
                  "originator_postal_code",
                  "originator_country",
                  "originator_identification",
                  "payment_related_information",
                  "payment_related_information2",
                  "receiver_identification_number",
                  "receiver_street_address",
                  "receiver_city",
                  "receiver_state_or_province",
                  "receiver_country",
                  "receiver_postal_code",
                  "receiving_company_or_individual_name",
                  "receiving_depository_financial_institution_name",
                  "receiving_depository_financial_institution_id_qualifier",
                  "receiving_depository_financial_institution_id",
                  "receiving_depository_financial_institution_country"
                ],
                "title": "Inbound ACH Transfer International Addendum",
                "type": "object",
                "x-title-plural": "Inbound ACH Transfer International Addendums"
              },
              {
                "type": "null"
              }
            ]
          },
          "notification_of_change": {
            "anyOf": [
              {
                "description": "If you initiate a notification of change in response to the transfer, this will contain its details.",
                "properties": {
                  "updated_account_number": {
                    "anyOf": [
                      {
                        "description": "The new account number provided in the notification of change.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "updated_routing_number": {
                    "anyOf": [
                      {
                        "description": "The new account number provided in the notification of change.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  }
                },
                "required": [
                  "updated_account_number",
                  "updated_routing_number"
                ],
                "title": "Notification Of Change",
                "type": "object",
                "x-title-plural": "Notifications of change"
              },
              {
                "type": "null"
              }
            ]
          },
          "originator_company_descriptive_date": {
            "anyOf": [
              {
                "description": "The descriptive date of the transfer.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "originator_company_discretionary_data": {
            "anyOf": [
              {
                "description": "The additional information included with the transfer.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "originator_company_entry_description": {
            "description": "The description of the transfer.",
            "type": "string"
          },
          "originator_company_id": {
            "description": "The id of the company that initiated the transfer.",
            "type": "string"
          },
          "originator_company_name": {
            "description": "The name of the company that initiated the transfer.",
            "type": "string"
          },
          "originator_routing_number": {
            "description": "The American Banking Association (ABA) routing number of the bank originating the transfer.",
            "type": "string"
          },
          "receiver_id_number": {
            "anyOf": [
              {
                "description": "The id of the receiver of the transfer.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "receiver_name": {
            "anyOf": [
              {
                "description": "The name of the receiver of the transfer.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "standard_entry_class_code": {
            "description": "The Standard Entry Class (SEC) code of the transfer.",
            "enum": [
              "corporate_credit_or_debit",
              "corporate_trade_exchange",
              "prearranged_payments_and_deposit",
              "internet_initiated",
              "point_of_sale",
              "telephone_initiated",
              "customer_initiated",
              "accounts_receivable",
              "machine_transfer",
              "shared_network_transaction",
              "represented_check",
              "back_office_conversion",
              "point_of_purchase",
              "check_truncation",
              "destroyed_check",
              "international_ach_transaction"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "Corporate Credit and Debit (CCD).",
              "Corporate Trade Exchange (CTX).",
              "Prearranged Payments and Deposits (PPD).",
              "Internet Initiated (WEB).",
              "Point of Sale (POS).",
              "Telephone Initiated (TEL).",
              "Customer Initiated (CIE).",
              "Accounts Receivable (ARC).",
              "Machine Transfer (MTE).",
              "Shared Network Transaction (SHR).",
              "Represented Check (RCK).",
              "Back Office Conversion (BOC).",
              "Point of Purchase (POP).",
              "Check Truncation (TRC).",
              "Destroyed Check (XCK).",
              "International ACH Transaction (IAT)."
            ]
          },
          "status": {
            "description": "The status of the transfer.",
            "enum": [
              "pending",
              "declined",
              "accepted",
              "returned"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The Inbound ACH Transfer is awaiting action, will transition automatically if no action is taken.",
              "The Inbound ACH Transfer has been declined.",
              "The Inbound ACH Transfer is accepted.",
              "The Inbound ACH Transfer has been returned."
            ]
          },
          "trace_number": {
            "description": "A 15 digit number set by the sending bank and transmitted to the receiving bank. Along with the amount, date, and originating routing number, this can be used to identify the ACH transfer. ACH trace numbers are not unique, but are [used to correlate returns](https://increase.com/documentation/ach-returns#ach-returns).",
            "type": "string"
          },
          "transfer_return": {
            "anyOf": [
              {
                "description": "If your transfer is returned, this will contain details of the return.",
                "properties": {
                  "reason": {
                    "description": "The reason for the transfer return.",
                    "enum": [
                      "insufficient_funds",
                      "returned_per_odfi_request",
                      "authorization_revoked_by_customer",
                      "payment_stopped",
                      "customer_advised_unauthorized_improper_ineligible_or_incomplete",
                      "representative_payee_deceased_or_unable_to_continue_in_that_capacity",
                      "beneficiary_or_account_holder_deceased",
                      "credit_entry_refused_by_receiver",
                      "duplicate_entry",
                      "corporate_customer_advised_not_authorized"
                    ],
                    "type": "string",
                    "x-enum-descriptions": [
                      "The customer's account has insufficient funds. This reason is only allowed for debits. The Nacha return code is R01.",
                      "The originating financial institution asked for this transfer to be returned. The receiving bank is complying with the request. The Nacha return code is R06.",
                      "The customer no longer authorizes this transaction. The Nacha return code is R07.",
                      "The customer asked for the payment to be stopped. This reason is only allowed for debits. The Nacha return code is R08.",
                      "The customer advises that the debit was unauthorized. The Nacha return code is R10.",
                      "The payee is deceased. The Nacha return code is R14.",
                      "The account holder is deceased. The Nacha return code is R15.",
                      "The customer refused a credit entry. This reason is only allowed for credits. The Nacha return code is R23.",
                      "The account holder identified this transaction as a duplicate. The Nacha return code is R24.",
                      "The corporate customer no longer authorizes this transaction. The Nacha return code is R29."
                    ]
                  },
                  "returned_at": {
                    "description": "The time at which the transfer was returned.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "transaction_id": {
                    "description": "The id of the transaction for the returned transfer.",
                    "type": "string"
                  }
                },
                "required": [
                  "reason",
                  "returned_at",
                  "transaction_id"
                ],
                "title": "Transfer Return",
                "type": "object",
                "x-title-plural": "Transfer Returns"
              },
              {
                "type": "null"
              }
            ]
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `inbound_ach_transfer`.",
            "enum": [
              "inbound_ach_transfer"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "amount",
          "account_id",
          "account_number_id",
          "direction",
          "status",
          "created_at",
          "originator_company_name",
          "originator_company_descriptive_date",
          "originator_company_discretionary_data",
          "originator_company_entry_description",
          "originator_company_id",
          "originator_routing_number",
          "receiver_id_number",
          "receiver_name",
          "trace_number",
          "effective_date",
          "standard_entry_class_code",
          "expected_settlement_schedule",
          "automatically_resolves_at",
          "addenda",
          "acceptance",
          "decline",
          "transfer_return",
          "notification_of_change",
          "international_addenda",
          "type"
        ],
        "title": "Inbound ACH Transfer",
        "type": "object",
        "x-tag": "Inbound ACH Transfers",
        "x-title-plural": "Inbound ACH Transfers"
      },
      "inbound_ach_transfer_list": {
        "description": "A list of Inbound ACH Transfer objects.",
        "example": {
          "data": [
            {
              "acceptance": {
                "accepted_at": "2020-01-31T23:59:59Z",
                "transaction_id": "transaction_uyrp7fld2ium70oa7oi"
              },
              "account_id": "account_in71c4amph0vgo2qllky",
              "account_number_id": "account_number_v18nkfqm6afpsrvy82b2",
              "addenda": null,
              "amount": 100,
              "automatically_resolves_at": "2020-01-31T23:59:59Z",
              "created_at": "2020-01-31T23:59:59Z",
              "decline": null,
              "direction": "credit",
              "effective_date": "2023-04-02",
              "expected_settlement_schedule": "same_day",
              "id": "inbound_ach_transfer_tdrwqr3fq9gnnq49odev",
              "international_addenda": null,
              "notification_of_change": null,
              "originator_company_descriptive_date": "230401",
              "originator_company_discretionary_data": "WEB AUTOPAY",
              "originator_company_entry_description": "INVOICE 2468",
              "originator_company_id": "0987654321",
              "originator_company_name": "PAYROLL COMPANY",
              "originator_routing_number": "101050001",
              "receiver_id_number": null,
              "receiver_name": "Ian Crease",
              "standard_entry_class_code": "internet_initiated",
              "status": "accepted",
              "trace_number": "021000038461022",
              "transfer_return": null,
              "type": "inbound_ach_transfer"
            }
          ],
          "next_cursor": "v57w5d"
        },
        "properties": {
          "data": {
            "description": "The contents of the list.",
            "items": {
              "$ref": "#/components/schemas/inbound_ach_transfer"
            },
            "type": "array"
          },
          "next_cursor": {
            "anyOf": [
              {
                "description": "A pointer to a place in the list.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "Inbound ACH Transfer List",
        "type": "object",
        "x-title-plural": "Inbound ACH Transfer Lists"
      },
      "inbound_ach_transfer_return_intention": {
        "description": "An Inbound ACH Transfer Return Intention is created when an ACH transfer is initiated at another bank and returned by Increase.",
        "example": {
          "inbound_ach_transfer_id": "inbound_ach_transfer_tdrwqr3fq9gnnq49odev"
        },
        "properties": {
          "inbound_ach_transfer_id": {
            "description": "The ID of the Inbound ACH Transfer that is being returned.",
            "type": "string"
          }
        },
        "required": [
          "inbound_ach_transfer_id"
        ],
        "title": "Inbound ACH Transfer Return Intention",
        "type": "object",
        "x-title-plural": "Inbound ACH Transfer Return Intentions"
      },
      "inbound_card_authorization_simulation_result": {
        "description": "The results of a Card Authorization simulation.",
        "example": {
          "declined_transaction": null,
          "pending_transaction": {
            "account_id": "account_in71c4amph0vgo2qllky",
            "amount": 100,
            "completed_at": null,
            "created_at": "2020-01-31T23:59:59Z",
            "currency": "USD",
            "description": "INVOICE 2468",
            "id": "pending_transaction_k1sfetcau2qbvjbzgju4",
            "route_id": "card_oubs0hwk5rn6knuecxg2",
            "route_type": "card",
            "source": {
              "card_authorization": {
                "actioner": "increase",
                "amount": 100,
                "card_payment_id": "card_payment_nd3k2kacrqjli8482ave",
                "currency": "USD",
                "digital_wallet_token_id": null,
                "direction": "settlement",
                "expires_at": "2020-01-31T23:59:59Z",
                "id": "card_authorization_6iqxap6ivd0fo5eu3i8x",
                "merchant_acceptor_id": "5665270011000168",
                "merchant_category_code": "5734",
                "merchant_city": "New York",
                "merchant_country": "US",
                "merchant_descriptor": "AMAZON.COM",
                "merchant_postal_code": "10045",
                "merchant_state": "NY",
                "network_details": {
                  "category": "visa",
                  "visa": {
                    "electronic_commerce_indicator": "secure_electronic_commerce",
                    "point_of_service_entry_mode": "manual",
                    "stand_in_processing_reason": null
                  }
                },
                "network_identifiers": {
                  "retrieval_reference_number": "785867080153",
                  "trace_number": "487941",
                  "transaction_id": "627199945183184"
                },
                "network_risk_score": 10,
                "pending_transaction_id": null,
                "physical_card_id": null,
                "presentment_amount": 100,
                "presentment_currency": "USD",
                "processing_category": "purchase",
                "real_time_decision_id": null,
                "terminal_id": "RCN5VNXS",
                "type": "card_authorization",
                "verification": {
                  "card_verification_code": {
                    "result": "match"
                  },
                  "cardholder_address": {
                    "actual_line1": "33 Liberty Street",
                    "actual_postal_code": "94131",
                    "provided_line1": "33 Liberty Street",
                    "provided_postal_code": "94132",
                    "result": "postal_code_no_match_address_match"
                  }
                }
              },
              "category": "card_authorization"
            },
            "status": "pending",
            "type": "pending_transaction"
          },
          "type": "inbound_card_authorization_simulation_result"
        },
        "properties": {
          "declined_transaction": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/declined_transaction",
                "description": "If the authorization attempt fails, this will contain the resulting [Declined Transaction](#declined-transactions) object. The Declined Transaction's `source` will be of `category: card_decline`."
              },
              {
                "type": "null"
              }
            ]
          },
          "pending_transaction": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/pending_transaction",
                "description": "If the authorization attempt succeeds, this will contain the resulting Pending Transaction object. The Pending Transaction's `source` will be of `category: card_authorization`."
              },
              {
                "type": "null"
              }
            ]
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `inbound_card_authorization_simulation_result`.",
            "enum": [
              "inbound_card_authorization_simulation_result"
            ],
            "type": "string"
          }
        },
        "required": [
          "pending_transaction",
          "declined_transaction",
          "type"
        ],
        "title": "Inbound Card Authorization Simulation Result",
        "type": "object",
        "x-title-plural": "Inbound Card Authorization Simulation Results"
      },
      "inbound_check_adjustment": {
        "description": "An Inbound Check Adjustment is created when Increase receives an adjustment for a check or return deposited through Check21.",
        "example": {
          "adjusted_transaction_id": "transaction_uyrp7fld2ium70oa7oi",
          "amount": 1750,
          "reason": "late_return"
        },
        "properties": {
          "adjusted_transaction_id": {
            "description": "The ID of the transaction that was adjusted.",
            "type": "string"
          },
          "amount": {
            "description": "The amount of the check adjustment.",
            "type": "integer"
          },
          "reason": {
            "description": "The reason for the adjustment.",
            "enum": [
              "late_return",
              "wrong_payee_credit",
              "adjusted_amount",
              "non_conforming_item"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The return was initiated too late and the receiving institution has responded with a Late Return Claim.",
              "The check was deposited to the wrong payee and the depositing institution has reimbursed the funds with a Wrong Payee Credit.",
              "The check was deposited with a different amount than what was written on the check.",
              "The recipient was not able to process the check. This usually happens for e.g., low quality images."
            ]
          }
        },
        "required": [
          "adjusted_transaction_id",
          "amount",
          "reason"
        ],
        "title": "Inbound Check Adjustment",
        "type": "object",
        "x-title-plural": "Inbound Check Adjustments"
      },
      "inbound_check_deposit": {
        "description": "Inbound Check Deposits are records of third-parties attempting to deposit checks against your account.",
        "example": {
          "accepted_at": "2020-01-31T23:59:59Z",
          "account_id": "account_in71c4amph0vgo2qllky",
          "account_number_id": "account_number_v18nkfqm6afpsrvy82b2",
          "adjustments": [],
          "amount": 1000,
          "back_image_file_id": "file_makxrc67oh9l6sg7w9yc",
          "bank_of_first_deposit_routing_number": "101050001",
          "check_number": "123",
          "check_transfer_id": "check_transfer_30b43acfu9vw8fyc4f5",
          "created_at": "2020-01-31T23:59:59Z",
          "currency": "USD",
          "declined_at": null,
          "declined_transaction_id": null,
          "deposit_return": null,
          "front_image_file_id": "file_makxrc67oh9l6sg7w9yc",
          "id": "inbound_check_deposit_zoshvqybq0cjjm31mra",
          "payee_name_analysis": "name_matches",
          "status": "accepted",
          "transaction_id": "transaction_uyrp7fld2ium70oa7oi",
          "type": "inbound_check_deposit"
        },
        "properties": {
          "accepted_at": {
            "anyOf": [
              {
                "description": "If the Inbound Check Deposit was accepted, the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which this took place.",
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "account_id": {
            "description": "The Account the check is being deposited against.",
            "type": "string"
          },
          "account_number_id": {
            "anyOf": [
              {
                "description": "The Account Number the check is being deposited against.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "adjustments": {
            "description": "If the deposit or the return was adjusted by the sending institution, this will contain details of the adjustments.",
            "items": {
              "properties": {
                "adjusted_at": {
                  "description": "The time at which the return adjustment was received.",
                  "format": "date-time",
                  "type": "string"
                },
                "amount": {
                  "description": "The amount of the adjustment.",
                  "type": "integer"
                },
                "reason": {
                  "description": "The reason for the adjustment.",
                  "enum": [
                    "late_return",
                    "wrong_payee_credit",
                    "adjusted_amount",
                    "non_conforming_item"
                  ],
                  "type": "string",
                  "x-enum-descriptions": [
                    "The return was initiated too late and the receiving institution has responded with a Late Return Claim.",
                    "The check was deposited to the wrong payee and the depositing institution has reimbursed the funds with a Wrong Payee Credit.",
                    "The check was deposited with a different amount than what was written on the check.",
                    "The recipient was not able to process the check. This usually happens for e.g., low quality images."
                  ]
                },
                "transaction_id": {
                  "description": "The id of the transaction for the adjustment.",
                  "type": "string"
                }
              },
              "required": [
                "adjusted_at",
                "transaction_id",
                "reason",
                "amount"
              ],
              "title": "Adjustments Element",
              "type": "object",
              "x-title-plural": "Adjustments Elements"
            },
            "type": "array"
          },
          "amount": {
            "description": "The deposited amount in USD cents.",
            "type": "integer"
          },
          "back_image_file_id": {
            "anyOf": [
              {
                "description": "The ID for the File containing the image of the back of the check.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "bank_of_first_deposit_routing_number": {
            "anyOf": [
              {
                "description": "The American Bankers' Association (ABA) Routing Transit Number (RTN) for the bank depositing this check. In some rare cases, this is not transmitted via Check21 and the value will be null.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "check_number": {
            "anyOf": [
              {
                "description": "The check number printed on the check being deposited.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "check_transfer_id": {
            "anyOf": [
              {
                "description": "If this deposit is for an existing Check Transfer, the identifier of that Check Transfer.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "created_at": {
            "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the deposit was attempted.",
            "format": "date-time",
            "type": "string"
          },
          "currency": {
            "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the deposit.",
            "enum": [
              "CAD",
              "CHF",
              "EUR",
              "GBP",
              "JPY",
              "USD"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "Canadian Dollar (CAD)",
              "Swiss Franc (CHF)",
              "Euro (EUR)",
              "British Pound (GBP)",
              "Japanese Yen (JPY)",
              "US Dollar (USD)"
            ]
          },
          "declined_at": {
            "anyOf": [
              {
                "description": "If the Inbound Check Deposit was declined, the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which this took place.",
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "declined_transaction_id": {
            "anyOf": [
              {
                "description": "If the deposit attempt has been rejected, the identifier of the Declined Transaction object created as a result of the failed deposit.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "deposit_return": {
            "anyOf": [
              {
                "description": "If you requested a return of this deposit, this will contain details of the return.",
                "properties": {
                  "reason": {
                    "description": "The reason the deposit was returned.",
                    "enum": [
                      "altered_or_fictitious",
                      "not_authorized",
                      "duplicate_presentment",
                      "endorsement_missing",
                      "endorsement_irregular"
                    ],
                    "type": "string",
                    "x-enum-descriptions": [
                      "The check was altered or fictitious.",
                      "The check was not authorized.",
                      "The check was a duplicate presentment.",
                      "The check was not endorsed.",
                      "The check was not endorsed by the payee."
                    ]
                  },
                  "returned_at": {
                    "description": "The time at which the deposit was returned.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "transaction_id": {
                    "description": "The id of the transaction for the returned deposit.",
                    "type": "string"
                  }
                },
                "required": [
                  "returned_at",
                  "transaction_id",
                  "reason"
                ],
                "title": "Deposit Return",
                "type": "object",
                "x-title-plural": "Deposit Returns"
              },
              {
                "type": "null"
              }
            ]
          },
          "front_image_file_id": {
            "anyOf": [
              {
                "description": "The ID for the File containing the image of the front of the check.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "id": {
            "description": "The deposit's identifier.",
            "type": "string"
          },
          "payee_name_analysis": {
            "description": "Whether the details on the check match the recipient name of the check transfer. This is an optional feature, contact sales to enable.",
            "enum": [
              "name_matches",
              "does_not_match",
              "not_evaluated"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The details on the check match the recipient name of the check transfer.",
              "The details on the check do not match the recipient name of the check transfer.",
              "The payee name analysis was not evaluated."
            ]
          },
          "status": {
            "description": "The status of the Inbound Check Deposit.",
            "enum": [
              "pending",
              "accepted",
              "declined",
              "returned",
              "requires_attention"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The Inbound Check Deposit is pending.",
              "The Inbound Check Deposit was accepted.",
              "The Inbound Check Deposit was rejected.",
              "The Inbound Check Deposit was returned.",
              "The Inbound Check Deposit requires attention from an Increase operator."
            ]
          },
          "transaction_id": {
            "anyOf": [
              {
                "description": "If the deposit attempt has been accepted, the identifier of the Transaction object created as a result of the successful deposit.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `inbound_check_deposit`.",
            "enum": [
              "inbound_check_deposit"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "amount",
          "created_at",
          "currency",
          "status",
          "account_id",
          "account_number_id",
          "check_transfer_id",
          "front_image_file_id",
          "back_image_file_id",
          "transaction_id",
          "declined_transaction_id",
          "deposit_return",
          "adjustments",
          "accepted_at",
          "declined_at",
          "bank_of_first_deposit_routing_number",
          "check_number",
          "payee_name_analysis",
          "type"
        ],
        "title": "Inbound Check Deposit",
        "type": "object",
        "x-tag": "Inbound Check Deposits",
        "x-title-plural": "Inbound Check Deposits"
      },
      "inbound_check_deposit_list": {
        "description": "A list of Inbound Check Deposit objects.",
        "example": {
          "data": [
            {
              "accepted_at": "2020-01-31T23:59:59Z",
              "account_id": "account_in71c4amph0vgo2qllky",
              "account_number_id": "account_number_v18nkfqm6afpsrvy82b2",
              "adjustments": [],
              "amount": 1000,
              "back_image_file_id": "file_makxrc67oh9l6sg7w9yc",
              "bank_of_first_deposit_routing_number": "101050001",
              "check_number": "123",
              "check_transfer_id": "check_transfer_30b43acfu9vw8fyc4f5",
              "created_at": "2020-01-31T23:59:59Z",
              "currency": "USD",
              "declined_at": null,
              "declined_transaction_id": null,
              "deposit_return": null,
              "front_image_file_id": "file_makxrc67oh9l6sg7w9yc",
              "id": "inbound_check_deposit_zoshvqybq0cjjm31mra",
              "payee_name_analysis": "name_matches",
              "status": "accepted",
              "transaction_id": "transaction_uyrp7fld2ium70oa7oi",
              "type": "inbound_check_deposit"
            }
          ],
          "next_cursor": "v57w5d"
        },
        "properties": {
          "data": {
            "description": "The contents of the list.",
            "items": {
              "$ref": "#/components/schemas/inbound_check_deposit"
            },
            "type": "array"
          },
          "next_cursor": {
            "anyOf": [
              {
                "description": "A pointer to a place in the list.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "Inbound Check Deposit List",
        "type": "object",
        "x-title-plural": "Inbound Check Deposit Lists"
      },
      "inbound_check_deposit_return_intention": {
        "description": "An Inbound Check Deposit Return Intention is created when Increase receives an Inbound Check and the User requests that it be returned.",
        "example": {
          "inbound_check_deposit_id": "inbound_check_deposit_zoshvqybq0cjjm31mra",
          "transfer_id": "check_transfer_30b43acfu9vw8fyc4f5"
        },
        "properties": {
          "inbound_check_deposit_id": {
            "description": "The ID of the Inbound Check Deposit that is being returned.",
            "type": "string"
          },
          "transfer_id": {
            "anyOf": [
              {
                "description": "The identifier of the Check Transfer object that was deposited.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "inbound_check_deposit_id",
          "transfer_id"
        ],
        "title": "Inbound Check Deposit Return Intention",
        "type": "object",
        "x-title-plural": "Inbound Check Deposit Return Intentions"
      },
      "inbound_digital_wallet_token_request_simulation_result": {
        "description": "The results of a Digital Wallet Token simulation.",
        "example": {
          "decline_reason": null,
          "digital_wallet_token_id": "digital_wallet_token_izi62go3h51p369jrie0",
          "type": "inbound_digital_wallet_token_request_simulation_result"
        },
        "properties": {
          "decline_reason": {
            "anyOf": [
              {
                "description": "If the simulated tokenization attempt was declined, this field contains details as to why.",
                "enum": [
                  "card_not_active",
                  "no_verification_method",
                  "webhook_timed_out",
                  "webhook_declined"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "The card is not active.",
                  "The card does not have a two-factor authentication method.",
                  "Your webhook timed out when evaluating the token provisioning attempt.",
                  "Your webhook declined the token provisioning attempt."
                ]
              },
              {
                "type": "null"
              }
            ]
          },
          "digital_wallet_token_id": {
            "anyOf": [
              {
                "description": "If the simulated tokenization attempt was accepted, this field contains the id of the Digital Wallet Token that was created.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `inbound_digital_wallet_token_request_simulation_result`.",
            "enum": [
              "inbound_digital_wallet_token_request_simulation_result"
            ],
            "type": "string"
          }
        },
        "required": [
          "decline_reason",
          "digital_wallet_token_id",
          "type"
        ],
        "title": "Inbound Digital Wallet Token Request Simulation Result",
        "type": "object",
        "x-title-plural": "Inbound Digital Wallet Token Request Simulation Results"
      },
      "inbound_funds_hold": {
        "description": "We hold funds for certain transaction types to account for return windows where funds might still be clawed back by the sending institution.",
        "example": {
          "amount": 100,
          "automatically_releases_at": "2020-01-31T23:59:59Z",
          "created_at": "2020-01-31T23:59:59Z",
          "currency": "USD",
          "held_transaction_id": "transaction_uyrp7fld2ium70oa7oi",
          "id": "inbound_funds_hold_9vuasmywdo7xb3zt4071",
          "pending_transaction_id": "pending_transaction_k1sfetcau2qbvjbzgju4",
          "released_at": null,
          "status": "held",
          "type": "inbound_funds_hold"
        },
        "properties": {
          "amount": {
            "description": "The held amount in the minor unit of the account's currency. For dollars, for example, this is cents.",
            "type": "integer"
          },
          "automatically_releases_at": {
            "description": "When the hold will be released automatically. Certain conditions may cause it to be released before this time.",
            "format": "date-time",
            "type": "string"
          },
          "created_at": {
            "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the hold was created.",
            "format": "date-time",
            "type": "string"
          },
          "currency": {
            "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the hold's currency.",
            "enum": [
              "CAD",
              "CHF",
              "EUR",
              "GBP",
              "JPY",
              "USD"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "Canadian Dollar (CAD)",
              "Swiss Franc (CHF)",
              "Euro (EUR)",
              "British Pound (GBP)",
              "Japanese Yen (JPY)",
              "US Dollar (USD)"
            ]
          },
          "held_transaction_id": {
            "anyOf": [
              {
                "description": "The ID of the Transaction for which funds were held.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "id": {
            "description": "The Inbound Funds Hold identifier.",
            "type": "string"
          },
          "pending_transaction_id": {
            "anyOf": [
              {
                "description": "The ID of the Pending Transaction representing the held funds.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "released_at": {
            "anyOf": [
              {
                "description": "When the hold was released (if it has been released).",
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "status": {
            "description": "The status of the hold.",
            "enum": [
              "held",
              "complete"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "Funds are still being held.",
              "Funds have been released."
            ]
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `inbound_funds_hold`.",
            "enum": [
              "inbound_funds_hold"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "amount",
          "created_at",
          "currency",
          "automatically_releases_at",
          "released_at",
          "status",
          "held_transaction_id",
          "pending_transaction_id",
          "type"
        ],
        "title": "Inbound Funds Hold",
        "type": "object",
        "x-title-plural": "Inbound Funds Holds"
      },
      "inbound_mail_item": {
        "description": "Inbound Mail Items represent pieces of physical mail delivered to a Lockbox.",
        "example": {
          "created_at": "2020-01-31T23:59:59Z",
          "file_id": "file_makxrc67oh9l6sg7w9yc",
          "id": "inbound_mail_item_q6rrg7mmqpplx80zceev",
          "lockbox_id": "lockbox_3xt21ok13q19advds4t5",
          "recipient_name": "Ian Crease",
          "rejection_reason": null,
          "status": "processed",
          "type": "inbound_mail_item"
        },
        "properties": {
          "created_at": {
            "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Inbound Mail Item was created.",
            "format": "date-time",
            "type": "string"
          },
          "file_id": {
            "description": "The identifier for the File containing the scanned contents of the mail item.",
            "type": "string"
          },
          "id": {
            "description": "The Inbound Mail Item identifier.",
            "type": "string"
          },
          "lockbox_id": {
            "anyOf": [
              {
                "description": "The identifier for the Lockbox that received this mail item. For mail items that could not be processed due to an invalid address, this will be null.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "recipient_name": {
            "anyOf": [
              {
                "description": "The recipient name as written on the mail item.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "rejection_reason": {
            "anyOf": [
              {
                "description": "If the mail item has been rejected, why it was rejected.",
                "enum": [
                  "no_matching_lockbox",
                  "no_check",
                  "lockbox_not_active"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "The mail item does not match any lockbox.",
                  "The mail item does not contain a check.",
                  "The Lockbox or its associated Account is not active."
                ]
              },
              {
                "type": "null"
              }
            ]
          },
          "status": {
            "description": "If the mail item has been processed.",
            "enum": [
              "pending",
              "processed",
              "rejected"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The mail item is pending processing.",
              "The mail item has been processed.",
              "The mail item has been rejected."
            ]
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `inbound_mail_item`.",
            "enum": [
              "inbound_mail_item"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "recipient_name",
          "status",
          "rejection_reason",
          "file_id",
          "lockbox_id",
          "type"
        ],
        "title": "Inbound Mail Item",
        "type": "object",
        "x-tag": "Inbound Mail Items",
        "x-title-plural": "Inbound Mail Items"
      },
      "inbound_mail_item_list": {
        "description": "A list of Inbound Mail Item objects.",
        "example": {
          "data": [
            {
              "created_at": "2020-01-31T23:59:59Z",
              "file_id": "file_makxrc67oh9l6sg7w9yc",
              "id": "inbound_mail_item_q6rrg7mmqpplx80zceev",
              "lockbox_id": "lockbox_3xt21ok13q19advds4t5",
              "recipient_name": "Ian Crease",
              "rejection_reason": null,
              "status": "processed",
              "type": "inbound_mail_item"
            }
          ],
          "next_cursor": "v57w5d"
        },
        "properties": {
          "data": {
            "description": "The contents of the list.",
            "items": {
              "$ref": "#/components/schemas/inbound_mail_item"
            },
            "type": "array"
          },
          "next_cursor": {
            "anyOf": [
              {
                "description": "A pointer to a place in the list.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "Inbound Mail Item List",
        "type": "object",
        "x-title-plural": "Inbound Mail Item Lists"
      },
      "inbound_real_time_payments_transfer": {
        "description": "An Inbound Real-Time Payments Transfer is a Real-Time Payments transfer initiated outside of Increase to your account.",
        "example": {
          "account_id": "account_in71c4amph0vgo2qllky",
          "account_number_id": "account_number_v18nkfqm6afpsrvy82b2",
          "amount": 100,
          "confirmation": {
            "confirmed_at": "2020-01-31T23:59:59Z",
            "transaction_id": "transaction_uyrp7fld2ium70oa7oi"
          },
          "created_at": "2020-01-31T23:59:59Z",
          "creditor_name": "Ian Crease",
          "currency": "USD",
          "debtor_account_number": "987654321",
          "debtor_name": "National Phonograph Company",
          "debtor_routing_number": "101050001",
          "decline": null,
          "id": "inbound_real_time_payments_transfer_63hlz498vcxg644hcrzr",
          "remittance_information": "Invoice 29582",
          "status": "confirmed",
          "transaction_identification": "20220501234567891T1BSLZO01745013025",
          "type": "inbound_real_time_payments_transfer"
        },
        "properties": {
          "account_id": {
            "description": "The Account to which the transfer was sent.",
            "type": "string"
          },
          "account_number_id": {
            "description": "The identifier of the Account Number to which this transfer was sent.",
            "type": "string"
          },
          "amount": {
            "description": "The amount in USD cents.",
            "type": "integer"
          },
          "confirmation": {
            "anyOf": [
              {
                "description": "If your transfer is confirmed, this will contain details of the confirmation.",
                "properties": {
                  "confirmed_at": {
                    "description": "The time at which the transfer was confirmed.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "transaction_id": {
                    "description": "The id of the transaction for the confirmed transfer.",
                    "type": "string"
                  }
                },
                "required": [
                  "confirmed_at",
                  "transaction_id"
                ],
                "title": "Confirmation",
                "type": "object",
                "x-title-plural": "Confirmations"
              },
              {
                "type": "null"
              }
            ]
          },
          "created_at": {
            "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.",
            "format": "date-time",
            "type": "string"
          },
          "creditor_name": {
            "description": "The name the sender of the transfer specified as the recipient of the transfer.",
            "type": "string"
          },
          "currency": {
            "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the transfer's currency. This will always be \"USD\" for a Real-Time Payments transfer.",
            "enum": [
              "CAD",
              "CHF",
              "EUR",
              "GBP",
              "JPY",
              "USD"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "Canadian Dollar (CAD)",
              "Swiss Franc (CHF)",
              "Euro (EUR)",
              "British Pound (GBP)",
              "Japanese Yen (JPY)",
              "US Dollar (USD)"
            ]
          },
          "debtor_account_number": {
            "description": "The account number of the account that sent the transfer.",
            "type": "string"
          },
          "debtor_name": {
            "description": "The name provided by the sender of the transfer.",
            "type": "string"
          },
          "debtor_routing_number": {
            "description": "The routing number of the account that sent the transfer.",
            "type": "string"
          },
          "decline": {
            "anyOf": [
              {
                "description": "If your transfer is declined, this will contain details of the decline.",
                "properties": {
                  "declined_at": {
                    "description": "The time at which the transfer was declined.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "declined_transaction_id": {
                    "description": "The id of the transaction for the declined transfer.",
                    "type": "string"
                  },
                  "reason": {
                    "description": "The reason for the transfer decline.",
                    "enum": [
                      "account_number_canceled",
                      "account_number_disabled",
                      "account_restricted",
                      "group_locked",
                      "entity_not_active",
                      "real_time_payments_not_enabled"
                    ],
                    "type": "string",
                    "x-enum-descriptions": [
                      "The account number is canceled.",
                      "The account number is disabled.",
                      "Your account is restricted.",
                      "Your account is inactive.",
                      "The account's entity is not active.",
                      "Your account is not enabled to receive Real-Time Payments transfers."
                    ]
                  }
                },
                "required": [
                  "reason",
                  "declined_at",
                  "declined_transaction_id"
                ],
                "title": "Decline",
                "type": "object",
                "x-title-plural": "Declines"
              },
              {
                "type": "null"
              }
            ]
          },
          "id": {
            "description": "The inbound Real-Time Payments transfer's identifier.",
            "type": "string"
          },
          "remittance_information": {
            "anyOf": [
              {
                "description": "Additional information included with the transfer.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "status": {
            "description": "The lifecycle status of the transfer.",
            "enum": [
              "pending_confirming",
              "timed_out",
              "confirmed",
              "declined"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The transfer is pending confirmation.",
              "The transfer was not responded to in time.",
              "The transfer has been received successfully and is confirmed.",
              "The transfer has been declined."
            ]
          },
          "transaction_identification": {
            "description": "The Real-Time Payments network identification of the transfer.",
            "type": "string"
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `inbound_real_time_payments_transfer`.",
            "enum": [
              "inbound_real_time_payments_transfer"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "amount",
          "currency",
          "creditor_name",
          "debtor_name",
          "debtor_account_number",
          "debtor_routing_number",
          "transaction_identification",
          "remittance_information",
          "status",
          "account_id",
          "account_number_id",
          "created_at",
          "confirmation",
          "decline",
          "type"
        ],
        "title": "Inbound Real-Time Payments Transfer",
        "type": "object",
        "x-tag": "Inbound Real-Time Payments Transfers",
        "x-title-plural": "Inbound Real-Time Payments Transfers"
      },
      "inbound_real_time_payments_transfer_list": {
        "description": "A list of Inbound Real-Time Payments Transfer objects.",
        "example": {
          "data": [
            {
              "account_id": "account_in71c4amph0vgo2qllky",
              "account_number_id": "account_number_v18nkfqm6afpsrvy82b2",
              "amount": 100,
              "confirmation": {
                "confirmed_at": "2020-01-31T23:59:59Z",
                "transaction_id": "transaction_uyrp7fld2ium70oa7oi"
              },
              "created_at": "2020-01-31T23:59:59Z",
              "creditor_name": "Ian Crease",
              "currency": "USD",
              "debtor_account_number": "987654321",
              "debtor_name": "National Phonograph Company",
              "debtor_routing_number": "101050001",
              "decline": null,
              "id": "inbound_real_time_payments_transfer_63hlz498vcxg644hcrzr",
              "remittance_information": "Invoice 29582",
              "status": "confirmed",
              "transaction_identification": "20220501234567891T1BSLZO01745013025",
              "type": "inbound_real_time_payments_transfer"
            }
          ],
          "next_cursor": "v57w5d"
        },
        "properties": {
          "data": {
            "description": "The contents of the list.",
            "items": {
              "$ref": "#/components/schemas/inbound_real_time_payments_transfer"
            },
            "type": "array"
          },
          "next_cursor": {
            "anyOf": [
              {
                "description": "A pointer to a place in the list.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "Inbound Real-Time Payments Transfer List",
        "type": "object",
        "x-title-plural": "Inbound Real-Time Payments Transfer Lists"
      },
      "inbound_wire_drawdown_request": {
        "description": "Inbound wire drawdown requests are requests from someone else to send them a wire. This feature is in beta; reach out to [support@increase.com](mailto:support@increase.com) to learn more.",
        "example": {
          "amount": 10000,
          "beneficiary_account_number": "987654321",
          "beneficiary_address_line1": "33 Liberty Street",
          "beneficiary_address_line2": "New York, NY, 10045",
          "beneficiary_address_line3": null,
          "beneficiary_name": "Ian Crease",
          "beneficiary_routing_number": "101050001",
          "created_at": "2020-01-31T23:59:59Z",
          "currency": "USD",
          "id": "inbound_wire_drawdown_request_u5a92ikqhz1ytphn799e",
          "message_to_recipient": "Invoice 29582",
          "originator_account_number": "987654321",
          "originator_address_line1": "33 Liberty Street",
          "originator_address_line2": "New York, NY, 10045",
          "originator_address_line3": null,
          "originator_name": "Ian Crease",
          "originator_routing_number": "101050001",
          "originator_to_beneficiary_information_line1": null,
          "originator_to_beneficiary_information_line2": null,
          "originator_to_beneficiary_information_line3": null,
          "originator_to_beneficiary_information_line4": null,
          "recipient_account_number_id": "account_number_v18nkfqm6afpsrvy82b2",
          "type": "inbound_wire_drawdown_request"
        },
        "properties": {
          "amount": {
            "description": "The amount being requested in cents.",
            "type": "integer"
          },
          "beneficiary_account_number": {
            "description": "The drawdown request's beneficiary's account number.",
            "type": "string"
          },
          "beneficiary_address_line1": {
            "anyOf": [
              {
                "description": "Line 1 of the drawdown request's beneficiary's address.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "beneficiary_address_line2": {
            "anyOf": [
              {
                "description": "Line 2 of the drawdown request's beneficiary's address.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "beneficiary_address_line3": {
            "anyOf": [
              {
                "description": "Line 3 of the drawdown request's beneficiary's address.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "beneficiary_name": {
            "anyOf": [
              {
                "description": "The drawdown request's beneficiary's name.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "beneficiary_routing_number": {
            "description": "The drawdown request's beneficiary's routing number.",
            "type": "string"
          },
          "created_at": {
            "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the inbound wire drawdown requested was created.",
            "format": "date-time",
            "type": "string"
          },
          "currency": {
            "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the amount being requested. Will always be \"USD\".",
            "type": "string"
          },
          "id": {
            "description": "The Wire drawdown request identifier.",
            "type": "string"
          },
          "message_to_recipient": {
            "anyOf": [
              {
                "description": "A message from the drawdown request's originator.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "originator_account_number": {
            "description": "The drawdown request's originator's account number.",
            "type": "string"
          },
          "originator_address_line1": {
            "anyOf": [
              {
                "description": "Line 1 of the drawdown request's originator's address.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "originator_address_line2": {
            "anyOf": [
              {
                "description": "Line 2 of the drawdown request's originator's address.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "originator_address_line3": {
            "anyOf": [
              {
                "description": "Line 3 of the drawdown request's originator's address.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "originator_name": {
            "anyOf": [
              {
                "description": "The drawdown request's originator's name.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "originator_routing_number": {
            "description": "The drawdown request's originator's routing number.",
            "type": "string"
          },
          "originator_to_beneficiary_information_line1": {
            "anyOf": [
              {
                "description": "Line 1 of the information conveyed from the originator of the message to the beneficiary.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "originator_to_beneficiary_information_line2": {
            "anyOf": [
              {
                "description": "Line 2 of the information conveyed from the originator of the message to the beneficiary.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "originator_to_beneficiary_information_line3": {
            "anyOf": [
              {
                "description": "Line 3 of the information conveyed from the originator of the message to the beneficiary.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "originator_to_beneficiary_information_line4": {
            "anyOf": [
              {
                "description": "Line 4 of the information conveyed from the originator of the message to the beneficiary.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "recipient_account_number_id": {
            "description": "The Account Number from which the recipient of this request is being requested to send funds.",
            "type": "string"
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `inbound_wire_drawdown_request`.",
            "enum": [
              "inbound_wire_drawdown_request"
            ],
            "type": "string"
          }
        },
        "required": [
          "type",
          "id",
          "created_at",
          "recipient_account_number_id",
          "originator_account_number",
          "originator_routing_number",
          "beneficiary_account_number",
          "beneficiary_routing_number",
          "amount",
          "currency",
          "message_to_recipient",
          "originator_to_beneficiary_information_line1",
          "originator_to_beneficiary_information_line2",
          "originator_to_beneficiary_information_line3",
          "originator_to_beneficiary_information_line4",
          "originator_name",
          "originator_address_line1",
          "originator_address_line2",
          "originator_address_line3",
          "beneficiary_name",
          "beneficiary_address_line1",
          "beneficiary_address_line2",
          "beneficiary_address_line3"
        ],
        "title": "Inbound Wire Drawdown Request",
        "type": "object",
        "x-tag": "Inbound Wire Drawdown Requests",
        "x-title-plural": "Inbound Wire Drawdown Requests"
      },
      "inbound_wire_drawdown_request_list": {
        "description": "A list of Inbound Wire Drawdown Request objects.",
        "example": {
          "data": [
            {
              "amount": 10000,
              "beneficiary_account_number": "987654321",
              "beneficiary_address_line1": "33 Liberty Street",
              "beneficiary_address_line2": "New York, NY, 10045",
              "beneficiary_address_line3": null,
              "beneficiary_name": "Ian Crease",
              "beneficiary_routing_number": "101050001",
              "created_at": "2020-01-31T23:59:59Z",
              "currency": "USD",
              "id": "inbound_wire_drawdown_request_u5a92ikqhz1ytphn799e",
              "message_to_recipient": "Invoice 29582",
              "originator_account_number": "987654321",
              "originator_address_line1": "33 Liberty Street",
              "originator_address_line2": "New York, NY, 10045",
              "originator_address_line3": null,
              "originator_name": "Ian Crease",
              "originator_routing_number": "101050001",
              "originator_to_beneficiary_information_line1": null,
              "originator_to_beneficiary_information_line2": null,
              "originator_to_beneficiary_information_line3": null,
              "originator_to_beneficiary_information_line4": null,
              "recipient_account_number_id": "account_number_v18nkfqm6afpsrvy82b2",
              "type": "inbound_wire_drawdown_request"
            }
          ],
          "next_cursor": "v57w5d"
        },
        "properties": {
          "data": {
            "description": "The contents of the list.",
            "items": {
              "$ref": "#/components/schemas/inbound_wire_drawdown_request"
            },
            "type": "array"
          },
          "next_cursor": {
            "anyOf": [
              {
                "description": "A pointer to a place in the list.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "Inbound Wire Drawdown Request List",
        "type": "object",
        "x-title-plural": "Inbound Wire Drawdown Request Lists"
      },
      "inbound_wire_transfer": {
        "description": "An Inbound Wire Transfer is a wire transfer initiated outside of Increase to your account.",
        "example": {
          "account_id": "account_in71c4amph0vgo2qllky",
          "account_number_id": "account_number_v18nkfqm6afpsrvy82b2",
          "amount": 100,
          "beneficiary_address_line1": null,
          "beneficiary_address_line2": null,
          "beneficiary_address_line3": null,
          "beneficiary_name": null,
          "beneficiary_reference": null,
          "created_at": "2020-01-31T23:59:59Z",
          "description": "Inbound wire transfer",
          "id": "inbound_wire_transfer_f228m6bmhtcxjco9pwp0",
          "input_message_accountability_data": null,
          "originator_address_line1": null,
          "originator_address_line2": null,
          "originator_address_line3": null,
          "originator_name": null,
          "originator_routing_number": null,
          "originator_to_beneficiary_information": null,
          "originator_to_beneficiary_information_line1": null,
          "originator_to_beneficiary_information_line2": null,
          "originator_to_beneficiary_information_line3": null,
          "originator_to_beneficiary_information_line4": null,
          "sender_reference": null,
          "status": "accepted",
          "type": "inbound_wire_transfer"
        },
        "properties": {
          "account_id": {
            "description": "The Account to which the transfer belongs.",
            "type": "string"
          },
          "account_number_id": {
            "description": "The identifier of the Account Number to which this transfer was sent.",
            "type": "string"
          },
          "amount": {
            "description": "The amount in USD cents.",
            "type": "integer"
          },
          "beneficiary_address_line1": {
            "anyOf": [
              {
                "description": "A free-form address field set by the sender.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "beneficiary_address_line2": {
            "anyOf": [
              {
                "description": "A free-form address field set by the sender.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "beneficiary_address_line3": {
            "anyOf": [
              {
                "description": "A free-form address field set by the sender.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "beneficiary_name": {
            "anyOf": [
              {
                "description": "A name set by the sender.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "beneficiary_reference": {
            "anyOf": [
              {
                "description": "A free-form reference string set by the sender, to help identify the transfer.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "created_at": {
            "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the inbound wire transfer was created.",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "description": "An Increase-constructed description of the transfer.",
            "type": "string"
          },
          "id": {
            "description": "The inbound wire transfer's identifier.",
            "type": "string"
          },
          "input_message_accountability_data": {
            "anyOf": [
              {
                "description": "A unique identifier available to the originating and receiving banks, commonly abbreviated as IMAD. It is created when the wire is submitted to the Fedwire service and is helpful when debugging wires with the originating bank.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "originator_address_line1": {
            "anyOf": [
              {
                "description": "The address of the wire originator, set by the sending bank.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "originator_address_line2": {
            "anyOf": [
              {
                "description": "The address of the wire originator, set by the sending bank.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "originator_address_line3": {
            "anyOf": [
              {
                "description": "The address of the wire originator, set by the sending bank.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "originator_name": {
            "anyOf": [
              {
                "description": "The originator of the wire, set by the sending bank.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "originator_routing_number": {
            "anyOf": [
              {
                "description": "The American Banking Association (ABA) routing number of the bank originating the transfer.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "originator_to_beneficiary_information": {
            "anyOf": [
              {
                "description": "An Increase-created concatenation of the Originator-to-Beneficiary lines.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "originator_to_beneficiary_information_line1": {
            "anyOf": [
              {
                "description": "A free-form message set by the wire originator.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "originator_to_beneficiary_information_line2": {
            "anyOf": [
              {
                "description": "A free-form message set by the wire originator.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "originator_to_beneficiary_information_line3": {
            "anyOf": [
              {
                "description": "A free-form message set by the wire originator.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "originator_to_beneficiary_information_line4": {
            "anyOf": [
              {
                "description": "A free-form message set by the wire originator.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "sender_reference": {
            "anyOf": [
              {
                "description": "The sending bank's reference number for the wire transfer.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "status": {
            "description": "The status of the transfer.",
            "enum": [
              "pending",
              "accepted",
              "declined",
              "reversed"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The Inbound Wire Transfer is awaiting action, will transition automatically if no action is taken.",
              "The Inbound Wire Transfer is accepted.",
              "The Inbound Wire Transfer was declined.",
              "The Inbound Wire Transfer was reversed."
            ]
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `inbound_wire_transfer`.",
            "enum": [
              "inbound_wire_transfer"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "amount",
          "account_id",
          "account_number_id",
          "status",
          "created_at",
          "beneficiary_address_line1",
          "beneficiary_address_line2",
          "beneficiary_address_line3",
          "beneficiary_name",
          "beneficiary_reference",
          "description",
          "input_message_accountability_data",
          "sender_reference",
          "originator_address_line1",
          "originator_address_line2",
          "originator_address_line3",
          "originator_name",
          "originator_routing_number",
          "originator_to_beneficiary_information_line1",
          "originator_to_beneficiary_information_line2",
          "originator_to_beneficiary_information_line3",
          "originator_to_beneficiary_information_line4",
          "originator_to_beneficiary_information",
          "type"
        ],
        "title": "Inbound Wire Transfer",
        "type": "object",
        "x-tag": "Inbound Wire Transfers",
        "x-title-plural": "Inbound Wire Transfers"
      },
      "inbound_wire_transfer_list": {
        "description": "A list of Inbound Wire Transfer objects.",
        "example": {
          "data": [
            {
              "account_id": "account_in71c4amph0vgo2qllky",
              "account_number_id": "account_number_v18nkfqm6afpsrvy82b2",
              "amount": 100,
              "beneficiary_address_line1": null,
              "beneficiary_address_line2": null,
              "beneficiary_address_line3": null,
              "beneficiary_name": null,
              "beneficiary_reference": null,
              "created_at": "2020-01-31T23:59:59Z",
              "description": "Inbound wire transfer",
              "id": "inbound_wire_transfer_f228m6bmhtcxjco9pwp0",
              "input_message_accountability_data": null,
              "originator_address_line1": null,
              "originator_address_line2": null,
              "originator_address_line3": null,
              "originator_name": null,
              "originator_routing_number": null,
              "originator_to_beneficiary_information": null,
              "originator_to_beneficiary_information_line1": null,
              "originator_to_beneficiary_information_line2": null,
              "originator_to_beneficiary_information_line3": null,
              "originator_to_beneficiary_information_line4": null,
              "sender_reference": null,
              "status": "accepted",
              "type": "inbound_wire_transfer"
            }
          ],
          "next_cursor": "v57w5d"
        },
        "properties": {
          "data": {
            "description": "The contents of the list.",
            "items": {
              "$ref": "#/components/schemas/inbound_wire_transfer"
            },
            "type": "array"
          },
          "next_cursor": {
            "anyOf": [
              {
                "description": "A pointer to a place in the list.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "Inbound Wire Transfer List",
        "type": "object",
        "x-title-plural": "Inbound Wire Transfer Lists"
      },
      "inbound_wire_transfer_reversal": {
        "description": "An Inbound Wire Transfer Reversal Intention is created when Increase has received a wire and the User requests that it be reversed.",
        "example": {
          "inbound_wire_transfer_id": "inbound_wire_transfer_f228m6bmhtcxjco9pwp0"
        },
        "properties": {
          "inbound_wire_transfer_id": {
            "description": "The ID of the Inbound Wire Transfer that is being reversed.",
            "type": "string"
          }
        },
        "required": [
          "inbound_wire_transfer_id"
        ],
        "title": "Inbound Wire Transfer Reversal Intention",
        "type": "object",
        "x-title-plural": "Inbound Wire Transfer Reversal Intentions"
      },
      "intrafi_account_enrollment": {
        "description": "IntraFi is a [network of financial institutions](https://www.intrafi.com/network-banks) that allows Increase users to sweep funds to multiple banks, in addition to Increase's main bank partners. This enables accounts to become eligible for additional Federal Deposit Insurance Corporation (FDIC) insurance. An IntraFi Account Enrollment object represents the status of an account in the network. Sweeping an account to IntraFi doesn't affect funds availability.",
        "example": {
          "account_id": "account_in71c4amph0vgo2qllky",
          "created_at": "2020-01-31T23:59:59Z",
          "id": "intrafi_account_enrollment_w8l97znzreopkwf2tg75",
          "idempotency_key": null,
          "intrafi_id": "01234abcd",
          "status": "pending_enrolling",
          "type": "intrafi_account_enrollment"
        },
        "properties": {
          "account_id": {
            "description": "The identifier of the Increase Account being swept into the network.",
            "type": "string"
          },
          "created_at": {
            "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the enrollment was created.",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "The identifier of this enrollment at IntraFi.",
            "type": "string"
          },
          "idempotency_key": {
            "anyOf": [
              {
                "description": "The idempotency key you chose for this object. This value is unique across Increase and is used to ensure that a request is only processed once. Learn more about [idempotency](https://increase.com/documentation/idempotency-keys).",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "intrafi_id": {
            "description": "The identifier of the account in IntraFi's system. This identifier will be printed on any IntraFi statements or documents.",
            "type": "string"
          },
          "status": {
            "description": "The status of the account in the network. An account takes about one business day to go from `pending_enrolling` to `enrolled`.",
            "enum": [
              "pending_enrolling",
              "enrolled",
              "pending_unenrolling",
              "unenrolled",
              "requires_attention"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The account is being added to the IntraFi network.",
              "The account has been enrolled with IntraFi.",
              "The account is being unenrolled from IntraFi's deposit sweep.",
              "The account was once enrolled, but is no longer enrolled at IntraFi.",
              "Something unexpected happened with this account. Contact Increase support."
            ]
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `intrafi_account_enrollment`.",
            "enum": [
              "intrafi_account_enrollment"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "account_id",
          "status",
          "created_at",
          "intrafi_id",
          "type",
          "idempotency_key"
        ],
        "title": "IntraFi Account Enrollment",
        "type": "object",
        "x-tag": "IntraFi Account Enrollments",
        "x-title-plural": "IntraFi Account Enrollments"
      },
      "intrafi_account_enrollment_list": {
        "description": "A list of IntraFi Account Enrollment objects.",
        "example": {
          "data": [
            {
              "account_id": "account_in71c4amph0vgo2qllky",
              "created_at": "2020-01-31T23:59:59Z",
              "id": "intrafi_account_enrollment_w8l97znzreopkwf2tg75",
              "idempotency_key": null,
              "intrafi_id": "01234abcd",
              "status": "pending_enrolling",
              "type": "intrafi_account_enrollment"
            }
          ],
          "next_cursor": "v57w5d"
        },
        "properties": {
          "data": {
            "description": "The contents of the list.",
            "items": {
              "$ref": "#/components/schemas/intrafi_account_enrollment"
            },
            "type": "array"
          },
          "next_cursor": {
            "anyOf": [
              {
                "description": "A pointer to a place in the list.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "IntraFi Account Enrollment List",
        "type": "object",
        "x-title-plural": "IntraFi Account Enrollment Lists"
      },
      "intrafi_balance": {
        "description": "When using IntraFi, each account's balance over the standard FDIC insurance amount are swept to various other institutions. Funds are rebalanced across banks as needed once per business day.",
        "example": {
          "balances": [
            {
              "balance": 1750,
              "bank": "Example Bank",
              "bank_location": {
                "city": "New York",
                "state": "NY"
              },
              "fdic_certificate_number": "314159",
              "id": "intrafi_detailed_balance_qp4v28t1htqu5lsp0rz8"
            }
          ],
          "currency": "USD",
          "effective_date": "2020-01-31",
          "id": "intrafi_balance_8lgtn3pz0ktekaekw29t",
          "total_balance": 1750,
          "type": "intrafi_balance"
        },
        "properties": {
          "balances": {
            "description": "Each entry represents a balance held at a different bank. IntraFi separates the total balance across many participating banks in the network.",
            "items": {
              "properties": {
                "balance": {
                  "description": "The balance, in minor units of `currency`, held with this bank.",
                  "type": "integer"
                },
                "bank": {
                  "description": "The name of the bank holding these funds.",
                  "type": "string"
                },
                "bank_location": {
                  "anyOf": [
                    {
                      "description": "The primary location of the bank.",
                      "properties": {
                        "city": {
                          "description": "The bank's city.",
                          "type": "string"
                        },
                        "state": {
                          "description": "The bank's state.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "city",
                        "state"
                      ],
                      "title": "Bank Location",
                      "type": "object",
                      "x-title-plural": "Bank Locations"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "fdic_certificate_number": {
                  "description": "The Federal Deposit Insurance Corporation (FDIC) certificate number of the bank. Because many banks have the same or similar names, this can be used to uniquely identify the institution.",
                  "type": "string"
                },
                "id": {
                  "description": "The identifier of this balance.",
                  "type": "string"
                }
              },
              "required": [
                "id",
                "bank",
                "bank_location",
                "fdic_certificate_number",
                "balance"
              ],
              "title": "Balances Element",
              "type": "object",
              "x-title-plural": "Balances Elements"
            },
            "type": "array"
          },
          "currency": {
            "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the account currency.",
            "enum": [
              "CAD",
              "CHF",
              "EUR",
              "GBP",
              "JPY",
              "USD"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "Canadian Dollar (CAD)",
              "Swiss Franc (CHF)",
              "Euro (EUR)",
              "British Pound (GBP)",
              "Japanese Yen (JPY)",
              "US Dollar (USD)"
            ]
          },
          "effective_date": {
            "description": "The date this balance reflects.",
            "format": "date",
            "type": "string"
          },
          "id": {
            "description": "The identifier of this balance.",
            "type": "string"
          },
          "total_balance": {
            "description": "The total balance, in minor units of `currency`. Increase reports this balance to IntraFi daily.",
            "type": "integer"
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `intrafi_balance`.",
            "enum": [
              "intrafi_balance"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "effective_date",
          "total_balance",
          "currency",
          "balances",
          "type"
        ],
        "title": "IntraFi Balance",
        "type": "object",
        "x-tag": "IntraFi Balances",
        "x-title-plural": "IntraFi Balances"
      },
      "intrafi_exclusion": {
        "description": "Certain institutions may be excluded per Entity when sweeping funds into the IntraFi network. This is useful when an Entity already has deposits at a particular bank, and does not want to sweep additional funds to it. It may take 5 business days for an exclusion to be processed.",
        "example": {
          "bank_name": "Example Bank",
          "created_at": "2020-01-31T23:59:59Z",
          "entity_id": "entity_n8y8tnk2p9339ti393yi",
          "excluded_at": "2020-02-01T23:59:59+00:00",
          "fdic_certificate_number": "314159",
          "id": "intrafi_exclusion_ygfqduuzpau3jqof6jyh",
          "idempotency_key": null,
          "status": "completed",
          "submitted_at": "2020-02-01T00:59:59+00:00",
          "type": "intrafi_exclusion"
        },
        "properties": {
          "bank_name": {
            "description": "The name of the excluded institution.",
            "type": "string"
          },
          "created_at": {
            "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the exclusion was created.",
            "format": "date-time",
            "type": "string"
          },
          "entity_id": {
            "description": "The entity for which this institution is excluded.",
            "type": "string"
          },
          "excluded_at": {
            "anyOf": [
              {
                "description": "When this was exclusion was confirmed by IntraFi.",
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "fdic_certificate_number": {
            "anyOf": [
              {
                "description": "The Federal Deposit Insurance Corporation's certificate number for the institution.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "id": {
            "description": "The identifier of this exclusion request.",
            "type": "string"
          },
          "idempotency_key": {
            "anyOf": [
              {
                "description": "The idempotency key you chose for this object. This value is unique across Increase and is used to ensure that a request is only processed once. Learn more about [idempotency](https://increase.com/documentation/idempotency-keys).",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "status": {
            "description": "The status of the exclusion request.",
            "enum": [
              "pending",
              "completed",
              "archived"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The exclusion is being added to the IntraFi network.",
              "The exclusion has been added to the IntraFi network.",
              "The exclusion has been removed from the IntraFi network."
            ]
          },
          "submitted_at": {
            "anyOf": [
              {
                "description": "When this was exclusion was submitted to IntraFi by Increase.",
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `intrafi_exclusion`.",
            "enum": [
              "intrafi_exclusion"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "submitted_at",
          "excluded_at",
          "bank_name",
          "fdic_certificate_number",
          "entity_id",
          "status",
          "idempotency_key",
          "type"
        ],
        "title": "IntraFi Exclusion",
        "type": "object",
        "x-tag": "IntraFi Exclusions",
        "x-title-plural": "IntraFi Exclusions"
      },
      "intrafi_exclusion_list": {
        "description": "A list of IntraFi Exclusion objects.",
        "example": {
          "data": [
            {
              "bank_name": "Example Bank",
              "created_at": "2020-01-31T23:59:59Z",
              "entity_id": "entity_n8y8tnk2p9339ti393yi",
              "excluded_at": "2020-02-01T23:59:59+00:00",
              "fdic_certificate_number": "314159",
              "id": "intrafi_exclusion_ygfqduuzpau3jqof6jyh",
              "idempotency_key": null,
              "status": "completed",
              "submitted_at": "2020-02-01T00:59:59+00:00",
              "type": "intrafi_exclusion"
            }
          ],
          "next_cursor": "v57w5d"
        },
        "properties": {
          "data": {
            "description": "The contents of the list.",
            "items": {
              "$ref": "#/components/schemas/intrafi_exclusion"
            },
            "type": "array"
          },
          "next_cursor": {
            "anyOf": [
              {
                "description": "A pointer to a place in the list.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "IntraFi Exclusion List",
        "type": "object",
        "x-title-plural": "IntraFi Exclusion Lists"
      },
      "lockbox": {
        "description": "Lockboxes are physical locations that can receive mail containing paper checks. Increase will automatically create a Check Deposit for checks received this way.",
        "example": {
          "account_id": "account_in71c4amph0vgo2qllky",
          "address": {
            "city": "San Francisco",
            "line1": "1234 Market St",
            "line2": "Ste 567",
            "postal_code": "94114",
            "recipient": "Company Inc. ATTN: VRE6P",
            "state": "CA"
          },
          "created_at": "2020-01-31T23:59:59Z",
          "description": "Lockbox 1",
          "id": "lockbox_3xt21ok13q19advds4t5",
          "idempotency_key": null,
          "recipient_name": "Company Inc.",
          "status": "active",
          "type": "lockbox"
        },
        "properties": {
          "account_id": {
            "description": "The identifier for the Account checks sent to this lockbox will be deposited into.",
            "type": "string"
          },
          "address": {
            "description": "The mailing address for the Lockbox.",
            "properties": {
              "city": {
                "description": "The city of the address.",
                "type": "string"
              },
              "line1": {
                "description": "The first line of the address.",
                "type": "string"
              },
              "line2": {
                "description": "The second line of the address.",
                "type": "string"
              },
              "postal_code": {
                "description": "The postal code of the address.",
                "type": "string"
              },
              "recipient": {
                "anyOf": [
                  {
                    "description": "The recipient line of the address. This will include the recipient name you provide when creating the address, as well as an ATTN suffix to help route the mail to your lockbox. Mail senders must include this ATTN line to receive mail at this Lockbox.",
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "state": {
                "description": "The two-letter United States Postal Service (USPS) abbreviation for the state of the address.",
                "type": "string"
              }
            },
            "required": [
              "recipient",
              "line1",
              "line2",
              "city",
              "state",
              "postal_code"
            ],
            "title": "Address",
            "type": "object",
            "x-title-plural": "Addresses"
          },
          "created_at": {
            "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Lockbox was created.",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "anyOf": [
              {
                "description": "The description you choose for the Lockbox.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "id": {
            "description": "The Lockbox identifier.",
            "type": "string"
          },
          "idempotency_key": {
            "anyOf": [
              {
                "description": "The idempotency key you chose for this object. This value is unique across Increase and is used to ensure that a request is only processed once. Learn more about [idempotency](https://increase.com/documentation/idempotency-keys).",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "recipient_name": {
            "anyOf": [
              {
                "description": "The recipient name you choose for the Lockbox.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "status": {
            "description": "This indicates if mail can be sent to this address.",
            "enum": [
              "active",
              "inactive"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "This Lockbox is active. Checks mailed to it will be deposited automatically.",
              "This Lockbox is inactive. Checks mailed to it will not be deposited."
            ]
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `lockbox`.",
            "enum": [
              "lockbox"
            ],
            "type": "string"
          }
        },
        "required": [
          "account_id",
          "id",
          "created_at",
          "recipient_name",
          "description",
          "status",
          "address",
          "idempotency_key",
          "type"
        ],
        "title": "Lockbox",
        "type": "object",
        "x-tag": "Lockboxes",
        "x-title-plural": "Lockboxes"
      },
      "lockbox_list": {
        "description": "A list of Lockbox objects.",
        "example": {
          "data": [
            {
              "account_id": "account_in71c4amph0vgo2qllky",
              "address": {
                "city": "San Francisco",
                "line1": "1234 Market St",
                "line2": "Ste 567",
                "postal_code": "94114",
                "recipient": "Company Inc. ATTN: VRE6P",
                "state": "CA"
              },
              "created_at": "2020-01-31T23:59:59Z",
              "description": "Lockbox 1",
              "id": "lockbox_3xt21ok13q19advds4t5",
              "idempotency_key": null,
              "recipient_name": "Company Inc.",
              "status": "active",
              "type": "lockbox"
            }
          ],
          "next_cursor": "v57w5d"
        },
        "properties": {
          "data": {
            "description": "The contents of the list.",
            "items": {
              "$ref": "#/components/schemas/lockbox"
            },
            "type": "array"
          },
          "next_cursor": {
            "anyOf": [
              {
                "description": "A pointer to a place in the list.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "Lockbox List",
        "type": "object",
        "x-title-plural": "Lockbox Lists"
      },
      "oauth_application": {
        "description": "An OAuth Application lets you build an application for others to use with their Increase data. You can create an OAuth Application via the Dashboard and read information about it with the API. Learn more about OAuth [here](https://increase.com/documentation/oauth).",
        "example": {
          "client_id": "client_id_ec79nb1bukwwafdewe88",
          "created_at": "2020-01-31T23:59:59Z",
          "deleted_at": null,
          "id": "application_gj9ufmpgh5i56k4vyriy",
          "name": "Ian Crease's App",
          "status": "active",
          "type": "oauth_application"
        },
        "properties": {
          "client_id": {
            "description": "The OAuth Application's client_id. Use this to authenticate with the OAuth Application.",
            "type": "string"
          },
          "created_at": {
            "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp when the OAuth Application was created.",
            "format": "date-time",
            "type": "string"
          },
          "deleted_at": {
            "anyOf": [
              {
                "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp when the OAuth Application was deleted.",
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "id": {
            "description": "The OAuth Application's identifier.",
            "type": "string"
          },
          "name": {
            "anyOf": [
              {
                "description": "The name you chose for this OAuth Application.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "status": {
            "description": "Whether the application is active.",
            "enum": [
              "active",
              "deleted"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The application is active and can be used by your users.",
              "The application is deleted."
            ]
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `oauth_application`.",
            "enum": [
              "oauth_application"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "client_id",
          "created_at",
          "name",
          "status",
          "deleted_at",
          "type"
        ],
        "title": "OAuth Application",
        "type": "object",
        "x-tag": "OAuth Applications",
        "x-title-plural": "OAuth Applications"
      },
      "oauth_application_list": {
        "description": "A list of OAuth Application objects.",
        "example": {
          "data": [
            {
              "client_id": "client_id_ec79nb1bukwwafdewe88",
              "created_at": "2020-01-31T23:59:59Z",
              "deleted_at": null,
              "id": "application_gj9ufmpgh5i56k4vyriy",
              "name": "Ian Crease's App",
              "status": "active",
              "type": "oauth_application"
            }
          ],
          "next_cursor": "v57w5d"
        },
        "properties": {
          "data": {
            "description": "The contents of the list.",
            "items": {
              "$ref": "#/components/schemas/oauth_application"
            },
            "type": "array"
          },
          "next_cursor": {
            "anyOf": [
              {
                "description": "A pointer to a place in the list.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "OAuth Application List",
        "type": "object",
        "x-title-plural": "OAuth Application Lists"
      },
      "oauth_connection": {
        "description": "When a user authorizes your OAuth application, an OAuth Connection object is created. Learn more about OAuth [here](https://increase.com/documentation/oauth).",
        "example": {
          "created_at": "2020-01-31T23:59:59Z",
          "deleted_at": null,
          "group_id": "group_1g4mhziu6kvrs3vz35um",
          "id": "connection_dauknoksyr4wilz4e6my",
          "oauth_application_id": "application_gj9ufmpgh5i56k4vyriy",
          "status": "active",
          "type": "oauth_connection"
        },
        "properties": {
          "created_at": {
            "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp when the OAuth Connection was created.",
            "format": "date-time",
            "type": "string"
          },
          "deleted_at": {
            "anyOf": [
              {
                "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp when the OAuth Connection was deleted.",
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "group_id": {
            "description": "The identifier of the Group that has authorized your OAuth application.",
            "type": "string"
          },
          "id": {
            "description": "The OAuth Connection's identifier.",
            "type": "string"
          },
          "oauth_application_id": {
            "description": "The identifier of the OAuth application this connection is for.",
            "type": "string"
          },
          "status": {
            "description": "Whether the connection is active.",
            "enum": [
              "active",
              "inactive"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The OAuth connection is active.",
              "The OAuth connection is permanently deactivated."
            ]
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `oauth_connection`.",
            "enum": [
              "oauth_connection"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "group_id",
          "oauth_application_id",
          "status",
          "deleted_at",
          "type"
        ],
        "title": "OAuth Connection",
        "type": "object",
        "x-tag": "OAuth Connections",
        "x-title-plural": "OAuth Connections"
      },
      "oauth_connection_list": {
        "description": "A list of OAuth Connection objects.",
        "example": {
          "data": [
            {
              "created_at": "2020-01-31T23:59:59Z",
              "deleted_at": null,
              "group_id": "group_1g4mhziu6kvrs3vz35um",
              "id": "connection_dauknoksyr4wilz4e6my",
              "oauth_application_id": "application_gj9ufmpgh5i56k4vyriy",
              "status": "active",
              "type": "oauth_connection"
            }
          ],
          "next_cursor": "v57w5d"
        },
        "properties": {
          "data": {
            "description": "The contents of the list.",
            "items": {
              "$ref": "#/components/schemas/oauth_connection"
            },
            "type": "array"
          },
          "next_cursor": {
            "anyOf": [
              {
                "description": "A pointer to a place in the list.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "OAuth Connection List",
        "type": "object",
        "x-title-plural": "OAuth Connection Lists"
      },
      "oauth_token": {
        "description": "A token that is returned to your application when a user completes the OAuth flow and may be used to authenticate requests. Learn more about OAuth [here](/documentation/oauth).",
        "example": {
          "access_token": "12345",
          "token_type": "bearer",
          "type": "oauth_token"
        },
        "properties": {
          "access_token": {
            "description": "You may use this token in place of an API key to make OAuth requests on a user's behalf.",
            "type": "string"
          },
          "token_type": {
            "description": "The type of OAuth token.",
            "enum": [
              "bearer"
            ],
            "type": "string"
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `oauth_token`.",
            "enum": [
              "oauth_token"
            ],
            "type": "string"
          }
        },
        "required": [
          "access_token",
          "token_type",
          "type"
        ],
        "title": "OAuth Token",
        "type": "object",
        "x-tag": "OAuth Tokens",
        "x-title-plural": "OAuth Tokens"
      },
      "pending_transaction": {
        "description": "Pending Transactions are potential future additions and removals of money from your bank account.",
        "example": {
          "account_id": "account_in71c4amph0vgo2qllky",
          "amount": 100,
          "completed_at": null,
          "created_at": "2020-01-31T23:59:59Z",
          "currency": "USD",
          "description": "INVOICE 2468",
          "id": "pending_transaction_k1sfetcau2qbvjbzgju4",
          "route_id": "card_oubs0hwk5rn6knuecxg2",
          "route_type": "card",
          "source": {
            "ach_transfer_instruction": {
              "amount": 100,
              "transfer_id": "ach_transfer_uoxatyh3lt5evrsdvo7q"
            },
            "category": "ach_transfer_instruction"
          },
          "status": "pending",
          "type": "pending_transaction"
        },
        "properties": {
          "account_id": {
            "description": "The identifier for the account this Pending Transaction belongs to.",
            "type": "string"
          },
          "amount": {
            "description": "The Pending Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.",
            "type": "integer"
          },
          "completed_at": {
            "anyOf": [
              {
                "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Pending Transaction was completed.",
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "created_at": {
            "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Pending Transaction occurred.",
            "format": "date-time",
            "type": "string"
          },
          "currency": {
            "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Pending Transaction's currency. This will match the currency on the Pending Transaction's Account.",
            "enum": [
              "CAD",
              "CHF",
              "EUR",
              "GBP",
              "JPY",
              "USD"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "Canadian Dollar (CAD)",
              "Swiss Franc (CHF)",
              "Euro (EUR)",
              "British Pound (GBP)",
              "Japanese Yen (JPY)",
              "US Dollar (USD)"
            ]
          },
          "description": {
            "description": "For a Pending Transaction related to a transfer, this is the description you provide. For a Pending Transaction related to a payment, this is the description the vendor provides.",
            "type": "string"
          },
          "id": {
            "description": "The Pending Transaction identifier.",
            "type": "string"
          },
          "route_id": {
            "anyOf": [
              {
                "description": "The identifier for the route this Pending Transaction came through. Routes are things like cards and ACH details.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "route_type": {
            "anyOf": [
              {
                "description": "The type of the route this Pending Transaction came through.",
                "enum": [
                  "account_number",
                  "card",
                  "lockbox"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "An Account Number.",
                  "A Card.",
                  "A Lockbox."
                ]
              },
              {
                "type": "null"
              }
            ]
          },
          "source": {
            "description": "This is an object giving more details on the network-level event that caused the Pending Transaction. For example, for a card transaction this lists the merchant's industry and location.",
            "example": {
              "ach_transfer_instruction": {
                "amount": 100,
                "transfer_id": "ach_transfer_uoxatyh3lt5evrsdvo7q"
              },
              "category": "ach_transfer_instruction"
            },
            "properties": {
              "account_transfer_instruction": {
                "anyOf": [
                  {
                    "description": "An Account Transfer Instruction object. This field will be present in the JSON response if and only if `category` is equal to `account_transfer_instruction`.",
                    "example": {
                      "amount": 100,
                      "currency": "USD",
                      "transfer_id": "account_transfer_7k9qe1ysdgqztnt63l7n"
                    },
                    "properties": {
                      "amount": {
                        "description": "The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
                        "type": "integer"
                      },
                      "currency": {
                        "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.",
                        "enum": [
                          "CAD",
                          "CHF",
                          "EUR",
                          "GBP",
                          "JPY",
                          "USD"
                        ],
                        "type": "string",
                        "x-enum-descriptions": [
                          "Canadian Dollar (CAD)",
                          "Swiss Franc (CHF)",
                          "Euro (EUR)",
                          "British Pound (GBP)",
                          "Japanese Yen (JPY)",
                          "US Dollar (USD)"
                        ]
                      },
                      "transfer_id": {
                        "description": "The identifier of the Account Transfer that led to this Pending Transaction.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "amount",
                      "currency",
                      "transfer_id"
                    ],
                    "title": "Account Transfer Instruction",
                    "type": "object",
                    "x-title-plural": "Account Transfer Instructions"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "ach_transfer_instruction": {
                "anyOf": [
                  {
                    "description": "An ACH Transfer Instruction object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_instruction`.",
                    "example": {
                      "amount": 100,
                      "transfer_id": "ach_transfer_uoxatyh3lt5evrsdvo7q"
                    },
                    "properties": {
                      "amount": {
                        "description": "The pending amount in USD cents.",
                        "type": "integer"
                      },
                      "transfer_id": {
                        "description": "The identifier of the ACH Transfer that led to this Pending Transaction.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "amount",
                      "transfer_id"
                    ],
                    "title": "ACH Transfer Instruction",
                    "type": "object",
                    "x-title-plural": "ACH Transfer Instructions"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "card_authorization": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/card_authorization",
                    "description": "A Card Authorization object. This field will be present in the JSON response if and only if `category` is equal to `card_authorization`. Card Authorizations are temporary holds placed on a customers funds with the intent to later clear a transaction."
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "category": {
                "description": "The type of the resource. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.",
                "enum": [
                  "account_transfer_instruction",
                  "ach_transfer_instruction",
                  "card_authorization",
                  "check_deposit_instruction",
                  "check_transfer_instruction",
                  "inbound_funds_hold",
                  "real_time_payments_transfer_instruction",
                  "wire_transfer_instruction",
                  "inbound_wire_transfer_reversal",
                  "other"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "Account Transfer Instruction: details will be under the `account_transfer_instruction` object.",
                  "ACH Transfer Instruction: details will be under the `ach_transfer_instruction` object.",
                  "Card Authorization: details will be under the `card_authorization` object.",
                  "Check Deposit Instruction: details will be under the `check_deposit_instruction` object.",
                  "Check Transfer Instruction: details will be under the `check_transfer_instruction` object.",
                  "Inbound Funds Hold: details will be under the `inbound_funds_hold` object.",
                  "Real-Time Payments Transfer Instruction: details will be under the `real_time_payments_transfer_instruction` object.",
                  "Wire Transfer Instruction: details will be under the `wire_transfer_instruction` object.",
                  "Inbound Wire Transfer Reversal: details will be under the `inbound_wire_transfer_reversal` object.",
                  "The Pending Transaction was made for an undocumented or deprecated reason."
                ]
              },
              "check_deposit_instruction": {
                "anyOf": [
                  {
                    "description": "A Check Deposit Instruction object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_instruction`.",
                    "example": {
                      "amount": 100,
                      "back_image_file_id": "file_26khfk98mzfz90a11oqx",
                      "check_deposit_id": "check_deposit_f06n9gpg7sxn8t19lfc1",
                      "currency": "USD",
                      "front_image_file_id": "file_makxrc67oh9l6sg7w9yc"
                    },
                    "properties": {
                      "amount": {
                        "description": "The pending amount in USD cents.",
                        "type": "integer"
                      },
                      "back_image_file_id": {
                        "anyOf": [
                          {
                            "description": "The identifier of the File containing the image of the back of the check that was deposited.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "check_deposit_id": {
                        "anyOf": [
                          {
                            "description": "The identifier of the Check Deposit.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "currency": {
                        "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.",
                        "enum": [
                          "CAD",
                          "CHF",
                          "EUR",
                          "GBP",
                          "JPY",
                          "USD"
                        ],
                        "type": "string",
                        "x-enum-descriptions": [
                          "Canadian Dollar (CAD)",
                          "Swiss Franc (CHF)",
                          "Euro (EUR)",
                          "British Pound (GBP)",
                          "Japanese Yen (JPY)",
                          "US Dollar (USD)"
                        ]
                      },
                      "front_image_file_id": {
                        "description": "The identifier of the File containing the image of the front of the check that was deposited.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "amount",
                      "currency",
                      "front_image_file_id",
                      "back_image_file_id",
                      "check_deposit_id"
                    ],
                    "title": "Check Deposit Instruction",
                    "type": "object",
                    "x-title-plural": "Check Deposit Instructions"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "check_transfer_instruction": {
                "anyOf": [
                  {
                    "description": "A Check Transfer Instruction object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_instruction`.",
                    "example": {
                      "amount": 100,
                      "currency": "USD",
                      "transfer_id": "check_transfer_30b43acfu9vw8fyc4f5"
                    },
                    "properties": {
                      "amount": {
                        "description": "The transfer amount in USD cents.",
                        "type": "integer"
                      },
                      "currency": {
                        "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.",
                        "enum": [
                          "CAD",
                          "CHF",
                          "EUR",
                          "GBP",
                          "JPY",
                          "USD"
                        ],
                        "type": "string",
                        "x-enum-descriptions": [
                          "Canadian Dollar (CAD)",
                          "Swiss Franc (CHF)",
                          "Euro (EUR)",
                          "British Pound (GBP)",
                          "Japanese Yen (JPY)",
                          "US Dollar (USD)"
                        ]
                      },
                      "transfer_id": {
                        "description": "The identifier of the Check Transfer that led to this Pending Transaction.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "amount",
                      "currency",
                      "transfer_id"
                    ],
                    "title": "Check Transfer Instruction",
                    "type": "object",
                    "x-title-plural": "Check Transfer Instructions"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "inbound_funds_hold": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/inbound_funds_hold",
                    "description": "An Inbound Funds Hold object. This field will be present in the JSON response if and only if `category` is equal to `inbound_funds_hold`. We hold funds for certain transaction types to account for return windows where funds might still be clawed back by the sending institution."
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "inbound_wire_transfer_reversal": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/inbound_wire_transfer_reversal",
                    "description": "An Inbound Wire Transfer Reversal object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_transfer_reversal`. An Inbound Wire Transfer Reversal is created when Increase has received a wire and the User requests that it be reversed."
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "other": {
                "anyOf": [
                  {
                    "description": "If the category of this Transaction source is equal to `other`, this field will contain an empty object, otherwise it will contain null.",
                    "properties": {},
                    "title": "Other",
                    "type": "object",
                    "x-title-plural": "Others"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "real_time_payments_transfer_instruction": {
                "anyOf": [
                  {
                    "description": "A Real-Time Payments Transfer Instruction object. This field will be present in the JSON response if and only if `category` is equal to `real_time_payments_transfer_instruction`.",
                    "example": {
                      "amount": 100,
                      "transfer_id": "real_time_payments_transfer_iyuhl5kdn7ssmup83mvq"
                    },
                    "properties": {
                      "amount": {
                        "description": "The transfer amount in USD cents.",
                        "type": "integer"
                      },
                      "transfer_id": {
                        "description": "The identifier of the Real-Time Payments Transfer that led to this Pending Transaction.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "amount",
                      "transfer_id"
                    ],
                    "title": "Real-Time Payments Transfer Instruction",
                    "type": "object",
                    "x-title-plural": "Real-Time Payments Transfer Instructions"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "wire_transfer_instruction": {
                "anyOf": [
                  {
                    "description": "A Wire Transfer Instruction object. This field will be present in the JSON response if and only if `category` is equal to `wire_transfer_instruction`.",
                    "example": {
                      "account_number": "987654321",
                      "amount": 100,
                      "message_to_recipient": "HELLO",
                      "routing_number": "101050001",
                      "transfer_id": "wire_transfer_5akynk7dqsq25qwk9q2u"
                    },
                    "properties": {
                      "account_number": {
                        "description": "The account number for the destination account.",
                        "type": "string"
                      },
                      "amount": {
                        "description": "The transfer amount in USD cents.",
                        "type": "integer"
                      },
                      "message_to_recipient": {
                        "description": "The message that will show on the recipient's bank statement.",
                        "type": "string"
                      },
                      "routing_number": {
                        "description": "The American Bankers' Association (ABA) Routing Transit Number (RTN) for the destination account.",
                        "type": "string"
                      },
                      "transfer_id": {
                        "description": "The identifier of the Wire Transfer that led to this Pending Transaction.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "amount",
                      "account_number",
                      "routing_number",
                      "message_to_recipient",
                      "transfer_id"
                    ],
                    "title": "Wire Transfer Instruction",
                    "type": "object",
                    "x-title-plural": "Wire Transfer Instructions"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "required": [
              "category",
              "account_transfer_instruction",
              "ach_transfer_instruction",
              "card_authorization",
              "check_deposit_instruction",
              "check_transfer_instruction",
              "inbound_funds_hold",
              "real_time_payments_transfer_instruction",
              "wire_transfer_instruction",
              "inbound_wire_transfer_reversal",
              "other"
            ],
            "title": "Pending Transaction Source",
            "type": "object",
            "x-title-plural": "Pending Transaction Sources"
          },
          "status": {
            "description": "Whether the Pending Transaction has been confirmed and has an associated Transaction.",
            "enum": [
              "pending",
              "complete"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The Pending Transaction is still awaiting confirmation.",
              "The Pending Transaction is confirmed. An associated Transaction exists for this object. The Pending Transaction will no longer count against your balance and can generally be hidden from UIs, etc."
            ]
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `pending_transaction`.",
            "enum": [
              "pending_transaction"
            ],
            "type": "string"
          }
        },
        "required": [
          "account_id",
          "amount",
          "currency",
          "completed_at",
          "created_at",
          "description",
          "id",
          "route_id",
          "route_type",
          "source",
          "status",
          "type"
        ],
        "title": "Pending Transaction",
        "type": "object",
        "x-tag": "Pending Transactions",
        "x-title-plural": "Pending Transactions"
      },
      "pending_transaction_list": {
        "description": "A list of Pending Transaction objects.",
        "example": {
          "data": [
            {
              "account_id": "account_in71c4amph0vgo2qllky",
              "amount": 100,
              "completed_at": null,
              "created_at": "2020-01-31T23:59:59Z",
              "currency": "USD",
              "description": "INVOICE 2468",
              "id": "pending_transaction_k1sfetcau2qbvjbzgju4",
              "route_id": "card_oubs0hwk5rn6knuecxg2",
              "route_type": "card",
              "source": {
                "ach_transfer_instruction": {
                  "amount": 100,
                  "transfer_id": "ach_transfer_uoxatyh3lt5evrsdvo7q"
                },
                "category": "ach_transfer_instruction"
              },
              "status": "pending",
              "type": "pending_transaction"
            }
          ],
          "next_cursor": "v57w5d"
        },
        "properties": {
          "data": {
            "description": "The contents of the list.",
            "items": {
              "$ref": "#/components/schemas/pending_transaction"
            },
            "type": "array"
          },
          "next_cursor": {
            "anyOf": [
              {
                "description": "A pointer to a place in the list.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "Pending Transaction List",
        "type": "object",
        "x-title-plural": "Pending Transaction Lists"
      },
      "physical_card": {
        "description": "Custom physical Visa cards that are shipped to your customers. The artwork is configurable by a connected [Card Profile](/documentation/api#card-profiles). The same Card can be used for multiple Physical Cards. Printing cards incurs a fee. Please contact [support@increase.com](mailto:support@increase.com) for pricing!",
        "example": {
          "card_id": "card_oubs0hwk5rn6knuecxg2",
          "cardholder": {
            "first_name": "Ian",
            "last_name": "Crease"
          },
          "created_at": "2020-01-31T23:59:59Z",
          "id": "physical_card_ode8duyq5v2ynhjoharl",
          "idempotency_key": null,
          "physical_card_profile_id": "physical_card_profile_m534d5rn9qyy9ufqxoec",
          "shipment": {
            "address": {
              "city": "New York",
              "line1": "33 Liberty Street",
              "line2": "Unit 2",
              "line3": null,
              "name": "Ian Crease",
              "postal_code": "10045",
              "state": "NY"
            },
            "method": "usps",
            "status": "pending",
            "tracking": null
          },
          "status": "active",
          "type": "physical_card"
        },
        "properties": {
          "card_id": {
            "description": "The identifier for the Card this Physical Card represents.",
            "type": "string"
          },
          "cardholder": {
            "description": "Details about the cardholder, as it appears on the printed card.",
            "properties": {
              "first_name": {
                "description": "The cardholder's first name.",
                "type": "string"
              },
              "last_name": {
                "description": "The cardholder's last name.",
                "type": "string"
              }
            },
            "required": [
              "first_name",
              "last_name"
            ],
            "title": "Cardholder",
            "type": "object",
            "x-title-plural": "Cardholders"
          },
          "created_at": {
            "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Physical Card was created.",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "The physical card identifier.",
            "type": "string"
          },
          "idempotency_key": {
            "anyOf": [
              {
                "description": "The idempotency key you chose for this object. This value is unique across Increase and is used to ensure that a request is only processed once. Learn more about [idempotency](https://increase.com/documentation/idempotency-keys).",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "physical_card_profile_id": {
            "anyOf": [
              {
                "description": "The Physical Card Profile used for this Physical Card.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "shipment": {
            "description": "The details used to ship this physical card.",
            "properties": {
              "address": {
                "description": "The location to where the card's packing label is addressed.",
                "properties": {
                  "city": {
                    "description": "The city of the shipping address.",
                    "type": "string"
                  },
                  "line1": {
                    "description": "The first line of the shipping address.",
                    "type": "string"
                  },
                  "line2": {
                    "anyOf": [
                      {
                        "description": "The second line of the shipping address.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "line3": {
                    "anyOf": [
                      {
                        "description": "The third line of the shipping address.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "name": {
                    "description": "The name of the recipient.",
                    "type": "string"
                  },
                  "postal_code": {
                    "description": "The postal code of the shipping address.",
                    "type": "string"
                  },
                  "state": {
                    "description": "The US state of the shipping address.",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "line1",
                  "line2",
                  "line3",
                  "city",
                  "state",
                  "postal_code"
                ],
                "title": "Address",
                "type": "object",
                "x-title-plural": "Addresses"
              },
              "method": {
                "description": "The shipping method.",
                "enum": [
                  "usps",
                  "fedex_priority_overnight",
                  "fedex_2_day"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "USPS Post with tracking.",
                  "FedEx Priority Overnight, no signature.",
                  "FedEx 2-day."
                ]
              },
              "status": {
                "description": "The status of this shipment.",
                "enum": [
                  "pending",
                  "canceled",
                  "submitted",
                  "acknowledged",
                  "rejected",
                  "shipped",
                  "returned"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "The physical card has not yet been shipped.",
                  "The physical card shipment was canceled prior to submission.",
                  "The physical card shipment has been submitted to the card fulfillment provider.",
                  "The physical card shipment has been acknowledged by the card fulfillment provider and will be processed in their next batch.",
                  "The physical card shipment was rejected by the card printer due to an error.",
                  "The physical card has been shipped.",
                  "The physical card shipment was returned to the sender and destroyed by the production facility."
                ]
              },
              "tracking": {
                "anyOf": [
                  {
                    "description": "Tracking details for the shipment.",
                    "properties": {
                      "number": {
                        "description": "The tracking number.",
                        "type": "string"
                      },
                      "return_number": {
                        "anyOf": [
                          {
                            "description": "For returned shipments, the tracking number of the return shipment.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "return_reason": {
                        "anyOf": [
                          {
                            "description": "For returned shipments, this describes why the package was returned.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "shipped_at": {
                        "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the fulfillment provider marked the card as ready for pick-up by the shipment carrier.",
                        "format": "date-time",
                        "type": "string"
                      }
                    },
                    "required": [
                      "number",
                      "shipped_at",
                      "return_reason",
                      "return_number"
                    ],
                    "title": "Tracking",
                    "type": "object",
                    "x-title-plural": "Trackings"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "required": [
              "method",
              "status",
              "tracking",
              "address"
            ],
            "title": "Shipment",
            "type": "object",
            "x-title-plural": "Shipments"
          },
          "status": {
            "description": "The status of the Physical Card.",
            "enum": [
              "active",
              "disabled",
              "canceled"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The physical card is active.",
              "The physical card is temporarily disabled.",
              "The physical card is permanently canceled."
            ]
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `physical_card`.",
            "enum": [
              "physical_card"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "card_id",
          "physical_card_profile_id",
          "created_at",
          "status",
          "cardholder",
          "shipment",
          "idempotency_key",
          "type"
        ],
        "title": "Physical Card",
        "type": "object",
        "x-tag": "Physical Cards",
        "x-title-plural": "Physical Cards"
      },
      "physical_card_list": {
        "description": "A list of Physical Card objects.",
        "example": {
          "data": [
            {
              "card_id": "card_oubs0hwk5rn6knuecxg2",
              "cardholder": {
                "first_name": "Ian",
                "last_name": "Crease"
              },
              "created_at": "2020-01-31T23:59:59Z",
              "id": "physical_card_ode8duyq5v2ynhjoharl",
              "idempotency_key": null,
              "physical_card_profile_id": "physical_card_profile_m534d5rn9qyy9ufqxoec",
              "shipment": {
                "address": {
                  "city": "New York",
                  "line1": "33 Liberty Street",
                  "line2": "Unit 2",
                  "line3": null,
                  "name": "Ian Crease",
                  "postal_code": "10045",
                  "state": "NY"
                },
                "method": "usps",
                "status": "pending",
                "tracking": null
              },
              "status": "active",
              "type": "physical_card"
            }
          ],
          "next_cursor": "v57w5d"
        },
        "properties": {
          "data": {
            "description": "The contents of the list.",
            "items": {
              "$ref": "#/components/schemas/physical_card"
            },
            "type": "array"
          },
          "next_cursor": {
            "anyOf": [
              {
                "description": "A pointer to a place in the list.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "Physical Card List",
        "type": "object",
        "x-title-plural": "Physical Card Lists"
      },
      "physical_card_profile": {
        "description": "This contains artwork and metadata relating to a Physical Card's appearance. For more information, see our guide on [physical card artwork](https://increase.com/documentation/card-art-physical-cards).",
        "example": {
          "back_image_file_id": "file_makxrc67oh9l6sg7w9yc",
          "carrier_image_file_id": "file_makxrc67oh9l6sg7w9yc",
          "contact_phone": "+16505046304",
          "created_at": "2020-01-31T23:59:59Z",
          "creator": "user",
          "deprecated_card_profile_id": null,
          "description": "Corporate logo card",
          "front_image_file_id": "file_makxrc67oh9l6sg7w9yc",
          "front_text": null,
          "id": "physical_card_profile_m534d5rn9qyy9ufqxoec",
          "idempotency_key": null,
          "is_default": false,
          "status": "active",
          "type": "physical_card_profile"
        },
        "properties": {
          "back_image_file_id": {
            "anyOf": [
              {
                "description": "The identifier of the File containing the physical card's back image.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "carrier_image_file_id": {
            "anyOf": [
              {
                "description": "The identifier of the File containing the physical card's carrier image.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "contact_phone": {
            "anyOf": [
              {
                "description": "A phone number the user can contact to receive support for their card.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "created_at": {
            "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was created.",
            "format": "date-time",
            "type": "string"
          },
          "creator": {
            "description": "The creator of this Physical Card Profile.",
            "enum": [
              "increase",
              "user"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "This Physical Card Profile was created by Increase.",
              "This Physical Card Profile was created by you."
            ]
          },
          "description": {
            "description": "A description you can use to identify the Physical Card Profile.",
            "type": "string"
          },
          "front_image_file_id": {
            "anyOf": [
              {
                "description": "The identifier of the File containing the physical card's front image.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "id": {
            "description": "The Card Profile identifier.",
            "type": "string"
          },
          "idempotency_key": {
            "anyOf": [
              {
                "description": "The idempotency key you chose for this object. This value is unique across Increase and is used to ensure that a request is only processed once. Learn more about [idempotency](https://increase.com/documentation/idempotency-keys).",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "is_default": {
            "description": "Whether this Physical Card Profile is the default for all cards in its Increase group.",
            "type": "boolean"
          },
          "status": {
            "description": "The status of the Physical Card Profile.",
            "enum": [
              "pending_creating",
              "pending_reviewing",
              "rejected",
              "pending_submitting",
              "active",
              "archived"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The Card Profile has not yet been processed by Increase.",
              "The card profile is awaiting review by Increase.",
              "There is an issue with the Physical Card Profile preventing it from use.",
              "The card profile is awaiting submission to the fulfillment provider.",
              "The Physical Card Profile has been submitted to the fulfillment provider and is ready to use.",
              "The Physical Card Profile has been archived."
            ]
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `physical_card_profile`.",
            "enum": [
              "physical_card_profile"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "status",
          "description",
          "is_default",
          "creator",
          "contact_phone",
          "front_image_file_id",
          "back_image_file_id",
          "carrier_image_file_id",
          "type",
          "idempotency_key"
        ],
        "title": "Physical Card Profile",
        "type": "object",
        "x-tag": "Physical Card Profiles",
        "x-title-plural": "Physical Card Profiles"
      },
      "physical_card_profile_list": {
        "description": "A list of Physical Card Profile objects.",
        "example": {
          "data": [
            {
              "back_image_file_id": "file_makxrc67oh9l6sg7w9yc",
              "carrier_image_file_id": "file_makxrc67oh9l6sg7w9yc",
              "contact_phone": "+16505046304",
              "created_at": "2020-01-31T23:59:59Z",
              "creator": "user",
              "deprecated_card_profile_id": null,
              "description": "Corporate logo card",
              "front_image_file_id": "file_makxrc67oh9l6sg7w9yc",
              "front_text": null,
              "id": "physical_card_profile_m534d5rn9qyy9ufqxoec",
              "idempotency_key": null,
              "is_default": false,
              "status": "active",
              "type": "physical_card_profile"
            }
          ],
          "next_cursor": "v57w5d"
        },
        "properties": {
          "data": {
            "description": "The contents of the list.",
            "items": {
              "$ref": "#/components/schemas/physical_card_profile"
            },
            "type": "array"
          },
          "next_cursor": {
            "anyOf": [
              {
                "description": "A pointer to a place in the list.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "Physical Card Profile List",
        "type": "object",
        "x-title-plural": "Physical Card Profile Lists"
      },
      "program": {
        "description": "Programs determine the compliance and commercial terms of Accounts. By default, you have a Commercial Banking program for managing your own funds. If you are lending or managing funds on behalf of your customers, or otherwise engaged in regulated activity, we will work together to create additional Programs for you.",
        "example": {
          "bank": "first_internet_bank",
          "billing_account_id": null,
          "created_at": "2020-01-31T23:59:59Z",
          "default_digital_card_profile_id": null,
          "id": "program_i2v2os4mwza1oetokh9i",
          "interest_rate": "0.01",
          "name": "Commercial Banking",
          "type": "program",
          "updated_at": "2020-01-31T23:59:59Z"
        },
        "properties": {
          "bank": {
            "description": "The Bank the Program is with.",
            "enum": [
              "core_bank",
              "first_internet_bank",
              "grasshopper_bank"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "Core Bank",
              "First Internet Bank of Indiana",
              "Grasshopper Bank"
            ]
          },
          "billing_account_id": {
            "anyOf": [
              {
                "description": "The Program billing account.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "created_at": {
            "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Program was created.",
            "format": "date-time",
            "type": "string"
          },
          "default_digital_card_profile_id": {
            "anyOf": [
              {
                "description": "The default configuration for digital cards attached to this Program.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "id": {
            "description": "The Program identifier.",
            "type": "string"
          },
          "interest_rate": {
            "description": "The Interest Rate currently being earned on the accounts in this program, as a string containing a decimal number. For example, a 1% interest rate would be represented as \"0.01\".",
            "pattern": "^-?\\d+(\\.\\d+)?$",
            "type": "string"
          },
          "name": {
            "description": "The name of the Program.",
            "type": "string"
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `program`.",
            "enum": [
              "program"
            ],
            "type": "string"
          },
          "updated_at": {
            "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Program was last updated.",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "name",
          "created_at",
          "updated_at",
          "id",
          "billing_account_id",
          "default_digital_card_profile_id",
          "interest_rate",
          "bank",
          "type"
        ],
        "title": "Program",
        "type": "object",
        "x-tag": "Programs",
        "x-title-plural": "Programs"
      },
      "program_list": {
        "description": "A list of Program objects.",
        "example": {
          "data": [
            {
              "bank": "first_internet_bank",
              "billing_account_id": null,
              "created_at": "2020-01-31T23:59:59Z",
              "default_digital_card_profile_id": null,
              "id": "program_i2v2os4mwza1oetokh9i",
              "interest_rate": "0.01",
              "name": "Commercial Banking",
              "type": "program",
              "updated_at": "2020-01-31T23:59:59Z"
            }
          ],
          "next_cursor": "v57w5d"
        },
        "properties": {
          "data": {
            "description": "The contents of the list.",
            "items": {
              "$ref": "#/components/schemas/program"
            },
            "type": "array"
          },
          "next_cursor": {
            "anyOf": [
              {
                "description": "A pointer to a place in the list.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "Program List",
        "type": "object",
        "x-title-plural": "Program Lists"
      },
      "proof_of_authorization_request": {
        "description": "A request for proof of authorization for one or more ACH debit transfers.",
        "example": {
          "ach_transfers": [
            {
              "id": "ach_transfer_uoxatyh3lt5evrsdvo7q"
            }
          ],
          "created_at": "2020-01-31T23:59:59Z",
          "due_on": "2020-01-31T23:59:59Z",
          "id": "proof_of_authorization_request_iwp8no25h3rjvil6ad3b",
          "type": "proof_of_authorization_request",
          "updated_at": "2020-01-31T23:59:59Z"
        },
        "properties": {
          "ach_transfers": {
            "description": "The ACH Transfers associated with the request.",
            "items": {
              "properties": {
                "id": {
                  "description": "The ACH Transfer identifier.",
                  "type": "string"
                }
              },
              "required": [
                "id"
              ],
              "title": "ACH Transfers Element",
              "type": "object",
              "x-title-plural": "ACH Transfers Elements"
            },
            "type": "array"
          },
          "created_at": {
            "description": "The time the Proof of Authorization Request was created.",
            "format": "date-time",
            "type": "string"
          },
          "due_on": {
            "description": "The time the Proof of Authorization Request is due.",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "The Proof of Authorization Request identifier.",
            "type": "string"
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `proof_of_authorization_request`.",
            "enum": [
              "proof_of_authorization_request"
            ],
            "type": "string"
          },
          "updated_at": {
            "description": "The time the Proof of Authorization Request was last updated.",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "due_on",
          "ach_transfers",
          "type"
        ],
        "title": "Proof of Authorization Request",
        "type": "object",
        "x-tag": "Proof of Authorization Requests",
        "x-title-plural": "Proof of Authorization Requests"
      },
      "proof_of_authorization_request_list": {
        "description": "A list of Proof of Authorization Request objects.",
        "example": {
          "data": [
            {
              "ach_transfers": [
                {
                  "id": "ach_transfer_uoxatyh3lt5evrsdvo7q"
                }
              ],
              "created_at": "2020-01-31T23:59:59Z",
              "due_on": "2020-01-31T23:59:59Z",
              "id": "proof_of_authorization_request_iwp8no25h3rjvil6ad3b",
              "type": "proof_of_authorization_request",
              "updated_at": "2020-01-31T23:59:59Z"
            }
          ],
          "next_cursor": "v57w5d"
        },
        "properties": {
          "data": {
            "description": "The contents of the list.",
            "items": {
              "$ref": "#/components/schemas/proof_of_authorization_request"
            },
            "type": "array"
          },
          "next_cursor": {
            "anyOf": [
              {
                "description": "A pointer to a place in the list.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "Proof of Authorization Request List",
        "type": "object",
        "x-title-plural": "Proof of Authorization Request Lists"
      },
      "proof_of_authorization_request_submission": {
        "description": "Information submitted in response to a proof of authorization request. Per Nacha's guidance on proof of authorization, the originator must ensure that the authorization complies with applicable legal requirements, is readily identifiable as an authorization, and has clear and readily understandable terms.",
        "example": {
          "additional_evidence_file_id": null,
          "authorization_terms": "I agree to the terms.",
          "authorized_at": "2020-01-31T23:59:59Z",
          "authorizer_company": "National Phonograph Company",
          "authorizer_email": "user@example.com",
          "authorizer_ip_address": "123.45.67.89",
          "authorizer_name": "Ian Crease",
          "created_at": "2020-01-31T23:59:59Z",
          "customer_has_been_offboarded": false,
          "id": "proof_of_authorization_request_submission_uqhqroiley7n0097vizn",
          "idempotency_key": null,
          "proof_of_authorization_request_id": "proof_of_authorization_request_iwp8no25h3rjvil6ad3b",
          "status": "pending_review",
          "type": "proof_of_authorization_request_submission",
          "updated_at": "2020-01-31T23:59:59Z",
          "validated_account_ownership_via_credential": false,
          "validated_account_ownership_with_account_statement": false,
          "validated_account_ownership_with_microdeposit": true
        },
        "properties": {
          "additional_evidence_file_id": {
            "anyOf": [
              {
                "description": "File containing additional evidence.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "authorization_terms": {
            "description": "Terms of authorization.",
            "type": "string"
          },
          "authorized_at": {
            "description": "Time of authorization.",
            "format": "date-time",
            "type": "string"
          },
          "authorizer_company": {
            "anyOf": [
              {
                "description": "Company of the authorizer.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "authorizer_email": {
            "anyOf": [
              {
                "description": "Email of the authorizer.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "authorizer_ip_address": {
            "anyOf": [
              {
                "description": "IP address of the authorizer.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "authorizer_name": {
            "anyOf": [
              {
                "description": "Name of the authorizer.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "created_at": {
            "description": "The time the Proof of Authorization Request Submission was created.",
            "format": "date-time",
            "type": "string"
          },
          "customer_has_been_offboarded": {
            "anyOf": [
              {
                "description": "Whether the customer has been offboarded.",
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ]
          },
          "id": {
            "description": "The Proof of Authorization Request Submission identifier.",
            "type": "string"
          },
          "idempotency_key": {
            "anyOf": [
              {
                "description": "The idempotency key you chose for this object. This value is unique across Increase and is used to ensure that a request is only processed once. Learn more about [idempotency](https://increase.com/documentation/idempotency-keys).",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "proof_of_authorization_request_id": {
            "description": "ID of the proof of authorization request.",
            "type": "string"
          },
          "status": {
            "description": "Status of the proof of authorization request submission.",
            "enum": [
              "pending_review",
              "rejected",
              "canceled",
              "pending_sending",
              "sent"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The proof of authorization request submission is pending review.",
              "The proof of authorization request submission was rejected.",
              "The proof of authorization request submission was canceled and replaced with another.",
              "The proof of authorization request submission is pending sending.",
              "The proof of authorization request submission was sent."
            ]
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `proof_of_authorization_request_submission`.",
            "enum": [
              "proof_of_authorization_request_submission"
            ],
            "type": "string"
          },
          "updated_at": {
            "description": "The time the Proof of Authorization Request Submission was last updated.",
            "format": "date-time",
            "type": "string"
          },
          "validated_account_ownership_via_credential": {
            "anyOf": [
              {
                "description": "Whether account ownership was validated via credential (for instance, Plaid).",
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ]
          },
          "validated_account_ownership_with_account_statement": {
            "anyOf": [
              {
                "description": "Whether account ownership was validated with an account statement.",
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ]
          },
          "validated_account_ownership_with_microdeposit": {
            "anyOf": [
              {
                "description": "Whether account ownership was validated with microdeposit.",
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "authorizer_name",
          "authorizer_email",
          "authorizer_company",
          "authorizer_ip_address",
          "authorized_at",
          "authorization_terms",
          "additional_evidence_file_id",
          "proof_of_authorization_request_id",
          "status",
          "validated_account_ownership_with_microdeposit",
          "validated_account_ownership_with_account_statement",
          "validated_account_ownership_via_credential",
          "customer_has_been_offboarded",
          "idempotency_key",
          "type"
        ],
        "title": "Proof of Authorization Request Submission",
        "type": "object",
        "x-tag": "Proof of Authorization Request Submissions",
        "x-title-plural": "Proof of Authorization Request Submissions"
      },
      "proof_of_authorization_request_submission_list": {
        "description": "A list of Proof of Authorization Request Submission objects.",
        "example": {
          "data": [
            {
              "additional_evidence_file_id": null,
              "authorization_terms": "I agree to the terms.",
              "authorized_at": "2020-01-31T23:59:59Z",
              "authorizer_company": "National Phonograph Company",
              "authorizer_email": "user@example.com",
              "authorizer_ip_address": "123.45.67.89",
              "authorizer_name": "Ian Crease",
              "created_at": "2020-01-31T23:59:59Z",
              "customer_has_been_offboarded": false,
              "id": "proof_of_authorization_request_submission_uqhqroiley7n0097vizn",
              "idempotency_key": null,
              "proof_of_authorization_request_id": "proof_of_authorization_request_iwp8no25h3rjvil6ad3b",
              "status": "pending_review",
              "type": "proof_of_authorization_request_submission",
              "updated_at": "2020-01-31T23:59:59Z",
              "validated_account_ownership_via_credential": false,
              "validated_account_ownership_with_account_statement": false,
              "validated_account_ownership_with_microdeposit": true
            }
          ],
          "next_cursor": "v57w5d"
        },
        "properties": {
          "data": {
            "description": "The contents of the list.",
            "items": {
              "$ref": "#/components/schemas/proof_of_authorization_request_submission"
            },
            "type": "array"
          },
          "next_cursor": {
            "anyOf": [
              {
                "description": "A pointer to a place in the list.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "Proof of Authorization Request Submission List",
        "type": "object",
        "x-title-plural": "Proof of Authorization Request Submission Lists"
      },
      "real_time_decision": {
        "description": "Real Time Decisions are created when your application needs to take action in real-time to some event such as a card authorization. For more information, see our [Real-Time Decisions guide](https://increase.com/documentation/real-time-decisions).",
        "example": {
          "card_authentication": null,
          "card_authentication_challenge": null,
          "card_authorization": {
            "account_id": "account_in71c4amph0vgo2qllky",
            "card_id": "card_oubs0hwk5rn6knuecxg2",
            "decision": "approve",
            "digital_wallet_token_id": null,
            "direction": "settlement",
            "merchant_acceptor_id": "5665270011000168",
            "merchant_category_code": "5734",
            "merchant_city": "New York",
            "merchant_country": "US",
            "merchant_descriptor": "AMAZON.COM",
            "merchant_postal_code": "10045",
            "merchant_state": "NY",
            "network_details": {
              "category": "visa",
              "visa": {
                "electronic_commerce_indicator": "secure_electronic_commerce",
                "point_of_service_entry_mode": "manual",
                "stand_in_processing_reason": null
              }
            },
            "network_identifiers": {
              "retrieval_reference_number": "785867080153",
              "trace_number": "487941",
              "transaction_id": "627199945183184"
            },
            "network_risk_score": 10,
            "physical_card_id": null,
            "presentment_amount": 100,
            "presentment_currency": "USD",
            "processing_category": "purchase",
            "request_details": {
              "category": "initial_authorization",
              "incremental_authorization": null,
              "initial_authorization": {}
            },
            "settlement_amount": 100,
            "settlement_currency": "USD",
            "terminal_id": "RCN5VNXS",
            "upcoming_card_payment_id": "card_payment_nd3k2kacrqjli8482ave",
            "verification": {
              "card_verification_code": {
                "result": "match"
              },
              "cardholder_address": {
                "actual_line1": "33 Liberty Street",
                "actual_postal_code": "94131",
                "provided_line1": "33 Liberty Street",
                "provided_postal_code": "94132",
                "result": "postal_code_no_match_address_match"
              }
            }
          },
          "category": "card_authorization_requested",
          "created_at": "2020-01-31T23:59:59Z",
          "digital_wallet_authentication": null,
          "digital_wallet_token": null,
          "id": "real_time_decision_j76n2e810ezcg3zh5qtn",
          "status": "pending",
          "timeout_at": "2020-01-31T23:59:59Z",
          "type": "real_time_decision"
        },
        "properties": {
          "card_authentication": {
            "anyOf": [
              {
                "description": "Fields related to a 3DS authentication attempt.",
                "properties": {
                  "account_id": {
                    "description": "The identifier of the Account the card belongs to.",
                    "type": "string"
                  },
                  "card_id": {
                    "description": "The identifier of the Card that is being tokenized.",
                    "type": "string"
                  },
                  "decision": {
                    "anyOf": [
                      {
                        "description": "Whether or not the authentication attempt was approved.",
                        "enum": [
                          "approve",
                          "challenge",
                          "deny"
                        ],
                        "type": "string",
                        "x-enum-descriptions": [
                          "Approve the authentication attempt without triggering a challenge.",
                          "Request further validation before approving the authentication attempt.",
                          "Deny the authentication attempt."
                        ]
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "upcoming_card_payment_id": {
                    "description": "The identifier of the Card Payment this authentication attempt will belong to. Available in the API once the card authentication has completed.",
                    "type": "string"
                  }
                },
                "required": [
                  "card_id",
                  "account_id",
                  "upcoming_card_payment_id",
                  "decision"
                ],
                "title": "Card Authentication",
                "type": "object",
                "x-title-plural": "Card Authentications"
              },
              {
                "type": "null"
              }
            ]
          },
          "card_authentication_challenge": {
            "anyOf": [
              {
                "description": "Fields related to a 3DS authentication attempt.",
                "properties": {
                  "account_id": {
                    "description": "The identifier of the Account the card belongs to.",
                    "type": "string"
                  },
                  "card_id": {
                    "description": "The identifier of the Card that is being tokenized.",
                    "type": "string"
                  },
                  "card_payment_id": {
                    "description": "The identifier of the Card Payment this authentication challenge attempt belongs to.",
                    "type": "string"
                  },
                  "one_time_code": {
                    "description": "The one-time code delivered to the cardholder.",
                    "type": "string"
                  },
                  "result": {
                    "anyOf": [
                      {
                        "description": "Whether or not the challenge was delivered to the cardholder.",
                        "enum": [
                          "success",
                          "failure"
                        ],
                        "type": "string",
                        "x-enum-descriptions": [
                          "Your application successfully delivered the one-time code to the cardholder.",
                          "Your application was unable to deliver the one-time code to the cardholder."
                        ]
                      },
                      {
                        "type": "null"
                      }
                    ]
                  }
                },
                "required": [
                  "card_id",
                  "account_id",
                  "card_payment_id",
                  "one_time_code",
                  "result"
                ],
                "title": "Card Authentication Challenge",
                "type": "object",
                "x-title-plural": "Card Authentication Challenges"
              },
              {
                "type": "null"
              }
            ]
          },
          "card_authorization": {
            "anyOf": [
              {
                "description": "Fields related to a card authorization.",
                "properties": {
                  "account_id": {
                    "description": "The identifier of the Account the authorization will debit.",
                    "type": "string"
                  },
                  "card_id": {
                    "description": "The identifier of the Card that is being authorized.",
                    "type": "string"
                  },
                  "decision": {
                    "anyOf": [
                      {
                        "description": "Whether or not the authorization was approved.",
                        "enum": [
                          "approve",
                          "decline"
                        ],
                        "type": "string",
                        "x-enum-descriptions": [
                          "Approve the authorization.",
                          "Decline the authorization."
                        ]
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "digital_wallet_token_id": {
                    "anyOf": [
                      {
                        "description": "If the authorization was made via a Digital Wallet Token (such as an Apple Pay purchase), the identifier of the token that was used.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "direction": {
                    "description": "The direction describes the direction the funds will move, either from the cardholder to the merchant or from the merchant to the cardholder.",
                    "enum": [
                      "settlement",
                      "refund"
                    ],
                    "type": "string",
                    "x-enum-descriptions": [
                      "A regular card authorization where funds are debited from the cardholder.",
                      "A refund card authorization, sometimes referred to as a credit voucher authorization, where funds are credited to the cardholder."
                    ]
                  },
                  "merchant_acceptor_id": {
                    "description": "The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.",
                    "type": "string"
                  },
                  "merchant_category_code": {
                    "description": "The Merchant Category Code (commonly abbreviated as MCC) of the merchant the card is transacting with.",
                    "type": "string"
                  },
                  "merchant_city": {
                    "anyOf": [
                      {
                        "description": "The city the merchant resides in.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "merchant_country": {
                    "description": "The country the merchant resides in.",
                    "type": "string"
                  },
                  "merchant_descriptor": {
                    "description": "The merchant descriptor of the merchant the card is transacting with.",
                    "type": "string"
                  },
                  "merchant_postal_code": {
                    "anyOf": [
                      {
                        "description": "The merchant's postal code. For US merchants this is either a 5-digit or 9-digit ZIP code, where the first 5 and last 4 are separated by a dash.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "merchant_state": {
                    "anyOf": [
                      {
                        "description": "The state the merchant resides in.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "network_details": {
                    "description": "Fields specific to the `network`.",
                    "properties": {
                      "category": {
                        "description": "The payment network used to process this card authorization.",
                        "enum": [
                          "visa"
                        ],
                        "type": "string",
                        "x-enum-descriptions": [
                          "Visa"
                        ]
                      },
                      "visa": {
                        "anyOf": [
                          {
                            "description": "Fields specific to the `visa` network.",
                            "properties": {
                              "electronic_commerce_indicator": {
                                "anyOf": [
                                  {
                                    "description": "For electronic commerce transactions, this identifies the level of security used in obtaining the customer's payment credential. For mail or telephone order transactions, identifies the type of mail or telephone order.",
                                    "enum": [
                                      "mail_phone_order",
                                      "recurring",
                                      "installment",
                                      "unknown_mail_phone_order",
                                      "secure_electronic_commerce",
                                      "non_authenticated_security_transaction_at_3ds_capable_merchant",
                                      "non_authenticated_security_transaction",
                                      "non_secure_transaction"
                                    ],
                                    "type": "string",
                                    "x-enum-descriptions": [
                                      "Single transaction of a mail/phone order: Use to indicate that the transaction is a mail/phone order purchase, not a recurring transaction or installment payment. For domestic transactions in the US region, this value may also indicate one bill payment transaction in the card-present or card-absent environments.",
                                      "Recurring transaction: Payment indicator used to indicate a recurring transaction that originates from an acquirer in the US region.",
                                      "Installment payment: Payment indicator used to indicate one purchase of goods or services that is billed to the account in multiple charges over a period of time agreed upon by the cardholder and merchant from transactions that originate from an acquirer in the US region.",
                                      "Unknown classification: other mail order: Use to indicate that the type of mail/telephone order is unknown.",
                                      "Secure electronic commerce transaction: Use to indicate that the electronic commerce transaction has been authenticated using e.g., 3-D Secure",
                                      "Non-authenticated security transaction at a 3-D Secure-capable merchant, and merchant attempted to authenticate the cardholder using 3-D Secure: Use to identify an electronic commerce transaction where the merchant attempted to authenticate the cardholder using 3-D Secure, but was unable to complete the authentication because the issuer or cardholder does not participate in the 3-D Secure program.",
                                      "Non-authenticated security transaction: Use to identify an electronic commerce transaction that uses data encryption for security however , cardholder authentication is not performed using 3-D Secure.",
                                      "Non-secure transaction: Use to identify an electronic commerce transaction that has no data protection."
                                    ]
                                  },
                                  {
                                    "type": "null"
                                  }
                                ]
                              },
                              "point_of_service_entry_mode": {
                                "anyOf": [
                                  {
                                    "description": "The method used to enter the cardholder's primary account number and card expiration date.",
                                    "enum": [
                                      "unknown",
                                      "manual",
                                      "magnetic_stripe_no_cvv",
                                      "optical_code",
                                      "integrated_circuit_card",
                                      "contactless",
                                      "credential_on_file",
                                      "magnetic_stripe",
                                      "contactless_magnetic_stripe",
                                      "integrated_circuit_card_no_cvv"
                                    ],
                                    "type": "string",
                                    "x-enum-descriptions": [
                                      "Unknown",
                                      "Manual key entry",
                                      "Magnetic stripe read, without card verification value",
                                      "Optical code",
                                      "Contact chip card",
                                      "Contactless read of chip card",
                                      "Transaction initiated using a credential that has previously been stored on file",
                                      "Magnetic stripe read",
                                      "Contactless read of magnetic stripe data",
                                      "Contact chip card, without card verification value"
                                    ]
                                  },
                                  {
                                    "type": "null"
                                  }
                                ]
                              },
                              "stand_in_processing_reason": {
                                "anyOf": [
                                  {
                                    "description": "Only present when `actioner: network`. Describes why a card authorization was approved or declined by Visa through stand-in processing.",
                                    "enum": [
                                      "issuer_error",
                                      "invalid_physical_card",
                                      "invalid_cardholder_authentication_verification_value",
                                      "internal_visa_error",
                                      "merchant_transaction_advisory_service_authentication_required",
                                      "payment_fraud_disruption_acquirer_block",
                                      "other"
                                    ],
                                    "type": "string",
                                    "x-enum-descriptions": [
                                      "Increase failed to process the authorization in a timely manner.",
                                      "The physical card read had an invalid CVV, dCVV, or authorization request cryptogram.",
                                      "The 3DS cardholder authentication verification value was invalid.",
                                      "An internal Visa error occurred. Visa uses this reason code for certain expected occurrences as well, such as Application Transaction Counter (ATC) replays.",
                                      "The merchant has enabled Visa's Transaction Advisory Service and requires further authentication to perform the transaction. In practice this is often utilized at fuel pumps to tell the cardholder to see the cashier.",
                                      "The transaction was blocked by Visa's Payment Fraud Disruption service due to fraudulent Acquirer behavior, such as card testing.",
                                      "An unspecific reason for stand-in processing."
                                    ]
                                  },
                                  {
                                    "type": "null"
                                  }
                                ]
                              }
                            },
                            "required": [
                              "electronic_commerce_indicator",
                              "point_of_service_entry_mode",
                              "stand_in_processing_reason"
                            ],
                            "title": "Visa",
                            "type": "object",
                            "x-title-plural": "Visas"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      }
                    },
                    "required": [
                      "category",
                      "visa"
                    ],
                    "type": "object",
                    "x-title-plural": "s"
                  },
                  "network_identifiers": {
                    "description": "Network-specific identifiers for a specific request or transaction.",
                    "example": {
                      "retrieval_reference_number": "785867080153",
                      "trace_number": "487941",
                      "transaction_id": "627199945183184"
                    },
                    "properties": {
                      "retrieval_reference_number": {
                        "anyOf": [
                          {
                            "description": "A life-cycle identifier used across e.g., an authorization and a reversal. Expected to be unique per acquirer within a window of time. For some card networks the retrieval reference number includes the trace counter.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "trace_number": {
                        "anyOf": [
                          {
                            "description": "A counter used to verify an individual authorization. Expected to be unique per acquirer within a window of time.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "transaction_id": {
                        "anyOf": [
                          {
                            "description": "A globally unique transaction identifier provided by the card network, used across multiple life-cycle requests.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      }
                    },
                    "required": [
                      "transaction_id",
                      "trace_number",
                      "retrieval_reference_number"
                    ],
                    "type": "object",
                    "x-title-plural": "s"
                  },
                  "network_risk_score": {
                    "anyOf": [
                      {
                        "description": "The risk score generated by the card network. For Visa this is the Visa Advanced Authorization risk score, from 0 to 99, where 99 is the riskiest.",
                        "type": "integer"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "physical_card_id": {
                    "anyOf": [
                      {
                        "description": "If the authorization was made in-person with a physical card, the Physical Card that was used.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "presentment_amount": {
                    "description": "The amount of the attempted authorization in the currency the card user sees at the time of purchase, in the minor unit of that currency. For dollars, for example, this is cents.",
                    "type": "integer"
                  },
                  "presentment_currency": {
                    "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the currency the user sees at the time of purchase.",
                    "type": "string"
                  },
                  "processing_category": {
                    "description": "The processing category describes the intent behind the authorization, such as whether it was used for bill payments or an automatic fuel dispenser.",
                    "enum": [
                      "account_funding",
                      "automatic_fuel_dispenser",
                      "bill_payment",
                      "purchase",
                      "quasi_cash",
                      "refund"
                    ],
                    "type": "string",
                    "x-enum-descriptions": [
                      "Account funding transactions are transactions used to e.g., fund an account or transfer funds between accounts.",
                      "Automatic fuel dispenser authorizations occur when a card is used at a gas pump, prior to the actual transaction amount being known. They are followed by an advice message that updates the amount of the pending transaction.",
                      "A transaction used to pay a bill.",
                      "A regular purchase.",
                      "Quasi-cash transactions represent purchases of items which may be convertible to cash.",
                      "A refund card authorization, sometimes referred to as a credit voucher authorization, where funds are credited to the cardholder."
                    ]
                  },
                  "request_details": {
                    "description": "Fields specific to the type of request, such as an incremental authorization.",
                    "properties": {
                      "category": {
                        "description": "The type of this request (e.g., an initial authorization or an incremental authorization).",
                        "enum": [
                          "initial_authorization",
                          "incremental_authorization"
                        ],
                        "type": "string",
                        "x-enum-descriptions": [
                          "A regular, standalone authorization.",
                          "An incremental request to increase the amount of an existing authorization."
                        ]
                      },
                      "incremental_authorization": {
                        "anyOf": [
                          {
                            "description": "Fields specific to the category `incremental_authorization`.",
                            "properties": {
                              "card_payment_id": {
                                "description": "The card payment for this authorization and increment.",
                                "type": "string"
                              },
                              "original_card_authorization_id": {
                                "description": "The identifier of the card authorization this request is attempting to increment.",
                                "type": "string"
                              }
                            },
                            "required": [
                              "card_payment_id",
                              "original_card_authorization_id"
                            ],
                            "title": "Incremental Authorization",
                            "type": "object",
                            "x-title-plural": "Incremental Authorizations"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "initial_authorization": {
                        "anyOf": [
                          {
                            "description": "Fields specific to the category `initial_authorization`.",
                            "properties": {},
                            "title": "Initial Authorization",
                            "type": "object",
                            "x-title-plural": "Initial Authorizations"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      }
                    },
                    "required": [
                      "category",
                      "initial_authorization",
                      "incremental_authorization"
                    ],
                    "title": "Request Details",
                    "type": "object",
                    "x-title-plural": "Request Details"
                  },
                  "settlement_amount": {
                    "description": "The amount of the attempted authorization in the currency it will be settled in. This currency is the same as that of the Account the card belongs to.",
                    "type": "integer"
                  },
                  "settlement_currency": {
                    "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the currency the transaction will be settled in.",
                    "type": "string"
                  },
                  "terminal_id": {
                    "anyOf": [
                      {
                        "description": "The terminal identifier (commonly abbreviated as TID) of the terminal the card is transacting with.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "upcoming_card_payment_id": {
                    "description": "The identifier of the Card Payment this authorization will belong to. Available in the API once the card authorization has completed.",
                    "type": "string"
                  },
                  "verification": {
                    "description": "Fields related to verification of cardholder-provided values.",
                    "properties": {
                      "card_verification_code": {
                        "description": "Fields related to verification of the Card Verification Code, a 3-digit code on the back of the card.",
                        "properties": {
                          "result": {
                            "description": "The result of verifying the Card Verification Code.",
                            "enum": [
                              "not_checked",
                              "match",
                              "no_match"
                            ],
                            "type": "string",
                            "x-enum-descriptions": [
                              "No card verification code was provided in the authorization request.",
                              "The card verification code matched the one on file.",
                              "The card verification code did not match the one on file."
                            ]
                          }
                        },
                        "required": [
                          "result"
                        ],
                        "title": "Card Verification Code",
                        "type": "object",
                        "x-title-plural": "Card Verification Codes"
                      },
                      "cardholder_address": {
                        "description": "Cardholder address provided in the authorization request and the address on file we verified it against.",
                        "properties": {
                          "actual_line1": {
                            "anyOf": [
                              {
                                "description": "Line 1 of the address on file for the cardholder.",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "actual_postal_code": {
                            "anyOf": [
                              {
                                "description": "The postal code of the address on file for the cardholder.",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "provided_line1": {
                            "anyOf": [
                              {
                                "description": "The cardholder address line 1 provided for verification in the authorization request.",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "provided_postal_code": {
                            "anyOf": [
                              {
                                "description": "The postal code provided for verification in the authorization request.",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "result": {
                            "description": "The address verification result returned to the card network.",
                            "enum": [
                              "not_checked",
                              "postal_code_match_address_not_checked",
                              "postal_code_match_address_no_match",
                              "postal_code_no_match_address_match",
                              "match",
                              "no_match"
                            ],
                            "type": "string",
                            "x-enum-descriptions": [
                              "No adress was provided in the authorization request.",
                              "Postal code matches, but the street address was not verified.",
                              "Postal code matches, but the street address does not match.",
                              "Postal code does not match, but the street address matches.",
                              "Postal code and street address match.",
                              "Postal code and street address do not match."
                            ]
                          }
                        },
                        "required": [
                          "provided_postal_code",
                          "provided_line1",
                          "actual_postal_code",
                          "actual_line1",
                          "result"
                        ],
                        "title": "Cardholder Address",
                        "type": "object",
                        "x-title-plural": "Cardholder Addresses"
                      }
                    },
                    "required": [
                      "cardholder_address",
                      "card_verification_code"
                    ],
                    "type": "object",
                    "x-title-plural": "s"
                  }
                },
                "required": [
                  "merchant_acceptor_id",
                  "merchant_descriptor",
                  "merchant_category_code",
                  "terminal_id",
                  "merchant_city",
                  "merchant_state",
                  "merchant_postal_code",
                  "merchant_country",
                  "digital_wallet_token_id",
                  "physical_card_id",
                  "verification",
                  "network_identifiers",
                  "network_risk_score",
                  "network_details",
                  "decision",
                  "card_id",
                  "upcoming_card_payment_id",
                  "account_id",
                  "presentment_amount",
                  "presentment_currency",
                  "settlement_amount",
                  "settlement_currency",
                  "processing_category",
                  "direction",
                  "request_details"
                ],
                "title": "Card Authorization",
                "type": "object",
                "x-title-plural": "Card Authorizations"
              },
              {
                "type": "null"
              }
            ]
          },
          "category": {
            "description": "The category of the Real-Time Decision.",
            "enum": [
              "card_authorization_requested",
              "card_authentication_requested",
              "card_authentication_challenge_requested",
              "digital_wallet_token_requested",
              "digital_wallet_authentication_requested"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "A card is being authorized.",
              "3DS authentication is requested.",
              "3DS authentication challenge requires cardholder involvement.",
              "A card is being loaded into a digital wallet.",
              "A card is being loaded into a digital wallet and requires cardholder authentication."
            ]
          },
          "created_at": {
            "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Real-Time Decision was created.",
            "format": "date-time",
            "type": "string"
          },
          "digital_wallet_authentication": {
            "anyOf": [
              {
                "description": "Fields related to a digital wallet authentication attempt.",
                "properties": {
                  "card_id": {
                    "description": "The identifier of the Card that is being tokenized.",
                    "type": "string"
                  },
                  "channel": {
                    "description": "The channel to send the card user their one-time passcode.",
                    "enum": [
                      "sms",
                      "email"
                    ],
                    "type": "string",
                    "x-enum-descriptions": [
                      "Send one-time passcodes over SMS.",
                      "Send one-time passcodes over email."
                    ]
                  },
                  "digital_wallet": {
                    "description": "The digital wallet app being used.",
                    "enum": [
                      "apple_pay",
                      "google_pay",
                      "samsung_pay",
                      "unknown"
                    ],
                    "type": "string",
                    "x-enum-descriptions": [
                      "Apple Pay",
                      "Google Pay",
                      "Samsung Pay",
                      "Unknown"
                    ]
                  },
                  "email": {
                    "anyOf": [
                      {
                        "description": "The email to send the one-time passcode to if `channel` is equal to `email`.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "one_time_passcode": {
                    "description": "The one-time passcode to send the card user.",
                    "type": "string"
                  },
                  "phone": {
                    "anyOf": [
                      {
                        "description": "The phone number to send the one-time passcode to if `channel` is equal to `sms`.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "result": {
                    "anyOf": [
                      {
                        "description": "Whether your application successfully delivered the one-time passcode.",
                        "enum": [
                          "success",
                          "failure"
                        ],
                        "type": "string",
                        "x-enum-descriptions": [
                          "Your application successfully delivered the one-time passcode to the cardholder.",
                          "Your application failed to deliver the one-time passcode to the cardholder."
                        ]
                      },
                      {
                        "type": "null"
                      }
                    ]
                  }
                },
                "required": [
                  "result",
                  "card_id",
                  "digital_wallet",
                  "channel",
                  "one_time_passcode",
                  "phone",
                  "email"
                ],
                "title": "Digital Wallet Authentication",
                "type": "object",
                "x-title-plural": "Digital Wallet Authentications"
              },
              {
                "type": "null"
              }
            ]
          },
          "digital_wallet_token": {
            "anyOf": [
              {
                "description": "Fields related to a digital wallet token provisioning attempt.",
                "properties": {
                  "card_id": {
                    "description": "The identifier of the Card that is being tokenized.",
                    "type": "string"
                  },
                  "card_profile_id": {
                    "anyOf": [
                      {
                        "description": "The identifier of the Card Profile that was set via the real time decision. This will be null until the real time decision is responded to or if the real time decision did not set a card profile.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "decision": {
                    "anyOf": [
                      {
                        "description": "Whether or not the provisioning request was approved. This will be null until the real time decision is responded to.",
                        "enum": [
                          "approve",
                          "decline"
                        ],
                        "type": "string",
                        "x-enum-descriptions": [
                          "Approve the provisioning request.",
                          "Decline the provisioning request."
                        ]
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "digital_wallet": {
                    "description": "The digital wallet app being used.",
                    "enum": [
                      "apple_pay",
                      "google_pay",
                      "samsung_pay",
                      "unknown"
                    ],
                    "type": "string",
                    "x-enum-descriptions": [
                      "Apple Pay",
                      "Google Pay",
                      "Samsung Pay",
                      "Unknown"
                    ]
                  }
                },
                "required": [
                  "decision",
                  "card_id",
                  "digital_wallet",
                  "card_profile_id"
                ],
                "title": "Digital Wallet Token",
                "type": "object",
                "x-title-plural": "Digital Wallet Tokens"
              },
              {
                "type": "null"
              }
            ]
          },
          "id": {
            "description": "The Real-Time Decision identifier.",
            "type": "string"
          },
          "status": {
            "description": "The status of the Real-Time Decision.",
            "enum": [
              "pending",
              "responded",
              "timed_out"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The decision is pending action via real-time webhook.",
              "Your webhook actioned the real-time decision.",
              "Your webhook failed to respond to the authorization in time."
            ]
          },
          "timeout_at": {
            "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which your application can no longer respond to the Real-Time Decision.",
            "format": "date-time",
            "type": "string"
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `real_time_decision`.",
            "enum": [
              "real_time_decision"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "timeout_at",
          "status",
          "category",
          "card_authorization",
          "card_authentication",
          "card_authentication_challenge",
          "digital_wallet_token",
          "digital_wallet_authentication",
          "type"
        ],
        "title": "Real-Time Decision",
        "type": "object",
        "x-tag": "Real-Time Decisions",
        "x-title-plural": "Real-Time Decisions"
      },
      "real_time_payments_transfer": {
        "description": "Real-Time Payments transfers move funds, within seconds, between your Increase account and any other account on the Real-Time Payments network.",
        "example": {
          "account_id": "account_in71c4amph0vgo2qllky",
          "acknowledgement": {
            "acknowledged_at": "2020-01-31T23:59:59Z"
          },
          "amount": 100,
          "approval": null,
          "cancellation": null,
          "created_at": "2020-01-31T23:59:59Z",
          "created_by": {
            "category": "user",
            "user": {
              "email": "user@example.com"
            }
          },
          "creditor_name": "Ian Crease",
          "currency": "USD",
          "debtor_name": null,
          "destination_account_number": "987654321",
          "destination_routing_number": "101050001",
          "external_account_id": null,
          "id": "real_time_payments_transfer_iyuhl5kdn7ssmup83mvq",
          "idempotency_key": null,
          "pending_transaction_id": null,
          "rejection": null,
          "remittance_information": "Invoice 29582",
          "source_account_number_id": "account_number_v18nkfqm6afpsrvy82b2",
          "status": "complete",
          "submission": {
            "submitted_at": "2020-01-31T23:59:59Z",
            "transaction_identification": "20220501234567891T1BSLZO01745013025"
          },
          "transaction_id": "transaction_uyrp7fld2ium70oa7oi",
          "type": "real_time_payments_transfer",
          "ultimate_creditor_name": null,
          "ultimate_debtor_name": null
        },
        "properties": {
          "account_id": {
            "description": "The Account from which the transfer was sent.",
            "type": "string"
          },
          "acknowledgement": {
            "anyOf": [
              {
                "description": "If the transfer is acknowledged by the recipient bank, this will contain supplemental details.",
                "example": {
                  "acknowledged_at": "2020-01-31T23:59:59Z"
                },
                "properties": {
                  "acknowledged_at": {
                    "description": "When the transfer was acknowledged.",
                    "format": "date-time",
                    "type": "string"
                  }
                },
                "required": [
                  "acknowledged_at"
                ],
                "title": "Real-Time Payments Transfer Acknowledgement",
                "type": "object",
                "x-title-plural": "Real-Time Payments Transfer Acknowledgements"
              },
              {
                "type": "null"
              }
            ]
          },
          "amount": {
            "description": "The transfer amount in USD cents.",
            "type": "integer"
          },
          "approval": {
            "anyOf": [
              {
                "description": "If your account requires approvals for transfers and the transfer was approved, this will contain details of the approval.",
                "example": {
                  "approved_at": "2020-01-31T23:59:59Z",
                  "approved_by": null
                },
                "properties": {
                  "approved_at": {
                    "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was approved.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "approved_by": {
                    "anyOf": [
                      {
                        "description": "If the Transfer was approved by a user in the dashboard, the email address of that user.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  }
                },
                "required": [
                  "approved_at",
                  "approved_by"
                ],
                "title": "Transfer Approval",
                "type": "object",
                "x-title-plural": "Transfer Approvals"
              },
              {
                "type": "null"
              }
            ]
          },
          "cancellation": {
            "anyOf": [
              {
                "description": "If your account requires approvals for transfers and the transfer was not approved, this will contain details of the cancellation.",
                "example": {
                  "canceled_at": "2020-01-31T23:59:59Z",
                  "canceled_by": null
                },
                "properties": {
                  "canceled_at": {
                    "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Transfer was canceled.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "canceled_by": {
                    "anyOf": [
                      {
                        "description": "If the Transfer was canceled by a user in the dashboard, the email address of that user.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  }
                },
                "required": [
                  "canceled_at",
                  "canceled_by"
                ],
                "title": "Transfer Cancellation",
                "type": "object",
                "x-title-plural": "Transfer Cancellations"
              },
              {
                "type": "null"
              }
            ]
          },
          "created_at": {
            "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.",
            "format": "date-time",
            "type": "string"
          },
          "created_by": {
            "anyOf": [
              {
                "description": "What object created the transfer, either via the API or the dashboard.",
                "example": {
                  "category": "user",
                  "user": {
                    "email": "user@example.com"
                  }
                },
                "properties": {
                  "api_key": {
                    "anyOf": [
                      {
                        "description": "If present, details about the API key that created the transfer.",
                        "properties": {
                          "description": {
                            "anyOf": [
                              {
                                "description": "The description set for the API key when it was created.",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "required": [
                          "description"
                        ],
                        "title": "Api Key",
                        "type": "object",
                        "x-title-plural": "Api Keys"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "category": {
                    "description": "The type of object that created this transfer.",
                    "enum": [
                      "api_key",
                      "oauth_application",
                      "user"
                    ],
                    "type": "string",
                    "x-enum-descriptions": [
                      "An API key. Details will be under the `api_key` object.",
                      "An OAuth application you connected to Increase. Details will be under the `oauth_application` object.",
                      "A User in the Increase dashboard. Details will be under the `user` object."
                    ]
                  },
                  "oauth_application": {
                    "anyOf": [
                      {
                        "description": "If present, details about the OAuth Application that created the transfer.",
                        "properties": {
                          "name": {
                            "description": "The name of the OAuth Application.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "name"
                        ],
                        "title": "OAuth Application",
                        "type": "object",
                        "x-title-plural": "OAuth Applications"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "user": {
                    "anyOf": [
                      {
                        "description": "If present, details about the User that created the transfer.",
                        "properties": {
                          "email": {
                            "description": "The email address of the User.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "email"
                        ],
                        "title": "User",
                        "type": "object",
                        "x-title-plural": "Users"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  }
                },
                "required": [
                  "category",
                  "api_key",
                  "oauth_application",
                  "user"
                ],
                "title": "Transfer Creator",
                "type": "object",
                "x-title-plural": "Transfer Creators"
              },
              {
                "type": "null"
              }
            ]
          },
          "creditor_name": {
            "description": "The name of the transfer's recipient. This is set by the sender when creating the transfer.",
            "type": "string"
          },
          "currency": {
            "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transfer's currency. For real-time payments transfers this is always equal to `USD`.",
            "enum": [
              "CAD",
              "CHF",
              "EUR",
              "GBP",
              "JPY",
              "USD"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "Canadian Dollar (CAD)",
              "Swiss Franc (CHF)",
              "Euro (EUR)",
              "British Pound (GBP)",
              "Japanese Yen (JPY)",
              "US Dollar (USD)"
            ]
          },
          "debtor_name": {
            "anyOf": [
              {
                "description": "The name of the transfer's sender. If not provided, defaults to the name of the account's entity.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "destination_account_number": {
            "description": "The destination account number.",
            "type": "string"
          },
          "destination_routing_number": {
            "description": "The destination American Bankers' Association (ABA) Routing Transit Number (RTN).",
            "type": "string"
          },
          "external_account_id": {
            "anyOf": [
              {
                "description": "The identifier of the External Account the transfer was made to, if any.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "id": {
            "description": "The Real-Time Payments Transfer's identifier.",
            "type": "string"
          },
          "idempotency_key": {
            "anyOf": [
              {
                "description": "The idempotency key you chose for this object. This value is unique across Increase and is used to ensure that a request is only processed once. Learn more about [idempotency](https://increase.com/documentation/idempotency-keys).",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "pending_transaction_id": {
            "anyOf": [
              {
                "description": "The ID for the pending transaction representing the transfer. A pending transaction is created when the transfer [requires approval](https://increase.com/documentation/transfer-approvals#transfer-approvals) by someone else in your organization.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "rejection": {
            "anyOf": [
              {
                "description": "If the transfer is rejected by Real-Time Payments or the destination financial institution, this will contain supplemental details.",
                "example": {
                  "reject_reason_additional_information": null,
                  "reject_reason_code": "account_closed",
                  "rejected_at": "2020-01-31T23:59:59Z"
                },
                "properties": {
                  "reject_reason_additional_information": {
                    "anyOf": [
                      {
                        "description": "Additional information about the rejection provided by the recipient bank when the `reject_reason_code` is `NARRATIVE`.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "reject_reason_code": {
                    "description": "The reason the transfer was rejected as provided by the recipient bank or the Real-Time Payments network.",
                    "enum": [
                      "account_closed",
                      "account_blocked",
                      "invalid_creditor_account_type",
                      "invalid_creditor_account_number",
                      "invalid_creditor_financial_institution_identifier",
                      "end_customer_deceased",
                      "narrative",
                      "transaction_forbidden",
                      "transaction_type_not_supported",
                      "unexpected_amount",
                      "amount_exceeds_bank_limits",
                      "invalid_creditor_address",
                      "unknown_end_customer",
                      "invalid_debtor_address",
                      "timeout",
                      "unsupported_message_for_recipient",
                      "recipient_connection_not_available",
                      "real_time_payments_suspended",
                      "instructed_agent_signed_off",
                      "processing_error",
                      "other"
                    ],
                    "type": "string",
                    "x-enum-descriptions": [
                      "The destination account is closed. Corresponds to the Real-Time Payments reason code `AC04`.",
                      "The destination account is currently blocked from receiving transactions. Corresponds to the Real-Time Payments reason code `AC06`.",
                      "The destination account is ineligible to receive Real-Time Payments transfers. Corresponds to the Real-Time Payments reason code `AC14`.",
                      "The destination account does not exist. Corresponds to the Real-Time Payments reason code `AC03`.",
                      "The destination routing number is invalid. Corresponds to the Real-Time Payments reason code `RC04`.",
                      "The destination account holder is deceased. Corresponds to the Real-Time Payments reason code `MD07`.",
                      "The reason is provided as narrative information in the additional information field.",
                      "Real-Time Payments transfers are not allowed to the destination account. Corresponds to the Real-Time Payments reason code `AG01`.",
                      "Real-Time Payments transfers are not enabled for the destination account. Corresponds to the Real-Time Payments reason code `AG03`.",
                      "The amount of the transfer is different than expected by the recipient. Corresponds to the Real-Time Payments reason code `AM09`.",
                      "The amount is higher than the recipient is authorized to send or receive. Corresponds to the Real-Time Payments reason code `AM14`.",
                      "The creditor's address is required, but missing or invalid. Corresponds to the Real-Time Payments reason code `BE04`.",
                      "The specified creditor is unknown. Corresponds to the Real-Time Payments reason code `BE06`.",
                      "The debtor's address is required, but missing or invalid. Corresponds to the Real-Time Payments reason code `BE07`.",
                      "There was a timeout processing the transfer. Corresponds to the Real-Time Payments reason code `DS24`.",
                      "Real-Time Payments transfers are not enabled for the destination account. Corresponds to the Real-Time Payments reason code `NOAT`.",
                      "The destination financial institution is currently not connected to Real-Time Payments. Corresponds to the Real-Time Payments reason code `9912`.",
                      "Real-Time Payments is currently unavailable. Corresponds to the Real-Time Payments reason code `9948`.",
                      "The destination financial institution is currently signed off of Real-Time Payments. Corresponds to the Real-Time Payments reason code `9910`.",
                      "The transfer was rejected due to an internal Increase issue. We have been notified.",
                      "Some other error or issue has occurred."
                    ]
                  },
                  "rejected_at": {
                    "anyOf": [
                      {
                        "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was rejected.",
                        "format": "date-time",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  }
                },
                "required": [
                  "rejected_at",
                  "reject_reason_code",
                  "reject_reason_additional_information"
                ],
                "title": "Real-Time Payments Transfer Rejection",
                "type": "object",
                "x-title-plural": "Real-Time Payments Transfer Rejections"
              },
              {
                "type": "null"
              }
            ]
          },
          "remittance_information": {
            "description": "Unstructured information that will show on the recipient's bank statement.",
            "type": "string"
          },
          "source_account_number_id": {
            "description": "The Account Number the recipient will see as having sent the transfer.",
            "type": "string"
          },
          "status": {
            "description": "The lifecycle status of the transfer.",
            "enum": [
              "pending_approval",
              "canceled",
              "pending_reviewing",
              "requires_attention",
              "rejected",
              "pending_submission",
              "submitted",
              "complete"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The transfer is pending approval.",
              "The transfer has been canceled.",
              "The transfer is pending review by Increase.",
              "The transfer requires attention from an Increase operator.",
              "The transfer was rejected by the network or the recipient's bank.",
              "The transfer is queued to be submitted to Real-Time Payments.",
              "The transfer has been submitted and is pending a response from Real-Time Payments.",
              "The transfer has been sent successfully and is complete."
            ]
          },
          "submission": {
            "anyOf": [
              {
                "description": "After the transfer is submitted to Real-Time Payments, this will contain supplemental details.",
                "example": {
                  "submitted_at": "2020-01-31T23:59:59Z",
                  "transaction_identification": "20220501234567891T1BSLZO01745013025"
                },
                "properties": {
                  "submitted_at": {
                    "anyOf": [
                      {
                        "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was submitted to The Clearing House.",
                        "format": "date-time",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "transaction_identification": {
                    "description": "The Real-Time Payments network identification of the transfer.",
                    "type": "string"
                  }
                },
                "required": [
                  "submitted_at",
                  "transaction_identification"
                ],
                "title": "Real-Time Payments Transfer Submission",
                "type": "object",
                "x-title-plural": "Real-Time Payments Transfer Submissions"
              },
              {
                "type": "null"
              }
            ]
          },
          "transaction_id": {
            "anyOf": [
              {
                "description": "The Transaction funding the transfer once it is complete.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `real_time_payments_transfer`.",
            "enum": [
              "real_time_payments_transfer"
            ],
            "type": "string"
          },
          "ultimate_creditor_name": {
            "anyOf": [
              {
                "description": "The name of the ultimate recipient of the transfer. Set this if the creditor is an intermediary receiving the payment for someone else.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "ultimate_debtor_name": {
            "anyOf": [
              {
                "description": "The name of the ultimate sender of the transfer. Set this if the funds are being sent on behalf of someone who is not the account holder at Increase.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "type",
          "id",
          "approval",
          "cancellation",
          "status",
          "created_at",
          "account_id",
          "external_account_id",
          "source_account_number_id",
          "debtor_name",
          "creditor_name",
          "ultimate_creditor_name",
          "ultimate_debtor_name",
          "remittance_information",
          "amount",
          "currency",
          "destination_account_number",
          "destination_routing_number",
          "transaction_id",
          "pending_transaction_id",
          "submission",
          "rejection",
          "acknowledgement",
          "created_by",
          "idempotency_key"
        ],
        "title": "Real-Time Payments Transfer",
        "type": "object",
        "x-tag": "Real-Time Payments Transfers",
        "x-title-plural": "Real-Time Payments Transfers"
      },
      "real_time_payments_transfer_list": {
        "description": "A list of Real-Time Payments Transfer objects.",
        "example": {
          "data": [
            {
              "account_id": "account_in71c4amph0vgo2qllky",
              "acknowledgement": {
                "acknowledged_at": "2020-01-31T23:59:59Z"
              },
              "amount": 100,
              "approval": null,
              "cancellation": null,
              "created_at": "2020-01-31T23:59:59Z",
              "created_by": {
                "category": "user",
                "user": {
                  "email": "user@example.com"
                }
              },
              "creditor_name": "Ian Crease",
              "currency": "USD",
              "debtor_name": null,
              "destination_account_number": "987654321",
              "destination_routing_number": "101050001",
              "external_account_id": null,
              "id": "real_time_payments_transfer_iyuhl5kdn7ssmup83mvq",
              "idempotency_key": null,
              "pending_transaction_id": null,
              "rejection": null,
              "remittance_information": "Invoice 29582",
              "source_account_number_id": "account_number_v18nkfqm6afpsrvy82b2",
              "status": "complete",
              "submission": {
                "submitted_at": "2020-01-31T23:59:59Z",
                "transaction_identification": "20220501234567891T1BSLZO01745013025"
              },
              "transaction_id": "transaction_uyrp7fld2ium70oa7oi",
              "type": "real_time_payments_transfer",
              "ultimate_creditor_name": null,
              "ultimate_debtor_name": null
            }
          ],
          "next_cursor": "v57w5d"
        },
        "properties": {
          "data": {
            "description": "The contents of the list.",
            "items": {
              "$ref": "#/components/schemas/real_time_payments_transfer"
            },
            "type": "array"
          },
          "next_cursor": {
            "anyOf": [
              {
                "description": "A pointer to a place in the list.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "Real-Time Payments Transfer List",
        "type": "object",
        "x-title-plural": "Real-Time Payments Transfer Lists"
      },
      "request_a_stop_payment_on_a_check_transfer_parameters": {
        "example": {
          "reason": "mail_delivery_failed"
        },
        "properties": {
          "reason": {
            "description": "The reason why this transfer should be stopped.",
            "enum": [
              "mail_delivery_failed",
              "not_authorized",
              "unknown"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The check could not be delivered.",
              "The check was not authorized.",
              "The check was stopped for another reason."
            ]
          }
        },
        "type": "object"
      },
      "return_an_inbound_ach_transfer_parameters": {
        "example": {
          "reason": "payment_stopped"
        },
        "properties": {
          "reason": {
            "description": "The reason why this transfer will be returned. The most usual return codes are `payment_stopped` for debits and `credit_entry_refused_by_receiver` for credits.",
            "enum": [
              "insufficient_funds",
              "returned_per_odfi_request",
              "authorization_revoked_by_customer",
              "payment_stopped",
              "customer_advised_unauthorized_improper_ineligible_or_incomplete",
              "representative_payee_deceased_or_unable_to_continue_in_that_capacity",
              "beneficiary_or_account_holder_deceased",
              "credit_entry_refused_by_receiver",
              "duplicate_entry",
              "corporate_customer_advised_not_authorized"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The customer's account has insufficient funds. This reason is only allowed for debits. The Nacha return code is R01.",
              "The originating financial institution asked for this transfer to be returned. The receiving bank is complying with the request. The Nacha return code is R06.",
              "The customer no longer authorizes this transaction. The Nacha return code is R07.",
              "The customer asked for the payment to be stopped. This reason is only allowed for debits. The Nacha return code is R08.",
              "The customer advises that the debit was unauthorized. The Nacha return code is R10.",
              "The payee is deceased. The Nacha return code is R14.",
              "The account holder is deceased. The Nacha return code is R15.",
              "The customer refused a credit entry. This reason is only allowed for credits. The Nacha return code is R23.",
              "The account holder identified this transaction as a duplicate. The Nacha return code is R24.",
              "The corporate customer no longer authorizes this transaction. The Nacha return code is R29."
            ]
          }
        },
        "required": [
          "reason"
        ],
        "type": "object"
      },
      "return_an_inbound_check_deposit_parameters": {
        "example": {
          "reason": "altered_or_fictitious"
        },
        "properties": {
          "reason": {
            "description": "The reason to return the Inbound Check Deposit.",
            "enum": [
              "altered_or_fictitious",
              "not_authorized",
              "duplicate_presentment",
              "endorsement_missing",
              "endorsement_irregular"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The check was altered or fictitious.",
              "The check was not authorized.",
              "The check was a duplicate presentment.",
              "The check was not endorsed.",
              "The check was not endorsed by the payee."
            ]
          }
        },
        "required": [
          "reason"
        ],
        "type": "object"
      },
      "routing_number": {
        "description": "Routing numbers are used to identify your bank in a financial transaction.",
        "example": {
          "ach_transfers": "supported",
          "name": "First Bank of the United States",
          "real_time_payments_transfers": "supported",
          "routing_number": "021000021",
          "type": "routing_number",
          "wire_transfers": "supported"
        },
        "properties": {
          "ach_transfers": {
            "description": "This routing number's support for ACH Transfers.",
            "enum": [
              "supported",
              "not_supported"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The routing number can receive this transfer type.",
              "The routing number cannot receive this transfer type."
            ]
          },
          "name": {
            "description": "The name of the financial institution belonging to a routing number.",
            "type": "string"
          },
          "real_time_payments_transfers": {
            "description": "This routing number's support for Real-Time Payments Transfers.",
            "enum": [
              "supported",
              "not_supported"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The routing number can receive this transfer type.",
              "The routing number cannot receive this transfer type."
            ]
          },
          "routing_number": {
            "description": "The nine digit routing number identifier.",
            "type": "string"
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `routing_number`.",
            "enum": [
              "routing_number"
            ],
            "type": "string"
          },
          "wire_transfers": {
            "description": "This routing number's support for Wire Transfers.",
            "enum": [
              "supported",
              "not_supported"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The routing number can receive this transfer type.",
              "The routing number cannot receive this transfer type."
            ]
          }
        },
        "required": [
          "name",
          "routing_number",
          "type",
          "ach_transfers",
          "real_time_payments_transfers",
          "wire_transfers"
        ],
        "title": "Routing Number",
        "type": "object",
        "x-tag": "Routing Numbers",
        "x-title-plural": "Routing Numbers"
      },
      "routing_number_list": {
        "description": "A list of Routing Number objects.",
        "example": {
          "data": [
            {
              "ach_transfers": "supported",
              "name": "First Bank of the United States",
              "real_time_payments_transfers": "supported",
              "routing_number": "021000021",
              "type": "routing_number",
              "wire_transfers": "supported"
            }
          ],
          "next_cursor": "v57w5d"
        },
        "properties": {
          "data": {
            "description": "The contents of the list.",
            "items": {
              "$ref": "#/components/schemas/routing_number"
            },
            "type": "array"
          },
          "next_cursor": {
            "anyOf": [
              {
                "description": "A pointer to a place in the list.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "Routing Number List",
        "type": "object",
        "x-title-plural": "Routing Number Lists"
      },
      "sandbox_advance_the_shipment_status_of_a_physical_card_parameters": {
        "example": {
          "shipment_status": "shipped"
        },
        "properties": {
          "shipment_status": {
            "description": "The shipment status to move the Physical Card to.",
            "enum": [
              "pending",
              "canceled",
              "submitted",
              "acknowledged",
              "rejected",
              "shipped",
              "returned"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The physical card has not yet been shipped.",
              "The physical card shipment was canceled prior to submission.",
              "The physical card shipment has been submitted to the card fulfillment provider.",
              "The physical card shipment has been acknowledged by the card fulfillment provider and will be processed in their next batch.",
              "The physical card shipment was rejected by the card printer due to an error.",
              "The physical card has been shipped.",
              "The physical card shipment was returned to the sender and destroyed by the production facility."
            ]
          }
        },
        "required": [
          "shipment_status"
        ],
        "type": "object"
      },
      "sandbox_advance_the_state_of_a_card_dispute_parameters": {
        "example": {
          "explanation": "This was a valid recurring transaction",
          "status": "rejected"
        },
        "properties": {
          "explanation": {
            "description": "Why the dispute was rejected. Not required for accepting disputes.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "status": {
            "description": "The status to move the dispute to.",
            "enum": [
              "pending_user_information",
              "accepted",
              "rejected",
              "lost",
              "won"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "Increase has requested more information related to the Card Dispute from you.",
              "The Card Dispute has been accepted and your funds have been returned. The card dispute will eventually transition into `won` or `lost` depending on the outcome.",
              "The Card Dispute has been rejected.",
              "The Card Dispute has been lost and funds previously credited from the acceptance have been debited.",
              "The Card Dispute has been won and no further action can be taken."
            ]
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "sandbox_complete_a_real_time_payments_transfer_parameters": {
        "example": {},
        "properties": {
          "rejection": {
            "description": "If set, the simulation will reject the transfer.",
            "properties": {
              "reject_reason_code": {
                "description": "The reason code that the simulated rejection will have.",
                "enum": [
                  "account_closed",
                  "account_blocked",
                  "invalid_creditor_account_type",
                  "invalid_creditor_account_number",
                  "invalid_creditor_financial_institution_identifier",
                  "end_customer_deceased",
                  "narrative",
                  "transaction_forbidden",
                  "transaction_type_not_supported",
                  "unexpected_amount",
                  "amount_exceeds_bank_limits",
                  "invalid_creditor_address",
                  "unknown_end_customer",
                  "invalid_debtor_address",
                  "timeout",
                  "unsupported_message_for_recipient",
                  "recipient_connection_not_available",
                  "real_time_payments_suspended",
                  "instructed_agent_signed_off",
                  "processing_error",
                  "other"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "The destination account is closed. Corresponds to the Real-Time Payments reason code `AC04`.",
                  "The destination account is currently blocked from receiving transactions. Corresponds to the Real-Time Payments reason code `AC06`.",
                  "The destination account is ineligible to receive Real-Time Payments transfers. Corresponds to the Real-Time Payments reason code `AC14`.",
                  "The destination account does not exist. Corresponds to the Real-Time Payments reason code `AC03`.",
                  "The destination routing number is invalid. Corresponds to the Real-Time Payments reason code `RC04`.",
                  "The destination account holder is deceased. Corresponds to the Real-Time Payments reason code `MD07`.",
                  "The reason is provided as narrative information in the additional information field.",
                  "Real-Time Payments transfers are not allowed to the destination account. Corresponds to the Real-Time Payments reason code `AG01`.",
                  "Real-Time Payments transfers are not enabled for the destination account. Corresponds to the Real-Time Payments reason code `AG03`.",
                  "The amount of the transfer is different than expected by the recipient. Corresponds to the Real-Time Payments reason code `AM09`.",
                  "The amount is higher than the recipient is authorized to send or receive. Corresponds to the Real-Time Payments reason code `AM14`.",
                  "The creditor's address is required, but missing or invalid. Corresponds to the Real-Time Payments reason code `BE04`.",
                  "The specified creditor is unknown. Corresponds to the Real-Time Payments reason code `BE06`.",
                  "The debtor's address is required, but missing or invalid. Corresponds to the Real-Time Payments reason code `BE07`.",
                  "There was a timeout processing the transfer. Corresponds to the Real-Time Payments reason code `DS24`.",
                  "Real-Time Payments transfers are not enabled for the destination account. Corresponds to the Real-Time Payments reason code `NOAT`.",
                  "The destination financial institution is currently not connected to Real-Time Payments. Corresponds to the Real-Time Payments reason code `9912`.",
                  "Real-Time Payments is currently unavailable. Corresponds to the Real-Time Payments reason code `9948`.",
                  "The destination financial institution is currently signed off of Real-Time Payments. Corresponds to the Real-Time Payments reason code `9910`.",
                  "The transfer was rejected due to an internal Increase issue. We have been notified.",
                  "Some other error or issue has occurred."
                ]
              }
            },
            "required": [
              "reject_reason_code"
            ],
            "type": "object"
          }
        },
        "type": "object"
      },
      "sandbox_confirm_the_fuel_pump_amount_for_a_card_authorization_parameters": {
        "example": {
          "amount": 5000,
          "card_payment_id": "card_payment_nd3k2kacrqjli8482ave"
        },
        "properties": {
          "amount": {
            "description": "The amount of the fuel_confirmation in minor units in the card authorization's currency.",
            "maximum": 1000000000,
            "minimum": 1,
            "type": "integer"
          },
          "card_payment_id": {
            "description": "The identifier of the Card Payment to create a fuel_confirmation on.",
            "type": "string"
          }
        },
        "required": [
          "card_payment_id",
          "amount"
        ],
        "type": "object"
      },
      "sandbox_create_a_card_authorization_parameters": {
        "example": {
          "amount": 1000,
          "card_id": "card_oubs0hwk5rn6knuecxg2",
          "event_subscription_id": "event_subscription_001dzz0r20rcdxgb013zqb8m04g",
          "merchant_acceptor_id": "5665270011000168",
          "merchant_category_code": "5734",
          "merchant_city": "New York",
          "merchant_country": "US",
          "merchant_descriptor": "AMAZON.COM",
          "merchant_state": "NY"
        },
        "properties": {
          "amount": {
            "description": "The authorization amount in cents.",
            "maximum": 1000000000,
            "minimum": 1,
            "type": "integer"
          },
          "authenticated_card_payment_id": {
            "description": "The identifier of a Card Payment with a `card_authentication` if you want to simulate an authenticated authorization.",
            "type": "string"
          },
          "card_id": {
            "description": "The identifier of the Card to be authorized.",
            "type": "string"
          },
          "decline_reason": {
            "description": "Forces a card decline with a specific reason. No real time decision will be sent.",
            "enum": [
              "account_closed",
              "card_not_active",
              "card_canceled",
              "physical_card_not_active",
              "entity_not_active",
              "group_locked",
              "insufficient_funds",
              "cvv2_mismatch",
              "card_expiration_mismatch",
              "transaction_not_allowed",
              "breaches_limit",
              "webhook_declined",
              "webhook_timed_out",
              "declined_by_stand_in_processing",
              "invalid_physical_card",
              "missing_original_authorization",
              "suspected_fraud"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The account has been closed.",
              "The Card was not active.",
              "The Card has been canceled.",
              "The Physical Card was not active.",
              "The account's entity was not active.",
              "The account was inactive.",
              "The Card's Account did not have a sufficient available balance.",
              "The given CVV2 did not match the card's value.",
              "The given expiration date did not match the card's value. Only applies when a CVV2 is present.",
              "The attempted card transaction is not allowed per Increase's terms.",
              "The transaction was blocked by a Limit.",
              "Your application declined the transaction via webhook.",
              "Your application webhook did not respond without the required timeout.",
              "Declined by stand-in processing.",
              "The card read had an invalid CVV, dCVV, or authorization request cryptogram.",
              "The original card authorization for this incremental authorization does not exist.",
              "The transaction was suspected to be fraudulent. Please reach out to support@increase.com for more information."
            ]
          },
          "digital_wallet_token_id": {
            "description": "The identifier of the Digital Wallet Token to be authorized.",
            "type": "string"
          },
          "direction": {
            "description": "The direction describes the direction the funds will move, either from the cardholder to the merchant or from the merchant to the cardholder.",
            "enum": [
              "settlement",
              "refund"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "A regular card authorization where funds are debited from the cardholder.",
              "A refund card authorization, sometimes referred to as a credit voucher authorization, where funds are credited to the cardholder."
            ]
          },
          "event_subscription_id": {
            "description": "The identifier of the Event Subscription to use. If provided, will override the default real time event subscription. Because you can only create one real time decision event subscription, you can use this field to route events to any specified event subscription for testing purposes.",
            "type": "string"
          },
          "merchant_acceptor_id": {
            "description": "The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "merchant_category_code": {
            "description": "The Merchant Category Code (commonly abbreviated as MCC) of the merchant the card is transacting with.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "merchant_city": {
            "description": "The city the merchant resides in.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "merchant_country": {
            "description": "The country the merchant resides in.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "merchant_descriptor": {
            "description": "The merchant descriptor of the merchant the card is transacting with.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "merchant_state": {
            "description": "The state the merchant resides in.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "network_details": {
            "description": "Fields specific to a given card network.",
            "properties": {
              "visa": {
                "description": "Fields specific to the Visa network.",
                "properties": {
                  "stand_in_processing_reason": {
                    "description": "The reason code for the stand-in processing.",
                    "enum": [
                      "issuer_error",
                      "invalid_physical_card",
                      "invalid_cardholder_authentication_verification_value",
                      "internal_visa_error",
                      "merchant_transaction_advisory_service_authentication_required",
                      "payment_fraud_disruption_acquirer_block",
                      "other"
                    ],
                    "type": "string",
                    "x-enum-descriptions": [
                      "Increase failed to process the authorization in a timely manner.",
                      "The physical card read had an invalid CVV, dCVV, or authorization request cryptogram.",
                      "The 3DS cardholder authentication verification value was invalid.",
                      "An internal Visa error occurred. Visa uses this reason code for certain expected occurrences as well, such as Application Transaction Counter (ATC) replays.",
                      "The merchant has enabled Visa's Transaction Advisory Service and requires further authentication to perform the transaction. In practice this is often utilized at fuel pumps to tell the cardholder to see the cashier.",
                      "The transaction was blocked by Visa's Payment Fraud Disruption service due to fraudulent Acquirer behavior, such as card testing.",
                      "An unspecific reason for stand-in processing."
                    ]
                  }
                },
                "type": "object"
              }
            },
            "required": [
              "visa"
            ],
            "type": "object"
          },
          "physical_card_id": {
            "description": "The identifier of the Physical Card to be authorized.",
            "type": "string"
          },
          "terminal_id": {
            "description": "The terminal identifier (commonly abbreviated as TID) of the terminal the card is transacting with.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "amount"
        ],
        "type": "object"
      },
      "sandbox_create_a_digital_wallet_token_request_parameters": {
        "example": {
          "card_id": "card_oubs0hwk5rn6knuecxg2"
        },
        "properties": {
          "card_id": {
            "description": "The identifier of the Card to be authorized.",
            "type": "string"
          }
        },
        "required": [
          "card_id"
        ],
        "type": "object"
      },
      "sandbox_create_a_notification_of_change_for_an_ach_transfer_parameters": {
        "example": {
          "change_code": "incorrect_routing_number",
          "corrected_data": "123456789"
        },
        "properties": {
          "change_code": {
            "description": "The reason for the notification of change.",
            "enum": [
              "incorrect_account_number",
              "incorrect_routing_number",
              "incorrect_routing_number_and_account_number",
              "incorrect_transaction_code",
              "incorrect_account_number_and_transaction_code",
              "incorrect_routing_number_account_number_and_transaction_code",
              "incorrect_receiving_depository_financial_institution_identification",
              "incorrect_individual_identification_number",
              "addenda_format_error",
              "incorrect_standard_entry_class_code_for_outbound_international_payment",
              "misrouted_notification_of_change",
              "incorrect_trace_number",
              "incorrect_company_identification_number",
              "incorrect_identification_number",
              "incorrectly_formatted_corrected_data",
              "incorrect_discretionary_data",
              "routing_number_not_from_original_entry_detail_record",
              "depository_financial_institution_account_number_not_from_original_entry_detail_record",
              "incorrect_transaction_code_by_originating_depository_financial_institution"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The account number was incorrect.",
              "The routing number was incorrect.",
              "Both the routing number and the account number were incorrect.",
              "The transaction code was incorrect. Try changing the `funding` parameter from checking to savings or vice-versa.",
              "The account number and the transaction code were incorrect.",
              "The routing number, account number, and transaction code were incorrect.",
              "The receiving depository financial institution identification was incorrect.",
              "The individual identification number was incorrect.",
              "The addenda had an incorrect format.",
              "The standard entry class code was incorrect for an outbound international payment.",
              "The notification of change was misrouted.",
              "The trace number was incorrect.",
              "The company identification number was incorrect.",
              "The individual identification number or identification number was incorrect.",
              "The corrected data was incorrectly formatted.",
              "The discretionary data was incorrect.",
              "The routing number was not from the original entry detail record.",
              "The depository financial institution account number was not from the original entry detail record.",
              "The transaction code was incorrect, initiated by the originating depository financial institution."
            ]
          },
          "corrected_data": {
            "description": "The corrected data for the notification of change (e.g., a new routing number).",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "change_code",
          "corrected_data"
        ],
        "type": "object"
      },
      "sandbox_create_a_program_parameters": {
        "example": {
          "name": "For Benefit Of"
        },
        "properties": {
          "name": {
            "description": "The name of the program being added.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "sandbox_create_a_tax_document_parameters": {
        "example": {
          "account_id": "account_in71c4amph0vgo2qllky"
        },
        "properties": {
          "account_id": {
            "description": "The identifier of the Account the tax document is for.",
            "type": "string"
          }
        },
        "required": [
          "account_id"
        ],
        "type": "object"
      },
      "sandbox_create_an_account_statement_parameters": {
        "example": {
          "account_id": "account_in71c4amph0vgo2qllky"
        },
        "properties": {
          "account_id": {
            "description": "The identifier of the Account the statement is for.",
            "type": "string"
          }
        },
        "required": [
          "account_id"
        ],
        "type": "object"
      },
      "sandbox_create_an_inbound_ach_transfer_parameters": {
        "example": {
          "account_number_id": "account_number_v18nkfqm6afpsrvy82b2",
          "amount": 1000
        },
        "properties": {
          "account_number_id": {
            "description": "The identifier of the Account Number the inbound ACH Transfer is for.",
            "type": "string"
          },
          "amount": {
            "description": "The transfer amount in cents. A positive amount originates a credit transfer pushing funds to the receiving account. A negative amount originates a debit transfer pulling funds from the receiving account.",
            "type": "integer"
          },
          "company_descriptive_date": {
            "description": "The description of the date of the transfer.",
            "maxLength": 6,
            "minLength": 1,
            "type": "string"
          },
          "company_discretionary_data": {
            "description": "Data associated with the transfer set by the sender.",
            "maxLength": 20,
            "minLength": 1,
            "type": "string"
          },
          "company_entry_description": {
            "description": "The description of the transfer set by the sender.",
            "maxLength": 10,
            "minLength": 1,
            "type": "string"
          },
          "company_id": {
            "description": "The sender's company ID.",
            "maxLength": 15,
            "minLength": 1,
            "type": "string"
          },
          "company_name": {
            "description": "The name of the sender.",
            "maxLength": 16,
            "minLength": 1,
            "type": "string"
          },
          "receiver_id_number": {
            "description": "The ID of the receiver of the transfer.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "receiver_name": {
            "description": "The name of the receiver of the transfer.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "resolve_at": {
            "description": "The time at which the transfer should be resolved. If not provided will resolve immediately.",
            "format": "date-time",
            "type": "string"
          },
          "standard_entry_class_code": {
            "description": "The standard entry class code for the transfer.",
            "enum": [
              "corporate_credit_or_debit",
              "corporate_trade_exchange",
              "prearranged_payments_and_deposit",
              "internet_initiated",
              "point_of_sale",
              "telephone_initiated",
              "customer_initiated",
              "accounts_receivable",
              "machine_transfer",
              "shared_network_transaction",
              "represented_check",
              "back_office_conversion",
              "point_of_purchase",
              "check_truncation",
              "destroyed_check",
              "international_ach_transaction"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "Corporate Credit and Debit (CCD).",
              "Corporate Trade Exchange (CTX).",
              "Prearranged Payments and Deposits (PPD).",
              "Internet Initiated (WEB).",
              "Point of Sale (POS).",
              "Telephone Initiated (TEL).",
              "Customer Initiated (CIE).",
              "Accounts Receivable (ARC).",
              "Machine Transfer (MTE).",
              "Shared Network Transaction (SHR).",
              "Represented Check (RCK).",
              "Back Office Conversion (BOC).",
              "Point of Purchase (POP).",
              "Check Truncation (TRC).",
              "Destroyed Check (XCK).",
              "International ACH Transaction (IAT)."
            ]
          }
        },
        "required": [
          "account_number_id",
          "amount"
        ],
        "type": "object"
      },
      "sandbox_create_an_inbound_check_deposit_parameters": {
        "example": {
          "account_number_id": "account_number_v18nkfqm6afpsrvy82b2",
          "amount": 1000,
          "check_number": "1234567890"
        },
        "properties": {
          "account_number_id": {
            "description": "The identifier of the Account Number the Inbound Check Deposit will be against.",
            "type": "string"
          },
          "amount": {
            "description": "The check amount in cents.",
            "minimum": 0,
            "type": "integer"
          },
          "check_number": {
            "description": "The check number on the check to be deposited.",
            "maxLength": 10,
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "account_number_id",
          "amount",
          "check_number"
        ],
        "type": "object"
      },
      "sandbox_create_an_inbound_mail_item_parameters": {
        "example": {
          "amount": 1000,
          "lockbox_id": "lockbox_3xt21ok13q19advds4t5"
        },
        "properties": {
          "amount": {
            "description": "The amount of the check to be simulated, in cents.",
            "minimum": 0,
            "type": "integer"
          },
          "contents_file_id": {
            "description": "The file containing the PDF contents. If not present, a default check image file will be used.",
            "type": "string"
          },
          "lockbox_id": {
            "description": "The identifier of the Lockbox to simulate inbound mail to.",
            "type": "string"
          }
        },
        "required": [
          "lockbox_id",
          "amount"
        ],
        "type": "object"
      },
      "sandbox_create_an_inbound_real_time_payments_transfer_parameters": {
        "example": {
          "account_number_id": "account_number_v18nkfqm6afpsrvy82b2",
          "amount": 1000,
          "request_for_payment_id": "real_time_payments_request_for_payment_28kcliz1oevcnqyn9qp7"
        },
        "properties": {
          "account_number_id": {
            "description": "The identifier of the Account Number the inbound Real-Time Payments Transfer is for.",
            "type": "string"
          },
          "amount": {
            "description": "The transfer amount in USD cents. Must be positive.",
            "minimum": 1,
            "type": "integer"
          },
          "debtor_account_number": {
            "description": "The account number of the account that sent the transfer.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "debtor_name": {
            "description": "The name provided by the sender of the transfer.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "debtor_routing_number": {
            "description": "The routing number of the account that sent the transfer.",
            "maxLength": 9,
            "minLength": 9,
            "type": "string"
          },
          "remittance_information": {
            "description": "Additional information included with the transfer.",
            "maxLength": 140,
            "minLength": 1,
            "type": "string"
          },
          "request_for_payment_id": {
            "description": "The identifier of a pending Request for Payment that this transfer will fulfill.",
            "type": "string"
          }
        },
        "required": [
          "account_number_id",
          "amount"
        ],
        "type": "object"
      },
      "sandbox_create_an_inbound_wire_drawdown_request_parameters": {
        "example": {
          "amount": 10000,
          "beneficiary_account_number": "987654321",
          "beneficiary_address_line1": "33 Liberty Street",
          "beneficiary_address_line2": "New York, NY, 10045",
          "beneficiary_name": "Ian Crease",
          "beneficiary_routing_number": "101050001",
          "currency": "USD",
          "message_to_recipient": "Invoice 29582",
          "originator_account_number": "987654321",
          "originator_address_line1": "33 Liberty Street",
          "originator_address_line2": "New York, NY, 10045",
          "originator_name": "Ian Crease",
          "originator_routing_number": "101050001",
          "recipient_account_number_id": "account_number_v18nkfqm6afpsrvy82b2"
        },
        "properties": {
          "amount": {
            "description": "The amount being requested in cents.",
            "minimum": 0,
            "type": "integer"
          },
          "beneficiary_account_number": {
            "description": "The drawdown request's beneficiary's account number.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "beneficiary_address_line1": {
            "description": "Line 1 of the drawdown request's beneficiary's address.",
            "maxLength": 35,
            "minLength": 1,
            "type": "string"
          },
          "beneficiary_address_line2": {
            "description": "Line 2 of the drawdown request's beneficiary's address.",
            "maxLength": 35,
            "minLength": 1,
            "type": "string"
          },
          "beneficiary_address_line3": {
            "description": "Line 3 of the drawdown request's beneficiary's address.",
            "maxLength": 35,
            "minLength": 1,
            "type": "string"
          },
          "beneficiary_name": {
            "description": "The drawdown request's beneficiary's name.",
            "maxLength": 35,
            "minLength": 1,
            "type": "string"
          },
          "beneficiary_routing_number": {
            "description": "The drawdown request's beneficiary's routing number.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "currency": {
            "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the amount being requested. Will always be \"USD\".",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "message_to_recipient": {
            "description": "A message from the drawdown request's originator.",
            "maxLength": 140,
            "minLength": 1,
            "type": "string"
          },
          "originator_account_number": {
            "description": "The drawdown request's originator's account number.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "originator_address_line1": {
            "description": "Line 1 of the drawdown request's originator's address.",
            "maxLength": 35,
            "minLength": 1,
            "type": "string"
          },
          "originator_address_line2": {
            "description": "Line 2 of the drawdown request's originator's address.",
            "maxLength": 35,
            "minLength": 1,
            "type": "string"
          },
          "originator_address_line3": {
            "description": "Line 3 of the drawdown request's originator's address.",
            "maxLength": 35,
            "minLength": 1,
            "type": "string"
          },
          "originator_name": {
            "description": "The drawdown request's originator's name.",
            "maxLength": 35,
            "minLength": 1,
            "type": "string"
          },
          "originator_routing_number": {
            "description": "The drawdown request's originator's routing number.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "originator_to_beneficiary_information_line1": {
            "description": "Line 1 of the information conveyed from the originator of the message to the beneficiary.",
            "maxLength": 35,
            "minLength": 1,
            "type": "string"
          },
          "originator_to_beneficiary_information_line2": {
            "description": "Line 2 of the information conveyed from the originator of the message to the beneficiary.",
            "maxLength": 35,
            "minLength": 1,
            "type": "string"
          },
          "originator_to_beneficiary_information_line3": {
            "description": "Line 3 of the information conveyed from the originator of the message to the beneficiary.",
            "maxLength": 35,
            "minLength": 1,
            "type": "string"
          },
          "originator_to_beneficiary_information_line4": {
            "description": "Line 4 of the information conveyed from the originator of the message to the beneficiary.",
            "maxLength": 35,
            "minLength": 1,
            "type": "string"
          },
          "recipient_account_number_id": {
            "description": "The Account Number to which the recipient of this request is being requested to send funds from.",
            "type": "string"
          }
        },
        "required": [
          "recipient_account_number_id",
          "originator_account_number",
          "originator_routing_number",
          "beneficiary_account_number",
          "beneficiary_routing_number",
          "amount",
          "currency",
          "message_to_recipient"
        ],
        "type": "object"
      },
      "sandbox_create_an_inbound_wire_transfer_parameters": {
        "example": {
          "account_number_id": "account_number_v18nkfqm6afpsrvy82b2",
          "amount": 1000
        },
        "properties": {
          "account_number_id": {
            "description": "The identifier of the Account Number the inbound Wire Transfer is for.",
            "type": "string"
          },
          "amount": {
            "description": "The transfer amount in cents. Must be positive.",
            "minimum": 1,
            "type": "integer"
          },
          "beneficiary_address_line1": {
            "description": "The sending bank will set beneficiary_address_line1 in production. You can simulate any value here.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "beneficiary_address_line2": {
            "description": "The sending bank will set beneficiary_address_line2 in production. You can simulate any value here.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "beneficiary_address_line3": {
            "description": "The sending bank will set beneficiary_address_line3 in production. You can simulate any value here.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "beneficiary_name": {
            "description": "The sending bank will set beneficiary_name in production. You can simulate any value here.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "beneficiary_reference": {
            "description": "The sending bank will set beneficiary_reference in production. You can simulate any value here.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "originator_address_line1": {
            "description": "The sending bank will set originator_address_line1 in production. You can simulate any value here.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "originator_address_line2": {
            "description": "The sending bank will set originator_address_line2 in production. You can simulate any value here.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "originator_address_line3": {
            "description": "The sending bank will set originator_address_line3 in production. You can simulate any value here.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "originator_name": {
            "description": "The sending bank will set originator_name in production. You can simulate any value here.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "originator_routing_number": {
            "description": "The sending bank will set originator_routing_number in production. You can simulate any value here.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "originator_to_beneficiary_information_line1": {
            "description": "The sending bank will set originator_to_beneficiary_information_line1 in production. You can simulate any value here.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "originator_to_beneficiary_information_line2": {
            "description": "The sending bank will set originator_to_beneficiary_information_line2 in production. You can simulate any value here.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "originator_to_beneficiary_information_line3": {
            "description": "The sending bank will set originator_to_beneficiary_information_line3 in production. You can simulate any value here.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "originator_to_beneficiary_information_line4": {
            "description": "The sending bank will set originator_to_beneficiary_information_line4 in production. You can simulate any value here.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "sender_reference": {
            "description": "The sending bank will set sender_reference in production. You can simulate any value here.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "account_number_id",
          "amount"
        ],
        "type": "object"
      },
      "sandbox_create_an_interest_payment_parameters": {
        "example": {
          "account_id": "account_in71c4amph0vgo2qllky",
          "amount": 1000
        },
        "properties": {
          "account_id": {
            "description": "The identifier of the Account the Interest Payment should be paid to is for.",
            "type": "string"
          },
          "accrued_on_account_id": {
            "description": "The identifier of the Account the Interest accrued on. Defaults to `account_id`.",
            "type": "string"
          },
          "amount": {
            "description": "The interest amount in cents. Must be positive.",
            "maximum": 1000000000,
            "minimum": 1,
            "type": "integer"
          },
          "period_end": {
            "description": "The end of the interest period. If not provided, defaults to the current time.",
            "format": "date-time",
            "type": "string"
          },
          "period_start": {
            "description": "The start of the interest period. If not provided, defaults to the current time.",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "account_id",
          "amount"
        ],
        "type": "object"
      },
      "sandbox_expire_a_card_authorization_parameters": {
        "example": {
          "card_payment_id": "card_payment_nd3k2kacrqjli8482ave"
        },
        "properties": {
          "card_payment_id": {
            "description": "The identifier of the Card Payment to expire.",
            "type": "string"
          }
        },
        "required": [
          "card_payment_id"
        ],
        "type": "object"
      },
      "sandbox_increment_a_card_authorization_parameters": {
        "example": {
          "amount": 500,
          "card_payment_id": "card_payment_nd3k2kacrqjli8482ave"
        },
        "properties": {
          "amount": {
            "description": "The amount of the increment in minor units in the card authorization's currency.",
            "maximum": 1000000000,
            "minimum": 1,
            "type": "integer"
          },
          "card_payment_id": {
            "description": "The identifier of the Card Payment to create a increment on.",
            "type": "string"
          },
          "event_subscription_id": {
            "description": "The identifier of the Event Subscription to use. If provided, will override the default real time event subscription. Because you can only create one real time decision event subscription, you can use this field to route events to any specified event subscription for testing purposes.",
            "type": "string"
          }
        },
        "required": [
          "card_payment_id",
          "amount"
        ],
        "type": "object"
      },
      "sandbox_refund_a_card_transaction_parameters": {
        "example": {
          "transaction_id": "transaction_uyrp7fld2ium70oa7oi"
        },
        "properties": {
          "transaction_id": {
            "description": "The identifier for the Transaction to refund. The Transaction's source must have a category of card_settlement.",
            "type": "string"
          }
        },
        "required": [
          "transaction_id"
        ],
        "type": "object"
      },
      "sandbox_return_an_ach_transfer_parameters": {
        "example": {},
        "properties": {
          "reason": {
            "description": "The reason why the Federal Reserve or destination bank returned this transfer. Defaults to `no_account`.",
            "enum": [
              "insufficient_fund",
              "no_account",
              "account_closed",
              "invalid_account_number_structure",
              "account_frozen_entry_returned_per_ofac_instruction",
              "credit_entry_refused_by_receiver",
              "unauthorized_debit_to_consumer_account_using_corporate_sec_code",
              "corporate_customer_advised_not_authorized",
              "payment_stopped",
              "non_transaction_account",
              "uncollected_funds",
              "routing_number_check_digit_error",
              "customer_advised_unauthorized_improper_ineligible_or_incomplete",
              "amount_field_error",
              "authorization_revoked_by_customer",
              "invalid_ach_routing_number",
              "file_record_edit_criteria",
              "enr_invalid_individual_name",
              "returned_per_odfi_request",
              "limited_participation_dfi",
              "incorrectly_coded_outbound_international_payment",
              "account_sold_to_another_dfi",
              "addenda_error",
              "beneficiary_or_account_holder_deceased",
              "customer_advised_not_within_authorization_terms",
              "corrected_return",
              "duplicate_entry",
              "duplicate_return",
              "enr_duplicate_enrollment",
              "enr_invalid_dfi_account_number",
              "enr_invalid_individual_id_number",
              "enr_invalid_representative_payee_indicator",
              "enr_invalid_transaction_code",
              "enr_return_of_enr_entry",
              "enr_routing_number_check_digit_error",
              "entry_not_processed_by_gateway",
              "field_error",
              "foreign_receiving_dfi_unable_to_settle",
              "iat_entry_coding_error",
              "improper_effective_entry_date",
              "improper_source_document_source_document_presented",
              "invalid_company_id",
              "invalid_foreign_receiving_dfi_identification",
              "invalid_individual_id_number",
              "item_and_rck_entry_presented_for_payment",
              "item_related_to_rck_entry_is_ineligible",
              "mandatory_field_error",
              "misrouted_dishonored_return",
              "misrouted_return",
              "no_errors_found",
              "non_acceptance_of_r62_dishonored_return",
              "non_participant_in_iat_program",
              "permissible_return_entry",
              "permissible_return_entry_not_accepted",
              "rdfi_non_settlement",
              "rdfi_participant_in_check_truncation_program",
              "representative_payee_deceased_or_unable_to_continue_in_that_capacity",
              "return_not_a_duplicate",
              "return_of_erroneous_or_reversing_debit",
              "return_of_improper_credit_entry",
              "return_of_improper_debit_entry",
              "return_of_xck_entry",
              "source_document_presented_for_payment",
              "state_law_affecting_rck_acceptance",
              "stop_payment_on_item_related_to_rck_entry",
              "stop_payment_on_source_document",
              "timely_original_return",
              "trace_number_error",
              "untimely_dishonored_return",
              "untimely_return"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "Code R01. Insufficient funds in the receiving account. Sometimes abbreviated to NSF.",
              "Code R03. The account does not exist or the receiving bank was unable to locate it.",
              "Code R02. The account is closed at the receiving bank.",
              "Code R04. The account number is invalid at the receiving bank.",
              "Code R16. The account at the receiving bank was frozen per the Office of Foreign Assets Control.",
              "Code R23. The receiving bank account refused a credit transfer.",
              "Code R05. The receiving bank rejected because of an incorrect Standard Entry Class code.",
              "Code R29. The corporate customer at the receiving bank reversed the transfer.",
              "Code R08. The receiving bank stopped payment on this transfer.",
              "Code R20. The receiving bank account does not perform transfers.",
              "Code R09. The receiving bank account does not have enough available balance for the transfer.",
              "Code R28. The routing number is incorrect.",
              "Code R10. The customer at the receiving bank reversed the transfer.",
              "Code R19. The amount field is incorrect or too large.",
              "Code R07. The customer at the receiving institution informed their bank that they have revoked authorization for a previously authorized transfer.",
              "Code R13. The routing number is invalid.",
              "Code R17. The receiving bank is unable to process a field in the transfer.",
              "Code R45. The individual name field was invalid.",
              "Code R06. The originating financial institution asked for this transfer to be returned. The receiving bank is complying with the request.",
              "Code R34. The receiving bank's regulatory supervisor has limited their participation in the ACH network.",
              "Code R85. The outbound international ACH transfer was incorrect.",
              "Code R12. A rare return reason. The account was sold to another bank.",
              "Code R25. The addenda record is incorrect or missing.",
              "Code R15. A rare return reason. The account holder is deceased.",
              "Code R11. A rare return reason. The customer authorized some payment to the sender, but this payment was not in error.",
              "Code R74. A rare return reason. Sent in response to a return that was returned with code `field_error`. The latest return should include the corrected field(s).",
              "Code R24. A rare return reason. The receiving bank received an exact duplicate entry with the same trace number and amount.",
              "Code R67. A rare return reason. The return this message refers to was a duplicate.",
              "Code R47. A rare return reason. Only used for US Government agency non-monetary automatic enrollment messages.",
              "Code R43. A rare return reason. Only used for US Government agency non-monetary automatic enrollment messages.",
              "Code R44. A rare return reason. Only used for US Government agency non-monetary automatic enrollment messages.",
              "Code R46. A rare return reason. Only used for US Government agency non-monetary automatic enrollment messages.",
              "Code R41. A rare return reason. Only used for US Government agency non-monetary automatic enrollment messages.",
              "Code R40. A rare return reason. Only used for US Government agency non-monetary automatic enrollment messages.",
              "Code R42. A rare return reason. Only used for US Government agency non-monetary automatic enrollment messages.",
              "Code R84. A rare return reason. The International ACH Transfer cannot be processed by the gateway.",
              "Code R69. A rare return reason. One or more of the fields in the ACH were malformed.",
              "Code R83. A rare return reason. The Foreign receiving bank was unable to settle this ACH transfer.",
              "Code R80. A rare return reason. The International ACH Transfer is malformed.",
              "Code R18. A rare return reason. The ACH has an improper effective entry date field.",
              "Code R39. A rare return reason. The source document related to this ACH, usually an ACH check conversion, was presented to the bank.",
              "Code R21. A rare return reason. The Company ID field of the ACH was invalid.",
              "Code R82. A rare return reason. The foreign receiving bank identifier for an International ACH Transfer was invalid.",
              "Code R22. A rare return reason. The Individual ID number field of the ACH was invalid.",
              "Code R53. A rare return reason. Both the Represented Check (\"RCK\") entry and the original check were presented to the bank.",
              "Code R51. A rare return reason. The Represented Check (\"RCK\") entry is ineligible.",
              "Code R26. A rare return reason. The ACH is missing a required field.",
              "Code R71. A rare return reason. The receiving bank does not recognize the routing number in a dishonored return entry.",
              "Code R61. A rare return reason. The receiving bank does not recognize the routing number in a return entry.",
              "Code R76. A rare return reason. Sent in response to a return, the bank does not find the errors alleged by the returning bank.",
              "Code R77. A rare return reason. The receiving bank does not accept the return of the erroneous debit. The funds are not available at the receiving bank.",
              "Code R81. A rare return reason. The receiving bank does not accept International ACH Transfers.",
              "Code R31. A rare return reason. A return that has been agreed to be accepted by the receiving bank, despite falling outside of the usual return timeframe.",
              "Code R70. A rare return reason. The receiving bank had not approved this return.",
              "Code R32. A rare return reason. The receiving bank could not settle this transaction.",
              "Code R30. A rare return reason. The receiving bank does not accept Check Truncation ACH transfers.",
              "Code R14. A rare return reason. The payee is deceased.",
              "Code R75. A rare return reason. The originating bank disputes that an earlier `duplicate_entry` return was actually a duplicate.",
              "Code R62. A rare return reason. The originating financial institution made a mistake and this return corrects it.",
              "Code R36. A rare return reason. Return of a malformed credit entry.",
              "Code R35. A rare return reason. Return of a malformed debit entry.",
              "Code R33. A rare return reason. Return of a Destroyed Check (\"XKC\") entry.",
              "Code R37. A rare return reason. The source document related to this ACH, usually an ACH check conversion, was presented to the bank.",
              "Code R50. A rare return reason. State law prevents the bank from accepting the Represented Check (\"RCK\") entry.",
              "Code R52. A rare return reason. A stop payment was issued on a Represented Check (\"RCK\") entry.",
              "Code R38. A rare return reason. The source attached to the ACH, usually an ACH check conversion, includes a stop payment.",
              "Code R73. A rare return reason. The bank receiving an `untimely_return` believes it was on time.",
              "Code R27. A rare return reason. An ACH return's trace number does not match an originated ACH.",
              "Code R72. A rare return reason. The dishonored return was sent too late.",
              "Code R68. A rare return reason. The return was sent too late."
            ]
          }
        },
        "type": "object"
      },
      "sandbox_reverse_a_card_authorization_parameters": {
        "example": {
          "card_payment_id": "card_payment_nd3k2kacrqjli8482ave"
        },
        "properties": {
          "amount": {
            "description": "The amount of the reversal in minor units in the card authorization's currency. This defaults to the authorization amount.",
            "maximum": 1000000000,
            "minimum": 1,
            "type": "integer"
          },
          "card_payment_id": {
            "description": "The identifier of the Card Payment to create a reversal on.",
            "type": "string"
          }
        },
        "required": [
          "card_payment_id"
        ],
        "type": "object"
      },
      "sandbox_settle_a_card_authorization_parameters": {
        "example": {
          "card_id": "card_oubs0hwk5rn6knuecxg2",
          "pending_transaction_id": "pending_transaction_k1sfetcau2qbvjbzgju4"
        },
        "properties": {
          "amount": {
            "description": "The amount to be settled. This defaults to the amount of the Pending Transaction being settled.",
            "minimum": 1,
            "type": "integer"
          },
          "card_id": {
            "description": "The identifier of the Card to create a settlement on.",
            "type": "string"
          },
          "pending_transaction_id": {
            "description": "The identifier of the Pending Transaction for the Card Authorization you wish to settle.",
            "type": "string"
          }
        },
        "required": [
          "card_id",
          "pending_transaction_id"
        ],
        "type": "object"
      },
      "submit_proof_of_authorization_parameters": {
        "example": {
          "additional_evidence_file_id": "file_makxrc67oh9l6sg7w9yc",
          "authorization_terms": "I agree to the terms of service.",
          "authorized_at": "2020-01-31T23:59:59Z",
          "authorizer_company": "National Phonograph Company",
          "authorizer_email": "user@example.com",
          "authorizer_name": "Ian Crease",
          "customer_has_been_offboarded": true,
          "proof_of_authorization_request_id": "proof_of_authorization_request_iwp8no25h3rjvil6ad3b",
          "validated_account_ownership_via_credential": true,
          "validated_account_ownership_with_account_statement": true,
          "validated_account_ownership_with_microdeposit": true
        },
        "properties": {
          "additional_evidence_file_id": {
            "description": "File containing additional evidence.",
            "type": "string"
          },
          "authorization_terms": {
            "description": "Terms of authorization.",
            "maxLength": 2048,
            "minLength": 1,
            "type": "string"
          },
          "authorized_at": {
            "description": "Time of authorization.",
            "format": "date-time",
            "type": "string"
          },
          "authorizer_company": {
            "description": "Company of the authorizer.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "authorizer_email": {
            "description": "Email of the authorizer.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "authorizer_ip_address": {
            "description": "IP address of the authorizer.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "authorizer_name": {
            "description": "Name of the authorizer.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "customer_has_been_offboarded": {
            "description": "Whether the customer has been offboarded or suspended.",
            "type": "boolean"
          },
          "proof_of_authorization_request_id": {
            "description": "ID of the proof of authorization request.",
            "type": "string"
          },
          "validated_account_ownership_via_credential": {
            "description": "Whether the account ownership was validated via credential (e.g. Plaid).",
            "type": "boolean"
          },
          "validated_account_ownership_with_account_statement": {
            "description": "Whether the account ownership was validated with an account statement.",
            "type": "boolean"
          },
          "validated_account_ownership_with_microdeposit": {
            "description": "Whether the account ownership was validated with a microdeposit.",
            "type": "boolean"
          }
        },
        "required": [
          "proof_of_authorization_request_id",
          "authorizer_email",
          "authorizer_name",
          "customer_has_been_offboarded",
          "validated_account_ownership_with_microdeposit",
          "validated_account_ownership_with_account_statement",
          "validated_account_ownership_via_credential",
          "authorization_terms",
          "authorized_at"
        ],
        "type": "object"
      },
      "transaction": {
        "description": "Transactions are the immutable additions and removals of money from your bank account. They're the equivalent of line items on your bank statement.",
        "example": {
          "account_id": "account_in71c4amph0vgo2qllky",
          "amount": 100,
          "created_at": "2020-01-31T23:59:59Z",
          "currency": "USD",
          "description": "INVOICE 2468",
          "id": "transaction_uyrp7fld2ium70oa7oi",
          "route_id": "account_number_v18nkfqm6afpsrvy82b2",
          "route_type": "account_number",
          "source": {
            "category": "inbound_ach_transfer",
            "inbound_ach_transfer": {
              "addenda": null,
              "amount": 100,
              "originator_company_descriptive_date": null,
              "originator_company_discretionary_data": null,
              "originator_company_entry_description": "RESERVE",
              "originator_company_id": "0987654321",
              "originator_company_name": "BIG BANK",
              "receiver_id_number": "12345678900",
              "receiver_name": "IAN CREASE",
              "trace_number": "021000038461022",
              "transfer_id": "inbound_ach_transfer_tdrwqr3fq9gnnq49odev"
            }
          },
          "type": "transaction"
        },
        "properties": {
          "account_id": {
            "description": "The identifier for the Account the Transaction belongs to.",
            "type": "string"
          },
          "amount": {
            "description": "The Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.",
            "type": "integer"
          },
          "created_at": {
            "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Transaction occurred.",
            "format": "date-time",
            "type": "string"
          },
          "currency": {
            "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Transaction's currency. This will match the currency on the Transaction's Account.",
            "enum": [
              "CAD",
              "CHF",
              "EUR",
              "GBP",
              "JPY",
              "USD"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "Canadian Dollar (CAD)",
              "Swiss Franc (CHF)",
              "Euro (EUR)",
              "British Pound (GBP)",
              "Japanese Yen (JPY)",
              "US Dollar (USD)"
            ]
          },
          "description": {
            "description": "An informational message describing this transaction. Use the fields in `source` to get more detailed information. This field appears as the line-item on the statement.",
            "type": "string"
          },
          "id": {
            "description": "The Transaction identifier.",
            "type": "string"
          },
          "route_id": {
            "anyOf": [
              {
                "description": "The identifier for the route this Transaction came through. Routes are things like cards and ACH details.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "route_type": {
            "anyOf": [
              {
                "description": "The type of the route this Transaction came through.",
                "enum": [
                  "account_number",
                  "card",
                  "lockbox"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "An Account Number.",
                  "A Card.",
                  "A Lockbox."
                ]
              },
              {
                "type": "null"
              }
            ]
          },
          "source": {
            "description": "This is an object giving more details on the network-level event that caused the Transaction. Note that for backwards compatibility reasons, additional undocumented keys may appear in this object. These should be treated as deprecated and will be removed in the future.",
            "example": {
              "category": "inbound_ach_transfer",
              "inbound_ach_transfer": {
                "addenda": null,
                "amount": 100,
                "originator_company_descriptive_date": null,
                "originator_company_discretionary_data": null,
                "originator_company_entry_description": "RESERVE",
                "originator_company_id": "0987654321",
                "originator_company_name": "BIG BANK",
                "receiver_id_number": "12345678900",
                "receiver_name": "IAN CREASE",
                "trace_number": "021000038461022",
                "transfer_id": "inbound_ach_transfer_tdrwqr3fq9gnnq49odev"
              }
            },
            "properties": {
              "account_transfer_intention": {
                "anyOf": [
                  {
                    "description": "An Account Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `account_transfer_intention`. Two Account Transfer Intentions are created from each Account Transfer. One decrements the source account, and the other increments the destination account.",
                    "example": {
                      "amount": 100,
                      "currency": "USD",
                      "description": "INVOICE 2468",
                      "destination_account_id": "account_uf16sut2ct5bevmq3eh",
                      "source_account_id": "account_in71c4amph0vgo2qllky",
                      "transfer_id": "account_transfer_7k9qe1ysdgqztnt63l7n"
                    },
                    "properties": {
                      "amount": {
                        "description": "The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
                        "type": "integer"
                      },
                      "currency": {
                        "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.",
                        "enum": [
                          "CAD",
                          "CHF",
                          "EUR",
                          "GBP",
                          "JPY",
                          "USD"
                        ],
                        "type": "string",
                        "x-enum-descriptions": [
                          "Canadian Dollar (CAD)",
                          "Swiss Franc (CHF)",
                          "Euro (EUR)",
                          "British Pound (GBP)",
                          "Japanese Yen (JPY)",
                          "US Dollar (USD)"
                        ]
                      },
                      "description": {
                        "description": "The description you chose to give the transfer.",
                        "type": "string"
                      },
                      "destination_account_id": {
                        "description": "The identifier of the Account to where the Account Transfer was sent.",
                        "type": "string"
                      },
                      "source_account_id": {
                        "description": "The identifier of the Account from where the Account Transfer was sent.",
                        "type": "string"
                      },
                      "transfer_id": {
                        "description": "The identifier of the Account Transfer that led to this Pending Transaction.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "amount",
                      "currency",
                      "description",
                      "destination_account_id",
                      "source_account_id",
                      "transfer_id"
                    ],
                    "title": "Account Transfer Intention",
                    "type": "object",
                    "x-title-plural": "Account Transfer Intentions"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "ach_transfer_intention": {
                "anyOf": [
                  {
                    "description": "An ACH Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_intention`. An ACH Transfer Intention is created from an ACH Transfer. It reflects the intention to move money into or out of an Increase account via the ACH network.",
                    "example": {
                      "account_number": "987654321",
                      "amount": 100,
                      "routing_number": "101050001",
                      "statement_descriptor": "INVOICE 2468",
                      "transfer_id": "account_transfer_7k9qe1ysdgqztnt63l7n"
                    },
                    "properties": {
                      "account_number": {
                        "description": "The account number for the destination account.",
                        "type": "string"
                      },
                      "amount": {
                        "description": "The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
                        "type": "integer"
                      },
                      "routing_number": {
                        "description": "The American Bankers' Association (ABA) Routing Transit Number (RTN) for the destination account.",
                        "type": "string"
                      },
                      "statement_descriptor": {
                        "description": "A description set when the ACH Transfer was created.",
                        "type": "string"
                      },
                      "transfer_id": {
                        "description": "The identifier of the ACH Transfer that led to this Transaction.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "amount",
                      "account_number",
                      "routing_number",
                      "statement_descriptor",
                      "transfer_id"
                    ],
                    "title": "ACH Transfer Intention",
                    "type": "object",
                    "x-title-plural": "ACH Transfer Intentions"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "ach_transfer_rejection": {
                "anyOf": [
                  {
                    "description": "An ACH Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_rejection`. An ACH Transfer Rejection is created when an ACH Transfer is rejected by Increase. It offsets the ACH Transfer Intention. These rejections are rare.",
                    "example": {
                      "transfer_id": "account_transfer_7k9qe1ysdgqztnt63l7n"
                    },
                    "properties": {
                      "transfer_id": {
                        "description": "The identifier of the ACH Transfer that led to this Transaction.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "transfer_id"
                    ],
                    "title": "ACH Transfer Rejection",
                    "type": "object",
                    "x-title-plural": "ACH Transfer Rejections"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "ach_transfer_return": {
                "anyOf": [
                  {
                    "description": "An ACH Transfer Return object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_return`. An ACH Transfer Return is created when an ACH Transfer is returned by the receiving bank. It offsets the ACH Transfer Intention. ACH Transfer Returns usually occur within the first two business days after the transfer is initiated, but can occur much later.",
                    "example": {
                      "created_at": "2020-01-31T23:59:59Z",
                      "raw_return_reason_code": "R01",
                      "return_reason_code": "insufficient_fund",
                      "trace_number": "111122223292834",
                      "transaction_id": "transaction_uyrp7fld2ium70oa7oi",
                      "transfer_id": "ach_transfer_uoxatyh3lt5evrsdvo7q"
                    },
                    "properties": {
                      "created_at": {
                        "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.",
                        "format": "date-time",
                        "type": "string"
                      },
                      "raw_return_reason_code": {
                        "description": "The three character ACH return code, in the range R01 to R85.",
                        "type": "string"
                      },
                      "return_reason_code": {
                        "description": "Why the ACH Transfer was returned. This reason code is sent by the receiving bank back to Increase.",
                        "enum": [
                          "insufficient_fund",
                          "no_account",
                          "account_closed",
                          "invalid_account_number_structure",
                          "account_frozen_entry_returned_per_ofac_instruction",
                          "credit_entry_refused_by_receiver",
                          "unauthorized_debit_to_consumer_account_using_corporate_sec_code",
                          "corporate_customer_advised_not_authorized",
                          "payment_stopped",
                          "non_transaction_account",
                          "uncollected_funds",
                          "routing_number_check_digit_error",
                          "customer_advised_unauthorized_improper_ineligible_or_incomplete",
                          "amount_field_error",
                          "authorization_revoked_by_customer",
                          "invalid_ach_routing_number",
                          "file_record_edit_criteria",
                          "enr_invalid_individual_name",
                          "returned_per_odfi_request",
                          "limited_participation_dfi",
                          "incorrectly_coded_outbound_international_payment",
                          "account_sold_to_another_dfi",
                          "addenda_error",
                          "beneficiary_or_account_holder_deceased",
                          "customer_advised_not_within_authorization_terms",
                          "corrected_return",
                          "duplicate_entry",
                          "duplicate_return",
                          "enr_duplicate_enrollment",
                          "enr_invalid_dfi_account_number",
                          "enr_invalid_individual_id_number",
                          "enr_invalid_representative_payee_indicator",
                          "enr_invalid_transaction_code",
                          "enr_return_of_enr_entry",
                          "enr_routing_number_check_digit_error",
                          "entry_not_processed_by_gateway",
                          "field_error",
                          "foreign_receiving_dfi_unable_to_settle",
                          "iat_entry_coding_error",
                          "improper_effective_entry_date",
                          "improper_source_document_source_document_presented",
                          "invalid_company_id",
                          "invalid_foreign_receiving_dfi_identification",
                          "invalid_individual_id_number",
                          "item_and_rck_entry_presented_for_payment",
                          "item_related_to_rck_entry_is_ineligible",
                          "mandatory_field_error",
                          "misrouted_dishonored_return",
                          "misrouted_return",
                          "no_errors_found",
                          "non_acceptance_of_r62_dishonored_return",
                          "non_participant_in_iat_program",
                          "permissible_return_entry",
                          "permissible_return_entry_not_accepted",
                          "rdfi_non_settlement",
                          "rdfi_participant_in_check_truncation_program",
                          "representative_payee_deceased_or_unable_to_continue_in_that_capacity",
                          "return_not_a_duplicate",
                          "return_of_erroneous_or_reversing_debit",
                          "return_of_improper_credit_entry",
                          "return_of_improper_debit_entry",
                          "return_of_xck_entry",
                          "source_document_presented_for_payment",
                          "state_law_affecting_rck_acceptance",
                          "stop_payment_on_item_related_to_rck_entry",
                          "stop_payment_on_source_document",
                          "timely_original_return",
                          "trace_number_error",
                          "untimely_dishonored_return",
                          "untimely_return"
                        ],
                        "type": "string",
                        "x-enum-descriptions": [
                          "Code R01. Insufficient funds in the receiving account. Sometimes abbreviated to NSF.",
                          "Code R03. The account does not exist or the receiving bank was unable to locate it.",
                          "Code R02. The account is closed at the receiving bank.",
                          "Code R04. The account number is invalid at the receiving bank.",
                          "Code R16. The account at the receiving bank was frozen per the Office of Foreign Assets Control.",
                          "Code R23. The receiving bank account refused a credit transfer.",
                          "Code R05. The receiving bank rejected because of an incorrect Standard Entry Class code.",
                          "Code R29. The corporate customer at the receiving bank reversed the transfer.",
                          "Code R08. The receiving bank stopped payment on this transfer.",
                          "Code R20. The receiving bank account does not perform transfers.",
                          "Code R09. The receiving bank account does not have enough available balance for the transfer.",
                          "Code R28. The routing number is incorrect.",
                          "Code R10. The customer at the receiving bank reversed the transfer.",
                          "Code R19. The amount field is incorrect or too large.",
                          "Code R07. The customer at the receiving institution informed their bank that they have revoked authorization for a previously authorized transfer.",
                          "Code R13. The routing number is invalid.",
                          "Code R17. The receiving bank is unable to process a field in the transfer.",
                          "Code R45. The individual name field was invalid.",
                          "Code R06. The originating financial institution asked for this transfer to be returned. The receiving bank is complying with the request.",
                          "Code R34. The receiving bank's regulatory supervisor has limited their participation in the ACH network.",
                          "Code R85. The outbound international ACH transfer was incorrect.",
                          "Code R12. A rare return reason. The account was sold to another bank.",
                          "Code R25. The addenda record is incorrect or missing.",
                          "Code R15. A rare return reason. The account holder is deceased.",
                          "Code R11. A rare return reason. The customer authorized some payment to the sender, but this payment was not in error.",
                          "Code R74. A rare return reason. Sent in response to a return that was returned with code `field_error`. The latest return should include the corrected field(s).",
                          "Code R24. A rare return reason. The receiving bank received an exact duplicate entry with the same trace number and amount.",
                          "Code R67. A rare return reason. The return this message refers to was a duplicate.",
                          "Code R47. A rare return reason. Only used for US Government agency non-monetary automatic enrollment messages.",
                          "Code R43. A rare return reason. Only used for US Government agency non-monetary automatic enrollment messages.",
                          "Code R44. A rare return reason. Only used for US Government agency non-monetary automatic enrollment messages.",
                          "Code R46. A rare return reason. Only used for US Government agency non-monetary automatic enrollment messages.",
                          "Code R41. A rare return reason. Only used for US Government agency non-monetary automatic enrollment messages.",
                          "Code R40. A rare return reason. Only used for US Government agency non-monetary automatic enrollment messages.",
                          "Code R42. A rare return reason. Only used for US Government agency non-monetary automatic enrollment messages.",
                          "Code R84. A rare return reason. The International ACH Transfer cannot be processed by the gateway.",
                          "Code R69. A rare return reason. One or more of the fields in the ACH were malformed.",
                          "Code R83. A rare return reason. The Foreign receiving bank was unable to settle this ACH transfer.",
                          "Code R80. A rare return reason. The International ACH Transfer is malformed.",
                          "Code R18. A rare return reason. The ACH has an improper effective entry date field.",
                          "Code R39. A rare return reason. The source document related to this ACH, usually an ACH check conversion, was presented to the bank.",
                          "Code R21. A rare return reason. The Company ID field of the ACH was invalid.",
                          "Code R82. A rare return reason. The foreign receiving bank identifier for an International ACH Transfer was invalid.",
                          "Code R22. A rare return reason. The Individual ID number field of the ACH was invalid.",
                          "Code R53. A rare return reason. Both the Represented Check (\"RCK\") entry and the original check were presented to the bank.",
                          "Code R51. A rare return reason. The Represented Check (\"RCK\") entry is ineligible.",
                          "Code R26. A rare return reason. The ACH is missing a required field.",
                          "Code R71. A rare return reason. The receiving bank does not recognize the routing number in a dishonored return entry.",
                          "Code R61. A rare return reason. The receiving bank does not recognize the routing number in a return entry.",
                          "Code R76. A rare return reason. Sent in response to a return, the bank does not find the errors alleged by the returning bank.",
                          "Code R77. A rare return reason. The receiving bank does not accept the return of the erroneous debit. The funds are not available at the receiving bank.",
                          "Code R81. A rare return reason. The receiving bank does not accept International ACH Transfers.",
                          "Code R31. A rare return reason. A return that has been agreed to be accepted by the receiving bank, despite falling outside of the usual return timeframe.",
                          "Code R70. A rare return reason. The receiving bank had not approved this return.",
                          "Code R32. A rare return reason. The receiving bank could not settle this transaction.",
                          "Code R30. A rare return reason. The receiving bank does not accept Check Truncation ACH transfers.",
                          "Code R14. A rare return reason. The payee is deceased.",
                          "Code R75. A rare return reason. The originating bank disputes that an earlier `duplicate_entry` return was actually a duplicate.",
                          "Code R62. A rare return reason. The originating financial institution made a mistake and this return corrects it.",
                          "Code R36. A rare return reason. Return of a malformed credit entry.",
                          "Code R35. A rare return reason. Return of a malformed debit entry.",
                          "Code R33. A rare return reason. Return of a Destroyed Check (\"XKC\") entry.",
                          "Code R37. A rare return reason. The source document related to this ACH, usually an ACH check conversion, was presented to the bank.",
                          "Code R50. A rare return reason. State law prevents the bank from accepting the Represented Check (\"RCK\") entry.",
                          "Code R52. A rare return reason. A stop payment was issued on a Represented Check (\"RCK\") entry.",
                          "Code R38. A rare return reason. The source attached to the ACH, usually an ACH check conversion, includes a stop payment.",
                          "Code R73. A rare return reason. The bank receiving an `untimely_return` believes it was on time.",
                          "Code R27. A rare return reason. An ACH return's trace number does not match an originated ACH.",
                          "Code R72. A rare return reason. The dishonored return was sent too late.",
                          "Code R68. A rare return reason. The return was sent too late."
                        ]
                      },
                      "trace_number": {
                        "description": "A 15 digit number that was generated by the bank that initiated the return. The trace number of the return is different than that of the original transfer. ACH trace numbers are not unique, but along with the amount and date this number can be used to identify the ACH return at the bank that initiated it.",
                        "type": "string"
                      },
                      "transaction_id": {
                        "description": "The identifier of the Transaction associated with this return.",
                        "type": "string"
                      },
                      "transfer_id": {
                        "description": "The identifier of the ACH Transfer associated with this return.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "created_at",
                      "trace_number",
                      "return_reason_code",
                      "raw_return_reason_code",
                      "transfer_id",
                      "transaction_id"
                    ],
                    "title": "ACH Transfer Return",
                    "type": "object",
                    "x-title-plural": "ACH Transfer Returns"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "card_dispute_acceptance": {
                "anyOf": [
                  {
                    "description": "A Card Dispute Acceptance object. This field will be present in the JSON response if and only if `category` is equal to `card_dispute_acceptance`. Contains the details of a successful Card Dispute.",
                    "example": {
                      "accepted_at": "2020-01-31T23:59:59Z",
                      "card_dispute_id": "card_dispute_h9sc95nbl1cgltpp7men",
                      "transaction_id": "transaction_uyrp7fld2ium70oa7oi"
                    },
                    "properties": {
                      "accepted_at": {
                        "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was accepted.",
                        "format": "date-time",
                        "type": "string"
                      },
                      "card_dispute_id": {
                        "description": "The identifier of the Card Dispute that was accepted.",
                        "type": "string"
                      },
                      "transaction_id": {
                        "description": "The identifier of the Transaction that was created to return the disputed funds to your account.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "accepted_at",
                      "card_dispute_id",
                      "transaction_id"
                    ],
                    "title": "Card Dispute Acceptance",
                    "type": "object",
                    "x-title-plural": "Card Dispute Acceptances"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "card_dispute_loss": {
                "anyOf": [
                  {
                    "description": "A Card Dispute Loss object. This field will be present in the JSON response if and only if `category` is equal to `card_dispute_loss`. Contains the details of a lost Card Dispute.",
                    "example": {
                      "card_dispute_id": "card_dispute_h9sc95nbl1cgltpp7men",
                      "explanation": "The card dispute was lost.",
                      "lost_at": "2020-01-31T23:59:59Z",
                      "transaction_id": "transaction_uyrp7fld2ium70oa7oi"
                    },
                    "properties": {
                      "card_dispute_id": {
                        "description": "The identifier of the Card Dispute that was lost.",
                        "type": "string"
                      },
                      "explanation": {
                        "description": "Why the Card Dispute was lost.",
                        "type": "string"
                      },
                      "lost_at": {
                        "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was lost.",
                        "format": "date-time",
                        "type": "string"
                      },
                      "transaction_id": {
                        "description": "The identifier of the Transaction that was created to debit the disputed funds from your account.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "lost_at",
                      "card_dispute_id",
                      "transaction_id",
                      "explanation"
                    ],
                    "title": "Card Dispute Loss",
                    "type": "object",
                    "x-title-plural": "Card Dispute Losses"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "card_refund": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/card_refund",
                    "description": "A Card Refund object. This field will be present in the JSON response if and only if `category` is equal to `card_refund`. Card Refunds move money back to the cardholder. While they are usually connected to a Card Settlement an acquirer can also refund money directly to a card without relation to a transaction."
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "card_revenue_payment": {
                "anyOf": [
                  {
                    "description": "A Card Revenue Payment object. This field will be present in the JSON response if and only if `category` is equal to `card_revenue_payment`. Card Revenue Payments reflect earnings from fees on card transactions.",
                    "example": {
                      "amount": 100,
                      "currency": "USD",
                      "period_end": "2025-03-31T23:59:59Z",
                      "period_start": "2025-03-01T00:00:00Z",
                      "transacted_on_account_id": "account_in71c4amph0vgo2qllky"
                    },
                    "properties": {
                      "amount": {
                        "description": "The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
                        "type": "integer"
                      },
                      "currency": {
                        "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.",
                        "enum": [
                          "CAD",
                          "CHF",
                          "EUR",
                          "GBP",
                          "JPY",
                          "USD"
                        ],
                        "type": "string",
                        "x-enum-descriptions": [
                          "Canadian Dollar (CAD)",
                          "Swiss Franc (CHF)",
                          "Euro (EUR)",
                          "British Pound (GBP)",
                          "Japanese Yen (JPY)",
                          "US Dollar (USD)"
                        ]
                      },
                      "period_end": {
                        "description": "The end of the period for which this transaction paid interest.",
                        "format": "date-time",
                        "type": "string"
                      },
                      "period_start": {
                        "description": "The start of the period for which this transaction paid interest.",
                        "format": "date-time",
                        "type": "string"
                      },
                      "transacted_on_account_id": {
                        "anyOf": [
                          {
                            "description": "The account the card belonged to.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      }
                    },
                    "required": [
                      "amount",
                      "currency",
                      "period_start",
                      "period_end",
                      "transacted_on_account_id"
                    ],
                    "title": "Card Revenue Payment",
                    "type": "object",
                    "x-title-plural": "Card Revenue Payments"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "card_settlement": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/card_settlement",
                    "description": "A Card Settlement object. This field will be present in the JSON response if and only if `category` is equal to `card_settlement`. Card Settlements are card transactions that have cleared and settled. While a settlement is usually preceded by an authorization, an acquirer can also directly clear a transaction without first authorizing it."
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "cashback_payment": {
                "anyOf": [
                  {
                    "description": "A Cashback Payment object. This field will be present in the JSON response if and only if `category` is equal to `cashback_payment`. A Cashback Payment represents the cashback paid to a cardholder for a given period. Cashback is usually paid monthly for the prior month's transactions.",
                    "example": {
                      "accrued_on_card_id": "card_oubs0hwk5rn6knuecxg2",
                      "amount": 100,
                      "currency": "USD",
                      "period_end": "2025-03-31T23:59:59Z",
                      "period_start": "2025-03-01T00:00:00Z"
                    },
                    "properties": {
                      "accrued_on_card_id": {
                        "anyOf": [
                          {
                            "description": "The card on which the cashback was accrued.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "amount": {
                        "description": "The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
                        "type": "integer"
                      },
                      "currency": {
                        "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.",
                        "enum": [
                          "CAD",
                          "CHF",
                          "EUR",
                          "GBP",
                          "JPY",
                          "USD"
                        ],
                        "type": "string",
                        "x-enum-descriptions": [
                          "Canadian Dollar (CAD)",
                          "Swiss Franc (CHF)",
                          "Euro (EUR)",
                          "British Pound (GBP)",
                          "Japanese Yen (JPY)",
                          "US Dollar (USD)"
                        ]
                      },
                      "period_end": {
                        "description": "The end of the period for which this transaction paid cashback.",
                        "format": "date-time",
                        "type": "string"
                      },
                      "period_start": {
                        "description": "The start of the period for which this transaction paid cashback.",
                        "format": "date-time",
                        "type": "string"
                      }
                    },
                    "required": [
                      "amount",
                      "currency",
                      "period_start",
                      "period_end",
                      "accrued_on_card_id"
                    ],
                    "title": "Cashback Payment",
                    "type": "object",
                    "x-title-plural": "Cashback Payments"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "category": {
                "description": "The type of the resource. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.",
                "enum": [
                  "account_transfer_intention",
                  "ach_transfer_intention",
                  "ach_transfer_rejection",
                  "ach_transfer_return",
                  "cashback_payment",
                  "card_dispute_acceptance",
                  "card_dispute_loss",
                  "card_refund",
                  "card_settlement",
                  "card_revenue_payment",
                  "check_deposit_acceptance",
                  "check_deposit_return",
                  "check_transfer_deposit",
                  "fee_payment",
                  "inbound_ach_transfer",
                  "inbound_ach_transfer_return_intention",
                  "inbound_check_deposit_return_intention",
                  "inbound_check_adjustment",
                  "inbound_real_time_payments_transfer_confirmation",
                  "inbound_real_time_payments_transfer_decline",
                  "inbound_wire_reversal",
                  "inbound_wire_transfer",
                  "inbound_wire_transfer_reversal",
                  "interest_payment",
                  "internal_source",
                  "real_time_payments_transfer_acknowledgement",
                  "sample_funds",
                  "wire_transfer_intention",
                  "other"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "Account Transfer Intention: details will be under the `account_transfer_intention` object.",
                  "ACH Transfer Intention: details will be under the `ach_transfer_intention` object.",
                  "ACH Transfer Rejection: details will be under the `ach_transfer_rejection` object.",
                  "ACH Transfer Return: details will be under the `ach_transfer_return` object.",
                  "Cashback Payment: details will be under the `cashback_payment` object.",
                  "Card Dispute Acceptance: details will be under the `card_dispute_acceptance` object.",
                  "Card Dispute Loss: details will be under the `card_dispute_loss` object.",
                  "Card Refund: details will be under the `card_refund` object.",
                  "Card Settlement: details will be under the `card_settlement` object.",
                  "Card Revenue Payment: details will be under the `card_revenue_payment` object.",
                  "Check Deposit Acceptance: details will be under the `check_deposit_acceptance` object.",
                  "Check Deposit Return: details will be under the `check_deposit_return` object.",
                  "Check Transfer Deposit: details will be under the `check_transfer_deposit` object.",
                  "Fee Payment: details will be under the `fee_payment` object.",
                  "Inbound ACH Transfer Intention: details will be under the `inbound_ach_transfer` object.",
                  "Inbound ACH Transfer Return Intention: details will be under the `inbound_ach_transfer_return_intention` object.",
                  "Inbound Check Deposit Return Intention: details will be under the `inbound_check_deposit_return_intention` object.",
                  "Inbound Check Adjustment: details will be under the `inbound_check_adjustment` object.",
                  "Inbound Real-Time Payments Transfer Confirmation: details will be under the `inbound_real_time_payments_transfer_confirmation` object.",
                  "Inbound Real-Time Payments Transfer Decline: details will be under the `inbound_real_time_payments_transfer_decline` object.",
                  "Inbound Wire Reversal: details will be under the `inbound_wire_reversal` object.",
                  "Inbound Wire Transfer Intention: details will be under the `inbound_wire_transfer` object.",
                  "Inbound Wire Transfer Reversal Intention: details will be under the `inbound_wire_transfer_reversal` object.",
                  "Interest Payment: details will be under the `interest_payment` object.",
                  "Internal Source: details will be under the `internal_source` object.",
                  "Real-Time Payments Transfer Acknowledgement: details will be under the `real_time_payments_transfer_acknowledgement` object.",
                  "Sample Funds: details will be under the `sample_funds` object.",
                  "Wire Transfer Intention: details will be under the `wire_transfer_intention` object.",
                  "The Transaction was made for an undocumented or deprecated reason."
                ]
              },
              "check_deposit_acceptance": {
                "anyOf": [
                  {
                    "description": "A Check Deposit Acceptance object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_acceptance`. A Check Deposit Acceptance is created when a Check Deposit is processed and its details confirmed. Check Deposits may be returned by the receiving bank, which will appear as a Check Deposit Return.",
                    "example": {
                      "account_number": "987654321",
                      "amount": 100,
                      "auxiliary_on_us": "101",
                      "check_deposit_id": "check_deposit_f06n9gpg7sxn8t19lfc1",
                      "currency": "USD",
                      "routing_number": "101050001",
                      "serial_number": null
                    },
                    "properties": {
                      "account_number": {
                        "description": "The account number printed on the check.",
                        "type": "string"
                      },
                      "amount": {
                        "description": "The amount to be deposited in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
                        "type": "integer"
                      },
                      "auxiliary_on_us": {
                        "anyOf": [
                          {
                            "description": "An additional line of metadata printed on the check. This typically includes the check number for business checks.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "check_deposit_id": {
                        "description": "The ID of the Check Deposit that was accepted.",
                        "type": "string"
                      },
                      "currency": {
                        "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.",
                        "enum": [
                          "CAD",
                          "CHF",
                          "EUR",
                          "GBP",
                          "JPY",
                          "USD"
                        ],
                        "type": "string",
                        "x-enum-descriptions": [
                          "Canadian Dollar (CAD)",
                          "Swiss Franc (CHF)",
                          "Euro (EUR)",
                          "British Pound (GBP)",
                          "Japanese Yen (JPY)",
                          "US Dollar (USD)"
                        ]
                      },
                      "routing_number": {
                        "description": "The routing number printed on the check.",
                        "type": "string"
                      },
                      "serial_number": {
                        "anyOf": [
                          {
                            "description": "The check serial number, if present, for consumer checks. For business checks, the serial number is usually in the `auxiliary_on_us` field.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      }
                    },
                    "required": [
                      "amount",
                      "currency",
                      "account_number",
                      "routing_number",
                      "auxiliary_on_us",
                      "serial_number",
                      "check_deposit_id"
                    ],
                    "title": "Check Deposit Acceptance",
                    "type": "object",
                    "x-title-plural": "Check Deposit Acceptances"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "check_deposit_return": {
                "anyOf": [
                  {
                    "description": "A Check Deposit Return object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_return`. A Check Deposit Return is created when a Check Deposit is returned by the bank holding the account it was drawn against. Check Deposits may be returned for a variety of reasons, including insufficient funds or a mismatched account number. Usually, checks are returned within the first 7 days after the deposit is made.",
                    "example": {
                      "amount": 100,
                      "check_deposit_id": "check_deposit_f06n9gpg7sxn8t19lfc1",
                      "currency": "USD",
                      "return_reason": "insufficient_funds",
                      "returned_at": "2020-01-31T23:59:59Z",
                      "transaction_id": "transaction_uyrp7fld2ium70oa7oi"
                    },
                    "properties": {
                      "amount": {
                        "description": "The returned amount in USD cents.",
                        "type": "integer"
                      },
                      "check_deposit_id": {
                        "description": "The identifier of the Check Deposit that was returned.",
                        "type": "string"
                      },
                      "currency": {
                        "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.",
                        "enum": [
                          "CAD",
                          "CHF",
                          "EUR",
                          "GBP",
                          "JPY",
                          "USD"
                        ],
                        "type": "string",
                        "x-enum-descriptions": [
                          "Canadian Dollar (CAD)",
                          "Swiss Franc (CHF)",
                          "Euro (EUR)",
                          "British Pound (GBP)",
                          "Japanese Yen (JPY)",
                          "US Dollar (USD)"
                        ]
                      },
                      "return_reason": {
                        "description": "Why this check was returned by the bank holding the account it was drawn against.",
                        "enum": [
                          "ach_conversion_not_supported",
                          "closed_account",
                          "duplicate_submission",
                          "insufficient_funds",
                          "no_account",
                          "not_authorized",
                          "stale_dated",
                          "stop_payment",
                          "unknown_reason",
                          "unmatched_details",
                          "unreadable_image",
                          "endorsement_irregular",
                          "altered_or_fictitious_item",
                          "frozen_or_blocked_account",
                          "post_dated",
                          "endorsement_missing",
                          "signature_missing",
                          "stop_payment_suspect",
                          "unusable_image",
                          "image_fails_security_check",
                          "cannot_determine_amount",
                          "signature_irregular",
                          "non_cash_item",
                          "unable_to_process",
                          "item_exceeds_dollar_limit",
                          "branch_or_account_sold"
                        ],
                        "type": "string",
                        "x-enum-descriptions": [
                          "The check doesn't allow ACH conversion.",
                          "The account is closed.",
                          "The check has already been deposited.",
                          "Insufficient funds",
                          "No account was found matching the check details.",
                          "The check was not authorized.",
                          "The check is too old.",
                          "The payment has been stopped by the account holder.",
                          "The reason for the return is unknown.",
                          "The image doesn't match the details submitted.",
                          "The image could not be read.",
                          "The check endorsement was irregular.",
                          "The check present was either altered or fake.",
                          "The account this check is drawn on is frozen.",
                          "The check is post dated.",
                          "The endorsement was missing.",
                          "The check signature was missing.",
                          "The bank suspects a stop payment will be placed.",
                          "The bank cannot read the image.",
                          "The check image fails the bank's security check.",
                          "The bank cannot determine the amount.",
                          "The signature is inconsistent with prior signatures.",
                          "The check is a non-cash item and cannot be drawn against the account.",
                          "The bank is unable to process this check.",
                          "The check exceeds the bank or customer's limit.",
                          "The bank sold this account and no longer services this customer."
                        ]
                      },
                      "returned_at": {
                        "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check deposit was returned.",
                        "format": "date-time",
                        "type": "string"
                      },
                      "transaction_id": {
                        "description": "The identifier of the transaction that reversed the original check deposit transaction.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "amount",
                      "returned_at",
                      "currency",
                      "check_deposit_id",
                      "transaction_id",
                      "return_reason"
                    ],
                    "title": "Check Deposit Return",
                    "type": "object",
                    "x-title-plural": "Check Deposit Returns"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "check_transfer_deposit": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/check_transfer_deposit",
                    "description": "A Check Transfer Deposit object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_deposit`. An Inbound Check is a check drawn on an Increase account that has been deposited by an external bank account. These types of checks are not pre-registered."
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "fee_payment": {
                "anyOf": [
                  {
                    "description": "A Fee Payment object. This field will be present in the JSON response if and only if `category` is equal to `fee_payment`. A Fee Payment represents a payment made to Increase.",
                    "example": {
                      "amount": 100,
                      "currency": "USD",
                      "fee_period_start": "2023-05-01",
                      "fee_statement_id": "fee_statement_lz33v0d7pnxwkptrdwq4",
                      "program_id": "program_i2v2os4mwza1oetokh9i"
                    },
                    "properties": {
                      "amount": {
                        "description": "The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
                        "type": "integer"
                      },
                      "currency": {
                        "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.",
                        "enum": [
                          "CAD",
                          "CHF",
                          "EUR",
                          "GBP",
                          "JPY",
                          "USD"
                        ],
                        "type": "string",
                        "x-enum-descriptions": [
                          "Canadian Dollar (CAD)",
                          "Swiss Franc (CHF)",
                          "Euro (EUR)",
                          "British Pound (GBP)",
                          "Japanese Yen (JPY)",
                          "US Dollar (USD)"
                        ]
                      },
                      "fee_period_start": {
                        "description": "The start of this payment's fee period, usually the first day of a month.",
                        "format": "date",
                        "type": "string"
                      },
                      "program_id": {
                        "anyOf": [
                          {
                            "description": "The Program for which this fee was incurred.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      }
                    },
                    "required": [
                      "amount",
                      "currency",
                      "fee_period_start",
                      "program_id"
                    ],
                    "title": "Fee Payment",
                    "type": "object",
                    "x-title-plural": "Fee Payments"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "inbound_ach_transfer": {
                "anyOf": [
                  {
                    "description": "An Inbound ACH Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `inbound_ach_transfer`. An Inbound ACH Transfer Intention is created when an ACH transfer is initiated at another bank and received by Increase.",
                    "example": {
                      "addenda": null,
                      "amount": 100,
                      "originator_company_descriptive_date": null,
                      "originator_company_discretionary_data": null,
                      "originator_company_entry_description": "RESERVE",
                      "originator_company_id": "0987654321",
                      "originator_company_name": "BIG BANK",
                      "receiver_id_number": "12345678900",
                      "receiver_name": "IAN CREASE",
                      "trace_number": "021000038461022",
                      "transfer_id": "inbound_ach_transfer_tdrwqr3fq9gnnq49odev"
                    },
                    "properties": {
                      "addenda": {
                        "anyOf": [
                          {
                            "description": "Additional information sent from the originator.",
                            "properties": {
                              "category": {
                                "description": "The type of addendum.",
                                "enum": [
                                  "freeform"
                                ],
                                "type": "string",
                                "x-enum-descriptions": [
                                  "Unstructured addendum."
                                ]
                              },
                              "freeform": {
                                "anyOf": [
                                  {
                                    "description": "Unstructured `payment_related_information` passed through by the originator.",
                                    "properties": {
                                      "entries": {
                                        "description": "Each entry represents an addendum received from the originator.",
                                        "items": {
                                          "properties": {
                                            "payment_related_information": {
                                              "description": "The payment related information passed in the addendum.",
                                              "type": "string"
                                            }
                                          },
                                          "required": [
                                            "payment_related_information"
                                          ],
                                          "title": "Entries Element",
                                          "type": "object",
                                          "x-title-plural": "Entries Elements"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "entries"
                                    ],
                                    "title": "Freeform",
                                    "type": "object",
                                    "x-title-plural": "Freeforms"
                                  },
                                  {
                                    "type": "null"
                                  }
                                ]
                              }
                            },
                            "required": [
                              "category",
                              "freeform"
                            ],
                            "title": "Addenda",
                            "type": "object",
                            "x-title-plural": "Addendas"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "amount": {
                        "description": "The transfer amount in USD cents.",
                        "type": "integer"
                      },
                      "originator_company_descriptive_date": {
                        "anyOf": [
                          {
                            "description": "The description of the date of the transfer, usually in the format `YYMMDD`.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "originator_company_discretionary_data": {
                        "anyOf": [
                          {
                            "description": "Data set by the originator.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "originator_company_entry_description": {
                        "description": "An informational description of the transfer.",
                        "type": "string"
                      },
                      "originator_company_id": {
                        "description": "An identifier for the originating company. This is generally, but not always, a stable identifier across multiple transfers.",
                        "type": "string"
                      },
                      "originator_company_name": {
                        "description": "A name set by the originator to identify themselves.",
                        "type": "string"
                      },
                      "receiver_id_number": {
                        "anyOf": [
                          {
                            "description": "The originator's identifier for the transfer recipient.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "receiver_name": {
                        "anyOf": [
                          {
                            "description": "The name of the transfer recipient. This value is informational and not verified by Increase.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "trace_number": {
                        "description": "A 15 digit number recorded in the Nacha file and available to both the originating and receiving bank. Along with the amount, date, and originating routing number, this can be used to identify the ACH transfer at either bank. ACH trace numbers are not unique, but are [used to correlate returns](https://increase.com/documentation/ach-returns#ach-returns).",
                        "type": "string"
                      },
                      "transfer_id": {
                        "description": "The Inbound ACH Transfer's identifier.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "amount",
                      "originator_company_name",
                      "originator_company_descriptive_date",
                      "originator_company_discretionary_data",
                      "originator_company_entry_description",
                      "originator_company_id",
                      "receiver_id_number",
                      "receiver_name",
                      "trace_number",
                      "transfer_id",
                      "addenda"
                    ],
                    "title": "Inbound ACH Transfer Intention",
                    "type": "object",
                    "x-title-plural": "Inbound ACH Transfer Intentions"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "inbound_ach_transfer_return_intention": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/inbound_ach_transfer_return_intention",
                    "description": "An Inbound ACH Transfer Return Intention object. This field will be present in the JSON response if and only if `category` is equal to `inbound_ach_transfer_return_intention`. An Inbound ACH Transfer Return Intention is created when an ACH transfer is initiated at another bank and returned by Increase."
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "inbound_check_adjustment": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/inbound_check_adjustment",
                    "description": "An Inbound Check Adjustment object. This field will be present in the JSON response if and only if `category` is equal to `inbound_check_adjustment`. An Inbound Check Adjustment is created when Increase receives an adjustment for a check or return deposited through Check21."
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "inbound_check_deposit_return_intention": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/inbound_check_deposit_return_intention",
                    "description": "An Inbound Check Deposit Return Intention object. This field will be present in the JSON response if and only if `category` is equal to `inbound_check_deposit_return_intention`. An Inbound Check Deposit Return Intention is created when Increase receives an Inbound Check and the User requests that it be returned."
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "inbound_real_time_payments_transfer_confirmation": {
                "anyOf": [
                  {
                    "description": "An Inbound Real-Time Payments Transfer Confirmation object. This field will be present in the JSON response if and only if `category` is equal to `inbound_real_time_payments_transfer_confirmation`. An Inbound Real-Time Payments Transfer Confirmation is created when a Real-Time Payments transfer is initiated at another bank and received by Increase.",
                    "example": {
                      "amount": 100,
                      "creditor_name": "Ian Crease",
                      "currency": "USD",
                      "debtor_account_number": "987654321",
                      "debtor_name": "National Phonograph Company",
                      "debtor_routing_number": "101050001",
                      "remittance_information": "Invoice 29582",
                      "transaction_identification": "20220501234567891T1BSLZO01745013025",
                      "transfer_id": "inbound_real_time_payments_transfer_63hlz498vcxg644hcrzr"
                    },
                    "properties": {
                      "amount": {
                        "description": "The amount in the minor unit of the transfer's currency. For dollars, for example, this is cents.",
                        "type": "integer"
                      },
                      "creditor_name": {
                        "description": "The name the sender of the transfer specified as the recipient of the transfer.",
                        "type": "string"
                      },
                      "currency": {
                        "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the transfer's currency. This will always be \"USD\" for a Real-Time Payments transfer.",
                        "enum": [
                          "CAD",
                          "CHF",
                          "EUR",
                          "GBP",
                          "JPY",
                          "USD"
                        ],
                        "type": "string",
                        "x-enum-descriptions": [
                          "Canadian Dollar (CAD)",
                          "Swiss Franc (CHF)",
                          "Euro (EUR)",
                          "British Pound (GBP)",
                          "Japanese Yen (JPY)",
                          "US Dollar (USD)"
                        ]
                      },
                      "debtor_account_number": {
                        "description": "The account number of the account that sent the transfer.",
                        "type": "string"
                      },
                      "debtor_name": {
                        "description": "The name provided by the sender of the transfer.",
                        "type": "string"
                      },
                      "debtor_routing_number": {
                        "description": "The routing number of the account that sent the transfer.",
                        "type": "string"
                      },
                      "remittance_information": {
                        "anyOf": [
                          {
                            "description": "Additional information included with the transfer.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "transaction_identification": {
                        "description": "The Real-Time Payments network identification of the transfer.",
                        "type": "string"
                      },
                      "transfer_id": {
                        "description": "The identifier of the Real-Time Payments Transfer that led to this Transaction.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "amount",
                      "currency",
                      "creditor_name",
                      "debtor_name",
                      "debtor_account_number",
                      "debtor_routing_number",
                      "transaction_identification",
                      "remittance_information",
                      "transfer_id"
                    ],
                    "title": "Inbound Real-Time Payments Transfer Confirmation",
                    "type": "object",
                    "x-title-plural": "Inbound Real-Time Payments Transfer Confirmations"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "inbound_real_time_payments_transfer_decline": {
                "anyOf": [
                  {
                    "description": "An Inbound Real-Time Payments Transfer Decline object. This field will be present in the JSON response if and only if `category` is equal to `inbound_real_time_payments_transfer_decline`.",
                    "example": {
                      "amount": 100,
                      "creditor_name": "Ian Crease",
                      "currency": "USD",
                      "debtor_account_number": "987654321",
                      "debtor_name": "National Phonograph Company",
                      "debtor_routing_number": "101050001",
                      "reason": "account_number_disabled",
                      "remittance_information": "Invoice 29582",
                      "transaction_identification": "20220501234567891T1BSLZO01745013025",
                      "transfer_id": "inbound_real_time_payments_transfer_63hlz498vcxg644hcrzr"
                    },
                    "properties": {
                      "amount": {
                        "description": "The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.",
                        "type": "integer"
                      },
                      "creditor_name": {
                        "description": "The name the sender of the transfer specified as the recipient of the transfer.",
                        "type": "string"
                      },
                      "currency": {
                        "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the declined transfer's currency. This will always be \"USD\" for a Real-Time Payments transfer.",
                        "enum": [
                          "CAD",
                          "CHF",
                          "EUR",
                          "GBP",
                          "JPY",
                          "USD"
                        ],
                        "type": "string",
                        "x-enum-descriptions": [
                          "Canadian Dollar (CAD)",
                          "Swiss Franc (CHF)",
                          "Euro (EUR)",
                          "British Pound (GBP)",
                          "Japanese Yen (JPY)",
                          "US Dollar (USD)"
                        ]
                      },
                      "debtor_account_number": {
                        "description": "The account number of the account that sent the transfer.",
                        "type": "string"
                      },
                      "debtor_name": {
                        "description": "The name provided by the sender of the transfer.",
                        "type": "string"
                      },
                      "debtor_routing_number": {
                        "description": "The routing number of the account that sent the transfer.",
                        "type": "string"
                      },
                      "reason": {
                        "description": "Why the transfer was declined.",
                        "enum": [
                          "account_number_canceled",
                          "account_number_disabled",
                          "account_restricted",
                          "group_locked",
                          "entity_not_active",
                          "real_time_payments_not_enabled"
                        ],
                        "type": "string",
                        "x-enum-descriptions": [
                          "The account number is canceled.",
                          "The account number is disabled.",
                          "Your account is restricted.",
                          "Your account is inactive.",
                          "The account's entity is not active.",
                          "Your account is not enabled to receive Real-Time Payments transfers."
                        ]
                      },
                      "remittance_information": {
                        "anyOf": [
                          {
                            "description": "Additional information included with the transfer.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "transaction_identification": {
                        "description": "The Real-Time Payments network identification of the declined transfer.",
                        "type": "string"
                      },
                      "transfer_id": {
                        "description": "The identifier of the Real-Time Payments Transfer that led to this Transaction.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "amount",
                      "currency",
                      "reason",
                      "creditor_name",
                      "debtor_name",
                      "debtor_account_number",
                      "debtor_routing_number",
                      "transaction_identification",
                      "remittance_information",
                      "transfer_id"
                    ],
                    "title": "Inbound Real-Time Payments Transfer Decline",
                    "type": "object",
                    "x-title-plural": "Inbound Real-Time Payments Transfer Declines"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "inbound_wire_reversal": {
                "anyOf": [
                  {
                    "description": "An Inbound Wire Reversal object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_reversal`. An Inbound Wire Reversal represents a reversal of a wire transfer that was initiated via Increase. The other bank is sending the money back. This most often happens when the original destination account details were incorrect.",
                    "example": {
                      "amount": 12345,
                      "created_at": "2020-01-31T23:59:59Z",
                      "description": "Inbound wire reversal 2022021100335128",
                      "financial_institution_to_financial_institution_information": null,
                      "input_cycle_date": "2022-02-11",
                      "input_message_accountability_data": "20220211B6B7HU2R011023",
                      "input_sequence_number": "11023",
                      "input_source": "B6B7HU2R",
                      "originator_routing_number": null,
                      "previous_message_input_cycle_date": "2022-02-10",
                      "previous_message_input_message_accountability_data": "20220210MMQFMP0P000007",
                      "previous_message_input_sequence_number": "3",
                      "previous_message_input_source": "MMQFMP0P",
                      "receiver_financial_institution_information": null,
                      "sender_reference": null,
                      "transaction_id": "transaction_uyrp7fld2ium70oa7oi",
                      "wire_transfer_id": "wire_transfer_5akynk7dqsq25qwk9q2u"
                    },
                    "properties": {
                      "amount": {
                        "description": "The amount that was reversed in USD cents.",
                        "type": "integer"
                      },
                      "created_at": {
                        "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the reversal was created.",
                        "format": "date-time",
                        "type": "string"
                      },
                      "description": {
                        "description": "The description on the reversal message from Fedwire, set by the reversing bank.",
                        "type": "string"
                      },
                      "financial_institution_to_financial_institution_information": {
                        "anyOf": [
                          {
                            "description": "Additional financial institution information included in the wire reversal.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "input_cycle_date": {
                        "description": "The Fedwire cycle date for the wire reversal. The \"Fedwire day\" begins at 9:00 PM Eastern Time on the evening before the `cycle date`.",
                        "format": "date",
                        "type": "string"
                      },
                      "input_message_accountability_data": {
                        "description": "The Fedwire transaction identifier.",
                        "type": "string"
                      },
                      "input_sequence_number": {
                        "description": "The Fedwire sequence number.",
                        "type": "string"
                      },
                      "input_source": {
                        "description": "The Fedwire input source identifier.",
                        "type": "string"
                      },
                      "originator_routing_number": {
                        "anyOf": [
                          {
                            "description": "The American Banking Association (ABA) routing number of the bank originating the transfer.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "previous_message_input_cycle_date": {
                        "description": "The Fedwire cycle date for the wire transfer that is being reversed by this message.",
                        "format": "date",
                        "type": "string"
                      },
                      "previous_message_input_message_accountability_data": {
                        "description": "The Fedwire transaction identifier for the wire transfer that was reversed.",
                        "type": "string"
                      },
                      "previous_message_input_sequence_number": {
                        "description": "The Fedwire sequence number for the wire transfer that was reversed.",
                        "type": "string"
                      },
                      "previous_message_input_source": {
                        "description": "The Fedwire input source identifier for the wire transfer that was reversed.",
                        "type": "string"
                      },
                      "receiver_financial_institution_information": {
                        "anyOf": [
                          {
                            "description": "Information included in the wire reversal for the receiving financial institution.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "sender_reference": {
                        "anyOf": [
                          {
                            "description": "The sending bank's reference number for the wire reversal.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "transaction_id": {
                        "description": "The ID for the Transaction associated with the transfer reversal.",
                        "type": "string"
                      },
                      "wire_transfer_id": {
                        "description": "The ID for the Wire Transfer that is being reversed.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "amount",
                      "created_at",
                      "description",
                      "input_cycle_date",
                      "input_sequence_number",
                      "input_source",
                      "input_message_accountability_data",
                      "previous_message_input_message_accountability_data",
                      "previous_message_input_cycle_date",
                      "previous_message_input_sequence_number",
                      "previous_message_input_source",
                      "receiver_financial_institution_information",
                      "financial_institution_to_financial_institution_information",
                      "transaction_id",
                      "wire_transfer_id",
                      "originator_routing_number",
                      "sender_reference"
                    ],
                    "title": "Inbound Wire Reversal",
                    "type": "object",
                    "x-title-plural": "Inbound Wire Reversals"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "inbound_wire_transfer": {
                "anyOf": [
                  {
                    "description": "An Inbound Wire Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_transfer`. An Inbound Wire Transfer Intention is created when a wire transfer is initiated at another bank and received by Increase.",
                    "example": {
                      "amount": 100,
                      "beneficiary_address_line1": null,
                      "beneficiary_address_line2": null,
                      "beneficiary_address_line3": null,
                      "beneficiary_name": null,
                      "beneficiary_reference": null,
                      "description": "Inbound wire transfer",
                      "input_message_accountability_data": null,
                      "originator_address_line1": null,
                      "originator_address_line2": null,
                      "originator_address_line3": null,
                      "originator_name": null,
                      "originator_routing_number": null,
                      "originator_to_beneficiary_information": null,
                      "originator_to_beneficiary_information_line1": null,
                      "originator_to_beneficiary_information_line2": null,
                      "originator_to_beneficiary_information_line3": null,
                      "originator_to_beneficiary_information_line4": null,
                      "transfer_id": "inbound_wire_transfer_f228m6bmhtcxjco9pwp0"
                    },
                    "properties": {
                      "amount": {
                        "description": "The amount in USD cents.",
                        "type": "integer"
                      },
                      "beneficiary_address_line1": {
                        "anyOf": [
                          {
                            "description": "A free-form address field set by the sender.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "beneficiary_address_line2": {
                        "anyOf": [
                          {
                            "description": "A free-form address field set by the sender.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "beneficiary_address_line3": {
                        "anyOf": [
                          {
                            "description": "A free-form address field set by the sender.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "beneficiary_name": {
                        "anyOf": [
                          {
                            "description": "A name set by the sender.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "beneficiary_reference": {
                        "anyOf": [
                          {
                            "description": "A free-form reference string set by the sender, to help identify the transfer.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "description": {
                        "description": "An Increase-constructed description of the transfer.",
                        "type": "string"
                      },
                      "input_message_accountability_data": {
                        "anyOf": [
                          {
                            "description": "A unique identifier available to the originating and receiving banks, commonly abbreviated as IMAD. It is created when the wire is submitted to the Fedwire service and is helpful when debugging wires with the originating bank.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "originator_address_line1": {
                        "anyOf": [
                          {
                            "description": "The address of the wire originator, set by the sending bank.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "originator_address_line2": {
                        "anyOf": [
                          {
                            "description": "The address of the wire originator, set by the sending bank.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "originator_address_line3": {
                        "anyOf": [
                          {
                            "description": "The address of the wire originator, set by the sending bank.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "originator_name": {
                        "anyOf": [
                          {
                            "description": "The originator of the wire, set by the sending bank.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "originator_routing_number": {
                        "anyOf": [
                          {
                            "description": "The American Banking Association (ABA) routing number of the bank originating the transfer.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "originator_to_beneficiary_information": {
                        "anyOf": [
                          {
                            "description": "An Increase-created concatenation of the Originator-to-Beneficiary lines.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "originator_to_beneficiary_information_line1": {
                        "anyOf": [
                          {
                            "description": "A free-form message set by the wire originator.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "originator_to_beneficiary_information_line2": {
                        "anyOf": [
                          {
                            "description": "A free-form message set by the wire originator.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "originator_to_beneficiary_information_line3": {
                        "anyOf": [
                          {
                            "description": "A free-form message set by the wire originator.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "originator_to_beneficiary_information_line4": {
                        "anyOf": [
                          {
                            "description": "A free-form message set by the wire originator.",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "transfer_id": {
                        "description": "The ID of the Inbound Wire Transfer object that resulted in this Transaction.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "amount",
                      "beneficiary_address_line1",
                      "beneficiary_address_line2",
                      "beneficiary_address_line3",
                      "beneficiary_name",
                      "beneficiary_reference",
                      "description",
                      "input_message_accountability_data",
                      "originator_address_line1",
                      "originator_address_line2",
                      "originator_address_line3",
                      "originator_name",
                      "originator_routing_number",
                      "originator_to_beneficiary_information_line1",
                      "originator_to_beneficiary_information_line2",
                      "originator_to_beneficiary_information_line3",
                      "originator_to_beneficiary_information_line4",
                      "originator_to_beneficiary_information",
                      "transfer_id"
                    ],
                    "title": "Inbound Wire Transfer Intention",
                    "type": "object",
                    "x-title-plural": "Inbound Wire Transfer Intentions"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "inbound_wire_transfer_reversal": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/inbound_wire_transfer_reversal",
                    "description": "An Inbound Wire Transfer Reversal Intention object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_transfer_reversal`. An Inbound Wire Transfer Reversal Intention is created when Increase has received a wire and the User requests that it be reversed."
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "interest_payment": {
                "anyOf": [
                  {
                    "description": "An Interest Payment object. This field will be present in the JSON response if and only if `category` is equal to `interest_payment`. An Interest Payment represents a payment of interest on an account. Interest is usually paid monthly.",
                    "example": {
                      "accrued_on_account_id": "account_in71c4amph0vgo2qllky",
                      "amount": 100,
                      "currency": "USD",
                      "period_end": "2025-03-31T23:59:59Z",
                      "period_start": "2025-03-01T00:00:00Z"
                    },
                    "properties": {
                      "accrued_on_account_id": {
                        "description": "The account on which the interest was accrued.",
                        "type": "string"
                      },
                      "amount": {
                        "description": "The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
                        "type": "integer"
                      },
                      "currency": {
                        "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.",
                        "enum": [
                          "CAD",
                          "CHF",
                          "EUR",
                          "GBP",
                          "JPY",
                          "USD"
                        ],
                        "type": "string",
                        "x-enum-descriptions": [
                          "Canadian Dollar (CAD)",
                          "Swiss Franc (CHF)",
                          "Euro (EUR)",
                          "British Pound (GBP)",
                          "Japanese Yen (JPY)",
                          "US Dollar (USD)"
                        ]
                      },
                      "period_end": {
                        "description": "The end of the period for which this transaction paid interest.",
                        "format": "date-time",
                        "type": "string"
                      },
                      "period_start": {
                        "description": "The start of the period for which this transaction paid interest.",
                        "format": "date-time",
                        "type": "string"
                      }
                    },
                    "required": [
                      "amount",
                      "currency",
                      "period_start",
                      "period_end",
                      "accrued_on_account_id"
                    ],
                    "title": "Interest Payment",
                    "type": "object",
                    "x-title-plural": "Interest Payments"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "internal_source": {
                "anyOf": [
                  {
                    "description": "An Internal Source object. This field will be present in the JSON response if and only if `category` is equal to `internal_source`. A transaction between the user and Increase. See the `reason` attribute for more information.",
                    "example": {
                      "amount": 100,
                      "currency": "USD",
                      "reason": "sample_funds"
                    },
                    "properties": {
                      "amount": {
                        "description": "The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
                        "type": "integer"
                      },
                      "currency": {
                        "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.",
                        "enum": [
                          "CAD",
                          "CHF",
                          "EUR",
                          "GBP",
                          "JPY",
                          "USD"
                        ],
                        "type": "string",
                        "x-enum-descriptions": [
                          "Canadian Dollar (CAD)",
                          "Swiss Franc (CHF)",
                          "Euro (EUR)",
                          "British Pound (GBP)",
                          "Japanese Yen (JPY)",
                          "US Dollar (USD)"
                        ]
                      },
                      "reason": {
                        "description": "An Internal Source is a transaction between you and Increase. This describes the reason for the transaction.",
                        "enum": [
                          "account_closure",
                          "bank_drawn_check",
                          "bank_drawn_check_credit",
                          "bank_migration",
                          "check_adjustment",
                          "collection_payment",
                          "collection_receivable",
                          "empyreal_adjustment",
                          "error",
                          "error_correction",
                          "fees",
                          "interest",
                          "negative_balance_forgiveness",
                          "sample_funds",
                          "sample_funds_return"
                        ],
                        "type": "string",
                        "x-enum-descriptions": [
                          "Account closure",
                          "Bank-drawn check",
                          "Bank-drawn check credit",
                          "Bank migration",
                          "Check adjustment",
                          "Collection payment",
                          "Collection receivable",
                          "Empyreal adjustment",
                          "Error",
                          "Error correction",
                          "Fees",
                          "Interest",
                          "Negative balance forgiveness",
                          "Sample funds",
                          "Sample funds return"
                        ]
                      }
                    },
                    "required": [
                      "amount",
                      "currency",
                      "reason"
                    ],
                    "title": "Internal Source",
                    "type": "object",
                    "x-title-plural": "Internal Sources"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "other": {
                "anyOf": [
                  {
                    "description": "If the category of this Transaction source is equal to `other`, this field will contain an empty object, otherwise it will contain null.",
                    "properties": {},
                    "title": "Other",
                    "type": "object",
                    "x-title-plural": "Others"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "real_time_payments_transfer_acknowledgement": {
                "anyOf": [
                  {
                    "description": "A Real-Time Payments Transfer Acknowledgement object. This field will be present in the JSON response if and only if `category` is equal to `real_time_payments_transfer_acknowledgement`. A Real-Time Payments Transfer Acknowledgement is created when a Real-Time Payments Transfer sent from Increase is acknowledged by the receiving bank.",
                    "example": {
                      "amount": 100,
                      "destination_account_number": "987654321",
                      "destination_routing_number": "101050001",
                      "remittance_information": "Invoice 29582",
                      "transfer_id": "real_time_payments_transfer_iyuhl5kdn7ssmup83mvq"
                    },
                    "properties": {
                      "amount": {
                        "description": "The transfer amount in USD cents.",
                        "type": "integer"
                      },
                      "destination_account_number": {
                        "description": "The destination account number.",
                        "type": "string"
                      },
                      "destination_routing_number": {
                        "description": "The American Bankers' Association (ABA) Routing Transit Number (RTN).",
                        "type": "string"
                      },
                      "remittance_information": {
                        "description": "Unstructured information that will show on the recipient's bank statement.",
                        "type": "string"
                      },
                      "transfer_id": {
                        "description": "The identifier of the Real-Time Payments Transfer that led to this Transaction.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "amount",
                      "destination_account_number",
                      "destination_routing_number",
                      "remittance_information",
                      "transfer_id"
                    ],
                    "title": "Real-Time Payments Transfer Acknowledgement",
                    "type": "object",
                    "x-title-plural": "Real-Time Payments Transfer Acknowledgements"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "sample_funds": {
                "anyOf": [
                  {
                    "description": "A Sample Funds object. This field will be present in the JSON response if and only if `category` is equal to `sample_funds`. Sample funds for testing purposes.",
                    "example": {
                      "originator": "dashboard"
                    },
                    "properties": {
                      "originator": {
                        "description": "Where the sample funds came from.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "originator"
                    ],
                    "title": "Sample Funds",
                    "type": "object",
                    "x-title-plural": "Sample Funds"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "wire_transfer_intention": {
                "anyOf": [
                  {
                    "description": "A Wire Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `wire_transfer_intention`. A Wire Transfer initiated via Increase and sent to a different bank.",
                    "example": {
                      "account_number": "987654321",
                      "amount": 100,
                      "message_to_recipient": "HELLO",
                      "routing_number": "101050001",
                      "transfer_id": "wire_transfer_5akynk7dqsq25qwk9q2u"
                    },
                    "properties": {
                      "account_number": {
                        "description": "The destination account number.",
                        "type": "string"
                      },
                      "amount": {
                        "description": "The transfer amount in USD cents.",
                        "type": "integer"
                      },
                      "message_to_recipient": {
                        "description": "The message that will show on the recipient's bank statement.",
                        "type": "string"
                      },
                      "routing_number": {
                        "description": "The American Bankers' Association (ABA) Routing Transit Number (RTN).",
                        "type": "string"
                      },
                      "transfer_id": {
                        "description": "The identifier of the Wire Transfer that led to this Transaction.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "amount",
                      "account_number",
                      "routing_number",
                      "message_to_recipient",
                      "transfer_id"
                    ],
                    "title": "Wire Transfer Intention",
                    "type": "object",
                    "x-title-plural": "Wire Transfer Intentions"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "required": [
              "category",
              "account_transfer_intention",
              "ach_transfer_intention",
              "ach_transfer_rejection",
              "ach_transfer_return",
              "cashback_payment",
              "card_dispute_acceptance",
              "card_dispute_loss",
              "card_refund",
              "card_settlement",
              "card_revenue_payment",
              "check_deposit_acceptance",
              "check_deposit_return",
              "check_transfer_deposit",
              "fee_payment",
              "inbound_ach_transfer",
              "inbound_ach_transfer_return_intention",
              "inbound_check_deposit_return_intention",
              "inbound_check_adjustment",
              "inbound_real_time_payments_transfer_confirmation",
              "inbound_real_time_payments_transfer_decline",
              "inbound_wire_reversal",
              "inbound_wire_transfer",
              "inbound_wire_transfer_reversal",
              "interest_payment",
              "internal_source",
              "real_time_payments_transfer_acknowledgement",
              "sample_funds",
              "wire_transfer_intention",
              "other"
            ],
            "title": "Transaction Source",
            "type": "object",
            "x-title-plural": "Transaction Sources"
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `transaction`.",
            "enum": [
              "transaction"
            ],
            "type": "string"
          }
        },
        "required": [
          "account_id",
          "amount",
          "currency",
          "created_at",
          "description",
          "id",
          "route_id",
          "route_type",
          "source",
          "type"
        ],
        "title": "Transaction",
        "type": "object",
        "x-tag": "Transactions",
        "x-title-plural": "Transactions"
      },
      "transaction_list": {
        "description": "A list of Transaction objects.",
        "example": {
          "data": [
            {
              "account_id": "account_in71c4amph0vgo2qllky",
              "amount": 100,
              "created_at": "2020-01-31T23:59:59Z",
              "currency": "USD",
              "description": "INVOICE 2468",
              "id": "transaction_uyrp7fld2ium70oa7oi",
              "route_id": "account_number_v18nkfqm6afpsrvy82b2",
              "route_type": "account_number",
              "source": {
                "category": "inbound_ach_transfer",
                "inbound_ach_transfer": {
                  "addenda": null,
                  "amount": 100,
                  "originator_company_descriptive_date": null,
                  "originator_company_discretionary_data": null,
                  "originator_company_entry_description": "RESERVE",
                  "originator_company_id": "0987654321",
                  "originator_company_name": "BIG BANK",
                  "receiver_id_number": "12345678900",
                  "receiver_name": "IAN CREASE",
                  "trace_number": "021000038461022",
                  "transfer_id": "inbound_ach_transfer_tdrwqr3fq9gnnq49odev"
                }
              },
              "type": "transaction"
            }
          ],
          "next_cursor": "v57w5d"
        },
        "properties": {
          "data": {
            "description": "The contents of the list.",
            "items": {
              "$ref": "#/components/schemas/transaction"
            },
            "type": "array"
          },
          "next_cursor": {
            "anyOf": [
              {
                "description": "A pointer to a place in the list.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "Transaction List",
        "type": "object",
        "x-title-plural": "Transaction Lists"
      },
      "update_a_bookkeeping_account_parameters": {
        "example": {
          "name": "Deprecated Account"
        },
        "properties": {
          "name": {
            "description": "The name you choose for the account.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "update_a_card_parameters": {
        "example": {
          "description": "New description"
        },
        "properties": {
          "billing_address": {
            "description": "The card's updated billing address.",
            "properties": {
              "city": {
                "description": "The city of the billing address.",
                "maxLength": 200,
                "minLength": 1,
                "type": "string"
              },
              "line1": {
                "description": "The first line of the billing address.",
                "maxLength": 200,
                "minLength": 1,
                "type": "string"
              },
              "line2": {
                "description": "The second line of the billing address.",
                "maxLength": 200,
                "minLength": 1,
                "type": "string"
              },
              "postal_code": {
                "description": "The postal code of the billing address.",
                "maxLength": 200,
                "minLength": 1,
                "type": "string"
              },
              "state": {
                "description": "The US state of the billing address.",
                "maxLength": 200,
                "minLength": 1,
                "type": "string"
              }
            },
            "required": [
              "line1",
              "city",
              "state",
              "postal_code"
            ],
            "type": "object"
          },
          "description": {
            "description": "The description you choose to give the card.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "digital_wallet": {
            "description": "The contact information used in the two-factor steps for digital wallet card creation. At least one field must be present to complete the digital wallet steps.",
            "properties": {
              "digital_card_profile_id": {
                "description": "The digital card profile assigned to this digital card.",
                "type": "string"
              },
              "email": {
                "description": "An email address that can be used to verify the cardholder via one-time passcode over email.",
                "maxLength": 200,
                "minLength": 1,
                "type": "string"
              },
              "phone": {
                "description": "A phone number that can be used to verify the cardholder via one-time passcode over SMS.",
                "maxLength": 200,
                "minLength": 1,
                "type": "string"
              }
            },
            "type": "object"
          },
          "entity_id": {
            "description": "The Entity the card belongs to. You only need to supply this in rare situations when the card is not for the Account holder.",
            "type": "string"
          },
          "status": {
            "description": "The status to update the Card with.",
            "enum": [
              "active",
              "disabled",
              "canceled"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The card is active.",
              "The card is temporarily disabled.",
              "The card is permanently canceled."
            ]
          }
        },
        "type": "object"
      },
      "update_a_lockbox_parameters": {
        "example": {
          "status": "inactive"
        },
        "properties": {
          "description": {
            "description": "The description you choose for the Lockbox.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "recipient_name": {
            "description": "The recipient name you choose for the Lockbox.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "status": {
            "description": "This indicates if checks can be sent to the Lockbox.",
            "enum": [
              "active",
              "inactive"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "This Lockbox is active. Checks mailed to it will be deposited automatically.",
              "This Lockbox is inactive. Checks mailed to it will not be deposited."
            ]
          }
        },
        "type": "object"
      },
      "update_a_natural_person_or_corporations_address_parameters": {
        "example": {
          "address": {
            "city": "New York",
            "line1": "33 Liberty Street",
            "line2": "Unit 2",
            "state": "NY",
            "zip": "10045"
          }
        },
        "properties": {
          "address": {
            "description": "The entity's physical address. Mail receiving locations like PO Boxes and PMB's are disallowed.",
            "properties": {
              "city": {
                "description": "The city of the address.",
                "maxLength": 200,
                "minLength": 1,
                "type": "string"
              },
              "line1": {
                "description": "The first line of the address. This is usually the street number and street.",
                "maxLength": 200,
                "minLength": 1,
                "type": "string"
              },
              "line2": {
                "description": "The second line of the address. This might be the floor or room number.",
                "maxLength": 200,
                "minLength": 1,
                "type": "string"
              },
              "state": {
                "description": "The two-letter United States Postal Service (USPS) abbreviation for the state of the address.",
                "maxLength": 200,
                "minLength": 1,
                "type": "string"
              },
              "zip": {
                "description": "The ZIP code of the address.",
                "maxLength": 200,
                "minLength": 1,
                "type": "string"
              }
            },
            "required": [
              "line1",
              "city",
              "state",
              "zip"
            ],
            "type": "object"
          }
        },
        "required": [
          "address"
        ],
        "type": "object"
      },
      "update_a_physical_card_parameters": {
        "example": {
          "status": "disabled"
        },
        "properties": {
          "status": {
            "description": "The status to update the Physical Card to.",
            "enum": [
              "active",
              "disabled",
              "canceled"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The physical card is active.",
              "The physical card is temporarily disabled.",
              "The physical card is permanently canceled."
            ]
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "update_an_account_number_parameters": {
        "example": {
          "inbound_ach": {
            "debit_status": "blocked"
          },
          "status": "disabled"
        },
        "properties": {
          "inbound_ach": {
            "description": "Options related to how this Account Number handles inbound ACH transfers.",
            "properties": {
              "debit_status": {
                "description": "Whether ACH debits are allowed against this Account Number. Note that ACH debits will be declined if this is `allowed` but the Account Number is not active.",
                "enum": [
                  "allowed",
                  "blocked"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "ACH Debits are allowed.",
                  "ACH Debits are blocked."
                ]
              }
            },
            "type": "object"
          },
          "inbound_checks": {
            "description": "Options related to how this Account Number should handle inbound check withdrawals.",
            "properties": {
              "status": {
                "description": "How Increase should process checks with this account number printed on them.",
                "enum": [
                  "allowed",
                  "check_transfers_only"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "Checks with this Account Number will be processed even if they are not associated with a Check Transfer.",
                  "Checks with this Account Number will be processed only if they can be matched to an existing Check Transfer."
                ]
              }
            },
            "required": [
              "status"
            ],
            "type": "object"
          },
          "name": {
            "description": "The name you choose for the Account Number.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "status": {
            "description": "This indicates if transfers can be made to the Account Number.",
            "enum": [
              "active",
              "disabled",
              "canceled"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The account number is active.",
              "The account number is temporarily disabled.",
              "The account number is permanently disabled."
            ]
          }
        },
        "type": "object"
      },
      "update_an_account_parameters": {
        "example": {
          "name": "My renamed account"
        },
        "properties": {
          "name": {
            "description": "The new name of the Account.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          }
        },
        "type": "object"
      },
      "update_an_event_subscription_parameters": {
        "example": {},
        "properties": {
          "status": {
            "description": "The status to update the Event Subscription with.",
            "enum": [
              "active",
              "disabled",
              "deleted"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The subscription is active and Events will be delivered normally.",
              "The subscription is temporarily disabled and Events will not be delivered.",
              "The subscription is permanently disabled and Events will not be delivered."
            ]
          }
        },
        "type": "object"
      },
      "update_an_external_account_parameters": {
        "example": {
          "description": "New description"
        },
        "properties": {
          "account_holder": {
            "description": "The type of entity that owns the External Account.",
            "enum": [
              "business",
              "individual"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The External Account is owned by a business.",
              "The External Account is owned by an individual."
            ]
          },
          "description": {
            "description": "The description you choose to give the external account.",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "funding": {
            "description": "The funding type of the External Account.",
            "enum": [
              "checking",
              "savings",
              "other"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "A checking account.",
              "A savings account.",
              "A different type of account."
            ]
          },
          "status": {
            "description": "The status of the External Account.",
            "enum": [
              "active",
              "archived"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The External Account is active.",
              "The External Account is archived and won't appear in the dashboard."
            ]
          }
        },
        "type": "object"
      },
      "update_the_address_for_a_beneficial_owner_belonging_to_a_corporate_entity_parameters": {
        "example": {
          "address": {
            "city": "New York",
            "line1": "33 Liberty Street",
            "line2": "Unit 2",
            "state": "NY",
            "zip": "10045"
          },
          "beneficial_owner_id": "entity_setup_beneficial_owner_submission_vgkyk7dj5eb4sfhdbkx7"
        },
        "properties": {
          "address": {
            "description": "The individual's physical address. Mail receiving locations like PO Boxes and PMB's are disallowed.",
            "properties": {
              "city": {
                "description": "The city of the address.",
                "maxLength": 200,
                "minLength": 1,
                "type": "string"
              },
              "line1": {
                "description": "The first line of the address. This is usually the street number and street.",
                "maxLength": 200,
                "minLength": 1,
                "type": "string"
              },
              "line2": {
                "description": "The second line of the address. This might be the floor or room number.",
                "maxLength": 200,
                "minLength": 1,
                "type": "string"
              },
              "state": {
                "description": "The two-letter United States Postal Service (USPS) abbreviation for the state of the address.",
                "maxLength": 200,
                "minLength": 1,
                "type": "string"
              },
              "zip": {
                "description": "The ZIP code of the address.",
                "maxLength": 200,
                "minLength": 1,
                "type": "string"
              }
            },
            "required": [
              "line1",
              "city",
              "state",
              "zip"
            ],
            "type": "object"
          },
          "beneficial_owner_id": {
            "description": "The identifying details of anyone controlling or owning 25% or more of the corporation.",
            "type": "string"
          }
        },
        "required": [
          "beneficial_owner_id",
          "address"
        ],
        "type": "object"
      },
      "update_the_industry_code_for_a_corporate_entity_parameters": {
        "example": {
          "industry_code": "5132"
        },
        "properties": {
          "industry_code": {
            "description": "The North American Industry Classification System (NAICS) code for the corporation's primary line of business. This is a number, like `5132` for `Software Publishers`. A full list of classification codes is available [here](https://increase.com/documentation/data-dictionary#north-american-industry-classification-system-codes).",
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "industry_code"
        ],
        "type": "object"
      },
      "wire_drawdown_request": {
        "description": "Wire drawdown requests enable you to request that someone else send you a wire. This feature is in beta; reach out to [support@increase.com](mailto:support@increase.com) to learn more.",
        "example": {
          "account_number_id": "account_number_v18nkfqm6afpsrvy82b2",
          "amount": 10000,
          "created_at": "2020-01-31T23:59:59Z",
          "currency": "USD",
          "fulfillment_inbound_wire_transfer_id": "inbound_wire_transfer_f228m6bmhtcxjco9pwp0",
          "id": "wire_drawdown_request_q6lmocus3glo0lr2bfv3",
          "idempotency_key": null,
          "message_to_recipient": "Invoice 29582",
          "originator_address_line1": null,
          "originator_address_line2": null,
          "originator_address_line3": null,
          "originator_name": null,
          "recipient_account_number": "987654321",
          "recipient_address_line1": "33 Liberty Street",
          "recipient_address_line2": "New York, NY, 10045",
          "recipient_address_line3": null,
          "recipient_name": "Ian Crease",
          "recipient_routing_number": "101050001",
          "status": "fulfilled",
          "submission": {
            "input_message_accountability_data": "20220118MMQFMP0P000003"
          },
          "type": "wire_drawdown_request"
        },
        "properties": {
          "account_number_id": {
            "description": "The Account Number to which the recipient of this request is being requested to send funds.",
            "type": "string"
          },
          "amount": {
            "description": "The amount being requested in cents.",
            "type": "integer"
          },
          "created_at": {
            "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the wire drawdown request was created.",
            "format": "date-time",
            "type": "string"
          },
          "currency": {
            "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the amount being requested. Will always be \"USD\".",
            "type": "string"
          },
          "fulfillment_inbound_wire_transfer_id": {
            "anyOf": [
              {
                "description": "If the recipient fulfills the drawdown request by sending funds, then this will be the identifier of the corresponding Transaction.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "id": {
            "description": "The Wire drawdown request identifier.",
            "type": "string"
          },
          "idempotency_key": {
            "anyOf": [
              {
                "description": "The idempotency key you chose for this object. This value is unique across Increase and is used to ensure that a request is only processed once. Learn more about [idempotency](https://increase.com/documentation/idempotency-keys).",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "message_to_recipient": {
            "description": "The message the recipient will see as part of the drawdown request.",
            "type": "string"
          },
          "originator_address_line1": {
            "anyOf": [
              {
                "description": "The originator's address line 1.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "originator_address_line2": {
            "anyOf": [
              {
                "description": "The originator's address line 2.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "originator_address_line3": {
            "anyOf": [
              {
                "description": "The originator's address line 3.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "originator_name": {
            "anyOf": [
              {
                "description": "The originator's name.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "recipient_account_number": {
            "description": "The drawdown request's recipient's account number.",
            "type": "string"
          },
          "recipient_address_line1": {
            "anyOf": [
              {
                "description": "Line 1 of the drawdown request's recipient's address.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "recipient_address_line2": {
            "anyOf": [
              {
                "description": "Line 2 of the drawdown request's recipient's address.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "recipient_address_line3": {
            "anyOf": [
              {
                "description": "Line 3 of the drawdown request's recipient's address.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "recipient_name": {
            "anyOf": [
              {
                "description": "The drawdown request's recipient's name.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "recipient_routing_number": {
            "description": "The drawdown request's recipient's routing number.",
            "type": "string"
          },
          "status": {
            "description": "The lifecycle status of the drawdown request.",
            "enum": [
              "pending_submission",
              "pending_response",
              "fulfilled",
              "refused"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The drawdown request is queued to be submitted to Fedwire.",
              "The drawdown request has been sent and the recipient should respond in some way.",
              "The drawdown request has been fulfilled by the recipient.",
              "The drawdown request has been refused by the recipient."
            ]
          },
          "submission": {
            "anyOf": [
              {
                "description": "After the drawdown request is submitted to Fedwire, this will contain supplemental details.",
                "example": {
                  "input_message_accountability_data": "20220118MMQFMP0P000003"
                },
                "properties": {
                  "input_message_accountability_data": {
                    "description": "The input message accountability data (IMAD) uniquely identifying the submission with Fedwire.",
                    "type": "string"
                  }
                },
                "required": [
                  "input_message_accountability_data"
                ],
                "title": "Wire Drawdown Request Submission",
                "type": "object",
                "x-title-plural": "Wire Drawdown Request Submissions"
              },
              {
                "type": "null"
              }
            ]
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `wire_drawdown_request`.",
            "enum": [
              "wire_drawdown_request"
            ],
            "type": "string"
          }
        },
        "required": [
          "type",
          "id",
          "created_at",
          "account_number_id",
          "recipient_account_number",
          "recipient_routing_number",
          "amount",
          "currency",
          "message_to_recipient",
          "recipient_name",
          "recipient_address_line1",
          "recipient_address_line2",
          "recipient_address_line3",
          "originator_name",
          "originator_address_line1",
          "originator_address_line2",
          "originator_address_line3",
          "submission",
          "fulfillment_inbound_wire_transfer_id",
          "status",
          "idempotency_key"
        ],
        "title": "Wire Drawdown Request",
        "type": "object",
        "x-tag": "Wire Drawdown Requests",
        "x-title-plural": "Wire Drawdown Requests"
      },
      "wire_drawdown_request_list": {
        "description": "A list of Wire Drawdown Request objects.",
        "example": {
          "data": [
            {
              "account_number_id": "account_number_v18nkfqm6afpsrvy82b2",
              "amount": 10000,
              "created_at": "2020-01-31T23:59:59Z",
              "currency": "USD",
              "fulfillment_inbound_wire_transfer_id": "inbound_wire_transfer_f228m6bmhtcxjco9pwp0",
              "id": "wire_drawdown_request_q6lmocus3glo0lr2bfv3",
              "idempotency_key": null,
              "message_to_recipient": "Invoice 29582",
              "originator_address_line1": null,
              "originator_address_line2": null,
              "originator_address_line3": null,
              "originator_name": null,
              "recipient_account_number": "987654321",
              "recipient_address_line1": "33 Liberty Street",
              "recipient_address_line2": "New York, NY, 10045",
              "recipient_address_line3": null,
              "recipient_name": "Ian Crease",
              "recipient_routing_number": "101050001",
              "status": "fulfilled",
              "submission": {
                "input_message_accountability_data": "20220118MMQFMP0P000003"
              },
              "type": "wire_drawdown_request"
            }
          ],
          "next_cursor": "v57w5d"
        },
        "properties": {
          "data": {
            "description": "The contents of the list.",
            "items": {
              "$ref": "#/components/schemas/wire_drawdown_request"
            },
            "type": "array"
          },
          "next_cursor": {
            "anyOf": [
              {
                "description": "A pointer to a place in the list.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "Wire Drawdown Request List",
        "type": "object",
        "x-title-plural": "Wire Drawdown Request Lists"
      },
      "wire_transfer": {
        "description": "Wire transfers move funds between your Increase account and any other account accessible by Fedwire.",
        "example": {
          "account_id": "account_in71c4amph0vgo2qllky",
          "account_number": "987654321",
          "amount": 100,
          "approval": {
            "approved_at": "2020-01-31T23:59:59Z",
            "approved_by": null
          },
          "beneficiary_address_line1": null,
          "beneficiary_address_line2": null,
          "beneficiary_address_line3": null,
          "beneficiary_name": null,
          "cancellation": null,
          "created_at": "2020-01-31T23:59:59Z",
          "created_by": {
            "category": "user",
            "user": {
              "email": "user@example.com"
            }
          },
          "currency": "USD",
          "external_account_id": "external_account_ukk55lr923a3ac0pp7iv",
          "id": "wire_transfer_5akynk7dqsq25qwk9q2u",
          "idempotency_key": null,
          "message_to_recipient": "Message to recipient",
          "network": "wire",
          "originator_address_line1": null,
          "originator_address_line2": null,
          "originator_address_line3": null,
          "originator_name": null,
          "pending_transaction_id": null,
          "reversal": null,
          "routing_number": "101050001",
          "source_account_number_id": null,
          "status": "complete",
          "submission": null,
          "transaction_id": "transaction_uyrp7fld2ium70oa7oi",
          "type": "wire_transfer"
        },
        "properties": {
          "account_id": {
            "description": "The Account to which the transfer belongs.",
            "type": "string"
          },
          "account_number": {
            "description": "The destination account number.",
            "type": "string"
          },
          "amount": {
            "description": "The transfer amount in USD cents.",
            "type": "integer"
          },
          "approval": {
            "anyOf": [
              {
                "description": "If your account requires approvals for transfers and the transfer was approved, this will contain details of the approval.",
                "example": {
                  "approved_at": "2020-01-31T23:59:59Z",
                  "approved_by": null
                },
                "properties": {
                  "approved_at": {
                    "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was approved.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "approved_by": {
                    "anyOf": [
                      {
                        "description": "If the Transfer was approved by a user in the dashboard, the email address of that user.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  }
                },
                "required": [
                  "approved_at",
                  "approved_by"
                ],
                "title": "Transfer Approval",
                "type": "object",
                "x-title-plural": "Transfer Approvals"
              },
              {
                "type": "null"
              }
            ]
          },
          "beneficiary_address_line1": {
            "anyOf": [
              {
                "description": "The beneficiary's address line 1.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "beneficiary_address_line2": {
            "anyOf": [
              {
                "description": "The beneficiary's address line 2.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "beneficiary_address_line3": {
            "anyOf": [
              {
                "description": "The beneficiary's address line 3.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "beneficiary_name": {
            "anyOf": [
              {
                "description": "The beneficiary's name.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "cancellation": {
            "anyOf": [
              {
                "description": "If your account requires approvals for transfers and the transfer was not approved, this will contain details of the cancellation.",
                "example": {
                  "canceled_at": "2020-01-31T23:59:59Z",
                  "canceled_by": null
                },
                "properties": {
                  "canceled_at": {
                    "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Transfer was canceled.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "canceled_by": {
                    "anyOf": [
                      {
                        "description": "If the Transfer was canceled by a user in the dashboard, the email address of that user.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  }
                },
                "required": [
                  "canceled_at",
                  "canceled_by"
                ],
                "title": "Transfer Cancellation",
                "type": "object",
                "x-title-plural": "Transfer Cancellations"
              },
              {
                "type": "null"
              }
            ]
          },
          "created_at": {
            "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.",
            "format": "date-time",
            "type": "string"
          },
          "created_by": {
            "anyOf": [
              {
                "description": "What object created the transfer, either via the API or the dashboard.",
                "example": {
                  "category": "user",
                  "user": {
                    "email": "user@example.com"
                  }
                },
                "properties": {
                  "api_key": {
                    "anyOf": [
                      {
                        "description": "If present, details about the API key that created the transfer.",
                        "properties": {
                          "description": {
                            "anyOf": [
                              {
                                "description": "The description set for the API key when it was created.",
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "required": [
                          "description"
                        ],
                        "title": "Api Key",
                        "type": "object",
                        "x-title-plural": "Api Keys"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "category": {
                    "description": "The type of object that created this transfer.",
                    "enum": [
                      "api_key",
                      "oauth_application",
                      "user"
                    ],
                    "type": "string",
                    "x-enum-descriptions": [
                      "An API key. Details will be under the `api_key` object.",
                      "An OAuth application you connected to Increase. Details will be under the `oauth_application` object.",
                      "A User in the Increase dashboard. Details will be under the `user` object."
                    ]
                  },
                  "oauth_application": {
                    "anyOf": [
                      {
                        "description": "If present, details about the OAuth Application that created the transfer.",
                        "properties": {
                          "name": {
                            "description": "The name of the OAuth Application.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "name"
                        ],
                        "title": "OAuth Application",
                        "type": "object",
                        "x-title-plural": "OAuth Applications"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "user": {
                    "anyOf": [
                      {
                        "description": "If present, details about the User that created the transfer.",
                        "properties": {
                          "email": {
                            "description": "The email address of the User.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "email"
                        ],
                        "title": "User",
                        "type": "object",
                        "x-title-plural": "Users"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  }
                },
                "required": [
                  "category",
                  "api_key",
                  "oauth_application",
                  "user"
                ],
                "title": "Transfer Creator",
                "type": "object",
                "x-title-plural": "Transfer Creators"
              },
              {
                "type": "null"
              }
            ]
          },
          "currency": {
            "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transfer's currency. For wire transfers this is always equal to `usd`.",
            "enum": [
              "CAD",
              "CHF",
              "EUR",
              "GBP",
              "JPY",
              "USD"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "Canadian Dollar (CAD)",
              "Swiss Franc (CHF)",
              "Euro (EUR)",
              "British Pound (GBP)",
              "Japanese Yen (JPY)",
              "US Dollar (USD)"
            ]
          },
          "external_account_id": {
            "anyOf": [
              {
                "description": "The identifier of the External Account the transfer was made to, if any.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "id": {
            "description": "The wire transfer's identifier.",
            "type": "string"
          },
          "idempotency_key": {
            "anyOf": [
              {
                "description": "The idempotency key you chose for this object. This value is unique across Increase and is used to ensure that a request is only processed once. Learn more about [idempotency](https://increase.com/documentation/idempotency-keys).",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "message_to_recipient": {
            "anyOf": [
              {
                "description": "The message that will show on the recipient's bank statement.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "network": {
            "description": "The transfer's network.",
            "enum": [
              "wire"
            ],
            "type": "string"
          },
          "originator_address_line1": {
            "anyOf": [
              {
                "description": "The originator's address line 1.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "originator_address_line2": {
            "anyOf": [
              {
                "description": "The originator's address line 2.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "originator_address_line3": {
            "anyOf": [
              {
                "description": "The originator's address line 3.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "originator_name": {
            "anyOf": [
              {
                "description": "The originator's name.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "pending_transaction_id": {
            "anyOf": [
              {
                "description": "The ID for the pending transaction representing the transfer. A pending transaction is created when the transfer [requires approval](https://increase.com/documentation/transfer-approvals#transfer-approvals) by someone else in your organization.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "reversal": {
            "anyOf": [
              {
                "description": "If your transfer is reversed, this will contain details of the reversal.",
                "example": {
                  "amount": 12345,
                  "created_at": "2020-01-31T23:59:59Z",
                  "description": "Inbound wire reversal 2022021100335128",
                  "financial_institution_to_financial_institution_information": null,
                  "input_cycle_date": "2022-02-11",
                  "input_message_accountability_data": "20220211B6B7HU2R011023",
                  "input_sequence_number": "11023",
                  "input_source": "B6B7HU2R",
                  "originator_routing_number": null,
                  "previous_message_input_cycle_date": "2022-02-10",
                  "previous_message_input_message_accountability_data": "20220210MMQFMP0P000007",
                  "previous_message_input_sequence_number": "3",
                  "previous_message_input_source": "MMQFMP0P",
                  "receiver_financial_institution_information": null,
                  "sender_reference": null,
                  "transaction_id": "transaction_uyrp7fld2ium70oa7oi",
                  "wire_transfer_id": "wire_transfer_5akynk7dqsq25qwk9q2u"
                },
                "properties": {
                  "amount": {
                    "description": "The amount that was reversed in USD cents.",
                    "type": "integer"
                  },
                  "created_at": {
                    "description": "The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the reversal was created.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "description": {
                    "description": "The description on the reversal message from Fedwire, set by the reversing bank.",
                    "type": "string"
                  },
                  "financial_institution_to_financial_institution_information": {
                    "anyOf": [
                      {
                        "description": "Additional financial institution information included in the wire reversal.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "input_cycle_date": {
                    "description": "The Fedwire cycle date for the wire reversal. The \"Fedwire day\" begins at 9:00 PM Eastern Time on the evening before the `cycle date`.",
                    "format": "date",
                    "type": "string"
                  },
                  "input_message_accountability_data": {
                    "description": "The Fedwire transaction identifier.",
                    "type": "string"
                  },
                  "input_sequence_number": {
                    "description": "The Fedwire sequence number.",
                    "type": "string"
                  },
                  "input_source": {
                    "description": "The Fedwire input source identifier.",
                    "type": "string"
                  },
                  "originator_routing_number": {
                    "anyOf": [
                      {
                        "description": "The American Banking Association (ABA) routing number of the bank originating the transfer.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "previous_message_input_cycle_date": {
                    "description": "The Fedwire cycle date for the wire transfer that is being reversed by this message.",
                    "format": "date",
                    "type": "string"
                  },
                  "previous_message_input_message_accountability_data": {
                    "description": "The Fedwire transaction identifier for the wire transfer that was reversed.",
                    "type": "string"
                  },
                  "previous_message_input_sequence_number": {
                    "description": "The Fedwire sequence number for the wire transfer that was reversed.",
                    "type": "string"
                  },
                  "previous_message_input_source": {
                    "description": "The Fedwire input source identifier for the wire transfer that was reversed.",
                    "type": "string"
                  },
                  "receiver_financial_institution_information": {
                    "anyOf": [
                      {
                        "description": "Information included in the wire reversal for the receiving financial institution.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "sender_reference": {
                    "anyOf": [
                      {
                        "description": "The sending bank's reference number for the wire reversal.",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "transaction_id": {
                    "description": "The ID for the Transaction associated with the transfer reversal.",
                    "type": "string"
                  },
                  "wire_transfer_id": {
                    "description": "The ID for the Wire Transfer that is being reversed.",
                    "type": "string"
                  }
                },
                "required": [
                  "amount",
                  "created_at",
                  "description",
                  "input_cycle_date",
                  "input_sequence_number",
                  "input_source",
                  "input_message_accountability_data",
                  "previous_message_input_message_accountability_data",
                  "previous_message_input_cycle_date",
                  "previous_message_input_sequence_number",
                  "previous_message_input_source",
                  "receiver_financial_institution_information",
                  "financial_institution_to_financial_institution_information",
                  "transaction_id",
                  "wire_transfer_id",
                  "originator_routing_number",
                  "sender_reference"
                ],
                "title": "Inbound Wire Reversal",
                "type": "object",
                "x-title-plural": "Inbound Wire Reversals"
              },
              {
                "type": "null"
              }
            ]
          },
          "routing_number": {
            "description": "The American Bankers' Association (ABA) Routing Transit Number (RTN).",
            "type": "string"
          },
          "source_account_number_id": {
            "anyOf": [
              {
                "description": "The Account Number that was passed to the wire's recipient.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "status": {
            "description": "The lifecycle status of the transfer.",
            "enum": [
              "pending_approval",
              "canceled",
              "pending_reviewing",
              "rejected",
              "requires_attention",
              "pending_creating",
              "reversed",
              "submitted",
              "complete"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "The transfer is pending approval.",
              "The transfer has been canceled.",
              "The transfer is pending review by Increase.",
              "The transfer has been rejected by Increase.",
              "The transfer requires attention from an Increase operator.",
              "The transfer is pending creation.",
              "The transfer has been reversed.",
              "The transfer has been submitted to Fedwire.",
              "The transfer has been acknowledged by Fedwire and can be considered complete."
            ]
          },
          "submission": {
            "anyOf": [
              {
                "description": "After the transfer is submitted to Fedwire, this will contain supplemental details.",
                "example": {
                  "input_message_accountability_data": "20220118MMQFMP0P000002",
                  "submitted_at": "2020-01-31T23:59:59Z"
                },
                "properties": {
                  "input_message_accountability_data": {
                    "description": "The accountability data for the submission.",
                    "type": "string"
                  },
                  "submitted_at": {
                    "description": "When this wire transfer was submitted to Fedwire.",
                    "format": "date-time",
                    "type": "string"
                  }
                },
                "required": [
                  "input_message_accountability_data",
                  "submitted_at"
                ],
                "title": "Wire Transfer Submission",
                "type": "object",
                "x-title-plural": "Wire Transfer Submissions"
              },
              {
                "type": "null"
              }
            ]
          },
          "transaction_id": {
            "anyOf": [
              {
                "description": "The ID for the transaction funding the transfer.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "type": {
            "description": "A constant representing the object's type. For this resource it will always be `wire_transfer`.",
            "enum": [
              "wire_transfer"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "message_to_recipient",
          "amount",
          "currency",
          "account_number",
          "beneficiary_name",
          "beneficiary_address_line1",
          "beneficiary_address_line2",
          "beneficiary_address_line3",
          "originator_name",
          "originator_address_line1",
          "originator_address_line2",
          "originator_address_line3",
          "account_id",
          "source_account_number_id",
          "external_account_id",
          "routing_number",
          "approval",
          "cancellation",
          "reversal",
          "created_at",
          "network",
          "status",
          "submission",
          "transaction_id",
          "pending_transaction_id",
          "created_by",
          "idempotency_key",
          "type"
        ],
        "title": "Wire Transfer",
        "type": "object",
        "x-tag": "Wire Transfers",
        "x-title-plural": "Wire Transfers"
      },
      "wire_transfer_list": {
        "description": "A list of Wire Transfer objects.",
        "example": {
          "data": [
            {
              "account_id": "account_in71c4amph0vgo2qllky",
              "account_number": "987654321",
              "amount": 100,
              "approval": {
                "approved_at": "2020-01-31T23:59:59Z",
                "approved_by": null
              },
              "beneficiary_address_line1": null,
              "beneficiary_address_line2": null,
              "beneficiary_address_line3": null,
              "beneficiary_name": null,
              "cancellation": null,
              "created_at": "2020-01-31T23:59:59Z",
              "created_by": {
                "category": "user",
                "user": {
                  "email": "user@example.com"
                }
              },
              "currency": "USD",
              "external_account_id": "external_account_ukk55lr923a3ac0pp7iv",
              "id": "wire_transfer_5akynk7dqsq25qwk9q2u",
              "idempotency_key": null,
              "message_to_recipient": "Message to recipient",
              "network": "wire",
              "originator_address_line1": null,
              "originator_address_line2": null,
              "originator_address_line3": null,
              "originator_name": null,
              "pending_transaction_id": null,
              "reversal": null,
              "routing_number": "101050001",
              "source_account_number_id": null,
              "status": "complete",
              "submission": null,
              "transaction_id": "transaction_uyrp7fld2ium70oa7oi",
              "type": "wire_transfer"
            }
          ],
          "next_cursor": "v57w5d"
        },
        "properties": {
          "data": {
            "description": "The contents of the list.",
            "items": {
              "$ref": "#/components/schemas/wire_transfer"
            },
            "type": "array"
          },
          "next_cursor": {
            "anyOf": [
              {
                "description": "A pointer to a place in the list.",
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "Wire Transfer List",
        "type": "object",
        "x-title-plural": "Wire Transfer Lists"
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "scheme": "bearer",
        "type": "http"
      }
    }
  },
  "info": {
    "description": "Anything that you can achieve with PDFs, presence, and persistence in a bank branch you can do with our API. We've always wanted a fully programmatic bank so we built one. Our API faithfully exposes the data and capabilities of the Federal Reserve, Visa, The Clearing House, depository networks, and accounting tools. It's lovingly boring and exceptionally powerful. If you have any questions or want to get started, don't hesitate to ping us at sales@increase.com. We can't wait to see what you build!",
    "title": "Increase API",
    "version": "0.0.1",
    "x-jentic-source-url": "https://increase.com/openapi.json"
  },
  "openapi": "3.1.0",
  "paths": {
    "/account_numbers": {
      "get": {
        "operationId": "list_account_numbers",
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "description": "Return the page of entries after this one.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "description": "Limit the size of the list that is returned. The default (and maximum) is 100 objects.",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "status.in",
            "required": false,
            "schema": {
              "description": "The status to retrieve Account Numbers for. For GET requests, this should be encoded as a comma-delimited string, such as `?in=one,two,three`.",
              "items": {
                "enum": [
                  "active",
                  "disabled",
                  "canceled"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "The account number is active.",
                  "The account number is temporarily disabled.",
                  "The account number is permanently disabled."
                ]
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "ach_debit_status.in",
            "required": false,
            "schema": {
              "description": "The ACH Debit status to retrieve Account Numbers for. For GET requests, this should be encoded as a comma-delimited string, such as `?in=one,two,three`.",
              "items": {
                "enum": [
                  "allowed",
                  "blocked"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "ACH Debits are allowed.",
                  "ACH Debits are blocked."
                ]
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "account_id",
            "required": false,
            "schema": {
              "description": "Filter Account Numbers to those belonging to the specified Account.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.after",
            "required": false,
            "schema": {
              "description": "Return results after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.before",
            "required": false,
            "schema": {
              "description": "Return results before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_after",
            "required": false,
            "schema": {
              "description": "Return results on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_before",
            "required": false,
            "schema": {
              "description": "Return results on or before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "idempotency_key",
            "required": false,
            "schema": {
              "description": "Filter records to the one with the specified `idempotency_key` you chose for that object. This value is unique across Increase and is used to ensure that a request is only processed once. Learn more about [idempotency](https://increase.com/documentation/idempotency-keys).",
              "maxLength": 200,
              "minLength": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account_number_list"
                }
              }
            },
            "description": "Account Number List"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "List Account Numbers",
        "x-sandbox-only": false,
        "x-tag": "Account Numbers"
      },
      "post": {
        "operationId": "create_an_account_number",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_an_account_number_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account_number"
                }
              }
            },
            "description": "Account Number"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Create an Account Number",
        "x-sandbox-only": false,
        "x-tag": "Account Numbers"
      }
    },
    "/account_numbers/{account_number_id}": {
      "get": {
        "operationId": "retrieve_an_account_number",
        "parameters": [
          {
            "example": "account_number_v18nkfqm6afpsrvy82b2",
            "in": "path",
            "name": "account_number_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Account Number to retrieve.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account_number"
                }
              }
            },
            "description": "Account Number"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Retrieve an Account Number",
        "x-sandbox-only": false,
        "x-tag": "Account Numbers"
      },
      "patch": {
        "operationId": "update_an_account_number",
        "parameters": [
          {
            "example": "account_number_v18nkfqm6afpsrvy82b2",
            "in": "path",
            "name": "account_number_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Account Number.",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_an_account_number_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account_number"
                }
              }
            },
            "description": "Account Number"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Update an Account Number",
        "x-sandbox-only": false,
        "x-tag": "Account Numbers"
      }
    },
    "/account_statements": {
      "get": {
        "operationId": "list_account_statements",
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "description": "Return the page of entries after this one.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "description": "Limit the size of the list that is returned. The default (and maximum) is 100 objects.",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "example": "account_in71c4amph0vgo2qllky",
            "in": "query",
            "name": "account_id",
            "required": false,
            "schema": {
              "description": "Filter Account Statements to those belonging to the specified Account.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "statement_period_start.after",
            "required": false,
            "schema": {
              "description": "Return results after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "statement_period_start.before",
            "required": false,
            "schema": {
              "description": "Return results before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "statement_period_start.on_or_after",
            "required": false,
            "schema": {
              "description": "Return results on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "statement_period_start.on_or_before",
            "required": false,
            "schema": {
              "description": "Return results on or before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account_statement_list"
                }
              }
            },
            "description": "Account Statement List"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "List Account Statements",
        "x-sandbox-only": false,
        "x-tag": "Account Statements"
      }
    },
    "/account_statements/{account_statement_id}": {
      "get": {
        "operationId": "retrieve_an_account_statement",
        "parameters": [
          {
            "example": "account_statement_lkc03a4skm2k7f38vj15",
            "in": "path",
            "name": "account_statement_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Account Statement to retrieve.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account_statement"
                }
              }
            },
            "description": "Account Statement"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Retrieve an Account Statement",
        "x-sandbox-only": false,
        "x-tag": "Account Statements"
      }
    },
    "/account_transfers": {
      "get": {
        "operationId": "list_account_transfers",
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "description": "Return the page of entries after this one.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "description": "Limit the size of the list that is returned. The default (and maximum) is 100 objects.",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "example": "account_in71c4amph0vgo2qllky",
            "in": "query",
            "name": "account_id",
            "required": false,
            "schema": {
              "description": "Filter Account Transfers to those that originated from the specified Account.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "idempotency_key",
            "required": false,
            "schema": {
              "description": "Filter records to the one with the specified `idempotency_key` you chose for that object. This value is unique across Increase and is used to ensure that a request is only processed once. Learn more about [idempotency](https://increase.com/documentation/idempotency-keys).",
              "maxLength": 200,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.after",
            "required": false,
            "schema": {
              "description": "Return results after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.before",
            "required": false,
            "schema": {
              "description": "Return results before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_after",
            "required": false,
            "schema": {
              "description": "Return results on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_before",
            "required": false,
            "schema": {
              "description": "Return results on or before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account_transfer_list"
                }
              }
            },
            "description": "Account Transfer List"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "List Account Transfers",
        "x-sandbox-only": false,
        "x-tag": "Account Transfers"
      },
      "post": {
        "operationId": "create_an_account_transfer",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_an_account_transfer_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account_transfer"
                }
              }
            },
            "description": "Account Transfer"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Create an Account Transfer",
        "x-sandbox-only": false,
        "x-tag": "Account Transfers"
      }
    },
    "/account_transfers/{account_transfer_id}": {
      "get": {
        "operationId": "retrieve_an_account_transfer",
        "parameters": [
          {
            "example": "account_transfer_7k9qe1ysdgqztnt63l7n",
            "in": "path",
            "name": "account_transfer_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Account Transfer.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account_transfer"
                }
              }
            },
            "description": "Account Transfer"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Retrieve an Account Transfer",
        "x-sandbox-only": false,
        "x-tag": "Account Transfers"
      }
    },
    "/account_transfers/{account_transfer_id}/approve": {
      "post": {
        "operationId": "approve_an_account_transfer",
        "parameters": [
          {
            "example": "account_transfer_7k9qe1ysdgqztnt63l7n",
            "in": "path",
            "name": "account_transfer_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Account Transfer to approve.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account_transfer"
                }
              }
            },
            "description": "Account Transfer"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Approve an Account Transfer",
        "x-sandbox-only": false,
        "x-tag": "Account Transfers"
      }
    },
    "/account_transfers/{account_transfer_id}/cancel": {
      "post": {
        "operationId": "cancel_an_account_transfer",
        "parameters": [
          {
            "example": "account_transfer_7k9qe1ysdgqztnt63l7n",
            "in": "path",
            "name": "account_transfer_id",
            "required": true,
            "schema": {
              "description": "The identifier of the pending Account Transfer to cancel.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account_transfer"
                }
              }
            },
            "description": "Account Transfer"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Cancel an Account Transfer",
        "x-sandbox-only": false,
        "x-tag": "Account Transfers"
      }
    },
    "/accounts": {
      "get": {
        "operationId": "list_accounts",
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "description": "Return the page of entries after this one.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "description": "Limit the size of the list that is returned. The default (and maximum) is 100 objects.",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "example": "entity_n8y8tnk2p9339ti393yi",
            "in": "query",
            "name": "entity_id",
            "required": false,
            "schema": {
              "description": "Filter Accounts for those belonging to the specified Entity.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "informational_entity_id",
            "required": false,
            "schema": {
              "description": "Filter Accounts for those belonging to the specified Entity as informational.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "program_id",
            "required": false,
            "schema": {
              "description": "Filter Accounts for those in a specific Program.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "status.in",
            "required": false,
            "schema": {
              "description": "Filter Accounts for those with the specified status. For GET requests, this should be encoded as a comma-delimited string, such as `?in=one,two,three`.",
              "items": {
                "enum": [
                  "closed",
                  "open"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "Closed Accounts on which no new activity can occur.",
                  "Open Accounts that are ready to use."
                ]
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "created_at.after",
            "required": false,
            "schema": {
              "description": "Return results after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.before",
            "required": false,
            "schema": {
              "description": "Return results before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_after",
            "required": false,
            "schema": {
              "description": "Return results on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_before",
            "required": false,
            "schema": {
              "description": "Return results on or before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "idempotency_key",
            "required": false,
            "schema": {
              "description": "Filter records to the one with the specified `idempotency_key` you chose for that object. This value is unique across Increase and is used to ensure that a request is only processed once. Learn more about [idempotency](https://increase.com/documentation/idempotency-keys).",
              "maxLength": 200,
              "minLength": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account_list"
                }
              }
            },
            "description": "Account List"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "List Accounts",
        "x-sandbox-only": false,
        "x-tag": "Accounts"
      },
      "post": {
        "operationId": "create_an_account",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_an_account_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account"
                }
              }
            },
            "description": "Account"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Create an Account",
        "x-sandbox-only": false,
        "x-tag": "Accounts"
      }
    },
    "/accounts/{account_id}": {
      "get": {
        "operationId": "retrieve_an_account",
        "parameters": [
          {
            "example": "account_in71c4amph0vgo2qllky",
            "in": "path",
            "name": "account_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Account to retrieve.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account"
                }
              }
            },
            "description": "Account"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Retrieve an Account",
        "x-sandbox-only": false,
        "x-tag": "Accounts"
      },
      "patch": {
        "operationId": "update_an_account",
        "parameters": [
          {
            "example": "account_in71c4amph0vgo2qllky",
            "in": "path",
            "name": "account_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Account to update.",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_an_account_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account"
                }
              }
            },
            "description": "Account"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Update an Account",
        "x-sandbox-only": false,
        "x-tag": "Accounts"
      }
    },
    "/accounts/{account_id}/balance": {
      "get": {
        "description": "Retrieve the current and available balances for an account in minor units of the account's currency. Learn more about [account balances](/documentation/balance).",
        "operationId": "retrieve_an_account_balance",
        "parameters": [
          {
            "example": "account_in71c4amph0vgo2qllky",
            "in": "path",
            "name": "account_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Account to retrieve.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "at_time",
            "required": false,
            "schema": {
              "description": "The moment to query the balance at. If not set, returns the current balances.",
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/balance_lookup"
                }
              }
            },
            "description": "Balance Lookup"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Retrieve an Account Balance",
        "x-sandbox-only": false,
        "x-tag": "Accounts"
      }
    },
    "/accounts/{account_id}/close": {
      "post": {
        "operationId": "close_an_account",
        "parameters": [
          {
            "example": "account_in71c4amph0vgo2qllky",
            "in": "path",
            "name": "account_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Account to close. The account must have a zero balance.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account"
                }
              }
            },
            "description": "Account"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Close an Account",
        "x-sandbox-only": false,
        "x-tag": "Accounts"
      }
    },
    "/accounts/{account_id}/intrafi_balance": {
      "get": {
        "operationId": "get_intrafi_balances_by_bank",
        "parameters": [
          {
            "example": "account_in71c4amph0vgo2qllky",
            "in": "path",
            "name": "account_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Account to get balances for.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/intrafi_balance"
                }
              }
            },
            "description": "IntraFi Balance"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Get IntraFi balances by bank",
        "x-sandbox-only": false,
        "x-tag": "IntraFi Balances"
      }
    },
    "/ach_prenotifications": {
      "get": {
        "operationId": "list_ach_prenotifications",
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "description": "Return the page of entries after this one.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "description": "Limit the size of the list that is returned. The default (and maximum) is 100 objects.",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "idempotency_key",
            "required": false,
            "schema": {
              "description": "Filter records to the one with the specified `idempotency_key` you chose for that object. This value is unique across Increase and is used to ensure that a request is only processed once. Learn more about [idempotency](https://increase.com/documentation/idempotency-keys).",
              "maxLength": 200,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.after",
            "required": false,
            "schema": {
              "description": "Return results after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.before",
            "required": false,
            "schema": {
              "description": "Return results before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_after",
            "required": false,
            "schema": {
              "description": "Return results on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_before",
            "required": false,
            "schema": {
              "description": "Return results on or before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ach_prenotification_list"
                }
              }
            },
            "description": "ACH Prenotification List"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "List ACH Prenotifications",
        "x-sandbox-only": false,
        "x-tag": "ACH Prenotifications"
      },
      "post": {
        "operationId": "create_an_ach_prenotification",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_an_ach_prenotification_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ach_prenotification"
                }
              }
            },
            "description": "ACH Prenotification"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Create an ACH Prenotification",
        "x-sandbox-only": false,
        "x-tag": "ACH Prenotifications"
      }
    },
    "/ach_prenotifications/{ach_prenotification_id}": {
      "get": {
        "operationId": "retrieve_an_ach_prenotification",
        "parameters": [
          {
            "example": "ach_prenotification_ubjf9qqsxl3obbcn1u34",
            "in": "path",
            "name": "ach_prenotification_id",
            "required": true,
            "schema": {
              "description": "The identifier of the ACH Prenotification to retrieve.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ach_prenotification"
                }
              }
            },
            "description": "ACH Prenotification"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Retrieve an ACH Prenotification",
        "x-sandbox-only": false,
        "x-tag": "ACH Prenotifications"
      }
    },
    "/ach_transfers": {
      "get": {
        "operationId": "list_ach_transfers",
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "description": "Return the page of entries after this one.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "description": "Limit the size of the list that is returned. The default (and maximum) is 100 objects.",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "example": "account_in71c4amph0vgo2qllky",
            "in": "query",
            "name": "account_id",
            "required": false,
            "schema": {
              "description": "Filter ACH Transfers to those that originated from the specified Account.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "external_account_id",
            "required": false,
            "schema": {
              "description": "Filter ACH Transfers to those made to the specified External Account.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "idempotency_key",
            "required": false,
            "schema": {
              "description": "Filter records to the one with the specified `idempotency_key` you chose for that object. This value is unique across Increase and is used to ensure that a request is only processed once. Learn more about [idempotency](https://increase.com/documentation/idempotency-keys).",
              "maxLength": 200,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "status.in",
            "required": false,
            "schema": {
              "description": "Return results whose value is in the provided list. For GET requests, this should be encoded as a comma-delimited string, such as `?in=one,two,three`.",
              "items": {
                "enum": [
                  "pending_approval",
                  "pending_transfer_session_confirmation",
                  "canceled",
                  "pending_submission",
                  "pending_reviewing",
                  "requires_attention",
                  "rejected",
                  "submitted",
                  "returned"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "The transfer is pending approval.",
                  "The transfer belongs to a Transfer Session that is pending confirmation.",
                  "The transfer has been canceled.",
                  "The transfer is pending submission to the Federal Reserve.",
                  "The transfer is pending review by Increase.",
                  "The transfer requires attention from an Increase operator.",
                  "The transfer has been rejected.",
                  "The transfer is complete.",
                  "The transfer has been returned."
                ]
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "created_at.after",
            "required": false,
            "schema": {
              "description": "Return results after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.before",
            "required": false,
            "schema": {
              "description": "Return results before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_after",
            "required": false,
            "schema": {
              "description": "Return results on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_before",
            "required": false,
            "schema": {
              "description": "Return results on or before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ach_transfer_list"
                }
              }
            },
            "description": "ACH Transfer List"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "List ACH Transfers",
        "x-sandbox-only": false,
        "x-tag": "ACH Transfers"
      },
      "post": {
        "operationId": "create_an_ach_transfer",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_an_ach_transfer_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ach_transfer"
                }
              }
            },
            "description": "ACH Transfer"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Create an ACH Transfer",
        "x-sandbox-only": false,
        "x-tag": "ACH Transfers"
      }
    },
    "/ach_transfers/{ach_transfer_id}": {
      "get": {
        "operationId": "retrieve_an_ach_transfer",
        "parameters": [
          {
            "example": "ach_transfer_uoxatyh3lt5evrsdvo7q",
            "in": "path",
            "name": "ach_transfer_id",
            "required": true,
            "schema": {
              "description": "The identifier of the ACH Transfer.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ach_transfer"
                }
              }
            },
            "description": "ACH Transfer"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Retrieve an ACH Transfer",
        "x-sandbox-only": false,
        "x-tag": "ACH Transfers"
      }
    },
    "/ach_transfers/{ach_transfer_id}/approve": {
      "post": {
        "description": "Approves an ACH Transfer in a pending_approval state.",
        "operationId": "approve_an_ach_transfer",
        "parameters": [
          {
            "example": "ach_transfer_uoxatyh3lt5evrsdvo7q",
            "in": "path",
            "name": "ach_transfer_id",
            "required": true,
            "schema": {
              "description": "The identifier of the ACH Transfer to approve.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ach_transfer"
                }
              }
            },
            "description": "ACH Transfer"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Approve an ACH Transfer",
        "x-sandbox-only": false,
        "x-tag": "ACH Transfers"
      }
    },
    "/ach_transfers/{ach_transfer_id}/cancel": {
      "post": {
        "description": "Cancels an ACH Transfer in a pending_approval state.",
        "operationId": "cancel_a_pending_ach_transfer",
        "parameters": [
          {
            "example": "ach_transfer_uoxatyh3lt5evrsdvo7q",
            "in": "path",
            "name": "ach_transfer_id",
            "required": true,
            "schema": {
              "description": "The identifier of the pending ACH Transfer to cancel.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ach_transfer"
                }
              }
            },
            "description": "ACH Transfer"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Cancel a pending ACH Transfer",
        "x-sandbox-only": false,
        "x-tag": "ACH Transfers"
      }
    },
    "/bookkeeping_accounts": {
      "get": {
        "operationId": "list_bookkeeping_accounts",
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "description": "Return the page of entries after this one.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "description": "Limit the size of the list that is returned. The default (and maximum) is 100 objects.",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "idempotency_key",
            "required": false,
            "schema": {
              "description": "Filter records to the one with the specified `idempotency_key` you chose for that object. This value is unique across Increase and is used to ensure that a request is only processed once. Learn more about [idempotency](https://increase.com/documentation/idempotency-keys).",
              "maxLength": 200,
              "minLength": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bookkeeping_account_list"
                }
              }
            },
            "description": "Bookkeeping Account List"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "List Bookkeeping Accounts",
        "x-sandbox-only": false,
        "x-tag": "Bookkeeping Accounts"
      },
      "post": {
        "operationId": "create_a_bookkeeping_account",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_a_bookkeeping_account_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bookkeeping_account"
                }
              }
            },
            "description": "Bookkeeping Account"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Create a Bookkeeping Account",
        "x-sandbox-only": false,
        "x-tag": "Bookkeeping Accounts"
      }
    },
    "/bookkeeping_accounts/{bookkeeping_account_id}": {
      "patch": {
        "operationId": "update_a_bookkeeping_account",
        "parameters": [
          {
            "example": "bookkeeping_account_e37p1f1iuocw5intf35v",
            "in": "path",
            "name": "bookkeeping_account_id",
            "required": true,
            "schema": {
              "description": "The bookkeeping account you would like to update.",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_a_bookkeeping_account_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bookkeeping_account"
                }
              }
            },
            "description": "Bookkeeping Account"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Update a Bookkeeping Account",
        "x-sandbox-only": false,
        "x-tag": "Bookkeeping Accounts"
      }
    },
    "/bookkeeping_accounts/{bookkeeping_account_id}/balance": {
      "get": {
        "operationId": "retrieve_a_bookkeeping_account_balance",
        "parameters": [
          {
            "example": "bookkeeping_account_e37p1f1iuocw5intf35v",
            "in": "path",
            "name": "bookkeeping_account_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Bookkeeping Account to retrieve.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "at_time",
            "required": false,
            "schema": {
              "description": "The moment to query the balance at. If not set, returns the current balances.",
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bookkeeping_balance_lookup"
                }
              }
            },
            "description": "Bookkeeping Balance Lookup"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Retrieve a Bookkeeping Account Balance",
        "x-sandbox-only": false,
        "x-tag": "Bookkeeping Accounts"
      }
    },
    "/bookkeeping_entries": {
      "get": {
        "operationId": "list_bookkeeping_entries",
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "description": "Return the page of entries after this one.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "description": "Limit the size of the list that is returned. The default (and maximum) is 100 objects.",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "example": "bookkeeping_account_e37p1f1iuocw5intf35v",
            "in": "query",
            "name": "account_id",
            "required": false,
            "schema": {
              "description": "The identifier for the Bookkeeping Account to filter by.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bookkeeping_entry_list"
                }
              }
            },
            "description": "Bookkeeping Entry List"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "List Bookkeeping Entries",
        "x-sandbox-only": false,
        "x-tag": "Bookkeeping Entries"
      }
    },
    "/bookkeeping_entries/{bookkeeping_entry_id}": {
      "get": {
        "operationId": "retrieve_a_bookkeeping_entry",
        "parameters": [
          {
            "example": "bookkeeping_entry_ctjpajsj3ks2blx10375",
            "in": "path",
            "name": "bookkeeping_entry_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Bookkeeping Entry.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bookkeeping_entry"
                }
              }
            },
            "description": "Bookkeeping Entry"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Retrieve a Bookkeeping Entry",
        "x-sandbox-only": false,
        "x-tag": "Bookkeeping Entries"
      }
    },
    "/bookkeeping_entry_sets": {
      "get": {
        "operationId": "list_bookkeeping_entry_sets",
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "description": "Return the page of entries after this one.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "description": "Limit the size of the list that is returned. The default (and maximum) is 100 objects.",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "transaction_id",
            "required": false,
            "schema": {
              "description": "Filter to the Bookkeeping Entry Set that maps to this Transaction.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "idempotency_key",
            "required": false,
            "schema": {
              "description": "Filter records to the one with the specified `idempotency_key` you chose for that object. This value is unique across Increase and is used to ensure that a request is only processed once. Learn more about [idempotency](https://increase.com/documentation/idempotency-keys).",
              "maxLength": 200,
              "minLength": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bookkeeping_entry_set_list"
                }
              }
            },
            "description": "Bookkeeping Entry Set List"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "List Bookkeeping Entry Sets",
        "x-sandbox-only": false,
        "x-tag": "Bookkeeping Entry Sets"
      },
      "post": {
        "operationId": "create_a_bookkeeping_entry_set",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_a_bookkeeping_entry_set_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bookkeeping_entry_set"
                }
              }
            },
            "description": "Bookkeeping Entry Set"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Create a Bookkeeping Entry Set",
        "x-sandbox-only": false,
        "x-tag": "Bookkeeping Entry Sets"
      }
    },
    "/bookkeeping_entry_sets/{bookkeeping_entry_set_id}": {
      "get": {
        "operationId": "retrieve_a_bookkeeping_entry_set",
        "parameters": [
          {
            "example": "bookkeeping_entry_set_n80c6wr2p8gtc6p4ingf",
            "in": "path",
            "name": "bookkeeping_entry_set_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Bookkeeping Entry Set.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bookkeeping_entry_set"
                }
              }
            },
            "description": "Bookkeeping Entry Set"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Retrieve a Bookkeeping Entry Set",
        "x-sandbox-only": false,
        "x-tag": "Bookkeeping Entry Sets"
      }
    },
    "/card_disputes": {
      "get": {
        "operationId": "list_card_disputes",
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "description": "Return the page of entries after this one.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "description": "Limit the size of the list that is returned. The default (and maximum) is 100 objects.",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "created_at.after",
            "required": false,
            "schema": {
              "description": "Return results after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.before",
            "required": false,
            "schema": {
              "description": "Return results before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_after",
            "required": false,
            "schema": {
              "description": "Return results on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_before",
            "required": false,
            "schema": {
              "description": "Return results on or before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "status.in",
            "required": false,
            "schema": {
              "description": "Filter Card Disputes for those with the specified status or statuses. For GET requests, this should be encoded as a comma-delimited string, such as `?in=one,two,three`.",
              "items": {
                "enum": [
                  "pending_reviewing",
                  "pending_user_information",
                  "accepted",
                  "rejected",
                  "lost",
                  "won"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "The Card Dispute is pending review.",
                  "Increase has requested more information related to the Card Dispute from you.",
                  "The Card Dispute has been accepted and your funds have been returned. The card dispute will eventually transition into `won` or `lost` depending on the outcome.",
                  "The Card Dispute has been rejected.",
                  "The Card Dispute has been lost and funds previously credited from the acceptance have been debited.",
                  "The Card Dispute has been won and no further action can be taken."
                ]
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "idempotency_key",
            "required": false,
            "schema": {
              "description": "Filter records to the one with the specified `idempotency_key` you chose for that object. This value is unique across Increase and is used to ensure that a request is only processed once. Learn more about [idempotency](https://increase.com/documentation/idempotency-keys).",
              "maxLength": 200,
              "minLength": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/card_dispute_list"
                }
              }
            },
            "description": "Card Dispute List"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "List Card Disputes",
        "x-sandbox-only": false,
        "x-tag": "Card Disputes"
      },
      "post": {
        "operationId": "create_a_card_dispute",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_a_card_dispute_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/card_dispute"
                }
              }
            },
            "description": "Card Dispute"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Create a Card Dispute",
        "x-sandbox-only": false,
        "x-tag": "Card Disputes"
      }
    },
    "/card_disputes/{card_dispute_id}": {
      "get": {
        "operationId": "retrieve_a_card_dispute",
        "parameters": [
          {
            "example": "card_dispute_h9sc95nbl1cgltpp7men",
            "in": "path",
            "name": "card_dispute_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Card Dispute.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/card_dispute"
                }
              }
            },
            "description": "Card Dispute"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Retrieve a Card Dispute",
        "x-sandbox-only": false,
        "x-tag": "Card Disputes"
      }
    },
    "/card_payments": {
      "get": {
        "operationId": "list_card_payments",
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "description": "Return the page of entries after this one.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "description": "Limit the size of the list that is returned. The default (and maximum) is 100 objects.",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "example": "account_in71c4amph0vgo2qllky",
            "in": "query",
            "name": "account_id",
            "required": false,
            "schema": {
              "description": "Filter Card Payments to ones belonging to the specified Account.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "card_id",
            "required": false,
            "schema": {
              "description": "Filter Card Payments to ones belonging to the specified Card.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.after",
            "required": false,
            "schema": {
              "description": "Return results after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.before",
            "required": false,
            "schema": {
              "description": "Return results before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_after",
            "required": false,
            "schema": {
              "description": "Return results on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_before",
            "required": false,
            "schema": {
              "description": "Return results on or before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/card_payment_list"
                }
              }
            },
            "description": "Card Payment List"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "List Card Payments",
        "x-sandbox-only": false,
        "x-tag": "Card Payments"
      }
    },
    "/card_payments/{card_payment_id}": {
      "get": {
        "operationId": "retrieve_a_card_payment",
        "parameters": [
          {
            "example": "card_payment_nd3k2kacrqjli8482ave",
            "in": "path",
            "name": "card_payment_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Card Payment.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/card_payment"
                }
              }
            },
            "description": "Card Payment"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Retrieve a Card Payment",
        "x-sandbox-only": false,
        "x-tag": "Card Payments"
      }
    },
    "/card_purchase_supplements": {
      "get": {
        "operationId": "list_card_purchase_supplements",
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "description": "Return the page of entries after this one.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "description": "Limit the size of the list that is returned. The default (and maximum) is 100 objects.",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "example": "card_payment_nd3k2kacrqjli8482ave",
            "in": "query",
            "name": "card_payment_id",
            "required": false,
            "schema": {
              "description": "Filter Card Purchase Supplements to ones belonging to the specified Card Payment.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.after",
            "required": false,
            "schema": {
              "description": "Return results after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.before",
            "required": false,
            "schema": {
              "description": "Return results before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_after",
            "required": false,
            "schema": {
              "description": "Return results on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_before",
            "required": false,
            "schema": {
              "description": "Return results on or before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/card_purchase_supplement_list"
                }
              }
            },
            "description": "Card Purchase Supplement List"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "List Card Purchase Supplements",
        "x-sandbox-only": false,
        "x-tag": "Card Purchase Supplements"
      }
    },
    "/card_purchase_supplements/{card_purchase_supplement_id}": {
      "get": {
        "operationId": "retrieve_a_card_purchase_supplement",
        "parameters": [
          {
            "example": "card_purchase_supplement_ijuc45iym4jchnh2sfk3",
            "in": "path",
            "name": "card_purchase_supplement_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Card Purchase Supplement.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/card_purchase_supplement"
                }
              }
            },
            "description": "Card Purchase Supplement"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Retrieve a Card Purchase Supplement",
        "x-sandbox-only": false,
        "x-tag": "Card Purchase Supplements"
      }
    },
    "/cards": {
      "get": {
        "operationId": "list_cards",
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "description": "Return the page of entries after this one.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "description": "Limit the size of the list that is returned. The default (and maximum) is 100 objects.",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "example": "account_in71c4amph0vgo2qllky",
            "in": "query",
            "name": "account_id",
            "required": false,
            "schema": {
              "description": "Filter Cards to ones belonging to the specified Account.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.after",
            "required": false,
            "schema": {
              "description": "Return results after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.before",
            "required": false,
            "schema": {
              "description": "Return results before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_after",
            "required": false,
            "schema": {
              "description": "Return results on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_before",
            "required": false,
            "schema": {
              "description": "Return results on or before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "status.in",
            "required": false,
            "schema": {
              "description": "Filter Cards by status. For GET requests, this should be encoded as a comma-delimited string, such as `?in=one,two,three`.",
              "items": {
                "enum": [
                  "active",
                  "disabled",
                  "canceled"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "The card is active.",
                  "The card is temporarily disabled.",
                  "The card is permanently canceled."
                ]
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "idempotency_key",
            "required": false,
            "schema": {
              "description": "Filter records to the one with the specified `idempotency_key` you chose for that object. This value is unique across Increase and is used to ensure that a request is only processed once. Learn more about [idempotency](https://increase.com/documentation/idempotency-keys).",
              "maxLength": 200,
              "minLength": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/card_list"
                }
              }
            },
            "description": "Card List"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "List Cards",
        "x-sandbox-only": false,
        "x-tag": "Cards"
      },
      "post": {
        "operationId": "create_a_card",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_a_card_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/card"
                }
              }
            },
            "description": "Card"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Create a Card",
        "x-sandbox-only": false,
        "x-tag": "Cards"
      }
    },
    "/cards/{card_id}": {
      "get": {
        "operationId": "retrieve_a_card",
        "parameters": [
          {
            "example": "card_oubs0hwk5rn6knuecxg2",
            "in": "path",
            "name": "card_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Card.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/card"
                }
              }
            },
            "description": "Card"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Retrieve a Card",
        "x-sandbox-only": false,
        "x-tag": "Cards"
      },
      "patch": {
        "operationId": "update_a_card",
        "parameters": [
          {
            "example": "card_oubs0hwk5rn6knuecxg2",
            "in": "path",
            "name": "card_id",
            "required": true,
            "schema": {
              "description": "The card identifier.",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_a_card_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/card"
                }
              }
            },
            "description": "Card"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Update a Card",
        "x-sandbox-only": false,
        "x-tag": "Cards"
      }
    },
    "/cards/{card_id}/details": {
      "get": {
        "operationId": "retrieve_sensitive_details_for_a_card",
        "parameters": [
          {
            "example": "card_oubs0hwk5rn6knuecxg2",
            "in": "path",
            "name": "card_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Card to retrieve details for.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/card_details"
                }
              }
            },
            "description": "Card Details"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Retrieve sensitive details for a Card",
        "x-sandbox-only": false,
        "x-tag": "Cards"
      }
    },
    "/check_deposits": {
      "get": {
        "operationId": "list_check_deposits",
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "description": "Return the page of entries after this one.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "description": "Limit the size of the list that is returned. The default (and maximum) is 100 objects.",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "example": "account_in71c4amph0vgo2qllky",
            "in": "query",
            "name": "account_id",
            "required": false,
            "schema": {
              "description": "Filter Check Deposits to those belonging to the specified Account.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.after",
            "required": false,
            "schema": {
              "description": "Return results after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.before",
            "required": false,
            "schema": {
              "description": "Return results before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_after",
            "required": false,
            "schema": {
              "description": "Return results on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_before",
            "required": false,
            "schema": {
              "description": "Return results on or before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "idempotency_key",
            "required": false,
            "schema": {
              "description": "Filter records to the one with the specified `idempotency_key` you chose for that object. This value is unique across Increase and is used to ensure that a request is only processed once. Learn more about [idempotency](https://increase.com/documentation/idempotency-keys).",
              "maxLength": 200,
              "minLength": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/check_deposit_list"
                }
              }
            },
            "description": "Check Deposit List"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "List Check Deposits",
        "x-sandbox-only": false,
        "x-tag": "Check Deposits"
      },
      "post": {
        "operationId": "create_a_check_deposit",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_a_check_deposit_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/check_deposit"
                }
              }
            },
            "description": "Check Deposit"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Create a Check Deposit",
        "x-sandbox-only": false,
        "x-tag": "Check Deposits"
      }
    },
    "/check_deposits/{check_deposit_id}": {
      "get": {
        "operationId": "retrieve_a_check_deposit",
        "parameters": [
          {
            "example": "check_deposit_f06n9gpg7sxn8t19lfc1",
            "in": "path",
            "name": "check_deposit_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Check Deposit to retrieve.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/check_deposit"
                }
              }
            },
            "description": "Check Deposit"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Retrieve a Check Deposit",
        "x-sandbox-only": false,
        "x-tag": "Check Deposits"
      }
    },
    "/check_transfers": {
      "get": {
        "operationId": "list_check_transfers",
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "description": "Return the page of entries after this one.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "description": "Limit the size of the list that is returned. The default (and maximum) is 100 objects.",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "example": "account_in71c4amph0vgo2qllky",
            "in": "query",
            "name": "account_id",
            "required": false,
            "schema": {
              "description": "Filter Check Transfers to those that originated from the specified Account.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "idempotency_key",
            "required": false,
            "schema": {
              "description": "Filter records to the one with the specified `idempotency_key` you chose for that object. This value is unique across Increase and is used to ensure that a request is only processed once. Learn more about [idempotency](https://increase.com/documentation/idempotency-keys).",
              "maxLength": 200,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "status.in",
            "required": false,
            "schema": {
              "description": "Filter Check Transfers to those that have the specified status. For GET requests, this should be encoded as a comma-delimited string, such as `?in=one,two,three`.",
              "items": {
                "enum": [
                  "pending_approval",
                  "canceled",
                  "pending_submission",
                  "requires_attention",
                  "rejected",
                  "pending_mailing",
                  "mailed",
                  "deposited",
                  "stopped",
                  "returned"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "The transfer is awaiting approval.",
                  "The transfer has been canceled.",
                  "The transfer is pending submission.",
                  "The transfer requires attention from an Increase operator.",
                  "The transfer has been rejected.",
                  "The check is queued for mailing.",
                  "The check has been mailed.",
                  "The check has been deposited.",
                  "A stop-payment was requested for this check.",
                  "The transfer has been returned."
                ]
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "created_at.after",
            "required": false,
            "schema": {
              "description": "Return results after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.before",
            "required": false,
            "schema": {
              "description": "Return results before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_after",
            "required": false,
            "schema": {
              "description": "Return results on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_before",
            "required": false,
            "schema": {
              "description": "Return results on or before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/check_transfer_list"
                }
              }
            },
            "description": "Check Transfer List"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "List Check Transfers",
        "x-sandbox-only": false,
        "x-tag": "Check Transfers"
      },
      "post": {
        "operationId": "create_a_check_transfer",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_a_check_transfer_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/check_transfer"
                }
              }
            },
            "description": "Check Transfer"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Create a Check Transfer",
        "x-sandbox-only": false,
        "x-tag": "Check Transfers"
      }
    },
    "/check_transfers/{check_transfer_id}": {
      "get": {
        "operationId": "retrieve_a_check_transfer",
        "parameters": [
          {
            "example": "check_transfer_30b43acfu9vw8fyc4f5",
            "in": "path",
            "name": "check_transfer_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Check Transfer.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/check_transfer"
                }
              }
            },
            "description": "Check Transfer"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Retrieve a Check Transfer",
        "x-sandbox-only": false,
        "x-tag": "Check Transfers"
      }
    },
    "/check_transfers/{check_transfer_id}/approve": {
      "post": {
        "operationId": "approve_a_check_transfer",
        "parameters": [
          {
            "example": "check_transfer_30b43acfu9vw8fyc4f5",
            "in": "path",
            "name": "check_transfer_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Check Transfer to approve.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/check_transfer"
                }
              }
            },
            "description": "Check Transfer"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Approve a Check Transfer",
        "x-sandbox-only": false,
        "x-tag": "Check Transfers"
      }
    },
    "/check_transfers/{check_transfer_id}/cancel": {
      "post": {
        "operationId": "cancel_a_pending_check_transfer",
        "parameters": [
          {
            "example": "check_transfer_30b43acfu9vw8fyc4f5",
            "in": "path",
            "name": "check_transfer_id",
            "required": true,
            "schema": {
              "description": "The identifier of the pending Check Transfer to cancel.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/check_transfer"
                }
              }
            },
            "description": "Check Transfer"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Cancel a pending Check Transfer",
        "x-sandbox-only": false,
        "x-tag": "Check Transfers"
      }
    },
    "/check_transfers/{check_transfer_id}/stop_payment": {
      "post": {
        "operationId": "request_a_stop_payment_on_a_check_transfer",
        "parameters": [
          {
            "example": "check_transfer_30b43acfu9vw8fyc4f5",
            "in": "path",
            "name": "check_transfer_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Check Transfer.",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/request_a_stop_payment_on_a_check_transfer_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/check_transfer"
                }
              }
            },
            "description": "Check Transfer"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Request a stop payment on a Check Transfer",
        "x-sandbox-only": false,
        "x-tag": "Check Transfers"
      }
    },
    "/declined_transactions": {
      "get": {
        "operationId": "list_declined_transactions",
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "description": "Return the page of entries after this one.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "description": "Limit the size of the list that is returned. The default (and maximum) is 100 objects.",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "account_id",
            "required": false,
            "schema": {
              "description": "Filter Declined Transactions to ones belonging to the specified Account.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.after",
            "required": false,
            "schema": {
              "description": "Return results after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.before",
            "required": false,
            "schema": {
              "description": "Return results before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_after",
            "required": false,
            "schema": {
              "description": "Return results on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_before",
            "required": false,
            "schema": {
              "description": "Return results on or before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "route_id",
            "required": false,
            "schema": {
              "description": "Filter Declined Transactions to those belonging to the specified route.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "category.in",
            "required": false,
            "schema": {
              "description": "Return results whose value is in the provided list. For GET requests, this should be encoded as a comma-delimited string, such as `?in=one,two,three`.",
              "items": {
                "enum": [
                  "ach_decline",
                  "card_decline",
                  "check_decline",
                  "inbound_real_time_payments_transfer_decline",
                  "wire_decline",
                  "check_deposit_rejection",
                  "other"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "ACH Decline: details will be under the `ach_decline` object.",
                  "Card Decline: details will be under the `card_decline` object.",
                  "Check Decline: details will be under the `check_decline` object.",
                  "Inbound Real-Time Payments Transfer Decline: details will be under the `inbound_real_time_payments_transfer_decline` object.",
                  "Wire Decline: details will be under the `wire_decline` object.",
                  "Check Deposit Rejection: details will be under the `check_deposit_rejection` object.",
                  "The Declined Transaction was made for an undocumented or deprecated reason."
                ]
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/declined_transaction_list"
                }
              }
            },
            "description": "Declined Transaction List"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "List Declined Transactions",
        "x-sandbox-only": false,
        "x-tag": "Declined Transactions"
      }
    },
    "/declined_transactions/{declined_transaction_id}": {
      "get": {
        "operationId": "retrieve_a_declined_transaction",
        "parameters": [
          {
            "example": "declined_transaction_17jbn0yyhvkt4v4ooym8",
            "in": "path",
            "name": "declined_transaction_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Declined Transaction.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/declined_transaction"
                }
              }
            },
            "description": "Declined Transaction"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Retrieve a Declined Transaction",
        "x-sandbox-only": false,
        "x-tag": "Declined Transactions"
      }
    },
    "/digital_card_profiles": {
      "get": {
        "operationId": "list_card_profiles",
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "description": "Return the page of entries after this one.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "description": "Limit the size of the list that is returned. The default (and maximum) is 100 objects.",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "status.in",
            "required": false,
            "schema": {
              "description": "Filter Digital Card Profiles for those with the specified digital wallet status or statuses. For GET requests, this should be encoded as a comma-delimited string, such as `?in=one,two,three`.",
              "items": {
                "enum": [
                  "pending",
                  "rejected",
                  "active",
                  "archived"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "The Card Profile is awaiting review from Increase and/or processing by card networks.",
                  "There is an issue with the Card Profile preventing it from use.",
                  "The Card Profile can be assigned to Cards.",
                  "The Card Profile is no longer in use."
                ]
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "idempotency_key",
            "required": false,
            "schema": {
              "description": "Filter records to the one with the specified `idempotency_key` you chose for that object. This value is unique across Increase and is used to ensure that a request is only processed once. Learn more about [idempotency](https://increase.com/documentation/idempotency-keys).",
              "maxLength": 200,
              "minLength": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/digital_card_profile_list"
                }
              }
            },
            "description": "Digital Card Profile List"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "List Card Profiles",
        "x-sandbox-only": false,
        "x-tag": "Digital Card Profiles"
      },
      "post": {
        "operationId": "create_a_digital_card_profile",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_a_digital_card_profile_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/digital_card_profile"
                }
              }
            },
            "description": "Digital Card Profile"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Create a Digital Card Profile",
        "x-sandbox-only": false,
        "x-tag": "Digital Card Profiles"
      }
    },
    "/digital_card_profiles/{digital_card_profile_id}": {
      "get": {
        "operationId": "retrieve_a_digital_card_profile",
        "parameters": [
          {
            "example": "digital_card_profile_s3puplu90f04xhcwkiga",
            "in": "path",
            "name": "digital_card_profile_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Digital Card Profile.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/digital_card_profile"
                }
              }
            },
            "description": "Digital Card Profile"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Retrieve a Digital Card Profile",
        "x-sandbox-only": false,
        "x-tag": "Digital Card Profiles"
      }
    },
    "/digital_card_profiles/{digital_card_profile_id}/archive": {
      "post": {
        "operationId": "archive_a_digital_card_profile",
        "parameters": [
          {
            "example": "digital_card_profile_s3puplu90f04xhcwkiga",
            "in": "path",
            "name": "digital_card_profile_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Digital Card Profile to archive.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/digital_card_profile"
                }
              }
            },
            "description": "Digital Card Profile"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Archive a Digital Card Profile",
        "x-sandbox-only": false,
        "x-tag": "Digital Card Profiles"
      }
    },
    "/digital_card_profiles/{digital_card_profile_id}/clone": {
      "post": {
        "operationId": "clones_a_digital_card_profile",
        "parameters": [
          {
            "example": "digital_card_profile_s3puplu90f04xhcwkiga",
            "in": "path",
            "name": "digital_card_profile_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Digital Card Profile to clone.",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/clones_a_digital_card_profile_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/digital_card_profile"
                }
              }
            },
            "description": "Digital Card Profile"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Clones a Digital Card Profile",
        "x-sandbox-only": false,
        "x-tag": "Digital Card Profiles"
      }
    },
    "/digital_wallet_tokens": {
      "get": {
        "operationId": "list_digital_wallet_tokens",
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "description": "Return the page of entries after this one.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "description": "Limit the size of the list that is returned. The default (and maximum) is 100 objects.",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "example": "card_oubs0hwk5rn6knuecxg2",
            "in": "query",
            "name": "card_id",
            "required": false,
            "schema": {
              "description": "Filter Digital Wallet Tokens to ones belonging to the specified Card.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.after",
            "required": false,
            "schema": {
              "description": "Return results after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.before",
            "required": false,
            "schema": {
              "description": "Return results before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_after",
            "required": false,
            "schema": {
              "description": "Return results on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_before",
            "required": false,
            "schema": {
              "description": "Return results on or before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/digital_wallet_token_list"
                }
              }
            },
            "description": "Digital Wallet Token List"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "List Digital Wallet Tokens",
        "x-sandbox-only": false,
        "x-tag": "Digital Wallet Tokens"
      }
    },
    "/digital_wallet_tokens/{digital_wallet_token_id}": {
      "get": {
        "operationId": "retrieve_a_digital_wallet_token",
        "parameters": [
          {
            "example": "digital_wallet_token_izi62go3h51p369jrie0",
            "in": "path",
            "name": "digital_wallet_token_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Digital Wallet Token.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/digital_wallet_token"
                }
              }
            },
            "description": "Digital Wallet Token"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Retrieve a Digital Wallet Token",
        "x-sandbox-only": false,
        "x-tag": "Digital Wallet Tokens"
      }
    },
    "/documents": {
      "get": {
        "operationId": "list_documents",
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "description": "Return the page of entries after this one.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "description": "Limit the size of the list that is returned. The default (and maximum) is 100 objects.",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "entity_id",
            "required": false,
            "schema": {
              "description": "Filter Documents to ones belonging to the specified Entity.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "category.in",
            "required": false,
            "schema": {
              "description": "Filter Documents for those with the specified category or categories. For GET requests, this should be encoded as a comma-delimited string, such as `?in=one,two,three`.",
              "items": {
                "enum": [
                  "form_1099_int",
                  "form_1099_misc",
                  "proof_of_authorization",
                  "company_information"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "Internal Revenue Service Form 1099-INT.",
                  "Internal Revenue Service Form 1099-MISC.",
                  "A document submitted in response to a proof of authorization request for an ACH transfer.",
                  "Company information, such a policies or procedures, typically submitted during our due diligence process."
                ]
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "created_at.after",
            "required": false,
            "schema": {
              "description": "Return results after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.before",
            "required": false,
            "schema": {
              "description": "Return results before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_after",
            "required": false,
            "schema": {
              "description": "Return results on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_before",
            "required": false,
            "schema": {
              "description": "Return results on or before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/document_list"
                }
              }
            },
            "description": "Document List"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "List Documents",
        "x-sandbox-only": false,
        "x-tag": "Documents"
      }
    },
    "/documents/{document_id}": {
      "get": {
        "operationId": "retrieve_a_document",
        "parameters": [
          {
            "example": "document_qjtqc6s4c14ve2q89izm",
            "in": "path",
            "name": "document_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Document to retrieve.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/document"
                }
              }
            },
            "description": "Document"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Retrieve a Document",
        "x-sandbox-only": false,
        "x-tag": "Documents"
      }
    },
    "/entities": {
      "get": {
        "operationId": "list_entities",
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "description": "Return the page of entries after this one.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "description": "Limit the size of the list that is returned. The default (and maximum) is 100 objects.",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "status.in",
            "required": false,
            "schema": {
              "description": "Filter Entities for those with the specified status or statuses. For GET requests, this should be encoded as a comma-delimited string, such as `?in=one,two,three`.",
              "items": {
                "enum": [
                  "active",
                  "archived",
                  "disabled"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "The entity is active.",
                  "The entity is archived, and can no longer be used to create accounts.",
                  "The entity is temporarily disabled and cannot be used for financial activity."
                ]
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "created_at.after",
            "required": false,
            "schema": {
              "description": "Return results after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.before",
            "required": false,
            "schema": {
              "description": "Return results before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_after",
            "required": false,
            "schema": {
              "description": "Return results on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_before",
            "required": false,
            "schema": {
              "description": "Return results on or before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "idempotency_key",
            "required": false,
            "schema": {
              "description": "Filter records to the one with the specified `idempotency_key` you chose for that object. This value is unique across Increase and is used to ensure that a request is only processed once. Learn more about [idempotency](https://increase.com/documentation/idempotency-keys).",
              "maxLength": 200,
              "minLength": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/entity_list"
                }
              }
            },
            "description": "Entity List"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "List Entities",
        "x-sandbox-only": false,
        "x-tag": "Entities"
      },
      "post": {
        "operationId": "create_an_entity",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_an_entity_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/entity"
                }
              }
            },
            "description": "Entity"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Create an Entity",
        "x-sandbox-only": false,
        "x-tag": "Entities"
      }
    },
    "/entities/{entity_id}": {
      "get": {
        "operationId": "retrieve_an_entity",
        "parameters": [
          {
            "example": "entity_n8y8tnk2p9339ti393yi",
            "in": "path",
            "name": "entity_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Entity to retrieve.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/entity"
                }
              }
            },
            "description": "Entity"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Retrieve an Entity",
        "x-sandbox-only": false,
        "x-tag": "Entities"
      }
    },
    "/entities/{entity_id}/archive": {
      "post": {
        "operationId": "archive_an_entity",
        "parameters": [
          {
            "example": "entity_n8y8tnk2p9339ti393yi",
            "in": "path",
            "name": "entity_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Entity to archive. Any accounts associated with an entity must be closed before the entity can be archived.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/entity"
                }
              }
            },
            "description": "Entity"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Archive an Entity",
        "x-sandbox-only": false,
        "x-tag": "Entities"
      }
    },
    "/entities/{entity_id}/archive_beneficial_owner": {
      "post": {
        "operationId": "archive_a_beneficial_owner_for_a_corporate_entity",
        "parameters": [
          {
            "example": "entity_n8y8tnk2p9339ti393yi",
            "in": "path",
            "name": "entity_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Entity associated with the Beneficial Owner that is being archived.",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/archive_a_beneficial_owner_for_a_corporate_entity_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/entity"
                }
              }
            },
            "description": "Entity"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Archive a beneficial owner for a corporate Entity",
        "x-sandbox-only": false,
        "x-tag": "Entities"
      }
    },
    "/entities/{entity_id}/confirm": {
      "post": {
        "description": "Depending on your program, you may be required to re-confirm an Entity's details on a recurring basis. After making any required updates, call this endpoint to record that your user confirmed their details.",
        "operationId": "confirm_an_entitys_details_are_correct",
        "parameters": [
          {
            "example": "entity_n8y8tnk2p9339ti393yi",
            "in": "path",
            "name": "entity_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Entity to confirm the details of.",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/confirm_an_entitys_details_are_correct_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/entity"
                }
              }
            },
            "description": "Entity"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Confirm an Entity's details are correct",
        "x-sandbox-only": false,
        "x-tag": "Entities"
      }
    },
    "/entities/{entity_id}/create_beneficial_owner": {
      "post": {
        "operationId": "create_a_beneficial_owner_for_a_corporate_entity",
        "parameters": [
          {
            "example": "entity_n8y8tnk2p9339ti393yi",
            "in": "path",
            "name": "entity_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Entity to associate with the new Beneficial Owner.",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_a_beneficial_owner_for_a_corporate_entity_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/entity"
                }
              }
            },
            "description": "Entity"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Create a beneficial owner for a corporate Entity",
        "x-sandbox-only": false,
        "x-tag": "Entities"
      }
    },
    "/entities/{entity_id}/update_address": {
      "post": {
        "operationId": "update_a_natural_person_or_corporations_address",
        "parameters": [
          {
            "example": "entity_n8y8tnk2p9339ti393yi",
            "in": "path",
            "name": "entity_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Entity whose address is being updated.",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_a_natural_person_or_corporations_address_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/entity"
                }
              }
            },
            "description": "Entity"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Update a Natural Person or Corporation's address",
        "x-sandbox-only": false,
        "x-tag": "Entities"
      }
    },
    "/entities/{entity_id}/update_beneficial_owner_address": {
      "post": {
        "operationId": "update_the_address_for_a_beneficial_owner_belonging_to_a_corporate_entity",
        "parameters": [
          {
            "example": "entity_n8y8tnk2p9339ti393yi",
            "in": "path",
            "name": "entity_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Entity associated with the Beneficial Owner whose address is being updated.",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_the_address_for_a_beneficial_owner_belonging_to_a_corporate_entity_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/entity"
                }
              }
            },
            "description": "Entity"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Update the address for a beneficial owner belonging to a corporate Entity",
        "x-sandbox-only": false,
        "x-tag": "Entities"
      }
    },
    "/entities/{entity_id}/update_industry_code": {
      "post": {
        "operationId": "update_the_industry_code_for_a_corporate_entity",
        "parameters": [
          {
            "example": "entity_n8y8tnk2p9339ti393yi",
            "in": "path",
            "name": "entity_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Entity to update. This endpoint only accepts `corporation` entities.",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_the_industry_code_for_a_corporate_entity_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/entity"
                }
              }
            },
            "description": "Entity"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Update the industry code for a corporate Entity",
        "x-sandbox-only": false,
        "x-tag": "Entities"
      }
    },
    "/entity_supplemental_documents": {
      "get": {
        "operationId": "list_entity_supplemental_document_submissions",
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "description": "Return the page of entries after this one.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "description": "Limit the size of the list that is returned. The default (and maximum) is 100 objects.",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "example": "entity_n8y8tnk2p9339ti393yi",
            "in": "query",
            "name": "entity_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Entity to list supplemental documents for.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "idempotency_key",
            "required": false,
            "schema": {
              "description": "Filter records to the one with the specified `idempotency_key` you chose for that object. This value is unique across Increase and is used to ensure that a request is only processed once. Learn more about [idempotency](https://increase.com/documentation/idempotency-keys).",
              "maxLength": 200,
              "minLength": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/entity_supplemental_document_list"
                }
              }
            },
            "description": "Supplemental Document List"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "List Entity Supplemental Document Submissions",
        "x-sandbox-only": false,
        "x-tag": "Supplemental Documents"
      },
      "post": {
        "operationId": "create_a_supplemental_document_for_an_entity",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_a_supplemental_document_for_an_entity_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/entity_supplemental_document"
                }
              }
            },
            "description": "Supplemental Document"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Create a supplemental document for an Entity",
        "x-sandbox-only": false,
        "x-tag": "Supplemental Documents"
      }
    },
    "/event_subscriptions": {
      "get": {
        "operationId": "list_event_subscriptions",
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "description": "Return the page of entries after this one.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "description": "Limit the size of the list that is returned. The default (and maximum) is 100 objects.",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "idempotency_key",
            "required": false,
            "schema": {
              "description": "Filter records to the one with the specified `idempotency_key` you chose for that object. This value is unique across Increase and is used to ensure that a request is only processed once. Learn more about [idempotency](https://increase.com/documentation/idempotency-keys).",
              "maxLength": 200,
              "minLength": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event_subscription_list"
                }
              }
            },
            "description": "Event Subscription List"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "List Event Subscriptions",
        "x-sandbox-only": false,
        "x-tag": "Event Subscriptions"
      },
      "post": {
        "operationId": "create_an_event_subscription",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_an_event_subscription_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event_subscription"
                }
              }
            },
            "description": "Event Subscription"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Create an Event Subscription",
        "x-sandbox-only": false,
        "x-tag": "Event Subscriptions"
      }
    },
    "/event_subscriptions/{event_subscription_id}": {
      "get": {
        "operationId": "retrieve_an_event_subscription",
        "parameters": [
          {
            "example": "event_subscription_001dzz0r20rcdxgb013zqb8m04g",
            "in": "path",
            "name": "event_subscription_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Event Subscription.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event_subscription"
                }
              }
            },
            "description": "Event Subscription"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Retrieve an Event Subscription",
        "x-sandbox-only": false,
        "x-tag": "Event Subscriptions"
      },
      "patch": {
        "operationId": "update_an_event_subscription",
        "parameters": [
          {
            "example": "event_subscription_001dzz0r20rcdxgb013zqb8m04g",
            "in": "path",
            "name": "event_subscription_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Event Subscription.",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_an_event_subscription_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event_subscription"
                }
              }
            },
            "description": "Event Subscription"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Update an Event Subscription",
        "x-sandbox-only": false,
        "x-tag": "Event Subscriptions"
      }
    },
    "/events": {
      "get": {
        "operationId": "list_events",
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "description": "Return the page of entries after this one.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "description": "Limit the size of the list that is returned. The default (and maximum) is 100 objects.",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "created_at.after",
            "required": false,
            "schema": {
              "description": "Return results after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.before",
            "required": false,
            "schema": {
              "description": "Return results before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_after",
            "required": false,
            "schema": {
              "description": "Return results on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_before",
            "required": false,
            "schema": {
              "description": "Return results on or before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "category.in",
            "required": false,
            "schema": {
              "description": "Filter Events for those with the specified category or categories. For GET requests, this should be encoded as a comma-delimited string, such as `?in=one,two,three`.",
              "items": {
                "enum": [
                  "account.created",
                  "account.updated",
                  "account_number.created",
                  "account_number.updated",
                  "account_statement.created",
                  "account_transfer.created",
                  "account_transfer.updated",
                  "ach_prenotification.created",
                  "ach_prenotification.updated",
                  "ach_transfer.created",
                  "ach_transfer.updated",
                  "bookkeeping_account.created",
                  "bookkeeping_account.updated",
                  "bookkeeping_entry_set.updated",
                  "card.created",
                  "card.updated",
                  "card_payment.created",
                  "card_payment.updated",
                  "card_profile.created",
                  "card_profile.updated",
                  "card_dispute.created",
                  "card_dispute.updated",
                  "check_deposit.created",
                  "check_deposit.updated",
                  "check_transfer.created",
                  "check_transfer.updated",
                  "declined_transaction.created",
                  "digital_card_profile.created",
                  "digital_card_profile.updated",
                  "digital_wallet_token.created",
                  "digital_wallet_token.updated",
                  "document.created",
                  "entity.created",
                  "entity.updated",
                  "event_subscription.created",
                  "event_subscription.updated",
                  "export.created",
                  "export.updated",
                  "external_account.created",
                  "external_account.updated",
                  "file.created",
                  "group.updated",
                  "group.heartbeat",
                  "inbound_ach_transfer.created",
                  "inbound_ach_transfer.updated",
                  "inbound_ach_transfer_return.created",
                  "inbound_ach_transfer_return.updated",
                  "inbound_check_deposit.created",
                  "inbound_check_deposit.updated",
                  "inbound_mail_item.created",
                  "inbound_mail_item.updated",
                  "inbound_real_time_payments_transfer.created",
                  "inbound_real_time_payments_transfer.updated",
                  "inbound_wire_drawdown_request.created",
                  "inbound_wire_transfer.created",
                  "inbound_wire_transfer.updated",
                  "intrafi_account_enrollment.created",
                  "intrafi_account_enrollment.updated",
                  "intrafi_exclusion.created",
                  "intrafi_exclusion.updated",
                  "lockbox.created",
                  "lockbox.updated",
                  "oauth_connection.created",
                  "oauth_connection.deactivated",
                  "pending_transaction.created",
                  "pending_transaction.updated",
                  "physical_card.created",
                  "physical_card.updated",
                  "physical_card_profile.created",
                  "physical_card_profile.updated",
                  "proof_of_authorization_request.created",
                  "proof_of_authorization_request.updated",
                  "proof_of_authorization_request_submission.created",
                  "proof_of_authorization_request_submission.updated",
                  "real_time_decision.card_authorization_requested",
                  "real_time_decision.digital_wallet_token_requested",
                  "real_time_decision.digital_wallet_authentication_requested",
                  "real_time_decision.card_authentication_requested",
                  "real_time_decision.card_authentication_challenge_requested",
                  "real_time_payments_transfer.created",
                  "real_time_payments_transfer.updated",
                  "real_time_payments_request_for_payment.created",
                  "real_time_payments_request_for_payment.updated",
                  "transaction.created",
                  "wire_drawdown_request.created",
                  "wire_drawdown_request.updated",
                  "wire_transfer.created",
                  "wire_transfer.updated"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "Occurs whenever an Account is created.",
                  "Occurs whenever an Account is updated.",
                  "Occurs whenever an Account Number is created.",
                  "Occurs whenever an Account Number is updated.",
                  "Occurs whenever an Account Statement is created.",
                  "Occurs whenever an Account Transfer is created.",
                  "Occurs whenever an Account Transfer is updated.",
                  "Occurs whenever an ACH Prenotification is created.",
                  "Occurs whenever an ACH Prenotification is updated.",
                  "Occurs whenever an ACH Transfer is created.",
                  "Occurs whenever an ACH Transfer is updated.",
                  "Occurs whenever a Bookkeeping Account is created.",
                  "Occurs whenever a Bookkeeping Account is updated.",
                  "Occurs whenever a Bookkeeping Entry Set is created.",
                  "Occurs whenever a Card is created.",
                  "Occurs whenever a Card is updated.",
                  "Occurs whenever a Card Payment is created.",
                  "Occurs whenever a Card Payment is updated.",
                  "Occurs whenever a Card Profile is created.",
                  "Occurs whenever a Card Profile is updated.",
                  "Occurs whenever a Card Dispute is created.",
                  "Occurs whenever a Card Dispute is updated.",
                  "Occurs whenever a Check Deposit is created.",
                  "Occurs whenever a Check Deposit is updated.",
                  "Occurs whenever a Check Transfer is created.",
                  "Occurs whenever a Check Transfer is updated.",
                  "Occurs whenever a Declined Transaction is created.",
                  "Occurs whenever a Digital Card Profile is created.",
                  "Occurs whenever a Digital Card Profile is updated.",
                  "Occurs whenever a Digital Wallet Token is created.",
                  "Occurs whenever a Digital Wallet Token is updated.",
                  "Occurs whenever a Document is created.",
                  "Occurs whenever an Entity is created.",
                  "Occurs whenever an Entity is updated.",
                  "Occurs whenever an Event Subscription is created.",
                  "Occurs whenever an Event Subscription is updated.",
                  "Occurs whenever an Export is created.",
                  "Occurs whenever an Export is updated.",
                  "Occurs whenever an External Account is created.",
                  "Occurs whenever an External Account is updated.",
                  "Occurs whenever a File is created.",
                  "Occurs whenever a Group is updated.",
                  "Increase may send webhooks with this category to see if a webhook endpoint is working properly.",
                  "Occurs whenever an Inbound ACH Transfer is created.",
                  "Occurs whenever an Inbound ACH Transfer is updated.",
                  "Occurs whenever an Inbound ACH Transfer Return is created.",
                  "Occurs whenever an Inbound ACH Transfer Return is updated.",
                  "Occurs whenever an Inbound Check Deposit is created.",
                  "Occurs whenever an Inbound Check Deposit is updated.",
                  "Occurs whenever an Inbound Mail Item is created.",
                  "Occurs whenever an Inbound Mail Item is updated.",
                  "Occurs whenever an Inbound Real-Time Payments Transfer is created.",
                  "Occurs whenever an Inbound Real-Time Payments Transfer is updated.",
                  "Occurs whenever an Inbound Wire Drawdown Request is created.",
                  "Occurs whenever an Inbound Wire Transfer is created.",
                  "Occurs whenever an Inbound Wire Transfer is updated.",
                  "Occurs whenever an IntraFi Account Enrollment is created.",
                  "Occurs whenever an IntraFi Account Enrollment is updated.",
                  "Occurs whenever an IntraFi Exclusion is created.",
                  "Occurs whenever an IntraFi Exclusion is updated.",
                  "Occurs whenever a Lockbox is created.",
                  "Occurs whenever a Lockbox is updated.",
                  "Occurs whenever an OAuth Connection is created.",
                  "Occurs whenever an OAuth Connection is deactivated.",
                  "Occurs whenever a Pending Transaction is created.",
                  "Occurs whenever a Pending Transaction is updated.",
                  "Occurs whenever a Physical Card is created.",
                  "Occurs whenever a Physical Card is updated.",
                  "Occurs whenever a Physical Card Profile is created.",
                  "Occurs whenever a Physical Card Profile is updated.",
                  "Occurs whenever a Proof of Authorization Request is created.",
                  "Occurs whenever a Proof of Authorization Request is updated.",
                  "Occurs whenever a Proof of Authorization Request Submission is created.",
                  "Occurs whenever a Proof of Authorization Request Submission is updated.",
                  "Occurs whenever a Real-Time Decision is created in response to a card authorization.",
                  "Occurs whenever a Real-Time Decision is created in response to a digital wallet provisioning attempt.",
                  "Occurs whenever a Real-Time Decision is created in response to a digital wallet requiring two-factor authentication.",
                  "Occurs whenever a Real-Time Decision is created in response to 3DS authentication.",
                  "Occurs whenever a Real-Time Decision is created in response to 3DS authentication challenges.",
                  "Occurs whenever a Real-Time Payments Transfer is created.",
                  "Occurs whenever a Real-Time Payments Transfer is updated.",
                  "Occurs whenever a Real-Time Payments Request for Payment is created.",
                  "Occurs whenever a Real-Time Payments Request for Payment is updated.",
                  "Occurs whenever a Transaction is created.",
                  "Occurs whenever a Wire Drawdown Request is created.",
                  "Occurs whenever a Wire Drawdown Request is updated.",
                  "Occurs whenever a Wire Transfer is created.",
                  "Occurs whenever a Wire Transfer is updated."
                ]
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "associated_object_id",
            "required": false,
            "schema": {
              "description": "Filter Events to those belonging to the object with the provided identifier.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event_list"
                }
              }
            },
            "description": "Event List"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "List Events",
        "x-sandbox-only": false,
        "x-tag": "Events"
      }
    },
    "/events/{event_id}": {
      "get": {
        "operationId": "retrieve_an_event",
        "parameters": [
          {
            "example": "event_001dzz0r20rzr4zrhrr1364hy80",
            "in": "path",
            "name": "event_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Event.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event"
                }
              }
            },
            "description": "Event"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Retrieve an Event",
        "x-sandbox-only": false,
        "x-tag": "Events"
      }
    },
    "/exports": {
      "get": {
        "operationId": "list_exports",
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "description": "Return the page of entries after this one.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "description": "Limit the size of the list that is returned. The default (and maximum) is 100 objects.",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "created_at.after",
            "required": false,
            "schema": {
              "description": "Return results after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.before",
            "required": false,
            "schema": {
              "description": "Return results before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_after",
            "required": false,
            "schema": {
              "description": "Return results on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_before",
            "required": false,
            "schema": {
              "description": "Return results on or before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "category.in",
            "required": false,
            "schema": {
              "description": "Filter Exports for those with the specified category or categories. For GET requests, this should be encoded as a comma-delimited string, such as `?in=one,two,three`.",
              "items": {
                "enum": [
                  "account_statement_ofx",
                  "transaction_csv",
                  "balance_csv",
                  "bookkeeping_account_balance_csv",
                  "entity_csv",
                  "vendor_csv",
                  "dashboard_table_csv"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "Export an Open Financial Exchange (OFX) file of transactions and balances for a given time range and Account.",
                  "Export a CSV of all transactions for a given time range.",
                  "Export a CSV of account balances for the dates in a given range.",
                  "Export a CSV of bookkeeping account balances for the dates in a given range.",
                  "Export a CSV of entities with a given status.",
                  "Export a CSV of vendors added to the third-party risk management dashboard.",
                  "Certain dashboard tables are available as CSV exports. This export cannot be created via the API."
                ]
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "status.in",
            "required": false,
            "schema": {
              "description": "Filter Exports for those with the specified status or statuses. For GET requests, this should be encoded as a comma-delimited string, such as `?in=one,two,three`.",
              "items": {
                "enum": [
                  "pending",
                  "complete",
                  "failed"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "Increase is generating the export.",
                  "The export has been successfully generated.",
                  "The export failed to generate. Increase will reach out to you to resolve the issue."
                ]
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "idempotency_key",
            "required": false,
            "schema": {
              "description": "Filter records to the one with the specified `idempotency_key` you chose for that object. This value is unique across Increase and is used to ensure that a request is only processed once. Learn more about [idempotency](https://increase.com/documentation/idempotency-keys).",
              "maxLength": 200,
              "minLength": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/export_list"
                }
              }
            },
            "description": "Export List"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "List Exports",
        "x-sandbox-only": false,
        "x-tag": "Exports"
      },
      "post": {
        "operationId": "create_an_export",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_an_export_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/export"
                }
              }
            },
            "description": "Export"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Create an Export",
        "x-sandbox-only": false,
        "x-tag": "Exports"
      }
    },
    "/exports/{export_id}": {
      "get": {
        "operationId": "retrieve_an_export",
        "parameters": [
          {
            "example": "export_8s4m48qz3bclzje0zwh9",
            "in": "path",
            "name": "export_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Export to retrieve.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/export"
                }
              }
            },
            "description": "Export"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Retrieve an Export",
        "x-sandbox-only": false,
        "x-tag": "Exports"
      }
    },
    "/external_accounts": {
      "get": {
        "operationId": "list_external_accounts",
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "description": "Return the page of entries after this one.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "description": "Limit the size of the list that is returned. The default (and maximum) is 100 objects.",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "status.in",
            "required": false,
            "schema": {
              "description": "Filter External Accounts for those with the specified status or statuses. For GET requests, this should be encoded as a comma-delimited string, such as `?in=one,two,three`.",
              "items": {
                "enum": [
                  "active",
                  "archived"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "The External Account is active.",
                  "The External Account is archived and won't appear in the dashboard."
                ]
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "routing_number",
            "required": false,
            "schema": {
              "description": "Filter External Accounts to those with the specified Routing Number.",
              "maxLength": 9,
              "minLength": 9,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "idempotency_key",
            "required": false,
            "schema": {
              "description": "Filter records to the one with the specified `idempotency_key` you chose for that object. This value is unique across Increase and is used to ensure that a request is only processed once. Learn more about [idempotency](https://increase.com/documentation/idempotency-keys).",
              "maxLength": 200,
              "minLength": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/external_account_list"
                }
              }
            },
            "description": "External Account List"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "List External Accounts",
        "x-sandbox-only": false,
        "x-tag": "External Accounts"
      },
      "post": {
        "operationId": "create_an_external_account",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_an_external_account_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/external_account"
                }
              }
            },
            "description": "External Account"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Create an External Account",
        "x-sandbox-only": false,
        "x-tag": "External Accounts"
      }
    },
    "/external_accounts/{external_account_id}": {
      "get": {
        "operationId": "retrieve_an_external_account",
        "parameters": [
          {
            "example": "external_account_ukk55lr923a3ac0pp7iv",
            "in": "path",
            "name": "external_account_id",
            "required": true,
            "schema": {
              "description": "The identifier of the External Account.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/external_account"
                }
              }
            },
            "description": "External Account"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Retrieve an External Account",
        "x-sandbox-only": false,
        "x-tag": "External Accounts"
      },
      "patch": {
        "operationId": "update_an_external_account",
        "parameters": [
          {
            "example": "external_account_ukk55lr923a3ac0pp7iv",
            "in": "path",
            "name": "external_account_id",
            "required": true,
            "schema": {
              "description": "The external account identifier.",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_an_external_account_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/external_account"
                }
              }
            },
            "description": "External Account"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Update an External Account",
        "x-sandbox-only": false,
        "x-tag": "External Accounts"
      }
    },
    "/file_links": {
      "post": {
        "operationId": "create_a_file_link",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_a_file_link_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/file_link"
                }
              }
            },
            "description": "File Link"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Create a File Link",
        "x-sandbox-only": false,
        "x-tag": "File Links"
      }
    },
    "/files": {
      "get": {
        "operationId": "list_files",
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "description": "Return the page of entries after this one.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "description": "Limit the size of the list that is returned. The default (and maximum) is 100 objects.",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "created_at.after",
            "required": false,
            "schema": {
              "description": "Return results after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.before",
            "required": false,
            "schema": {
              "description": "Return results before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_after",
            "required": false,
            "schema": {
              "description": "Return results on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_before",
            "required": false,
            "schema": {
              "description": "Return results on or before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "purpose.in",
            "required": false,
            "schema": {
              "description": "Filter Files for those with the specified purpose or purposes. For GET requests, this should be encoded as a comma-delimited string, such as `?in=one,two,three`.",
              "items": {
                "enum": [
                  "check_image_front",
                  "check_image_back",
                  "processed_check_image_front",
                  "processed_check_image_back",
                  "mailed_check_image",
                  "check_attachment",
                  "inbound_mail_item",
                  "form_1099_int",
                  "form_1099_misc",
                  "form_ss_4",
                  "identity_document",
                  "increase_statement",
                  "other",
                  "trust_formation_document",
                  "digital_wallet_artwork",
                  "digital_wallet_app_icon",
                  "physical_card_front",
                  "physical_card_back",
                  "physical_card_carrier",
                  "document_request",
                  "entity_supplemental_document",
                  "export",
                  "unusual_activity_report_attachment",
                  "deposit_account_control_agreement",
                  "proof_of_authorization_request_submission"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "An image of the front of a check, used for check deposits.",
                  "An image of the back of a check, used for check deposits.",
                  "An image of the front of a deposited check after processing by Increase and submission to the Federal Reserve.",
                  "An image of the back of a deposited check after processing by Increase and submission to the Federal Reserve.",
                  "An image of a check that was mailed to a recipient.",
                  "A document to be printed on an additional page and mailed with a check that you've requested Increase print.",
                  "A scanned mail item sent to Increase.",
                  "IRS Form 1099-INT.",
                  "IRS Form 1099-MISC.",
                  "IRS Form SS-4.",
                  "An image of a government-issued ID.",
                  "A statement generated by Increase.",
                  "A file purpose not covered by any of the other cases.",
                  "A legal document forming a trust.",
                  "A card image to be rendered inside digital wallet apps. This must be a 1536x969 pixel PNG.",
                  "An icon for you app to be rendered inside digital wallet apps. This must be a 100x100 pixel PNG.",
                  "A card image to be printed on the front of a physical card. This must be a 2100x1340 pixel PNG with no other color but black.",
                  "The image to be printed on the back of a physical card.",
                  "An image representing the entirety of the carrier used for a physical card. This must be a 2550x3300 pixel PNG with no other color but black.",
                  "A document requested by Increase.",
                  "A supplemental document associated an an Entity.",
                  "The results of an Export you requested via the dashboard or API.",
                  "An attachment to an Unusual Activity Report.",
                  "A document granting another entity access to the funds into your account.",
                  "A file containing additional evidence for a Proof of Authorization Request Submission."
                ]
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "idempotency_key",
            "required": false,
            "schema": {
              "description": "Filter records to the one with the specified `idempotency_key` you chose for that object. This value is unique across Increase and is used to ensure that a request is only processed once. Learn more about [idempotency](https://increase.com/documentation/idempotency-keys).",
              "maxLength": 200,
              "minLength": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/file_list"
                }
              }
            },
            "description": "File List"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "List Files",
        "x-sandbox-only": false,
        "x-tag": "Files"
      },
      "post": {
        "description": "To upload a file to Increase, you'll need to send a request of Content-Type `multipart/form-data`. The request should contain the file you would like to upload, as well as the parameters for creating a file.",
        "operationId": "create_a_file",
        "parameters": [],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/create_a_file_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/file"
                }
              }
            },
            "description": "File"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Create a File",
        "x-sandbox-only": false,
        "x-tag": "Files"
      }
    },
    "/files/{file_id}": {
      "get": {
        "operationId": "retrieve_a_file",
        "parameters": [
          {
            "example": "file_makxrc67oh9l6sg7w9yc",
            "in": "path",
            "name": "file_id",
            "required": true,
            "schema": {
              "description": "The identifier of the File.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/file"
                }
              }
            },
            "description": "File"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Retrieve a File",
        "x-sandbox-only": false,
        "x-tag": "Files"
      }
    },
    "/groups/current": {
      "get": {
        "description": "Returns details for the currently authenticated Group.",
        "operationId": "retrieve_group_details",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/group"
                }
              }
            },
            "description": "Group"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Retrieve Group details",
        "x-sandbox-only": false,
        "x-tag": "Groups"
      }
    },
    "/inbound_ach_transfers": {
      "get": {
        "operationId": "list_inbound_ach_transfers",
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "description": "Return the page of entries after this one.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "description": "Limit the size of the list that is returned. The default (and maximum) is 100 objects.",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "example": "account_in71c4amph0vgo2qllky",
            "in": "query",
            "name": "account_id",
            "required": false,
            "schema": {
              "description": "Filter Inbound ACH Transfers to ones belonging to the specified Account.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "account_number_id",
            "required": false,
            "schema": {
              "description": "Filter Inbound ACH Transfers to ones belonging to the specified Account Number.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.after",
            "required": false,
            "schema": {
              "description": "Return results after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.before",
            "required": false,
            "schema": {
              "description": "Return results before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_after",
            "required": false,
            "schema": {
              "description": "Return results on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_before",
            "required": false,
            "schema": {
              "description": "Return results on or before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "status.in",
            "required": false,
            "schema": {
              "description": "Filter Inbound ACH Transfers to those with the specified status. For GET requests, this should be encoded as a comma-delimited string, such as `?in=one,two,three`.",
              "items": {
                "enum": [
                  "pending",
                  "declined",
                  "accepted",
                  "returned"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "The Inbound ACH Transfer is awaiting action, will transition automatically if no action is taken.",
                  "The Inbound ACH Transfer has been declined.",
                  "The Inbound ACH Transfer is accepted.",
                  "The Inbound ACH Transfer has been returned."
                ]
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inbound_ach_transfer_list"
                }
              }
            },
            "description": "Inbound ACH Transfer List"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "List Inbound ACH Transfers",
        "x-sandbox-only": false,
        "x-tag": "Inbound ACH Transfers"
      }
    },
    "/inbound_ach_transfers/{inbound_ach_transfer_id}": {
      "get": {
        "operationId": "retrieve_an_inbound_ach_transfer",
        "parameters": [
          {
            "example": "inbound_ach_transfer_tdrwqr3fq9gnnq49odev",
            "in": "path",
            "name": "inbound_ach_transfer_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Inbound ACH Transfer to get details for.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inbound_ach_transfer"
                }
              }
            },
            "description": "Inbound ACH Transfer"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Retrieve an Inbound ACH Transfer",
        "x-sandbox-only": false,
        "x-tag": "Inbound ACH Transfers"
      }
    },
    "/inbound_ach_transfers/{inbound_ach_transfer_id}/create_notification_of_change": {
      "post": {
        "operationId": "create_a_notification_of_change_for_an_inbound_ach_transfer",
        "parameters": [
          {
            "example": "inbound_ach_transfer_tdrwqr3fq9gnnq49odev",
            "in": "path",
            "name": "inbound_ach_transfer_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Inbound ACH Transfer for which to create a notification of change.",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_a_notification_of_change_for_an_inbound_ach_transfer_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inbound_ach_transfer"
                }
              }
            },
            "description": "Inbound ACH Transfer"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Create a notification of change for an Inbound ACH Transfer",
        "x-sandbox-only": false,
        "x-tag": "Inbound ACH Transfers"
      }
    },
    "/inbound_ach_transfers/{inbound_ach_transfer_id}/decline": {
      "post": {
        "operationId": "decline_an_inbound_ach_transfer",
        "parameters": [
          {
            "example": "inbound_ach_transfer_tdrwqr3fq9gnnq49odev",
            "in": "path",
            "name": "inbound_ach_transfer_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Inbound ACH Transfer to decline.",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/decline_an_inbound_ach_transfer_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inbound_ach_transfer"
                }
              }
            },
            "description": "Inbound ACH Transfer"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Decline an Inbound ACH Transfer",
        "x-sandbox-only": false,
        "x-tag": "Inbound ACH Transfers"
      }
    },
    "/inbound_ach_transfers/{inbound_ach_transfer_id}/transfer_return": {
      "post": {
        "operationId": "return_an_inbound_ach_transfer",
        "parameters": [
          {
            "example": "inbound_ach_transfer_tdrwqr3fq9gnnq49odev",
            "in": "path",
            "name": "inbound_ach_transfer_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Inbound ACH Transfer to return to the originating financial institution.",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/return_an_inbound_ach_transfer_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inbound_ach_transfer"
                }
              }
            },
            "description": "Inbound ACH Transfer"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Return an Inbound ACH Transfer",
        "x-sandbox-only": false,
        "x-tag": "Inbound ACH Transfers"
      }
    },
    "/inbound_check_deposits": {
      "get": {
        "operationId": "list_inbound_check_deposits",
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "description": "Return the page of entries after this one.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "description": "Limit the size of the list that is returned. The default (and maximum) is 100 objects.",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "account_id",
            "required": false,
            "schema": {
              "description": "Filter Inbound Check Deposits to those belonging to the specified Account.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "check_transfer_id",
            "required": false,
            "schema": {
              "description": "Filter Inbound Check Deposits to those belonging to the specified Check Transfer.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.after",
            "required": false,
            "schema": {
              "description": "Return results after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.before",
            "required": false,
            "schema": {
              "description": "Return results before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_after",
            "required": false,
            "schema": {
              "description": "Return results on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_before",
            "required": false,
            "schema": {
              "description": "Return results on or before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inbound_check_deposit_list"
                }
              }
            },
            "description": "Inbound Check Deposit List"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "List Inbound Check Deposits",
        "x-sandbox-only": false,
        "x-tag": "Inbound Check Deposits"
      }
    },
    "/inbound_check_deposits/{inbound_check_deposit_id}": {
      "get": {
        "operationId": "retrieve_an_inbound_check_deposit",
        "parameters": [
          {
            "example": "inbound_check_deposit_zoshvqybq0cjjm31mra",
            "in": "path",
            "name": "inbound_check_deposit_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Inbound Check Deposit to get details for.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inbound_check_deposit"
                }
              }
            },
            "description": "Inbound Check Deposit"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Retrieve an Inbound Check Deposit",
        "x-sandbox-only": false,
        "x-tag": "Inbound Check Deposits"
      }
    },
    "/inbound_check_deposits/{inbound_check_deposit_id}/decline": {
      "post": {
        "operationId": "decline_an_inbound_check_deposit",
        "parameters": [
          {
            "example": "inbound_check_deposit_zoshvqybq0cjjm31mra",
            "in": "path",
            "name": "inbound_check_deposit_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Inbound Check Deposit to decline.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inbound_check_deposit"
                }
              }
            },
            "description": "Inbound Check Deposit"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Decline an Inbound Check Deposit",
        "x-sandbox-only": false,
        "x-tag": "Inbound Check Deposits"
      }
    },
    "/inbound_check_deposits/{inbound_check_deposit_id}/return": {
      "post": {
        "operationId": "return_an_inbound_check_deposit",
        "parameters": [
          {
            "example": "inbound_check_deposit_zoshvqybq0cjjm31mra",
            "in": "path",
            "name": "inbound_check_deposit_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Inbound Check Deposit to return.",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/return_an_inbound_check_deposit_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inbound_check_deposit"
                }
              }
            },
            "description": "Inbound Check Deposit"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Return an Inbound Check Deposit",
        "x-sandbox-only": false,
        "x-tag": "Inbound Check Deposits"
      }
    },
    "/inbound_mail_items": {
      "get": {
        "operationId": "list_inbound_mail_items",
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "description": "Return the page of entries after this one.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "description": "Limit the size of the list that is returned. The default (and maximum) is 100 objects.",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "lockbox_id",
            "required": false,
            "schema": {
              "description": "Filter Inbound Mail Items to ones sent to the provided Lockbox.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.after",
            "required": false,
            "schema": {
              "description": "Return results after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.before",
            "required": false,
            "schema": {
              "description": "Return results before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_after",
            "required": false,
            "schema": {
              "description": "Return results on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_before",
            "required": false,
            "schema": {
              "description": "Return results on or before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inbound_mail_item_list"
                }
              }
            },
            "description": "Inbound Mail Item List"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "List Inbound Mail Items",
        "x-sandbox-only": false,
        "x-tag": "Inbound Mail Items"
      }
    },
    "/inbound_mail_items/{inbound_mail_item_id}": {
      "get": {
        "operationId": "retrieve_an_inbound_mail_item",
        "parameters": [
          {
            "example": "inbound_mail_item_q6rrg7mmqpplx80zceev",
            "in": "path",
            "name": "inbound_mail_item_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Inbound Mail Item to retrieve.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inbound_mail_item"
                }
              }
            },
            "description": "Inbound Mail Item"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Retrieve an Inbound Mail Item",
        "x-sandbox-only": false,
        "x-tag": "Inbound Mail Items"
      }
    },
    "/inbound_real_time_payments_transfers": {
      "get": {
        "operationId": "list_inbound_real_time_payments_transfers",
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "description": "Return the page of entries after this one.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "description": "Limit the size of the list that is returned. The default (and maximum) is 100 objects.",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "example": "account_in71c4amph0vgo2qllky",
            "in": "query",
            "name": "account_id",
            "required": false,
            "schema": {
              "description": "Filter Inbound Real-Time Payments Transfers to those belonging to the specified Account.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "account_number_id",
            "required": false,
            "schema": {
              "description": "Filter Inbound Real-Time Payments Transfers to ones belonging to the specified Account Number.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.after",
            "required": false,
            "schema": {
              "description": "Return results after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.before",
            "required": false,
            "schema": {
              "description": "Return results before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_after",
            "required": false,
            "schema": {
              "description": "Return results on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_before",
            "required": false,
            "schema": {
              "description": "Return results on or before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inbound_real_time_payments_transfer_list"
                }
              }
            },
            "description": "Inbound Real-Time Payments Transfer List"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "List Inbound Real-Time Payments Transfers",
        "x-sandbox-only": false,
        "x-tag": "Inbound Real-Time Payments Transfers"
      }
    },
    "/inbound_real_time_payments_transfers/{inbound_real_time_payments_transfer_id}": {
      "get": {
        "operationId": "retrieve_an_inbound_real_time_payments_transfer",
        "parameters": [
          {
            "example": "inbound_real_time_payments_transfer_63hlz498vcxg644hcrzr",
            "in": "path",
            "name": "inbound_real_time_payments_transfer_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Inbound Real-Time Payments Transfer to get details for.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inbound_real_time_payments_transfer"
                }
              }
            },
            "description": "Inbound Real-Time Payments Transfer"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Retrieve an Inbound Real-Time Payments Transfer",
        "x-sandbox-only": false,
        "x-tag": "Inbound Real-Time Payments Transfers"
      }
    },
    "/inbound_wire_drawdown_requests": {
      "get": {
        "operationId": "list_inbound_wire_drawdown_requests",
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "description": "Return the page of entries after this one.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "description": "Limit the size of the list that is returned. The default (and maximum) is 100 objects.",
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inbound_wire_drawdown_request_list"
                }
              }
            },
            "description": "Inbound Wire Drawdown Request List"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "List Inbound Wire Drawdown Requests",
        "x-sandbox-only": false,
        "x-tag": "Inbound Wire Drawdown Requests"
      }
    },
    "/inbound_wire_drawdown_requests/{inbound_wire_drawdown_request_id}": {
      "get": {
        "operationId": "retrieve_an_inbound_wire_drawdown_request",
        "parameters": [
          {
            "example": "inbound_wire_drawdown_request_u5a92ikqhz1ytphn799e",
            "in": "path",
            "name": "inbound_wire_drawdown_request_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Inbound Wire Drawdown Request to retrieve.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inbound_wire_drawdown_request"
                }
              }
            },
            "description": "Inbound Wire Drawdown Request"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Retrieve an Inbound Wire Drawdown Request",
        "x-sandbox-only": false,
        "x-tag": "Inbound Wire Drawdown Requests"
      }
    },
    "/inbound_wire_transfers": {
      "get": {
        "operationId": "list_inbound_wire_transfers",
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "description": "Return the page of entries after this one.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "description": "Limit the size of the list that is returned. The default (and maximum) is 100 objects.",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "example": "account_in71c4amph0vgo2qllky",
            "in": "query",
            "name": "account_id",
            "required": false,
            "schema": {
              "description": "Filter Inbound Wire Transfers to ones belonging to the specified Account.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "account_number_id",
            "required": false,
            "schema": {
              "description": "Filter Inbound Wire Transfers to ones belonging to the specified Account Number.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.after",
            "required": false,
            "schema": {
              "description": "Return results after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.before",
            "required": false,
            "schema": {
              "description": "Return results before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_after",
            "required": false,
            "schema": {
              "description": "Return results on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_before",
            "required": false,
            "schema": {
              "description": "Return results on or before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "status.in",
            "required": false,
            "schema": {
              "description": "Filter Inbound Wire Transfers to those with the specified status. For GET requests, this should be encoded as a comma-delimited string, such as `?in=one,two,three`.",
              "items": {
                "enum": [
                  "pending",
                  "accepted",
                  "declined",
                  "reversed"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "The Inbound Wire Transfer is awaiting action, will transition automatically if no action is taken.",
                  "The Inbound Wire Transfer is accepted.",
                  "The Inbound Wire Transfer was declined.",
                  "The Inbound Wire Transfer was reversed."
                ]
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inbound_wire_transfer_list"
                }
              }
            },
            "description": "Inbound Wire Transfer List"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "List Inbound Wire Transfers",
        "x-sandbox-only": false,
        "x-tag": "Inbound Wire Transfers"
      }
    },
    "/inbound_wire_transfers/{inbound_wire_transfer_id}": {
      "get": {
        "operationId": "retrieve_an_inbound_wire_transfer",
        "parameters": [
          {
            "example": "inbound_wire_transfer_f228m6bmhtcxjco9pwp0",
            "in": "path",
            "name": "inbound_wire_transfer_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Inbound Wire Transfer to get details for.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inbound_wire_transfer"
                }
              }
            },
            "description": "Inbound Wire Transfer"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Retrieve an Inbound Wire Transfer",
        "x-sandbox-only": false,
        "x-tag": "Inbound Wire Transfers"
      }
    },
    "/intrafi_account_enrollments": {
      "get": {
        "operationId": "list_intrafi_account_enrollments",
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "description": "Return the page of entries after this one.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "description": "Limit the size of the list that is returned. The default (and maximum) is 100 objects.",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "example": "account_in71c4amph0vgo2qllky",
            "in": "query",
            "name": "account_id",
            "required": false,
            "schema": {
              "description": "Filter IntraFi Account Enrollments to the one belonging to an account.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "status.in",
            "required": false,
            "schema": {
              "description": "Filter IntraFi Account Enrollments for those with the specified status or statuses. For GET requests, this should be encoded as a comma-delimited string, such as `?in=one,two,three`.",
              "items": {
                "enum": [
                  "pending_enrolling",
                  "enrolled",
                  "pending_unenrolling",
                  "unenrolled",
                  "requires_attention"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "The account is being added to the IntraFi network.",
                  "The account has been enrolled with IntraFi.",
                  "The account is being unenrolled from IntraFi's deposit sweep.",
                  "The account was once enrolled, but is no longer enrolled at IntraFi.",
                  "Something unexpected happened with this account. Contact Increase support."
                ]
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "idempotency_key",
            "required": false,
            "schema": {
              "description": "Filter records to the one with the specified `idempotency_key` you chose for that object. This value is unique across Increase and is used to ensure that a request is only processed once. Learn more about [idempotency](https://increase.com/documentation/idempotency-keys).",
              "maxLength": 200,
              "minLength": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/intrafi_account_enrollment_list"
                }
              }
            },
            "description": "IntraFi Account Enrollment List"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "List IntraFi Account Enrollments",
        "x-sandbox-only": false,
        "x-tag": "IntraFi Account Enrollments"
      },
      "post": {
        "operationId": "enroll_an_account_in_the_intrafi_deposit_sweep_network",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/enroll_an_account_in_the_intrafi_deposit_sweep_network_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/intrafi_account_enrollment"
                }
              }
            },
            "description": "IntraFi Account Enrollment"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Enroll an account in the IntraFi deposit sweep network",
        "x-sandbox-only": false,
        "x-tag": "IntraFi Account Enrollments"
      }
    },
    "/intrafi_account_enrollments/{intrafi_account_enrollment_id}": {
      "get": {
        "operationId": "get_an_intrafi_account_enrollment",
        "parameters": [
          {
            "example": "intrafi_account_enrollment_w8l97znzreopkwf2tg75",
            "in": "path",
            "name": "intrafi_account_enrollment_id",
            "required": true,
            "schema": {
              "description": "The identifier of the IntraFi Account Enrollment to retrieve.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/intrafi_account_enrollment"
                }
              }
            },
            "description": "IntraFi Account Enrollment"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Get an IntraFi Account Enrollment",
        "x-sandbox-only": false,
        "x-tag": "IntraFi Account Enrollments"
      }
    },
    "/intrafi_account_enrollments/{intrafi_account_enrollment_id}/unenroll": {
      "post": {
        "operationId": "unenroll_an_account_from_intrafi",
        "parameters": [
          {
            "example": "intrafi_account_enrollment_w8l97znzreopkwf2tg75",
            "in": "path",
            "name": "intrafi_account_enrollment_id",
            "required": true,
            "schema": {
              "description": "The Identifier of the IntraFi Account Enrollment to remove from IntraFi.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/intrafi_account_enrollment"
                }
              }
            },
            "description": "IntraFi Account Enrollment"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Unenroll an account from IntraFi",
        "x-sandbox-only": false,
        "x-tag": "IntraFi Account Enrollments"
      }
    },
    "/intrafi_exclusions": {
      "get": {
        "operationId": "list_intrafi_exclusions",
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "description": "Return the page of entries after this one.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "description": "Limit the size of the list that is returned. The default (and maximum) is 100 objects.",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "example": "entity_n8y8tnk2p9339ti393yi",
            "in": "query",
            "name": "entity_id",
            "required": false,
            "schema": {
              "description": "Filter IntraFi Exclusions for those belonging to the specified Entity.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "idempotency_key",
            "required": false,
            "schema": {
              "description": "Filter records to the one with the specified `idempotency_key` you chose for that object. This value is unique across Increase and is used to ensure that a request is only processed once. Learn more about [idempotency](https://increase.com/documentation/idempotency-keys).",
              "maxLength": 200,
              "minLength": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/intrafi_exclusion_list"
                }
              }
            },
            "description": "IntraFi Exclusion List"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "List IntraFi Exclusions",
        "x-sandbox-only": false,
        "x-tag": "IntraFi Exclusions"
      },
      "post": {
        "operationId": "create_an_intrafi_exclusion",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_an_intrafi_exclusion_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/intrafi_exclusion"
                }
              }
            },
            "description": "IntraFi Exclusion"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Create an IntraFi Exclusion",
        "x-sandbox-only": false,
        "x-tag": "IntraFi Exclusions"
      }
    },
    "/intrafi_exclusions/{intrafi_exclusion_id}": {
      "get": {
        "operationId": "get_an_intrafi_exclusion",
        "parameters": [
          {
            "example": "account_in71c4amph0vgo2qllky",
            "in": "path",
            "name": "intrafi_exclusion_id",
            "required": true,
            "schema": {
              "description": "The identifier of the IntraFi Exclusion to retrieve.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/intrafi_exclusion"
                }
              }
            },
            "description": "IntraFi Exclusion"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Get an IntraFi Exclusion",
        "x-sandbox-only": false,
        "x-tag": "IntraFi Exclusions"
      }
    },
    "/intrafi_exclusions/{intrafi_exclusion_id}/archive": {
      "post": {
        "operationId": "archive_an_intrafi_exclusion",
        "parameters": [
          {
            "example": "intrafi_exclusion_ygfqduuzpau3jqof6jyh",
            "in": "path",
            "name": "intrafi_exclusion_id",
            "required": true,
            "schema": {
              "description": "The identifier of the IntraFi Exclusion request to archive. It may take 5 business days for an exclusion removal to be processed. Removing an exclusion does not guarantee that funds will be swept to the previously-excluded bank.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/intrafi_exclusion"
                }
              }
            },
            "description": "IntraFi Exclusion"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Archive an IntraFi Exclusion",
        "x-sandbox-only": false,
        "x-tag": "IntraFi Exclusions"
      }
    },
    "/lockboxes": {
      "get": {
        "operationId": "list_lockboxes",
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "description": "Return the page of entries after this one.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "description": "Limit the size of the list that is returned. The default (and maximum) is 100 objects.",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "account_id",
            "required": false,
            "schema": {
              "description": "Filter Lockboxes to those associated with the provided Account.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.after",
            "required": false,
            "schema": {
              "description": "Return results after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.before",
            "required": false,
            "schema": {
              "description": "Return results before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_after",
            "required": false,
            "schema": {
              "description": "Return results on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_before",
            "required": false,
            "schema": {
              "description": "Return results on or before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "idempotency_key",
            "required": false,
            "schema": {
              "description": "Filter records to the one with the specified `idempotency_key` you chose for that object. This value is unique across Increase and is used to ensure that a request is only processed once. Learn more about [idempotency](https://increase.com/documentation/idempotency-keys).",
              "maxLength": 200,
              "minLength": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/lockbox_list"
                }
              }
            },
            "description": "Lockbox List"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "List Lockboxes",
        "x-sandbox-only": false,
        "x-tag": "Lockboxes"
      },
      "post": {
        "operationId": "create_a_lockbox",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_a_lockbox_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/lockbox"
                }
              }
            },
            "description": "Lockbox"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Create a Lockbox",
        "x-sandbox-only": false,
        "x-tag": "Lockboxes"
      }
    },
    "/lockboxes/{lockbox_id}": {
      "get": {
        "operationId": "retrieve_a_lockbox",
        "parameters": [
          {
            "example": "lockbox_3xt21ok13q19advds4t5",
            "in": "path",
            "name": "lockbox_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Lockbox to retrieve.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/lockbox"
                }
              }
            },
            "description": "Lockbox"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Retrieve a Lockbox",
        "x-sandbox-only": false,
        "x-tag": "Lockboxes"
      },
      "patch": {
        "operationId": "update_a_lockbox",
        "parameters": [
          {
            "example": "lockbox_3xt21ok13q19advds4t5",
            "in": "path",
            "name": "lockbox_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Lockbox.",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_a_lockbox_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/lockbox"
                }
              }
            },
            "description": "Lockbox"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Update a Lockbox",
        "x-sandbox-only": false,
        "x-tag": "Lockboxes"
      }
    },
    "/oauth/tokens": {
      "post": {
        "operationId": "create_an_oauth_token",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_an_oauth_token_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/oauth_token"
                }
              }
            },
            "description": "OAuth Token"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Create an OAuth Token",
        "x-sandbox-only": false,
        "x-tag": "OAuth Tokens"
      }
    },
    "/oauth_applications": {
      "get": {
        "operationId": "list_oauth_applications",
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "description": "Return the page of entries after this one.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "description": "Limit the size of the list that is returned. The default (and maximum) is 100 objects.",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "status.in",
            "required": false,
            "schema": {
              "description": "Return results whose value is in the provided list. For GET requests, this should be encoded as a comma-delimited string, such as `?in=one,two,three`.",
              "items": {
                "enum": [
                  "active",
                  "deleted"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "The application is active and can be used by your users.",
                  "The application is deleted."
                ]
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "created_at.after",
            "required": false,
            "schema": {
              "description": "Return results after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.before",
            "required": false,
            "schema": {
              "description": "Return results before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_after",
            "required": false,
            "schema": {
              "description": "Return results on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_before",
            "required": false,
            "schema": {
              "description": "Return results on or before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/oauth_application_list"
                }
              }
            },
            "description": "OAuth Application List"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "List OAuth Applications",
        "x-sandbox-only": false,
        "x-tag": "OAuth Applications"
      }
    },
    "/oauth_applications/{oauth_application_id}": {
      "get": {
        "operationId": "retrieve_an_oauth_application",
        "parameters": [
          {
            "example": "application_gj9ufmpgh5i56k4vyriy",
            "in": "path",
            "name": "oauth_application_id",
            "required": true,
            "schema": {
              "description": "The identifier of the OAuth Application.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/oauth_application"
                }
              }
            },
            "description": "OAuth Application"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Retrieve an OAuth Application",
        "x-sandbox-only": false,
        "x-tag": "OAuth Applications"
      }
    },
    "/oauth_connections": {
      "get": {
        "operationId": "list_oauth_connections",
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "description": "Return the page of entries after this one.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "description": "Limit the size of the list that is returned. The default (and maximum) is 100 objects.",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "status.in",
            "required": false,
            "schema": {
              "description": "Filter to OAuth Connections by their status. By default, return only the `active` ones. For GET requests, this should be encoded as a comma-delimited string, such as `?in=one,two,three`.",
              "items": {
                "enum": [
                  "active",
                  "inactive"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "The OAuth connection is active.",
                  "The OAuth connection is permanently deactivated."
                ]
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "oauth_application_id",
            "required": false,
            "schema": {
              "description": "Filter results to only include OAuth Connections for a specific OAuth Application.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/oauth_connection_list"
                }
              }
            },
            "description": "OAuth Connection List"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "List OAuth Connections",
        "x-sandbox-only": false,
        "x-tag": "OAuth Connections"
      }
    },
    "/oauth_connections/{oauth_connection_id}": {
      "get": {
        "operationId": "retrieve_an_oauth_connection",
        "parameters": [
          {
            "example": "connection_dauknoksyr4wilz4e6my",
            "in": "path",
            "name": "oauth_connection_id",
            "required": true,
            "schema": {
              "description": "The identifier of the OAuth Connection.",
              "maxLength": 200,
              "minLength": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/oauth_connection"
                }
              }
            },
            "description": "OAuth Connection"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Retrieve an OAuth Connection",
        "x-sandbox-only": false,
        "x-tag": "OAuth Connections"
      }
    },
    "/pending_transactions": {
      "get": {
        "operationId": "list_pending_transactions",
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "description": "Return the page of entries after this one.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "description": "Limit the size of the list that is returned. The default (and maximum) is 100 objects.",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "account_id",
            "required": false,
            "schema": {
              "description": "Filter pending transactions to those belonging to the specified Account.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "route_id",
            "required": false,
            "schema": {
              "description": "Filter pending transactions to those belonging to the specified Route.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "category.in",
            "required": false,
            "schema": {
              "description": "Return results whose value is in the provided list. For GET requests, this should be encoded as a comma-delimited string, such as `?in=one,two,three`.",
              "items": {
                "enum": [
                  "account_transfer_instruction",
                  "ach_transfer_instruction",
                  "card_authorization",
                  "check_deposit_instruction",
                  "check_transfer_instruction",
                  "inbound_funds_hold",
                  "real_time_payments_transfer_instruction",
                  "wire_transfer_instruction",
                  "inbound_wire_transfer_reversal",
                  "other"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "Account Transfer Instruction: details will be under the `account_transfer_instruction` object.",
                  "ACH Transfer Instruction: details will be under the `ach_transfer_instruction` object.",
                  "Card Authorization: details will be under the `card_authorization` object.",
                  "Check Deposit Instruction: details will be under the `check_deposit_instruction` object.",
                  "Check Transfer Instruction: details will be under the `check_transfer_instruction` object.",
                  "Inbound Funds Hold: details will be under the `inbound_funds_hold` object.",
                  "Real-Time Payments Transfer Instruction: details will be under the `real_time_payments_transfer_instruction` object.",
                  "Wire Transfer Instruction: details will be under the `wire_transfer_instruction` object.",
                  "Inbound Wire Transfer Reversal: details will be under the `inbound_wire_transfer_reversal` object.",
                  "The Pending Transaction was made for an undocumented or deprecated reason."
                ]
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "status.in",
            "required": false,
            "schema": {
              "description": "Filter Pending Transactions for those with the specified status. By default only Pending Transactions in with status `pending` will be returned. For GET requests, this should be encoded as a comma-delimited string, such as `?in=one,two,three`.",
              "items": {
                "enum": [
                  "pending",
                  "complete"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "The Pending Transaction is still awaiting confirmation.",
                  "The Pending Transaction is confirmed. An associated Transaction exists for this object. The Pending Transaction will no longer count against your balance and can generally be hidden from UIs, etc."
                ]
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "created_at.after",
            "required": false,
            "schema": {
              "description": "Return results after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.before",
            "required": false,
            "schema": {
              "description": "Return results before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_after",
            "required": false,
            "schema": {
              "description": "Return results on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_before",
            "required": false,
            "schema": {
              "description": "Return results on or before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pending_transaction_list"
                }
              }
            },
            "description": "Pending Transaction List"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "List Pending Transactions",
        "x-sandbox-only": false,
        "x-tag": "Pending Transactions"
      }
    },
    "/pending_transactions/{pending_transaction_id}": {
      "get": {
        "operationId": "retrieve_a_pending_transaction",
        "parameters": [
          {
            "example": "pending_transaction_k1sfetcau2qbvjbzgju4",
            "in": "path",
            "name": "pending_transaction_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Pending Transaction.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pending_transaction"
                }
              }
            },
            "description": "Pending Transaction"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Retrieve a Pending Transaction",
        "x-sandbox-only": false,
        "x-tag": "Pending Transactions"
      }
    },
    "/physical_card_profiles": {
      "get": {
        "operationId": "list_physical_card_profiles",
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "description": "Return the page of entries after this one.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "description": "Limit the size of the list that is returned. The default (and maximum) is 100 objects.",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "status.in",
            "required": false,
            "schema": {
              "description": "Filter Physical Card Profiles for those with the specified statuses. For GET requests, this should be encoded as a comma-delimited string, such as `?in=one,two,three`.",
              "items": {
                "enum": [
                  "pending_creating",
                  "pending_reviewing",
                  "rejected",
                  "pending_submitting",
                  "active",
                  "archived"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "The Card Profile has not yet been processed by Increase.",
                  "The card profile is awaiting review by Increase.",
                  "There is an issue with the Physical Card Profile preventing it from use.",
                  "The card profile is awaiting submission to the fulfillment provider.",
                  "The Physical Card Profile has been submitted to the fulfillment provider and is ready to use.",
                  "The Physical Card Profile has been archived."
                ]
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "idempotency_key",
            "required": false,
            "schema": {
              "description": "Filter records to the one with the specified `idempotency_key` you chose for that object. This value is unique across Increase and is used to ensure that a request is only processed once. Learn more about [idempotency](https://increase.com/documentation/idempotency-keys).",
              "maxLength": 200,
              "minLength": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/physical_card_profile_list"
                }
              }
            },
            "description": "Physical Card Profile List"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "List Physical Card Profiles",
        "x-sandbox-only": false,
        "x-tag": "Physical Card Profiles"
      },
      "post": {
        "operationId": "create_a_physical_card_profile",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_a_physical_card_profile_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/physical_card_profile"
                }
              }
            },
            "description": "Physical Card Profile"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Create a Physical Card Profile",
        "x-sandbox-only": false,
        "x-tag": "Physical Card Profiles"
      }
    },
    "/physical_card_profiles/{physical_card_profile_id}": {
      "get": {
        "operationId": "retrieve_a_card_profile",
        "parameters": [
          {
            "example": "physical_card_profile_m534d5rn9qyy9ufqxoec",
            "in": "path",
            "name": "physical_card_profile_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Card Profile.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/physical_card_profile"
                }
              }
            },
            "description": "Physical Card Profile"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Retrieve a Card Profile",
        "x-sandbox-only": false,
        "x-tag": "Physical Card Profiles"
      }
    },
    "/physical_card_profiles/{physical_card_profile_id}/archive": {
      "post": {
        "operationId": "archive_a_physical_card_profile",
        "parameters": [
          {
            "example": "physical_card_profile_m534d5rn9qyy9ufqxoec",
            "in": "path",
            "name": "physical_card_profile_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Physical Card Profile to archive.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/physical_card_profile"
                }
              }
            },
            "description": "Physical Card Profile"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Archive a Physical Card Profile",
        "x-sandbox-only": false,
        "x-tag": "Physical Card Profiles"
      }
    },
    "/physical_card_profiles/{physical_card_profile_id}/clone": {
      "post": {
        "operationId": "clone_a_physical_card_profile",
        "parameters": [
          {
            "example": "physical_card_profile_m534d5rn9qyy9ufqxoec",
            "in": "path",
            "name": "physical_card_profile_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Physical Card Profile to clone.",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/clone_a_physical_card_profile_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/physical_card_profile"
                }
              }
            },
            "description": "Physical Card Profile"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Clone a Physical Card Profile",
        "x-sandbox-only": false,
        "x-tag": "Physical Card Profiles"
      }
    },
    "/physical_cards": {
      "get": {
        "operationId": "list_physical_cards",
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "description": "Return the page of entries after this one.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "description": "Limit the size of the list that is returned. The default (and maximum) is 100 objects.",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "example": "card_oubs0hwk5rn6knuecxg2",
            "in": "query",
            "name": "card_id",
            "required": false,
            "schema": {
              "description": "Filter Physical Cards to ones belonging to the specified Card.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.after",
            "required": false,
            "schema": {
              "description": "Return results after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.before",
            "required": false,
            "schema": {
              "description": "Return results before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_after",
            "required": false,
            "schema": {
              "description": "Return results on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_before",
            "required": false,
            "schema": {
              "description": "Return results on or before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "idempotency_key",
            "required": false,
            "schema": {
              "description": "Filter records to the one with the specified `idempotency_key` you chose for that object. This value is unique across Increase and is used to ensure that a request is only processed once. Learn more about [idempotency](https://increase.com/documentation/idempotency-keys).",
              "maxLength": 200,
              "minLength": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/physical_card_list"
                }
              }
            },
            "description": "Physical Card List"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "List Physical Cards",
        "x-sandbox-only": false,
        "x-tag": "Physical Cards"
      },
      "post": {
        "operationId": "create_a_physical_card",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_a_physical_card_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/physical_card"
                }
              }
            },
            "description": "Physical Card"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Create a Physical Card",
        "x-sandbox-only": false,
        "x-tag": "Physical Cards"
      }
    },
    "/physical_cards/{physical_card_id}": {
      "get": {
        "operationId": "retrieve_a_physical_card",
        "parameters": [
          {
            "example": "physical_card_ode8duyq5v2ynhjoharl",
            "in": "path",
            "name": "physical_card_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Physical Card.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/physical_card"
                }
              }
            },
            "description": "Physical Card"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Retrieve a Physical Card",
        "x-sandbox-only": false,
        "x-tag": "Physical Cards"
      },
      "patch": {
        "operationId": "update_a_physical_card",
        "parameters": [
          {
            "example": "physical_card_ode8duyq5v2ynhjoharl",
            "in": "path",
            "name": "physical_card_id",
            "required": true,
            "schema": {
              "description": "The Physical Card identifier.",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_a_physical_card_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/physical_card"
                }
              }
            },
            "description": "Physical Card"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Update a Physical Card",
        "x-sandbox-only": false,
        "x-tag": "Physical Cards"
      }
    },
    "/programs": {
      "get": {
        "operationId": "list_programs",
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "description": "Return the page of entries after this one.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "description": "Limit the size of the list that is returned. The default (and maximum) is 100 objects.",
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/program_list"
                }
              }
            },
            "description": "Program List"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "List Programs",
        "x-sandbox-only": false,
        "x-tag": "Programs"
      }
    },
    "/programs/{program_id}": {
      "get": {
        "operationId": "retrieve_a_program",
        "parameters": [
          {
            "example": "program_i2v2os4mwza1oetokh9i",
            "in": "path",
            "name": "program_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Program to retrieve.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/program"
                }
              }
            },
            "description": "Program"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Retrieve a Program",
        "x-sandbox-only": false,
        "x-tag": "Programs"
      }
    },
    "/proof_of_authorization_request_submissions": {
      "get": {
        "operationId": "list_proof_of_authorization_request_submissions",
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "description": "Return the page of entries after this one.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "description": "Limit the size of the list that is returned. The default (and maximum) is 100 objects.",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "example": "proof_of_authorization_request_iwp8no25h3rjvil6ad3b",
            "in": "query",
            "name": "proof_of_authorization_request_id",
            "required": false,
            "schema": {
              "description": "ID of the proof of authorization request.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "idempotency_key",
            "required": false,
            "schema": {
              "description": "Filter records to the one with the specified `idempotency_key` you chose for that object. This value is unique across Increase and is used to ensure that a request is only processed once. Learn more about [idempotency](https://increase.com/documentation/idempotency-keys).",
              "maxLength": 200,
              "minLength": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/proof_of_authorization_request_submission_list"
                }
              }
            },
            "description": "Proof of Authorization Request Submission List"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "List Proof of Authorization Request Submissions",
        "x-sandbox-only": false,
        "x-tag": "Proof of Authorization Request Submissions"
      },
      "post": {
        "operationId": "submit_proof_of_authorization",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/submit_proof_of_authorization_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/proof_of_authorization_request_submission"
                }
              }
            },
            "description": "Proof of Authorization Request Submission"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Submit Proof of Authorization",
        "x-sandbox-only": false,
        "x-tag": "Proof of Authorization Request Submissions"
      }
    },
    "/proof_of_authorization_request_submissions/{proof_of_authorization_request_submission_id}": {
      "get": {
        "operationId": "retrieve_a_proof_of_authorization_request_submission",
        "parameters": [
          {
            "example": "proof_of_authorization_request_submission_uqhqroiley7n0097vizn",
            "in": "path",
            "name": "proof_of_authorization_request_submission_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Proof of Authorization Request Submission.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/proof_of_authorization_request_submission"
                }
              }
            },
            "description": "Proof of Authorization Request Submission"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Retrieve a Proof of Authorization Request Submission",
        "x-sandbox-only": false,
        "x-tag": "Proof of Authorization Request Submissions"
      }
    },
    "/proof_of_authorization_requests": {
      "get": {
        "operationId": "list_proof_of_authorization_requests",
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "description": "Return the page of entries after this one.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "description": "Limit the size of the list that is returned. The default (and maximum) is 100 objects.",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "created_at.after",
            "required": false,
            "schema": {
              "description": "Return results after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.before",
            "required": false,
            "schema": {
              "description": "Return results before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_after",
            "required": false,
            "schema": {
              "description": "Return results on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_before",
            "required": false,
            "schema": {
              "description": "Return results on or before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/proof_of_authorization_request_list"
                }
              }
            },
            "description": "Proof of Authorization Request List"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "List Proof of Authorization Requests",
        "x-sandbox-only": false,
        "x-tag": "Proof of Authorization Requests"
      }
    },
    "/proof_of_authorization_requests/{proof_of_authorization_request_id}": {
      "get": {
        "operationId": "retrieve_a_proof_of_authorization_request",
        "parameters": [
          {
            "example": "proof_of_authorization_request_iwp8no25h3rjvil6ad3b",
            "in": "path",
            "name": "proof_of_authorization_request_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Proof of Authorization Request.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/proof_of_authorization_request"
                }
              }
            },
            "description": "Proof of Authorization Request"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Retrieve a Proof of Authorization Request",
        "x-sandbox-only": false,
        "x-tag": "Proof of Authorization Requests"
      }
    },
    "/real_time_decisions/{real_time_decision_id}": {
      "get": {
        "operationId": "retrieve_a_real_time_decision",
        "parameters": [
          {
            "example": "real_time_decision_j76n2e810ezcg3zh5qtn",
            "in": "path",
            "name": "real_time_decision_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Real-Time Decision.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/real_time_decision"
                }
              }
            },
            "description": "Real-Time Decision"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Retrieve a Real-Time Decision",
        "x-sandbox-only": false,
        "x-tag": "Real-Time Decisions"
      }
    },
    "/real_time_decisions/{real_time_decision_id}/action": {
      "post": {
        "operationId": "action_a_real_time_decision",
        "parameters": [
          {
            "example": "real_time_decision_j76n2e810ezcg3zh5qtn",
            "in": "path",
            "name": "real_time_decision_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Real-Time Decision.",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/action_a_real_time_decision_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/real_time_decision"
                }
              }
            },
            "description": "Real-Time Decision"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Action a Real-Time Decision",
        "x-sandbox-only": false,
        "x-tag": "Real-Time Decisions"
      }
    },
    "/real_time_payments_transfers": {
      "get": {
        "operationId": "list_real_time_payments_transfers",
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "description": "Return the page of entries after this one.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "description": "Limit the size of the list that is returned. The default (and maximum) is 100 objects.",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "example": "account_in71c4amph0vgo2qllky",
            "in": "query",
            "name": "account_id",
            "required": false,
            "schema": {
              "description": "Filter Real-Time Payments Transfers to those belonging to the specified Account.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "external_account_id",
            "required": false,
            "schema": {
              "description": "Filter Real-Time Payments Transfers to those made to the specified External Account.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "idempotency_key",
            "required": false,
            "schema": {
              "description": "Filter records to the one with the specified `idempotency_key` you chose for that object. This value is unique across Increase and is used to ensure that a request is only processed once. Learn more about [idempotency](https://increase.com/documentation/idempotency-keys).",
              "maxLength": 200,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "status.in",
            "required": false,
            "schema": {
              "description": "Return results whose value is in the provided list. For GET requests, this should be encoded as a comma-delimited string, such as `?in=one,two,three`.",
              "items": {
                "enum": [
                  "pending_approval",
                  "canceled",
                  "pending_reviewing",
                  "requires_attention",
                  "rejected",
                  "pending_submission",
                  "submitted",
                  "complete"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "The transfer is pending approval.",
                  "The transfer has been canceled.",
                  "The transfer is pending review by Increase.",
                  "The transfer requires attention from an Increase operator.",
                  "The transfer was rejected by the network or the recipient's bank.",
                  "The transfer is queued to be submitted to Real-Time Payments.",
                  "The transfer has been submitted and is pending a response from Real-Time Payments.",
                  "The transfer has been sent successfully and is complete."
                ]
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "created_at.after",
            "required": false,
            "schema": {
              "description": "Return results after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.before",
            "required": false,
            "schema": {
              "description": "Return results before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_after",
            "required": false,
            "schema": {
              "description": "Return results on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_before",
            "required": false,
            "schema": {
              "description": "Return results on or before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/real_time_payments_transfer_list"
                }
              }
            },
            "description": "Real-Time Payments Transfer List"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "List Real-Time Payments Transfers",
        "x-sandbox-only": false,
        "x-tag": "Real-Time Payments Transfers"
      },
      "post": {
        "operationId": "create_a_real_time_payments_transfer",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_a_real_time_payments_transfer_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/real_time_payments_transfer"
                }
              }
            },
            "description": "Real-Time Payments Transfer"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Create a Real-Time Payments Transfer",
        "x-sandbox-only": false,
        "x-tag": "Real-Time Payments Transfers"
      }
    },
    "/real_time_payments_transfers/{real_time_payments_transfer_id}": {
      "get": {
        "operationId": "retrieve_a_real_time_payments_transfer",
        "parameters": [
          {
            "example": "real_time_payments_transfer_iyuhl5kdn7ssmup83mvq",
            "in": "path",
            "name": "real_time_payments_transfer_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Real-Time Payments Transfer.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/real_time_payments_transfer"
                }
              }
            },
            "description": "Real-Time Payments Transfer"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Retrieve a Real-Time Payments Transfer",
        "x-sandbox-only": false,
        "x-tag": "Real-Time Payments Transfers"
      }
    },
    "/routing_numbers": {
      "get": {
        "description": "You can use this API to confirm if a routing number is valid, such as when a user is providing you with bank account details. Since routing numbers uniquely identify a bank, this will always return 0 or 1 entry. In Sandbox, the only valid routing number for this method is 110000000.",
        "operationId": "list_routing_numbers",
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "description": "Return the page of entries after this one.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "description": "Limit the size of the list that is returned. The default (and maximum) is 100 objects.",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "example": "021000021",
            "in": "query",
            "name": "routing_number",
            "required": true,
            "schema": {
              "description": "Filter financial institutions by routing number.",
              "maxLength": 9,
              "minLength": 9,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/routing_number_list"
                }
              }
            },
            "description": "Routing Number List"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "List Routing Numbers",
        "x-sandbox-only": false,
        "x-tag": "Routing Numbers"
      }
    },
    "/simulations/account_statements": {
      "post": {
        "description": "Simulates an [Account Statement](#account-statements) being created for an account. In production, Account Statements are generated once per month.",
        "operationId": "sandbox_create_an_account_statement",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sandbox_create_an_account_statement_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account_statement"
                }
              }
            },
            "description": "Account Statement"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Sandbox: Create an Account Statement",
        "x-sandbox-only": true,
        "x-tag": "Account Statements"
      }
    },
    "/simulations/account_transfers/{account_transfer_id}/complete": {
      "post": {
        "description": "If your account is configured to require approval for each transfer, this endpoint simulates the approval of an [Account Transfer](#account-transfers). You can also approve sandbox Account Transfers in the dashboard. This transfer must first have a `status` of `pending_approval`.",
        "operationId": "sandbox_approve_an_account_transfer",
        "parameters": [
          {
            "example": "account_transfer_7k9qe1ysdgqztnt63l7n",
            "in": "path",
            "name": "account_transfer_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Account Transfer you wish to complete.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account_transfer"
                }
              }
            },
            "description": "Account Transfer"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Sandbox: Approve an Account Transfer",
        "x-sandbox-only": true,
        "x-tag": "Account Transfers"
      }
    },
    "/simulations/ach_transfers/{ach_transfer_id}/acknowledge": {
      "post": {
        "description": "Simulates the acknowledgement of an [ACH Transfer](#ach-transfers) by the Federal Reserve. This transfer must first have a `status` of `submitted` . In production, the Federal Reserve generally acknowledges submitted ACH files within 30 minutes. Since sandbox ACH Transfers are not submitted to the Federal Reserve, this endpoint allows you to skip that delay and add the acknowledgment subresource to the ACH Transfer.",
        "operationId": "sandbox_acknowledge_an_ach_transfer",
        "parameters": [
          {
            "example": "ach_transfer_uoxatyh3lt5evrsdvo7q",
            "in": "path",
            "name": "ach_transfer_id",
            "required": true,
            "schema": {
              "description": "The identifier of the ACH Transfer you wish to become acknowledged.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ach_transfer"
                }
              }
            },
            "description": "ACH Transfer"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Sandbox: Acknowledge an ACH Transfer",
        "x-sandbox-only": true,
        "x-tag": "ACH Transfers"
      }
    },
    "/simulations/ach_transfers/{ach_transfer_id}/create_notification_of_change": {
      "post": {
        "description": "Simulates receiving a Notification of Change for an [ACH Transfer](#ach-transfers).",
        "operationId": "sandbox_create_a_notification_of_change_for_an_ach_transfer",
        "parameters": [
          {
            "example": "ach_transfer_uoxatyh3lt5evrsdvo7q",
            "in": "path",
            "name": "ach_transfer_id",
            "required": true,
            "schema": {
              "description": "The identifier of the ACH Transfer you wish to create a notification of change for.",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sandbox_create_a_notification_of_change_for_an_ach_transfer_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ach_transfer"
                }
              }
            },
            "description": "ACH Transfer"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Sandbox: Create a Notification of Change for an ACH Transfer",
        "x-sandbox-only": true,
        "x-tag": "ACH Transfers"
      }
    },
    "/simulations/ach_transfers/{ach_transfer_id}/return": {
      "post": {
        "description": "Simulates the return of an [ACH Transfer](#ach-transfers) by the Federal Reserve due to an error condition. This will also create a Transaction to account for the returned funds. This transfer must first have a `status` of `submitted`.",
        "operationId": "sandbox_return_an_ach_transfer",
        "parameters": [
          {
            "example": "ach_transfer_uoxatyh3lt5evrsdvo7q",
            "in": "path",
            "name": "ach_transfer_id",
            "required": true,
            "schema": {
              "description": "The identifier of the ACH Transfer you wish to return.",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sandbox_return_an_ach_transfer_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ach_transfer"
                }
              }
            },
            "description": "ACH Transfer"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Sandbox: Return an ACH Transfer",
        "x-sandbox-only": true,
        "x-tag": "ACH Transfers"
      }
    },
    "/simulations/ach_transfers/{ach_transfer_id}/settle": {
      "post": {
        "description": "Simulates the settlement of an [ACH Transfer](#ach-transfers) by the Federal Reserve. This transfer must first have a `status` of `pending_submission` or `submitted`. For convenience, if the transfer is in `status`: `pending_submission`, the simulation will also submit the transfer. Without this simulation the transfer will eventually settle on its own following the same Federal Reserve timeline as in production.",
        "operationId": "sandbox_settle_an_ach_transfer",
        "parameters": [
          {
            "example": "ach_transfer_uoxatyh3lt5evrsdvo7q",
            "in": "path",
            "name": "ach_transfer_id",
            "required": true,
            "schema": {
              "description": "The identifier of the ACH Transfer you wish to become settled.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ach_transfer"
                }
              }
            },
            "description": "ACH Transfer"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Sandbox: Settle an ACH Transfer",
        "x-sandbox-only": true,
        "x-tag": "ACH Transfers"
      }
    },
    "/simulations/ach_transfers/{ach_transfer_id}/submit": {
      "post": {
        "description": "Simulates the submission of an [ACH Transfer](#ach-transfers) to the Federal Reserve. This transfer must first have a `status` of `pending_approval` or `pending_submission`. In production, Increase submits ACH Transfers to the Federal Reserve three times per day on weekdays. Since sandbox ACH Transfers are not submitted to the Federal Reserve, this endpoint allows you to skip that delay and transition the ACH Transfer to a status of `submitted`.",
        "operationId": "sandbox_submit_an_ach_transfer",
        "parameters": [
          {
            "example": "ach_transfer_uoxatyh3lt5evrsdvo7q",
            "in": "path",
            "name": "ach_transfer_id",
            "required": true,
            "schema": {
              "description": "The identifier of the ACH Transfer you wish to submit.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ach_transfer"
                }
              }
            },
            "description": "ACH Transfer"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Sandbox: Submit an ACH Transfer",
        "x-sandbox-only": true,
        "x-tag": "ACH Transfers"
      }
    },
    "/simulations/card_authorization_expirations": {
      "post": {
        "description": "Simulates expiring a Card Authorization immediately.",
        "operationId": "sandbox_expire_a_card_authorization",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sandbox_expire_a_card_authorization_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/card_payment"
                }
              }
            },
            "description": "Card Payment"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Sandbox: Expire a Card Authorization",
        "x-sandbox-only": true,
        "x-tag": "Card Payments"
      }
    },
    "/simulations/card_authorizations": {
      "post": {
        "description": "Simulates a purchase authorization on a [Card](#cards). Depending on the balance available to the card and the `amount` submitted, the authorization activity will result in a [Pending Transaction](#pending-transactions) of type `card_authorization` or a [Declined Transaction](#declined-transactions) of type `card_decline`. You can pass either a Card id or a [Digital Wallet Token](#digital-wallet-tokens) id to simulate the two different ways purchases can be made.",
        "operationId": "sandbox_create_a_card_authorization",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sandbox_create_a_card_authorization_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inbound_card_authorization_simulation_result"
                }
              }
            },
            "description": "Inbound Card Authorization Simulation Result"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Sandbox: Create a Card Authorization",
        "x-sandbox-only": true,
        "x-tag": "Card Payments"
      }
    },
    "/simulations/card_disputes/{card_dispute_id}/action": {
      "post": {
        "description": "After a [Card Dispute](#card-disputes) is created in production, the dispute will be reviewed. Since no review happens in sandbox, this endpoint simulates moving a Card Dispute into a rejected or accepted state. A Card Dispute can only be actioned one time and must have a status of `pending_reviewing`.",
        "operationId": "sandbox_advance_the_state_of_a_card_dispute",
        "parameters": [
          {
            "example": "card_dispute_h9sc95nbl1cgltpp7men",
            "in": "path",
            "name": "card_dispute_id",
            "required": true,
            "schema": {
              "description": "The dispute you would like to action.",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sandbox_advance_the_state_of_a_card_dispute_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/card_dispute"
                }
              }
            },
            "description": "Card Dispute"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Sandbox: Advance the state of a Card Dispute",
        "x-sandbox-only": true,
        "x-tag": "Card Disputes"
      }
    },
    "/simulations/card_fuel_confirmations": {
      "post": {
        "description": "Simulates the fuel confirmation of an authorization by a card acquirer. This happens asynchronously right after a fuel pump transaction is completed. A fuel confirmation can only happen once per authorization.",
        "operationId": "sandbox_confirm_the_fuel_pump_amount_for_a_card_authorization",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sandbox_confirm_the_fuel_pump_amount_for_a_card_authorization_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/card_payment"
                }
              }
            },
            "description": "Card Payment"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Sandbox: Confirm the fuel pump amount for a Card Authorization",
        "x-sandbox-only": true,
        "x-tag": "Card Payments"
      }
    },
    "/simulations/card_increments": {
      "post": {
        "description": "Simulates the increment of an authorization by a card acquirer. An authorization can be incremented multiple times.",
        "operationId": "sandbox_increment_a_card_authorization",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sandbox_increment_a_card_authorization_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/card_payment"
                }
              }
            },
            "description": "Card Payment"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Sandbox: Increment a Card Authorization",
        "x-sandbox-only": true,
        "x-tag": "Card Payments"
      }
    },
    "/simulations/card_refunds": {
      "post": {
        "description": "Simulates refunding a card transaction. The full value of the original sandbox transaction is refunded.",
        "operationId": "sandbox_refund_a_card_transaction",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sandbox_refund_a_card_transaction_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transaction"
                }
              }
            },
            "description": "Transaction"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Sandbox: Refund a card transaction",
        "x-sandbox-only": true,
        "x-tag": "Card Payments"
      }
    },
    "/simulations/card_reversals": {
      "post": {
        "description": "Simulates the reversal of an authorization by a card acquirer. An authorization can be partially reversed multiple times, up until the total authorized amount. Marks the pending transaction as complete if the authorization is fully reversed.",
        "operationId": "sandbox_reverse_a_card_authorization",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sandbox_reverse_a_card_authorization_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/card_payment"
                }
              }
            },
            "description": "Card Payment"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Sandbox: Reverse a Card Authorization",
        "x-sandbox-only": true,
        "x-tag": "Card Payments"
      }
    },
    "/simulations/card_settlements": {
      "post": {
        "description": "Simulates the settlement of an authorization by a card acquirer. After a card authorization is created, the merchant will eventually send a settlement. This simulates that event, which may occur many days after the purchase in production. The amount settled can be different from the amount originally authorized, for example, when adding a tip to a restaurant bill.",
        "operationId": "sandbox_settle_a_card_authorization",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sandbox_settle_a_card_authorization_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transaction"
                }
              }
            },
            "description": "Transaction"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Sandbox: Settle a Card Authorization",
        "x-sandbox-only": true,
        "x-tag": "Card Payments"
      }
    },
    "/simulations/check_deposits/{check_deposit_id}/reject": {
      "post": {
        "description": "Simulates the rejection of a [Check Deposit](#check-deposits) by Increase due to factors like poor image quality. This Check Deposit must first have a `status` of `pending`.",
        "operationId": "sandbox_reject_a_check_deposit",
        "parameters": [
          {
            "example": "check_deposit_f06n9gpg7sxn8t19lfc1",
            "in": "path",
            "name": "check_deposit_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Check Deposit you wish to reject.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/check_deposit"
                }
              }
            },
            "description": "Check Deposit"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Sandbox: Reject a Check Deposit",
        "x-sandbox-only": true,
        "x-tag": "Check Deposits"
      }
    },
    "/simulations/check_deposits/{check_deposit_id}/return": {
      "post": {
        "description": "Simulates the return of a [Check Deposit](#check-deposits). This Check Deposit must first have a `status` of `submitted`.",
        "operationId": "sandbox_return_a_check_deposit",
        "parameters": [
          {
            "example": "check_deposit_f06n9gpg7sxn8t19lfc1",
            "in": "path",
            "name": "check_deposit_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Check Deposit you wish to return.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/check_deposit"
                }
              }
            },
            "description": "Check Deposit"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Sandbox: Return a Check Deposit",
        "x-sandbox-only": true,
        "x-tag": "Check Deposits"
      }
    },
    "/simulations/check_deposits/{check_deposit_id}/submit": {
      "post": {
        "description": "Simulates the submission of a [Check Deposit](#check-deposits) to the Federal Reserve. This Check Deposit must first have a `status` of `pending`.",
        "operationId": "sandbox_submit_a_check_deposit",
        "parameters": [
          {
            "example": "check_deposit_f06n9gpg7sxn8t19lfc1",
            "in": "path",
            "name": "check_deposit_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Check Deposit you wish to submit.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/check_deposit"
                }
              }
            },
            "description": "Check Deposit"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Sandbox: Submit a Check Deposit",
        "x-sandbox-only": true,
        "x-tag": "Check Deposits"
      }
    },
    "/simulations/check_transfers/{check_transfer_id}/mail": {
      "post": {
        "description": "Simulates the mailing of a [Check Transfer](#check-transfers), which happens periodically throughout the day in production but can be sped up in sandbox. This transfer must first have a `status` of `pending_approval` or `pending_submission`.",
        "operationId": "sandbox_mail_a_check_transfer",
        "parameters": [
          {
            "example": "check_transfer_30b43acfu9vw8fyc4f5",
            "in": "path",
            "name": "check_transfer_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Check Transfer you wish to mail.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/check_transfer"
                }
              }
            },
            "description": "Check Transfer"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Sandbox: Mail a Check Transfer",
        "x-sandbox-only": true,
        "x-tag": "Check Transfers"
      }
    },
    "/simulations/digital_wallet_token_requests": {
      "post": {
        "description": "Simulates a user attempting add a [Card](#cards) to a digital wallet such as Apple Pay.",
        "operationId": "sandbox_create_a_digital_wallet_token_request",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sandbox_create_a_digital_wallet_token_request_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inbound_digital_wallet_token_request_simulation_result"
                }
              }
            },
            "description": "Inbound Digital Wallet Token Request Simulation Result"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Sandbox: Create a digital wallet token request",
        "x-sandbox-only": true,
        "x-tag": "Digital Wallet Tokens"
      }
    },
    "/simulations/documents": {
      "post": {
        "description": "Simulates an tax document being created for an account.",
        "operationId": "sandbox_create_a_tax_document",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sandbox_create_a_tax_document_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/document"
                }
              }
            },
            "description": "Document"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Sandbox: Create a tax document",
        "x-sandbox-only": true,
        "x-tag": "Documents"
      }
    },
    "/simulations/inbound_ach_transfers": {
      "post": {
        "description": "Simulates an inbound ACH transfer to your account. This imitates initiating a transfer to an Increase account from a different financial institution. The transfer may be either a credit or a debit depending on if the `amount` is positive or negative. The result of calling this API will contain the created transfer. You can pass a `resolve_at` parameter to allow for a window to [action on the Inbound ACH Transfer](https://increase.com/documentation/receiving-ach-transfers). Alternatively, if you don't pass the `resolve_at` parameter the result will contain either a [Transaction](#transactions) or a [Declined Transaction](#declined-transactions) depending on whether or not the transfer is allowed.",
        "operationId": "sandbox_create_an_inbound_ach_transfer",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sandbox_create_an_inbound_ach_transfer_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inbound_ach_transfer"
                }
              }
            },
            "description": "Inbound ACH Transfer"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Sandbox: Create an Inbound ACH Transfer",
        "x-sandbox-only": true,
        "x-tag": "Inbound ACH Transfers"
      }
    },
    "/simulations/inbound_check_deposits": {
      "post": {
        "description": "Simulates an Inbound Check Deposit against your account. This imitates someone depositing a check at their bank that was issued from your account. It may or may not be associated with a Check Transfer. Increase will evaluate the Check Deposit as we would in production and either create a Transaction or a Declined Transaction as a result. You can inspect the resulting Inbound Check Deposit object to see the result.",
        "operationId": "sandbox_create_an_inbound_check_deposit",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sandbox_create_an_inbound_check_deposit_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inbound_check_deposit"
                }
              }
            },
            "description": "Inbound Check Deposit"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Sandbox: Create an Inbound Check Deposit",
        "x-sandbox-only": true,
        "x-tag": "Inbound Check Deposits"
      }
    },
    "/simulations/inbound_funds_holds/{inbound_funds_hold_id}/release": {
      "post": {
        "description": "This endpoint simulates immediately releasing an Inbound Funds Hold, which might be created as a result of e.g., an ACH debit.",
        "operationId": "sandbox_release_an_inbound_funds_hold",
        "parameters": [
          {
            "example": "inbound_funds_hold_9vuasmywdo7xb3zt4071",
            "in": "path",
            "name": "inbound_funds_hold_id",
            "required": true,
            "schema": {
              "description": "The inbound funds hold to release.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inbound_funds_hold"
                }
              }
            },
            "description": "Inbound Funds Hold"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Sandbox: Release an Inbound Funds Hold",
        "x-sandbox-only": true,
        "x-tag": "Pending Transactions"
      }
    },
    "/simulations/inbound_mail_items": {
      "post": {
        "description": "Simulates an inbound mail item to your account, as if someone had mailed a physical check to one of your account's Lockboxes.",
        "operationId": "sandbox_create_an_inbound_mail_item",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sandbox_create_an_inbound_mail_item_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inbound_mail_item"
                }
              }
            },
            "description": "Inbound Mail Item"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Sandbox: Create an Inbound Mail Item",
        "x-sandbox-only": true,
        "x-tag": "Inbound Mail Items"
      }
    },
    "/simulations/inbound_real_time_payments_transfers": {
      "post": {
        "description": "Simulates an [Inbound Real-Time Payments Transfer](#inbound-real-time-payments-transfers) to your account. Real-Time Payments are a beta feature.",
        "operationId": "sandbox_create_an_inbound_real_time_payments_transfer",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sandbox_create_an_inbound_real_time_payments_transfer_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inbound_real_time_payments_transfer"
                }
              }
            },
            "description": "Inbound Real-Time Payments Transfer"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Sandbox: Create an Inbound Real-Time Payments Transfer",
        "x-sandbox-only": true,
        "x-tag": "Inbound Real-Time Payments Transfers"
      }
    },
    "/simulations/inbound_wire_drawdown_requests": {
      "post": {
        "description": "Simulates receiving an [Inbound Wire Drawdown Request](#inbound-wire-drawdown-requests).",
        "operationId": "sandbox_create_an_inbound_wire_drawdown_request",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sandbox_create_an_inbound_wire_drawdown_request_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inbound_wire_drawdown_request"
                }
              }
            },
            "description": "Inbound Wire Drawdown Request"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Sandbox: Create an Inbound Wire Drawdown request",
        "x-sandbox-only": true,
        "x-tag": "Inbound Wire Drawdown Requests"
      }
    },
    "/simulations/inbound_wire_transfers": {
      "post": {
        "description": "Simulates an [Inbound Wire Transfer](#inbound-wire-transfers) to your account.",
        "operationId": "sandbox_create_an_inbound_wire_transfer",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sandbox_create_an_inbound_wire_transfer_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inbound_wire_transfer"
                }
              }
            },
            "description": "Inbound Wire Transfer"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Sandbox: Create an Inbound Wire Transfer",
        "x-sandbox-only": true,
        "x-tag": "Inbound Wire Transfers"
      }
    },
    "/simulations/interest_payments": {
      "post": {
        "description": "Simulates an interest payment to your account. In production, this happens automatically on the first of each month.",
        "operationId": "sandbox_create_an_interest_payment",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sandbox_create_an_interest_payment_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transaction"
                }
              }
            },
            "description": "Transaction"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Sandbox: Create an interest payment",
        "x-sandbox-only": true,
        "x-tag": "Accounts"
      }
    },
    "/simulations/physical_cards/{physical_card_id}/advance_shipment": {
      "post": {
        "description": "This endpoint allows you to simulate advancing the shipment status of a Physical Card, to simulate e.g., that a physical card was attempted shipped but then failed delivery.",
        "operationId": "sandbox_advance_the_shipment_status_of_a_physical_card",
        "parameters": [
          {
            "example": "physical_card_ode8duyq5v2ynhjoharl",
            "in": "path",
            "name": "physical_card_id",
            "required": true,
            "schema": {
              "description": "The Physical Card you would like to action.",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sandbox_advance_the_shipment_status_of_a_physical_card_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/physical_card"
                }
              }
            },
            "description": "Physical Card"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Sandbox: Advance the shipment status of a Physical Card",
        "x-sandbox-only": true,
        "x-tag": "Physical Cards"
      }
    },
    "/simulations/programs": {
      "post": {
        "description": "Simulates a [Program](#programs) being created in your group. By default, your group has one program called Commercial Banking. Note that when your group operates more than one program, `program_id` is a required field when creating accounts.",
        "operationId": "sandbox_create_a_program",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sandbox_create_a_program_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/program"
                }
              }
            },
            "description": "Program"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Sandbox: Create a Program",
        "x-sandbox-only": true,
        "x-tag": "Programs"
      }
    },
    "/simulations/real_time_payments_transfers/{real_time_payments_transfer_id}/complete": {
      "post": {
        "description": "Simulates submission of a [Real-Time Payments Transfer](#real-time-payments-transfers) and handling the response from the destination financial institution. This transfer must first have a `status` of `pending_submission`.",
        "operationId": "sandbox_complete_a_real_time_payments_transfer",
        "parameters": [
          {
            "example": "real_time_payments_transfer_iyuhl5kdn7ssmup83mvq",
            "in": "path",
            "name": "real_time_payments_transfer_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Real-Time Payments Transfer you wish to complete.",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sandbox_complete_a_real_time_payments_transfer_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/real_time_payments_transfer"
                }
              }
            },
            "description": "Real-Time Payments Transfer"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Sandbox: Complete a Real-Time Payments Transfer",
        "x-sandbox-only": true,
        "x-tag": "Real-Time Payments Transfers"
      }
    },
    "/simulations/wire_transfers/{wire_transfer_id}/reverse": {
      "post": {
        "description": "Simulates the reversal of a [Wire Transfer](#wire-transfers) by the Federal Reserve due to error conditions. This will also create a [Transaction](#transaction) to account for the returned funds. This Wire Transfer must first have a `status` of `complete`.",
        "operationId": "sandbox_reverse_a_wire_transfer",
        "parameters": [
          {
            "example": "wire_transfer_5akynk7dqsq25qwk9q2u",
            "in": "path",
            "name": "wire_transfer_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Wire Transfer you wish to reverse.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wire_transfer"
                }
              }
            },
            "description": "Wire Transfer"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Sandbox: Reverse a Wire Transfer",
        "x-sandbox-only": true,
        "x-tag": "Wire Transfers"
      }
    },
    "/simulations/wire_transfers/{wire_transfer_id}/submit": {
      "post": {
        "description": "Simulates the submission of a [Wire Transfer](#wire-transfers) to the Federal Reserve. This transfer must first have a `status` of `pending_approval` or `pending_creating`.",
        "operationId": "sandbox_submit_a_wire_transfer",
        "parameters": [
          {
            "example": "wire_transfer_5akynk7dqsq25qwk9q2u",
            "in": "path",
            "name": "wire_transfer_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Wire Transfer you wish to submit.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wire_transfer"
                }
              }
            },
            "description": "Wire Transfer"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Sandbox: Submit a Wire Transfer",
        "x-sandbox-only": true,
        "x-tag": "Wire Transfers"
      }
    },
    "/transactions": {
      "get": {
        "operationId": "list_transactions",
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "description": "Return the page of entries after this one.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "description": "Limit the size of the list that is returned. The default (and maximum) is 100 objects.",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "account_id",
            "required": false,
            "schema": {
              "description": "Filter Transactions for those belonging to the specified Account.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.after",
            "required": false,
            "schema": {
              "description": "Return results after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.before",
            "required": false,
            "schema": {
              "description": "Return results before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_after",
            "required": false,
            "schema": {
              "description": "Return results on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_before",
            "required": false,
            "schema": {
              "description": "Return results on or before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "category.in",
            "required": false,
            "schema": {
              "description": "Return results whose value is in the provided list. For GET requests, this should be encoded as a comma-delimited string, such as `?in=one,two,three`.",
              "items": {
                "enum": [
                  "account_transfer_intention",
                  "ach_transfer_intention",
                  "ach_transfer_rejection",
                  "ach_transfer_return",
                  "cashback_payment",
                  "card_dispute_acceptance",
                  "card_dispute_loss",
                  "card_refund",
                  "card_settlement",
                  "card_revenue_payment",
                  "check_deposit_acceptance",
                  "check_deposit_return",
                  "check_transfer_deposit",
                  "fee_payment",
                  "inbound_ach_transfer",
                  "inbound_ach_transfer_return_intention",
                  "inbound_check_deposit_return_intention",
                  "inbound_check_adjustment",
                  "inbound_real_time_payments_transfer_confirmation",
                  "inbound_real_time_payments_transfer_decline",
                  "inbound_wire_reversal",
                  "inbound_wire_transfer",
                  "inbound_wire_transfer_reversal",
                  "interest_payment",
                  "internal_source",
                  "real_time_payments_transfer_acknowledgement",
                  "sample_funds",
                  "wire_transfer_intention",
                  "other"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "Account Transfer Intention: details will be under the `account_transfer_intention` object.",
                  "ACH Transfer Intention: details will be under the `ach_transfer_intention` object.",
                  "ACH Transfer Rejection: details will be under the `ach_transfer_rejection` object.",
                  "ACH Transfer Return: details will be under the `ach_transfer_return` object.",
                  "Cashback Payment: details will be under the `cashback_payment` object.",
                  "Card Dispute Acceptance: details will be under the `card_dispute_acceptance` object.",
                  "Card Dispute Loss: details will be under the `card_dispute_loss` object.",
                  "Card Refund: details will be under the `card_refund` object.",
                  "Card Settlement: details will be under the `card_settlement` object.",
                  "Card Revenue Payment: details will be under the `card_revenue_payment` object.",
                  "Check Deposit Acceptance: details will be under the `check_deposit_acceptance` object.",
                  "Check Deposit Return: details will be under the `check_deposit_return` object.",
                  "Check Transfer Deposit: details will be under the `check_transfer_deposit` object.",
                  "Fee Payment: details will be under the `fee_payment` object.",
                  "Inbound ACH Transfer Intention: details will be under the `inbound_ach_transfer` object.",
                  "Inbound ACH Transfer Return Intention: details will be under the `inbound_ach_transfer_return_intention` object.",
                  "Inbound Check Deposit Return Intention: details will be under the `inbound_check_deposit_return_intention` object.",
                  "Inbound Check Adjustment: details will be under the `inbound_check_adjustment` object.",
                  "Inbound Real-Time Payments Transfer Confirmation: details will be under the `inbound_real_time_payments_transfer_confirmation` object.",
                  "Inbound Real-Time Payments Transfer Decline: details will be under the `inbound_real_time_payments_transfer_decline` object.",
                  "Inbound Wire Reversal: details will be under the `inbound_wire_reversal` object.",
                  "Inbound Wire Transfer Intention: details will be under the `inbound_wire_transfer` object.",
                  "Inbound Wire Transfer Reversal Intention: details will be under the `inbound_wire_transfer_reversal` object.",
                  "Interest Payment: details will be under the `interest_payment` object.",
                  "Internal Source: details will be under the `internal_source` object.",
                  "Real-Time Payments Transfer Acknowledgement: details will be under the `real_time_payments_transfer_acknowledgement` object.",
                  "Sample Funds: details will be under the `sample_funds` object.",
                  "Wire Transfer Intention: details will be under the `wire_transfer_intention` object.",
                  "The Transaction was made for an undocumented or deprecated reason."
                ]
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "route_id",
            "required": false,
            "schema": {
              "description": "Filter Transactions for those belonging to the specified route. This could be a Card ID or an Account Number ID.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transaction_list"
                }
              }
            },
            "description": "Transaction List"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "List Transactions",
        "x-sandbox-only": false,
        "x-tag": "Transactions"
      }
    },
    "/transactions/{transaction_id}": {
      "get": {
        "operationId": "retrieve_a_transaction",
        "parameters": [
          {
            "example": "transaction_uyrp7fld2ium70oa7oi",
            "in": "path",
            "name": "transaction_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Transaction to retrieve.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transaction"
                }
              }
            },
            "description": "Transaction"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Retrieve a Transaction",
        "x-sandbox-only": false,
        "x-tag": "Transactions"
      }
    },
    "/wire_drawdown_requests": {
      "get": {
        "operationId": "list_wire_drawdown_requests",
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "description": "Return the page of entries after this one.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "description": "Limit the size of the list that is returned. The default (and maximum) is 100 objects.",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "status.in",
            "required": false,
            "schema": {
              "description": "Filter Wire Drawdown Requests for those with the specified status. For GET requests, this should be encoded as a comma-delimited string, such as `?in=one,two,three`.",
              "items": {
                "enum": [
                  "pending_submission",
                  "pending_response",
                  "fulfilled",
                  "refused"
                ],
                "type": "string",
                "x-enum-descriptions": [
                  "The drawdown request is queued to be submitted to Fedwire.",
                  "The drawdown request has been sent and the recipient should respond in some way.",
                  "The drawdown request has been fulfilled by the recipient.",
                  "The drawdown request has been refused by the recipient."
                ]
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "idempotency_key",
            "required": false,
            "schema": {
              "description": "Filter records to the one with the specified `idempotency_key` you chose for that object. This value is unique across Increase and is used to ensure that a request is only processed once. Learn more about [idempotency](https://increase.com/documentation/idempotency-keys).",
              "maxLength": 200,
              "minLength": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wire_drawdown_request_list"
                }
              }
            },
            "description": "Wire Drawdown Request List"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "List Wire Drawdown Requests",
        "x-sandbox-only": false,
        "x-tag": "Wire Drawdown Requests"
      },
      "post": {
        "operationId": "create_a_wire_drawdown_request",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_a_wire_drawdown_request_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wire_drawdown_request"
                }
              }
            },
            "description": "Wire Drawdown Request"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Create a Wire Drawdown Request",
        "x-sandbox-only": false,
        "x-tag": "Wire Drawdown Requests"
      }
    },
    "/wire_drawdown_requests/{wire_drawdown_request_id}": {
      "get": {
        "operationId": "retrieve_a_wire_drawdown_request",
        "parameters": [
          {
            "example": "wire_drawdown_request_q6lmocus3glo0lr2bfv3",
            "in": "path",
            "name": "wire_drawdown_request_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Wire Drawdown Request to retrieve.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wire_drawdown_request"
                }
              }
            },
            "description": "Wire Drawdown Request"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Retrieve a Wire Drawdown Request",
        "x-sandbox-only": false,
        "x-tag": "Wire Drawdown Requests"
      }
    },
    "/wire_transfers": {
      "get": {
        "operationId": "list_wire_transfers",
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "description": "Return the page of entries after this one.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "description": "Limit the size of the list that is returned. The default (and maximum) is 100 objects.",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "example": "account_in71c4amph0vgo2qllky",
            "in": "query",
            "name": "account_id",
            "required": false,
            "schema": {
              "description": "Filter Wire Transfers to those belonging to the specified Account.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "external_account_id",
            "required": false,
            "schema": {
              "description": "Filter Wire Transfers to those made to the specified External Account.",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "idempotency_key",
            "required": false,
            "schema": {
              "description": "Filter records to the one with the specified `idempotency_key` you chose for that object. This value is unique across Increase and is used to ensure that a request is only processed once. Learn more about [idempotency](https://increase.com/documentation/idempotency-keys).",
              "maxLength": 200,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.after",
            "required": false,
            "schema": {
              "description": "Return results after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.before",
            "required": false,
            "schema": {
              "description": "Return results before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_after",
            "required": false,
            "schema": {
              "description": "Return results on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created_at.on_or_before",
            "required": false,
            "schema": {
              "description": "Return results on or before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.",
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wire_transfer_list"
                }
              }
            },
            "description": "Wire Transfer List"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "List Wire Transfers",
        "x-sandbox-only": false,
        "x-tag": "Wire Transfers"
      },
      "post": {
        "operationId": "create_a_wire_transfer",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_a_wire_transfer_parameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wire_transfer"
                }
              }
            },
            "description": "Wire Transfer"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Create a Wire Transfer",
        "x-sandbox-only": false,
        "x-tag": "Wire Transfers"
      }
    },
    "/wire_transfers/{wire_transfer_id}": {
      "get": {
        "operationId": "retrieve_a_wire_transfer",
        "parameters": [
          {
            "example": "wire_transfer_5akynk7dqsq25qwk9q2u",
            "in": "path",
            "name": "wire_transfer_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Wire Transfer.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wire_transfer"
                }
              }
            },
            "description": "Wire Transfer"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Retrieve a Wire Transfer",
        "x-sandbox-only": false,
        "x-tag": "Wire Transfers"
      }
    },
    "/wire_transfers/{wire_transfer_id}/approve": {
      "post": {
        "operationId": "approve_a_wire_transfer",
        "parameters": [
          {
            "example": "wire_transfer_5akynk7dqsq25qwk9q2u",
            "in": "path",
            "name": "wire_transfer_id",
            "required": true,
            "schema": {
              "description": "The identifier of the Wire Transfer to approve.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wire_transfer"
                }
              }
            },
            "description": "Wire Transfer"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Approve a Wire Transfer",
        "x-sandbox-only": false,
        "x-tag": "Wire Transfers"
      }
    },
    "/wire_transfers/{wire_transfer_id}/cancel": {
      "post": {
        "operationId": "cancel_a_pending_wire_transfer",
        "parameters": [
          {
            "example": "wire_transfer_5akynk7dqsq25qwk9q2u",
            "in": "path",
            "name": "wire_transfer_id",
            "required": true,
            "schema": {
              "description": "The identifier of the pending Wire Transfer to cancel.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wire_transfer"
                }
              }
            },
            "description": "Wire Transfer"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Cancel a pending Wire Transfer",
        "x-sandbox-only": false,
        "x-tag": "Wire Transfers"
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "servers": [
    {
      "url": "https://api.increase.com"
    },
    {
      "url": "https://sandbox.increase.com"
    }
  ],
  "tags": [
    {
      "description": "Accounts are your bank accounts with Increase. They store money, receive transfers, and send payments. They earn interest and have depository insurance.",
      "name": "Accounts"
    },
    {
      "description": "Each account can have multiple account and routing numbers. We recommend that you use a set per vendor. This is similar to how you use different passwords for different websites. Account numbers can also be used to seamlessly reconcile inbound payments. Generating a unique account number per vendor ensures you always know the originator of an incoming payment.",
      "name": "Account Numbers"
    },
    {
      "description": "Cards are commercial credit cards. They'll immediately work for online purchases after you create them. All cards maintain a credit limit of 100% of the Account\u2019s available balance at the time of transaction. Funds are deducted from the Account upon transaction settlement.",
      "name": "Cards"
    },
    {
      "description": "Card Payments group together interactions related to a single card payment, such as an authorization and its corresponding settlement.",
      "name": "Card Payments"
    },
    {
      "description": "Additional information about a card purchase (e.g., settlement or refund), such as level 3 line item data.",
      "name": "Card Purchase Supplements"
    },
    {
      "description": "If unauthorized activity occurs on a card, you can create a Card Dispute and we'll return the funds if appropriate.",
      "name": "Card Disputes"
    },
    {
      "description": "Custom physical Visa cards that are shipped to your customers. The artwork is configurable by a connected [Card Profile](/documentation/api#card-profiles). The same Card can be used for multiple Physical Cards. Printing cards incurs a fee. Please contact [support@increase.com](mailto:support@increase.com) for pricing!",
      "name": "Physical Cards"
    },
    {
      "description": "This contains artwork and metadata relating to a Card's appearance in digital wallet apps like Apple Pay and Google Pay. For more information, see our guide on [digital card artwork](https://increase.com/documentation/card-art).",
      "name": "Digital Card Profiles"
    },
    {
      "description": "This contains artwork and metadata relating to a Physical Card's appearance. For more information, see our guide on [physical card artwork](https://increase.com/documentation/card-art-physical-cards).",
      "name": "Physical Card Profiles"
    },
    {
      "description": "A Digital Wallet Token is created when a user adds a Card to their Apple Pay or Google Pay app. The Digital Wallet Token can be used for purchases just like a Card.",
      "name": "Digital Wallet Tokens"
    },
    {
      "description": "Transactions are the immutable additions and removals of money from your bank account. They're the equivalent of line items on your bank statement.",
      "name": "Transactions"
    },
    {
      "description": "Pending Transactions are potential future additions and removals of money from your bank account.",
      "name": "Pending Transactions"
    },
    {
      "description": "Declined Transactions are refused additions and removals of money from your bank account. For example, Declined Transactions are caused when your Account has an insufficient balance or your Limits are triggered.",
      "name": "Declined Transactions"
    },
    {
      "description": "Account transfers move funds between your own accounts at Increase.",
      "name": "Account Transfers"
    },
    {
      "description": "ACH transfers move funds between your Increase account and any other account accessible by the Automated Clearing House (ACH).",
      "name": "ACH Transfers"
    },
    {
      "description": "ACH Prenotifications are one way you can verify account and routing numbers by Automated Clearing House (ACH).",
      "name": "ACH Prenotifications"
    },
    {
      "description": "An Inbound ACH Transfer is an ACH transfer initiated outside of Increase to your account.",
      "name": "Inbound ACH Transfers"
    },
    {
      "description": "Wire transfers move funds between your Increase account and any other account accessible by Fedwire.",
      "name": "Wire Transfers"
    },
    {
      "description": "An Inbound Wire Transfer is a wire transfer initiated outside of Increase to your account.",
      "name": "Inbound Wire Transfers"
    },
    {
      "description": "Wire drawdown requests enable you to request that someone else send you a wire. This feature is in beta; reach out to [support@increase.com](mailto:support@increase.com) to learn more.",
      "name": "Wire Drawdown Requests"
    },
    {
      "description": "Inbound wire drawdown requests are requests from someone else to send them a wire. This feature is in beta; reach out to [support@increase.com](mailto:support@increase.com) to learn more.",
      "name": "Inbound Wire Drawdown Requests"
    },
    {
      "description": "Check Transfers move funds from your Increase account by mailing a physical check.",
      "name": "Check Transfers"
    },
    {
      "description": "Inbound Check Deposits are records of third-parties attempting to deposit checks against your account.",
      "name": "Inbound Check Deposits"
    },
    {
      "description": "Real-Time Payments transfers move funds, within seconds, between your Increase account and any other account on the Real-Time Payments network.",
      "name": "Real-Time Payments Transfers"
    },
    {
      "description": "An Inbound Real-Time Payments Transfer is a Real-Time Payments transfer initiated outside of Increase to your account.",
      "name": "Inbound Real-Time Payments Transfers"
    },
    {
      "description": "Check Deposits allow you to deposit images of paper checks into your account.",
      "name": "Check Deposits"
    },
    {
      "description": "Lockboxes are physical locations that can receive mail containing paper checks. Increase will automatically create a Check Deposit for checks received this way.",
      "name": "Lockboxes"
    },
    {
      "description": "Inbound Mail Items represent pieces of physical mail delivered to a Lockbox.",
      "name": "Inbound Mail Items"
    },
    {
      "description": "Routing numbers are used to identify your bank in a financial transaction.",
      "name": "Routing Numbers"
    },
    {
      "description": "External Accounts represent accounts at financial institutions other than Increase. You can use this API to store their details for reuse.",
      "name": "External Accounts"
    },
    {
      "description": "Entities are the legal entities that own accounts. They can be people, corporations, partnerships, government authorities, or trusts.",
      "name": "Entities"
    },
    {
      "description": "Supplemental Documents are uploaded files connected to an Entity during onboarding.",
      "name": "Supplemental Documents"
    },
    {
      "description": "Programs determine the compliance and commercial terms of Accounts. By default, you have a Commercial Banking program for managing your own funds. If you are lending or managing funds on behalf of your customers, or otherwise engaged in regulated activity, we will work together to create additional Programs for you.",
      "name": "Programs"
    },
    {
      "description": "A request for proof of authorization for one or more ACH debit transfers.",
      "name": "Proof of Authorization Requests"
    },
    {
      "description": "Information submitted in response to a proof of authorization request. Per Nacha's guidance on proof of authorization, the originator must ensure that the authorization complies with applicable legal requirements, is readily identifiable as an authorization, and has clear and readily understandable terms.",
      "name": "Proof of Authorization Request Submissions"
    },
    {
      "description": "Account Statements are generated monthly for every active Account. You can access the statement's data via the API or retrieve a PDF with its details via its associated File.",
      "name": "Account Statements"
    },
    {
      "description": "Files are objects that represent a file hosted on Increase's servers. The file may have been uploaded by you (for example, when uploading a check image) or it may have been created by Increase (for example, an autogenerated statement PDF). If you need to download a File, create a File Link.",
      "name": "Files"
    },
    {
      "description": "File Links let you generate a URL that can be used to download a File.",
      "name": "File Links"
    },
    {
      "description": "Increase generates certain documents / forms automatically for your application; they can be listed here.",
      "name": "Documents"
    },
    {
      "description": "Exports are batch summaries of your Increase data. You can make them from the API or dashboard. Since they can take a while, they are generated asynchronously. We send a webhook when they are ready. For more information, please read our [Exports documentation](https://increase.com/documentation/exports).",
      "name": "Exports"
    },
    {
      "description": "Events are records of things that happened to objects at Increase. Events are accessible via the List Events endpoint and can be delivered to your application via webhooks. For more information, see our [webhooks guide](https://increase.com/documentation/webhooks).",
      "name": "Events"
    },
    {
      "description": "Webhooks are event notifications we send to you by HTTPS POST requests. Event Subscriptions are how you configure your application to listen for them. You can create an Event Subscription through your [developer dashboard](https://dashboard.increase.com/developers/webhooks) or the API. For more information, see our [webhooks guide](https://increase.com/documentation/webhooks).",
      "name": "Event Subscriptions"
    },
    {
      "description": "Real Time Decisions are created when your application needs to take action in real-time to some event such as a card authorization. For more information, see our [Real-Time Decisions guide](https://increase.com/documentation/real-time-decisions).",
      "name": "Real-Time Decisions"
    },
    {
      "description": "Accounts are T-accounts. They can store accounting entries. Your compliance setup might require annotating money movements using this API. Learn more in our [guide to Bookkeeping](https://increase.com/documentation/bookkeeping#bookkeeping).",
      "name": "Bookkeeping Accounts"
    },
    {
      "description": "Entry Sets are accounting entries that are transactionally applied. Your compliance setup might require annotating money movements using this API. Learn more in our [guide to Bookkeeping](https://increase.com/documentation/bookkeeping#bookkeeping).",
      "name": "Bookkeeping Entry Sets"
    },
    {
      "description": "Entries are T-account entries recording debits and credits. Your compliance setup might require annotating money movements using this API. Learn more in our [guide to Bookkeeping](https://increase.com/documentation/bookkeeping#bookkeeping).",
      "name": "Bookkeeping Entries"
    },
    {
      "description": "Groups represent organizations using Increase. You can retrieve information about your own organization via the API. More commonly, OAuth platforms can retrieve information about the organizations that have granted them access. Learn more about OAuth [here](https://increase.com/documentation/oauth).",
      "name": "Groups"
    },
    {
      "description": "An OAuth Application lets you build an application for others to use with their Increase data. You can create an OAuth Application via the Dashboard and read information about it with the API. Learn more about OAuth [here](https://increase.com/documentation/oauth).",
      "name": "OAuth Applications"
    },
    {
      "description": "When a user authorizes your OAuth application, an OAuth Connection object is created. Learn more about OAuth [here](https://increase.com/documentation/oauth).",
      "name": "OAuth Connections"
    },
    {
      "description": "A token that is returned to your application when a user completes the OAuth flow and may be used to authenticate requests. Learn more about OAuth [here](/documentation/oauth).",
      "name": "OAuth Tokens"
    },
    {
      "description": "IntraFi is a [network of financial institutions](https://www.intrafi.com/network-banks) that allows Increase users to sweep funds to multiple banks, in addition to Increase's main bank partners. This enables accounts to become eligible for additional Federal Deposit Insurance Corporation (FDIC) insurance. An IntraFi Account Enrollment object represents the status of an account in the network. Sweeping an account to IntraFi doesn't affect funds availability.",
      "name": "IntraFi Account Enrollments"
    },
    {
      "description": "When using IntraFi, each account's balance over the standard FDIC insurance amount are swept to various other institutions. Funds are rebalanced across banks as needed once per business day.",
      "name": "IntraFi Balances"
    },
    {
      "description": "Certain institutions may be excluded per Entity when sweeping funds into the IntraFi network. This is useful when an Entity already has deposits at a particular bank, and does not want to sweep additional funds to it. It may take 5 business days for an exclusion to be processed.",
      "name": "IntraFi Exclusions"
    }
  ],
  "x-tagGroups": [
    {
      "name": "Accounts",
      "tags": [
        "Accounts",
        "Account Numbers"
      ]
    },
    {
      "name": "Transactions",
      "tags": [
        "Transactions",
        "Pending Transactions",
        "Declined Transactions"
      ]
    },
    {
      "name": "Transfers",
      "tags": [
        "Account Transfers",
        "ACH Transfers",
        "ACH Prenotifications",
        "Inbound ACH Transfers",
        "Wire Transfers",
        "Inbound Wire Transfers",
        "Wire Drawdown Requests",
        "Inbound Wire Drawdown Requests",
        "Check Transfers",
        "Inbound Check Deposits",
        "Real-Time Payments Transfers",
        "Inbound Real-Time Payments Transfers",
        "Check Deposits",
        "Lockboxes",
        "Inbound Mail Items"
      ]
    },
    {
      "name": "Cards",
      "tags": [
        "Cards",
        "Card Payments",
        "Card Purchase Supplements",
        "Card Disputes",
        "Physical Cards",
        "Digital Card Profiles",
        "Physical Card Profiles",
        "Digital Wallet Tokens"
      ]
    },
    {
      "name": "Compliance",
      "tags": [
        "Entities",
        "Supplemental Documents",
        "Programs",
        "Proof of Authorization Requests",
        "Proof of Authorization Request Submissions"
      ]
    },
    {
      "name": "Events and Webhooks",
      "tags": [
        "Events",
        "Event Subscriptions",
        "Real-Time Decisions"
      ]
    },
    {
      "name": "External Accounts",
      "tags": [
        "Routing Numbers",
        "External Accounts"
      ]
    },
    {
      "name": "Files and Exports",
      "tags": [
        "Account Statements",
        "Files",
        "File Links",
        "Documents",
        "Exports"
      ]
    },
    {
      "name": "Bookkeeping",
      "tags": [
        "Bookkeeping Accounts",
        "Bookkeeping Entry Sets",
        "Bookkeeping Entries"
      ]
    },
    {
      "name": "OAuth",
      "tags": [
        "Groups",
        "OAuth Applications",
        "OAuth Connections",
        "OAuth Tokens"
      ]
    },
    {
      "name": "Intrafi",
      "tags": [
        "IntraFi Account Enrollments",
        "IntraFi Balances",
        "IntraFi Exclusions"
      ]
    }
  ]
}